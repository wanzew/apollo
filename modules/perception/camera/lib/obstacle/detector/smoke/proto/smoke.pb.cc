// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/detector/smoke/proto/smoke.proto

#include "modules/perception/camera/lib/obstacle/detector/smoke/proto/smoke.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace smoke {
PROTOBUF_CONSTEXPR SmokeParam::SmokeParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_param_)*/nullptr
  , /*decltype(_impl_.net_param_)*/nullptr
  , /*decltype(_impl_.nms_param_)*/nullptr} {}
struct SmokeParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmokeParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmokeParamDefaultTypeInternal() {}
  union {
    SmokeParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmokeParamDefaultTypeInternal _SmokeParam_default_instance_;
PROTOBUF_CONSTEXPR ModelParam::ModelParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dimension_statistics_)*/{}
  , /*decltype(_impl_.bbox_statistics_)*/{}
  , /*decltype(_impl_.model_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.anchors_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.types_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feature_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibratetable_root_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expand_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage1_pt_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage1_md_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage2_pt_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage2_md_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_2d_height_)*/0
  , /*decltype(_impl_.min_3d_height_)*/0
  , /*decltype(_impl_.min_3d_width_)*/0
  , /*decltype(_impl_.min_3d_length_)*/0
  , /*decltype(_impl_.per_cls_reg_)*/false
  , /*decltype(_impl_.with_box3d_)*/false
  , /*decltype(_impl_.with_frbox_)*/false
  , /*decltype(_impl_.with_lights_)*/false
  , /*decltype(_impl_.with_ratios_)*/false
  , /*decltype(_impl_.num_areas_)*/0
  , /*decltype(_impl_.offset_ratio_)*/0.288889f
  , /*decltype(_impl_.confidence_threshold_)*/0.1f
  , /*decltype(_impl_.cropped_ratio_)*/0.711111f
  , /*decltype(_impl_.resized_width_)*/1440
  , /*decltype(_impl_.aligned_pixel_)*/32
  , /*decltype(_impl_.ori_cycle_)*/1
  , /*decltype(_impl_.roi_conf_threshold_)*/0.1f
  , /*decltype(_impl_.box_conf_threshold_)*/0.5f
  , /*decltype(_impl_.stage2_nms_threshold_)*/0.4f
  , /*decltype(_impl_.light_vis_conf_threshold_)*/0.5f
  , /*decltype(_impl_.light_swt_conf_threshold_)*/0.5f
  , /*decltype(_impl_.border_ratio_)*/0.01f} {}
struct ModelParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelParamDefaultTypeInternal() {}
  union {
    ModelParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelParamDefaultTypeInternal _ModelParam_default_instance_;
PROTOBUF_CONSTEXPR NetworkParam::NetworkParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.det1_loc_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det1_obj_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det1_cls_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det1_ori_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det1_ori_conf_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det1_dim_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_loc_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_obj_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_cls_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_ori_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_ori_conf_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det2_dim_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_loc_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_obj_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_cls_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_ori_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_ori_conf_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.det3_dim_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lof_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lor_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rois_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feat_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.box_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iou_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.brvis_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.brswt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ltvis_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ltswt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtvis_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rtswt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.area_id_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.visible_ratio_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cut_off_ratio_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_data_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_ratio_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_instric_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}} {}
struct NetworkParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkParamDefaultTypeInternal() {}
  union {
    NetworkParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
PROTOBUF_CONSTEXPR NMSParam::NMSParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.threshold_)*/0.4f
  , /*decltype(_impl_.sigma_)*/0.4f
  , /*decltype(_impl_.inter_cls_conf_thresh_)*/0.1f
  , /*decltype(_impl_.inter_cls_nms_thresh_)*/1} {}
struct NMSParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NMSParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NMSParamDefaultTypeInternal() {}
  union {
    NMSParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NMSParamDefaultTypeInternal _NMSParam_default_instance_;
PROTOBUF_CONSTEXPR BBoxStatistics::BBoxStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mean_)*/{}
  , /*decltype(_impl_.std_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BBoxStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BBoxStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BBoxStatisticsDefaultTypeInternal() {}
  union {
    BBoxStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BBoxStatisticsDefaultTypeInternal _BBoxStatistics_default_instance_;
PROTOBUF_CONSTEXPR DimensionStatistics::DimensionStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mean_h_)*/0
  , /*decltype(_impl_.mean_w_)*/0
  , /*decltype(_impl_.mean_l_)*/0
  , /*decltype(_impl_.std_l_)*/1
  , /*decltype(_impl_.std_h_)*/1
  , /*decltype(_impl_.std_w_)*/1} {}
struct DimensionStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionStatisticsDefaultTypeInternal() {}
  union {
    DimensionStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionStatisticsDefaultTypeInternal _DimensionStatistics_default_instance_;
}  // namespace smoke
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _impl_.model_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _impl_.net_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::SmokeParam, _impl_.nms_param_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.proto_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.weight_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.stage1_pt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.stage1_md_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.stage2_pt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.stage2_md_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.anchors_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.types_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.feature_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.offset_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.cropped_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.resized_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.aligned_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.light_vis_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.light_swt_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.roi_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.box_conf_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.stage2_nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.min_2d_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.min_3d_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.min_3d_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.min_3d_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.calibratetable_root_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.ori_cycle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.per_cls_reg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.dimension_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.bbox_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.expand_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.with_box3d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.with_frbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.with_lights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.with_ratios_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.num_areas_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::ModelParam, _impl_.border_ratio_),
  0,
  1,
  2,
  9,
  10,
  11,
  12,
  3,
  4,
  5,
  23,
  25,
  26,
  27,
  24,
  32,
  33,
  29,
  30,
  31,
  13,
  14,
  15,
  16,
  6,
  7,
  28,
  17,
  ~0u,
  ~0u,
  8,
  18,
  19,
  20,
  21,
  22,
  34,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det1_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det2_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_loc_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_obj_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_cls_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_ori_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_ori_conf_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.det3_dim_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.lof_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.lor_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.input_data_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.input_ratio_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.input_instric_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.rois_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.feat_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.box_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.iou_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.brvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.brswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.ltvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.ltswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.rtvis_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.rtswt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.area_id_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.visible_ratio_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NetworkParam, _impl_.cut_off_ratio_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  33,
  34,
  35,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_.sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_.inter_cls_conf_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::NMSParam, _impl_.inter_cls_nms_thresh_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, _impl_.mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::BBoxStatistics, _impl_.std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.mean_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.mean_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.mean_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.std_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.std_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::smoke::DimensionStatistics, _impl_.std_l_),
  0,
  1,
  2,
  4,
  5,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::camera::smoke::SmokeParam)},
  { 12, 55, -1, sizeof(::apollo::perception::camera::smoke::ModelParam)},
  { 92, 134, -1, sizeof(::apollo::perception::camera::smoke::NetworkParam)},
  { 170, 181, -1, sizeof(::apollo::perception::camera::smoke::NMSParam)},
  { 186, -1, -1, sizeof(::apollo::perception::camera::smoke::BBoxStatistics)},
  { 194, 206, -1, sizeof(::apollo::perception::camera::smoke::DimensionStatistics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::smoke::_SmokeParam_default_instance_._instance,
  &::apollo::perception::camera::smoke::_ModelParam_default_instance_._instance,
  &::apollo::perception::camera::smoke::_NetworkParam_default_instance_._instance,
  &::apollo::perception::camera::smoke::_NMSParam_default_instance_._instance,
  &::apollo::perception::camera::smoke::_BBoxStatistics_default_instance_._instance,
  &::apollo::perception::camera::smoke::_DimensionStatistics_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nGmodules/perception/camera/lib/obstacle"
  "/detector/smoke/proto/smoke.proto\022\036apoll"
  "o.perception.camera.smoke\"\313\001\n\nSmokeParam"
  "\022\?\n\013model_param\030\001 \001(\0132*.apollo.perceptio"
  "n.camera.smoke.ModelParam\022\?\n\tnet_param\030\002"
  " \001(\0132,.apollo.perception.camera.smoke.Ne"
  "tworkParam\022;\n\tnms_param\030\003 \001(\0132(.apollo.p"
  "erception.camera.smoke.NMSParam\"\313\t\n\nMode"
  "lParam\022\033\n\nmodel_name\030\001 \001(\t:\007yolo-2d\022\034\n\np"
  "roto_file\030\002 \001(\t:\010caffe.pt\022 \n\013weight_file"
  "\030\003 \001(\t:\013caffe.model\022\033\n\tstage1_pt\030\025 \001(\t:\010"
  "caffe.pt\022\036\n\tstage1_md\030\026 \001(\t:\013caffe.model"
  "\022\033\n\tstage2_pt\030\027 \001(\t:\010caffe.pt\022\036\n\tstage2_"
  "md\030\030 \001(\t:\013caffe.model\022!\n\014anchors_file\030\004 "
  "\001(\t:\013anchors.txt\022\035\n\ntypes_file\030\005 \001(\t:\tty"
  "pes.txt\022 \n\014feature_file\030\006 \001(\t:\nfeature.p"
  "t\022\036\n\014offset_ratio\030\007 \001(\002:\0100.288889\022\037\n\rcro"
  "pped_ratio\030\r \001(\002:\0100.711111\022\033\n\rresized_wi"
  "dth\030\016 \001(\005:\0041440\022\031\n\raligned_pixel\030\017 \001(\005:\002"
  "32\022!\n\024confidence_threshold\030\010 \001(\002:\0030.1\022%\n"
  "\030light_vis_conf_threshold\030! \001(\002:\0030.5\022%\n\030"
  "light_swt_conf_threshold\030\" \001(\002:\0030.5\022\037\n\022r"
  "oi_conf_threshold\030\031 \001(\002:\0030.1\022\037\n\022box_conf"
  "_threshold\030\032 \001(\002:\0030.5\022!\n\024stage2_nms_thre"
  "shold\030\033 \001(\002:\0030.4\022\030\n\rmin_2d_height\030\t \001(\002:"
  "\0010\022\030\n\rmin_3d_height\030\036 \001(\002:\0010\022\027\n\014min_3d_w"
  "idth\030\037 \001(\002:\0010\022\030\n\rmin_3d_length\030  \001(\002:\0010\022"
  "\037\n\023calibratetable_root\030\013 \001(\t:\002./\022\034\n\nmode"
  "l_type\030\014 \001(\t:\010CaffeNet\022\024\n\tori_cycle\030\020 \001("
  "\005:\0011\022\032\n\013per_cls_reg\030\021 \001(\010:\005false\022Q\n\024dime"
  "nsion_statistics\030\022 \003(\01323.apollo.percepti"
  "on.camera.smoke.DimensionStatistics\022G\n\017b"
  "box_statistics\030\023 \003(\0132..apollo.perception"
  ".camera.smoke.BBoxStatistics\022\037\n\013expand_f"
  "ile\030\024 \001(\t:\nexpand.txt\022\031\n\nwith_box3d\030) \001("
  "\010:\005false\022\031\n\nwith_frbox\030* \001(\010:\005false\022\032\n\013w"
  "ith_lights\030+ \001(\010:\005false\022\032\n\013with_ratios\030,"
  " \001(\010:\005false\022\024\n\tnum_areas\030. \001(\005:\0010\022\032\n\014bor"
  "der_ratio\030- \001(\002:\0040.01\"\311\n\n\014NetworkParam\022\'"
  "\n\rdet1_loc_blob\030\001 \001(\t:\020detect1_loc_pred\022"
  "\'\n\rdet1_obj_blob\030\002 \001(\t:\020detect1_obj_pred"
  "\022\'\n\rdet1_cls_blob\030\003 \001(\t:\020detect1_cls_pre"
  "d\022\'\n\rdet1_ori_blob\030\004 \001(\t:\020detect1_ori_pr"
  "ed\0221\n\022det1_ori_conf_blob\030\005 \001(\t:\025detect1_"
  "ori_conf_pred\022\'\n\rdet1_dim_blob\030\006 \001(\t:\020de"
  "tect1_dim_pred\022\'\n\rdet2_loc_blob\030\007 \001(\t:\020d"
  "etect2_loc_pred\022\'\n\rdet2_obj_blob\030\010 \001(\t:\020"
  "detect2_obj_pred\022\'\n\rdet2_cls_blob\030\t \001(\t:"
  "\020detect2_cls_pred\022\'\n\rdet2_ori_blob\030\n \001(\t"
  ":\020detect2_ori_pred\0221\n\022det2_ori_conf_blob"
  "\030\013 \001(\t:\025detect2_ori_conf_pred\022\'\n\rdet2_di"
  "m_blob\030\014 \001(\t:\020detect2_dim_pred\022\'\n\rdet3_l"
  "oc_blob\030\r \001(\t:\020detect3_loc_pred\022\'\n\rdet3_"
  "obj_blob\030\016 \001(\t:\020detect3_obj_pred\022\'\n\rdet3"
  "_cls_blob\030\017 \001(\t:\020detect3_cls_pred\022\'\n\rdet"
  "3_ori_blob\030\020 \001(\t:\020detect3_ori_pred\0221\n\022de"
  "t3_ori_conf_blob\030\021 \001(\t:\025detect3_ori_conf"
  "_pred\022\'\n\rdet3_dim_blob\030\022 \001(\t:\020detect3_di"
  "m_pred\022\032\n\010lof_blob\030\023 \001(\t:\010lof_pred\022\032\n\010lo"
  "r_blob\030\024 \001(\t:\010lor_pred\022\035\n\017input_data_blo"
  "b\030# \001(\t:\004data\022\037\n\020input_ratio_blob\030$ \001(\t:"
  "\005ratio\022\035\n\022input_instric_blob\030% \001(\t:\001K\022\034\n"
  "\trois_blob\030\026 \001(\t:\trois_pred\022\034\n\tfeat_blob"
  "\030\027 \001(\t:\tconv_feat\022\032\n\010box_blob\030\030 \001(\t:\010box"
  "_pred\022\032\n\010iou_blob\030\031 \001(\t:\010iou_pred\022\036\n\nbrv"
  "is_blob\030\032 \001(\t:\nbrvis_pred\022\036\n\nbrswt_blob\030"
  "\033 \001(\t:\nbrswt_pred\022\036\n\nltvis_blob\030\034 \001(\t:\nl"
  "tvis_pred\022\036\n\nltswt_blob\030\035 \001(\t:\nltswt_pre"
  "d\022\036\n\nrtvis_blob\030\036 \001(\t:\nrtvis_pred\022\036\n\nrts"
  "wt_blob\030\037 \001(\t:\nrtswt_pred\022\"\n\014area_id_blo"
  "b\030  \001(\t:\014area_id_pred\022$\n\022visible_ratio_b"
  "lob\030! \001(\t:\010vis_pred\022$\n\022cut_off_ratio_blo"
  "b\030\" \001(\t:\010cut_pred\"\224\001\n\010NMSParam\022\027\n\004type\030\001"
  " \001(\t:\tNormalNMS\022\026\n\tthreshold\030\002 \001(\002:\0030.4\022"
  "\022\n\005sigma\030\003 \001(\002:\0030.4\022\"\n\025inter_cls_conf_th"
  "resh\030\004 \001(\002:\0030.1\022\037\n\024inter_cls_nms_thresh\030"
  "\005 \001(\002:\0011\"+\n\016BBoxStatistics\022\014\n\004mean\030\001 \003(\002"
  "\022\013\n\003std\030\002 \003(\002\"\204\001\n\023DimensionStatistics\022\021\n"
  "\006mean_h\030\001 \001(\002:\0010\022\021\n\006mean_w\030\002 \001(\002:\0010\022\021\n\006m"
  "ean_l\030\003 \001(\002:\0010\022\020\n\005std_h\030\004 \001(\002:\0011\022\020\n\005std_"
  "w\030\005 \001(\002:\0011\022\020\n\005std_l\030\006 \001(\002:\0011"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto = {
    false, false, 3228, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto,
    "modules/perception/camera/lib/obstacle/detector/smoke/proto/smoke.proto",
    &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto(&descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace smoke {

// ===================================================================

class SmokeParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SmokeParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::smoke::ModelParam& model_param(const SmokeParam* msg);
  static void set_has_model_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::smoke::NetworkParam& net_param(const SmokeParam* msg);
  static void set_has_net_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::smoke::NMSParam& nms_param(const SmokeParam* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::camera::smoke::ModelParam&
SmokeParam::_Internal::model_param(const SmokeParam* msg) {
  return *msg->_impl_.model_param_;
}
const ::apollo::perception::camera::smoke::NetworkParam&
SmokeParam::_Internal::net_param(const SmokeParam* msg) {
  return *msg->_impl_.net_param_;
}
const ::apollo::perception::camera::smoke::NMSParam&
SmokeParam::_Internal::nms_param(const SmokeParam* msg) {
  return *msg->_impl_.nms_param_;
}
SmokeParam::SmokeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.SmokeParam)
}
SmokeParam::SmokeParam(const SmokeParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_param_){nullptr}
    , decltype(_impl_.net_param_){nullptr}
    , decltype(_impl_.nms_param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_model_param()) {
    _impl_.model_param_ = new ::apollo::perception::camera::smoke::ModelParam(*from._impl_.model_param_);
  }
  if (from._internal_has_net_param()) {
    _impl_.net_param_ = new ::apollo::perception::camera::smoke::NetworkParam(*from._impl_.net_param_);
  }
  if (from._internal_has_nms_param()) {
    _impl_.nms_param_ = new ::apollo::perception::camera::smoke::NMSParam(*from._impl_.nms_param_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.SmokeParam)
}

inline void SmokeParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_param_){nullptr}
    , decltype(_impl_.net_param_){nullptr}
    , decltype(_impl_.nms_param_){nullptr}
  };
}

SmokeParam::~SmokeParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.SmokeParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmokeParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.model_param_;
  if (this != internal_default_instance()) delete _impl_.net_param_;
  if (this != internal_default_instance()) delete _impl_.nms_param_;
}

void SmokeParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmokeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.SmokeParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.model_param_ != nullptr);
      _impl_.model_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.net_param_ != nullptr);
      _impl_.net_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.nms_param_ != nullptr);
      _impl_.nms_param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmokeParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmokeParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.SmokeParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_param(this),
        _Internal::model_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::net_param(this),
        _Internal::net_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nms_param(this),
        _Internal::nms_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.SmokeParam)
  return target;
}

size_t SmokeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.SmokeParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.camera.smoke.ModelParam model_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_param_);
    }

    // optional .apollo.perception.camera.smoke.NetworkParam net_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.net_param_);
    }

    // optional .apollo.perception.camera.smoke.NMSParam nms_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nms_param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmokeParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmokeParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmokeParam::GetClassData() const { return &_class_data_; }

void SmokeParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmokeParam *>(to)->MergeFrom(
      static_cast<const SmokeParam &>(from));
}


void SmokeParam::MergeFrom(const SmokeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.SmokeParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_param()->::apollo::perception::camera::smoke::ModelParam::MergeFrom(from._internal_model_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_net_param()->::apollo::perception::camera::smoke::NetworkParam::MergeFrom(from._internal_net_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_nms_param()->::apollo::perception::camera::smoke::NMSParam::MergeFrom(from._internal_nms_param());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmokeParam::CopyFrom(const SmokeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.SmokeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmokeParam::IsInitialized() const {
  return true;
}

void SmokeParam::InternalSwap(SmokeParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmokeParam, _impl_.nms_param_)
      + sizeof(SmokeParam::_impl_.nms_param_)
      - PROTOBUF_FIELD_OFFSET(SmokeParam, _impl_.model_param_)>(
          reinterpret_cast<char*>(&_impl_.model_param_),
          reinterpret_cast<char*>(&other->_impl_.model_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmokeParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[0]);
}

// ===================================================================

class ModelParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelParam>()._impl_._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stage1_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stage1_md(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stage2_pt(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_stage2_md(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_anchors_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_types_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_feature_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cropped_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_resized_width(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_aligned_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_light_vis_conf_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_light_swt_conf_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_roi_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_box_conf_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_stage2_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_min_2d_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_3d_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_3d_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_3d_length(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_calibratetable_root(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ori_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_per_cls_reg(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_expand_file(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_with_box3d(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_with_frbox(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_with_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_with_ratios(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_num_areas(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_border_ratio(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_{{{"yolo-2d", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage1_pt_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage1_md_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage2_pt_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage2_md_{{{"caffe.model", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_anchors_file_{{{"anchors.txt", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_types_file_{{{"types.txt", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_feature_file_{{{"feature.pt", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_calibratetable_root_{{{"./", 2}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_{{{"CaffeNet", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ModelParam::Impl_::_i_give_permission_to_break_this_code_default_expand_file_{{{"expand.txt", 10}}, {nullptr}};
ModelParam::ModelParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.ModelParam)
}
ModelParam::ModelParam(const ModelParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dimension_statistics_){from._impl_.dimension_statistics_}
    , decltype(_impl_.bbox_statistics_){from._impl_.bbox_statistics_}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.anchors_file_){}
    , decltype(_impl_.types_file_){}
    , decltype(_impl_.feature_file_){}
    , decltype(_impl_.calibratetable_root_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.expand_file_){}
    , decltype(_impl_.stage1_pt_){}
    , decltype(_impl_.stage1_md_){}
    , decltype(_impl_.stage2_pt_){}
    , decltype(_impl_.stage2_md_){}
    , decltype(_impl_.min_2d_height_){}
    , decltype(_impl_.min_3d_height_){}
    , decltype(_impl_.min_3d_width_){}
    , decltype(_impl_.min_3d_length_){}
    , decltype(_impl_.per_cls_reg_){}
    , decltype(_impl_.with_box3d_){}
    , decltype(_impl_.with_frbox_){}
    , decltype(_impl_.with_lights_){}
    , decltype(_impl_.with_ratios_){}
    , decltype(_impl_.num_areas_){}
    , decltype(_impl_.offset_ratio_){}
    , decltype(_impl_.confidence_threshold_){}
    , decltype(_impl_.cropped_ratio_){}
    , decltype(_impl_.resized_width_){}
    , decltype(_impl_.aligned_pixel_){}
    , decltype(_impl_.ori_cycle_){}
    , decltype(_impl_.roi_conf_threshold_){}
    , decltype(_impl_.box_conf_threshold_){}
    , decltype(_impl_.stage2_nms_threshold_){}
    , decltype(_impl_.light_vis_conf_threshold_){}
    , decltype(_impl_.light_swt_conf_threshold_){}
    , decltype(_impl_.border_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  if (from._internal_has_model_name()) {
    _impl_.model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  _impl_.proto_file_.InitDefault();
  if (from._internal_has_proto_file()) {
    _impl_.proto_file_.Set(from._internal_proto_file(), 
      GetArenaForAllocation());
  }
  _impl_.weight_file_.InitDefault();
  if (from._internal_has_weight_file()) {
    _impl_.weight_file_.Set(from._internal_weight_file(), 
      GetArenaForAllocation());
  }
  _impl_.anchors_file_.InitDefault();
  if (from._internal_has_anchors_file()) {
    _impl_.anchors_file_.Set(from._internal_anchors_file(), 
      GetArenaForAllocation());
  }
  _impl_.types_file_.InitDefault();
  if (from._internal_has_types_file()) {
    _impl_.types_file_.Set(from._internal_types_file(), 
      GetArenaForAllocation());
  }
  _impl_.feature_file_.InitDefault();
  if (from._internal_has_feature_file()) {
    _impl_.feature_file_.Set(from._internal_feature_file(), 
      GetArenaForAllocation());
  }
  _impl_.calibratetable_root_.InitDefault();
  if (from._internal_has_calibratetable_root()) {
    _impl_.calibratetable_root_.Set(from._internal_calibratetable_root(), 
      GetArenaForAllocation());
  }
  _impl_.model_type_.InitDefault();
  if (from._internal_has_model_type()) {
    _impl_.model_type_.Set(from._internal_model_type(), 
      GetArenaForAllocation());
  }
  _impl_.expand_file_.InitDefault();
  if (from._internal_has_expand_file()) {
    _impl_.expand_file_.Set(from._internal_expand_file(), 
      GetArenaForAllocation());
  }
  _impl_.stage1_pt_.InitDefault();
  if (from._internal_has_stage1_pt()) {
    _impl_.stage1_pt_.Set(from._internal_stage1_pt(), 
      GetArenaForAllocation());
  }
  _impl_.stage1_md_.InitDefault();
  if (from._internal_has_stage1_md()) {
    _impl_.stage1_md_.Set(from._internal_stage1_md(), 
      GetArenaForAllocation());
  }
  _impl_.stage2_pt_.InitDefault();
  if (from._internal_has_stage2_pt()) {
    _impl_.stage2_pt_.Set(from._internal_stage2_pt(), 
      GetArenaForAllocation());
  }
  _impl_.stage2_md_.InitDefault();
  if (from._internal_has_stage2_md()) {
    _impl_.stage2_md_.Set(from._internal_stage2_md(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.min_2d_height_, &from._impl_.min_2d_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.border_ratio_) -
    reinterpret_cast<char*>(&_impl_.min_2d_height_)) + sizeof(_impl_.border_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.ModelParam)
}

inline void ModelParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dimension_statistics_){arena}
    , decltype(_impl_.bbox_statistics_){arena}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.anchors_file_){}
    , decltype(_impl_.types_file_){}
    , decltype(_impl_.feature_file_){}
    , decltype(_impl_.calibratetable_root_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.expand_file_){}
    , decltype(_impl_.stage1_pt_){}
    , decltype(_impl_.stage1_md_){}
    , decltype(_impl_.stage2_pt_){}
    , decltype(_impl_.stage2_md_){}
    , decltype(_impl_.min_2d_height_){0}
    , decltype(_impl_.min_3d_height_){0}
    , decltype(_impl_.min_3d_width_){0}
    , decltype(_impl_.min_3d_length_){0}
    , decltype(_impl_.per_cls_reg_){false}
    , decltype(_impl_.with_box3d_){false}
    , decltype(_impl_.with_frbox_){false}
    , decltype(_impl_.with_lights_){false}
    , decltype(_impl_.with_ratios_){false}
    , decltype(_impl_.num_areas_){0}
    , decltype(_impl_.offset_ratio_){0.288889f}
    , decltype(_impl_.confidence_threshold_){0.1f}
    , decltype(_impl_.cropped_ratio_){0.711111f}
    , decltype(_impl_.resized_width_){1440}
    , decltype(_impl_.aligned_pixel_){32}
    , decltype(_impl_.ori_cycle_){1}
    , decltype(_impl_.roi_conf_threshold_){0.1f}
    , decltype(_impl_.box_conf_threshold_){0.5f}
    , decltype(_impl_.stage2_nms_threshold_){0.4f}
    , decltype(_impl_.light_vis_conf_threshold_){0.5f}
    , decltype(_impl_.light_swt_conf_threshold_){0.5f}
    , decltype(_impl_.border_ratio_){0.01f}
  };
  _impl_.model_name_.InitDefault();
  _impl_.proto_file_.InitDefault();
  _impl_.weight_file_.InitDefault();
  _impl_.anchors_file_.InitDefault();
  _impl_.types_file_.InitDefault();
  _impl_.feature_file_.InitDefault();
  _impl_.calibratetable_root_.InitDefault();
  _impl_.model_type_.InitDefault();
  _impl_.expand_file_.InitDefault();
  _impl_.stage1_pt_.InitDefault();
  _impl_.stage1_md_.InitDefault();
  _impl_.stage2_pt_.InitDefault();
  _impl_.stage2_md_.InitDefault();
}

ModelParam::~ModelParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.ModelParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimension_statistics_.~RepeatedPtrField();
  _impl_.bbox_statistics_.~RepeatedPtrField();
  _impl_.model_name_.Destroy();
  _impl_.proto_file_.Destroy();
  _impl_.weight_file_.Destroy();
  _impl_.anchors_file_.Destroy();
  _impl_.types_file_.Destroy();
  _impl_.feature_file_.Destroy();
  _impl_.calibratetable_root_.Destroy();
  _impl_.model_type_.Destroy();
  _impl_.expand_file_.Destroy();
  _impl_.stage1_pt_.Destroy();
  _impl_.stage1_md_.Destroy();
  _impl_.stage2_pt_.Destroy();
  _impl_.stage2_md_.Destroy();
}

void ModelParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.ModelParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimension_statistics_.Clear();
  _impl_.bbox_statistics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_name_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.proto_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.weight_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.anchors_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_anchors_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.types_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_types_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.feature_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_feature_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      _impl_.calibratetable_root_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_calibratetable_root_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      _impl_.model_type_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.expand_file_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_expand_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      _impl_.stage1_pt_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage1_pt_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000400u) {
      _impl_.stage1_md_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage1_md_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000800u) {
      _impl_.stage2_pt_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage2_pt_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00001000u) {
      _impl_.stage2_md_.ClearToDefault(::apollo::perception::camera::smoke::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_stage2_md_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.min_2d_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.min_3d_width_) -
        reinterpret_cast<char*>(&_impl_.min_2d_height_)) + sizeof(_impl_.min_3d_width_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.min_3d_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_areas_) -
        reinterpret_cast<char*>(&_impl_.min_3d_length_)) + sizeof(_impl_.num_areas_));
    _impl_.offset_ratio_ = 0.288889f;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.confidence_threshold_ = 0.1f;
    _impl_.cropped_ratio_ = 0.711111f;
    _impl_.resized_width_ = 1440;
    _impl_.aligned_pixel_ = 32;
    _impl_.ori_cycle_ = 1;
    _impl_.roi_conf_threshold_ = 0.1f;
    _impl_.box_conf_threshold_ = 0.5f;
    _impl_.stage2_nms_threshold_ = 0.4f;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    _impl_.light_vis_conf_threshold_ = 0.5f;
    _impl_.light_swt_conf_threshold_ = 0.5f;
    _impl_.border_ratio_ = 0.01f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model_name = 1 [default = "yolo-2d"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string proto_file = 2 [default = "caffe.pt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.proto_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string weight_file = 3 [default = "caffe.model"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_weight_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.weight_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string anchors_file = 4 [default = "anchors.txt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_anchors_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.anchors_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string types_file = 5 [default = "types.txt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_types_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.types_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string feature_file = 6 [default = "feature.pt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_feature_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.feature_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float offset_ratio = 7 [default = 0.288889];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_offset_ratio(&_impl_._has_bits_);
          _impl_.offset_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence_threshold = 8 [default = 0.1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_confidence_threshold(&_impl_._has_bits_);
          _impl_.confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_2d_height = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_min_2d_height(&_impl_._has_bits_);
          _impl_.min_2d_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string calibratetable_root = 11 [default = "./"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_calibratetable_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.calibratetable_root");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string model_type = 12 [default = "CaffeNet"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.model_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float cropped_ratio = 13 [default = 0.711111];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_cropped_ratio(&_impl_._has_bits_);
          _impl_.cropped_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resized_width = 14 [default = 1440];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_resized_width(&_impl_._has_bits_);
          _impl_.resized_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 aligned_pixel = 15 [default = 32];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_aligned_pixel(&_impl_._has_bits_);
          _impl_.aligned_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ori_cycle = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_ori_cycle(&_impl_._has_bits_);
          _impl_.ori_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool per_cls_reg = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_per_cls_reg(&_impl_._has_bits_);
          _impl_.per_cls_reg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dimension_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bbox_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string expand_file = 20 [default = "expand.txt"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_expand_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.expand_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stage1_pt = 21 [default = "caffe.pt"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_stage1_pt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage1_pt");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stage1_md = 22 [default = "caffe.model"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_stage1_md();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage1_md");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stage2_pt = 23 [default = "caffe.pt"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_stage2_pt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage2_pt");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stage2_md = 24 [default = "caffe.model"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_stage2_md();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.ModelParam.stage2_md");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float roi_conf_threshold = 25 [default = 0.1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_roi_conf_threshold(&_impl_._has_bits_);
          _impl_.roi_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float box_conf_threshold = 26 [default = 0.5];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_box_conf_threshold(&_impl_._has_bits_);
          _impl_.box_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stage2_nms_threshold = 27 [default = 0.4];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_stage2_nms_threshold(&_impl_._has_bits_);
          _impl_.stage2_nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_3d_height = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_min_3d_height(&_impl_._has_bits_);
          _impl_.min_3d_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_3d_width = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_min_3d_width(&_impl_._has_bits_);
          _impl_.min_3d_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_3d_length = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_min_3d_length(&_impl_._has_bits_);
          _impl_.min_3d_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float light_vis_conf_threshold = 33 [default = 0.5];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_light_vis_conf_threshold(&_impl_._has_bits_);
          _impl_.light_vis_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float light_swt_conf_threshold = 34 [default = 0.5];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_light_swt_conf_threshold(&_impl_._has_bits_);
          _impl_.light_swt_conf_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool with_box3d = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_with_box3d(&_impl_._has_bits_);
          _impl_.with_box3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool with_frbox = 42 [default = false];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_with_frbox(&_impl_._has_bits_);
          _impl_.with_frbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool with_lights = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_with_lights(&_impl_._has_bits_);
          _impl_.with_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool with_ratios = 44 [default = false];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_with_ratios(&_impl_._has_bits_);
          _impl_.with_ratios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float border_ratio = 45 [default = 0.01];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_border_ratio(&_impl_._has_bits_);
          _impl_.border_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_areas = 46 [default = 0];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_num_areas(&_impl_._has_bits_);
          _impl_.num_areas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.ModelParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_name = 1 [default = "yolo-2d"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // optional string proto_file = 2 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file().data(), static_cast<int>(this->_internal_proto_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.proto_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_file(), target);
  }

  // optional string weight_file = 3 [default = "caffe.model"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_weight_file().data(), static_cast<int>(this->_internal_weight_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.weight_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_weight_file(), target);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchors_file().data(), static_cast<int>(this->_internal_anchors_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.anchors_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_anchors_file(), target);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_types_file().data(), static_cast<int>(this->_internal_types_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.types_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_types_file(), target);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feature_file().data(), static_cast<int>(this->_internal_feature_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.feature_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_feature_file(), target);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_offset_ratio(), target);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_confidence_threshold(), target);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_min_2d_height(), target);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibratetable_root().data(), static_cast<int>(this->_internal_calibratetable_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.calibratetable_root");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_calibratetable_root(), target);
  }

  // optional string model_type = 12 [default = "CaffeNet"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.model_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_model_type(), target);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_cropped_ratio(), target);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_resized_width(), target);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_aligned_pixel(), target);
  }

  // optional int32 ori_cycle = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_ori_cycle(), target);
  }

  // optional bool per_cls_reg = 17 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_per_cls_reg(), target);
  }

  // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimension_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimension_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bbox_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_bbox_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string expand_file = 20 [default = "expand.txt"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_expand_file().data(), static_cast<int>(this->_internal_expand_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.expand_file");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_expand_file(), target);
  }

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage1_pt().data(), static_cast<int>(this->_internal_stage1_pt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage1_pt");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_stage1_pt(), target);
  }

  // optional string stage1_md = 22 [default = "caffe.model"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage1_md().data(), static_cast<int>(this->_internal_stage1_md().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage1_md");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_stage1_md(), target);
  }

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage2_pt().data(), static_cast<int>(this->_internal_stage2_pt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage2_pt");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_stage2_pt(), target);
  }

  // optional string stage2_md = 24 [default = "caffe.model"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage2_md().data(), static_cast<int>(this->_internal_stage2_md().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.ModelParam.stage2_md");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_stage2_md(), target);
  }

  // optional float roi_conf_threshold = 25 [default = 0.1];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_roi_conf_threshold(), target);
  }

  // optional float box_conf_threshold = 26 [default = 0.5];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_box_conf_threshold(), target);
  }

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_stage2_nms_threshold(), target);
  }

  // optional float min_3d_height = 30 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_min_3d_height(), target);
  }

  // optional float min_3d_width = 31 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_min_3d_width(), target);
  }

  // optional float min_3d_length = 32 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_min_3d_length(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_light_vis_conf_threshold(), target);
  }

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_light_swt_conf_threshold(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool with_box3d = 41 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_with_box3d(), target);
  }

  // optional bool with_frbox = 42 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_with_frbox(), target);
  }

  // optional bool with_lights = 43 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_with_lights(), target);
  }

  // optional bool with_ratios = 44 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_with_ratios(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float border_ratio = 45 [default = 0.01];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_border_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_areas = 46 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_num_areas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.ModelParam)
  return target;
}

size_t ModelParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.ModelParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.smoke.DimensionStatistics dimension_statistics = 18;
  total_size += 2UL * this->_internal_dimension_statistics_size();
  for (const auto& msg : this->_impl_.dimension_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.smoke.BBoxStatistics bbox_statistics = 19;
  total_size += 2UL * this->_internal_bbox_statistics_size();
  for (const auto& msg : this->_impl_.bbox_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_name = 1 [default = "yolo-2d"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional string proto_file = 2 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file());
    }

    // optional string weight_file = 3 [default = "caffe.model"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weight_file());
    }

    // optional string anchors_file = 4 [default = "anchors.txt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchors_file());
    }

    // optional string types_file = 5 [default = "types.txt"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_types_file());
    }

    // optional string feature_file = 6 [default = "feature.pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature_file());
    }

    // optional string calibratetable_root = 11 [default = "./"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibratetable_root());
    }

    // optional string model_type = 12 [default = "CaffeNet"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string expand_file = 20 [default = "expand.txt"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_expand_file());
    }

    // optional string stage1_pt = 21 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage1_pt());
    }

    // optional string stage1_md = 22 [default = "caffe.model"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage1_md());
    }

    // optional string stage2_pt = 23 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage2_pt());
    }

    // optional string stage2_md = 24 [default = "caffe.model"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage2_md());
    }

    // optional float min_2d_height = 9 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float min_3d_height = 30 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float min_3d_width = 31 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float min_3d_length = 32 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool per_cls_reg = 17 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool with_box3d = 41 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool with_frbox = 42 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool with_lights = 43 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool with_ratios = 44 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 num_areas = 46 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_areas());
    }

    // optional float offset_ratio = 7 [default = 0.288889];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float confidence_threshold = 8 [default = 0.1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional float cropped_ratio = 13 [default = 0.711111];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional int32 resized_width = 14 [default = 1440];
    if (cached_has_bits & 0x04000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resized_width());
    }

    // optional int32 aligned_pixel = 15 [default = 32];
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aligned_pixel());
    }

    // optional int32 ori_cycle = 16 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_ori_cycle());
    }

    // optional float roi_conf_threshold = 25 [default = 0.1];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float box_conf_threshold = 26 [default = 0.5];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float stage2_nms_threshold = 27 [default = 0.4];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional float light_vis_conf_threshold = 33 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float light_swt_conf_threshold = 34 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float border_ratio = 45 [default = 0.01];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelParam::GetClassData() const { return &_class_data_; }

void ModelParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelParam *>(to)->MergeFrom(
      static_cast<const ModelParam &>(from));
}


void ModelParam::MergeFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.ModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.dimension_statistics_.MergeFrom(from._impl_.dimension_statistics_);
  _impl_.bbox_statistics_.MergeFrom(from._impl_.bbox_statistics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_file(from._internal_proto_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_weight_file(from._internal_weight_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_anchors_file(from._internal_anchors_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_types_file(from._internal_types_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_feature_file(from._internal_feature_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_calibratetable_root(from._internal_calibratetable_root());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_model_type(from._internal_model_type());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_expand_file(from._internal_expand_file());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_stage1_pt(from._internal_stage1_pt());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_stage1_md(from._internal_stage1_md());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_stage2_pt(from._internal_stage2_pt());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_stage2_md(from._internal_stage2_md());
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.min_2d_height_ = from._impl_.min_2d_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.min_3d_height_ = from._impl_.min_3d_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.min_3d_width_ = from._impl_.min_3d_width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.min_3d_length_ = from._impl_.min_3d_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.per_cls_reg_ = from._impl_.per_cls_reg_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.with_box3d_ = from._impl_.with_box3d_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.with_frbox_ = from._impl_.with_frbox_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.with_lights_ = from._impl_.with_lights_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.with_ratios_ = from._impl_.with_ratios_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.num_areas_ = from._impl_.num_areas_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.offset_ratio_ = from._impl_.offset_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.confidence_threshold_ = from._impl_.confidence_threshold_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.cropped_ratio_ = from._impl_.cropped_ratio_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.resized_width_ = from._impl_.resized_width_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.aligned_pixel_ = from._impl_.aligned_pixel_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.ori_cycle_ = from._impl_.ori_cycle_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.roi_conf_threshold_ = from._impl_.roi_conf_threshold_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.box_conf_threshold_ = from._impl_.box_conf_threshold_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.stage2_nms_threshold_ = from._impl_.stage2_nms_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.light_vis_conf_threshold_ = from._impl_.light_vis_conf_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.light_swt_conf_threshold_ = from._impl_.light_swt_conf_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.border_ratio_ = from._impl_.border_ratio_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelParam::CopyFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.ModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParam::IsInitialized() const {
  return true;
}

void ModelParam::InternalSwap(ModelParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.dimension_statistics_.InternalSwap(&other->_impl_.dimension_statistics_);
  _impl_.bbox_statistics_.InternalSwap(&other->_impl_.bbox_statistics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_file_, lhs_arena,
      &other->_impl_.proto_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weight_file_, lhs_arena,
      &other->_impl_.weight_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.anchors_file_, lhs_arena,
      &other->_impl_.anchors_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.types_file_, lhs_arena,
      &other->_impl_.types_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feature_file_, lhs_arena,
      &other->_impl_.feature_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibratetable_root_, lhs_arena,
      &other->_impl_.calibratetable_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_, lhs_arena,
      &other->_impl_.model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expand_file_, lhs_arena,
      &other->_impl_.expand_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage1_pt_, lhs_arena,
      &other->_impl_.stage1_pt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage1_md_, lhs_arena,
      &other->_impl_.stage1_md_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage2_pt_, lhs_arena,
      &other->_impl_.stage2_pt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage2_md_, lhs_arena,
      &other->_impl_.stage2_md_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelParam, _impl_.num_areas_)
      + sizeof(ModelParam::_impl_.num_areas_)
      - PROTOBUF_FIELD_OFFSET(ModelParam, _impl_.min_2d_height_)>(
          reinterpret_cast<char*>(&_impl_.min_2d_height_),
          reinterpret_cast<char*>(&other->_impl_.min_2d_height_));
  swap(_impl_.offset_ratio_, other->_impl_.offset_ratio_);
  swap(_impl_.confidence_threshold_, other->_impl_.confidence_threshold_);
  swap(_impl_.cropped_ratio_, other->_impl_.cropped_ratio_);
  swap(_impl_.resized_width_, other->_impl_.resized_width_);
  swap(_impl_.aligned_pixel_, other->_impl_.aligned_pixel_);
  swap(_impl_.ori_cycle_, other->_impl_.ori_cycle_);
  swap(_impl_.roi_conf_threshold_, other->_impl_.roi_conf_threshold_);
  swap(_impl_.box_conf_threshold_, other->_impl_.box_conf_threshold_);
  swap(_impl_.stage2_nms_threshold_, other->_impl_.stage2_nms_threshold_);
  swap(_impl_.light_vis_conf_threshold_, other->_impl_.light_vis_conf_threshold_);
  swap(_impl_.light_swt_conf_threshold_, other->_impl_.light_swt_conf_threshold_);
  swap(_impl_.border_ratio_, other->_impl_.border_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[1]);
}

// ===================================================================

class NetworkParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkParam>()._impl_._has_bits_);
  static void set_has_det1_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_det1_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_det1_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_det1_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_det1_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_det1_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_det2_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_det2_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_det2_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_det2_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_det2_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_det2_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_det3_loc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_det3_obj_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_det3_cls_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_det3_ori_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_det3_ori_conf_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_det3_dim_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lof_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lor_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_input_data_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_input_ratio_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_input_instric_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_rois_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_feat_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_box_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_iou_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_brvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_brswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ltvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ltswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_rtvis_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_rtswt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_area_id_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_visible_ratio_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_cut_off_ratio_blob(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_loc_blob_{{{"detect1_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_obj_blob_{{{"detect1_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_cls_blob_{{{"detect1_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_ori_blob_{{{"detect1_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_{{{"detect1_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_dim_blob_{{{"detect1_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_loc_blob_{{{"detect2_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_obj_blob_{{{"detect2_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_cls_blob_{{{"detect2_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_ori_blob_{{{"detect2_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_{{{"detect2_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_dim_blob_{{{"detect2_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_loc_blob_{{{"detect3_loc_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_obj_blob_{{{"detect3_obj_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_cls_blob_{{{"detect3_cls_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_ori_blob_{{{"detect3_ori_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_{{{"detect3_ori_conf_pred", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_dim_blob_{{{"detect3_dim_pred", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lof_blob_{{{"lof_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lor_blob_{{{"lor_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_data_blob_{{{"data", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_ratio_blob_{{{"ratio", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_instric_blob_{{{"K", 1}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rois_blob_{{{"rois_pred", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feat_blob_{{{"conv_feat", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_box_blob_{{{"box_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_iou_blob_{{{"iou_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_brvis_blob_{{{"brvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_brswt_blob_{{{"brswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ltvis_blob_{{{"ltvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ltswt_blob_{{{"ltswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rtvis_blob_{{{"rtvis_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rtswt_blob_{{{"rtswt_pred", 10}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_area_id_blob_{{{"area_id_pred", 12}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_visible_ratio_blob_{{{"vis_pred", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_{{{"cut_pred", 8}}, {nullptr}};
NetworkParam::NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.det1_loc_blob_){}
    , decltype(_impl_.det1_obj_blob_){}
    , decltype(_impl_.det1_cls_blob_){}
    , decltype(_impl_.det1_ori_blob_){}
    , decltype(_impl_.det1_ori_conf_blob_){}
    , decltype(_impl_.det1_dim_blob_){}
    , decltype(_impl_.det2_loc_blob_){}
    , decltype(_impl_.det2_obj_blob_){}
    , decltype(_impl_.det2_cls_blob_){}
    , decltype(_impl_.det2_ori_blob_){}
    , decltype(_impl_.det2_ori_conf_blob_){}
    , decltype(_impl_.det2_dim_blob_){}
    , decltype(_impl_.det3_loc_blob_){}
    , decltype(_impl_.det3_obj_blob_){}
    , decltype(_impl_.det3_cls_blob_){}
    , decltype(_impl_.det3_ori_blob_){}
    , decltype(_impl_.det3_ori_conf_blob_){}
    , decltype(_impl_.det3_dim_blob_){}
    , decltype(_impl_.lof_blob_){}
    , decltype(_impl_.lor_blob_){}
    , decltype(_impl_.rois_blob_){}
    , decltype(_impl_.feat_blob_){}
    , decltype(_impl_.box_blob_){}
    , decltype(_impl_.iou_blob_){}
    , decltype(_impl_.brvis_blob_){}
    , decltype(_impl_.brswt_blob_){}
    , decltype(_impl_.ltvis_blob_){}
    , decltype(_impl_.ltswt_blob_){}
    , decltype(_impl_.rtvis_blob_){}
    , decltype(_impl_.rtswt_blob_){}
    , decltype(_impl_.area_id_blob_){}
    , decltype(_impl_.visible_ratio_blob_){}
    , decltype(_impl_.cut_off_ratio_blob_){}
    , decltype(_impl_.input_data_blob_){}
    , decltype(_impl_.input_ratio_blob_){}
    , decltype(_impl_.input_instric_blob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.det1_loc_blob_.InitDefault();
  if (from._internal_has_det1_loc_blob()) {
    _impl_.det1_loc_blob_.Set(from._internal_det1_loc_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det1_obj_blob_.InitDefault();
  if (from._internal_has_det1_obj_blob()) {
    _impl_.det1_obj_blob_.Set(from._internal_det1_obj_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det1_cls_blob_.InitDefault();
  if (from._internal_has_det1_cls_blob()) {
    _impl_.det1_cls_blob_.Set(from._internal_det1_cls_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det1_ori_blob_.InitDefault();
  if (from._internal_has_det1_ori_blob()) {
    _impl_.det1_ori_blob_.Set(from._internal_det1_ori_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det1_ori_conf_blob_.InitDefault();
  if (from._internal_has_det1_ori_conf_blob()) {
    _impl_.det1_ori_conf_blob_.Set(from._internal_det1_ori_conf_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det1_dim_blob_.InitDefault();
  if (from._internal_has_det1_dim_blob()) {
    _impl_.det1_dim_blob_.Set(from._internal_det1_dim_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_loc_blob_.InitDefault();
  if (from._internal_has_det2_loc_blob()) {
    _impl_.det2_loc_blob_.Set(from._internal_det2_loc_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_obj_blob_.InitDefault();
  if (from._internal_has_det2_obj_blob()) {
    _impl_.det2_obj_blob_.Set(from._internal_det2_obj_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_cls_blob_.InitDefault();
  if (from._internal_has_det2_cls_blob()) {
    _impl_.det2_cls_blob_.Set(from._internal_det2_cls_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_ori_blob_.InitDefault();
  if (from._internal_has_det2_ori_blob()) {
    _impl_.det2_ori_blob_.Set(from._internal_det2_ori_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_ori_conf_blob_.InitDefault();
  if (from._internal_has_det2_ori_conf_blob()) {
    _impl_.det2_ori_conf_blob_.Set(from._internal_det2_ori_conf_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det2_dim_blob_.InitDefault();
  if (from._internal_has_det2_dim_blob()) {
    _impl_.det2_dim_blob_.Set(from._internal_det2_dim_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_loc_blob_.InitDefault();
  if (from._internal_has_det3_loc_blob()) {
    _impl_.det3_loc_blob_.Set(from._internal_det3_loc_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_obj_blob_.InitDefault();
  if (from._internal_has_det3_obj_blob()) {
    _impl_.det3_obj_blob_.Set(from._internal_det3_obj_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_cls_blob_.InitDefault();
  if (from._internal_has_det3_cls_blob()) {
    _impl_.det3_cls_blob_.Set(from._internal_det3_cls_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_ori_blob_.InitDefault();
  if (from._internal_has_det3_ori_blob()) {
    _impl_.det3_ori_blob_.Set(from._internal_det3_ori_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_ori_conf_blob_.InitDefault();
  if (from._internal_has_det3_ori_conf_blob()) {
    _impl_.det3_ori_conf_blob_.Set(from._internal_det3_ori_conf_blob(), 
      GetArenaForAllocation());
  }
  _impl_.det3_dim_blob_.InitDefault();
  if (from._internal_has_det3_dim_blob()) {
    _impl_.det3_dim_blob_.Set(from._internal_det3_dim_blob(), 
      GetArenaForAllocation());
  }
  _impl_.lof_blob_.InitDefault();
  if (from._internal_has_lof_blob()) {
    _impl_.lof_blob_.Set(from._internal_lof_blob(), 
      GetArenaForAllocation());
  }
  _impl_.lor_blob_.InitDefault();
  if (from._internal_has_lor_blob()) {
    _impl_.lor_blob_.Set(from._internal_lor_blob(), 
      GetArenaForAllocation());
  }
  _impl_.rois_blob_.InitDefault();
  if (from._internal_has_rois_blob()) {
    _impl_.rois_blob_.Set(from._internal_rois_blob(), 
      GetArenaForAllocation());
  }
  _impl_.feat_blob_.InitDefault();
  if (from._internal_has_feat_blob()) {
    _impl_.feat_blob_.Set(from._internal_feat_blob(), 
      GetArenaForAllocation());
  }
  _impl_.box_blob_.InitDefault();
  if (from._internal_has_box_blob()) {
    _impl_.box_blob_.Set(from._internal_box_blob(), 
      GetArenaForAllocation());
  }
  _impl_.iou_blob_.InitDefault();
  if (from._internal_has_iou_blob()) {
    _impl_.iou_blob_.Set(from._internal_iou_blob(), 
      GetArenaForAllocation());
  }
  _impl_.brvis_blob_.InitDefault();
  if (from._internal_has_brvis_blob()) {
    _impl_.brvis_blob_.Set(from._internal_brvis_blob(), 
      GetArenaForAllocation());
  }
  _impl_.brswt_blob_.InitDefault();
  if (from._internal_has_brswt_blob()) {
    _impl_.brswt_blob_.Set(from._internal_brswt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.ltvis_blob_.InitDefault();
  if (from._internal_has_ltvis_blob()) {
    _impl_.ltvis_blob_.Set(from._internal_ltvis_blob(), 
      GetArenaForAllocation());
  }
  _impl_.ltswt_blob_.InitDefault();
  if (from._internal_has_ltswt_blob()) {
    _impl_.ltswt_blob_.Set(from._internal_ltswt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.rtvis_blob_.InitDefault();
  if (from._internal_has_rtvis_blob()) {
    _impl_.rtvis_blob_.Set(from._internal_rtvis_blob(), 
      GetArenaForAllocation());
  }
  _impl_.rtswt_blob_.InitDefault();
  if (from._internal_has_rtswt_blob()) {
    _impl_.rtswt_blob_.Set(from._internal_rtswt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.area_id_blob_.InitDefault();
  if (from._internal_has_area_id_blob()) {
    _impl_.area_id_blob_.Set(from._internal_area_id_blob(), 
      GetArenaForAllocation());
  }
  _impl_.visible_ratio_blob_.InitDefault();
  if (from._internal_has_visible_ratio_blob()) {
    _impl_.visible_ratio_blob_.Set(from._internal_visible_ratio_blob(), 
      GetArenaForAllocation());
  }
  _impl_.cut_off_ratio_blob_.InitDefault();
  if (from._internal_has_cut_off_ratio_blob()) {
    _impl_.cut_off_ratio_blob_.Set(from._internal_cut_off_ratio_blob(), 
      GetArenaForAllocation());
  }
  _impl_.input_data_blob_.InitDefault();
  if (from._internal_has_input_data_blob()) {
    _impl_.input_data_blob_.Set(from._internal_input_data_blob(), 
      GetArenaForAllocation());
  }
  _impl_.input_ratio_blob_.InitDefault();
  if (from._internal_has_input_ratio_blob()) {
    _impl_.input_ratio_blob_.Set(from._internal_input_ratio_blob(), 
      GetArenaForAllocation());
  }
  _impl_.input_instric_blob_.InitDefault();
  if (from._internal_has_input_instric_blob()) {
    _impl_.input_instric_blob_.Set(from._internal_input_instric_blob(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.NetworkParam)
}

inline void NetworkParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.det1_loc_blob_){}
    , decltype(_impl_.det1_obj_blob_){}
    , decltype(_impl_.det1_cls_blob_){}
    , decltype(_impl_.det1_ori_blob_){}
    , decltype(_impl_.det1_ori_conf_blob_){}
    , decltype(_impl_.det1_dim_blob_){}
    , decltype(_impl_.det2_loc_blob_){}
    , decltype(_impl_.det2_obj_blob_){}
    , decltype(_impl_.det2_cls_blob_){}
    , decltype(_impl_.det2_ori_blob_){}
    , decltype(_impl_.det2_ori_conf_blob_){}
    , decltype(_impl_.det2_dim_blob_){}
    , decltype(_impl_.det3_loc_blob_){}
    , decltype(_impl_.det3_obj_blob_){}
    , decltype(_impl_.det3_cls_blob_){}
    , decltype(_impl_.det3_ori_blob_){}
    , decltype(_impl_.det3_ori_conf_blob_){}
    , decltype(_impl_.det3_dim_blob_){}
    , decltype(_impl_.lof_blob_){}
    , decltype(_impl_.lor_blob_){}
    , decltype(_impl_.rois_blob_){}
    , decltype(_impl_.feat_blob_){}
    , decltype(_impl_.box_blob_){}
    , decltype(_impl_.iou_blob_){}
    , decltype(_impl_.brvis_blob_){}
    , decltype(_impl_.brswt_blob_){}
    , decltype(_impl_.ltvis_blob_){}
    , decltype(_impl_.ltswt_blob_){}
    , decltype(_impl_.rtvis_blob_){}
    , decltype(_impl_.rtswt_blob_){}
    , decltype(_impl_.area_id_blob_){}
    , decltype(_impl_.visible_ratio_blob_){}
    , decltype(_impl_.cut_off_ratio_blob_){}
    , decltype(_impl_.input_data_blob_){}
    , decltype(_impl_.input_ratio_blob_){}
    , decltype(_impl_.input_instric_blob_){}
  };
  _impl_.det1_loc_blob_.InitDefault();
  _impl_.det1_obj_blob_.InitDefault();
  _impl_.det1_cls_blob_.InitDefault();
  _impl_.det1_ori_blob_.InitDefault();
  _impl_.det1_ori_conf_blob_.InitDefault();
  _impl_.det1_dim_blob_.InitDefault();
  _impl_.det2_loc_blob_.InitDefault();
  _impl_.det2_obj_blob_.InitDefault();
  _impl_.det2_cls_blob_.InitDefault();
  _impl_.det2_ori_blob_.InitDefault();
  _impl_.det2_ori_conf_blob_.InitDefault();
  _impl_.det2_dim_blob_.InitDefault();
  _impl_.det3_loc_blob_.InitDefault();
  _impl_.det3_obj_blob_.InitDefault();
  _impl_.det3_cls_blob_.InitDefault();
  _impl_.det3_ori_blob_.InitDefault();
  _impl_.det3_ori_conf_blob_.InitDefault();
  _impl_.det3_dim_blob_.InitDefault();
  _impl_.lof_blob_.InitDefault();
  _impl_.lor_blob_.InitDefault();
  _impl_.rois_blob_.InitDefault();
  _impl_.feat_blob_.InitDefault();
  _impl_.box_blob_.InitDefault();
  _impl_.iou_blob_.InitDefault();
  _impl_.brvis_blob_.InitDefault();
  _impl_.brswt_blob_.InitDefault();
  _impl_.ltvis_blob_.InitDefault();
  _impl_.ltswt_blob_.InitDefault();
  _impl_.rtvis_blob_.InitDefault();
  _impl_.rtswt_blob_.InitDefault();
  _impl_.area_id_blob_.InitDefault();
  _impl_.visible_ratio_blob_.InitDefault();
  _impl_.cut_off_ratio_blob_.InitDefault();
  _impl_.input_data_blob_.InitDefault();
  _impl_.input_ratio_blob_.InitDefault();
  _impl_.input_instric_blob_.InitDefault();
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.NetworkParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.det1_loc_blob_.Destroy();
  _impl_.det1_obj_blob_.Destroy();
  _impl_.det1_cls_blob_.Destroy();
  _impl_.det1_ori_blob_.Destroy();
  _impl_.det1_ori_conf_blob_.Destroy();
  _impl_.det1_dim_blob_.Destroy();
  _impl_.det2_loc_blob_.Destroy();
  _impl_.det2_obj_blob_.Destroy();
  _impl_.det2_cls_blob_.Destroy();
  _impl_.det2_ori_blob_.Destroy();
  _impl_.det2_ori_conf_blob_.Destroy();
  _impl_.det2_dim_blob_.Destroy();
  _impl_.det3_loc_blob_.Destroy();
  _impl_.det3_obj_blob_.Destroy();
  _impl_.det3_cls_blob_.Destroy();
  _impl_.det3_ori_blob_.Destroy();
  _impl_.det3_ori_conf_blob_.Destroy();
  _impl_.det3_dim_blob_.Destroy();
  _impl_.lof_blob_.Destroy();
  _impl_.lor_blob_.Destroy();
  _impl_.rois_blob_.Destroy();
  _impl_.feat_blob_.Destroy();
  _impl_.box_blob_.Destroy();
  _impl_.iou_blob_.Destroy();
  _impl_.brvis_blob_.Destroy();
  _impl_.brswt_blob_.Destroy();
  _impl_.ltvis_blob_.Destroy();
  _impl_.ltswt_blob_.Destroy();
  _impl_.rtvis_blob_.Destroy();
  _impl_.rtswt_blob_.Destroy();
  _impl_.area_id_blob_.Destroy();
  _impl_.visible_ratio_blob_.Destroy();
  _impl_.cut_off_ratio_blob_.Destroy();
  _impl_.input_data_blob_.Destroy();
  _impl_.input_ratio_blob_.Destroy();
  _impl_.input_instric_blob_.Destroy();
}

void NetworkParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.NetworkParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.det1_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_loc_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.det1_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_obj_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.det1_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_cls_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.det1_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_ori_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.det1_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.det1_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det1_dim_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      _impl_.det2_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_loc_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      _impl_.det2_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_obj_blob_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.det2_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_cls_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      _impl_.det2_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_ori_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000400u) {
      _impl_.det2_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000800u) {
      _impl_.det2_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det2_dim_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00001000u) {
      _impl_.det3_loc_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_loc_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00002000u) {
      _impl_.det3_obj_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_obj_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00004000u) {
      _impl_.det3_cls_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_cls_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00008000u) {
      _impl_.det3_ori_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_ori_blob_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.det3_ori_conf_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00020000u) {
      _impl_.det3_dim_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_det3_dim_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00040000u) {
      _impl_.lof_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lof_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00080000u) {
      _impl_.lor_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lor_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00100000u) {
      _impl_.rois_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rois_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00200000u) {
      _impl_.feat_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feat_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00400000u) {
      _impl_.box_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_box_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00800000u) {
      _impl_.iou_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_iou_blob_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.brvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_brvis_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x02000000u) {
      _impl_.brswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_brswt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x04000000u) {
      _impl_.ltvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ltvis_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x08000000u) {
      _impl_.ltswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ltswt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x10000000u) {
      _impl_.rtvis_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rtvis_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x20000000u) {
      _impl_.rtswt_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_rtswt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x40000000u) {
      _impl_.area_id_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_area_id_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x80000000u) {
      _impl_.visible_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_visible_ratio_blob_, GetArenaForAllocation());
       }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cut_off_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.input_data_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_data_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.input_ratio_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_ratio_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.input_instric_blob_.ClearToDefault(::apollo::perception::camera::smoke::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_instric_blob_, GetArenaForAllocation());
       }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_det1_loc_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_loc_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_det1_obj_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_obj_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_det1_cls_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_cls_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_det1_ori_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_ori_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_det1_ori_conf_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_ori_conf_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_det1_dim_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det1_dim_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_det2_loc_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_loc_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_det2_obj_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_obj_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_det2_cls_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_cls_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_det2_ori_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_ori_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_det2_ori_conf_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_ori_conf_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_det2_dim_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det2_dim_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_det3_loc_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_loc_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_det3_obj_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_obj_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_det3_cls_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_cls_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_det3_ori_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_ori_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_det3_ori_conf_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_ori_conf_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_det3_dim_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.det3_dim_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lof_blob = 19 [default = "lof_pred"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_lof_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.lof_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lor_blob = 20 [default = "lor_pred"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_lor_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.lor_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rois_blob = 22 [default = "rois_pred"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_rois_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rois_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string feat_blob = 23 [default = "conv_feat"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_feat_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.feat_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string box_blob = 24 [default = "box_pred"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_box_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.box_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string iou_blob = 25 [default = "iou_pred"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_iou_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.iou_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string brvis_blob = 26 [default = "brvis_pred"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_brvis_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.brvis_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string brswt_blob = 27 [default = "brswt_pred"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_brswt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.brswt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ltvis_blob = 28 [default = "ltvis_pred"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_ltvis_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.ltvis_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ltswt_blob = 29 [default = "ltswt_pred"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_ltswt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.ltswt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rtvis_blob = 30 [default = "rtvis_pred"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_rtvis_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rtvis_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rtswt_blob = 31 [default = "rtswt_pred"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_rtswt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.rtswt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string area_id_blob = 32 [default = "area_id_pred"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_area_id_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.area_id_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string visible_ratio_blob = 33 [default = "vis_pred"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_visible_ratio_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.visible_ratio_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cut_off_ratio_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.cut_off_ratio_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_data_blob = 35 [default = "data"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_data_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_data_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_ratio_blob = 36 [default = "ratio"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_input_ratio_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_ratio_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_instric_blob = 37 [default = "K"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_input_instric_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NetworkParam.input_instric_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.NetworkParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_loc_blob().data(), static_cast<int>(this->_internal_det1_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_loc_blob");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_det1_loc_blob(), target);
  }

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_obj_blob().data(), static_cast<int>(this->_internal_det1_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_obj_blob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_det1_obj_blob(), target);
  }

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_cls_blob().data(), static_cast<int>(this->_internal_det1_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_cls_blob");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_det1_cls_blob(), target);
  }

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_ori_blob().data(), static_cast<int>(this->_internal_det1_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_ori_blob");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_det1_ori_blob(), target);
  }

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_ori_conf_blob().data(), static_cast<int>(this->_internal_det1_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_det1_ori_conf_blob(), target);
  }

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det1_dim_blob().data(), static_cast<int>(this->_internal_det1_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det1_dim_blob");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_det1_dim_blob(), target);
  }

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_loc_blob().data(), static_cast<int>(this->_internal_det2_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_loc_blob");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_det2_loc_blob(), target);
  }

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_obj_blob().data(), static_cast<int>(this->_internal_det2_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_obj_blob");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_det2_obj_blob(), target);
  }

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_cls_blob().data(), static_cast<int>(this->_internal_det2_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_cls_blob");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_det2_cls_blob(), target);
  }

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_ori_blob().data(), static_cast<int>(this->_internal_det2_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_ori_blob");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_det2_ori_blob(), target);
  }

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_ori_conf_blob().data(), static_cast<int>(this->_internal_det2_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_det2_ori_conf_blob(), target);
  }

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det2_dim_blob().data(), static_cast<int>(this->_internal_det2_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det2_dim_blob");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_det2_dim_blob(), target);
  }

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_loc_blob().data(), static_cast<int>(this->_internal_det3_loc_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_loc_blob");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_det3_loc_blob(), target);
  }

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_obj_blob().data(), static_cast<int>(this->_internal_det3_obj_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_obj_blob");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_det3_obj_blob(), target);
  }

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_cls_blob().data(), static_cast<int>(this->_internal_det3_cls_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_cls_blob");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_det3_cls_blob(), target);
  }

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_ori_blob().data(), static_cast<int>(this->_internal_det3_ori_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_ori_blob");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_det3_ori_blob(), target);
  }

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_ori_conf_blob().data(), static_cast<int>(this->_internal_det3_ori_conf_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_ori_conf_blob");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_det3_ori_conf_blob(), target);
  }

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det3_dim_blob().data(), static_cast<int>(this->_internal_det3_dim_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.det3_dim_blob");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_det3_dim_blob(), target);
  }

  // optional string lof_blob = 19 [default = "lof_pred"];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lof_blob().data(), static_cast<int>(this->_internal_lof_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.lof_blob");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_lof_blob(), target);
  }

  // optional string lor_blob = 20 [default = "lor_pred"];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lor_blob().data(), static_cast<int>(this->_internal_lor_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.lor_blob");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_lor_blob(), target);
  }

  // optional string rois_blob = 22 [default = "rois_pred"];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rois_blob().data(), static_cast<int>(this->_internal_rois_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rois_blob");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_rois_blob(), target);
  }

  // optional string feat_blob = 23 [default = "conv_feat"];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feat_blob().data(), static_cast<int>(this->_internal_feat_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.feat_blob");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_feat_blob(), target);
  }

  // optional string box_blob = 24 [default = "box_pred"];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_box_blob().data(), static_cast<int>(this->_internal_box_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.box_blob");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_box_blob(), target);
  }

  // optional string iou_blob = 25 [default = "iou_pred"];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_iou_blob().data(), static_cast<int>(this->_internal_iou_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.iou_blob");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_iou_blob(), target);
  }

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brvis_blob().data(), static_cast<int>(this->_internal_brvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.brvis_blob");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_brvis_blob(), target);
  }

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brswt_blob().data(), static_cast<int>(this->_internal_brswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.brswt_blob");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_brswt_blob(), target);
  }

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ltvis_blob().data(), static_cast<int>(this->_internal_ltvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.ltvis_blob");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_ltvis_blob(), target);
  }

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ltswt_blob().data(), static_cast<int>(this->_internal_ltswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.ltswt_blob");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_ltswt_blob(), target);
  }

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtvis_blob().data(), static_cast<int>(this->_internal_rtvis_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rtvis_blob");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_rtvis_blob(), target);
  }

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtswt_blob().data(), static_cast<int>(this->_internal_rtswt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.rtswt_blob");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_rtswt_blob(), target);
  }

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_area_id_blob().data(), static_cast<int>(this->_internal_area_id_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.area_id_blob");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_area_id_blob(), target);
  }

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visible_ratio_blob().data(), static_cast<int>(this->_internal_visible_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.visible_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_visible_ratio_blob(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cut_off_ratio_blob().data(), static_cast<int>(this->_internal_cut_off_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.cut_off_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_cut_off_ratio_blob(), target);
  }

  // optional string input_data_blob = 35 [default = "data"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_data_blob().data(), static_cast<int>(this->_internal_input_data_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_data_blob");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_input_data_blob(), target);
  }

  // optional string input_ratio_blob = 36 [default = "ratio"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_ratio_blob().data(), static_cast<int>(this->_internal_input_ratio_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_ratio_blob");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_input_ratio_blob(), target);
  }

  // optional string input_instric_blob = 37 [default = "K"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_instric_blob().data(), static_cast<int>(this->_internal_input_instric_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NetworkParam.input_instric_blob");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_input_instric_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.NetworkParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_loc_blob());
    }

    // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_obj_blob());
    }

    // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_cls_blob());
    }

    // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_ori_blob());
    }

    // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_ori_conf_blob());
    }

    // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det1_dim_blob());
    }

    // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_loc_blob());
    }

    // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_obj_blob());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_cls_blob());
    }

    // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_ori_blob());
    }

    // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_ori_conf_blob());
    }

    // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det2_dim_blob());
    }

    // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_loc_blob());
    }

    // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_obj_blob());
    }

    // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_cls_blob());
    }

    // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_ori_blob());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_ori_conf_blob());
    }

    // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det3_dim_blob());
    }

    // optional string lof_blob = 19 [default = "lof_pred"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lof_blob());
    }

    // optional string lor_blob = 20 [default = "lor_pred"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lor_blob());
    }

    // optional string rois_blob = 22 [default = "rois_pred"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rois_blob());
    }

    // optional string feat_blob = 23 [default = "conv_feat"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feat_blob());
    }

    // optional string box_blob = 24 [default = "box_pred"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_box_blob());
    }

    // optional string iou_blob = 25 [default = "iou_pred"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_iou_blob());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string brvis_blob = 26 [default = "brvis_pred"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brvis_blob());
    }

    // optional string brswt_blob = 27 [default = "brswt_pred"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_brswt_blob());
    }

    // optional string ltvis_blob = 28 [default = "ltvis_pred"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ltvis_blob());
    }

    // optional string ltswt_blob = 29 [default = "ltswt_pred"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ltswt_blob());
    }

    // optional string rtvis_blob = 30 [default = "rtvis_pred"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtvis_blob());
    }

    // optional string rtswt_blob = 31 [default = "rtswt_pred"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtswt_blob());
    }

    // optional string area_id_blob = 32 [default = "area_id_pred"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_area_id_blob());
    }

    // optional string visible_ratio_blob = 33 [default = "vis_pred"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visible_ratio_blob());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cut_off_ratio_blob());
    }

    // optional string input_data_blob = 35 [default = "data"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_data_blob());
    }

    // optional string input_ratio_blob = 36 [default = "ratio"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_ratio_blob());
    }

    // optional string input_instric_blob = 37 [default = "K"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_instric_blob());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkParam::GetClassData() const { return &_class_data_; }

void NetworkParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkParam *>(to)->MergeFrom(
      static_cast<const NetworkParam &>(from));
}


void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_det1_loc_blob(from._internal_det1_loc_blob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_det1_obj_blob(from._internal_det1_obj_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_det1_cls_blob(from._internal_det1_cls_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_det1_ori_blob(from._internal_det1_ori_blob());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_det1_ori_conf_blob(from._internal_det1_ori_conf_blob());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_det1_dim_blob(from._internal_det1_dim_blob());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_det2_loc_blob(from._internal_det2_loc_blob());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_det2_obj_blob(from._internal_det2_obj_blob());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_det2_cls_blob(from._internal_det2_cls_blob());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_det2_ori_blob(from._internal_det2_ori_blob());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_det2_ori_conf_blob(from._internal_det2_ori_conf_blob());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_det2_dim_blob(from._internal_det2_dim_blob());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_det3_loc_blob(from._internal_det3_loc_blob());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_det3_obj_blob(from._internal_det3_obj_blob());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_det3_cls_blob(from._internal_det3_cls_blob());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_det3_ori_blob(from._internal_det3_ori_blob());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_det3_ori_conf_blob(from._internal_det3_ori_conf_blob());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_det3_dim_blob(from._internal_det3_dim_blob());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_lof_blob(from._internal_lof_blob());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_lor_blob(from._internal_lor_blob());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_rois_blob(from._internal_rois_blob());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_feat_blob(from._internal_feat_blob());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_box_blob(from._internal_box_blob());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_iou_blob(from._internal_iou_blob());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_brvis_blob(from._internal_brvis_blob());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_brswt_blob(from._internal_brswt_blob());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_ltvis_blob(from._internal_ltvis_blob());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_ltswt_blob(from._internal_ltswt_blob());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_rtvis_blob(from._internal_rtvis_blob());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_rtswt_blob(from._internal_rtswt_blob());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_area_id_blob(from._internal_area_id_blob());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_visible_ratio_blob(from._internal_visible_ratio_blob());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cut_off_ratio_blob(from._internal_cut_off_ratio_blob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_data_blob(from._internal_input_data_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_input_ratio_blob(from._internal_input_ratio_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_input_instric_blob(from._internal_input_instric_blob());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::InternalSwap(NetworkParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_loc_blob_, lhs_arena,
      &other->_impl_.det1_loc_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_obj_blob_, lhs_arena,
      &other->_impl_.det1_obj_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_cls_blob_, lhs_arena,
      &other->_impl_.det1_cls_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_ori_blob_, lhs_arena,
      &other->_impl_.det1_ori_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_ori_conf_blob_, lhs_arena,
      &other->_impl_.det1_ori_conf_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det1_dim_blob_, lhs_arena,
      &other->_impl_.det1_dim_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_loc_blob_, lhs_arena,
      &other->_impl_.det2_loc_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_obj_blob_, lhs_arena,
      &other->_impl_.det2_obj_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_cls_blob_, lhs_arena,
      &other->_impl_.det2_cls_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_ori_blob_, lhs_arena,
      &other->_impl_.det2_ori_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_ori_conf_blob_, lhs_arena,
      &other->_impl_.det2_ori_conf_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det2_dim_blob_, lhs_arena,
      &other->_impl_.det2_dim_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_loc_blob_, lhs_arena,
      &other->_impl_.det3_loc_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_obj_blob_, lhs_arena,
      &other->_impl_.det3_obj_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_cls_blob_, lhs_arena,
      &other->_impl_.det3_cls_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_ori_blob_, lhs_arena,
      &other->_impl_.det3_ori_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_ori_conf_blob_, lhs_arena,
      &other->_impl_.det3_ori_conf_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.det3_dim_blob_, lhs_arena,
      &other->_impl_.det3_dim_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lof_blob_, lhs_arena,
      &other->_impl_.lof_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lor_blob_, lhs_arena,
      &other->_impl_.lor_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rois_blob_, lhs_arena,
      &other->_impl_.rois_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feat_blob_, lhs_arena,
      &other->_impl_.feat_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.box_blob_, lhs_arena,
      &other->_impl_.box_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iou_blob_, lhs_arena,
      &other->_impl_.iou_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.brvis_blob_, lhs_arena,
      &other->_impl_.brvis_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.brswt_blob_, lhs_arena,
      &other->_impl_.brswt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ltvis_blob_, lhs_arena,
      &other->_impl_.ltvis_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ltswt_blob_, lhs_arena,
      &other->_impl_.ltswt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rtvis_blob_, lhs_arena,
      &other->_impl_.rtvis_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rtswt_blob_, lhs_arena,
      &other->_impl_.rtswt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.area_id_blob_, lhs_arena,
      &other->_impl_.area_id_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.visible_ratio_blob_, lhs_arena,
      &other->_impl_.visible_ratio_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cut_off_ratio_blob_, lhs_arena,
      &other->_impl_.cut_off_ratio_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_data_blob_, lhs_arena,
      &other->_impl_.input_data_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_ratio_blob_, lhs_arena,
      &other->_impl_.input_ratio_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_instric_blob_, lhs_arena,
      &other->_impl_.input_instric_blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[2]);
}

// ===================================================================

class NMSParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NMSParam>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inter_cls_conf_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inter_cls_nms_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NMSParam::Impl_::_i_give_permission_to_break_this_code_default_type_{{{"NormalNMS", 9}}, {nullptr}};
NMSParam::NMSParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.NMSParam)
}
NMSParam::NMSParam(const NMSParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.sigma_){}
    , decltype(_impl_.inter_cls_conf_thresh_){}
    , decltype(_impl_.inter_cls_nms_thresh_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  if (from._internal_has_type()) {
    _impl_.type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.threshold_, &from._impl_.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inter_cls_nms_thresh_) -
    reinterpret_cast<char*>(&_impl_.threshold_)) + sizeof(_impl_.inter_cls_nms_thresh_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.NMSParam)
}

inline void NMSParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.threshold_){0.4f}
    , decltype(_impl_.sigma_){0.4f}
    , decltype(_impl_.inter_cls_conf_thresh_){0.1f}
    , decltype(_impl_.inter_cls_nms_thresh_){1}
  };
  _impl_.type_.InitDefault();
}

NMSParam::~NMSParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.NMSParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NMSParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void NMSParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NMSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.NMSParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearToDefault(::apollo::perception::camera::smoke::NMSParam::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
       }
    _impl_.threshold_ = 0.4f;
    _impl_.sigma_ = 0.4f;
    _impl_.inter_cls_conf_thresh_ = 0.1f;
    _impl_.inter_cls_nms_thresh_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NMSParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1 [default = "NormalNMS"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.smoke.NMSParam.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float threshold = 2 [default = 0.4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sigma = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_sigma(&has_bits);
          _impl_.sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float inter_cls_conf_thresh = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_inter_cls_conf_thresh(&has_bits);
          _impl_.inter_cls_conf_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float inter_cls_nms_thresh = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_inter_cls_nms_thresh(&has_bits);
          _impl_.inter_cls_nms_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NMSParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.NMSParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1 [default = "NormalNMS"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.smoke.NMSParam.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float threshold = 2 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  // optional float sigma = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_sigma(), target);
  }

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_inter_cls_conf_thresh(), target);
  }

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_inter_cls_nms_thresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.NMSParam)
  return target;
}

size_t NMSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.NMSParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string type = 1 [default = "NormalNMS"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional float threshold = 2 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float sigma = 3 [default = 0.4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_conf_thresh = 4 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_nms_thresh = 5 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NMSParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NMSParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NMSParam::GetClassData() const { return &_class_data_; }

void NMSParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NMSParam *>(to)->MergeFrom(
      static_cast<const NMSParam &>(from));
}


void NMSParam::MergeFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.NMSParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sigma_ = from._impl_.sigma_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.inter_cls_conf_thresh_ = from._impl_.inter_cls_conf_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.inter_cls_nms_thresh_ = from._impl_.inter_cls_nms_thresh_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NMSParam::CopyFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.NMSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSParam::IsInitialized() const {
  return true;
}

void NMSParam::InternalSwap(NMSParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.threshold_, other->_impl_.threshold_);
  swap(_impl_.sigma_, other->_impl_.sigma_);
  swap(_impl_.inter_cls_conf_thresh_, other->_impl_.inter_cls_conf_thresh_);
  swap(_impl_.inter_cls_nms_thresh_, other->_impl_.inter_cls_nms_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NMSParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[3]);
}

// ===================================================================

class BBoxStatistics::_Internal {
 public:
};

BBoxStatistics::BBoxStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.BBoxStatistics)
}
BBoxStatistics::BBoxStatistics(const BBoxStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.mean_){from._impl_.mean_}
    , decltype(_impl_.std_){from._impl_.std_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.BBoxStatistics)
}

inline void BBoxStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mean_){arena}
    , decltype(_impl_.std_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BBoxStatistics::~BBoxStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.BBoxStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BBoxStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mean_.~RepeatedField();
  _impl_.std_.~RepeatedField();
}

void BBoxStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BBoxStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.BBoxStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mean_.Clear();
  _impl_.std_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBoxStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mean(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mean(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_std(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_std(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBoxStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.BBoxStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mean = 1;
  for (int i = 0, n = this->_internal_mean_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mean(i), target);
  }

  // repeated float std = 2;
  for (int i = 0, n = this->_internal_std_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_std(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.BBoxStatistics)
  return target;
}

size_t BBoxStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.BBoxStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_mean_size());
    total_size += data_size;
  }

  // repeated float std = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_std_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBoxStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBoxStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBoxStatistics::GetClassData() const { return &_class_data_; }

void BBoxStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBoxStatistics *>(to)->MergeFrom(
      static_cast<const BBoxStatistics &>(from));
}


void BBoxStatistics::MergeFrom(const BBoxStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.mean_.MergeFrom(from._impl_.mean_);
  _impl_.std_.MergeFrom(from._impl_.std_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBoxStatistics::CopyFrom(const BBoxStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.BBoxStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxStatistics::IsInitialized() const {
  return true;
}

void BBoxStatistics::InternalSwap(BBoxStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mean_.InternalSwap(&other->_impl_.mean_);
  _impl_.std_.InternalSwap(&other->_impl_.std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBoxStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[4]);
}

// ===================================================================

class DimensionStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<DimensionStatistics>()._impl_._has_bits_);
  static void set_has_mean_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_std_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DimensionStatistics::DimensionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.smoke.DimensionStatistics)
}
DimensionStatistics::DimensionStatistics(const DimensionStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_h_){}
    , decltype(_impl_.mean_w_){}
    , decltype(_impl_.mean_l_){}
    , decltype(_impl_.std_l_){}
    , decltype(_impl_.std_h_){}
    , decltype(_impl_.std_w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mean_h_, &from._impl_.mean_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.std_w_) -
    reinterpret_cast<char*>(&_impl_.mean_h_)) + sizeof(_impl_.std_w_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.smoke.DimensionStatistics)
}

inline void DimensionStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mean_h_){0}
    , decltype(_impl_.mean_w_){0}
    , decltype(_impl_.mean_l_){0}
    , decltype(_impl_.std_l_){1}
    , decltype(_impl_.std_h_){1}
    , decltype(_impl_.std_w_){1}
  };
}

DimensionStatistics::~DimensionStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.smoke.DimensionStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DimensionStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DimensionStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DimensionStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.smoke.DimensionStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.mean_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mean_l_) -
        reinterpret_cast<char*>(&_impl_.mean_h_)) + sizeof(_impl_.mean_l_));
    _impl_.std_l_ = 1;
    _impl_.std_h_ = 1;
    _impl_.std_w_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DimensionStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float mean_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_mean_h(&has_bits);
          _impl_.mean_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_mean_w(&has_bits);
          _impl_.mean_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_mean_l(&has_bits);
          _impl_.mean_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_h = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_std_h(&has_bits);
          _impl_.std_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_w = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_std_w(&has_bits);
          _impl_.std_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float std_l = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_std_l(&has_bits);
          _impl_.std_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DimensionStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.smoke.DimensionStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float mean_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mean_h(), target);
  }

  // optional float mean_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_mean_w(), target);
  }

  // optional float mean_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_l(), target);
  }

  // optional float std_h = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_std_h(), target);
  }

  // optional float std_w = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_std_w(), target);
  }

  // optional float std_l = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_std_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.smoke.DimensionStatistics)
  return target;
}

size_t DimensionStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.smoke.DimensionStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float mean_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float mean_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float mean_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float std_l = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float std_h = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float std_w = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DimensionStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DimensionStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DimensionStatistics::GetClassData() const { return &_class_data_; }

void DimensionStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DimensionStatistics *>(to)->MergeFrom(
      static_cast<const DimensionStatistics &>(from));
}


void DimensionStatistics::MergeFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mean_h_ = from._impl_.mean_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mean_w_ = from._impl_.mean_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mean_l_ = from._impl_.mean_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.std_l_ = from._impl_.std_l_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.std_h_ = from._impl_.std_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.std_w_ = from._impl_.std_w_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DimensionStatistics::CopyFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.smoke.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatistics::IsInitialized() const {
  return true;
}

void DimensionStatistics::InternalSwap(DimensionStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DimensionStatistics, _impl_.mean_l_)
      + sizeof(DimensionStatistics::_impl_.mean_l_)
      - PROTOBUF_FIELD_OFFSET(DimensionStatistics, _impl_.mean_h_)>(
          reinterpret_cast<char*>(&_impl_.mean_h_),
          reinterpret_cast<char*>(&other->_impl_.mean_h_));
  swap(_impl_.std_l_, other->_impl_.std_l_);
  swap(_impl_.std_h_, other->_impl_.std_h_);
  swap(_impl_.std_w_, other->_impl_.std_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimensionStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fsmoke_2fproto_2fsmoke_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace smoke
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::SmokeParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::SmokeParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::SmokeParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::ModelParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::ModelParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::ModelParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::NetworkParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::NetworkParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::NetworkParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::NMSParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::NMSParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::NMSParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::BBoxStatistics*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::BBoxStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::BBoxStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::smoke::DimensionStatistics*
Arena::CreateMaybeMessage< ::apollo::perception::camera::smoke::DimensionStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::smoke::DimensionStatistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
