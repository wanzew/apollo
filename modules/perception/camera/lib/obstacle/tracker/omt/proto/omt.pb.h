// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/tracker/omt/proto/omt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace omt {
class KalmanParam;
struct KalmanParamDefaultTypeInternal;
extern KalmanParamDefaultTypeInternal _KalmanParam_default_instance_;
class OmtParam;
struct OmtParamDefaultTypeInternal;
extern OmtParamDefaultTypeInternal _OmtParam_default_instance_;
class ReferenceParam;
struct ReferenceParamDefaultTypeInternal;
extern ReferenceParamDefaultTypeInternal _ReferenceParam_default_instance_;
class TargetParam;
struct TargetParamDefaultTypeInternal;
extern TargetParamDefaultTypeInternal _TargetParam_default_instance_;
class WeightParam;
struct WeightParamDefaultTypeInternal;
extern WeightParamDefaultTypeInternal _WeightParam_default_instance_;
}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::omt::KalmanParam* Arena::CreateMaybeMessage<::apollo::perception::camera::omt::KalmanParam>(Arena*);
template<> ::apollo::perception::camera::omt::OmtParam* Arena::CreateMaybeMessage<::apollo::perception::camera::omt::OmtParam>(Arena*);
template<> ::apollo::perception::camera::omt::ReferenceParam* Arena::CreateMaybeMessage<::apollo::perception::camera::omt::ReferenceParam>(Arena*);
template<> ::apollo::perception::camera::omt::TargetParam* Arena::CreateMaybeMessage<::apollo::perception::camera::omt::TargetParam>(Arena*);
template<> ::apollo::perception::camera::omt::WeightParam* Arena::CreateMaybeMessage<::apollo::perception::camera::omt::WeightParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace omt {

// ===================================================================

class KalmanParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.omt.KalmanParam) */ {
 public:
  inline KalmanParam() : KalmanParam(nullptr) {}
  ~KalmanParam() override;
  explicit PROTOBUF_CONSTEXPR KalmanParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KalmanParam(const KalmanParam& from);
  KalmanParam(KalmanParam&& from) noexcept
    : KalmanParam() {
    *this = ::std::move(from);
  }

  inline KalmanParam& operator=(const KalmanParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline KalmanParam& operator=(KalmanParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KalmanParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const KalmanParam* internal_default_instance() {
    return reinterpret_cast<const KalmanParam*>(
               &_KalmanParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KalmanParam& a, KalmanParam& b) {
    a.Swap(&b);
  }
  inline void Swap(KalmanParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KalmanParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KalmanParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KalmanParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KalmanParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KalmanParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KalmanParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.omt.KalmanParam";
  }
  protected:
  explicit KalmanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitVarianceFieldNumber = 1,
    kProcessVarianceFieldNumber = 2,
    kMeasureVarianceFieldNumber = 3,
  };
  // optional float init_variance = 1;
  bool has_init_variance() const;
  private:
  bool _internal_has_init_variance() const;
  public:
  void clear_init_variance();
  float init_variance() const;
  void set_init_variance(float value);
  private:
  float _internal_init_variance() const;
  void _internal_set_init_variance(float value);
  public:

  // optional float process_variance = 2;
  bool has_process_variance() const;
  private:
  bool _internal_has_process_variance() const;
  public:
  void clear_process_variance();
  float process_variance() const;
  void set_process_variance(float value);
  private:
  float _internal_process_variance() const;
  void _internal_set_process_variance(float value);
  public:

  // optional float measure_variance = 3;
  bool has_measure_variance() const;
  private:
  bool _internal_has_measure_variance() const;
  public:
  void clear_measure_variance();
  float measure_variance() const;
  void set_measure_variance(float value);
  private:
  float _internal_measure_variance() const;
  void _internal_set_measure_variance(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.KalmanParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float init_variance_;
    float process_variance_;
    float measure_variance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
};
// -------------------------------------------------------------------

class TargetParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.omt.TargetParam) */ {
 public:
  inline TargetParam() : TargetParam(nullptr) {}
  ~TargetParam() override;
  explicit PROTOBUF_CONSTEXPR TargetParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetParam(const TargetParam& from);
  TargetParam(TargetParam&& from) noexcept
    : TargetParam() {
    *this = ::std::move(from);
  }

  inline TargetParam& operator=(const TargetParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetParam& operator=(TargetParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetParam* internal_default_instance() {
    return reinterpret_cast<const TargetParam*>(
               &_TargetParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TargetParam& a, TargetParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.omt.TargetParam";
  }
  protected:
  explicit TargetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldCenterFieldNumber = 3,
    kImageCenterFieldNumber = 4,
    kImageWhUpdateRateFieldNumber = 5,
    kClappingVelocityFieldNumber = 20,
    kVelocityThresholdFieldNumber = 1,
    kVelocityOutputDelayFieldNumber = 2,
    kWorldLhwHistoryFieldNumber = 6,
    kHeightDiffRatioFieldNumber = 7,
    kWorldStateHistoryFieldNumber = 8,
    kMinCachedWorldStateHistorySizeFieldNumber = 9,
    kMinCachedVelocitySizeFieldNumber = 10,
    kMinCachedPositionSizeFieldNumber = 11,
    kCalcAvgPositionWindowSizeFieldNumber = 12,
    kStaticSpeedThresholdFieldNumber = 13,
    kStaticSpeedThresholdPedFieldNumber = 14,
    kMinMovingAvgSpeedFieldNumber = 15,
    kMinMovingAvgSpeedPedFieldNumber = 16,
    kAbnormalAccThresholdFieldNumber = 17,
    kAbnormalAccThresholdPedFieldNumber = 18,
    kAbnormalVelocityHeadingAngleThresholdFieldNumber = 19,
    kWorldMeanVelocityDurationFieldNumber = 21,
    kTrackedLifeFieldNumber = 22,
    kTypeFilterVarFieldNumber = 23,
    kLargeVelocityRatioFieldNumber = 24,
    kTooLargeVelocityRatioFieldNumber = 25,
    kMeanFilterWindowFieldNumber = 26,
    kDirectionFilterRatioFieldNumber = 27,
    kDisplacementThetaVarFieldNumber = 28,
    kVelocityThetaVarFieldNumber = 29,
    kStableMovingSpeedFieldNumber = 30,
  };
  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  bool has_world_center() const;
  private:
  bool _internal_has_world_center() const;
  public:
  void clear_world_center();
  const ::apollo::perception::camera::omt::KalmanParam& world_center() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::KalmanParam* release_world_center();
  ::apollo::perception::camera::omt::KalmanParam* mutable_world_center();
  void set_allocated_world_center(::apollo::perception::camera::omt::KalmanParam* world_center);
  private:
  const ::apollo::perception::camera::omt::KalmanParam& _internal_world_center() const;
  ::apollo::perception::camera::omt::KalmanParam* _internal_mutable_world_center();
  public:
  void unsafe_arena_set_allocated_world_center(
      ::apollo::perception::camera::omt::KalmanParam* world_center);
  ::apollo::perception::camera::omt::KalmanParam* unsafe_arena_release_world_center();

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  bool has_image_center() const;
  private:
  bool _internal_has_image_center() const;
  public:
  void clear_image_center();
  const ::apollo::perception::camera::omt::KalmanParam& image_center() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::KalmanParam* release_image_center();
  ::apollo::perception::camera::omt::KalmanParam* mutable_image_center();
  void set_allocated_image_center(::apollo::perception::camera::omt::KalmanParam* image_center);
  private:
  const ::apollo::perception::camera::omt::KalmanParam& _internal_image_center() const;
  ::apollo::perception::camera::omt::KalmanParam* _internal_mutable_image_center();
  public:
  void unsafe_arena_set_allocated_image_center(
      ::apollo::perception::camera::omt::KalmanParam* image_center);
  ::apollo::perception::camera::omt::KalmanParam* unsafe_arena_release_image_center();

  // optional float image_wh_update_rate = 5;
  bool has_image_wh_update_rate() const;
  private:
  bool _internal_has_image_wh_update_rate() const;
  public:
  void clear_image_wh_update_rate();
  float image_wh_update_rate() const;
  void set_image_wh_update_rate(float value);
  private:
  float _internal_image_wh_update_rate() const;
  void _internal_set_image_wh_update_rate(float value);
  public:

  // optional bool clapping_velocity = 20 [default = false];
  bool has_clapping_velocity() const;
  private:
  bool _internal_has_clapping_velocity() const;
  public:
  void clear_clapping_velocity();
  bool clapping_velocity() const;
  void set_clapping_velocity(bool value);
  private:
  bool _internal_clapping_velocity() const;
  void _internal_set_clapping_velocity(bool value);
  public:

  // optional float velocity_threshold = 1 [default = 2];
  bool has_velocity_threshold() const;
  private:
  bool _internal_has_velocity_threshold() const;
  public:
  void clear_velocity_threshold();
  float velocity_threshold() const;
  void set_velocity_threshold(float value);
  private:
  float _internal_velocity_threshold() const;
  void _internal_set_velocity_threshold(float value);
  public:

  // optional int32 velocity_output_delay = 2 [default = 2];
  bool has_velocity_output_delay() const;
  private:
  bool _internal_has_velocity_output_delay() const;
  public:
  void clear_velocity_output_delay();
  int32_t velocity_output_delay() const;
  void set_velocity_output_delay(int32_t value);
  private:
  int32_t _internal_velocity_output_delay() const;
  void _internal_set_velocity_output_delay(int32_t value);
  public:

  // optional int32 world_lhw_history = 6 [default = 15];
  bool has_world_lhw_history() const;
  private:
  bool _internal_has_world_lhw_history() const;
  public:
  void clear_world_lhw_history();
  int32_t world_lhw_history() const;
  void set_world_lhw_history(int32_t value);
  private:
  int32_t _internal_world_lhw_history() const;
  void _internal_set_world_lhw_history(int32_t value);
  public:

  // optional float height_diff_ratio = 7 [default = 0.1];
  bool has_height_diff_ratio() const;
  private:
  bool _internal_has_height_diff_ratio() const;
  public:
  void clear_height_diff_ratio();
  float height_diff_ratio() const;
  void set_height_diff_ratio(float value);
  private:
  float _internal_height_diff_ratio() const;
  void _internal_set_height_diff_ratio(float value);
  public:

  // optional int32 world_state_history = 8 [default = 30];
  bool has_world_state_history() const;
  private:
  bool _internal_has_world_state_history() const;
  public:
  void clear_world_state_history();
  int32_t world_state_history() const;
  void set_world_state_history(int32_t value);
  private:
  int32_t _internal_world_state_history() const;
  void _internal_set_world_state_history(int32_t value);
  public:

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  bool has_min_cached_world_state_history_size() const;
  private:
  bool _internal_has_min_cached_world_state_history_size() const;
  public:
  void clear_min_cached_world_state_history_size();
  int32_t min_cached_world_state_history_size() const;
  void set_min_cached_world_state_history_size(int32_t value);
  private:
  int32_t _internal_min_cached_world_state_history_size() const;
  void _internal_set_min_cached_world_state_history_size(int32_t value);
  public:

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  bool has_min_cached_velocity_size() const;
  private:
  bool _internal_has_min_cached_velocity_size() const;
  public:
  void clear_min_cached_velocity_size();
  int32_t min_cached_velocity_size() const;
  void set_min_cached_velocity_size(int32_t value);
  private:
  int32_t _internal_min_cached_velocity_size() const;
  void _internal_set_min_cached_velocity_size(int32_t value);
  public:

  // optional int32 min_cached_position_size = 11 [default = 25];
  bool has_min_cached_position_size() const;
  private:
  bool _internal_has_min_cached_position_size() const;
  public:
  void clear_min_cached_position_size();
  int32_t min_cached_position_size() const;
  void set_min_cached_position_size(int32_t value);
  private:
  int32_t _internal_min_cached_position_size() const;
  void _internal_set_min_cached_position_size(int32_t value);
  public:

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  bool has_calc_avg_position_window_size() const;
  private:
  bool _internal_has_calc_avg_position_window_size() const;
  public:
  void clear_calc_avg_position_window_size();
  int32_t calc_avg_position_window_size() const;
  void set_calc_avg_position_window_size(int32_t value);
  private:
  int32_t _internal_calc_avg_position_window_size() const;
  void _internal_set_calc_avg_position_window_size(int32_t value);
  public:

  // optional float static_speed_threshold = 13 [default = 0.5];
  bool has_static_speed_threshold() const;
  private:
  bool _internal_has_static_speed_threshold() const;
  public:
  void clear_static_speed_threshold();
  float static_speed_threshold() const;
  void set_static_speed_threshold(float value);
  private:
  float _internal_static_speed_threshold() const;
  void _internal_set_static_speed_threshold(float value);
  public:

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  bool has_static_speed_threshold_ped() const;
  private:
  bool _internal_has_static_speed_threshold_ped() const;
  public:
  void clear_static_speed_threshold_ped();
  float static_speed_threshold_ped() const;
  void set_static_speed_threshold_ped(float value);
  private:
  float _internal_static_speed_threshold_ped() const;
  void _internal_set_static_speed_threshold_ped(float value);
  public:

  // optional float min_moving_avg_speed = 15 [default = 1];
  bool has_min_moving_avg_speed() const;
  private:
  bool _internal_has_min_moving_avg_speed() const;
  public:
  void clear_min_moving_avg_speed();
  float min_moving_avg_speed() const;
  void set_min_moving_avg_speed(float value);
  private:
  float _internal_min_moving_avg_speed() const;
  void _internal_set_min_moving_avg_speed(float value);
  public:

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  bool has_min_moving_avg_speed_ped() const;
  private:
  bool _internal_has_min_moving_avg_speed_ped() const;
  public:
  void clear_min_moving_avg_speed_ped();
  float min_moving_avg_speed_ped() const;
  void set_min_moving_avg_speed_ped(float value);
  private:
  float _internal_min_moving_avg_speed_ped() const;
  void _internal_set_min_moving_avg_speed_ped(float value);
  public:

  // optional float abnormal_acc_threshold = 17 [default = 6];
  bool has_abnormal_acc_threshold() const;
  private:
  bool _internal_has_abnormal_acc_threshold() const;
  public:
  void clear_abnormal_acc_threshold();
  float abnormal_acc_threshold() const;
  void set_abnormal_acc_threshold(float value);
  private:
  float _internal_abnormal_acc_threshold() const;
  void _internal_set_abnormal_acc_threshold(float value);
  public:

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  bool has_abnormal_acc_threshold_ped() const;
  private:
  bool _internal_has_abnormal_acc_threshold_ped() const;
  public:
  void clear_abnormal_acc_threshold_ped();
  float abnormal_acc_threshold_ped() const;
  void set_abnormal_acc_threshold_ped(float value);
  private:
  float _internal_abnormal_acc_threshold_ped() const;
  void _internal_set_abnormal_acc_threshold_ped(float value);
  public:

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  bool has_abnormal_velocity_heading_angle_threshold() const;
  private:
  bool _internal_has_abnormal_velocity_heading_angle_threshold() const;
  public:
  void clear_abnormal_velocity_heading_angle_threshold();
  float abnormal_velocity_heading_angle_threshold() const;
  void set_abnormal_velocity_heading_angle_threshold(float value);
  private:
  float _internal_abnormal_velocity_heading_angle_threshold() const;
  void _internal_set_abnormal_velocity_heading_angle_threshold(float value);
  public:

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  bool has_world_mean_velocity_duration() const;
  private:
  bool _internal_has_world_mean_velocity_duration() const;
  public:
  void clear_world_mean_velocity_duration();
  int32_t world_mean_velocity_duration() const;
  void set_world_mean_velocity_duration(int32_t value);
  private:
  int32_t _internal_world_mean_velocity_duration() const;
  void _internal_set_world_mean_velocity_duration(int32_t value);
  public:

  // optional int32 tracked_life = 22 [default = 3];
  bool has_tracked_life() const;
  private:
  bool _internal_has_tracked_life() const;
  public:
  void clear_tracked_life();
  int32_t tracked_life() const;
  void set_tracked_life(int32_t value);
  private:
  int32_t _internal_tracked_life() const;
  void _internal_set_tracked_life(int32_t value);
  public:

  // optional float type_filter_var = 23 [default = 0.3];
  bool has_type_filter_var() const;
  private:
  bool _internal_has_type_filter_var() const;
  public:
  void clear_type_filter_var();
  float type_filter_var() const;
  void set_type_filter_var(float value);
  private:
  float _internal_type_filter_var() const;
  void _internal_set_type_filter_var(float value);
  public:

  // optional float large_velocity_ratio = 24 [default = 2.5];
  bool has_large_velocity_ratio() const;
  private:
  bool _internal_has_large_velocity_ratio() const;
  public:
  void clear_large_velocity_ratio();
  float large_velocity_ratio() const;
  void set_large_velocity_ratio(float value);
  private:
  float _internal_large_velocity_ratio() const;
  void _internal_set_large_velocity_ratio(float value);
  public:

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  bool has_too_large_velocity_ratio() const;
  private:
  bool _internal_has_too_large_velocity_ratio() const;
  public:
  void clear_too_large_velocity_ratio();
  float too_large_velocity_ratio() const;
  void set_too_large_velocity_ratio(float value);
  private:
  float _internal_too_large_velocity_ratio() const;
  void _internal_set_too_large_velocity_ratio(float value);
  public:

  // optional int32 mean_filter_window = 26 [default = 10];
  bool has_mean_filter_window() const;
  private:
  bool _internal_has_mean_filter_window() const;
  public:
  void clear_mean_filter_window();
  int32_t mean_filter_window() const;
  void set_mean_filter_window(int32_t value);
  private:
  int32_t _internal_mean_filter_window() const;
  void _internal_set_mean_filter_window(int32_t value);
  public:

  // optional float direction_filter_ratio = 27 [default = 0.7];
  bool has_direction_filter_ratio() const;
  private:
  bool _internal_has_direction_filter_ratio() const;
  public:
  void clear_direction_filter_ratio();
  float direction_filter_ratio() const;
  void set_direction_filter_ratio(float value);
  private:
  float _internal_direction_filter_ratio() const;
  void _internal_set_direction_filter_ratio(float value);
  public:

  // optional float displacement_theta_var = 28 [default = 0.25];
  bool has_displacement_theta_var() const;
  private:
  bool _internal_has_displacement_theta_var() const;
  public:
  void clear_displacement_theta_var();
  float displacement_theta_var() const;
  void set_displacement_theta_var(float value);
  private:
  float _internal_displacement_theta_var() const;
  void _internal_set_displacement_theta_var(float value);
  public:

  // optional float velocity_theta_var = 29 [default = 0.5];
  bool has_velocity_theta_var() const;
  private:
  bool _internal_has_velocity_theta_var() const;
  public:
  void clear_velocity_theta_var();
  float velocity_theta_var() const;
  void set_velocity_theta_var(float value);
  private:
  float _internal_velocity_theta_var() const;
  void _internal_set_velocity_theta_var(float value);
  public:

  // optional float stable_moving_speed = 30 [default = 2];
  bool has_stable_moving_speed() const;
  private:
  bool _internal_has_stable_moving_speed() const;
  public:
  void clear_stable_moving_speed();
  float stable_moving_speed() const;
  void set_stable_moving_speed(float value);
  private:
  float _internal_stable_moving_speed() const;
  void _internal_set_stable_moving_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.TargetParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::camera::omt::KalmanParam* world_center_;
    ::apollo::perception::camera::omt::KalmanParam* image_center_;
    float image_wh_update_rate_;
    bool clapping_velocity_;
    float velocity_threshold_;
    int32_t velocity_output_delay_;
    int32_t world_lhw_history_;
    float height_diff_ratio_;
    int32_t world_state_history_;
    int32_t min_cached_world_state_history_size_;
    int32_t min_cached_velocity_size_;
    int32_t min_cached_position_size_;
    int32_t calc_avg_position_window_size_;
    float static_speed_threshold_;
    float static_speed_threshold_ped_;
    float min_moving_avg_speed_;
    float min_moving_avg_speed_ped_;
    float abnormal_acc_threshold_;
    float abnormal_acc_threshold_ped_;
    float abnormal_velocity_heading_angle_threshold_;
    int32_t world_mean_velocity_duration_;
    int32_t tracked_life_;
    float type_filter_var_;
    float large_velocity_ratio_;
    float too_large_velocity_ratio_;
    int32_t mean_filter_window_;
    float direction_filter_ratio_;
    float displacement_theta_var_;
    float velocity_theta_var_;
    float stable_moving_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
};
// -------------------------------------------------------------------

class ReferenceParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.omt.ReferenceParam) */ {
 public:
  inline ReferenceParam() : ReferenceParam(nullptr) {}
  ~ReferenceParam() override;
  explicit PROTOBUF_CONSTEXPR ReferenceParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceParam(const ReferenceParam& from);
  ReferenceParam(ReferenceParam&& from) noexcept
    : ReferenceParam() {
    *this = ::std::move(from);
  }

  inline ReferenceParam& operator=(const ReferenceParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceParam& operator=(ReferenceParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceParam* internal_default_instance() {
    return reinterpret_cast<const ReferenceParam*>(
               &_ReferenceParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReferenceParam& a, ReferenceParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.omt.ReferenceParam";
  }
  protected:
  explicit ReferenceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightDiffRatioFieldNumber = 5,
    kMarginFieldNumber = 1,
    kMinAllowHeightFieldNumber = 2,
    kAreaDecayFieldNumber = 3,
    kDownSamplingFieldNumber = 4,
  };
  // optional float height_diff_ratio = 5 [default = 0.1];
  bool has_height_diff_ratio() const;
  private:
  bool _internal_has_height_diff_ratio() const;
  public:
  void clear_height_diff_ratio();
  float height_diff_ratio() const;
  void set_height_diff_ratio(float value);
  private:
  float _internal_height_diff_ratio() const;
  void _internal_set_height_diff_ratio(float value);
  public:

  // optional int32 margin = 1 [default = 2];
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  int32_t margin() const;
  void set_margin(int32_t value);
  private:
  int32_t _internal_margin() const;
  void _internal_set_margin(int32_t value);
  public:

  // optional int32 min_allow_height = 2 [default = 50];
  bool has_min_allow_height() const;
  private:
  bool _internal_has_min_allow_height() const;
  public:
  void clear_min_allow_height();
  int32_t min_allow_height() const;
  void set_min_allow_height(int32_t value);
  private:
  int32_t _internal_min_allow_height() const;
  void _internal_set_min_allow_height(int32_t value);
  public:

  // optional float area_decay = 3 [default = 0.99];
  bool has_area_decay() const;
  private:
  bool _internal_has_area_decay() const;
  public:
  void clear_area_decay();
  float area_decay() const;
  void set_area_decay(float value);
  private:
  float _internal_area_decay() const;
  void _internal_set_area_decay(float value);
  public:

  // optional int32 down_sampling = 4 [default = 40];
  bool has_down_sampling() const;
  private:
  bool _internal_has_down_sampling() const;
  public:
  void clear_down_sampling();
  int32_t down_sampling() const;
  void set_down_sampling(int32_t value);
  private:
  int32_t _internal_down_sampling() const;
  void _internal_set_down_sampling(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.ReferenceParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float height_diff_ratio_;
    int32_t margin_;
    int32_t min_allow_height_;
    float area_decay_;
    int32_t down_sampling_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
};
// -------------------------------------------------------------------

class WeightParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.omt.WeightParam) */ {
 public:
  inline WeightParam() : WeightParam(nullptr) {}
  ~WeightParam() override;
  explicit PROTOBUF_CONSTEXPR WeightParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeightParam(const WeightParam& from);
  WeightParam(WeightParam&& from) noexcept
    : WeightParam() {
    *this = ::std::move(from);
  }

  inline WeightParam& operator=(const WeightParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeightParam& operator=(WeightParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeightParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeightParam* internal_default_instance() {
    return reinterpret_cast<const WeightParam*>(
               &_WeightParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WeightParam& a, WeightParam& b) {
    a.Swap(&b);
  }
  inline void Swap(WeightParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeightParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeightParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeightParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeightParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WeightParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeightParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.omt.WeightParam";
  }
  protected:
  explicit WeightParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppearanceFieldNumber = 1,
    kMotionFieldNumber = 2,
    kShapeFieldNumber = 3,
    kTrackletFieldNumber = 4,
    kOverlapFieldNumber = 5,
  };
  // optional float appearance = 1 [default = 0];
  bool has_appearance() const;
  private:
  bool _internal_has_appearance() const;
  public:
  void clear_appearance();
  float appearance() const;
  void set_appearance(float value);
  private:
  float _internal_appearance() const;
  void _internal_set_appearance(float value);
  public:

  // optional float motion = 2 [default = 0];
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  float motion() const;
  void set_motion(float value);
  private:
  float _internal_motion() const;
  void _internal_set_motion(float value);
  public:

  // optional float shape = 3 [default = 0];
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  float shape() const;
  void set_shape(float value);
  private:
  float _internal_shape() const;
  void _internal_set_shape(float value);
  public:

  // optional float tracklet = 4 [default = 0];
  bool has_tracklet() const;
  private:
  bool _internal_has_tracklet() const;
  public:
  void clear_tracklet();
  float tracklet() const;
  void set_tracklet(float value);
  private:
  float _internal_tracklet() const;
  void _internal_set_tracklet(float value);
  public:

  // optional float overlap = 5 [default = 0];
  bool has_overlap() const;
  private:
  bool _internal_has_overlap() const;
  public:
  void clear_overlap();
  float overlap() const;
  void set_overlap(float value);
  private:
  float _internal_overlap() const;
  void _internal_set_overlap(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.WeightParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float appearance_;
    float motion_;
    float shape_;
    float tracklet_;
    float overlap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
};
// -------------------------------------------------------------------

class OmtParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.omt.OmtParam) */ {
 public:
  inline OmtParam() : OmtParam(nullptr) {}
  ~OmtParam() override;
  explicit PROTOBUF_CONSTEXPR OmtParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OmtParam(const OmtParam& from);
  OmtParam(OmtParam&& from) noexcept
    : OmtParam() {
    *this = ::std::move(from);
  }

  inline OmtParam& operator=(const OmtParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline OmtParam& operator=(OmtParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OmtParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const OmtParam* internal_default_instance() {
    return reinterpret_cast<const OmtParam*>(
               &_OmtParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OmtParam& a, OmtParam& b) {
    a.Swap(&b);
  }
  inline void Swap(OmtParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OmtParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OmtParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OmtParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OmtParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OmtParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OmtParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.omt.OmtParam";
  }
  protected:
  explicit OmtParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeChangeCostFieldNumber = 20,
    kWeightSameCameraFieldNumber = 4,
    kWeightDiffCameraFieldNumber = 5,
    kTargetParamFieldNumber = 12,
    kReferenceFieldNumber = 19,
    kCorrectTypeFieldNumber = 11,
    kImgCapabilityFieldNumber = 1,
    kLostAgeFieldNumber = 2,
    kReserveAgeFieldNumber = 3,
    kBorderFieldNumber = 9,
    kTargetThreshFieldNumber = 10,
    kMinInitHeightRatioFieldNumber = 13,
    kTargetCombineIouThresholdFieldNumber = 14,
    kFusionTargetThreshFieldNumber = 15,
    kImageDisplacementFieldNumber = 16,
    kAbnormalMovementFieldNumber = 17,
    kSameTsEpsFieldNumber = 18,
  };
  // optional string type_change_cost = 20;
  bool has_type_change_cost() const;
  private:
  bool _internal_has_type_change_cost() const;
  public:
  void clear_type_change_cost();
  const std::string& type_change_cost() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_change_cost(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_change_cost();
  PROTOBUF_NODISCARD std::string* release_type_change_cost();
  void set_allocated_type_change_cost(std::string* type_change_cost);
  private:
  const std::string& _internal_type_change_cost() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_change_cost(const std::string& value);
  std::string* _internal_mutable_type_change_cost();
  public:

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  bool has_weight_same_camera() const;
  private:
  bool _internal_has_weight_same_camera() const;
  public:
  void clear_weight_same_camera();
  const ::apollo::perception::camera::omt::WeightParam& weight_same_camera() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::WeightParam* release_weight_same_camera();
  ::apollo::perception::camera::omt::WeightParam* mutable_weight_same_camera();
  void set_allocated_weight_same_camera(::apollo::perception::camera::omt::WeightParam* weight_same_camera);
  private:
  const ::apollo::perception::camera::omt::WeightParam& _internal_weight_same_camera() const;
  ::apollo::perception::camera::omt::WeightParam* _internal_mutable_weight_same_camera();
  public:
  void unsafe_arena_set_allocated_weight_same_camera(
      ::apollo::perception::camera::omt::WeightParam* weight_same_camera);
  ::apollo::perception::camera::omt::WeightParam* unsafe_arena_release_weight_same_camera();

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  bool has_weight_diff_camera() const;
  private:
  bool _internal_has_weight_diff_camera() const;
  public:
  void clear_weight_diff_camera();
  const ::apollo::perception::camera::omt::WeightParam& weight_diff_camera() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::WeightParam* release_weight_diff_camera();
  ::apollo::perception::camera::omt::WeightParam* mutable_weight_diff_camera();
  void set_allocated_weight_diff_camera(::apollo::perception::camera::omt::WeightParam* weight_diff_camera);
  private:
  const ::apollo::perception::camera::omt::WeightParam& _internal_weight_diff_camera() const;
  ::apollo::perception::camera::omt::WeightParam* _internal_mutable_weight_diff_camera();
  public:
  void unsafe_arena_set_allocated_weight_diff_camera(
      ::apollo::perception::camera::omt::WeightParam* weight_diff_camera);
  ::apollo::perception::camera::omt::WeightParam* unsafe_arena_release_weight_diff_camera();

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  bool has_target_param() const;
  private:
  bool _internal_has_target_param() const;
  public:
  void clear_target_param();
  const ::apollo::perception::camera::omt::TargetParam& target_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::TargetParam* release_target_param();
  ::apollo::perception::camera::omt::TargetParam* mutable_target_param();
  void set_allocated_target_param(::apollo::perception::camera::omt::TargetParam* target_param);
  private:
  const ::apollo::perception::camera::omt::TargetParam& _internal_target_param() const;
  ::apollo::perception::camera::omt::TargetParam* _internal_mutable_target_param();
  public:
  void unsafe_arena_set_allocated_target_param(
      ::apollo::perception::camera::omt::TargetParam* target_param);
  ::apollo::perception::camera::omt::TargetParam* unsafe_arena_release_target_param();

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::apollo::perception::camera::omt::ReferenceParam& reference() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::omt::ReferenceParam* release_reference();
  ::apollo::perception::camera::omt::ReferenceParam* mutable_reference();
  void set_allocated_reference(::apollo::perception::camera::omt::ReferenceParam* reference);
  private:
  const ::apollo::perception::camera::omt::ReferenceParam& _internal_reference() const;
  ::apollo::perception::camera::omt::ReferenceParam* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::apollo::perception::camera::omt::ReferenceParam* reference);
  ::apollo::perception::camera::omt::ReferenceParam* unsafe_arena_release_reference();

  // optional bool correct_type = 11 [default = false];
  bool has_correct_type() const;
  private:
  bool _internal_has_correct_type() const;
  public:
  void clear_correct_type();
  bool correct_type() const;
  void set_correct_type(bool value);
  private:
  bool _internal_correct_type() const;
  void _internal_set_correct_type(bool value);
  public:

  // optional int32 img_capability = 1 [default = 7];
  bool has_img_capability() const;
  private:
  bool _internal_has_img_capability() const;
  public:
  void clear_img_capability();
  int32_t img_capability() const;
  void set_img_capability(int32_t value);
  private:
  int32_t _internal_img_capability() const;
  void _internal_set_img_capability(int32_t value);
  public:

  // optional int32 lost_age = 2 [default = 2];
  bool has_lost_age() const;
  private:
  bool _internal_has_lost_age() const;
  public:
  void clear_lost_age();
  int32_t lost_age() const;
  void set_lost_age(int32_t value);
  private:
  int32_t _internal_lost_age() const;
  void _internal_set_lost_age(int32_t value);
  public:

  // optional int32 reserve_age = 3 [default = 3];
  bool has_reserve_age() const;
  private:
  bool _internal_has_reserve_age() const;
  public:
  void clear_reserve_age();
  int32_t reserve_age() const;
  void set_reserve_age(int32_t value);
  private:
  int32_t _internal_reserve_age() const;
  void _internal_set_reserve_age(int32_t value);
  public:

  // optional float border = 9 [default = 30];
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  float border() const;
  void set_border(float value);
  private:
  float _internal_border() const;
  void _internal_set_border(float value);
  public:

  // optional float target_thresh = 10 [default = 0.65];
  bool has_target_thresh() const;
  private:
  bool _internal_has_target_thresh() const;
  public:
  void clear_target_thresh();
  float target_thresh() const;
  void set_target_thresh(float value);
  private:
  float _internal_target_thresh() const;
  void _internal_set_target_thresh(float value);
  public:

  // optional float min_init_height_ratio = 13 [default = 17];
  bool has_min_init_height_ratio() const;
  private:
  bool _internal_has_min_init_height_ratio() const;
  public:
  void clear_min_init_height_ratio();
  float min_init_height_ratio() const;
  void set_min_init_height_ratio(float value);
  private:
  float _internal_min_init_height_ratio() const;
  void _internal_set_min_init_height_ratio(float value);
  public:

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  bool has_target_combine_iou_threshold() const;
  private:
  bool _internal_has_target_combine_iou_threshold() const;
  public:
  void clear_target_combine_iou_threshold();
  float target_combine_iou_threshold() const;
  void set_target_combine_iou_threshold(float value);
  private:
  float _internal_target_combine_iou_threshold() const;
  void _internal_set_target_combine_iou_threshold(float value);
  public:

  // optional float fusion_target_thresh = 15 [default = 0.45];
  bool has_fusion_target_thresh() const;
  private:
  bool _internal_has_fusion_target_thresh() const;
  public:
  void clear_fusion_target_thresh();
  float fusion_target_thresh() const;
  void set_fusion_target_thresh(float value);
  private:
  float _internal_fusion_target_thresh() const;
  void _internal_set_fusion_target_thresh(float value);
  public:

  // optional float image_displacement = 16 [default = 50];
  bool has_image_displacement() const;
  private:
  bool _internal_has_image_displacement() const;
  public:
  void clear_image_displacement();
  float image_displacement() const;
  void set_image_displacement(float value);
  private:
  float _internal_image_displacement() const;
  void _internal_set_image_displacement(float value);
  public:

  // optional float abnormal_movement = 17 [default = 0.3];
  bool has_abnormal_movement() const;
  private:
  bool _internal_has_abnormal_movement() const;
  public:
  void clear_abnormal_movement();
  float abnormal_movement() const;
  void set_abnormal_movement(float value);
  private:
  float _internal_abnormal_movement() const;
  void _internal_set_abnormal_movement(float value);
  public:

  // optional double same_ts_eps = 18 [default = 0.05];
  bool has_same_ts_eps() const;
  private:
  bool _internal_has_same_ts_eps() const;
  public:
  void clear_same_ts_eps();
  double same_ts_eps() const;
  void set_same_ts_eps(double value);
  private:
  double _internal_same_ts_eps() const;
  void _internal_set_same_ts_eps(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.OmtParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_change_cost_;
    ::apollo::perception::camera::omt::WeightParam* weight_same_camera_;
    ::apollo::perception::camera::omt::WeightParam* weight_diff_camera_;
    ::apollo::perception::camera::omt::TargetParam* target_param_;
    ::apollo::perception::camera::omt::ReferenceParam* reference_;
    bool correct_type_;
    int32_t img_capability_;
    int32_t lost_age_;
    int32_t reserve_age_;
    float border_;
    float target_thresh_;
    float min_init_height_ratio_;
    float target_combine_iou_threshold_;
    float fusion_target_thresh_;
    float image_displacement_;
    float abnormal_movement_;
    double same_ts_eps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KalmanParam

// optional float init_variance = 1;
inline bool KalmanParam::_internal_has_init_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KalmanParam::has_init_variance() const {
  return _internal_has_init_variance();
}
inline void KalmanParam::clear_init_variance() {
  _impl_.init_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float KalmanParam::_internal_init_variance() const {
  return _impl_.init_variance_;
}
inline float KalmanParam::init_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.init_variance)
  return _internal_init_variance();
}
inline void KalmanParam::_internal_set_init_variance(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.init_variance_ = value;
}
inline void KalmanParam::set_init_variance(float value) {
  _internal_set_init_variance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.init_variance)
}

// optional float process_variance = 2;
inline bool KalmanParam::_internal_has_process_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KalmanParam::has_process_variance() const {
  return _internal_has_process_variance();
}
inline void KalmanParam::clear_process_variance() {
  _impl_.process_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float KalmanParam::_internal_process_variance() const {
  return _impl_.process_variance_;
}
inline float KalmanParam::process_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.process_variance)
  return _internal_process_variance();
}
inline void KalmanParam::_internal_set_process_variance(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.process_variance_ = value;
}
inline void KalmanParam::set_process_variance(float value) {
  _internal_set_process_variance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.process_variance)
}

// optional float measure_variance = 3;
inline bool KalmanParam::_internal_has_measure_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KalmanParam::has_measure_variance() const {
  return _internal_has_measure_variance();
}
inline void KalmanParam::clear_measure_variance() {
  _impl_.measure_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float KalmanParam::_internal_measure_variance() const {
  return _impl_.measure_variance_;
}
inline float KalmanParam::measure_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.measure_variance)
  return _internal_measure_variance();
}
inline void KalmanParam::_internal_set_measure_variance(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.measure_variance_ = value;
}
inline void KalmanParam::set_measure_variance(float value) {
  _internal_set_measure_variance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.measure_variance)
}

// -------------------------------------------------------------------

// TargetParam

// optional float velocity_threshold = 1 [default = 2];
inline bool TargetParam::_internal_has_velocity_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TargetParam::has_velocity_threshold() const {
  return _internal_has_velocity_threshold();
}
inline void TargetParam::clear_velocity_threshold() {
  _impl_.velocity_threshold_ = 2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float TargetParam::_internal_velocity_threshold() const {
  return _impl_.velocity_threshold_;
}
inline float TargetParam::velocity_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_threshold)
  return _internal_velocity_threshold();
}
inline void TargetParam::_internal_set_velocity_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.velocity_threshold_ = value;
}
inline void TargetParam::set_velocity_threshold(float value) {
  _internal_set_velocity_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_threshold)
}

// optional int32 velocity_output_delay = 2 [default = 2];
inline bool TargetParam::_internal_has_velocity_output_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TargetParam::has_velocity_output_delay() const {
  return _internal_has_velocity_output_delay();
}
inline void TargetParam::clear_velocity_output_delay() {
  _impl_.velocity_output_delay_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t TargetParam::_internal_velocity_output_delay() const {
  return _impl_.velocity_output_delay_;
}
inline int32_t TargetParam::velocity_output_delay() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_output_delay)
  return _internal_velocity_output_delay();
}
inline void TargetParam::_internal_set_velocity_output_delay(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.velocity_output_delay_ = value;
}
inline void TargetParam::set_velocity_output_delay(int32_t value) {
  _internal_set_velocity_output_delay(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_output_delay)
}

// optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
inline bool TargetParam::_internal_has_world_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_center_ != nullptr);
  return value;
}
inline bool TargetParam::has_world_center() const {
  return _internal_has_world_center();
}
inline void TargetParam::clear_world_center() {
  if (_impl_.world_center_ != nullptr) _impl_.world_center_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::_internal_world_center() const {
  const ::apollo::perception::camera::omt::KalmanParam* p = _impl_.world_center_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::KalmanParam&>(
      ::apollo::perception::camera::omt::_KalmanParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::world_center() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_center)
  return _internal_world_center();
}
inline void TargetParam::unsafe_arena_set_allocated_world_center(
    ::apollo::perception::camera::omt::KalmanParam* world_center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_center_);
  }
  _impl_.world_center_ = world_center;
  if (world_center) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.TargetParam.world_center)
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::release_world_center() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::omt::KalmanParam* temp = _impl_.world_center_;
  _impl_.world_center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::unsafe_arena_release_world_center() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.TargetParam.world_center)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::omt::KalmanParam* temp = _impl_.world_center_;
  _impl_.world_center_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::_internal_mutable_world_center() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.world_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::KalmanParam>(GetArenaForAllocation());
    _impl_.world_center_ = p;
  }
  return _impl_.world_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::mutable_world_center() {
  ::apollo::perception::camera::omt::KalmanParam* _msg = _internal_mutable_world_center();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.TargetParam.world_center)
  return _msg;
}
inline void TargetParam::set_allocated_world_center(::apollo::perception::camera::omt::KalmanParam* world_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.world_center_;
  }
  if (world_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(world_center);
    if (message_arena != submessage_arena) {
      world_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.world_center_ = world_center;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.TargetParam.world_center)
}

// optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
inline bool TargetParam::_internal_has_image_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_center_ != nullptr);
  return value;
}
inline bool TargetParam::has_image_center() const {
  return _internal_has_image_center();
}
inline void TargetParam::clear_image_center() {
  if (_impl_.image_center_ != nullptr) _impl_.image_center_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::_internal_image_center() const {
  const ::apollo::perception::camera::omt::KalmanParam* p = _impl_.image_center_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::KalmanParam&>(
      ::apollo::perception::camera::omt::_KalmanParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::image_center() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.image_center)
  return _internal_image_center();
}
inline void TargetParam::unsafe_arena_set_allocated_image_center(
    ::apollo::perception::camera::omt::KalmanParam* image_center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_center_);
  }
  _impl_.image_center_ = image_center;
  if (image_center) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.TargetParam.image_center)
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::release_image_center() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::omt::KalmanParam* temp = _impl_.image_center_;
  _impl_.image_center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::unsafe_arena_release_image_center() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.TargetParam.image_center)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::omt::KalmanParam* temp = _impl_.image_center_;
  _impl_.image_center_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::_internal_mutable_image_center() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::KalmanParam>(GetArenaForAllocation());
    _impl_.image_center_ = p;
  }
  return _impl_.image_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::mutable_image_center() {
  ::apollo::perception::camera::omt::KalmanParam* _msg = _internal_mutable_image_center();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.TargetParam.image_center)
  return _msg;
}
inline void TargetParam::set_allocated_image_center(::apollo::perception::camera::omt::KalmanParam* image_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_center_;
  }
  if (image_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_center);
    if (message_arena != submessage_arena) {
      image_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_center_ = image_center;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.TargetParam.image_center)
}

// optional float image_wh_update_rate = 5;
inline bool TargetParam::_internal_has_image_wh_update_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TargetParam::has_image_wh_update_rate() const {
  return _internal_has_image_wh_update_rate();
}
inline void TargetParam::clear_image_wh_update_rate() {
  _impl_.image_wh_update_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float TargetParam::_internal_image_wh_update_rate() const {
  return _impl_.image_wh_update_rate_;
}
inline float TargetParam::image_wh_update_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.image_wh_update_rate)
  return _internal_image_wh_update_rate();
}
inline void TargetParam::_internal_set_image_wh_update_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.image_wh_update_rate_ = value;
}
inline void TargetParam::set_image_wh_update_rate(float value) {
  _internal_set_image_wh_update_rate(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.image_wh_update_rate)
}

// optional int32 world_lhw_history = 6 [default = 15];
inline bool TargetParam::_internal_has_world_lhw_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TargetParam::has_world_lhw_history() const {
  return _internal_has_world_lhw_history();
}
inline void TargetParam::clear_world_lhw_history() {
  _impl_.world_lhw_history_ = 15;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t TargetParam::_internal_world_lhw_history() const {
  return _impl_.world_lhw_history_;
}
inline int32_t TargetParam::world_lhw_history() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_lhw_history)
  return _internal_world_lhw_history();
}
inline void TargetParam::_internal_set_world_lhw_history(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.world_lhw_history_ = value;
}
inline void TargetParam::set_world_lhw_history(int32_t value) {
  _internal_set_world_lhw_history(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_lhw_history)
}

// optional float height_diff_ratio = 7 [default = 0.1];
inline bool TargetParam::_internal_has_height_diff_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TargetParam::has_height_diff_ratio() const {
  return _internal_has_height_diff_ratio();
}
inline void TargetParam::clear_height_diff_ratio() {
  _impl_.height_diff_ratio_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float TargetParam::_internal_height_diff_ratio() const {
  return _impl_.height_diff_ratio_;
}
inline float TargetParam::height_diff_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.height_diff_ratio)
  return _internal_height_diff_ratio();
}
inline void TargetParam::_internal_set_height_diff_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.height_diff_ratio_ = value;
}
inline void TargetParam::set_height_diff_ratio(float value) {
  _internal_set_height_diff_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.height_diff_ratio)
}

// optional int32 world_state_history = 8 [default = 30];
inline bool TargetParam::_internal_has_world_state_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TargetParam::has_world_state_history() const {
  return _internal_has_world_state_history();
}
inline void TargetParam::clear_world_state_history() {
  _impl_.world_state_history_ = 30;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t TargetParam::_internal_world_state_history() const {
  return _impl_.world_state_history_;
}
inline int32_t TargetParam::world_state_history() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_state_history)
  return _internal_world_state_history();
}
inline void TargetParam::_internal_set_world_state_history(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.world_state_history_ = value;
}
inline void TargetParam::set_world_state_history(int32_t value) {
  _internal_set_world_state_history(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_state_history)
}

// optional int32 min_cached_world_state_history_size = 9 [default = 5];
inline bool TargetParam::_internal_has_min_cached_world_state_history_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TargetParam::has_min_cached_world_state_history_size() const {
  return _internal_has_min_cached_world_state_history_size();
}
inline void TargetParam::clear_min_cached_world_state_history_size() {
  _impl_.min_cached_world_state_history_size_ = 5;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t TargetParam::_internal_min_cached_world_state_history_size() const {
  return _impl_.min_cached_world_state_history_size_;
}
inline int32_t TargetParam::min_cached_world_state_history_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_world_state_history_size)
  return _internal_min_cached_world_state_history_size();
}
inline void TargetParam::_internal_set_min_cached_world_state_history_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.min_cached_world_state_history_size_ = value;
}
inline void TargetParam::set_min_cached_world_state_history_size(int32_t value) {
  _internal_set_min_cached_world_state_history_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_world_state_history_size)
}

// optional int32 min_cached_velocity_size = 10 [default = 10];
inline bool TargetParam::_internal_has_min_cached_velocity_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TargetParam::has_min_cached_velocity_size() const {
  return _internal_has_min_cached_velocity_size();
}
inline void TargetParam::clear_min_cached_velocity_size() {
  _impl_.min_cached_velocity_size_ = 10;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t TargetParam::_internal_min_cached_velocity_size() const {
  return _impl_.min_cached_velocity_size_;
}
inline int32_t TargetParam::min_cached_velocity_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_velocity_size)
  return _internal_min_cached_velocity_size();
}
inline void TargetParam::_internal_set_min_cached_velocity_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.min_cached_velocity_size_ = value;
}
inline void TargetParam::set_min_cached_velocity_size(int32_t value) {
  _internal_set_min_cached_velocity_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_velocity_size)
}

// optional int32 min_cached_position_size = 11 [default = 25];
inline bool TargetParam::_internal_has_min_cached_position_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TargetParam::has_min_cached_position_size() const {
  return _internal_has_min_cached_position_size();
}
inline void TargetParam::clear_min_cached_position_size() {
  _impl_.min_cached_position_size_ = 25;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t TargetParam::_internal_min_cached_position_size() const {
  return _impl_.min_cached_position_size_;
}
inline int32_t TargetParam::min_cached_position_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_position_size)
  return _internal_min_cached_position_size();
}
inline void TargetParam::_internal_set_min_cached_position_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.min_cached_position_size_ = value;
}
inline void TargetParam::set_min_cached_position_size(int32_t value) {
  _internal_set_min_cached_position_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_position_size)
}

// optional int32 calc_avg_position_window_size = 12 [default = 7];
inline bool TargetParam::_internal_has_calc_avg_position_window_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TargetParam::has_calc_avg_position_window_size() const {
  return _internal_has_calc_avg_position_window_size();
}
inline void TargetParam::clear_calc_avg_position_window_size() {
  _impl_.calc_avg_position_window_size_ = 7;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t TargetParam::_internal_calc_avg_position_window_size() const {
  return _impl_.calc_avg_position_window_size_;
}
inline int32_t TargetParam::calc_avg_position_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.calc_avg_position_window_size)
  return _internal_calc_avg_position_window_size();
}
inline void TargetParam::_internal_set_calc_avg_position_window_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.calc_avg_position_window_size_ = value;
}
inline void TargetParam::set_calc_avg_position_window_size(int32_t value) {
  _internal_set_calc_avg_position_window_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.calc_avg_position_window_size)
}

// optional float static_speed_threshold = 13 [default = 0.5];
inline bool TargetParam::_internal_has_static_speed_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TargetParam::has_static_speed_threshold() const {
  return _internal_has_static_speed_threshold();
}
inline void TargetParam::clear_static_speed_threshold() {
  _impl_.static_speed_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float TargetParam::_internal_static_speed_threshold() const {
  return _impl_.static_speed_threshold_;
}
inline float TargetParam::static_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.static_speed_threshold)
  return _internal_static_speed_threshold();
}
inline void TargetParam::_internal_set_static_speed_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.static_speed_threshold_ = value;
}
inline void TargetParam::set_static_speed_threshold(float value) {
  _internal_set_static_speed_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.static_speed_threshold)
}

// optional float static_speed_threshold_ped = 14 [default = 0.3];
inline bool TargetParam::_internal_has_static_speed_threshold_ped() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TargetParam::has_static_speed_threshold_ped() const {
  return _internal_has_static_speed_threshold_ped();
}
inline void TargetParam::clear_static_speed_threshold_ped() {
  _impl_.static_speed_threshold_ped_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float TargetParam::_internal_static_speed_threshold_ped() const {
  return _impl_.static_speed_threshold_ped_;
}
inline float TargetParam::static_speed_threshold_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.static_speed_threshold_ped)
  return _internal_static_speed_threshold_ped();
}
inline void TargetParam::_internal_set_static_speed_threshold_ped(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.static_speed_threshold_ped_ = value;
}
inline void TargetParam::set_static_speed_threshold_ped(float value) {
  _internal_set_static_speed_threshold_ped(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.static_speed_threshold_ped)
}

// optional float min_moving_avg_speed = 15 [default = 1];
inline bool TargetParam::_internal_has_min_moving_avg_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TargetParam::has_min_moving_avg_speed() const {
  return _internal_has_min_moving_avg_speed();
}
inline void TargetParam::clear_min_moving_avg_speed() {
  _impl_.min_moving_avg_speed_ = 1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float TargetParam::_internal_min_moving_avg_speed() const {
  return _impl_.min_moving_avg_speed_;
}
inline float TargetParam::min_moving_avg_speed() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed)
  return _internal_min_moving_avg_speed();
}
inline void TargetParam::_internal_set_min_moving_avg_speed(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.min_moving_avg_speed_ = value;
}
inline void TargetParam::set_min_moving_avg_speed(float value) {
  _internal_set_min_moving_avg_speed(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed)
}

// optional float min_moving_avg_speed_ped = 16 [default = 0.5];
inline bool TargetParam::_internal_has_min_moving_avg_speed_ped() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TargetParam::has_min_moving_avg_speed_ped() const {
  return _internal_has_min_moving_avg_speed_ped();
}
inline void TargetParam::clear_min_moving_avg_speed_ped() {
  _impl_.min_moving_avg_speed_ped_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float TargetParam::_internal_min_moving_avg_speed_ped() const {
  return _impl_.min_moving_avg_speed_ped_;
}
inline float TargetParam::min_moving_avg_speed_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed_ped)
  return _internal_min_moving_avg_speed_ped();
}
inline void TargetParam::_internal_set_min_moving_avg_speed_ped(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.min_moving_avg_speed_ped_ = value;
}
inline void TargetParam::set_min_moving_avg_speed_ped(float value) {
  _internal_set_min_moving_avg_speed_ped(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed_ped)
}

// optional float abnormal_acc_threshold = 17 [default = 6];
inline bool TargetParam::_internal_has_abnormal_acc_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TargetParam::has_abnormal_acc_threshold() const {
  return _internal_has_abnormal_acc_threshold();
}
inline void TargetParam::clear_abnormal_acc_threshold() {
  _impl_.abnormal_acc_threshold_ = 6;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float TargetParam::_internal_abnormal_acc_threshold() const {
  return _impl_.abnormal_acc_threshold_;
}
inline float TargetParam::abnormal_acc_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold)
  return _internal_abnormal_acc_threshold();
}
inline void TargetParam::_internal_set_abnormal_acc_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.abnormal_acc_threshold_ = value;
}
inline void TargetParam::set_abnormal_acc_threshold(float value) {
  _internal_set_abnormal_acc_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold)
}

// optional float abnormal_acc_threshold_ped = 18 [default = 3];
inline bool TargetParam::_internal_has_abnormal_acc_threshold_ped() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TargetParam::has_abnormal_acc_threshold_ped() const {
  return _internal_has_abnormal_acc_threshold_ped();
}
inline void TargetParam::clear_abnormal_acc_threshold_ped() {
  _impl_.abnormal_acc_threshold_ped_ = 3;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float TargetParam::_internal_abnormal_acc_threshold_ped() const {
  return _impl_.abnormal_acc_threshold_ped_;
}
inline float TargetParam::abnormal_acc_threshold_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold_ped)
  return _internal_abnormal_acc_threshold_ped();
}
inline void TargetParam::_internal_set_abnormal_acc_threshold_ped(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.abnormal_acc_threshold_ped_ = value;
}
inline void TargetParam::set_abnormal_acc_threshold_ped(float value) {
  _internal_set_abnormal_acc_threshold_ped(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold_ped)
}

// optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
inline bool TargetParam::_internal_has_abnormal_velocity_heading_angle_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TargetParam::has_abnormal_velocity_heading_angle_threshold() const {
  return _internal_has_abnormal_velocity_heading_angle_threshold();
}
inline void TargetParam::clear_abnormal_velocity_heading_angle_threshold() {
  _impl_.abnormal_velocity_heading_angle_threshold_ = 0.7854f;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float TargetParam::_internal_abnormal_velocity_heading_angle_threshold() const {
  return _impl_.abnormal_velocity_heading_angle_threshold_;
}
inline float TargetParam::abnormal_velocity_heading_angle_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_velocity_heading_angle_threshold)
  return _internal_abnormal_velocity_heading_angle_threshold();
}
inline void TargetParam::_internal_set_abnormal_velocity_heading_angle_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.abnormal_velocity_heading_angle_threshold_ = value;
}
inline void TargetParam::set_abnormal_velocity_heading_angle_threshold(float value) {
  _internal_set_abnormal_velocity_heading_angle_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_velocity_heading_angle_threshold)
}

// optional bool clapping_velocity = 20 [default = false];
inline bool TargetParam::_internal_has_clapping_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TargetParam::has_clapping_velocity() const {
  return _internal_has_clapping_velocity();
}
inline void TargetParam::clear_clapping_velocity() {
  _impl_.clapping_velocity_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TargetParam::_internal_clapping_velocity() const {
  return _impl_.clapping_velocity_;
}
inline bool TargetParam::clapping_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.clapping_velocity)
  return _internal_clapping_velocity();
}
inline void TargetParam::_internal_set_clapping_velocity(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.clapping_velocity_ = value;
}
inline void TargetParam::set_clapping_velocity(bool value) {
  _internal_set_clapping_velocity(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.clapping_velocity)
}

// optional int32 world_mean_velocity_duration = 21 [default = 10];
inline bool TargetParam::_internal_has_world_mean_velocity_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TargetParam::has_world_mean_velocity_duration() const {
  return _internal_has_world_mean_velocity_duration();
}
inline void TargetParam::clear_world_mean_velocity_duration() {
  _impl_.world_mean_velocity_duration_ = 10;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t TargetParam::_internal_world_mean_velocity_duration() const {
  return _impl_.world_mean_velocity_duration_;
}
inline int32_t TargetParam::world_mean_velocity_duration() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_mean_velocity_duration)
  return _internal_world_mean_velocity_duration();
}
inline void TargetParam::_internal_set_world_mean_velocity_duration(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.world_mean_velocity_duration_ = value;
}
inline void TargetParam::set_world_mean_velocity_duration(int32_t value) {
  _internal_set_world_mean_velocity_duration(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_mean_velocity_duration)
}

// optional int32 tracked_life = 22 [default = 3];
inline bool TargetParam::_internal_has_tracked_life() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TargetParam::has_tracked_life() const {
  return _internal_has_tracked_life();
}
inline void TargetParam::clear_tracked_life() {
  _impl_.tracked_life_ = 3;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t TargetParam::_internal_tracked_life() const {
  return _impl_.tracked_life_;
}
inline int32_t TargetParam::tracked_life() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.tracked_life)
  return _internal_tracked_life();
}
inline void TargetParam::_internal_set_tracked_life(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.tracked_life_ = value;
}
inline void TargetParam::set_tracked_life(int32_t value) {
  _internal_set_tracked_life(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.tracked_life)
}

// optional float type_filter_var = 23 [default = 0.3];
inline bool TargetParam::_internal_has_type_filter_var() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TargetParam::has_type_filter_var() const {
  return _internal_has_type_filter_var();
}
inline void TargetParam::clear_type_filter_var() {
  _impl_.type_filter_var_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float TargetParam::_internal_type_filter_var() const {
  return _impl_.type_filter_var_;
}
inline float TargetParam::type_filter_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.type_filter_var)
  return _internal_type_filter_var();
}
inline void TargetParam::_internal_set_type_filter_var(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.type_filter_var_ = value;
}
inline void TargetParam::set_type_filter_var(float value) {
  _internal_set_type_filter_var(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.type_filter_var)
}

// optional float large_velocity_ratio = 24 [default = 2.5];
inline bool TargetParam::_internal_has_large_velocity_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TargetParam::has_large_velocity_ratio() const {
  return _internal_has_large_velocity_ratio();
}
inline void TargetParam::clear_large_velocity_ratio() {
  _impl_.large_velocity_ratio_ = 2.5f;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float TargetParam::_internal_large_velocity_ratio() const {
  return _impl_.large_velocity_ratio_;
}
inline float TargetParam::large_velocity_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.large_velocity_ratio)
  return _internal_large_velocity_ratio();
}
inline void TargetParam::_internal_set_large_velocity_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.large_velocity_ratio_ = value;
}
inline void TargetParam::set_large_velocity_ratio(float value) {
  _internal_set_large_velocity_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.large_velocity_ratio)
}

// optional float too_large_velocity_ratio = 25 [default = 1.5];
inline bool TargetParam::_internal_has_too_large_velocity_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TargetParam::has_too_large_velocity_ratio() const {
  return _internal_has_too_large_velocity_ratio();
}
inline void TargetParam::clear_too_large_velocity_ratio() {
  _impl_.too_large_velocity_ratio_ = 1.5f;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float TargetParam::_internal_too_large_velocity_ratio() const {
  return _impl_.too_large_velocity_ratio_;
}
inline float TargetParam::too_large_velocity_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.too_large_velocity_ratio)
  return _internal_too_large_velocity_ratio();
}
inline void TargetParam::_internal_set_too_large_velocity_ratio(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.too_large_velocity_ratio_ = value;
}
inline void TargetParam::set_too_large_velocity_ratio(float value) {
  _internal_set_too_large_velocity_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.too_large_velocity_ratio)
}

// optional int32 mean_filter_window = 26 [default = 10];
inline bool TargetParam::_internal_has_mean_filter_window() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TargetParam::has_mean_filter_window() const {
  return _internal_has_mean_filter_window();
}
inline void TargetParam::clear_mean_filter_window() {
  _impl_.mean_filter_window_ = 10;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t TargetParam::_internal_mean_filter_window() const {
  return _impl_.mean_filter_window_;
}
inline int32_t TargetParam::mean_filter_window() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.mean_filter_window)
  return _internal_mean_filter_window();
}
inline void TargetParam::_internal_set_mean_filter_window(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.mean_filter_window_ = value;
}
inline void TargetParam::set_mean_filter_window(int32_t value) {
  _internal_set_mean_filter_window(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.mean_filter_window)
}

// optional float direction_filter_ratio = 27 [default = 0.7];
inline bool TargetParam::_internal_has_direction_filter_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TargetParam::has_direction_filter_ratio() const {
  return _internal_has_direction_filter_ratio();
}
inline void TargetParam::clear_direction_filter_ratio() {
  _impl_.direction_filter_ratio_ = 0.7f;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float TargetParam::_internal_direction_filter_ratio() const {
  return _impl_.direction_filter_ratio_;
}
inline float TargetParam::direction_filter_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.direction_filter_ratio)
  return _internal_direction_filter_ratio();
}
inline void TargetParam::_internal_set_direction_filter_ratio(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.direction_filter_ratio_ = value;
}
inline void TargetParam::set_direction_filter_ratio(float value) {
  _internal_set_direction_filter_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.direction_filter_ratio)
}

// optional float displacement_theta_var = 28 [default = 0.25];
inline bool TargetParam::_internal_has_displacement_theta_var() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TargetParam::has_displacement_theta_var() const {
  return _internal_has_displacement_theta_var();
}
inline void TargetParam::clear_displacement_theta_var() {
  _impl_.displacement_theta_var_ = 0.25f;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float TargetParam::_internal_displacement_theta_var() const {
  return _impl_.displacement_theta_var_;
}
inline float TargetParam::displacement_theta_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.displacement_theta_var)
  return _internal_displacement_theta_var();
}
inline void TargetParam::_internal_set_displacement_theta_var(float value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.displacement_theta_var_ = value;
}
inline void TargetParam::set_displacement_theta_var(float value) {
  _internal_set_displacement_theta_var(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.displacement_theta_var)
}

// optional float velocity_theta_var = 29 [default = 0.5];
inline bool TargetParam::_internal_has_velocity_theta_var() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TargetParam::has_velocity_theta_var() const {
  return _internal_has_velocity_theta_var();
}
inline void TargetParam::clear_velocity_theta_var() {
  _impl_.velocity_theta_var_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float TargetParam::_internal_velocity_theta_var() const {
  return _impl_.velocity_theta_var_;
}
inline float TargetParam::velocity_theta_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_theta_var)
  return _internal_velocity_theta_var();
}
inline void TargetParam::_internal_set_velocity_theta_var(float value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.velocity_theta_var_ = value;
}
inline void TargetParam::set_velocity_theta_var(float value) {
  _internal_set_velocity_theta_var(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_theta_var)
}

// optional float stable_moving_speed = 30 [default = 2];
inline bool TargetParam::_internal_has_stable_moving_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TargetParam::has_stable_moving_speed() const {
  return _internal_has_stable_moving_speed();
}
inline void TargetParam::clear_stable_moving_speed() {
  _impl_.stable_moving_speed_ = 2;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float TargetParam::_internal_stable_moving_speed() const {
  return _impl_.stable_moving_speed_;
}
inline float TargetParam::stable_moving_speed() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.stable_moving_speed)
  return _internal_stable_moving_speed();
}
inline void TargetParam::_internal_set_stable_moving_speed(float value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.stable_moving_speed_ = value;
}
inline void TargetParam::set_stable_moving_speed(float value) {
  _internal_set_stable_moving_speed(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.stable_moving_speed)
}

// -------------------------------------------------------------------

// ReferenceParam

// optional int32 margin = 1 [default = 2];
inline bool ReferenceParam::_internal_has_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferenceParam::has_margin() const {
  return _internal_has_margin();
}
inline void ReferenceParam::clear_margin() {
  _impl_.margin_ = 2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ReferenceParam::_internal_margin() const {
  return _impl_.margin_;
}
inline int32_t ReferenceParam::margin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.margin)
  return _internal_margin();
}
inline void ReferenceParam::_internal_set_margin(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.margin_ = value;
}
inline void ReferenceParam::set_margin(int32_t value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.margin)
}

// optional int32 min_allow_height = 2 [default = 50];
inline bool ReferenceParam::_internal_has_min_allow_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceParam::has_min_allow_height() const {
  return _internal_has_min_allow_height();
}
inline void ReferenceParam::clear_min_allow_height() {
  _impl_.min_allow_height_ = 50;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ReferenceParam::_internal_min_allow_height() const {
  return _impl_.min_allow_height_;
}
inline int32_t ReferenceParam::min_allow_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.min_allow_height)
  return _internal_min_allow_height();
}
inline void ReferenceParam::_internal_set_min_allow_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_allow_height_ = value;
}
inline void ReferenceParam::set_min_allow_height(int32_t value) {
  _internal_set_min_allow_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.min_allow_height)
}

// optional float area_decay = 3 [default = 0.99];
inline bool ReferenceParam::_internal_has_area_decay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferenceParam::has_area_decay() const {
  return _internal_has_area_decay();
}
inline void ReferenceParam::clear_area_decay() {
  _impl_.area_decay_ = 0.99f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ReferenceParam::_internal_area_decay() const {
  return _impl_.area_decay_;
}
inline float ReferenceParam::area_decay() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.area_decay)
  return _internal_area_decay();
}
inline void ReferenceParam::_internal_set_area_decay(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.area_decay_ = value;
}
inline void ReferenceParam::set_area_decay(float value) {
  _internal_set_area_decay(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.area_decay)
}

// optional int32 down_sampling = 4 [default = 40];
inline bool ReferenceParam::_internal_has_down_sampling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferenceParam::has_down_sampling() const {
  return _internal_has_down_sampling();
}
inline void ReferenceParam::clear_down_sampling() {
  _impl_.down_sampling_ = 40;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ReferenceParam::_internal_down_sampling() const {
  return _impl_.down_sampling_;
}
inline int32_t ReferenceParam::down_sampling() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.down_sampling)
  return _internal_down_sampling();
}
inline void ReferenceParam::_internal_set_down_sampling(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.down_sampling_ = value;
}
inline void ReferenceParam::set_down_sampling(int32_t value) {
  _internal_set_down_sampling(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.down_sampling)
}

// optional float height_diff_ratio = 5 [default = 0.1];
inline bool ReferenceParam::_internal_has_height_diff_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceParam::has_height_diff_ratio() const {
  return _internal_has_height_diff_ratio();
}
inline void ReferenceParam::clear_height_diff_ratio() {
  _impl_.height_diff_ratio_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ReferenceParam::_internal_height_diff_ratio() const {
  return _impl_.height_diff_ratio_;
}
inline float ReferenceParam::height_diff_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.height_diff_ratio)
  return _internal_height_diff_ratio();
}
inline void ReferenceParam::_internal_set_height_diff_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.height_diff_ratio_ = value;
}
inline void ReferenceParam::set_height_diff_ratio(float value) {
  _internal_set_height_diff_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.height_diff_ratio)
}

// -------------------------------------------------------------------

// WeightParam

// optional float appearance = 1 [default = 0];
inline bool WeightParam::_internal_has_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WeightParam::has_appearance() const {
  return _internal_has_appearance();
}
inline void WeightParam::clear_appearance() {
  _impl_.appearance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float WeightParam::_internal_appearance() const {
  return _impl_.appearance_;
}
inline float WeightParam::appearance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.appearance)
  return _internal_appearance();
}
inline void WeightParam::_internal_set_appearance(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.appearance_ = value;
}
inline void WeightParam::set_appearance(float value) {
  _internal_set_appearance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.appearance)
}

// optional float motion = 2 [default = 0];
inline bool WeightParam::_internal_has_motion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WeightParam::has_motion() const {
  return _internal_has_motion();
}
inline void WeightParam::clear_motion() {
  _impl_.motion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float WeightParam::_internal_motion() const {
  return _impl_.motion_;
}
inline float WeightParam::motion() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.motion)
  return _internal_motion();
}
inline void WeightParam::_internal_set_motion(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.motion_ = value;
}
inline void WeightParam::set_motion(float value) {
  _internal_set_motion(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.motion)
}

// optional float shape = 3 [default = 0];
inline bool WeightParam::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WeightParam::has_shape() const {
  return _internal_has_shape();
}
inline void WeightParam::clear_shape() {
  _impl_.shape_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float WeightParam::_internal_shape() const {
  return _impl_.shape_;
}
inline float WeightParam::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.shape)
  return _internal_shape();
}
inline void WeightParam::_internal_set_shape(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shape_ = value;
}
inline void WeightParam::set_shape(float value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.shape)
}

// optional float tracklet = 4 [default = 0];
inline bool WeightParam::_internal_has_tracklet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WeightParam::has_tracklet() const {
  return _internal_has_tracklet();
}
inline void WeightParam::clear_tracklet() {
  _impl_.tracklet_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float WeightParam::_internal_tracklet() const {
  return _impl_.tracklet_;
}
inline float WeightParam::tracklet() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.tracklet)
  return _internal_tracklet();
}
inline void WeightParam::_internal_set_tracklet(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tracklet_ = value;
}
inline void WeightParam::set_tracklet(float value) {
  _internal_set_tracklet(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.tracklet)
}

// optional float overlap = 5 [default = 0];
inline bool WeightParam::_internal_has_overlap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WeightParam::has_overlap() const {
  return _internal_has_overlap();
}
inline void WeightParam::clear_overlap() {
  _impl_.overlap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float WeightParam::_internal_overlap() const {
  return _impl_.overlap_;
}
inline float WeightParam::overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.overlap)
  return _internal_overlap();
}
inline void WeightParam::_internal_set_overlap(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.overlap_ = value;
}
inline void WeightParam::set_overlap(float value) {
  _internal_set_overlap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.overlap)
}

// -------------------------------------------------------------------

// OmtParam

// optional int32 img_capability = 1 [default = 7];
inline bool OmtParam::_internal_has_img_capability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OmtParam::has_img_capability() const {
  return _internal_has_img_capability();
}
inline void OmtParam::clear_img_capability() {
  _impl_.img_capability_ = 7;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t OmtParam::_internal_img_capability() const {
  return _impl_.img_capability_;
}
inline int32_t OmtParam::img_capability() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.img_capability)
  return _internal_img_capability();
}
inline void OmtParam::_internal_set_img_capability(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.img_capability_ = value;
}
inline void OmtParam::set_img_capability(int32_t value) {
  _internal_set_img_capability(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.img_capability)
}

// optional int32 lost_age = 2 [default = 2];
inline bool OmtParam::_internal_has_lost_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OmtParam::has_lost_age() const {
  return _internal_has_lost_age();
}
inline void OmtParam::clear_lost_age() {
  _impl_.lost_age_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t OmtParam::_internal_lost_age() const {
  return _impl_.lost_age_;
}
inline int32_t OmtParam::lost_age() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.lost_age)
  return _internal_lost_age();
}
inline void OmtParam::_internal_set_lost_age(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.lost_age_ = value;
}
inline void OmtParam::set_lost_age(int32_t value) {
  _internal_set_lost_age(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.lost_age)
}

// optional int32 reserve_age = 3 [default = 3];
inline bool OmtParam::_internal_has_reserve_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OmtParam::has_reserve_age() const {
  return _internal_has_reserve_age();
}
inline void OmtParam::clear_reserve_age() {
  _impl_.reserve_age_ = 3;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t OmtParam::_internal_reserve_age() const {
  return _impl_.reserve_age_;
}
inline int32_t OmtParam::reserve_age() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.reserve_age)
  return _internal_reserve_age();
}
inline void OmtParam::_internal_set_reserve_age(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.reserve_age_ = value;
}
inline void OmtParam::set_reserve_age(int32_t value) {
  _internal_set_reserve_age(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.reserve_age)
}

// optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
inline bool OmtParam::_internal_has_weight_same_camera() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_same_camera_ != nullptr);
  return value;
}
inline bool OmtParam::has_weight_same_camera() const {
  return _internal_has_weight_same_camera();
}
inline void OmtParam::clear_weight_same_camera() {
  if (_impl_.weight_same_camera_ != nullptr) _impl_.weight_same_camera_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::_internal_weight_same_camera() const {
  const ::apollo::perception::camera::omt::WeightParam* p = _impl_.weight_same_camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::WeightParam&>(
      ::apollo::perception::camera::omt::_WeightParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::weight_same_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.weight_same_camera)
  return _internal_weight_same_camera();
}
inline void OmtParam::unsafe_arena_set_allocated_weight_same_camera(
    ::apollo::perception::camera::omt::WeightParam* weight_same_camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_same_camera_);
  }
  _impl_.weight_same_camera_ = weight_same_camera;
  if (weight_same_camera) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.OmtParam.weight_same_camera)
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::release_weight_same_camera() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::omt::WeightParam* temp = _impl_.weight_same_camera_;
  _impl_.weight_same_camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::unsafe_arena_release_weight_same_camera() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.OmtParam.weight_same_camera)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::omt::WeightParam* temp = _impl_.weight_same_camera_;
  _impl_.weight_same_camera_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::_internal_mutable_weight_same_camera() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.weight_same_camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::WeightParam>(GetArenaForAllocation());
    _impl_.weight_same_camera_ = p;
  }
  return _impl_.weight_same_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::mutable_weight_same_camera() {
  ::apollo::perception::camera::omt::WeightParam* _msg = _internal_mutable_weight_same_camera();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.weight_same_camera)
  return _msg;
}
inline void OmtParam::set_allocated_weight_same_camera(::apollo::perception::camera::omt::WeightParam* weight_same_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_same_camera_;
  }
  if (weight_same_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_same_camera);
    if (message_arena != submessage_arena) {
      weight_same_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_same_camera, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.weight_same_camera_ = weight_same_camera;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.weight_same_camera)
}

// optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
inline bool OmtParam::_internal_has_weight_diff_camera() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_diff_camera_ != nullptr);
  return value;
}
inline bool OmtParam::has_weight_diff_camera() const {
  return _internal_has_weight_diff_camera();
}
inline void OmtParam::clear_weight_diff_camera() {
  if (_impl_.weight_diff_camera_ != nullptr) _impl_.weight_diff_camera_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::_internal_weight_diff_camera() const {
  const ::apollo::perception::camera::omt::WeightParam* p = _impl_.weight_diff_camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::WeightParam&>(
      ::apollo::perception::camera::omt::_WeightParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::weight_diff_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
  return _internal_weight_diff_camera();
}
inline void OmtParam::unsafe_arena_set_allocated_weight_diff_camera(
    ::apollo::perception::camera::omt::WeightParam* weight_diff_camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_diff_camera_);
  }
  _impl_.weight_diff_camera_ = weight_diff_camera;
  if (weight_diff_camera) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::release_weight_diff_camera() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::omt::WeightParam* temp = _impl_.weight_diff_camera_;
  _impl_.weight_diff_camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::unsafe_arena_release_weight_diff_camera() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::omt::WeightParam* temp = _impl_.weight_diff_camera_;
  _impl_.weight_diff_camera_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::_internal_mutable_weight_diff_camera() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.weight_diff_camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::WeightParam>(GetArenaForAllocation());
    _impl_.weight_diff_camera_ = p;
  }
  return _impl_.weight_diff_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::mutable_weight_diff_camera() {
  ::apollo::perception::camera::omt::WeightParam* _msg = _internal_mutable_weight_diff_camera();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
  return _msg;
}
inline void OmtParam::set_allocated_weight_diff_camera(::apollo::perception::camera::omt::WeightParam* weight_diff_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_diff_camera_;
  }
  if (weight_diff_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight_diff_camera);
    if (message_arena != submessage_arena) {
      weight_diff_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_diff_camera, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.weight_diff_camera_ = weight_diff_camera;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
}

// optional float border = 9 [default = 30];
inline bool OmtParam::_internal_has_border() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OmtParam::has_border() const {
  return _internal_has_border();
}
inline void OmtParam::clear_border() {
  _impl_.border_ = 30;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float OmtParam::_internal_border() const {
  return _impl_.border_;
}
inline float OmtParam::border() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.border)
  return _internal_border();
}
inline void OmtParam::_internal_set_border(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.border_ = value;
}
inline void OmtParam::set_border(float value) {
  _internal_set_border(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.border)
}

// optional float target_thresh = 10 [default = 0.65];
inline bool OmtParam::_internal_has_target_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OmtParam::has_target_thresh() const {
  return _internal_has_target_thresh();
}
inline void OmtParam::clear_target_thresh() {
  _impl_.target_thresh_ = 0.65f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float OmtParam::_internal_target_thresh() const {
  return _impl_.target_thresh_;
}
inline float OmtParam::target_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_thresh)
  return _internal_target_thresh();
}
inline void OmtParam::_internal_set_target_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.target_thresh_ = value;
}
inline void OmtParam::set_target_thresh(float value) {
  _internal_set_target_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.target_thresh)
}

// optional bool correct_type = 11 [default = false];
inline bool OmtParam::_internal_has_correct_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OmtParam::has_correct_type() const {
  return _internal_has_correct_type();
}
inline void OmtParam::clear_correct_type() {
  _impl_.correct_type_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool OmtParam::_internal_correct_type() const {
  return _impl_.correct_type_;
}
inline bool OmtParam::correct_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.correct_type)
  return _internal_correct_type();
}
inline void OmtParam::_internal_set_correct_type(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.correct_type_ = value;
}
inline void OmtParam::set_correct_type(bool value) {
  _internal_set_correct_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.correct_type)
}

// optional .apollo.perception.camera.omt.TargetParam target_param = 12;
inline bool OmtParam::_internal_has_target_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_param_ != nullptr);
  return value;
}
inline bool OmtParam::has_target_param() const {
  return _internal_has_target_param();
}
inline void OmtParam::clear_target_param() {
  if (_impl_.target_param_ != nullptr) _impl_.target_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::camera::omt::TargetParam& OmtParam::_internal_target_param() const {
  const ::apollo::perception::camera::omt::TargetParam* p = _impl_.target_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::TargetParam&>(
      ::apollo::perception::camera::omt::_TargetParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::TargetParam& OmtParam::target_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_param)
  return _internal_target_param();
}
inline void OmtParam::unsafe_arena_set_allocated_target_param(
    ::apollo::perception::camera::omt::TargetParam* target_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_param_);
  }
  _impl_.target_param_ = target_param;
  if (target_param) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.OmtParam.target_param)
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::release_target_param() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::camera::omt::TargetParam* temp = _impl_.target_param_;
  _impl_.target_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::unsafe_arena_release_target_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.OmtParam.target_param)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::camera::omt::TargetParam* temp = _impl_.target_param_;
  _impl_.target_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::_internal_mutable_target_param() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.target_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::TargetParam>(GetArenaForAllocation());
    _impl_.target_param_ = p;
  }
  return _impl_.target_param_;
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::mutable_target_param() {
  ::apollo::perception::camera::omt::TargetParam* _msg = _internal_mutable_target_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.target_param)
  return _msg;
}
inline void OmtParam::set_allocated_target_param(::apollo::perception::camera::omt::TargetParam* target_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_param_;
  }
  if (target_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_param);
    if (message_arena != submessage_arena) {
      target_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.target_param_ = target_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.target_param)
}

// optional float min_init_height_ratio = 13 [default = 17];
inline bool OmtParam::_internal_has_min_init_height_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OmtParam::has_min_init_height_ratio() const {
  return _internal_has_min_init_height_ratio();
}
inline void OmtParam::clear_min_init_height_ratio() {
  _impl_.min_init_height_ratio_ = 17;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float OmtParam::_internal_min_init_height_ratio() const {
  return _impl_.min_init_height_ratio_;
}
inline float OmtParam::min_init_height_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.min_init_height_ratio)
  return _internal_min_init_height_ratio();
}
inline void OmtParam::_internal_set_min_init_height_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.min_init_height_ratio_ = value;
}
inline void OmtParam::set_min_init_height_ratio(float value) {
  _internal_set_min_init_height_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.min_init_height_ratio)
}

// optional float target_combine_iou_threshold = 14 [default = 0.5];
inline bool OmtParam::_internal_has_target_combine_iou_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool OmtParam::has_target_combine_iou_threshold() const {
  return _internal_has_target_combine_iou_threshold();
}
inline void OmtParam::clear_target_combine_iou_threshold() {
  _impl_.target_combine_iou_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float OmtParam::_internal_target_combine_iou_threshold() const {
  return _impl_.target_combine_iou_threshold_;
}
inline float OmtParam::target_combine_iou_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_combine_iou_threshold)
  return _internal_target_combine_iou_threshold();
}
inline void OmtParam::_internal_set_target_combine_iou_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.target_combine_iou_threshold_ = value;
}
inline void OmtParam::set_target_combine_iou_threshold(float value) {
  _internal_set_target_combine_iou_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.target_combine_iou_threshold)
}

// optional float fusion_target_thresh = 15 [default = 0.45];
inline bool OmtParam::_internal_has_fusion_target_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool OmtParam::has_fusion_target_thresh() const {
  return _internal_has_fusion_target_thresh();
}
inline void OmtParam::clear_fusion_target_thresh() {
  _impl_.fusion_target_thresh_ = 0.45f;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float OmtParam::_internal_fusion_target_thresh() const {
  return _impl_.fusion_target_thresh_;
}
inline float OmtParam::fusion_target_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.fusion_target_thresh)
  return _internal_fusion_target_thresh();
}
inline void OmtParam::_internal_set_fusion_target_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.fusion_target_thresh_ = value;
}
inline void OmtParam::set_fusion_target_thresh(float value) {
  _internal_set_fusion_target_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.fusion_target_thresh)
}

// optional float image_displacement = 16 [default = 50];
inline bool OmtParam::_internal_has_image_displacement() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool OmtParam::has_image_displacement() const {
  return _internal_has_image_displacement();
}
inline void OmtParam::clear_image_displacement() {
  _impl_.image_displacement_ = 50;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float OmtParam::_internal_image_displacement() const {
  return _impl_.image_displacement_;
}
inline float OmtParam::image_displacement() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.image_displacement)
  return _internal_image_displacement();
}
inline void OmtParam::_internal_set_image_displacement(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.image_displacement_ = value;
}
inline void OmtParam::set_image_displacement(float value) {
  _internal_set_image_displacement(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.image_displacement)
}

// optional float abnormal_movement = 17 [default = 0.3];
inline bool OmtParam::_internal_has_abnormal_movement() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool OmtParam::has_abnormal_movement() const {
  return _internal_has_abnormal_movement();
}
inline void OmtParam::clear_abnormal_movement() {
  _impl_.abnormal_movement_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float OmtParam::_internal_abnormal_movement() const {
  return _impl_.abnormal_movement_;
}
inline float OmtParam::abnormal_movement() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.abnormal_movement)
  return _internal_abnormal_movement();
}
inline void OmtParam::_internal_set_abnormal_movement(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.abnormal_movement_ = value;
}
inline void OmtParam::set_abnormal_movement(float value) {
  _internal_set_abnormal_movement(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.abnormal_movement)
}

// optional double same_ts_eps = 18 [default = 0.05];
inline bool OmtParam::_internal_has_same_ts_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool OmtParam::has_same_ts_eps() const {
  return _internal_has_same_ts_eps();
}
inline void OmtParam::clear_same_ts_eps() {
  _impl_.same_ts_eps_ = 0.05;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double OmtParam::_internal_same_ts_eps() const {
  return _impl_.same_ts_eps_;
}
inline double OmtParam::same_ts_eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.same_ts_eps)
  return _internal_same_ts_eps();
}
inline void OmtParam::_internal_set_same_ts_eps(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.same_ts_eps_ = value;
}
inline void OmtParam::set_same_ts_eps(double value) {
  _internal_set_same_ts_eps(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.same_ts_eps)
}

// optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
inline bool OmtParam::_internal_has_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_ != nullptr);
  return value;
}
inline bool OmtParam::has_reference() const {
  return _internal_has_reference();
}
inline void OmtParam::clear_reference() {
  if (_impl_.reference_ != nullptr) _impl_.reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::camera::omt::ReferenceParam& OmtParam::_internal_reference() const {
  const ::apollo::perception::camera::omt::ReferenceParam* p = _impl_.reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::omt::ReferenceParam&>(
      ::apollo::perception::camera::omt::_ReferenceParam_default_instance_);
}
inline const ::apollo::perception::camera::omt::ReferenceParam& OmtParam::reference() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.reference)
  return _internal_reference();
}
inline void OmtParam::unsafe_arena_set_allocated_reference(
    ::apollo::perception::camera::omt::ReferenceParam* reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_);
  }
  _impl_.reference_ = reference;
  if (reference) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.omt.OmtParam.reference)
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::release_reference() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::camera::omt::ReferenceParam* temp = _impl_.reference_;
  _impl_.reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.OmtParam.reference)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::camera::omt::ReferenceParam* temp = _impl_.reference_;
  _impl_.reference_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::_internal_mutable_reference() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::omt::ReferenceParam>(GetArenaForAllocation());
    _impl_.reference_ = p;
  }
  return _impl_.reference_;
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::mutable_reference() {
  ::apollo::perception::camera::omt::ReferenceParam* _msg = _internal_mutable_reference();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.reference)
  return _msg;
}
inline void OmtParam::set_allocated_reference(::apollo::perception::camera::omt::ReferenceParam* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reference_;
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.reference)
}

// optional string type_change_cost = 20;
inline bool OmtParam::_internal_has_type_change_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OmtParam::has_type_change_cost() const {
  return _internal_has_type_change_cost();
}
inline void OmtParam::clear_type_change_cost() {
  _impl_.type_change_cost_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OmtParam::type_change_cost() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.type_change_cost)
  return _internal_type_change_cost();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OmtParam::set_type_change_cost(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_change_cost_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.type_change_cost)
}
inline std::string* OmtParam::mutable_type_change_cost() {
  std::string* _s = _internal_mutable_type_change_cost();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.type_change_cost)
  return _s;
}
inline const std::string& OmtParam::_internal_type_change_cost() const {
  return _impl_.type_change_cost_.Get();
}
inline void OmtParam::_internal_set_type_change_cost(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_change_cost_.Set(value, GetArenaForAllocation());
}
inline std::string* OmtParam::_internal_mutable_type_change_cost() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_change_cost_.Mutable(GetArenaForAllocation());
}
inline std::string* OmtParam::release_type_change_cost() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.omt.OmtParam.type_change_cost)
  if (!_internal_has_type_change_cost()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_change_cost_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_change_cost_.IsDefault()) {
    _impl_.type_change_cost_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OmtParam::set_allocated_type_change_cost(std::string* type_change_cost) {
  if (type_change_cost != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_change_cost_.SetAllocated(type_change_cost, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_change_cost_.IsDefault()) {
    _impl_.type_change_cost_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.type_change_cost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto
