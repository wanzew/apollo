// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/tracker/omt/proto/omt.proto

#include "modules/perception/camera/lib/obstacle/tracker/omt/proto/omt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace omt {
PROTOBUF_CONSTEXPR KalmanParam::KalmanParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.init_variance_)*/0
  , /*decltype(_impl_.process_variance_)*/0
  , /*decltype(_impl_.measure_variance_)*/0} {}
struct KalmanParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KalmanParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KalmanParamDefaultTypeInternal() {}
  union {
    KalmanParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KalmanParamDefaultTypeInternal _KalmanParam_default_instance_;
PROTOBUF_CONSTEXPR TargetParam::TargetParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.world_center_)*/nullptr
  , /*decltype(_impl_.image_center_)*/nullptr
  , /*decltype(_impl_.image_wh_update_rate_)*/0
  , /*decltype(_impl_.clapping_velocity_)*/false
  , /*decltype(_impl_.velocity_threshold_)*/2
  , /*decltype(_impl_.velocity_output_delay_)*/2
  , /*decltype(_impl_.world_lhw_history_)*/15
  , /*decltype(_impl_.height_diff_ratio_)*/0.1f
  , /*decltype(_impl_.world_state_history_)*/30
  , /*decltype(_impl_.min_cached_world_state_history_size_)*/5
  , /*decltype(_impl_.min_cached_velocity_size_)*/10
  , /*decltype(_impl_.min_cached_position_size_)*/25
  , /*decltype(_impl_.calc_avg_position_window_size_)*/7
  , /*decltype(_impl_.static_speed_threshold_)*/0.5f
  , /*decltype(_impl_.static_speed_threshold_ped_)*/0.3f
  , /*decltype(_impl_.min_moving_avg_speed_)*/1
  , /*decltype(_impl_.min_moving_avg_speed_ped_)*/0.5f
  , /*decltype(_impl_.abnormal_acc_threshold_)*/6
  , /*decltype(_impl_.abnormal_acc_threshold_ped_)*/3
  , /*decltype(_impl_.abnormal_velocity_heading_angle_threshold_)*/0.7854f
  , /*decltype(_impl_.world_mean_velocity_duration_)*/10
  , /*decltype(_impl_.tracked_life_)*/3
  , /*decltype(_impl_.type_filter_var_)*/0.3f
  , /*decltype(_impl_.large_velocity_ratio_)*/2.5f
  , /*decltype(_impl_.too_large_velocity_ratio_)*/1.5f
  , /*decltype(_impl_.mean_filter_window_)*/10
  , /*decltype(_impl_.direction_filter_ratio_)*/0.7f
  , /*decltype(_impl_.displacement_theta_var_)*/0.25f
  , /*decltype(_impl_.velocity_theta_var_)*/0.5f
  , /*decltype(_impl_.stable_moving_speed_)*/2} {}
struct TargetParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetParamDefaultTypeInternal() {}
  union {
    TargetParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetParamDefaultTypeInternal _TargetParam_default_instance_;
PROTOBUF_CONSTEXPR ReferenceParam::ReferenceParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.height_diff_ratio_)*/0.1f
  , /*decltype(_impl_.margin_)*/2
  , /*decltype(_impl_.min_allow_height_)*/50
  , /*decltype(_impl_.area_decay_)*/0.99f
  , /*decltype(_impl_.down_sampling_)*/40} {}
struct ReferenceParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceParamDefaultTypeInternal() {}
  union {
    ReferenceParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceParamDefaultTypeInternal _ReferenceParam_default_instance_;
PROTOBUF_CONSTEXPR WeightParam::WeightParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appearance_)*/0
  , /*decltype(_impl_.motion_)*/0
  , /*decltype(_impl_.shape_)*/0
  , /*decltype(_impl_.tracklet_)*/0
  , /*decltype(_impl_.overlap_)*/0} {}
struct WeightParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeightParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeightParamDefaultTypeInternal() {}
  union {
    WeightParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeightParamDefaultTypeInternal _WeightParam_default_instance_;
PROTOBUF_CONSTEXPR OmtParam::OmtParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_change_cost_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_same_camera_)*/nullptr
  , /*decltype(_impl_.weight_diff_camera_)*/nullptr
  , /*decltype(_impl_.target_param_)*/nullptr
  , /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_.correct_type_)*/false
  , /*decltype(_impl_.img_capability_)*/7
  , /*decltype(_impl_.lost_age_)*/2
  , /*decltype(_impl_.reserve_age_)*/3
  , /*decltype(_impl_.border_)*/30
  , /*decltype(_impl_.target_thresh_)*/0.65f
  , /*decltype(_impl_.min_init_height_ratio_)*/17
  , /*decltype(_impl_.target_combine_iou_threshold_)*/0.5f
  , /*decltype(_impl_.fusion_target_thresh_)*/0.45f
  , /*decltype(_impl_.image_displacement_)*/50
  , /*decltype(_impl_.abnormal_movement_)*/0.3f
  , /*decltype(_impl_.same_ts_eps_)*/0.05} {}
struct OmtParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OmtParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OmtParamDefaultTypeInternal() {}
  union {
    OmtParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OmtParamDefaultTypeInternal _OmtParam_default_instance_;
}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _impl_.init_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _impl_.process_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _impl_.measure_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.velocity_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.velocity_output_delay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.world_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.image_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.image_wh_update_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.world_lhw_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.height_diff_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.world_state_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.min_cached_world_state_history_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.min_cached_velocity_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.min_cached_position_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.calc_avg_position_window_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.static_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.static_speed_threshold_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.min_moving_avg_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.min_moving_avg_speed_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.abnormal_acc_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.abnormal_acc_threshold_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.abnormal_velocity_heading_angle_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.clapping_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.world_mean_velocity_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.tracked_life_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.type_filter_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.large_velocity_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.too_large_velocity_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.mean_filter_window_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.direction_filter_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.displacement_theta_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.velocity_theta_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _impl_.stable_moving_speed_),
  4,
  5,
  0,
  1,
  2,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  3,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_.margin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_.min_allow_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_.area_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_.down_sampling_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _impl_.height_diff_ratio_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_.appearance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_.motion_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_.tracklet_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _impl_.overlap_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.img_capability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.lost_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.reserve_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.weight_same_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.weight_diff_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.border_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.target_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.correct_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.target_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.min_init_height_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.target_combine_iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.fusion_target_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.image_displacement_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.abnormal_movement_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.same_ts_eps_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _impl_.type_change_cost_),
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  5,
  3,
  11,
  12,
  13,
  14,
  15,
  16,
  4,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::perception::camera::omt::KalmanParam)},
  { 12, 48, -1, sizeof(::apollo::perception::camera::omt::TargetParam)},
  { 78, 89, -1, sizeof(::apollo::perception::camera::omt::ReferenceParam)},
  { 94, 105, -1, sizeof(::apollo::perception::camera::omt::WeightParam)},
  { 110, 133, -1, sizeof(::apollo::perception::camera::omt::OmtParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::omt::_KalmanParam_default_instance_._instance,
  &::apollo::perception::camera::omt::_TargetParam_default_instance_._instance,
  &::apollo::perception::camera::omt::_ReferenceParam_default_instance_._instance,
  &::apollo::perception::camera::omt::_WeightParam_default_instance_._instance,
  &::apollo::perception::camera::omt::_OmtParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBmodules/perception/camera/lib/obstacle"
  "/tracker/omt/proto/omt.proto\022\034apollo.per"
  "ception.camera.omt\"X\n\013KalmanParam\022\025\n\rini"
  "t_variance\030\001 \001(\002\022\030\n\020process_variance\030\002 \001"
  "(\002\022\030\n\020measure_variance\030\003 \001(\002\"\210\t\n\013TargetP"
  "aram\022\035\n\022velocity_threshold\030\001 \001(\002:\0012\022 \n\025v"
  "elocity_output_delay\030\002 \001(\005:\0012\022\?\n\014world_c"
  "enter\030\003 \001(\0132).apollo.perception.camera.o"
  "mt.KalmanParam\022\?\n\014image_center\030\004 \001(\0132).a"
  "pollo.perception.camera.omt.KalmanParam\022"
  "\034\n\024image_wh_update_rate\030\005 \001(\002\022\035\n\021world_l"
  "hw_history\030\006 \001(\005:\00215\022\036\n\021height_diff_rati"
  "o\030\007 \001(\002:\0030.1\022\037\n\023world_state_history\030\010 \001("
  "\005:\00230\022.\n#min_cached_world_state_history_"
  "size\030\t \001(\005:\0015\022$\n\030min_cached_velocity_siz"
  "e\030\n \001(\005:\00210\022$\n\030min_cached_position_size\030"
  "\013 \001(\005:\00225\022(\n\035calc_avg_position_window_si"
  "ze\030\014 \001(\005:\0017\022#\n\026static_speed_threshold\030\r "
  "\001(\002:\0030.5\022\'\n\032static_speed_threshold_ped\030\016"
  " \001(\002:\0030.3\022\037\n\024min_moving_avg_speed\030\017 \001(\002:"
  "\0011\022%\n\030min_moving_avg_speed_ped\030\020 \001(\002:\0030."
  "5\022!\n\026abnormal_acc_threshold\030\021 \001(\002:\0016\022%\n\032"
  "abnormal_acc_threshold_ped\030\022 \001(\002:\0013\0229\n)a"
  "bnormal_velocity_heading_angle_threshold"
  "\030\023 \001(\002:\0060.7854\022 \n\021clapping_velocity\030\024 \001("
  "\010:\005false\022(\n\034world_mean_velocity_duration"
  "\030\025 \001(\005:\00210\022\027\n\014tracked_life\030\026 \001(\005:\0013\022\034\n\017t"
  "ype_filter_var\030\027 \001(\002:\0030.3\022!\n\024large_veloc"
  "ity_ratio\030\030 \001(\002:\0032.5\022%\n\030too_large_veloci"
  "ty_ratio\030\031 \001(\002:\0031.5\022\036\n\022mean_filter_windo"
  "w\030\032 \001(\005:\00210\022#\n\026direction_filter_ratio\030\033 "
  "\001(\002:\0030.7\022$\n\026displacement_theta_var\030\034 \001(\002"
  ":\0040.25\022\037\n\022velocity_theta_var\030\035 \001(\002:\0030.5\022"
  "\036\n\023stable_moving_speed\030\036 \001(\002:\0012\"\226\001\n\016Refe"
  "renceParam\022\021\n\006margin\030\001 \001(\005:\0012\022\034\n\020min_all"
  "ow_height\030\002 \001(\005:\00250\022\030\n\narea_decay\030\003 \001(\002:"
  "\0040.99\022\031\n\rdown_sampling\030\004 \001(\005:\00240\022\036\n\021heig"
  "ht_diff_ratio\030\005 \001(\002:\0030.1\"r\n\013WeightParam\022"
  "\025\n\nappearance\030\001 \001(\002:\0010\022\021\n\006motion\030\002 \001(\002:\001"
  "0\022\020\n\005shape\030\003 \001(\002:\0010\022\023\n\010tracklet\030\004 \001(\002:\0010"
  "\022\022\n\007overlap\030\005 \001(\002:\0010\"\227\005\n\010OmtParam\022\031\n\016img"
  "_capability\030\001 \001(\005:\0017\022\023\n\010lost_age\030\002 \001(\005:\001"
  "2\022\026\n\013reserve_age\030\003 \001(\005:\0013\022E\n\022weight_same"
  "_camera\030\004 \001(\0132).apollo.perception.camera"
  ".omt.WeightParam\022E\n\022weight_diff_camera\030\005"
  " \001(\0132).apollo.perception.camera.omt.Weig"
  "htParam\022\022\n\006border\030\t \001(\002:\00230\022\033\n\rtarget_th"
  "resh\030\n \001(\002:\0040.65\022\033\n\014correct_type\030\013 \001(\010:\005"
  "false\022\?\n\014target_param\030\014 \001(\0132).apollo.per"
  "ception.camera.omt.TargetParam\022!\n\025min_in"
  "it_height_ratio\030\r \001(\002:\00217\022)\n\034target_comb"
  "ine_iou_threshold\030\016 \001(\002:\0030.5\022\"\n\024fusion_t"
  "arget_thresh\030\017 \001(\002:\0040.45\022\036\n\022image_displa"
  "cement\030\020 \001(\002:\00250\022\036\n\021abnormal_movement\030\021 "
  "\001(\002:\0030.3\022\031\n\013same_ts_eps\030\022 \001(\001:\0040.05\022\?\n\tr"
  "eference\030\023 \001(\0132,.apollo.perception.camer"
  "a.omt.ReferenceParam\022\030\n\020type_change_cost"
  "\030\024 \001(\t"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto = {
    false, false, 2286, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto,
    "modules/perception/camera/lib/obstacle/tracker/omt/proto/omt.proto",
    &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto(&descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace omt {

// ===================================================================

class KalmanParam::_Internal {
 public:
  using HasBits = decltype(std::declval<KalmanParam>()._impl_._has_bits_);
  static void set_has_init_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_measure_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KalmanParam::KalmanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.omt.KalmanParam)
}
KalmanParam::KalmanParam(const KalmanParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.init_variance_){}
    , decltype(_impl_.process_variance_){}
    , decltype(_impl_.measure_variance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.init_variance_, &from._impl_.init_variance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.measure_variance_) -
    reinterpret_cast<char*>(&_impl_.init_variance_)) + sizeof(_impl_.measure_variance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.KalmanParam)
}

inline void KalmanParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.init_variance_){0}
    , decltype(_impl_.process_variance_){0}
    , decltype(_impl_.measure_variance_){0}
  };
}

KalmanParam::~KalmanParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.KalmanParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KalmanParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KalmanParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KalmanParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.KalmanParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.init_variance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.measure_variance_) -
        reinterpret_cast<char*>(&_impl_.init_variance_)) + sizeof(_impl_.measure_variance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KalmanParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float init_variance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_init_variance(&has_bits);
          _impl_.init_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float process_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_process_variance(&has_bits);
          _impl_.process_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float measure_variance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_measure_variance(&has_bits);
          _impl_.measure_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KalmanParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.KalmanParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float init_variance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_init_variance(), target);
  }

  // optional float process_variance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_process_variance(), target);
  }

  // optional float measure_variance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_measure_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.KalmanParam)
  return target;
}

size_t KalmanParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.KalmanParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float init_variance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float process_variance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float measure_variance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KalmanParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KalmanParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KalmanParam::GetClassData() const { return &_class_data_; }

void KalmanParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KalmanParam *>(to)->MergeFrom(
      static_cast<const KalmanParam &>(from));
}


void KalmanParam::MergeFrom(const KalmanParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.KalmanParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.init_variance_ = from._impl_.init_variance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.process_variance_ = from._impl_.process_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.measure_variance_ = from._impl_.measure_variance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KalmanParam::CopyFrom(const KalmanParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.KalmanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KalmanParam::IsInitialized() const {
  return true;
}

void KalmanParam::InternalSwap(KalmanParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KalmanParam, _impl_.measure_variance_)
      + sizeof(KalmanParam::_impl_.measure_variance_)
      - PROTOBUF_FIELD_OFFSET(KalmanParam, _impl_.init_variance_)>(
          reinterpret_cast<char*>(&_impl_.init_variance_),
          reinterpret_cast<char*>(&other->_impl_.init_variance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KalmanParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[0]);
}

// ===================================================================

class TargetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetParam>()._impl_._has_bits_);
  static void set_has_velocity_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_velocity_output_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::omt::KalmanParam& world_center(const TargetParam* msg);
  static void set_has_world_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::omt::KalmanParam& image_center(const TargetParam* msg);
  static void set_has_image_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_wh_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_world_lhw_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height_diff_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_world_state_history(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_cached_world_state_history_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_cached_velocity_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_cached_position_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_calc_avg_position_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_static_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_static_speed_threshold_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_moving_avg_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_moving_avg_speed_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_abnormal_acc_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_abnormal_acc_threshold_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_abnormal_velocity_heading_angle_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clapping_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_world_mean_velocity_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tracked_life(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_type_filter_var(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_large_velocity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_too_large_velocity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mean_filter_window(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_direction_filter_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_displacement_theta_var(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_velocity_theta_var(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_stable_moving_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::apollo::perception::camera::omt::KalmanParam&
TargetParam::_Internal::world_center(const TargetParam* msg) {
  return *msg->_impl_.world_center_;
}
const ::apollo::perception::camera::omt::KalmanParam&
TargetParam::_Internal::image_center(const TargetParam* msg) {
  return *msg->_impl_.image_center_;
}
TargetParam::TargetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.omt.TargetParam)
}
TargetParam::TargetParam(const TargetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_center_){nullptr}
    , decltype(_impl_.image_center_){nullptr}
    , decltype(_impl_.image_wh_update_rate_){}
    , decltype(_impl_.clapping_velocity_){}
    , decltype(_impl_.velocity_threshold_){}
    , decltype(_impl_.velocity_output_delay_){}
    , decltype(_impl_.world_lhw_history_){}
    , decltype(_impl_.height_diff_ratio_){}
    , decltype(_impl_.world_state_history_){}
    , decltype(_impl_.min_cached_world_state_history_size_){}
    , decltype(_impl_.min_cached_velocity_size_){}
    , decltype(_impl_.min_cached_position_size_){}
    , decltype(_impl_.calc_avg_position_window_size_){}
    , decltype(_impl_.static_speed_threshold_){}
    , decltype(_impl_.static_speed_threshold_ped_){}
    , decltype(_impl_.min_moving_avg_speed_){}
    , decltype(_impl_.min_moving_avg_speed_ped_){}
    , decltype(_impl_.abnormal_acc_threshold_){}
    , decltype(_impl_.abnormal_acc_threshold_ped_){}
    , decltype(_impl_.abnormal_velocity_heading_angle_threshold_){}
    , decltype(_impl_.world_mean_velocity_duration_){}
    , decltype(_impl_.tracked_life_){}
    , decltype(_impl_.type_filter_var_){}
    , decltype(_impl_.large_velocity_ratio_){}
    , decltype(_impl_.too_large_velocity_ratio_){}
    , decltype(_impl_.mean_filter_window_){}
    , decltype(_impl_.direction_filter_ratio_){}
    , decltype(_impl_.displacement_theta_var_){}
    , decltype(_impl_.velocity_theta_var_){}
    , decltype(_impl_.stable_moving_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_center()) {
    _impl_.world_center_ = new ::apollo::perception::camera::omt::KalmanParam(*from._impl_.world_center_);
  }
  if (from._internal_has_image_center()) {
    _impl_.image_center_ = new ::apollo::perception::camera::omt::KalmanParam(*from._impl_.image_center_);
  }
  ::memcpy(&_impl_.image_wh_update_rate_, &from._impl_.image_wh_update_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stable_moving_speed_) -
    reinterpret_cast<char*>(&_impl_.image_wh_update_rate_)) + sizeof(_impl_.stable_moving_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.TargetParam)
}

inline void TargetParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_center_){nullptr}
    , decltype(_impl_.image_center_){nullptr}
    , decltype(_impl_.image_wh_update_rate_){0}
    , decltype(_impl_.clapping_velocity_){false}
    , decltype(_impl_.velocity_threshold_){2}
    , decltype(_impl_.velocity_output_delay_){2}
    , decltype(_impl_.world_lhw_history_){15}
    , decltype(_impl_.height_diff_ratio_){0.1f}
    , decltype(_impl_.world_state_history_){30}
    , decltype(_impl_.min_cached_world_state_history_size_){5}
    , decltype(_impl_.min_cached_velocity_size_){10}
    , decltype(_impl_.min_cached_position_size_){25}
    , decltype(_impl_.calc_avg_position_window_size_){7}
    , decltype(_impl_.static_speed_threshold_){0.5f}
    , decltype(_impl_.static_speed_threshold_ped_){0.3f}
    , decltype(_impl_.min_moving_avg_speed_){1}
    , decltype(_impl_.min_moving_avg_speed_ped_){0.5f}
    , decltype(_impl_.abnormal_acc_threshold_){6}
    , decltype(_impl_.abnormal_acc_threshold_ped_){3}
    , decltype(_impl_.abnormal_velocity_heading_angle_threshold_){0.7854f}
    , decltype(_impl_.world_mean_velocity_duration_){10}
    , decltype(_impl_.tracked_life_){3}
    , decltype(_impl_.type_filter_var_){0.3f}
    , decltype(_impl_.large_velocity_ratio_){2.5f}
    , decltype(_impl_.too_large_velocity_ratio_){1.5f}
    , decltype(_impl_.mean_filter_window_){10}
    , decltype(_impl_.direction_filter_ratio_){0.7f}
    , decltype(_impl_.displacement_theta_var_){0.25f}
    , decltype(_impl_.velocity_theta_var_){0.5f}
    , decltype(_impl_.stable_moving_speed_){2}
  };
}

TargetParam::~TargetParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.TargetParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.world_center_;
  if (this != internal_default_instance()) delete _impl_.image_center_;
}

void TargetParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.TargetParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.world_center_ != nullptr);
      _impl_.world_center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.image_center_ != nullptr);
      _impl_.image_center_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.image_wh_update_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clapping_velocity_) -
        reinterpret_cast<char*>(&_impl_.image_wh_update_rate_)) + sizeof(_impl_.clapping_velocity_));
    _impl_.velocity_threshold_ = 2;
    _impl_.velocity_output_delay_ = 2;
    _impl_.world_lhw_history_ = 15;
    _impl_.height_diff_ratio_ = 0.1f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.world_state_history_ = 30;
    _impl_.min_cached_world_state_history_size_ = 5;
    _impl_.min_cached_velocity_size_ = 10;
    _impl_.min_cached_position_size_ = 25;
    _impl_.calc_avg_position_window_size_ = 7;
    _impl_.static_speed_threshold_ = 0.5f;
    _impl_.static_speed_threshold_ped_ = 0.3f;
    _impl_.min_moving_avg_speed_ = 1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.min_moving_avg_speed_ped_ = 0.5f;
    _impl_.abnormal_acc_threshold_ = 6;
    _impl_.abnormal_acc_threshold_ped_ = 3;
    _impl_.abnormal_velocity_heading_angle_threshold_ = 0.7854f;
    _impl_.world_mean_velocity_duration_ = 10;
    _impl_.tracked_life_ = 3;
    _impl_.type_filter_var_ = 0.3f;
    _impl_.large_velocity_ratio_ = 2.5f;
  }
  if (cached_has_bits & 0x3f000000u) {
    _impl_.too_large_velocity_ratio_ = 1.5f;
    _impl_.mean_filter_window_ = 10;
    _impl_.direction_filter_ratio_ = 0.7f;
    _impl_.displacement_theta_var_ = 0.25f;
    _impl_.velocity_theta_var_ = 0.5f;
    _impl_.stable_moving_speed_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float velocity_threshold = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_velocity_threshold(&has_bits);
          _impl_.velocity_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 velocity_output_delay = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_velocity_output_delay(&has_bits);
          _impl_.velocity_output_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float image_wh_update_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_image_wh_update_rate(&has_bits);
          _impl_.image_wh_update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 world_lhw_history = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_world_lhw_history(&has_bits);
          _impl_.world_lhw_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float height_diff_ratio = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_height_diff_ratio(&has_bits);
          _impl_.height_diff_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 world_state_history = 8 [default = 30];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_world_state_history(&has_bits);
          _impl_.world_state_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_cached_world_state_history_size = 9 [default = 5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_min_cached_world_state_history_size(&has_bits);
          _impl_.min_cached_world_state_history_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_cached_velocity_size = 10 [default = 10];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_min_cached_velocity_size(&has_bits);
          _impl_.min_cached_velocity_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_cached_position_size = 11 [default = 25];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_min_cached_position_size(&has_bits);
          _impl_.min_cached_position_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 calc_avg_position_window_size = 12 [default = 7];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_calc_avg_position_window_size(&has_bits);
          _impl_.calc_avg_position_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float static_speed_threshold = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_static_speed_threshold(&has_bits);
          _impl_.static_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float static_speed_threshold_ped = 14 [default = 0.3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_static_speed_threshold_ped(&has_bits);
          _impl_.static_speed_threshold_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_moving_avg_speed = 15 [default = 1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_min_moving_avg_speed(&has_bits);
          _impl_.min_moving_avg_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_min_moving_avg_speed_ped(&has_bits);
          _impl_.min_moving_avg_speed_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float abnormal_acc_threshold = 17 [default = 6];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_abnormal_acc_threshold(&has_bits);
          _impl_.abnormal_acc_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float abnormal_acc_threshold_ped = 18 [default = 3];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_abnormal_acc_threshold_ped(&has_bits);
          _impl_.abnormal_acc_threshold_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_abnormal_velocity_heading_angle_threshold(&has_bits);
          _impl_.abnormal_velocity_heading_angle_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool clapping_velocity = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_clapping_velocity(&has_bits);
          _impl_.clapping_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 world_mean_velocity_duration = 21 [default = 10];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_world_mean_velocity_duration(&has_bits);
          _impl_.world_mean_velocity_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tracked_life = 22 [default = 3];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tracked_life(&has_bits);
          _impl_.tracked_life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float type_filter_var = 23 [default = 0.3];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_type_filter_var(&has_bits);
          _impl_.type_filter_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float large_velocity_ratio = 24 [default = 2.5];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_large_velocity_ratio(&has_bits);
          _impl_.large_velocity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float too_large_velocity_ratio = 25 [default = 1.5];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_too_large_velocity_ratio(&has_bits);
          _impl_.too_large_velocity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mean_filter_window = 26 [default = 10];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_mean_filter_window(&has_bits);
          _impl_.mean_filter_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float direction_filter_ratio = 27 [default = 0.7];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_direction_filter_ratio(&has_bits);
          _impl_.direction_filter_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float displacement_theta_var = 28 [default = 0.25];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_displacement_theta_var(&has_bits);
          _impl_.displacement_theta_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_theta_var = 29 [default = 0.5];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_velocity_theta_var(&has_bits);
          _impl_.velocity_theta_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stable_moving_speed = 30 [default = 2];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_stable_moving_speed(&has_bits);
          _impl_.stable_moving_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.TargetParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float velocity_threshold = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_velocity_threshold(), target);
  }

  // optional int32 velocity_output_delay = 2 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_velocity_output_delay(), target);
  }

  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world_center(this),
        _Internal::world_center(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::image_center(this),
        _Internal::image_center(this).GetCachedSize(), target, stream);
  }

  // optional float image_wh_update_rate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_image_wh_update_rate(), target);
  }

  // optional int32 world_lhw_history = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_lhw_history(), target);
  }

  // optional float height_diff_ratio = 7 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_height_diff_ratio(), target);
  }

  // optional int32 world_state_history = 8 [default = 30];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_world_state_history(), target);
  }

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_min_cached_world_state_history_size(), target);
  }

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_cached_velocity_size(), target);
  }

  // optional int32 min_cached_position_size = 11 [default = 25];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_min_cached_position_size(), target);
  }

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_calc_avg_position_window_size(), target);
  }

  // optional float static_speed_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_static_speed_threshold(), target);
  }

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_static_speed_threshold_ped(), target);
  }

  // optional float min_moving_avg_speed = 15 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_min_moving_avg_speed(), target);
  }

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_min_moving_avg_speed_ped(), target);
  }

  // optional float abnormal_acc_threshold = 17 [default = 6];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_abnormal_acc_threshold(), target);
  }

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_abnormal_acc_threshold_ped(), target);
  }

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_abnormal_velocity_heading_angle_threshold(), target);
  }

  // optional bool clapping_velocity = 20 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_clapping_velocity(), target);
  }

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_world_mean_velocity_duration(), target);
  }

  // optional int32 tracked_life = 22 [default = 3];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tracked_life(), target);
  }

  // optional float type_filter_var = 23 [default = 0.3];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_type_filter_var(), target);
  }

  // optional float large_velocity_ratio = 24 [default = 2.5];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_large_velocity_ratio(), target);
  }

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_too_large_velocity_ratio(), target);
  }

  // optional int32 mean_filter_window = 26 [default = 10];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_mean_filter_window(), target);
  }

  // optional float direction_filter_ratio = 27 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_direction_filter_ratio(), target);
  }

  // optional float displacement_theta_var = 28 [default = 0.25];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_displacement_theta_var(), target);
  }

  // optional float velocity_theta_var = 29 [default = 0.5];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_velocity_theta_var(), target);
  }

  // optional float stable_moving_speed = 30 [default = 2];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_stable_moving_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.TargetParam)
  return target;
}

size_t TargetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.TargetParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_center_);
    }

    // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_center_);
    }

    // optional float image_wh_update_rate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool clapping_velocity = 20 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional float velocity_threshold = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 velocity_output_delay = 2 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_velocity_output_delay());
    }

    // optional int32 world_lhw_history = 6 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_world_lhw_history());
    }

    // optional float height_diff_ratio = 7 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 world_state_history = 8 [default = 30];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_world_state_history());
    }

    // optional int32 min_cached_world_state_history_size = 9 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_cached_world_state_history_size());
    }

    // optional int32 min_cached_velocity_size = 10 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_cached_velocity_size());
    }

    // optional int32 min_cached_position_size = 11 [default = 25];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_cached_position_size());
    }

    // optional int32 calc_avg_position_window_size = 12 [default = 7];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_calc_avg_position_window_size());
    }

    // optional float static_speed_threshold = 13 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float static_speed_threshold_ped = 14 [default = 0.3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float min_moving_avg_speed = 15 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_acc_threshold = 17 [default = 6];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_acc_threshold_ped = 18 [default = 3];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 world_mean_velocity_duration = 21 [default = 10];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_world_mean_velocity_duration());
    }

    // optional int32 tracked_life = 22 [default = 3];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tracked_life());
    }

    // optional float type_filter_var = 23 [default = 0.3];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float large_velocity_ratio = 24 [default = 2.5];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional float too_large_velocity_ratio = 25 [default = 1.5];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 mean_filter_window = 26 [default = 10];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window());
    }

    // optional float direction_filter_ratio = 27 [default = 0.7];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float displacement_theta_var = 28 [default = 0.25];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float velocity_theta_var = 29 [default = 0.5];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float stable_moving_speed = 30 [default = 2];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetParam::GetClassData() const { return &_class_data_; }

void TargetParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetParam *>(to)->MergeFrom(
      static_cast<const TargetParam &>(from));
}


void TargetParam::MergeFrom(const TargetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.TargetParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_world_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from._internal_world_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_image_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from._internal_image_center());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.image_wh_update_rate_ = from._impl_.image_wh_update_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clapping_velocity_ = from._impl_.clapping_velocity_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.velocity_threshold_ = from._impl_.velocity_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.velocity_output_delay_ = from._impl_.velocity_output_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.world_lhw_history_ = from._impl_.world_lhw_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.height_diff_ratio_ = from._impl_.height_diff_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.world_state_history_ = from._impl_.world_state_history_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.min_cached_world_state_history_size_ = from._impl_.min_cached_world_state_history_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.min_cached_velocity_size_ = from._impl_.min_cached_velocity_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.min_cached_position_size_ = from._impl_.min_cached_position_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.calc_avg_position_window_size_ = from._impl_.calc_avg_position_window_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.static_speed_threshold_ = from._impl_.static_speed_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.static_speed_threshold_ped_ = from._impl_.static_speed_threshold_ped_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.min_moving_avg_speed_ = from._impl_.min_moving_avg_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.min_moving_avg_speed_ped_ = from._impl_.min_moving_avg_speed_ped_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.abnormal_acc_threshold_ = from._impl_.abnormal_acc_threshold_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.abnormal_acc_threshold_ped_ = from._impl_.abnormal_acc_threshold_ped_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.abnormal_velocity_heading_angle_threshold_ = from._impl_.abnormal_velocity_heading_angle_threshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.world_mean_velocity_duration_ = from._impl_.world_mean_velocity_duration_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.tracked_life_ = from._impl_.tracked_life_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.type_filter_var_ = from._impl_.type_filter_var_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.large_velocity_ratio_ = from._impl_.large_velocity_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.too_large_velocity_ratio_ = from._impl_.too_large_velocity_ratio_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.mean_filter_window_ = from._impl_.mean_filter_window_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.direction_filter_ratio_ = from._impl_.direction_filter_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.displacement_theta_var_ = from._impl_.displacement_theta_var_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.velocity_theta_var_ = from._impl_.velocity_theta_var_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.stable_moving_speed_ = from._impl_.stable_moving_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetParam::CopyFrom(const TargetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.TargetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParam::IsInitialized() const {
  return true;
}

void TargetParam::InternalSwap(TargetParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetParam, _impl_.clapping_velocity_)
      + sizeof(TargetParam::_impl_.clapping_velocity_)
      - PROTOBUF_FIELD_OFFSET(TargetParam, _impl_.world_center_)>(
          reinterpret_cast<char*>(&_impl_.world_center_),
          reinterpret_cast<char*>(&other->_impl_.world_center_));
  swap(_impl_.velocity_threshold_, other->_impl_.velocity_threshold_);
  swap(_impl_.velocity_output_delay_, other->_impl_.velocity_output_delay_);
  swap(_impl_.world_lhw_history_, other->_impl_.world_lhw_history_);
  swap(_impl_.height_diff_ratio_, other->_impl_.height_diff_ratio_);
  swap(_impl_.world_state_history_, other->_impl_.world_state_history_);
  swap(_impl_.min_cached_world_state_history_size_, other->_impl_.min_cached_world_state_history_size_);
  swap(_impl_.min_cached_velocity_size_, other->_impl_.min_cached_velocity_size_);
  swap(_impl_.min_cached_position_size_, other->_impl_.min_cached_position_size_);
  swap(_impl_.calc_avg_position_window_size_, other->_impl_.calc_avg_position_window_size_);
  swap(_impl_.static_speed_threshold_, other->_impl_.static_speed_threshold_);
  swap(_impl_.static_speed_threshold_ped_, other->_impl_.static_speed_threshold_ped_);
  swap(_impl_.min_moving_avg_speed_, other->_impl_.min_moving_avg_speed_);
  swap(_impl_.min_moving_avg_speed_ped_, other->_impl_.min_moving_avg_speed_ped_);
  swap(_impl_.abnormal_acc_threshold_, other->_impl_.abnormal_acc_threshold_);
  swap(_impl_.abnormal_acc_threshold_ped_, other->_impl_.abnormal_acc_threshold_ped_);
  swap(_impl_.abnormal_velocity_heading_angle_threshold_, other->_impl_.abnormal_velocity_heading_angle_threshold_);
  swap(_impl_.world_mean_velocity_duration_, other->_impl_.world_mean_velocity_duration_);
  swap(_impl_.tracked_life_, other->_impl_.tracked_life_);
  swap(_impl_.type_filter_var_, other->_impl_.type_filter_var_);
  swap(_impl_.large_velocity_ratio_, other->_impl_.large_velocity_ratio_);
  swap(_impl_.too_large_velocity_ratio_, other->_impl_.too_large_velocity_ratio_);
  swap(_impl_.mean_filter_window_, other->_impl_.mean_filter_window_);
  swap(_impl_.direction_filter_ratio_, other->_impl_.direction_filter_ratio_);
  swap(_impl_.displacement_theta_var_, other->_impl_.displacement_theta_var_);
  swap(_impl_.velocity_theta_var_, other->_impl_.velocity_theta_var_);
  swap(_impl_.stable_moving_speed_, other->_impl_.stable_moving_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[1]);
}

// ===================================================================

class ReferenceParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceParam>()._impl_._has_bits_);
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_allow_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_area_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_down_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height_diff_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferenceParam::ReferenceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.omt.ReferenceParam)
}
ReferenceParam::ReferenceParam(const ReferenceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_diff_ratio_){}
    , decltype(_impl_.margin_){}
    , decltype(_impl_.min_allow_height_){}
    , decltype(_impl_.area_decay_){}
    , decltype(_impl_.down_sampling_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.height_diff_ratio_, &from._impl_.height_diff_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.down_sampling_) -
    reinterpret_cast<char*>(&_impl_.height_diff_ratio_)) + sizeof(_impl_.down_sampling_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.ReferenceParam)
}

inline void ReferenceParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_diff_ratio_){0.1f}
    , decltype(_impl_.margin_){2}
    , decltype(_impl_.min_allow_height_){50}
    , decltype(_impl_.area_decay_){0.99f}
    , decltype(_impl_.down_sampling_){40}
  };
}

ReferenceParam::~ReferenceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.ReferenceParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReferenceParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.ReferenceParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    _impl_.height_diff_ratio_ = 0.1f;
    _impl_.margin_ = 2;
    _impl_.min_allow_height_ = 50;
    _impl_.area_decay_ = 0.99f;
    _impl_.down_sampling_ = 40;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 margin = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_margin(&has_bits);
          _impl_.margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_allow_height = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min_allow_height(&has_bits);
          _impl_.min_allow_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float area_decay = 3 [default = 0.99];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_area_decay(&has_bits);
          _impl_.area_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 down_sampling = 4 [default = 40];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_down_sampling(&has_bits);
          _impl_.down_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float height_diff_ratio = 5 [default = 0.1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_height_diff_ratio(&has_bits);
          _impl_.height_diff_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.ReferenceParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 margin = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_margin(), target);
  }

  // optional int32 min_allow_height = 2 [default = 50];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_allow_height(), target);
  }

  // optional float area_decay = 3 [default = 0.99];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_area_decay(), target);
  }

  // optional int32 down_sampling = 4 [default = 40];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_down_sampling(), target);
  }

  // optional float height_diff_ratio = 5 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_height_diff_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.ReferenceParam)
  return target;
}

size_t ReferenceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.ReferenceParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float height_diff_ratio = 5 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 margin = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_margin());
    }

    // optional int32 min_allow_height = 2 [default = 50];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_allow_height());
    }

    // optional float area_decay = 3 [default = 0.99];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 down_sampling = 4 [default = 40];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_down_sampling());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceParam::GetClassData() const { return &_class_data_; }

void ReferenceParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReferenceParam *>(to)->MergeFrom(
      static_cast<const ReferenceParam &>(from));
}


void ReferenceParam::MergeFrom(const ReferenceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.ReferenceParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.height_diff_ratio_ = from._impl_.height_diff_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.margin_ = from._impl_.margin_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_allow_height_ = from._impl_.min_allow_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.area_decay_ = from._impl_.area_decay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.down_sampling_ = from._impl_.down_sampling_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceParam::CopyFrom(const ReferenceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.ReferenceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceParam::IsInitialized() const {
  return true;
}

void ReferenceParam::InternalSwap(ReferenceParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.height_diff_ratio_, other->_impl_.height_diff_ratio_);
  swap(_impl_.margin_, other->_impl_.margin_);
  swap(_impl_.min_allow_height_, other->_impl_.min_allow_height_);
  swap(_impl_.area_decay_, other->_impl_.area_decay_);
  swap(_impl_.down_sampling_, other->_impl_.down_sampling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[2]);
}

// ===================================================================

class WeightParam::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightParam>()._impl_._has_bits_);
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracklet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WeightParam::WeightParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.omt.WeightParam)
}
WeightParam::WeightParam(const WeightParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appearance_){}
    , decltype(_impl_.motion_){}
    , decltype(_impl_.shape_){}
    , decltype(_impl_.tracklet_){}
    , decltype(_impl_.overlap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.appearance_, &from._impl_.appearance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overlap_) -
    reinterpret_cast<char*>(&_impl_.appearance_)) + sizeof(_impl_.overlap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.WeightParam)
}

inline void WeightParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appearance_){0}
    , decltype(_impl_.motion_){0}
    , decltype(_impl_.shape_){0}
    , decltype(_impl_.tracklet_){0}
    , decltype(_impl_.overlap_){0}
  };
}

WeightParam::~WeightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.WeightParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeightParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WeightParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeightParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.WeightParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.appearance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.overlap_) -
        reinterpret_cast<char*>(&_impl_.appearance_)) + sizeof(_impl_.overlap_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeightParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float appearance = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_appearance(&has_bits);
          _impl_.appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float motion = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_motion(&has_bits);
          _impl_.motion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shape = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_shape(&has_bits);
          _impl_.shape_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tracklet = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_tracklet(&has_bits);
          _impl_.tracklet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float overlap = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_overlap(&has_bits);
          _impl_.overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WeightParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.WeightParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float appearance = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_appearance(), target);
  }

  // optional float motion = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_motion(), target);
  }

  // optional float shape = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_shape(), target);
  }

  // optional float tracklet = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_tracklet(), target);
  }

  // optional float overlap = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.WeightParam)
  return target;
}

size_t WeightParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.WeightParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float appearance = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float motion = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float shape = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float tracklet = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float overlap = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeightParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WeightParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeightParam::GetClassData() const { return &_class_data_; }

void WeightParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WeightParam *>(to)->MergeFrom(
      static_cast<const WeightParam &>(from));
}


void WeightParam::MergeFrom(const WeightParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.WeightParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.appearance_ = from._impl_.appearance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motion_ = from._impl_.motion_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.shape_ = from._impl_.shape_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tracklet_ = from._impl_.tracklet_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.overlap_ = from._impl_.overlap_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeightParam::CopyFrom(const WeightParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.WeightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightParam::IsInitialized() const {
  return true;
}

void WeightParam::InternalSwap(WeightParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeightParam, _impl_.overlap_)
      + sizeof(WeightParam::_impl_.overlap_)
      - PROTOBUF_FIELD_OFFSET(WeightParam, _impl_.appearance_)>(
          reinterpret_cast<char*>(&_impl_.appearance_),
          reinterpret_cast<char*>(&other->_impl_.appearance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[3]);
}

// ===================================================================

class OmtParam::_Internal {
 public:
  using HasBits = decltype(std::declval<OmtParam>()._impl_._has_bits_);
  static void set_has_img_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lost_age(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reserve_age(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::camera::omt::WeightParam& weight_same_camera(const OmtParam* msg);
  static void set_has_weight_same_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::omt::WeightParam& weight_diff_camera(const OmtParam* msg);
  static void set_has_weight_diff_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_correct_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::omt::TargetParam& target_param(const OmtParam* msg);
  static void set_has_target_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_init_height_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_target_combine_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fusion_target_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_image_displacement(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_abnormal_movement(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_same_ts_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::camera::omt::ReferenceParam& reference(const OmtParam* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type_change_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::omt::WeightParam&
OmtParam::_Internal::weight_same_camera(const OmtParam* msg) {
  return *msg->_impl_.weight_same_camera_;
}
const ::apollo::perception::camera::omt::WeightParam&
OmtParam::_Internal::weight_diff_camera(const OmtParam* msg) {
  return *msg->_impl_.weight_diff_camera_;
}
const ::apollo::perception::camera::omt::TargetParam&
OmtParam::_Internal::target_param(const OmtParam* msg) {
  return *msg->_impl_.target_param_;
}
const ::apollo::perception::camera::omt::ReferenceParam&
OmtParam::_Internal::reference(const OmtParam* msg) {
  return *msg->_impl_.reference_;
}
OmtParam::OmtParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.omt.OmtParam)
}
OmtParam::OmtParam(const OmtParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_change_cost_){}
    , decltype(_impl_.weight_same_camera_){nullptr}
    , decltype(_impl_.weight_diff_camera_){nullptr}
    , decltype(_impl_.target_param_){nullptr}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.correct_type_){}
    , decltype(_impl_.img_capability_){}
    , decltype(_impl_.lost_age_){}
    , decltype(_impl_.reserve_age_){}
    , decltype(_impl_.border_){}
    , decltype(_impl_.target_thresh_){}
    , decltype(_impl_.min_init_height_ratio_){}
    , decltype(_impl_.target_combine_iou_threshold_){}
    , decltype(_impl_.fusion_target_thresh_){}
    , decltype(_impl_.image_displacement_){}
    , decltype(_impl_.abnormal_movement_){}
    , decltype(_impl_.same_ts_eps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_change_cost_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_change_cost_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type_change_cost()) {
    _impl_.type_change_cost_.Set(from._internal_type_change_cost(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_weight_same_camera()) {
    _impl_.weight_same_camera_ = new ::apollo::perception::camera::omt::WeightParam(*from._impl_.weight_same_camera_);
  }
  if (from._internal_has_weight_diff_camera()) {
    _impl_.weight_diff_camera_ = new ::apollo::perception::camera::omt::WeightParam(*from._impl_.weight_diff_camera_);
  }
  if (from._internal_has_target_param()) {
    _impl_.target_param_ = new ::apollo::perception::camera::omt::TargetParam(*from._impl_.target_param_);
  }
  if (from._internal_has_reference()) {
    _impl_.reference_ = new ::apollo::perception::camera::omt::ReferenceParam(*from._impl_.reference_);
  }
  ::memcpy(&_impl_.correct_type_, &from._impl_.correct_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.same_ts_eps_) -
    reinterpret_cast<char*>(&_impl_.correct_type_)) + sizeof(_impl_.same_ts_eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.OmtParam)
}

inline void OmtParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_change_cost_){}
    , decltype(_impl_.weight_same_camera_){nullptr}
    , decltype(_impl_.weight_diff_camera_){nullptr}
    , decltype(_impl_.target_param_){nullptr}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.correct_type_){false}
    , decltype(_impl_.img_capability_){7}
    , decltype(_impl_.lost_age_){2}
    , decltype(_impl_.reserve_age_){3}
    , decltype(_impl_.border_){30}
    , decltype(_impl_.target_thresh_){0.65f}
    , decltype(_impl_.min_init_height_ratio_){17}
    , decltype(_impl_.target_combine_iou_threshold_){0.5f}
    , decltype(_impl_.fusion_target_thresh_){0.45f}
    , decltype(_impl_.image_displacement_){50}
    , decltype(_impl_.abnormal_movement_){0.3f}
    , decltype(_impl_.same_ts_eps_){0.05}
  };
  _impl_.type_change_cost_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_change_cost_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OmtParam::~OmtParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.OmtParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OmtParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_change_cost_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weight_same_camera_;
  if (this != internal_default_instance()) delete _impl_.weight_diff_camera_;
  if (this != internal_default_instance()) delete _impl_.target_param_;
  if (this != internal_default_instance()) delete _impl_.reference_;
}

void OmtParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OmtParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.OmtParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_change_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.weight_same_camera_ != nullptr);
      _impl_.weight_same_camera_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.weight_diff_camera_ != nullptr);
      _impl_.weight_diff_camera_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.target_param_ != nullptr);
      _impl_.target_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.reference_ != nullptr);
      _impl_.reference_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    _impl_.correct_type_ = false;
    _impl_.img_capability_ = 7;
    _impl_.lost_age_ = 2;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.reserve_age_ = 3;
    _impl_.border_ = 30;
    _impl_.target_thresh_ = 0.65f;
    _impl_.min_init_height_ratio_ = 17;
    _impl_.target_combine_iou_threshold_ = 0.5f;
    _impl_.fusion_target_thresh_ = 0.45f;
    _impl_.image_displacement_ = 50;
    _impl_.abnormal_movement_ = 0.3f;
  }
  _impl_.same_ts_eps_ = 0.05;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OmtParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 img_capability = 1 [default = 7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_img_capability(&has_bits);
          _impl_.img_capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lost_age = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lost_age(&has_bits);
          _impl_.lost_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reserve_age = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reserve_age(&has_bits);
          _impl_.reserve_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_same_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_diff_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float border = 9 [default = 30];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_border(&has_bits);
          _impl_.border_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_thresh = 10 [default = 0.65];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_target_thresh(&has_bits);
          _impl_.target_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool correct_type = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_correct_type(&has_bits);
          _impl_.correct_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_init_height_ratio = 13 [default = 17];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_min_init_height_ratio(&has_bits);
          _impl_.min_init_height_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_combine_iou_threshold = 14 [default = 0.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_target_combine_iou_threshold(&has_bits);
          _impl_.target_combine_iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fusion_target_thresh = 15 [default = 0.45];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_fusion_target_thresh(&has_bits);
          _impl_.fusion_target_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float image_displacement = 16 [default = 50];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_image_displacement(&has_bits);
          _impl_.image_displacement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float abnormal_movement = 17 [default = 0.3];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_abnormal_movement(&has_bits);
          _impl_.abnormal_movement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double same_ts_eps = 18 [default = 0.05];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_same_ts_eps(&has_bits);
          _impl_.same_ts_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type_change_cost = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_type_change_cost();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.omt.OmtParam.type_change_cost");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OmtParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.OmtParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 img_capability = 1 [default = 7];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_img_capability(), target);
  }

  // optional int32 lost_age = 2 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lost_age(), target);
  }

  // optional int32 reserve_age = 3 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_reserve_age(), target);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::weight_same_camera(this),
        _Internal::weight_same_camera(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::weight_diff_camera(this),
        _Internal::weight_diff_camera(this).GetCachedSize(), target, stream);
  }

  // optional float border = 9 [default = 30];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_border(), target);
  }

  // optional float target_thresh = 10 [default = 0.65];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_target_thresh(), target);
  }

  // optional bool correct_type = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_correct_type(), target);
  }

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::target_param(this),
        _Internal::target_param(this).GetCachedSize(), target, stream);
  }

  // optional float min_init_height_ratio = 13 [default = 17];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_min_init_height_ratio(), target);
  }

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_target_combine_iou_threshold(), target);
  }

  // optional float fusion_target_thresh = 15 [default = 0.45];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_fusion_target_thresh(), target);
  }

  // optional float image_displacement = 16 [default = 50];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_image_displacement(), target);
  }

  // optional float abnormal_movement = 17 [default = 0.3];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_abnormal_movement(), target);
  }

  // optional double same_ts_eps = 18 [default = 0.05];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_same_ts_eps(), target);
  }

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // optional string type_change_cost = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type_change_cost().data(), static_cast<int>(this->_internal_type_change_cost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.omt.OmtParam.type_change_cost");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_type_change_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.OmtParam)
  return target;
}

size_t OmtParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.OmtParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type_change_cost = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_change_cost());
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_same_camera_);
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weight_diff_camera_);
    }

    // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_param_);
    }

    // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_);
    }

    // optional bool correct_type = 11 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 img_capability = 1 [default = 7];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_img_capability());
    }

    // optional int32 lost_age = 2 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lost_age());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 reserve_age = 3 [default = 3];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserve_age());
    }

    // optional float border = 9 [default = 30];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float target_thresh = 10 [default = 0.65];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float min_init_height_ratio = 13 [default = 17];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float target_combine_iou_threshold = 14 [default = 0.5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float fusion_target_thresh = 15 [default = 0.45];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float image_displacement = 16 [default = 50];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_movement = 17 [default = 0.3];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  // optional double same_ts_eps = 18 [default = 0.05];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OmtParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OmtParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OmtParam::GetClassData() const { return &_class_data_; }

void OmtParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OmtParam *>(to)->MergeFrom(
      static_cast<const OmtParam &>(from));
}


void OmtParam::MergeFrom(const OmtParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.OmtParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type_change_cost(from._internal_type_change_cost());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weight_same_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from._internal_weight_same_camera());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_weight_diff_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from._internal_weight_diff_camera());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_target_param()->::apollo::perception::camera::omt::TargetParam::MergeFrom(from._internal_target_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reference()->::apollo::perception::camera::omt::ReferenceParam::MergeFrom(from._internal_reference());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.correct_type_ = from._impl_.correct_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.img_capability_ = from._impl_.img_capability_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.lost_age_ = from._impl_.lost_age_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.reserve_age_ = from._impl_.reserve_age_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.border_ = from._impl_.border_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.target_thresh_ = from._impl_.target_thresh_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.min_init_height_ratio_ = from._impl_.min_init_height_ratio_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.target_combine_iou_threshold_ = from._impl_.target_combine_iou_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.fusion_target_thresh_ = from._impl_.fusion_target_thresh_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.image_displacement_ = from._impl_.image_displacement_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.abnormal_movement_ = from._impl_.abnormal_movement_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_same_ts_eps(from._internal_same_ts_eps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OmtParam::CopyFrom(const OmtParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.OmtParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmtParam::IsInitialized() const {
  return true;
}

void OmtParam::InternalSwap(OmtParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_change_cost_, lhs_arena,
      &other->_impl_.type_change_cost_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OmtParam, _impl_.correct_type_)
      + sizeof(OmtParam::_impl_.correct_type_)
      - PROTOBUF_FIELD_OFFSET(OmtParam, _impl_.weight_same_camera_)>(
          reinterpret_cast<char*>(&_impl_.weight_same_camera_),
          reinterpret_cast<char*>(&other->_impl_.weight_same_camera_));
  swap(_impl_.img_capability_, other->_impl_.img_capability_);
  swap(_impl_.lost_age_, other->_impl_.lost_age_);
  swap(_impl_.reserve_age_, other->_impl_.reserve_age_);
  swap(_impl_.border_, other->_impl_.border_);
  swap(_impl_.target_thresh_, other->_impl_.target_thresh_);
  swap(_impl_.min_init_height_ratio_, other->_impl_.min_init_height_ratio_);
  swap(_impl_.target_combine_iou_threshold_, other->_impl_.target_combine_iou_threshold_);
  swap(_impl_.fusion_target_thresh_, other->_impl_.fusion_target_thresh_);
  swap(_impl_.image_displacement_, other->_impl_.image_displacement_);
  swap(_impl_.abnormal_movement_, other->_impl_.abnormal_movement_);
  swap(_impl_.same_ts_eps_, other->_impl_.same_ts_eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OmtParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fproto_2fomt_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::KalmanParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::KalmanParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::omt::KalmanParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::TargetParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::TargetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::omt::TargetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::ReferenceParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::ReferenceParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::omt::ReferenceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::WeightParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::WeightParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::omt::WeightParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::OmtParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::OmtParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::omt::OmtParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
