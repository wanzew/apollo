// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/traffic_light/detector/recognition/proto/recognition.proto

#include "modules/perception/camera/lib/traffic_light/detector/recognition/proto/recognition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace recognition {
PROTOBUF_CONSTEXPR ClassifyParam::ClassifyParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.classify_threshold_)*/0
  , /*decltype(_impl_.classify_resize_width_)*/0
  , /*decltype(_impl_.classify_resize_height_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.mean_b_)*/95
  , /*decltype(_impl_.mean_g_)*/99
  , /*decltype(_impl_.mean_r_)*/96
  , /*decltype(_impl_.is_bgr_)*/true} {}
struct ClassifyParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifyParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifyParamDefaultTypeInternal() {}
  union {
    ClassifyParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifyParamDefaultTypeInternal _ClassifyParam_default_instance_;
PROTOBUF_CONSTEXPR RecognizeBoxParam::RecognizeBoxParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vertical_model_)*/nullptr
  , /*decltype(_impl_.quadrate_model_)*/nullptr
  , /*decltype(_impl_.horizontal_model_)*/nullptr} {}
struct RecognizeBoxParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecognizeBoxParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecognizeBoxParamDefaultTypeInternal() {}
  union {
    RecognizeBoxParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecognizeBoxParamDefaultTypeInternal _RecognizeBoxParam_default_instance_;
}  // namespace recognition
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.input_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.output_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.weight_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.proto_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.classify_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.classify_resize_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.classify_resize_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.mean_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.mean_g_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.mean_r_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::ClassifyParam, _impl_.is_bgr_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam, _impl_.vertical_model_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam, _impl_.quadrate_model_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam, _impl_.horizontal_model_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::apollo::perception::camera::traffic_light::recognition::ClassifyParam)},
  { 34, 43, -1, sizeof(::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::traffic_light::recognition::_ClassifyParam_default_instance_._instance,
  &::apollo::perception::camera::traffic_light::recognition::_RecognizeBoxParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nXmodules/perception/camera/lib/traffic_"
  "light/detector/recognition/proto/recogni"
  "tion.proto\0222apollo.perception.camera.tra"
  "ffic_light.recognition\"\317\002\n\rClassifyParam"
  "\022\022\n\nmodel_name\030\001 \001(\t\022\034\n\nmodel_type\030\002 \001(\t"
  ":\010CaffeNet\022\022\n\ninput_blob\030\003 \001(\t\022\023\n\013output"
  "_blob\030\004 \001(\t\022\023\n\013weight_file\030\005 \001(\t\022\022\n\nprot"
  "o_file\030\006 \001(\t\022\032\n\022classify_threshold\030\007 \001(\002"
  "\022\035\n\025classify_resize_width\030\010 \001(\005\022\036\n\026class"
  "ify_resize_height\030\t \001(\005\022\r\n\005scale\030\n \001(\002\022\022"
  "\n\006mean_b\030\014 \001(\002:\00295\022\022\n\006mean_g\030\r \001(\002:\00299\022\022"
  "\n\006mean_r\030\016 \001(\002:\00296\022\024\n\006is_bgr\030\017 \001(\010:\004true"
  "\"\246\002\n\021RecognizeBoxParam\022Y\n\016vertical_model"
  "\030\001 \001(\0132A.apollo.perception.camera.traffi"
  "c_light.recognition.ClassifyParam\022Y\n\016qua"
  "drate_model\030\002 \001(\0132A.apollo.perception.ca"
  "mera.traffic_light.recognition.ClassifyP"
  "aram\022[\n\020horizontal_model\030\003 \001(\0132A.apollo."
  "perception.camera.traffic_light.recognit"
  "ion.ClassifyParam"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto = {
    false, false, 777, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto,
    "modules/perception/camera/lib/traffic_light/detector/recognition/proto/recognition.proto",
    &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto(&descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace recognition {

// ===================================================================

class ClassifyParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifyParam>()._impl_._has_bits_);
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proto_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_classify_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_classify_resize_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_classify_resize_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mean_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mean_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mean_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_bgr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ClassifyParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_{{{"CaffeNet", 8}}, {nullptr}};
ClassifyParam::ClassifyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
}
ClassifyParam::ClassifyParam(const ClassifyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.input_blob_){}
    , decltype(_impl_.output_blob_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.classify_threshold_){}
    , decltype(_impl_.classify_resize_width_){}
    , decltype(_impl_.classify_resize_height_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.mean_b_){}
    , decltype(_impl_.mean_g_){}
    , decltype(_impl_.mean_r_){}
    , decltype(_impl_.is_bgr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_name()) {
    _impl_.model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  _impl_.model_type_.InitDefault();
  if (from._internal_has_model_type()) {
    _impl_.model_type_.Set(from._internal_model_type(), 
      GetArenaForAllocation());
  }
  _impl_.input_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_blob()) {
    _impl_.input_blob_.Set(from._internal_input_blob(), 
      GetArenaForAllocation());
  }
  _impl_.output_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_blob()) {
    _impl_.output_blob_.Set(from._internal_output_blob(), 
      GetArenaForAllocation());
  }
  _impl_.weight_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_weight_file()) {
    _impl_.weight_file_.Set(from._internal_weight_file(), 
      GetArenaForAllocation());
  }
  _impl_.proto_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_file()) {
    _impl_.proto_file_.Set(from._internal_proto_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.classify_threshold_, &from._impl_.classify_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_bgr_) -
    reinterpret_cast<char*>(&_impl_.classify_threshold_)) + sizeof(_impl_.is_bgr_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
}

inline void ClassifyParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.input_blob_){}
    , decltype(_impl_.output_blob_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.classify_threshold_){0}
    , decltype(_impl_.classify_resize_width_){0}
    , decltype(_impl_.classify_resize_height_){0}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.mean_b_){95}
    , decltype(_impl_.mean_g_){99}
    , decltype(_impl_.mean_r_){96}
    , decltype(_impl_.is_bgr_){true}
  };
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_.InitDefault();
  _impl_.input_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weight_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassifyParam::~ClassifyParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassifyParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_name_.Destroy();
  _impl_.model_type_.Destroy();
  _impl_.input_blob_.Destroy();
  _impl_.output_blob_.Destroy();
  _impl_.weight_file_.Destroy();
  _impl_.proto_file_.Destroy();
}

void ClassifyParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.model_type_.ClearToDefault(::apollo::perception::camera::traffic_light::recognition::ClassifyParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.input_blob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_blob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.weight_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.proto_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.classify_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.classify_resize_width_) -
        reinterpret_cast<char*>(&_impl_.classify_threshold_)) + sizeof(_impl_.classify_resize_width_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.classify_resize_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scale_) -
        reinterpret_cast<char*>(&_impl_.classify_resize_height_)) + sizeof(_impl_.scale_));
    _impl_.mean_b_ = 95;
    _impl_.mean_g_ = 99;
    _impl_.mean_r_ = 96;
    _impl_.is_bgr_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassifyParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string model_type = 2 [default = "CaffeNet"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string output_blob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string weight_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_weight_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string proto_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_proto_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float classify_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_classify_threshold(&has_bits);
          _impl_.classify_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 classify_resize_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_classify_resize_width(&has_bits);
          _impl_.classify_resize_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 classify_resize_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_classify_resize_height(&has_bits);
          _impl_.classify_resize_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_b = 12 [default = 95];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_mean_b(&has_bits);
          _impl_.mean_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_g = 13 [default = 99];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_mean_g(&has_bits);
          _impl_.mean_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_r = 14 [default = 96];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_mean_r(&has_bits);
          _impl_.mean_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bgr = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_bgr(&has_bits);
          _impl_.is_bgr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassifyParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string model_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // optional string model_type = 2 [default = "CaffeNet"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // optional string input_blob = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_blob().data(), static_cast<int>(this->_internal_input_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_blob(), target);
  }

  // optional string output_blob = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_blob().data(), static_cast<int>(this->_internal_output_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_blob(), target);
  }

  // optional string weight_file = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_weight_file().data(), static_cast<int>(this->_internal_weight_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_weight_file(), target);
  }

  // optional string proto_file = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file().data(), static_cast<int>(this->_internal_proto_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_proto_file(), target);
  }

  // optional float classify_threshold = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_classify_threshold(), target);
  }

  // optional int32 classify_resize_width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_classify_resize_width(), target);
  }

  // optional int32 classify_resize_height = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_classify_resize_height(), target);
  }

  // optional float scale = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_scale(), target);
  }

  // optional float mean_b = 12 [default = 95];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_mean_b(), target);
  }

  // optional float mean_g = 13 [default = 99];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_mean_g(), target);
  }

  // optional float mean_r = 14 [default = 96];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_mean_r(), target);
  }

  // optional bool is_bgr = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_bgr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  return target;
}

size_t ClassifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional string model_type = 2 [default = "CaffeNet"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_type());
    }

    // optional string input_blob = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_blob());
    }

    // optional string output_blob = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_blob());
    }

    // optional string weight_file = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weight_file());
    }

    // optional string proto_file = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file());
    }

    // optional float classify_threshold = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 classify_resize_width = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_classify_resize_width());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 classify_resize_height = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_classify_resize_height());
    }

    // optional float scale = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float mean_b = 12 [default = 95];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 13 [default = 99];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float mean_r = 14 [default = 96];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional bool is_bgr = 15 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassifyParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassifyParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassifyParam::GetClassData() const { return &_class_data_; }

void ClassifyParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClassifyParam *>(to)->MergeFrom(
      static_cast<const ClassifyParam &>(from));
}


void ClassifyParam::MergeFrom(const ClassifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_model_type(from._internal_model_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_input_blob(from._internal_input_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_output_blob(from._internal_output_blob());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_weight_file(from._internal_weight_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_proto_file(from._internal_proto_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.classify_threshold_ = from._impl_.classify_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.classify_resize_width_ = from._impl_.classify_resize_width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.classify_resize_height_ = from._impl_.classify_resize_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.mean_b_ = from._impl_.mean_b_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.mean_g_ = from._impl_.mean_g_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.mean_r_ = from._impl_.mean_r_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.is_bgr_ = from._impl_.is_bgr_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassifyParam::CopyFrom(const ClassifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyParam::IsInitialized() const {
  return true;
}

void ClassifyParam::InternalSwap(ClassifyParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_, lhs_arena,
      &other->_impl_.model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_blob_, lhs_arena,
      &other->_impl_.input_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_blob_, lhs_arena,
      &other->_impl_.output_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weight_file_, lhs_arena,
      &other->_impl_.weight_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_file_, lhs_arena,
      &other->_impl_.proto_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassifyParam, _impl_.scale_)
      + sizeof(ClassifyParam::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(ClassifyParam, _impl_.classify_threshold_)>(
          reinterpret_cast<char*>(&_impl_.classify_threshold_),
          reinterpret_cast<char*>(&other->_impl_.classify_threshold_));
  swap(_impl_.mean_b_, other->_impl_.mean_b_);
  swap(_impl_.mean_g_, other->_impl_.mean_g_);
  swap(_impl_.mean_r_, other->_impl_.mean_r_);
  swap(_impl_.is_bgr_, other->_impl_.is_bgr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassifyParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto[0]);
}

// ===================================================================

class RecognizeBoxParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RecognizeBoxParam>()._impl_._has_bits_);
  static const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& vertical_model(const RecognizeBoxParam* msg);
  static void set_has_vertical_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& quadrate_model(const RecognizeBoxParam* msg);
  static void set_has_quadrate_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& horizontal_model(const RecognizeBoxParam* msg);
  static void set_has_horizontal_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam&
RecognizeBoxParam::_Internal::vertical_model(const RecognizeBoxParam* msg) {
  return *msg->_impl_.vertical_model_;
}
const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam&
RecognizeBoxParam::_Internal::quadrate_model(const RecognizeBoxParam* msg) {
  return *msg->_impl_.quadrate_model_;
}
const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam&
RecognizeBoxParam::_Internal::horizontal_model(const RecognizeBoxParam* msg) {
  return *msg->_impl_.horizontal_model_;
}
RecognizeBoxParam::RecognizeBoxParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
}
RecognizeBoxParam::RecognizeBoxParam(const RecognizeBoxParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vertical_model_){nullptr}
    , decltype(_impl_.quadrate_model_){nullptr}
    , decltype(_impl_.horizontal_model_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vertical_model()) {
    _impl_.vertical_model_ = new ::apollo::perception::camera::traffic_light::recognition::ClassifyParam(*from._impl_.vertical_model_);
  }
  if (from._internal_has_quadrate_model()) {
    _impl_.quadrate_model_ = new ::apollo::perception::camera::traffic_light::recognition::ClassifyParam(*from._impl_.quadrate_model_);
  }
  if (from._internal_has_horizontal_model()) {
    _impl_.horizontal_model_ = new ::apollo::perception::camera::traffic_light::recognition::ClassifyParam(*from._impl_.horizontal_model_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
}

inline void RecognizeBoxParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vertical_model_){nullptr}
    , decltype(_impl_.quadrate_model_){nullptr}
    , decltype(_impl_.horizontal_model_){nullptr}
  };
}

RecognizeBoxParam::~RecognizeBoxParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecognizeBoxParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vertical_model_;
  if (this != internal_default_instance()) delete _impl_.quadrate_model_;
  if (this != internal_default_instance()) delete _impl_.horizontal_model_;
}

void RecognizeBoxParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecognizeBoxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.vertical_model_ != nullptr);
      _impl_.vertical_model_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.quadrate_model_ != nullptr);
      _impl_.quadrate_model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.horizontal_model_ != nullptr);
      _impl_.horizontal_model_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeBoxParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam vertical_model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertical_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam quadrate_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadrate_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam horizontal_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_horizontal_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeBoxParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam vertical_model = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vertical_model(this),
        _Internal::vertical_model(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam quadrate_model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quadrate_model(this),
        _Internal::quadrate_model(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam horizontal_model = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::horizontal_model(this),
        _Internal::horizontal_model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  return target;
}

size_t RecognizeBoxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam vertical_model = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vertical_model_);
    }

    // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam quadrate_model = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quadrate_model_);
    }

    // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam horizontal_model = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horizontal_model_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeBoxParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognizeBoxParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeBoxParam::GetClassData() const { return &_class_data_; }

void RecognizeBoxParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognizeBoxParam *>(to)->MergeFrom(
      static_cast<const RecognizeBoxParam &>(from));
}


void RecognizeBoxParam::MergeFrom(const RecognizeBoxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vertical_model()->::apollo::perception::camera::traffic_light::recognition::ClassifyParam::MergeFrom(from._internal_vertical_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quadrate_model()->::apollo::perception::camera::traffic_light::recognition::ClassifyParam::MergeFrom(from._internal_quadrate_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_horizontal_model()->::apollo::perception::camera::traffic_light::recognition::ClassifyParam::MergeFrom(from._internal_horizontal_model());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeBoxParam::CopyFrom(const RecognizeBoxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeBoxParam::IsInitialized() const {
  return true;
}

void RecognizeBoxParam::InternalSwap(RecognizeBoxParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeBoxParam, _impl_.horizontal_model_)
      + sizeof(RecognizeBoxParam::_impl_.horizontal_model_)
      - PROTOBUF_FIELD_OFFSET(RecognizeBoxParam, _impl_.vertical_model_)>(
          reinterpret_cast<char*>(&_impl_.vertical_model_),
          reinterpret_cast<char*>(&other->_impl_.vertical_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeBoxParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2fproto_2frecognition_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace recognition
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::traffic_light::recognition::ClassifyParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::traffic_light::recognition::ClassifyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::traffic_light::recognition::ClassifyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
