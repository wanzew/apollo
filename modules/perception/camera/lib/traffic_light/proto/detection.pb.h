// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/traffic_light/proto/detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace detection {
class DetectionParam;
struct DetectionParamDefaultTypeInternal;
extern DetectionParamDefaultTypeInternal _DetectionParam_default_instance_;
}  // namespace detection
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::traffic_light::detection::DetectionParam* Arena::CreateMaybeMessage<::apollo::perception::camera::traffic_light::detection::DetectionParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace detection {

// ===================================================================

class DetectionParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.traffic_light.detection.DetectionParam) */ {
 public:
  inline DetectionParam() : DetectionParam(nullptr) {}
  ~DetectionParam() override;
  explicit PROTOBUF_CONSTEXPR DetectionParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionParam(const DetectionParam& from);
  DetectionParam(DetectionParam&& from) noexcept
    : DetectionParam() {
    *this = ::std::move(from);
  }

  inline DetectionParam& operator=(const DetectionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionParam& operator=(DetectionParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionParam* internal_default_instance() {
    return reinterpret_cast<const DetectionParam*>(
               &_DetectionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectionParam& a, DetectionParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectionParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.traffic_light.detection.DetectionParam";
  }
  protected:
  explicit DetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputBlobNameFieldNumber = 8,
    kImParamBlobNameFieldNumber = 9,
    kOutputBlobNameFieldNumber = 10,
    kModelNameFieldNumber = 11,
    kModelTypeFieldNumber = 12,
    kProtoFileFieldNumber = 13,
    kWeightFileFieldNumber = 14,
    kCropMethodFieldNumber = 2,
    kMaxBatchSizeFieldNumber = 15,
    kMinCropSizeFieldNumber = 1,
    kMeanBFieldNumber = 3,
    kMeanGFieldNumber = 4,
    kMeanRFieldNumber = 5,
    kIsBgrFieldNumber = 6,
    kCropScaleFieldNumber = 7,
  };
  // optional string input_blob_name = 8;
  bool has_input_blob_name() const;
  private:
  bool _internal_has_input_blob_name() const;
  public:
  void clear_input_blob_name();
  const std::string& input_blob_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_blob_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_blob_name();
  PROTOBUF_NODISCARD std::string* release_input_blob_name();
  void set_allocated_input_blob_name(std::string* input_blob_name);
  private:
  const std::string& _internal_input_blob_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_blob_name(const std::string& value);
  std::string* _internal_mutable_input_blob_name();
  public:

  // optional string im_param_blob_name = 9;
  bool has_im_param_blob_name() const;
  private:
  bool _internal_has_im_param_blob_name() const;
  public:
  void clear_im_param_blob_name();
  const std::string& im_param_blob_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_im_param_blob_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_im_param_blob_name();
  PROTOBUF_NODISCARD std::string* release_im_param_blob_name();
  void set_allocated_im_param_blob_name(std::string* im_param_blob_name);
  private:
  const std::string& _internal_im_param_blob_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_im_param_blob_name(const std::string& value);
  std::string* _internal_mutable_im_param_blob_name();
  public:

  // optional string output_blob_name = 10;
  bool has_output_blob_name() const;
  private:
  bool _internal_has_output_blob_name() const;
  public:
  void clear_output_blob_name();
  const std::string& output_blob_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_blob_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_blob_name();
  PROTOBUF_NODISCARD std::string* release_output_blob_name();
  void set_allocated_output_blob_name(std::string* output_blob_name);
  private:
  const std::string& _internal_output_blob_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_blob_name(const std::string& value);
  std::string* _internal_mutable_output_blob_name();
  public:

  // optional string model_name = 11 [default = "RTNet"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string model_type = 12 [default = "RTNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_type();
  PROTOBUF_NODISCARD std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional string proto_file = 13 [default = "caffe.pt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_file();
  PROTOBUF_NODISCARD std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 14 [default = "caffe.model"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weight_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weight_file();
  PROTOBUF_NODISCARD std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional int32 crop_method = 2 [default = 0];
  bool has_crop_method() const;
  private:
  bool _internal_has_crop_method() const;
  public:
  void clear_crop_method();
  int32_t crop_method() const;
  void set_crop_method(int32_t value);
  private:
  int32_t _internal_crop_method() const;
  void _internal_set_crop_method(int32_t value);
  public:

  // optional int32 max_batch_size = 15 [default = 1];
  bool has_max_batch_size() const;
  private:
  bool _internal_has_max_batch_size() const;
  public:
  void clear_max_batch_size();
  int32_t max_batch_size() const;
  void set_max_batch_size(int32_t value);
  private:
  int32_t _internal_max_batch_size() const;
  void _internal_set_max_batch_size(int32_t value);
  public:

  // optional int32 min_crop_size = 1 [default = 270];
  bool has_min_crop_size() const;
  private:
  bool _internal_has_min_crop_size() const;
  public:
  void clear_min_crop_size();
  int32_t min_crop_size() const;
  void set_min_crop_size(int32_t value);
  private:
  int32_t _internal_min_crop_size() const;
  void _internal_set_min_crop_size(int32_t value);
  public:

  // optional float mean_b = 3 [default = 95];
  bool has_mean_b() const;
  private:
  bool _internal_has_mean_b() const;
  public:
  void clear_mean_b();
  float mean_b() const;
  void set_mean_b(float value);
  private:
  float _internal_mean_b() const;
  void _internal_set_mean_b(float value);
  public:

  // optional float mean_g = 4 [default = 99];
  bool has_mean_g() const;
  private:
  bool _internal_has_mean_g() const;
  public:
  void clear_mean_g();
  float mean_g() const;
  void set_mean_g(float value);
  private:
  float _internal_mean_g() const;
  void _internal_set_mean_g(float value);
  public:

  // optional float mean_r = 5 [default = 96];
  bool has_mean_r() const;
  private:
  bool _internal_has_mean_r() const;
  public:
  void clear_mean_r();
  float mean_r() const;
  void set_mean_r(float value);
  private:
  float _internal_mean_r() const;
  void _internal_set_mean_r(float value);
  public:

  // optional bool is_bgr = 6 [default = true];
  bool has_is_bgr() const;
  private:
  bool _internal_has_is_bgr() const;
  public:
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // optional float crop_scale = 7 [default = 2.5];
  bool has_crop_scale() const;
  private:
  bool _internal_has_crop_scale() const;
  public:
  void clear_crop_scale();
  float crop_scale() const;
  void set_crop_scale(float value);
  private:
  float _internal_crop_scale() const;
  void _internal_set_crop_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.traffic_light.detection.DetectionParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr im_param_blob_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_blob_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_proto_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_weight_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
    int32_t crop_method_;
    int32_t max_batch_size_;
    int32_t min_crop_size_;
    float mean_b_;
    float mean_g_;
    float mean_r_;
    bool is_bgr_;
    float crop_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectionParam

// optional int32 min_crop_size = 1 [default = 270];
inline bool DetectionParam::_internal_has_min_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DetectionParam::has_min_crop_size() const {
  return _internal_has_min_crop_size();
}
inline void DetectionParam::clear_min_crop_size() {
  _impl_.min_crop_size_ = 270;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t DetectionParam::_internal_min_crop_size() const {
  return _impl_.min_crop_size_;
}
inline int32_t DetectionParam::min_crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.min_crop_size)
  return _internal_min_crop_size();
}
inline void DetectionParam::_internal_set_min_crop_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.min_crop_size_ = value;
}
inline void DetectionParam::set_min_crop_size(int32_t value) {
  _internal_set_min_crop_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.min_crop_size)
}

// optional int32 crop_method = 2 [default = 0];
inline bool DetectionParam::_internal_has_crop_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DetectionParam::has_crop_method() const {
  return _internal_has_crop_method();
}
inline void DetectionParam::clear_crop_method() {
  _impl_.crop_method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DetectionParam::_internal_crop_method() const {
  return _impl_.crop_method_;
}
inline int32_t DetectionParam::crop_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.crop_method)
  return _internal_crop_method();
}
inline void DetectionParam::_internal_set_crop_method(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.crop_method_ = value;
}
inline void DetectionParam::set_crop_method(int32_t value) {
  _internal_set_crop_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.crop_method)
}

// optional float mean_b = 3 [default = 95];
inline bool DetectionParam::_internal_has_mean_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DetectionParam::has_mean_b() const {
  return _internal_has_mean_b();
}
inline void DetectionParam::clear_mean_b() {
  _impl_.mean_b_ = 95;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float DetectionParam::_internal_mean_b() const {
  return _impl_.mean_b_;
}
inline float DetectionParam::mean_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_b)
  return _internal_mean_b();
}
inline void DetectionParam::_internal_set_mean_b(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.mean_b_ = value;
}
inline void DetectionParam::set_mean_b(float value) {
  _internal_set_mean_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_b)
}

// optional float mean_g = 4 [default = 99];
inline bool DetectionParam::_internal_has_mean_g() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DetectionParam::has_mean_g() const {
  return _internal_has_mean_g();
}
inline void DetectionParam::clear_mean_g() {
  _impl_.mean_g_ = 99;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float DetectionParam::_internal_mean_g() const {
  return _impl_.mean_g_;
}
inline float DetectionParam::mean_g() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_g)
  return _internal_mean_g();
}
inline void DetectionParam::_internal_set_mean_g(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mean_g_ = value;
}
inline void DetectionParam::set_mean_g(float value) {
  _internal_set_mean_g(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_g)
}

// optional float mean_r = 5 [default = 96];
inline bool DetectionParam::_internal_has_mean_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DetectionParam::has_mean_r() const {
  return _internal_has_mean_r();
}
inline void DetectionParam::clear_mean_r() {
  _impl_.mean_r_ = 96;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float DetectionParam::_internal_mean_r() const {
  return _impl_.mean_r_;
}
inline float DetectionParam::mean_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_r)
  return _internal_mean_r();
}
inline void DetectionParam::_internal_set_mean_r(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.mean_r_ = value;
}
inline void DetectionParam::set_mean_r(float value) {
  _internal_set_mean_r(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.mean_r)
}

// optional bool is_bgr = 6 [default = true];
inline bool DetectionParam::_internal_has_is_bgr() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DetectionParam::has_is_bgr() const {
  return _internal_has_is_bgr();
}
inline void DetectionParam::clear_is_bgr() {
  _impl_.is_bgr_ = true;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool DetectionParam::_internal_is_bgr() const {
  return _impl_.is_bgr_;
}
inline bool DetectionParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.is_bgr)
  return _internal_is_bgr();
}
inline void DetectionParam::_internal_set_is_bgr(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.is_bgr_ = value;
}
inline void DetectionParam::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.is_bgr)
}

// optional float crop_scale = 7 [default = 2.5];
inline bool DetectionParam::_internal_has_crop_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DetectionParam::has_crop_scale() const {
  return _internal_has_crop_scale();
}
inline void DetectionParam::clear_crop_scale() {
  _impl_.crop_scale_ = 2.5f;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float DetectionParam::_internal_crop_scale() const {
  return _impl_.crop_scale_;
}
inline float DetectionParam::crop_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.crop_scale)
  return _internal_crop_scale();
}
inline void DetectionParam::_internal_set_crop_scale(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.crop_scale_ = value;
}
inline void DetectionParam::set_crop_scale(float value) {
  _internal_set_crop_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.crop_scale)
}

// optional string input_blob_name = 8;
inline bool DetectionParam::_internal_has_input_blob_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectionParam::has_input_blob_name() const {
  return _internal_has_input_blob_name();
}
inline void DetectionParam::clear_input_blob_name() {
  _impl_.input_blob_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectionParam::input_blob_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name)
  return _internal_input_blob_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_input_blob_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.input_blob_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name)
}
inline std::string* DetectionParam::mutable_input_blob_name() {
  std::string* _s = _internal_mutable_input_blob_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name)
  return _s;
}
inline const std::string& DetectionParam::_internal_input_blob_name() const {
  return _impl_.input_blob_name_.Get();
}
inline void DetectionParam::_internal_set_input_blob_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_blob_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_input_blob_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.input_blob_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DetectionParam::release_input_blob_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name)
  if (!_internal_has_input_blob_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.input_blob_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_blob_name_.IsDefault()) {
    _impl_.input_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetectionParam::set_allocated_input_blob_name(std::string* input_blob_name) {
  if (input_blob_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_blob_name_.SetAllocated(input_blob_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_blob_name_.IsDefault()) {
    _impl_.input_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name)
}

// optional string im_param_blob_name = 9;
inline bool DetectionParam::_internal_has_im_param_blob_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetectionParam::has_im_param_blob_name() const {
  return _internal_has_im_param_blob_name();
}
inline void DetectionParam::clear_im_param_blob_name() {
  _impl_.im_param_blob_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DetectionParam::im_param_blob_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name)
  return _internal_im_param_blob_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_im_param_blob_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.im_param_blob_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name)
}
inline std::string* DetectionParam::mutable_im_param_blob_name() {
  std::string* _s = _internal_mutable_im_param_blob_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name)
  return _s;
}
inline const std::string& DetectionParam::_internal_im_param_blob_name() const {
  return _impl_.im_param_blob_name_.Get();
}
inline void DetectionParam::_internal_set_im_param_blob_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.im_param_blob_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_im_param_blob_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.im_param_blob_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DetectionParam::release_im_param_blob_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name)
  if (!_internal_has_im_param_blob_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.im_param_blob_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.im_param_blob_name_.IsDefault()) {
    _impl_.im_param_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetectionParam::set_allocated_im_param_blob_name(std::string* im_param_blob_name) {
  if (im_param_blob_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.im_param_blob_name_.SetAllocated(im_param_blob_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.im_param_blob_name_.IsDefault()) {
    _impl_.im_param_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name)
}

// optional string output_blob_name = 10;
inline bool DetectionParam::_internal_has_output_blob_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetectionParam::has_output_blob_name() const {
  return _internal_has_output_blob_name();
}
inline void DetectionParam::clear_output_blob_name() {
  _impl_.output_blob_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DetectionParam::output_blob_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name)
  return _internal_output_blob_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_output_blob_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.output_blob_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name)
}
inline std::string* DetectionParam::mutable_output_blob_name() {
  std::string* _s = _internal_mutable_output_blob_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name)
  return _s;
}
inline const std::string& DetectionParam::_internal_output_blob_name() const {
  return _impl_.output_blob_name_.Get();
}
inline void DetectionParam::_internal_set_output_blob_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_blob_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_output_blob_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.output_blob_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DetectionParam::release_output_blob_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name)
  if (!_internal_has_output_blob_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.output_blob_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_blob_name_.IsDefault()) {
    _impl_.output_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DetectionParam::set_allocated_output_blob_name(std::string* output_blob_name) {
  if (output_blob_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.output_blob_name_.SetAllocated(output_blob_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_blob_name_.IsDefault()) {
    _impl_.output_blob_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name)
}

// optional string model_name = 11 [default = "RTNet"];
inline bool DetectionParam::_internal_has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectionParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void DetectionParam::clear_model_name() {
  _impl_.model_name_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DetectionParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.model_name)
  if (_impl_.model_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_model_name_.get();
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_model_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.model_name)
}
inline std::string* DetectionParam::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.model_name)
  return _s;
}
inline const std::string& DetectionParam::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void DetectionParam::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.model_name_.Mutable(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
}
inline std::string* DetectionParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.model_name_.Release();
  return p;
}
inline void DetectionParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.model_name)
}

// optional string model_type = 12 [default = "RTNet"];
inline bool DetectionParam::_internal_has_model_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetectionParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void DetectionParam::clear_model_type() {
  _impl_.model_type_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DetectionParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.model_type)
  if (_impl_.model_type_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_model_type_.get();
  return _internal_model_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_model_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.model_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.model_type)
}
inline std::string* DetectionParam::mutable_model_type() {
  std::string* _s = _internal_mutable_model_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.model_type)
  return _s;
}
inline const std::string& DetectionParam::_internal_model_type() const {
  return _impl_.model_type_.Get();
}
inline void DetectionParam::_internal_set_model_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.model_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_model_type() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.model_type_.Mutable(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
}
inline std::string* DetectionParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.model_type_.Release();
  return p;
}
inline void DetectionParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.model_type_.SetAllocated(model_type, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.model_type)
}

// optional string proto_file = 13 [default = "caffe.pt"];
inline bool DetectionParam::_internal_has_proto_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DetectionParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void DetectionParam::clear_proto_file() {
  _impl_.proto_file_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DetectionParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file)
  if (_impl_.proto_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_proto_file_.get();
  return _internal_proto_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_proto_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.proto_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file)
}
inline std::string* DetectionParam::mutable_proto_file() {
  std::string* _s = _internal_mutable_proto_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file)
  return _s;
}
inline const std::string& DetectionParam::_internal_proto_file() const {
  return _impl_.proto_file_.Get();
}
inline void DetectionParam::_internal_set_proto_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.proto_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_proto_file() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.proto_file_.Mutable(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
}
inline std::string* DetectionParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.proto_file_.Release();
  return p;
}
inline void DetectionParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.proto_file_.SetAllocated(proto_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file)
}

// optional string weight_file = 14 [default = "caffe.model"];
inline bool DetectionParam::_internal_has_weight_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DetectionParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void DetectionParam::clear_weight_file() {
  _impl_.weight_file_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DetectionParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file)
  if (_impl_.weight_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_weight_file_.get();
  return _internal_weight_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectionParam::set_weight_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.weight_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file)
}
inline std::string* DetectionParam::mutable_weight_file() {
  std::string* _s = _internal_mutable_weight_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file)
  return _s;
}
inline const std::string& DetectionParam::_internal_weight_file() const {
  return _impl_.weight_file_.Get();
}
inline void DetectionParam::_internal_set_weight_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.weight_file_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectionParam::_internal_mutable_weight_file() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.weight_file_.Mutable(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
}
inline std::string* DetectionParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.weight_file_.Release();
  return p;
}
inline void DetectionParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.weight_file_.SetAllocated(weight_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file)
}

// optional int32 max_batch_size = 15 [default = 1];
inline bool DetectionParam::_internal_has_max_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DetectionParam::has_max_batch_size() const {
  return _internal_has_max_batch_size();
}
inline void DetectionParam::clear_max_batch_size() {
  _impl_.max_batch_size_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t DetectionParam::_internal_max_batch_size() const {
  return _impl_.max_batch_size_;
}
inline int32_t DetectionParam::max_batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.detection.DetectionParam.max_batch_size)
  return _internal_max_batch_size();
}
inline void DetectionParam::_internal_set_max_batch_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_batch_size_ = value;
}
inline void DetectionParam::set_max_batch_size(int32_t value) {
  _internal_set_max_batch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.detection.DetectionParam.max_batch_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace detection
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto
