// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/traffic_light/proto/detection.proto

#include "modules/perception/camera/lib/traffic_light/proto/detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace detection {
PROTOBUF_CONSTEXPR DetectionParam::DetectionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_blob_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.im_param_blob_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_blob_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_file_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crop_method_)*/0
  , /*decltype(_impl_.max_batch_size_)*/1
  , /*decltype(_impl_.min_crop_size_)*/270
  , /*decltype(_impl_.mean_b_)*/95
  , /*decltype(_impl_.mean_g_)*/99
  , /*decltype(_impl_.mean_r_)*/96
  , /*decltype(_impl_.is_bgr_)*/true
  , /*decltype(_impl_.crop_scale_)*/2.5f} {}
struct DetectionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionParamDefaultTypeInternal() {}
  union {
    DetectionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionParamDefaultTypeInternal _DetectionParam_default_instance_;
}  // namespace detection
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.min_crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.crop_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.mean_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.mean_g_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.mean_r_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.is_bgr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.crop_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.input_blob_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.im_param_blob_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.output_blob_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.model_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.proto_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.weight_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::traffic_light::detection::DetectionParam, _impl_.max_batch_size_),
  9,
  7,
  10,
  11,
  12,
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::apollo::perception::camera::traffic_light::detection::DetectionParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::traffic_light::detection::_DetectionParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAmodules/perception/camera/lib/traffic_"
  "light/proto/detection.proto\0220apollo.perc"
  "eption.camera.traffic_light.detection\"\217\003"
  "\n\016DetectionParam\022\032\n\rmin_crop_size\030\001 \001(\005:"
  "\003270\022\026\n\013crop_method\030\002 \001(\005:\0010\022\022\n\006mean_b\030\003"
  " \001(\002:\00295\022\022\n\006mean_g\030\004 \001(\002:\00299\022\022\n\006mean_r\030\005"
  " \001(\002:\00296\022\024\n\006is_bgr\030\006 \001(\010:\004true\022\027\n\ncrop_s"
  "cale\030\007 \001(\002:\0032.5\022\027\n\017input_blob_name\030\010 \001(\t"
  "\022\032\n\022im_param_blob_name\030\t \001(\t\022\030\n\020output_b"
  "lob_name\030\n \001(\t\022\031\n\nmodel_name\030\013 \001(\t:\005RTNe"
  "t\022\031\n\nmodel_type\030\014 \001(\t:\005RTNet\022\034\n\nproto_fi"
  "le\030\r \001(\t:\010caffe.pt\022 \n\013weight_file\030\016 \001(\t:"
  "\013caffe.model\022\031\n\016max_batch_size\030\017 \001(\005:\0011"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto = {
    false, false, 519, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto,
    "modules/perception/camera/lib/traffic_light/proto/detection.proto",
    &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto(&descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace detection {

// ===================================================================

class DetectionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionParam>()._impl_._has_bits_);
  static void set_has_min_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_crop_method(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mean_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mean_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mean_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_bgr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_crop_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_input_blob_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_im_param_blob_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_blob_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proto_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_file(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_{{{"RTNet", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_{{{"RTNet", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_{{{"caffe.pt", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_{{{"caffe.model", 11}}, {nullptr}};
DetectionParam::DetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.traffic_light.detection.DetectionParam)
}
DetectionParam::DetectionParam(const DetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_blob_name_){}
    , decltype(_impl_.im_param_blob_name_){}
    , decltype(_impl_.output_blob_name_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.crop_method_){}
    , decltype(_impl_.max_batch_size_){}
    , decltype(_impl_.min_crop_size_){}
    , decltype(_impl_.mean_b_){}
    , decltype(_impl_.mean_g_){}
    , decltype(_impl_.mean_r_){}
    , decltype(_impl_.is_bgr_){}
    , decltype(_impl_.crop_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_blob_name()) {
    _impl_.input_blob_name_.Set(from._internal_input_blob_name(), 
      GetArenaForAllocation());
  }
  _impl_.im_param_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.im_param_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_im_param_blob_name()) {
    _impl_.im_param_blob_name_.Set(from._internal_im_param_blob_name(), 
      GetArenaForAllocation());
  }
  _impl_.output_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_blob_name()) {
    _impl_.output_blob_name_.Set(from._internal_output_blob_name(), 
      GetArenaForAllocation());
  }
  _impl_.model_name_.InitDefault();
  if (from._internal_has_model_name()) {
    _impl_.model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  _impl_.model_type_.InitDefault();
  if (from._internal_has_model_type()) {
    _impl_.model_type_.Set(from._internal_model_type(), 
      GetArenaForAllocation());
  }
  _impl_.proto_file_.InitDefault();
  if (from._internal_has_proto_file()) {
    _impl_.proto_file_.Set(from._internal_proto_file(), 
      GetArenaForAllocation());
  }
  _impl_.weight_file_.InitDefault();
  if (from._internal_has_weight_file()) {
    _impl_.weight_file_.Set(from._internal_weight_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.crop_method_, &from._impl_.crop_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crop_scale_) -
    reinterpret_cast<char*>(&_impl_.crop_method_)) + sizeof(_impl_.crop_scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.traffic_light.detection.DetectionParam)
}

inline void DetectionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_blob_name_){}
    , decltype(_impl_.im_param_blob_name_){}
    , decltype(_impl_.output_blob_name_){}
    , decltype(_impl_.model_name_){}
    , decltype(_impl_.model_type_){}
    , decltype(_impl_.proto_file_){}
    , decltype(_impl_.weight_file_){}
    , decltype(_impl_.crop_method_){0}
    , decltype(_impl_.max_batch_size_){1}
    , decltype(_impl_.min_crop_size_){270}
    , decltype(_impl_.mean_b_){95}
    , decltype(_impl_.mean_g_){99}
    , decltype(_impl_.mean_r_){96}
    , decltype(_impl_.is_bgr_){true}
    , decltype(_impl_.crop_scale_){2.5f}
  };
  _impl_.input_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.im_param_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.im_param_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_blob_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_blob_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.InitDefault();
  _impl_.model_type_.InitDefault();
  _impl_.proto_file_.InitDefault();
  _impl_.weight_file_.InitDefault();
}

DetectionParam::~DetectionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.traffic_light.detection.DetectionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_blob_name_.Destroy();
  _impl_.im_param_blob_name_.Destroy();
  _impl_.output_blob_name_.Destroy();
  _impl_.model_name_.Destroy();
  _impl_.model_type_.Destroy();
  _impl_.proto_file_.Destroy();
  _impl_.weight_file_.Destroy();
}

void DetectionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.traffic_light.detection.DetectionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.input_blob_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.im_param_blob_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_blob_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.model_name_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.model_type_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.proto_file_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      _impl_.weight_file_.ClearToDefault(::apollo::perception::camera::traffic_light::detection::DetectionParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
       }
  }
  _impl_.crop_method_ = 0;
  if (cached_has_bits & 0x00007f00u) {
    _impl_.max_batch_size_ = 1;
    _impl_.min_crop_size_ = 270;
    _impl_.mean_b_ = 95;
    _impl_.mean_g_ = 99;
    _impl_.mean_r_ = 96;
    _impl_.is_bgr_ = true;
    _impl_.crop_scale_ = 2.5f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 min_crop_size = 1 [default = 270];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_crop_size(&has_bits);
          _impl_.min_crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 crop_method = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_crop_method(&has_bits);
          _impl_.crop_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_b = 3 [default = 95];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_mean_b(&has_bits);
          _impl_.mean_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_g = 4 [default = 99];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_mean_g(&has_bits);
          _impl_.mean_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_r = 5 [default = 96];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_mean_r(&has_bits);
          _impl_.mean_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bgr = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_bgr(&has_bits);
          _impl_.is_bgr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float crop_scale = 7 [default = 2.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_crop_scale(&has_bits);
          _impl_.crop_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string input_blob_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_input_blob_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string im_param_blob_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_im_param_blob_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string output_blob_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_output_blob_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string model_name = 11 [default = "RTNet"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.model_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string model_type = 12 [default = "RTNet"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.model_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string proto_file = 13 [default = "caffe.pt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_proto_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string weight_file = 14 [default = "caffe.model"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_weight_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_batch_size = 15 [default = 1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_max_batch_size(&has_bits);
          _impl_.max_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.traffic_light.detection.DetectionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 min_crop_size = 1 [default = 270];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_crop_size(), target);
  }

  // optional int32 crop_method = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_crop_method(), target);
  }

  // optional float mean_b = 3 [default = 95];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_b(), target);
  }

  // optional float mean_g = 4 [default = 99];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_mean_g(), target);
  }

  // optional float mean_r = 5 [default = 96];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mean_r(), target);
  }

  // optional bool is_bgr = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_bgr(), target);
  }

  // optional float crop_scale = 7 [default = 2.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_crop_scale(), target);
  }

  // optional string input_blob_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_blob_name().data(), static_cast<int>(this->_internal_input_blob_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.input_blob_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_input_blob_name(), target);
  }

  // optional string im_param_blob_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_im_param_blob_name().data(), static_cast<int>(this->_internal_im_param_blob_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.im_param_blob_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_im_param_blob_name(), target);
  }

  // optional string output_blob_name = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_blob_name().data(), static_cast<int>(this->_internal_output_blob_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.output_blob_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_output_blob_name(), target);
  }

  // optional string model_name = 11 [default = "RTNet"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.model_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_model_name(), target);
  }

  // optional string model_type = 12 [default = "RTNet"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.model_type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_model_type(), target);
  }

  // optional string proto_file = 13 [default = "caffe.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file().data(), static_cast<int>(this->_internal_proto_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.proto_file");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_proto_file(), target);
  }

  // optional string weight_file = 14 [default = "caffe.model"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_weight_file().data(), static_cast<int>(this->_internal_weight_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.traffic_light.detection.DetectionParam.weight_file");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_weight_file(), target);
  }

  // optional int32 max_batch_size = 15 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_max_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.traffic_light.detection.DetectionParam)
  return target;
}

size_t DetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.traffic_light.detection.DetectionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string input_blob_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_blob_name());
    }

    // optional string im_param_blob_name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_im_param_blob_name());
    }

    // optional string output_blob_name = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_blob_name());
    }

    // optional string model_name = 11 [default = "RTNet"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_name());
    }

    // optional string model_type = 12 [default = "RTNet"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_type());
    }

    // optional string proto_file = 13 [default = "caffe.pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file());
    }

    // optional string weight_file = 14 [default = "caffe.model"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weight_file());
    }

    // optional int32 crop_method = 2 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_crop_method());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 max_batch_size = 15 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_batch_size());
    }

    // optional int32 min_crop_size = 1 [default = 270];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_crop_size());
    }

    // optional float mean_b = 3 [default = 95];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 4 [default = 99];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float mean_r = 5 [default = 96];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional bool is_bgr = 6 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional float crop_scale = 7 [default = 2.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DetectionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionParam::GetClassData() const { return &_class_data_; }

void DetectionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DetectionParam *>(to)->MergeFrom(
      static_cast<const DetectionParam &>(from));
}


void DetectionParam::MergeFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.traffic_light.detection.DetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_input_blob_name(from._internal_input_blob_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_im_param_blob_name(from._internal_im_param_blob_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_blob_name(from._internal_output_blob_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_model_type(from._internal_model_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_proto_file(from._internal_proto_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_weight_file(from._internal_weight_file());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.crop_method_ = from._impl_.crop_method_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.max_batch_size_ = from._impl_.max_batch_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.min_crop_size_ = from._impl_.min_crop_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.mean_b_ = from._impl_.mean_b_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.mean_g_ = from._impl_.mean_g_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.mean_r_ = from._impl_.mean_r_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.is_bgr_ = from._impl_.is_bgr_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.crop_scale_ = from._impl_.crop_scale_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionParam::CopyFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.traffic_light.detection.DetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionParam::IsInitialized() const {
  return true;
}

void DetectionParam::InternalSwap(DetectionParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_blob_name_, lhs_arena,
      &other->_impl_.input_blob_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.im_param_blob_name_, lhs_arena,
      &other->_impl_.im_param_blob_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_blob_name_, lhs_arena,
      &other->_impl_.output_blob_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_name_, lhs_arena,
      &other->_impl_.model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_, lhs_arena,
      &other->_impl_.model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_file_, lhs_arena,
      &other->_impl_.proto_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weight_file_, lhs_arena,
      &other->_impl_.weight_file_, rhs_arena
  );
  swap(_impl_.crop_method_, other->_impl_.crop_method_);
  swap(_impl_.max_batch_size_, other->_impl_.max_batch_size_);
  swap(_impl_.min_crop_size_, other->_impl_.min_crop_size_);
  swap(_impl_.mean_b_, other->_impl_.mean_b_);
  swap(_impl_.mean_g_, other->_impl_.mean_g_);
  swap(_impl_.mean_r_, other->_impl_.mean_r_);
  swap(_impl_.is_bgr_, other->_impl_.is_bgr_);
  swap(_impl_.crop_scale_, other->_impl_.crop_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fproto_2fdetection_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace detection
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::traffic_light::detection::DetectionParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::traffic_light::detection::DetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::traffic_light::detection::DetectionParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
