// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/lane/common/proto/darkSCNN.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace darkSCNN {
class DarkSCNNParam;
struct DarkSCNNParamDefaultTypeInternal;
extern DarkSCNNParamDefaultTypeInternal _DarkSCNNParam_default_instance_;
class ModelParam;
struct ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class NetworkParam;
struct NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
}  // namespace darkSCNN
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::darkSCNN::DarkSCNNParam* Arena::CreateMaybeMessage<::apollo::perception::camera::darkSCNN::DarkSCNNParam>(Arena*);
template<> ::apollo::perception::camera::darkSCNN::ModelParam* Arena::CreateMaybeMessage<::apollo::perception::camera::darkSCNN::ModelParam>(Arena*);
template<> ::apollo::perception::camera::darkSCNN::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::camera::darkSCNN::NetworkParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace darkSCNN {

// ===================================================================

class DarkSCNNParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.darkSCNN.DarkSCNNParam) */ {
 public:
  inline DarkSCNNParam() : DarkSCNNParam(nullptr) {}
  ~DarkSCNNParam() override;
  explicit PROTOBUF_CONSTEXPR DarkSCNNParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DarkSCNNParam(const DarkSCNNParam& from);
  DarkSCNNParam(DarkSCNNParam&& from) noexcept
    : DarkSCNNParam() {
    *this = ::std::move(from);
  }

  inline DarkSCNNParam& operator=(const DarkSCNNParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DarkSCNNParam& operator=(DarkSCNNParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DarkSCNNParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const DarkSCNNParam* internal_default_instance() {
    return reinterpret_cast<const DarkSCNNParam*>(
               &_DarkSCNNParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DarkSCNNParam& a, DarkSCNNParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DarkSCNNParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DarkSCNNParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DarkSCNNParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DarkSCNNParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DarkSCNNParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DarkSCNNParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DarkSCNNParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.darkSCNN.DarkSCNNParam";
  }
  protected:
  explicit DarkSCNNParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelParamFieldNumber = 1,
    kNetParamFieldNumber = 2,
  };
  // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
  bool has_model_param() const;
  private:
  bool _internal_has_model_param() const;
  public:
  void clear_model_param();
  const ::apollo::perception::camera::darkSCNN::ModelParam& model_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::darkSCNN::ModelParam* release_model_param();
  ::apollo::perception::camera::darkSCNN::ModelParam* mutable_model_param();
  void set_allocated_model_param(::apollo::perception::camera::darkSCNN::ModelParam* model_param);
  private:
  const ::apollo::perception::camera::darkSCNN::ModelParam& _internal_model_param() const;
  ::apollo::perception::camera::darkSCNN::ModelParam* _internal_mutable_model_param();
  public:
  void unsafe_arena_set_allocated_model_param(
      ::apollo::perception::camera::darkSCNN::ModelParam* model_param);
  ::apollo::perception::camera::darkSCNN::ModelParam* unsafe_arena_release_model_param();

  // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
  bool has_net_param() const;
  private:
  bool _internal_has_net_param() const;
  public:
  void clear_net_param();
  const ::apollo::perception::camera::darkSCNN::NetworkParam& net_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::camera::darkSCNN::NetworkParam* release_net_param();
  ::apollo::perception::camera::darkSCNN::NetworkParam* mutable_net_param();
  void set_allocated_net_param(::apollo::perception::camera::darkSCNN::NetworkParam* net_param);
  private:
  const ::apollo::perception::camera::darkSCNN::NetworkParam& _internal_net_param() const;
  ::apollo::perception::camera::darkSCNN::NetworkParam* _internal_mutable_net_param();
  public:
  void unsafe_arena_set_allocated_net_param(
      ::apollo::perception::camera::darkSCNN::NetworkParam* net_param);
  ::apollo::perception::camera::darkSCNN::NetworkParam* unsafe_arena_release_net_param();

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.DarkSCNNParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::camera::darkSCNN::ModelParam* model_param_;
    ::apollo::perception::camera::darkSCNN::NetworkParam* net_param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto;
};
// -------------------------------------------------------------------

class ModelParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.darkSCNN.ModelParam) */ {
 public:
  inline ModelParam() : ModelParam(nullptr) {}
  ~ModelParam() override;
  explicit PROTOBUF_CONSTEXPR ModelParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelParam(const ModelParam& from);
  ModelParam(ModelParam&& from) noexcept
    : ModelParam() {
    *this = ::std::move(from);
  }

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelParam& operator=(ModelParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelParam& a, ModelParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.darkSCNN.ModelParam";
  }
  protected:
  explicit ModelParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kProtoFileFieldNumber = 2,
    kWeightFileFieldNumber = 3,
    kModelTypeFieldNumber = 19,
    kInputOffsetYFieldNumber = 4,
    kInputOffsetXFieldNumber = 5,
    kVptMeanDxFieldNumber = 15,
    kCropHeightFieldNumber = 6,
    kCropWidthFieldNumber = 7,
    kResizeHeightFieldNumber = 8,
    kResizeWidthFieldNumber = 9,
    kMeanBFieldNumber = 10,
    kMeanGFieldNumber = 11,
    kMeanRFieldNumber = 12,
    kIsBgrFieldNumber = 13,
    kConfidenceThresholdFieldNumber = 14,
    kVptMeanDyFieldNumber = 16,
    kVptStdDxFieldNumber = 17,
    kVptStdDyFieldNumber = 18,
  };
  // optional string model_name = 1 [default = "darkSCNN"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string proto_file = 2 [default = "deploy.prototxt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_file();
  PROTOBUF_NODISCARD std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 3 [default = "deploy.caffemodel"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weight_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weight_file();
  PROTOBUF_NODISCARD std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string model_type = 19 [default = "CaffeNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_type();
  PROTOBUF_NODISCARD std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional uint32 input_offset_y = 4 [default = 0];
  bool has_input_offset_y() const;
  private:
  bool _internal_has_input_offset_y() const;
  public:
  void clear_input_offset_y();
  uint32_t input_offset_y() const;
  void set_input_offset_y(uint32_t value);
  private:
  uint32_t _internal_input_offset_y() const;
  void _internal_set_input_offset_y(uint32_t value);
  public:

  // optional uint32 input_offset_x = 5 [default = 0];
  bool has_input_offset_x() const;
  private:
  bool _internal_has_input_offset_x() const;
  public:
  void clear_input_offset_x();
  uint32_t input_offset_x() const;
  void set_input_offset_x(uint32_t value);
  private:
  uint32_t _internal_input_offset_x() const;
  void _internal_set_input_offset_x(uint32_t value);
  public:

  // optional float vpt_mean_dx = 15 [default = 0];
  bool has_vpt_mean_dx() const;
  private:
  bool _internal_has_vpt_mean_dx() const;
  public:
  void clear_vpt_mean_dx();
  float vpt_mean_dx() const;
  void set_vpt_mean_dx(float value);
  private:
  float _internal_vpt_mean_dx() const;
  void _internal_set_vpt_mean_dx(float value);
  public:

  // optional uint32 crop_height = 6 [default = 1080];
  bool has_crop_height() const;
  private:
  bool _internal_has_crop_height() const;
  public:
  void clear_crop_height();
  uint32_t crop_height() const;
  void set_crop_height(uint32_t value);
  private:
  uint32_t _internal_crop_height() const;
  void _internal_set_crop_height(uint32_t value);
  public:

  // optional uint32 crop_width = 7 [default = 1920];
  bool has_crop_width() const;
  private:
  bool _internal_has_crop_width() const;
  public:
  void clear_crop_width();
  uint32_t crop_width() const;
  void set_crop_width(uint32_t value);
  private:
  uint32_t _internal_crop_width() const;
  void _internal_set_crop_width(uint32_t value);
  public:

  // optional uint32 resize_height = 8 [default = 512];
  bool has_resize_height() const;
  private:
  bool _internal_has_resize_height() const;
  public:
  void clear_resize_height();
  uint32_t resize_height() const;
  void set_resize_height(uint32_t value);
  private:
  uint32_t _internal_resize_height() const;
  void _internal_set_resize_height(uint32_t value);
  public:

  // optional uint32 resize_width = 9 [default = 512];
  bool has_resize_width() const;
  private:
  bool _internal_has_resize_width() const;
  public:
  void clear_resize_width();
  uint32_t resize_width() const;
  void set_resize_width(uint32_t value);
  private:
  uint32_t _internal_resize_width() const;
  void _internal_set_resize_width(uint32_t value);
  public:

  // optional uint32 mean_b = 10 [default = 95];
  bool has_mean_b() const;
  private:
  bool _internal_has_mean_b() const;
  public:
  void clear_mean_b();
  uint32_t mean_b() const;
  void set_mean_b(uint32_t value);
  private:
  uint32_t _internal_mean_b() const;
  void _internal_set_mean_b(uint32_t value);
  public:

  // optional uint32 mean_g = 11 [default = 99];
  bool has_mean_g() const;
  private:
  bool _internal_has_mean_g() const;
  public:
  void clear_mean_g();
  uint32_t mean_g() const;
  void set_mean_g(uint32_t value);
  private:
  uint32_t _internal_mean_g() const;
  void _internal_set_mean_g(uint32_t value);
  public:

  // optional uint32 mean_r = 12 [default = 96];
  bool has_mean_r() const;
  private:
  bool _internal_has_mean_r() const;
  public:
  void clear_mean_r();
  uint32_t mean_r() const;
  void set_mean_r(uint32_t value);
  private:
  uint32_t _internal_mean_r() const;
  void _internal_set_mean_r(uint32_t value);
  public:

  // optional bool is_bgr = 13 [default = true];
  bool has_is_bgr() const;
  private:
  bool _internal_has_is_bgr() const;
  public:
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // optional float confidence_threshold = 14 [default = 0.5];
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional float vpt_mean_dy = 16 [default = -77.284];
  bool has_vpt_mean_dy() const;
  private:
  bool _internal_has_vpt_mean_dy() const;
  public:
  void clear_vpt_mean_dy();
  float vpt_mean_dy() const;
  void set_vpt_mean_dy(float value);
  private:
  float _internal_vpt_mean_dy() const;
  void _internal_set_vpt_mean_dy(float value);
  public:

  // optional float vpt_std_dx = 17 [default = 103.109];
  bool has_vpt_std_dx() const;
  private:
  bool _internal_has_vpt_std_dx() const;
  public:
  void clear_vpt_std_dx();
  float vpt_std_dx() const;
  void set_vpt_std_dx(float value);
  private:
  float _internal_vpt_std_dx() const;
  void _internal_set_vpt_std_dx(float value);
  public:

  // optional float vpt_std_dy = 18 [default = 95.273];
  bool has_vpt_std_dy() const;
  private:
  bool _internal_has_vpt_std_dy() const;
  public:
  void clear_vpt_std_dy();
  float vpt_std_dy() const;
  void set_vpt_std_dy(float value);
  private:
  float _internal_vpt_std_dy() const;
  void _internal_set_vpt_std_dy(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.ModelParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_proto_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_weight_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
    uint32_t input_offset_y_;
    uint32_t input_offset_x_;
    float vpt_mean_dx_;
    uint32_t crop_height_;
    uint32_t crop_width_;
    uint32_t resize_height_;
    uint32_t resize_width_;
    uint32_t mean_b_;
    uint32_t mean_g_;
    uint32_t mean_r_;
    bool is_bgr_;
    float confidence_threshold_;
    float vpt_mean_dy_;
    float vpt_std_dx_;
    float vpt_std_dy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.darkSCNN.NetworkParam) */ {
 public:
  inline NetworkParam() : NetworkParam(nullptr) {}
  ~NetworkParam() override;
  explicit PROTOBUF_CONSTEXPR NetworkParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.darkSCNN.NetworkParam";
  }
  protected:
  explicit NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegBlobFieldNumber = 1,
    kVptBlobFieldNumber = 2,
    kInputBlobFieldNumber = 3,
  };
  // optional string seg_blob = 1 [default = "softmax"];
  bool has_seg_blob() const;
  private:
  bool _internal_has_seg_blob() const;
  public:
  void clear_seg_blob();
  const std::string& seg_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seg_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seg_blob();
  PROTOBUF_NODISCARD std::string* release_seg_blob();
  void set_allocated_seg_blob(std::string* seg_blob);
  private:
  const std::string& _internal_seg_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seg_blob(const std::string& value);
  std::string* _internal_mutable_seg_blob();
  public:

  // optional string vpt_blob = 2 [default = "fc_out"];
  bool has_vpt_blob() const;
  private:
  bool _internal_has_vpt_blob() const;
  public:
  void clear_vpt_blob();
  const std::string& vpt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vpt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vpt_blob();
  PROTOBUF_NODISCARD std::string* release_vpt_blob();
  void set_allocated_vpt_blob(std::string* vpt_blob);
  private:
  const std::string& _internal_vpt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vpt_blob(const std::string& value);
  std::string* _internal_mutable_vpt_blob();
  public:

  // optional string input_blob = 3 [default = "data"];
  bool has_input_blob() const;
  private:
  bool _internal_has_input_blob() const;
  public:
  void clear_input_blob();
  const std::string& input_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_blob();
  PROTOBUF_NODISCARD std::string* release_input_blob();
  void set_allocated_input_blob(std::string* input_blob);
  private:
  const std::string& _internal_input_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_blob(const std::string& value);
  std::string* _internal_mutable_input_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.NetworkParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_seg_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seg_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_vpt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vpt_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_input_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DarkSCNNParam

// optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
inline bool DarkSCNNParam::_internal_has_model_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_param_ != nullptr);
  return value;
}
inline bool DarkSCNNParam::has_model_param() const {
  return _internal_has_model_param();
}
inline void DarkSCNNParam::clear_model_param() {
  if (_impl_.model_param_ != nullptr) _impl_.model_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::darkSCNN::ModelParam& DarkSCNNParam::_internal_model_param() const {
  const ::apollo::perception::camera::darkSCNN::ModelParam* p = _impl_.model_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::darkSCNN::ModelParam&>(
      ::apollo::perception::camera::darkSCNN::_ModelParam_default_instance_);
}
inline const ::apollo::perception::camera::darkSCNN::ModelParam& DarkSCNNParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
  return _internal_model_param();
}
inline void DarkSCNNParam::unsafe_arena_set_allocated_model_param(
    ::apollo::perception::camera::darkSCNN::ModelParam* model_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_param_);
  }
  _impl_.model_param_ = model_param;
  if (model_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::release_model_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::darkSCNN::ModelParam* temp = _impl_.model_param_;
  _impl_.model_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::unsafe_arena_release_model_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::darkSCNN::ModelParam* temp = _impl_.model_param_;
  _impl_.model_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::_internal_mutable_model_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::darkSCNN::ModelParam>(GetArenaForAllocation());
    _impl_.model_param_ = p;
  }
  return _impl_.model_param_;
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::mutable_model_param() {
  ::apollo::perception::camera::darkSCNN::ModelParam* _msg = _internal_mutable_model_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
  return _msg;
}
inline void DarkSCNNParam::set_allocated_model_param(::apollo::perception::camera::darkSCNN::ModelParam* model_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_param_;
  }
  if (model_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_param);
    if (message_arena != submessage_arena) {
      model_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_param_ = model_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
}

// optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
inline bool DarkSCNNParam::_internal_has_net_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.net_param_ != nullptr);
  return value;
}
inline bool DarkSCNNParam::has_net_param() const {
  return _internal_has_net_param();
}
inline void DarkSCNNParam::clear_net_param() {
  if (_impl_.net_param_ != nullptr) _impl_.net_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::darkSCNN::NetworkParam& DarkSCNNParam::_internal_net_param() const {
  const ::apollo::perception::camera::darkSCNN::NetworkParam* p = _impl_.net_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::darkSCNN::NetworkParam&>(
      ::apollo::perception::camera::darkSCNN::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::camera::darkSCNN::NetworkParam& DarkSCNNParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
  return _internal_net_param();
}
inline void DarkSCNNParam::unsafe_arena_set_allocated_net_param(
    ::apollo::perception::camera::darkSCNN::NetworkParam* net_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.net_param_);
  }
  _impl_.net_param_ = net_param;
  if (net_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::release_net_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::darkSCNN::NetworkParam* temp = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::unsafe_arena_release_net_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::darkSCNN::NetworkParam* temp = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::_internal_mutable_net_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::darkSCNN::NetworkParam>(GetArenaForAllocation());
    _impl_.net_param_ = p;
  }
  return _impl_.net_param_;
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::mutable_net_param() {
  ::apollo::perception::camera::darkSCNN::NetworkParam* _msg = _internal_mutable_net_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
  return _msg;
}
inline void DarkSCNNParam::set_allocated_net_param(::apollo::perception::camera::darkSCNN::NetworkParam* net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.net_param_;
  }
  if (net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(net_param);
    if (message_arena != submessage_arena) {
      net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
}

// -------------------------------------------------------------------

// ModelParam

// optional string model_name = 1 [default = "darkSCNN"];
inline bool ModelParam::_internal_has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void ModelParam::clear_model_name() {
  _impl_.model_name_.ClearToDefault(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.model_name)
  if (_impl_.model_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_model_name_.get();
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_model_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}
inline std::string* ModelParam::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.model_name)
  return _s;
}
inline const std::string& ModelParam::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void ModelParam::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_name_.Mutable(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.ModelParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_name_.Release();
  return p;
}
inline void ModelParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "deploy.prototxt"];
inline bool ModelParam::_internal_has_proto_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ModelParam::clear_proto_file() {
  _impl_.proto_file_.ClearToDefault(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
  if (_impl_.proto_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_proto_file_.get();
  return _internal_proto_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_proto_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.proto_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}
inline std::string* ModelParam::mutable_proto_file() {
  std::string* _s = _internal_mutable_proto_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
  return _s;
}
inline const std::string& ModelParam::_internal_proto_file() const {
  return _impl_.proto_file_.Get();
}
inline void ModelParam::_internal_set_proto_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.proto_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_proto_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.proto_file_.Mutable(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.proto_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proto_file_.SetAllocated(proto_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "deploy.caffemodel"];
inline bool ModelParam::_internal_has_weight_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ModelParam::clear_weight_file() {
  _impl_.weight_file_.ClearToDefault(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
  if (_impl_.weight_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_weight_file_.get();
  return _internal_weight_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_weight_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.weight_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}
inline std::string* ModelParam::mutable_weight_file() {
  std::string* _s = _internal_mutable_weight_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
  return _s;
}
inline const std::string& ModelParam::_internal_weight_file() const {
  return _impl_.weight_file_.Get();
}
inline void ModelParam::_internal_set_weight_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.weight_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_weight_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.weight_file_.Mutable(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.weight_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.weight_file_.SetAllocated(weight_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}

// optional uint32 input_offset_y = 4 [default = 0];
inline bool ModelParam::_internal_has_input_offset_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelParam::has_input_offset_y() const {
  return _internal_has_input_offset_y();
}
inline void ModelParam::clear_input_offset_y() {
  _impl_.input_offset_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ModelParam::_internal_input_offset_y() const {
  return _impl_.input_offset_y_;
}
inline uint32_t ModelParam::input_offset_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.input_offset_y)
  return _internal_input_offset_y();
}
inline void ModelParam::_internal_set_input_offset_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.input_offset_y_ = value;
}
inline void ModelParam::set_input_offset_y(uint32_t value) {
  _internal_set_input_offset_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.input_offset_y)
}

// optional uint32 input_offset_x = 5 [default = 0];
inline bool ModelParam::_internal_has_input_offset_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelParam::has_input_offset_x() const {
  return _internal_has_input_offset_x();
}
inline void ModelParam::clear_input_offset_x() {
  _impl_.input_offset_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ModelParam::_internal_input_offset_x() const {
  return _impl_.input_offset_x_;
}
inline uint32_t ModelParam::input_offset_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.input_offset_x)
  return _internal_input_offset_x();
}
inline void ModelParam::_internal_set_input_offset_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.input_offset_x_ = value;
}
inline void ModelParam::set_input_offset_x(uint32_t value) {
  _internal_set_input_offset_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.input_offset_x)
}

// optional uint32 crop_height = 6 [default = 1080];
inline bool ModelParam::_internal_has_crop_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelParam::has_crop_height() const {
  return _internal_has_crop_height();
}
inline void ModelParam::clear_crop_height() {
  _impl_.crop_height_ = 1080u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ModelParam::_internal_crop_height() const {
  return _impl_.crop_height_;
}
inline uint32_t ModelParam::crop_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.crop_height)
  return _internal_crop_height();
}
inline void ModelParam::_internal_set_crop_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.crop_height_ = value;
}
inline void ModelParam::set_crop_height(uint32_t value) {
  _internal_set_crop_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.crop_height)
}

// optional uint32 crop_width = 7 [default = 1920];
inline bool ModelParam::_internal_has_crop_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelParam::has_crop_width() const {
  return _internal_has_crop_width();
}
inline void ModelParam::clear_crop_width() {
  _impl_.crop_width_ = 1920u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ModelParam::_internal_crop_width() const {
  return _impl_.crop_width_;
}
inline uint32_t ModelParam::crop_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.crop_width)
  return _internal_crop_width();
}
inline void ModelParam::_internal_set_crop_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.crop_width_ = value;
}
inline void ModelParam::set_crop_width(uint32_t value) {
  _internal_set_crop_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.crop_width)
}

// optional uint32 resize_height = 8 [default = 512];
inline bool ModelParam::_internal_has_resize_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelParam::has_resize_height() const {
  return _internal_has_resize_height();
}
inline void ModelParam::clear_resize_height() {
  _impl_.resize_height_ = 512u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t ModelParam::_internal_resize_height() const {
  return _impl_.resize_height_;
}
inline uint32_t ModelParam::resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.resize_height)
  return _internal_resize_height();
}
inline void ModelParam::_internal_set_resize_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.resize_height_ = value;
}
inline void ModelParam::set_resize_height(uint32_t value) {
  _internal_set_resize_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.resize_height)
}

// optional uint32 resize_width = 9 [default = 512];
inline bool ModelParam::_internal_has_resize_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelParam::has_resize_width() const {
  return _internal_has_resize_width();
}
inline void ModelParam::clear_resize_width() {
  _impl_.resize_width_ = 512u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ModelParam::_internal_resize_width() const {
  return _impl_.resize_width_;
}
inline uint32_t ModelParam::resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.resize_width)
  return _internal_resize_width();
}
inline void ModelParam::_internal_set_resize_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.resize_width_ = value;
}
inline void ModelParam::set_resize_width(uint32_t value) {
  _internal_set_resize_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.resize_width)
}

// optional uint32 mean_b = 10 [default = 95];
inline bool ModelParam::_internal_has_mean_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelParam::has_mean_b() const {
  return _internal_has_mean_b();
}
inline void ModelParam::clear_mean_b() {
  _impl_.mean_b_ = 95u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ModelParam::_internal_mean_b() const {
  return _impl_.mean_b_;
}
inline uint32_t ModelParam::mean_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_b)
  return _internal_mean_b();
}
inline void ModelParam::_internal_set_mean_b(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mean_b_ = value;
}
inline void ModelParam::set_mean_b(uint32_t value) {
  _internal_set_mean_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_b)
}

// optional uint32 mean_g = 11 [default = 99];
inline bool ModelParam::_internal_has_mean_g() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelParam::has_mean_g() const {
  return _internal_has_mean_g();
}
inline void ModelParam::clear_mean_g() {
  _impl_.mean_g_ = 99u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ModelParam::_internal_mean_g() const {
  return _impl_.mean_g_;
}
inline uint32_t ModelParam::mean_g() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_g)
  return _internal_mean_g();
}
inline void ModelParam::_internal_set_mean_g(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.mean_g_ = value;
}
inline void ModelParam::set_mean_g(uint32_t value) {
  _internal_set_mean_g(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_g)
}

// optional uint32 mean_r = 12 [default = 96];
inline bool ModelParam::_internal_has_mean_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelParam::has_mean_r() const {
  return _internal_has_mean_r();
}
inline void ModelParam::clear_mean_r() {
  _impl_.mean_r_ = 96u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t ModelParam::_internal_mean_r() const {
  return _impl_.mean_r_;
}
inline uint32_t ModelParam::mean_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_r)
  return _internal_mean_r();
}
inline void ModelParam::_internal_set_mean_r(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.mean_r_ = value;
}
inline void ModelParam::set_mean_r(uint32_t value) {
  _internal_set_mean_r(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_r)
}

// optional bool is_bgr = 13 [default = true];
inline bool ModelParam::_internal_has_is_bgr() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelParam::has_is_bgr() const {
  return _internal_has_is_bgr();
}
inline void ModelParam::clear_is_bgr() {
  _impl_.is_bgr_ = true;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ModelParam::_internal_is_bgr() const {
  return _impl_.is_bgr_;
}
inline bool ModelParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.is_bgr)
  return _internal_is_bgr();
}
inline void ModelParam::_internal_set_is_bgr(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.is_bgr_ = value;
}
inline void ModelParam::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.is_bgr)
}

// optional float confidence_threshold = 14 [default = 0.5];
inline bool ModelParam::_internal_has_confidence_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelParam::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void ModelParam::clear_confidence_threshold() {
  _impl_.confidence_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ModelParam::_internal_confidence_threshold() const {
  return _impl_.confidence_threshold_;
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void ModelParam::_internal_set_confidence_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.confidence_threshold_ = value;
}
inline void ModelParam::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.confidence_threshold)
}

// optional float vpt_mean_dx = 15 [default = 0];
inline bool ModelParam::_internal_has_vpt_mean_dx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelParam::has_vpt_mean_dx() const {
  return _internal_has_vpt_mean_dx();
}
inline void ModelParam::clear_vpt_mean_dx() {
  _impl_.vpt_mean_dx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ModelParam::_internal_vpt_mean_dx() const {
  return _impl_.vpt_mean_dx_;
}
inline float ModelParam::vpt_mean_dx() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dx)
  return _internal_vpt_mean_dx();
}
inline void ModelParam::_internal_set_vpt_mean_dx(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vpt_mean_dx_ = value;
}
inline void ModelParam::set_vpt_mean_dx(float value) {
  _internal_set_vpt_mean_dx(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dx)
}

// optional float vpt_mean_dy = 16 [default = -77.284];
inline bool ModelParam::_internal_has_vpt_mean_dy() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModelParam::has_vpt_mean_dy() const {
  return _internal_has_vpt_mean_dy();
}
inline void ModelParam::clear_vpt_mean_dy() {
  _impl_.vpt_mean_dy_ = -77.284f;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ModelParam::_internal_vpt_mean_dy() const {
  return _impl_.vpt_mean_dy_;
}
inline float ModelParam::vpt_mean_dy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dy)
  return _internal_vpt_mean_dy();
}
inline void ModelParam::_internal_set_vpt_mean_dy(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.vpt_mean_dy_ = value;
}
inline void ModelParam::set_vpt_mean_dy(float value) {
  _internal_set_vpt_mean_dy(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dy)
}

// optional float vpt_std_dx = 17 [default = 103.109];
inline bool ModelParam::_internal_has_vpt_std_dx() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModelParam::has_vpt_std_dx() const {
  return _internal_has_vpt_std_dx();
}
inline void ModelParam::clear_vpt_std_dx() {
  _impl_.vpt_std_dx_ = 103.109f;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ModelParam::_internal_vpt_std_dx() const {
  return _impl_.vpt_std_dx_;
}
inline float ModelParam::vpt_std_dx() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dx)
  return _internal_vpt_std_dx();
}
inline void ModelParam::_internal_set_vpt_std_dx(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.vpt_std_dx_ = value;
}
inline void ModelParam::set_vpt_std_dx(float value) {
  _internal_set_vpt_std_dx(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dx)
}

// optional float vpt_std_dy = 18 [default = 95.273];
inline bool ModelParam::_internal_has_vpt_std_dy() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModelParam::has_vpt_std_dy() const {
  return _internal_has_vpt_std_dy();
}
inline void ModelParam::clear_vpt_std_dy() {
  _impl_.vpt_std_dy_ = 95.273f;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float ModelParam::_internal_vpt_std_dy() const {
  return _impl_.vpt_std_dy_;
}
inline float ModelParam::vpt_std_dy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dy)
  return _internal_vpt_std_dy();
}
inline void ModelParam::_internal_set_vpt_std_dy(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.vpt_std_dy_ = value;
}
inline void ModelParam::set_vpt_std_dy(float value) {
  _internal_set_vpt_std_dy(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dy)
}

// optional string model_type = 19 [default = "CaffeNet"];
inline bool ModelParam::_internal_has_model_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ModelParam::clear_model_type() {
  _impl_.model_type_.ClearToDefault(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.model_type)
  if (_impl_.model_type_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_model_type_.get();
  return _internal_model_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_model_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.model_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}
inline std::string* ModelParam::mutable_model_type() {
  std::string* _s = _internal_mutable_model_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.model_type)
  return _s;
}
inline const std::string& ModelParam::_internal_model_type() const {
  return _impl_.model_type_.Get();
}
inline void ModelParam::_internal_set_model_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.model_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_model_type() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.model_type_.Mutable(::apollo::perception::camera::darkSCNN::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_type_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.ModelParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.model_type_.Release();
  return p;
}
inline void ModelParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.model_type_.SetAllocated(model_type, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string seg_blob = 1 [default = "softmax"];
inline bool NetworkParam::_internal_has_seg_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_seg_blob() const {
  return _internal_has_seg_blob();
}
inline void NetworkParam::clear_seg_blob() {
  _impl_.seg_blob_.ClearToDefault(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_seg_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::seg_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
  if (_impl_.seg_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_seg_blob_.get();
  return _internal_seg_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_seg_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.seg_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}
inline std::string* NetworkParam::mutable_seg_blob() {
  std::string* _s = _internal_mutable_seg_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_seg_blob() const {
  return _impl_.seg_blob_.Get();
}
inline void NetworkParam::_internal_set_seg_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.seg_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_seg_blob() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.seg_blob_.Mutable(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_seg_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_seg_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
  if (!_internal_has_seg_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.seg_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_seg_blob(std::string* seg_blob) {
  if (seg_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.seg_blob_.SetAllocated(seg_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}

// optional string vpt_blob = 2 [default = "fc_out"];
inline bool NetworkParam::_internal_has_vpt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_vpt_blob() const {
  return _internal_has_vpt_blob();
}
inline void NetworkParam::clear_vpt_blob() {
  _impl_.vpt_blob_.ClearToDefault(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_vpt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::vpt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
  if (_impl_.vpt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_vpt_blob_.get();
  return _internal_vpt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_vpt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.vpt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}
inline std::string* NetworkParam::mutable_vpt_blob() {
  std::string* _s = _internal_mutable_vpt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_vpt_blob() const {
  return _impl_.vpt_blob_.Get();
}
inline void NetworkParam::_internal_set_vpt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vpt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_vpt_blob() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.vpt_blob_.Mutable(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_vpt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_vpt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
  if (!_internal_has_vpt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.vpt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_vpt_blob(std::string* vpt_blob) {
  if (vpt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vpt_blob_.SetAllocated(vpt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}

// optional string input_blob = 3 [default = "data"];
inline bool NetworkParam::_internal_has_input_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkParam::has_input_blob() const {
  return _internal_has_input_blob();
}
inline void NetworkParam::clear_input_blob() {
  _impl_.input_blob_.ClearToDefault(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
  if (_impl_.input_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_input_blob_.get();
  return _internal_input_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_input_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.input_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}
inline std::string* NetworkParam::mutable_input_blob() {
  std::string* _s = _internal_mutable_input_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_input_blob() const {
  return _impl_.input_blob_.Get();
}
inline void NetworkParam::_internal_set_input_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.input_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_input_blob() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.input_blob_.Mutable(::apollo::perception::camera::darkSCNN::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
  if (!_internal_has_input_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.input_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_input_blob(std::string* input_blob) {
  if (input_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.input_blob_.SetAllocated(input_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace darkSCNN
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fproto_2fdarkSCNN_2eproto
