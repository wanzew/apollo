// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/lane/postprocessor/darkSCNN/proto/darkSCNN_postprocessor.proto

#include "modules/perception/camera/lib/lane/postprocessor/darkSCNN/proto/darkSCNN_postprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace camera {
namespace lane {
PROTOBUF_CONSTEXPR DarkSCNNLanePostprocessorParam::DarkSCNNLanePostprocessorParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roi_width_)*/1920u
  , /*decltype(_impl_.lane_map_width_)*/640u
  , /*decltype(_impl_.lane_map_height_)*/480u
  , /*decltype(_impl_.roi_height_)*/768u
  , /*decltype(_impl_.roi_start_)*/312u} {}
struct DarkSCNNLanePostprocessorParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DarkSCNNLanePostprocessorParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DarkSCNNLanePostprocessorParamDefaultTypeInternal() {}
  union {
    DarkSCNNLanePostprocessorParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DarkSCNNLanePostprocessorParamDefaultTypeInternal _DarkSCNNLanePostprocessorParam_default_instance_;
}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_.lane_map_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_.lane_map_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_.roi_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_.roi_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam, _impl_.roi_width_),
  1,
  2,
  3,
  4,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::camera::lane::_DarkSCNNLanePostprocessorParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\\modules/perception/camera/lib/lane/pos"
  "tprocessor/darkSCNN/proto/darkSCNN_postp"
  "rocessor.proto\022\035apollo.perception.camera"
  ".lane\"\245\001\n\036DarkSCNNLanePostprocessorParam"
  "\022\033\n\016lane_map_width\030\001 \001(\r:\003640\022\034\n\017lane_ma"
  "p_height\030\002 \001(\r:\003480\022\027\n\nroi_height\030\003 \001(\r:"
  "\003768\022\026\n\troi_start\030\004 \001(\r:\003312\022\027\n\troi_widt"
  "h\030\005 \001(\r:\0041920"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto = {
    false, false, 293, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto,
    "modules/perception/camera/lib/lane/postprocessor/darkSCNN/proto/darkSCNN_postprocessor.proto",
    &descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto,
    file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto(&descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto);
namespace apollo {
namespace perception {
namespace camera {
namespace lane {

// ===================================================================

class DarkSCNNLanePostprocessorParam::_Internal {
 public:
  using HasBits = decltype(std::declval<DarkSCNNLanePostprocessorParam>()._impl_._has_bits_);
  static void set_has_lane_map_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_map_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roi_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roi_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_roi_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DarkSCNNLanePostprocessorParam::DarkSCNNLanePostprocessorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
}
DarkSCNNLanePostprocessorParam::DarkSCNNLanePostprocessorParam(const DarkSCNNLanePostprocessorParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_width_){}
    , decltype(_impl_.lane_map_width_){}
    , decltype(_impl_.lane_map_height_){}
    , decltype(_impl_.roi_height_){}
    , decltype(_impl_.roi_start_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roi_width_, &from._impl_.roi_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roi_start_) -
    reinterpret_cast<char*>(&_impl_.roi_width_)) + sizeof(_impl_.roi_start_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
}

inline void DarkSCNNLanePostprocessorParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_width_){1920u}
    , decltype(_impl_.lane_map_width_){640u}
    , decltype(_impl_.lane_map_height_){480u}
    , decltype(_impl_.roi_height_){768u}
    , decltype(_impl_.roi_start_){312u}
  };
}

DarkSCNNLanePostprocessorParam::~DarkSCNNLanePostprocessorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DarkSCNNLanePostprocessorParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DarkSCNNLanePostprocessorParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DarkSCNNLanePostprocessorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    _impl_.roi_width_ = 1920u;
    _impl_.lane_map_width_ = 640u;
    _impl_.lane_map_height_ = 480u;
    _impl_.roi_height_ = 768u;
    _impl_.roi_start_ = 312u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DarkSCNNLanePostprocessorParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lane_map_width = 1 [default = 640];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lane_map_width(&has_bits);
          _impl_.lane_map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_map_height = 2 [default = 480];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane_map_height(&has_bits);
          _impl_.lane_map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roi_height = 3 [default = 768];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roi_height(&has_bits);
          _impl_.roi_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roi_start = 4 [default = 312];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_roi_start(&has_bits);
          _impl_.roi_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roi_width = 5 [default = 1920];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_roi_width(&has_bits);
          _impl_.roi_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DarkSCNNLanePostprocessorParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lane_map_width = 1 [default = 640];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_map_width(), target);
  }

  // optional uint32 lane_map_height = 2 [default = 480];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane_map_height(), target);
  }

  // optional uint32 roi_height = 3 [default = 768];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roi_height(), target);
  }

  // optional uint32 roi_start = 4 [default = 312];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_roi_start(), target);
  }

  // optional uint32 roi_width = 5 [default = 1920];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_roi_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  return target;
}

size_t DarkSCNNLanePostprocessorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 roi_width = 5 [default = 1920];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roi_width());
    }

    // optional uint32 lane_map_width = 1 [default = 640];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_map_width());
    }

    // optional uint32 lane_map_height = 2 [default = 480];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_map_height());
    }

    // optional uint32 roi_height = 3 [default = 768];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roi_height());
    }

    // optional uint32 roi_start = 4 [default = 312];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roi_start());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DarkSCNNLanePostprocessorParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DarkSCNNLanePostprocessorParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DarkSCNNLanePostprocessorParam::GetClassData() const { return &_class_data_; }

void DarkSCNNLanePostprocessorParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DarkSCNNLanePostprocessorParam *>(to)->MergeFrom(
      static_cast<const DarkSCNNLanePostprocessorParam &>(from));
}


void DarkSCNNLanePostprocessorParam::MergeFrom(const DarkSCNNLanePostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.roi_width_ = from._impl_.roi_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lane_map_width_ = from._impl_.lane_map_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lane_map_height_ = from._impl_.lane_map_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.roi_height_ = from._impl_.roi_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.roi_start_ = from._impl_.roi_start_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DarkSCNNLanePostprocessorParam::CopyFrom(const DarkSCNNLanePostprocessorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DarkSCNNLanePostprocessorParam::IsInitialized() const {
  return true;
}

void DarkSCNNLanePostprocessorParam::InternalSwap(DarkSCNNLanePostprocessorParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.roi_width_, other->_impl_.roi_width_);
  swap(_impl_.lane_map_width_, other->_impl_.lane_map_width_);
  swap(_impl_.lane_map_height_, other->_impl_.lane_map_height_);
  swap(_impl_.roi_height_, other->_impl_.roi_height_);
  swap(_impl_.roi_start_, other->_impl_.roi_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DarkSCNNLanePostprocessorParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto_getter, &descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto_once,
      file_level_metadata_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam*
Arena::CreateMaybeMessage< ::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
