// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/lane/postprocessor/darkSCNN/proto/darkSCNN_postprocessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace lane {
class DarkSCNNLanePostprocessorParam;
struct DarkSCNNLanePostprocessorParamDefaultTypeInternal;
extern DarkSCNNLanePostprocessorParamDefaultTypeInternal _DarkSCNNLanePostprocessorParam_default_instance_;
}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam* Arena::CreateMaybeMessage<::apollo::perception::camera::lane::DarkSCNNLanePostprocessorParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace lane {

// ===================================================================

class DarkSCNNLanePostprocessorParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam) */ {
 public:
  inline DarkSCNNLanePostprocessorParam() : DarkSCNNLanePostprocessorParam(nullptr) {}
  ~DarkSCNNLanePostprocessorParam() override;
  explicit PROTOBUF_CONSTEXPR DarkSCNNLanePostprocessorParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DarkSCNNLanePostprocessorParam(const DarkSCNNLanePostprocessorParam& from);
  DarkSCNNLanePostprocessorParam(DarkSCNNLanePostprocessorParam&& from) noexcept
    : DarkSCNNLanePostprocessorParam() {
    *this = ::std::move(from);
  }

  inline DarkSCNNLanePostprocessorParam& operator=(const DarkSCNNLanePostprocessorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DarkSCNNLanePostprocessorParam& operator=(DarkSCNNLanePostprocessorParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DarkSCNNLanePostprocessorParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const DarkSCNNLanePostprocessorParam* internal_default_instance() {
    return reinterpret_cast<const DarkSCNNLanePostprocessorParam*>(
               &_DarkSCNNLanePostprocessorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DarkSCNNLanePostprocessorParam& a, DarkSCNNLanePostprocessorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DarkSCNNLanePostprocessorParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DarkSCNNLanePostprocessorParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DarkSCNNLanePostprocessorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DarkSCNNLanePostprocessorParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DarkSCNNLanePostprocessorParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DarkSCNNLanePostprocessorParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DarkSCNNLanePostprocessorParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam";
  }
  protected:
  explicit DarkSCNNLanePostprocessorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiWidthFieldNumber = 5,
    kLaneMapWidthFieldNumber = 1,
    kLaneMapHeightFieldNumber = 2,
    kRoiHeightFieldNumber = 3,
    kRoiStartFieldNumber = 4,
  };
  // optional uint32 roi_width = 5 [default = 1920];
  bool has_roi_width() const;
  private:
  bool _internal_has_roi_width() const;
  public:
  void clear_roi_width();
  uint32_t roi_width() const;
  void set_roi_width(uint32_t value);
  private:
  uint32_t _internal_roi_width() const;
  void _internal_set_roi_width(uint32_t value);
  public:

  // optional uint32 lane_map_width = 1 [default = 640];
  bool has_lane_map_width() const;
  private:
  bool _internal_has_lane_map_width() const;
  public:
  void clear_lane_map_width();
  uint32_t lane_map_width() const;
  void set_lane_map_width(uint32_t value);
  private:
  uint32_t _internal_lane_map_width() const;
  void _internal_set_lane_map_width(uint32_t value);
  public:

  // optional uint32 lane_map_height = 2 [default = 480];
  bool has_lane_map_height() const;
  private:
  bool _internal_has_lane_map_height() const;
  public:
  void clear_lane_map_height();
  uint32_t lane_map_height() const;
  void set_lane_map_height(uint32_t value);
  private:
  uint32_t _internal_lane_map_height() const;
  void _internal_set_lane_map_height(uint32_t value);
  public:

  // optional uint32 roi_height = 3 [default = 768];
  bool has_roi_height() const;
  private:
  bool _internal_has_roi_height() const;
  public:
  void clear_roi_height();
  uint32_t roi_height() const;
  void set_roi_height(uint32_t value);
  private:
  uint32_t _internal_roi_height() const;
  void _internal_set_roi_height(uint32_t value);
  public:

  // optional uint32 roi_start = 4 [default = 312];
  bool has_roi_start() const;
  private:
  bool _internal_has_roi_start() const;
  public:
  void clear_roi_start();
  uint32_t roi_start() const;
  void set_roi_start(uint32_t value);
  private:
  uint32_t _internal_roi_start() const;
  void _internal_set_roi_start(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t roi_width_;
    uint32_t lane_map_width_;
    uint32_t lane_map_height_;
    uint32_t roi_height_;
    uint32_t roi_start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DarkSCNNLanePostprocessorParam

// optional uint32 lane_map_width = 1 [default = 640];
inline bool DarkSCNNLanePostprocessorParam::_internal_has_lane_map_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DarkSCNNLanePostprocessorParam::has_lane_map_width() const {
  return _internal_has_lane_map_width();
}
inline void DarkSCNNLanePostprocessorParam::clear_lane_map_width() {
  _impl_.lane_map_width_ = 640u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DarkSCNNLanePostprocessorParam::_internal_lane_map_width() const {
  return _impl_.lane_map_width_;
}
inline uint32_t DarkSCNNLanePostprocessorParam::lane_map_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.lane_map_width)
  return _internal_lane_map_width();
}
inline void DarkSCNNLanePostprocessorParam::_internal_set_lane_map_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_map_width_ = value;
}
inline void DarkSCNNLanePostprocessorParam::set_lane_map_width(uint32_t value) {
  _internal_set_lane_map_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.lane_map_width)
}

// optional uint32 lane_map_height = 2 [default = 480];
inline bool DarkSCNNLanePostprocessorParam::_internal_has_lane_map_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DarkSCNNLanePostprocessorParam::has_lane_map_height() const {
  return _internal_has_lane_map_height();
}
inline void DarkSCNNLanePostprocessorParam::clear_lane_map_height() {
  _impl_.lane_map_height_ = 480u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DarkSCNNLanePostprocessorParam::_internal_lane_map_height() const {
  return _impl_.lane_map_height_;
}
inline uint32_t DarkSCNNLanePostprocessorParam::lane_map_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.lane_map_height)
  return _internal_lane_map_height();
}
inline void DarkSCNNLanePostprocessorParam::_internal_set_lane_map_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_map_height_ = value;
}
inline void DarkSCNNLanePostprocessorParam::set_lane_map_height(uint32_t value) {
  _internal_set_lane_map_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.lane_map_height)
}

// optional uint32 roi_height = 3 [default = 768];
inline bool DarkSCNNLanePostprocessorParam::_internal_has_roi_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DarkSCNNLanePostprocessorParam::has_roi_height() const {
  return _internal_has_roi_height();
}
inline void DarkSCNNLanePostprocessorParam::clear_roi_height() {
  _impl_.roi_height_ = 768u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DarkSCNNLanePostprocessorParam::_internal_roi_height() const {
  return _impl_.roi_height_;
}
inline uint32_t DarkSCNNLanePostprocessorParam::roi_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_height)
  return _internal_roi_height();
}
inline void DarkSCNNLanePostprocessorParam::_internal_set_roi_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.roi_height_ = value;
}
inline void DarkSCNNLanePostprocessorParam::set_roi_height(uint32_t value) {
  _internal_set_roi_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_height)
}

// optional uint32 roi_start = 4 [default = 312];
inline bool DarkSCNNLanePostprocessorParam::_internal_has_roi_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DarkSCNNLanePostprocessorParam::has_roi_start() const {
  return _internal_has_roi_start();
}
inline void DarkSCNNLanePostprocessorParam::clear_roi_start() {
  _impl_.roi_start_ = 312u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DarkSCNNLanePostprocessorParam::_internal_roi_start() const {
  return _impl_.roi_start_;
}
inline uint32_t DarkSCNNLanePostprocessorParam::roi_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_start)
  return _internal_roi_start();
}
inline void DarkSCNNLanePostprocessorParam::_internal_set_roi_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.roi_start_ = value;
}
inline void DarkSCNNLanePostprocessorParam::set_roi_start(uint32_t value) {
  _internal_set_roi_start(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_start)
}

// optional uint32 roi_width = 5 [default = 1920];
inline bool DarkSCNNLanePostprocessorParam::_internal_has_roi_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DarkSCNNLanePostprocessorParam::has_roi_width() const {
  return _internal_has_roi_width();
}
inline void DarkSCNNLanePostprocessorParam::clear_roi_width() {
  _impl_.roi_width_ = 1920u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t DarkSCNNLanePostprocessorParam::_internal_roi_width() const {
  return _impl_.roi_width_;
}
inline uint32_t DarkSCNNLanePostprocessorParam::roi_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_width)
  return _internal_roi_width();
}
inline void DarkSCNNLanePostprocessorParam::_internal_set_roi_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roi_width_ = value;
}
inline void DarkSCNNLanePostprocessorParam::set_roi_width(uint32_t value) {
  _internal_set_roi_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.DarkSCNNLanePostprocessorParam.roi_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdarkSCNN_2fproto_2fdarkSCNN_5fpostprocessor_2eproto
