// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/lane/postprocessor/denseline/proto/denseline_postprocessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace lane {
class LanePostprocessorParam;
struct LanePostprocessorParamDefaultTypeInternal;
extern LanePostprocessorParamDefaultTypeInternal _LanePostprocessorParam_default_instance_;
}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::lane::LanePostprocessorParam* Arena::CreateMaybeMessage<::apollo::perception::camera::lane::LanePostprocessorParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace lane {

// ===================================================================

class LanePostprocessorParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.lane.LanePostprocessorParam) */ {
 public:
  inline LanePostprocessorParam() : LanePostprocessorParam(nullptr) {}
  ~LanePostprocessorParam() override;
  explicit PROTOBUF_CONSTEXPR LanePostprocessorParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LanePostprocessorParam(const LanePostprocessorParam& from);
  LanePostprocessorParam(LanePostprocessorParam&& from) noexcept
    : LanePostprocessorParam() {
    *this = ::std::move(from);
  }

  inline LanePostprocessorParam& operator=(const LanePostprocessorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanePostprocessorParam& operator=(LanePostprocessorParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LanePostprocessorParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const LanePostprocessorParam* internal_default_instance() {
    return reinterpret_cast<const LanePostprocessorParam*>(
               &_LanePostprocessorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LanePostprocessorParam& a, LanePostprocessorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(LanePostprocessorParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LanePostprocessorParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LanePostprocessorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LanePostprocessorParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LanePostprocessorParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LanePostprocessorParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanePostprocessorParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.lane.LanePostprocessorParam";
  }
  protected:
  explicit LanePostprocessorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOmitBottomLineNumFieldNumber = 1,
    kLanelineMapScoreThreshFieldNumber = 2,
    kLanelinePointScoreThreshFieldNumber = 3,
    kLanelinePointMinNumThreshFieldNumber = 4,
    kCcValidPixelsRatioFieldNumber = 5,
    kLanelineRejectDistThreshFieldNumber = 6,
  };
  // optional int32 omit_bottom_line_num = 1 [default = 3];
  bool has_omit_bottom_line_num() const;
  private:
  bool _internal_has_omit_bottom_line_num() const;
  public:
  void clear_omit_bottom_line_num();
  int32_t omit_bottom_line_num() const;
  void set_omit_bottom_line_num(int32_t value);
  private:
  int32_t _internal_omit_bottom_line_num() const;
  void _internal_set_omit_bottom_line_num(int32_t value);
  public:

  // optional float laneline_map_score_thresh = 2 [default = 0.4];
  bool has_laneline_map_score_thresh() const;
  private:
  bool _internal_has_laneline_map_score_thresh() const;
  public:
  void clear_laneline_map_score_thresh();
  float laneline_map_score_thresh() const;
  void set_laneline_map_score_thresh(float value);
  private:
  float _internal_laneline_map_score_thresh() const;
  void _internal_set_laneline_map_score_thresh(float value);
  public:

  // optional float laneline_point_score_thresh = 3 [default = 0.6];
  bool has_laneline_point_score_thresh() const;
  private:
  bool _internal_has_laneline_point_score_thresh() const;
  public:
  void clear_laneline_point_score_thresh();
  float laneline_point_score_thresh() const;
  void set_laneline_point_score_thresh(float value);
  private:
  float _internal_laneline_point_score_thresh() const;
  void _internal_set_laneline_point_score_thresh(float value);
  public:

  // optional int32 laneline_point_min_num_thresh = 4 [default = 2];
  bool has_laneline_point_min_num_thresh() const;
  private:
  bool _internal_has_laneline_point_min_num_thresh() const;
  public:
  void clear_laneline_point_min_num_thresh();
  int32_t laneline_point_min_num_thresh() const;
  void set_laneline_point_min_num_thresh(int32_t value);
  private:
  int32_t _internal_laneline_point_min_num_thresh() const;
  void _internal_set_laneline_point_min_num_thresh(int32_t value);
  public:

  // optional float cc_valid_pixels_ratio = 5 [default = 2];
  bool has_cc_valid_pixels_ratio() const;
  private:
  bool _internal_has_cc_valid_pixels_ratio() const;
  public:
  void clear_cc_valid_pixels_ratio();
  float cc_valid_pixels_ratio() const;
  void set_cc_valid_pixels_ratio(float value);
  private:
  float _internal_cc_valid_pixels_ratio() const;
  void _internal_set_cc_valid_pixels_ratio(float value);
  public:

  // optional float laneline_reject_dist_thresh = 6 [default = 50];
  bool has_laneline_reject_dist_thresh() const;
  private:
  bool _internal_has_laneline_reject_dist_thresh() const;
  public:
  void clear_laneline_reject_dist_thresh();
  float laneline_reject_dist_thresh() const;
  void set_laneline_reject_dist_thresh(float value);
  private:
  float _internal_laneline_reject_dist_thresh() const;
  void _internal_set_laneline_reject_dist_thresh(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.lane.LanePostprocessorParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t omit_bottom_line_num_;
    float laneline_map_score_thresh_;
    float laneline_point_score_thresh_;
    int32_t laneline_point_min_num_thresh_;
    float cc_valid_pixels_ratio_;
    float laneline_reject_dist_thresh_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LanePostprocessorParam

// optional int32 omit_bottom_line_num = 1 [default = 3];
inline bool LanePostprocessorParam::_internal_has_omit_bottom_line_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_omit_bottom_line_num() const {
  return _internal_has_omit_bottom_line_num();
}
inline void LanePostprocessorParam::clear_omit_bottom_line_num() {
  _impl_.omit_bottom_line_num_ = 3;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t LanePostprocessorParam::_internal_omit_bottom_line_num() const {
  return _impl_.omit_bottom_line_num_;
}
inline int32_t LanePostprocessorParam::omit_bottom_line_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.omit_bottom_line_num)
  return _internal_omit_bottom_line_num();
}
inline void LanePostprocessorParam::_internal_set_omit_bottom_line_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.omit_bottom_line_num_ = value;
}
inline void LanePostprocessorParam::set_omit_bottom_line_num(int32_t value) {
  _internal_set_omit_bottom_line_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.omit_bottom_line_num)
}

// optional float laneline_map_score_thresh = 2 [default = 0.4];
inline bool LanePostprocessorParam::_internal_has_laneline_map_score_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_laneline_map_score_thresh() const {
  return _internal_has_laneline_map_score_thresh();
}
inline void LanePostprocessorParam::clear_laneline_map_score_thresh() {
  _impl_.laneline_map_score_thresh_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LanePostprocessorParam::_internal_laneline_map_score_thresh() const {
  return _impl_.laneline_map_score_thresh_;
}
inline float LanePostprocessorParam::laneline_map_score_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.laneline_map_score_thresh)
  return _internal_laneline_map_score_thresh();
}
inline void LanePostprocessorParam::_internal_set_laneline_map_score_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.laneline_map_score_thresh_ = value;
}
inline void LanePostprocessorParam::set_laneline_map_score_thresh(float value) {
  _internal_set_laneline_map_score_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.laneline_map_score_thresh)
}

// optional float laneline_point_score_thresh = 3 [default = 0.6];
inline bool LanePostprocessorParam::_internal_has_laneline_point_score_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_laneline_point_score_thresh() const {
  return _internal_has_laneline_point_score_thresh();
}
inline void LanePostprocessorParam::clear_laneline_point_score_thresh() {
  _impl_.laneline_point_score_thresh_ = 0.6f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LanePostprocessorParam::_internal_laneline_point_score_thresh() const {
  return _impl_.laneline_point_score_thresh_;
}
inline float LanePostprocessorParam::laneline_point_score_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.laneline_point_score_thresh)
  return _internal_laneline_point_score_thresh();
}
inline void LanePostprocessorParam::_internal_set_laneline_point_score_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.laneline_point_score_thresh_ = value;
}
inline void LanePostprocessorParam::set_laneline_point_score_thresh(float value) {
  _internal_set_laneline_point_score_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.laneline_point_score_thresh)
}

// optional int32 laneline_point_min_num_thresh = 4 [default = 2];
inline bool LanePostprocessorParam::_internal_has_laneline_point_min_num_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_laneline_point_min_num_thresh() const {
  return _internal_has_laneline_point_min_num_thresh();
}
inline void LanePostprocessorParam::clear_laneline_point_min_num_thresh() {
  _impl_.laneline_point_min_num_thresh_ = 2;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t LanePostprocessorParam::_internal_laneline_point_min_num_thresh() const {
  return _impl_.laneline_point_min_num_thresh_;
}
inline int32_t LanePostprocessorParam::laneline_point_min_num_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.laneline_point_min_num_thresh)
  return _internal_laneline_point_min_num_thresh();
}
inline void LanePostprocessorParam::_internal_set_laneline_point_min_num_thresh(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.laneline_point_min_num_thresh_ = value;
}
inline void LanePostprocessorParam::set_laneline_point_min_num_thresh(int32_t value) {
  _internal_set_laneline_point_min_num_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.laneline_point_min_num_thresh)
}

// optional float cc_valid_pixels_ratio = 5 [default = 2];
inline bool LanePostprocessorParam::_internal_has_cc_valid_pixels_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_cc_valid_pixels_ratio() const {
  return _internal_has_cc_valid_pixels_ratio();
}
inline void LanePostprocessorParam::clear_cc_valid_pixels_ratio() {
  _impl_.cc_valid_pixels_ratio_ = 2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float LanePostprocessorParam::_internal_cc_valid_pixels_ratio() const {
  return _impl_.cc_valid_pixels_ratio_;
}
inline float LanePostprocessorParam::cc_valid_pixels_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.cc_valid_pixels_ratio)
  return _internal_cc_valid_pixels_ratio();
}
inline void LanePostprocessorParam::_internal_set_cc_valid_pixels_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cc_valid_pixels_ratio_ = value;
}
inline void LanePostprocessorParam::set_cc_valid_pixels_ratio(float value) {
  _internal_set_cc_valid_pixels_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.cc_valid_pixels_ratio)
}

// optional float laneline_reject_dist_thresh = 6 [default = 50];
inline bool LanePostprocessorParam::_internal_has_laneline_reject_dist_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LanePostprocessorParam::has_laneline_reject_dist_thresh() const {
  return _internal_has_laneline_reject_dist_thresh();
}
inline void LanePostprocessorParam::clear_laneline_reject_dist_thresh() {
  _impl_.laneline_reject_dist_thresh_ = 50;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float LanePostprocessorParam::_internal_laneline_reject_dist_thresh() const {
  return _impl_.laneline_reject_dist_thresh_;
}
inline float LanePostprocessorParam::laneline_reject_dist_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.lane.LanePostprocessorParam.laneline_reject_dist_thresh)
  return _internal_laneline_reject_dist_thresh();
}
inline void LanePostprocessorParam::_internal_set_laneline_reject_dist_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.laneline_reject_dist_thresh_ = value;
}
inline void LanePostprocessorParam::set_laneline_reject_dist_thresh(float value) {
  _internal_set_laneline_reject_dist_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.lane.LanePostprocessorParam.laneline_reject_dist_thresh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lane
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fpostprocessor_2fdenseline_2fproto_2fdenseline_5fpostprocessor_2eproto
