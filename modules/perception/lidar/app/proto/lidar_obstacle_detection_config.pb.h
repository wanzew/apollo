// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/app/proto/lidar_obstacle_detection_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class LidarObstacleDetectionConfig;
struct LidarObstacleDetectionConfigDefaultTypeInternal;
extern LidarObstacleDetectionConfigDefaultTypeInternal _LidarObstacleDetectionConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::LidarObstacleDetectionConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::LidarObstacleDetectionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class LidarObstacleDetectionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.LidarObstacleDetectionConfig) */ {
 public:
  inline LidarObstacleDetectionConfig() : LidarObstacleDetectionConfig(nullptr) {}
  ~LidarObstacleDetectionConfig() override;
  explicit PROTOBUF_CONSTEXPR LidarObstacleDetectionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LidarObstacleDetectionConfig(const LidarObstacleDetectionConfig& from);
  LidarObstacleDetectionConfig(LidarObstacleDetectionConfig&& from) noexcept
    : LidarObstacleDetectionConfig() {
    *this = ::std::move(from);
  }

  inline LidarObstacleDetectionConfig& operator=(const LidarObstacleDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarObstacleDetectionConfig& operator=(LidarObstacleDetectionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarObstacleDetectionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarObstacleDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const LidarObstacleDetectionConfig*>(
               &_LidarObstacleDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LidarObstacleDetectionConfig& a, LidarObstacleDetectionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarObstacleDetectionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarObstacleDetectionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarObstacleDetectionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LidarObstacleDetectionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LidarObstacleDetectionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LidarObstacleDetectionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarObstacleDetectionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.LidarObstacleDetectionConfig";
  }
  protected:
  explicit LidarObstacleDetectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreprocessorFieldNumber = 1,
    kDetectorFieldNumber = 2,
    kUseMapManagerFieldNumber = 3,
    kUseObjectFilterBankFieldNumber = 4,
  };
  // optional string preprocessor = 1 [default = "PointCloudPreprocessor"];
  bool has_preprocessor() const;
  private:
  bool _internal_has_preprocessor() const;
  public:
  void clear_preprocessor();
  const std::string& preprocessor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preprocessor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preprocessor();
  PROTOBUF_NODISCARD std::string* release_preprocessor();
  void set_allocated_preprocessor(std::string* preprocessor);
  private:
  const std::string& _internal_preprocessor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preprocessor(const std::string& value);
  std::string* _internal_mutable_preprocessor();
  public:

  // optional string detector = 2 [default = "PointPillarsDetection"];
  bool has_detector() const;
  private:
  bool _internal_has_detector() const;
  public:
  void clear_detector();
  const std::string& detector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detector();
  PROTOBUF_NODISCARD std::string* release_detector();
  void set_allocated_detector(std::string* detector);
  private:
  const std::string& _internal_detector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detector(const std::string& value);
  std::string* _internal_mutable_detector();
  public:

  // optional bool use_map_manager = 3 [default = true];
  bool has_use_map_manager() const;
  private:
  bool _internal_has_use_map_manager() const;
  public:
  void clear_use_map_manager();
  bool use_map_manager() const;
  void set_use_map_manager(bool value);
  private:
  bool _internal_use_map_manager() const;
  void _internal_set_use_map_manager(bool value);
  public:

  // optional bool use_object_filter_bank = 4 [default = true];
  bool has_use_object_filter_bank() const;
  private:
  bool _internal_has_use_object_filter_bank() const;
  public:
  void clear_use_object_filter_bank();
  bool use_object_filter_bank() const;
  void set_use_object_filter_bank(bool value);
  private:
  bool _internal_use_object_filter_bank() const;
  void _internal_set_use_object_filter_bank(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.LidarObstacleDetectionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_preprocessor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preprocessor_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_detector_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detector_;
    bool use_map_manager_;
    bool use_object_filter_bank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarObstacleDetectionConfig

// optional string preprocessor = 1 [default = "PointCloudPreprocessor"];
inline bool LidarObstacleDetectionConfig::_internal_has_preprocessor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarObstacleDetectionConfig::has_preprocessor() const {
  return _internal_has_preprocessor();
}
inline void LidarObstacleDetectionConfig::clear_preprocessor() {
  _impl_.preprocessor_.ClearToDefault(::apollo::perception::lidar::LidarObstacleDetectionConfig::Impl_::_i_give_permission_to_break_this_code_default_preprocessor_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarObstacleDetectionConfig::preprocessor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleDetectionConfig.preprocessor)
  if (_impl_.preprocessor_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_preprocessor_.get();
  return _internal_preprocessor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarObstacleDetectionConfig::set_preprocessor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.preprocessor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleDetectionConfig.preprocessor)
}
inline std::string* LidarObstacleDetectionConfig::mutable_preprocessor() {
  std::string* _s = _internal_mutable_preprocessor();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.LidarObstacleDetectionConfig.preprocessor)
  return _s;
}
inline const std::string& LidarObstacleDetectionConfig::_internal_preprocessor() const {
  return _impl_.preprocessor_.Get();
}
inline void LidarObstacleDetectionConfig::_internal_set_preprocessor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.preprocessor_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarObstacleDetectionConfig::_internal_mutable_preprocessor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.preprocessor_.Mutable(::apollo::perception::lidar::LidarObstacleDetectionConfig::Impl_::_i_give_permission_to_break_this_code_default_preprocessor_, GetArenaForAllocation());
}
inline std::string* LidarObstacleDetectionConfig::release_preprocessor() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.LidarObstacleDetectionConfig.preprocessor)
  if (!_internal_has_preprocessor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.preprocessor_.Release();
  return p;
}
inline void LidarObstacleDetectionConfig::set_allocated_preprocessor(std::string* preprocessor) {
  if (preprocessor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.preprocessor_.SetAllocated(preprocessor, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.LidarObstacleDetectionConfig.preprocessor)
}

// optional string detector = 2 [default = "PointPillarsDetection"];
inline bool LidarObstacleDetectionConfig::_internal_has_detector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarObstacleDetectionConfig::has_detector() const {
  return _internal_has_detector();
}
inline void LidarObstacleDetectionConfig::clear_detector() {
  _impl_.detector_.ClearToDefault(::apollo::perception::lidar::LidarObstacleDetectionConfig::Impl_::_i_give_permission_to_break_this_code_default_detector_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LidarObstacleDetectionConfig::detector() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleDetectionConfig.detector)
  if (_impl_.detector_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_detector_.get();
  return _internal_detector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LidarObstacleDetectionConfig::set_detector(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.detector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleDetectionConfig.detector)
}
inline std::string* LidarObstacleDetectionConfig::mutable_detector() {
  std::string* _s = _internal_mutable_detector();
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.LidarObstacleDetectionConfig.detector)
  return _s;
}
inline const std::string& LidarObstacleDetectionConfig::_internal_detector() const {
  return _impl_.detector_.Get();
}
inline void LidarObstacleDetectionConfig::_internal_set_detector(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.detector_.Set(value, GetArenaForAllocation());
}
inline std::string* LidarObstacleDetectionConfig::_internal_mutable_detector() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.detector_.Mutable(::apollo::perception::lidar::LidarObstacleDetectionConfig::Impl_::_i_give_permission_to_break_this_code_default_detector_, GetArenaForAllocation());
}
inline std::string* LidarObstacleDetectionConfig::release_detector() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.LidarObstacleDetectionConfig.detector)
  if (!_internal_has_detector()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.detector_.Release();
  return p;
}
inline void LidarObstacleDetectionConfig::set_allocated_detector(std::string* detector) {
  if (detector != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.detector_.SetAllocated(detector, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.LidarObstacleDetectionConfig.detector)
}

// optional bool use_map_manager = 3 [default = true];
inline bool LidarObstacleDetectionConfig::_internal_has_use_map_manager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LidarObstacleDetectionConfig::has_use_map_manager() const {
  return _internal_has_use_map_manager();
}
inline void LidarObstacleDetectionConfig::clear_use_map_manager() {
  _impl_.use_map_manager_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool LidarObstacleDetectionConfig::_internal_use_map_manager() const {
  return _impl_.use_map_manager_;
}
inline bool LidarObstacleDetectionConfig::use_map_manager() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleDetectionConfig.use_map_manager)
  return _internal_use_map_manager();
}
inline void LidarObstacleDetectionConfig::_internal_set_use_map_manager(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.use_map_manager_ = value;
}
inline void LidarObstacleDetectionConfig::set_use_map_manager(bool value) {
  _internal_set_use_map_manager(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleDetectionConfig.use_map_manager)
}

// optional bool use_object_filter_bank = 4 [default = true];
inline bool LidarObstacleDetectionConfig::_internal_has_use_object_filter_bank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LidarObstacleDetectionConfig::has_use_object_filter_bank() const {
  return _internal_has_use_object_filter_bank();
}
inline void LidarObstacleDetectionConfig::clear_use_object_filter_bank() {
  _impl_.use_object_filter_bank_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool LidarObstacleDetectionConfig::_internal_use_object_filter_bank() const {
  return _impl_.use_object_filter_bank_;
}
inline bool LidarObstacleDetectionConfig::use_object_filter_bank() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleDetectionConfig.use_object_filter_bank)
  return _internal_use_object_filter_bank();
}
inline void LidarObstacleDetectionConfig::_internal_set_use_object_filter_bank(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_object_filter_bank_ = value;
}
inline void LidarObstacleDetectionConfig::set_use_object_filter_bank(bool value) {
  _internal_set_use_object_filter_bank(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleDetectionConfig.use_object_filter_bank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fdetection_5fconfig_2eproto
