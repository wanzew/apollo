// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/detector/ncut_segmentation/proto/ncut_param.proto

#include "modules/perception/lidar/lib/detector/ncut_segmentation/proto/ncut_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace lidar {
PROTOBUF_CONSTEXPR NCutSegmentationParam::NCutSegmentationParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ground_detector_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roi_filter_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ncut_param_)*/nullptr
  , /*decltype(_impl_.grid_radius_)*/80
  , /*decltype(_impl_.height_threshold_)*/2.5f
  , /*decltype(_impl_.partition_cell_size_)*/1
  , /*decltype(_impl_.vehicle_filter_cell_size_)*/0.3f
  , /*decltype(_impl_.pedestrian_filter_cell_size_)*/0.1f
  , /*decltype(_impl_.outlier_length_)*/0.1f
  , /*decltype(_impl_.outlier_width_)*/0.1f
  , /*decltype(_impl_.outlier_height_)*/0.3f
  , /*decltype(_impl_.outlier_min_num_points_)*/3u
  , /*decltype(_impl_.remove_ground_points_)*/true
  , /*decltype(_impl_.remove_roi_)*/true
  , /*decltype(_impl_.do_classification_)*/true} {}
struct NCutSegmentationParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NCutSegmentationParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NCutSegmentationParamDefaultTypeInternal() {}
  union {
    NCutSegmentationParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NCutSegmentationParamDefaultTypeInternal _NCutSegmentationParam_default_instance_;
PROTOBUF_CONSTEXPR NCutParam::NCutParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.felzenszwalb_min_size_)*/10u
  , /*decltype(_impl_.grid_radius_)*/80
  , /*decltype(_impl_.connect_radius_)*/1
  , /*decltype(_impl_.super_pixel_cell_size_)*/0.25f
  , /*decltype(_impl_.num_cuts_)*/5u
  , /*decltype(_impl_.ncuts_stop_threshold_)*/0.4f
  , /*decltype(_impl_.ncuts_enable_classifier_threshold_)*/0.3f
  , /*decltype(_impl_.sigma_space_)*/1.5f
  , /*decltype(_impl_.sigma_feature_)*/1.5f
  , /*decltype(_impl_.skeleton_cell_size_)*/0.2f
  , /*decltype(_impl_.patch_size_)*/3u
  , /*decltype(_impl_.outlier_width_threshold_)*/0.1f
  , /*decltype(_impl_.outlier_height_threshold_)*/0.1f
  , /*decltype(_impl_.outlier_num_points_threshold_)*/10u
  , /*decltype(_impl_.overlap_factor_)*/0.05f
  , /*decltype(_impl_.felzenszwalb_sigma_)*/0.5f
  , /*decltype(_impl_.felzenszwalb_k_)*/30} {}
struct NCutParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NCutParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NCutParamDefaultTypeInternal() {}
  union {
    NCutParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NCutParamDefaultTypeInternal _NCutParam_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.grid_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.height_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.partition_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.vehicle_filter_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.pedestrian_filter_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.outlier_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.outlier_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.outlier_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.outlier_min_num_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.ground_detector_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.roi_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.remove_ground_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.remove_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.do_classification_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _impl_.ncut_param_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  12,
  13,
  14,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.grid_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.connect_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.super_pixel_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.num_cuts_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.ncuts_stop_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.ncuts_enable_classifier_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.sigma_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.sigma_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.skeleton_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.patch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.outlier_width_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.outlier_height_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.outlier_num_points_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.overlap_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.felzenszwalb_sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.felzenszwalb_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _impl_.felzenszwalb_min_size_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::apollo::perception::lidar::NCutSegmentationParam)},
  { 36, 59, -1, sizeof(::apollo::perception::lidar::NCutParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::lidar::_NCutSegmentationParam_default_instance_._instance,
  &::apollo::perception::lidar::_NCutParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nNmodules/perception/lidar/lib/detector/"
  "ncut_segmentation/proto/ncut_param.proto"
  "\022\027apollo.perception.lidar\"\253\004\n\025NCutSegmen"
  "tationParam\022\027\n\013grid_radius\030\001 \001(\002:\00280\022\035\n\020"
  "height_threshold\030\002 \001(\002:\0032.5\022\036\n\023partition"
  "_cell_size\030\003 \001(\002:\0011\022%\n\030vehicle_filter_ce"
  "ll_size\030\004 \001(\002:\0030.3\022(\n\033pedestrian_filter_"
  "cell_size\030\005 \001(\002:\0030.1\022\033\n\016outlier_length\030\006"
  " \001(\002:\0030.1\022\032\n\routlier_width\030\007 \001(\002:\0030.1\022\033\n"
  "\016outlier_height\030\010 \001(\002:\0030.3\022!\n\026outlier_mi"
  "n_num_points\030\t \001(\r:\0013\0225\n\017ground_detector"
  "\030\n \001(\t:\034SpatioTemporalGroundDetector\022\"\n\n"
  "roi_filter\030\013 \001(\t:\016HdmapROIFilter\022\"\n\024remo"
  "ve_ground_points\030\014 \001(\010:\004true\022\030\n\nremove_r"
  "oi\030\r \001(\010:\004true\022\037\n\021do_classification\030\016 \001("
  "\010:\004true\0226\n\nncut_param\030\017 \001(\0132\".apollo.per"
  "ception.lidar.NCutParam\"\257\004\n\tNCutParam\022\027\n"
  "\013grid_radius\030\001 \001(\002:\00280\022\031\n\016connect_radius"
  "\030\002 \001(\002:\0011\022#\n\025super_pixel_cell_size\030\003 \001(\002"
  ":\0040.25\022\023\n\010num_cuts\030\004 \001(\r:\0015\022!\n\024ncuts_sto"
  "p_threshold\030\005 \001(\002:\0030.4\022.\n!ncuts_enable_c"
  "lassifier_threshold\030\006 \001(\002:\0030.3\022\030\n\013sigma_"
  "space\030\007 \001(\002:\0031.5\022\032\n\rsigma_feature\030\010 \001(\002:"
  "\0031.5\022\037\n\022skeleton_cell_size\030\t \001(\002:\0030.2\022\025\n"
  "\npatch_size\030\n \001(\r:\0013\022$\n\027outlier_width_th"
  "reshold\030\013 \001(\002:\0030.1\022%\n\030outlier_height_thr"
  "eshold\030\014 \001(\002:\0030.1\022(\n\034outlier_num_points_"
  "threshold\030\r \001(\r:\00210\022\034\n\016overlap_factor\030\016 "
  "\001(\002:\0040.05\022\037\n\022felzenszwalb_sigma\030\017 \001(\002:\0030"
  ".5\022\032\n\016felzenszwalb_k\030\020 \001(\002:\00230\022!\n\025felzen"
  "szwalb_min_size\030\021 \001(\r:\00210"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto = {
    false, false, 1225, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto,
    "modules/perception/lidar/lib/detector/ncut_segmentation/proto/ncut_param.proto",
    &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto::offsets,
    file_level_metadata_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto,
    file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto(&descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class NCutSegmentationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NCutSegmentationParam>()._impl_._has_bits_);
  static void set_has_grid_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_partition_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vehicle_filter_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pedestrian_filter_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_outlier_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_outlier_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_outlier_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_outlier_min_num_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ground_detector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roi_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remove_ground_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_remove_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_do_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::perception::lidar::NCutParam& ncut_param(const NCutSegmentationParam* msg);
  static void set_has_ncut_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::lidar::NCutParam&
NCutSegmentationParam::_Internal::ncut_param(const NCutSegmentationParam* msg) {
  return *msg->_impl_.ncut_param_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NCutSegmentationParam::Impl_::_i_give_permission_to_break_this_code_default_ground_detector_{{{"SpatioTemporalGroundDetector", 28}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NCutSegmentationParam::Impl_::_i_give_permission_to_break_this_code_default_roi_filter_{{{"HdmapROIFilter", 14}}, {nullptr}};
NCutSegmentationParam::NCutSegmentationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.NCutSegmentationParam)
}
NCutSegmentationParam::NCutSegmentationParam(const NCutSegmentationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ground_detector_){}
    , decltype(_impl_.roi_filter_){}
    , decltype(_impl_.ncut_param_){nullptr}
    , decltype(_impl_.grid_radius_){}
    , decltype(_impl_.height_threshold_){}
    , decltype(_impl_.partition_cell_size_){}
    , decltype(_impl_.vehicle_filter_cell_size_){}
    , decltype(_impl_.pedestrian_filter_cell_size_){}
    , decltype(_impl_.outlier_length_){}
    , decltype(_impl_.outlier_width_){}
    , decltype(_impl_.outlier_height_){}
    , decltype(_impl_.outlier_min_num_points_){}
    , decltype(_impl_.remove_ground_points_){}
    , decltype(_impl_.remove_roi_){}
    , decltype(_impl_.do_classification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ground_detector_.InitDefault();
  if (from._internal_has_ground_detector()) {
    _impl_.ground_detector_.Set(from._internal_ground_detector(), 
      GetArenaForAllocation());
  }
  _impl_.roi_filter_.InitDefault();
  if (from._internal_has_roi_filter()) {
    _impl_.roi_filter_.Set(from._internal_roi_filter(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ncut_param()) {
    _impl_.ncut_param_ = new ::apollo::perception::lidar::NCutParam(*from._impl_.ncut_param_);
  }
  ::memcpy(&_impl_.grid_radius_, &from._impl_.grid_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.do_classification_) -
    reinterpret_cast<char*>(&_impl_.grid_radius_)) + sizeof(_impl_.do_classification_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.NCutSegmentationParam)
}

inline void NCutSegmentationParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ground_detector_){}
    , decltype(_impl_.roi_filter_){}
    , decltype(_impl_.ncut_param_){nullptr}
    , decltype(_impl_.grid_radius_){80}
    , decltype(_impl_.height_threshold_){2.5f}
    , decltype(_impl_.partition_cell_size_){1}
    , decltype(_impl_.vehicle_filter_cell_size_){0.3f}
    , decltype(_impl_.pedestrian_filter_cell_size_){0.1f}
    , decltype(_impl_.outlier_length_){0.1f}
    , decltype(_impl_.outlier_width_){0.1f}
    , decltype(_impl_.outlier_height_){0.3f}
    , decltype(_impl_.outlier_min_num_points_){3u}
    , decltype(_impl_.remove_ground_points_){true}
    , decltype(_impl_.remove_roi_){true}
    , decltype(_impl_.do_classification_){true}
  };
  _impl_.ground_detector_.InitDefault();
  _impl_.roi_filter_.InitDefault();
}

NCutSegmentationParam::~NCutSegmentationParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.NCutSegmentationParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NCutSegmentationParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ground_detector_.Destroy();
  _impl_.roi_filter_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ncut_param_;
}

void NCutSegmentationParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NCutSegmentationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.NCutSegmentationParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ground_detector_.ClearToDefault(::apollo::perception::lidar::NCutSegmentationParam::Impl_::_i_give_permission_to_break_this_code_default_ground_detector_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.roi_filter_.ClearToDefault(::apollo::perception::lidar::NCutSegmentationParam::Impl_::_i_give_permission_to_break_this_code_default_roi_filter_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ncut_param_ != nullptr);
      _impl_.ncut_param_->Clear();
    }
    _impl_.grid_radius_ = 80;
    _impl_.height_threshold_ = 2.5f;
    _impl_.partition_cell_size_ = 1;
    _impl_.vehicle_filter_cell_size_ = 0.3f;
    _impl_.pedestrian_filter_cell_size_ = 0.1f;
  }
  if (cached_has_bits & 0x00007f00u) {
    _impl_.outlier_length_ = 0.1f;
    _impl_.outlier_width_ = 0.1f;
    _impl_.outlier_height_ = 0.3f;
    _impl_.outlier_min_num_points_ = 3u;
    _impl_.remove_ground_points_ = true;
    _impl_.remove_roi_ = true;
    _impl_.do_classification_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NCutSegmentationParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float grid_radius = 1 [default = 80];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_grid_radius(&has_bits);
          _impl_.grid_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float height_threshold = 2 [default = 2.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_height_threshold(&has_bits);
          _impl_.height_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float partition_cell_size = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_partition_cell_size(&has_bits);
          _impl_.partition_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vehicle_filter_cell_size = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_vehicle_filter_cell_size(&has_bits);
          _impl_.vehicle_filter_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_pedestrian_filter_cell_size(&has_bits);
          _impl_.pedestrian_filter_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float outlier_length = 6 [default = 0.1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_outlier_length(&has_bits);
          _impl_.outlier_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float outlier_width = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_outlier_width(&has_bits);
          _impl_.outlier_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float outlier_height = 8 [default = 0.3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_outlier_height(&has_bits);
          _impl_.outlier_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 outlier_min_num_points = 9 [default = 3];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_outlier_min_num_points(&has_bits);
          _impl_.outlier_min_num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ground_detector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.NCutSegmentationParam.ground_detector");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string roi_filter = 11 [default = "HdmapROIFilter"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_roi_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.NCutSegmentationParam.roi_filter");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool remove_ground_points = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_remove_ground_points(&has_bits);
          _impl_.remove_ground_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remove_roi = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_remove_roi(&has_bits);
          _impl_.remove_roi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool do_classification = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_do_classification(&has_bits);
          _impl_.do_classification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.lidar.NCutParam ncut_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ncut_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NCutSegmentationParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.NCutSegmentationParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float grid_radius = 1 [default = 80];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_grid_radius(), target);
  }

  // optional float height_threshold = 2 [default = 2.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_height_threshold(), target);
  }

  // optional float partition_cell_size = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_partition_cell_size(), target);
  }

  // optional float vehicle_filter_cell_size = 4 [default = 0.3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_vehicle_filter_cell_size(), target);
  }

  // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pedestrian_filter_cell_size(), target);
  }

  // optional float outlier_length = 6 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_outlier_length(), target);
  }

  // optional float outlier_width = 7 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_outlier_width(), target);
  }

  // optional float outlier_height = 8 [default = 0.3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_outlier_height(), target);
  }

  // optional uint32 outlier_min_num_points = 9 [default = 3];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_outlier_min_num_points(), target);
  }

  // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ground_detector().data(), static_cast<int>(this->_internal_ground_detector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NCutSegmentationParam.ground_detector");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ground_detector(), target);
  }

  // optional string roi_filter = 11 [default = "HdmapROIFilter"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_filter().data(), static_cast<int>(this->_internal_roi_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NCutSegmentationParam.roi_filter");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_roi_filter(), target);
  }

  // optional bool remove_ground_points = 12 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_remove_ground_points(), target);
  }

  // optional bool remove_roi = 13 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_remove_roi(), target);
  }

  // optional bool do_classification = 14 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_do_classification(), target);
  }

  // optional .apollo.perception.lidar.NCutParam ncut_param = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ncut_param(this),
        _Internal::ncut_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.NCutSegmentationParam)
  return target;
}

size_t NCutSegmentationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.NCutSegmentationParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ground_detector());
    }

    // optional string roi_filter = 11 [default = "HdmapROIFilter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_filter());
    }

    // optional .apollo.perception.lidar.NCutParam ncut_param = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ncut_param_);
    }

    // optional float grid_radius = 1 [default = 80];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float height_threshold = 2 [default = 2.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float partition_cell_size = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float vehicle_filter_cell_size = 4 [default = 0.3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float outlier_length = 6 [default = 0.1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float outlier_width = 7 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float outlier_height = 8 [default = 0.3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 outlier_min_num_points = 9 [default = 3];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_outlier_min_num_points());
    }

    // optional bool remove_ground_points = 12 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool remove_roi = 13 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool do_classification = 14 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NCutSegmentationParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NCutSegmentationParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NCutSegmentationParam::GetClassData() const { return &_class_data_; }

void NCutSegmentationParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NCutSegmentationParam *>(to)->MergeFrom(
      static_cast<const NCutSegmentationParam &>(from));
}


void NCutSegmentationParam::MergeFrom(const NCutSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.NCutSegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ground_detector(from._internal_ground_detector());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_roi_filter(from._internal_roi_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ncut_param()->::apollo::perception::lidar::NCutParam::MergeFrom(from._internal_ncut_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.grid_radius_ = from._impl_.grid_radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.height_threshold_ = from._impl_.height_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.partition_cell_size_ = from._impl_.partition_cell_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.vehicle_filter_cell_size_ = from._impl_.vehicle_filter_cell_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pedestrian_filter_cell_size_ = from._impl_.pedestrian_filter_cell_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.outlier_length_ = from._impl_.outlier_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.outlier_width_ = from._impl_.outlier_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.outlier_height_ = from._impl_.outlier_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.outlier_min_num_points_ = from._impl_.outlier_min_num_points_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.remove_ground_points_ = from._impl_.remove_ground_points_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.remove_roi_ = from._impl_.remove_roi_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.do_classification_ = from._impl_.do_classification_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NCutSegmentationParam::CopyFrom(const NCutSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.NCutSegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCutSegmentationParam::IsInitialized() const {
  return true;
}

void NCutSegmentationParam::InternalSwap(NCutSegmentationParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ground_detector_, lhs_arena,
      &other->_impl_.ground_detector_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roi_filter_, lhs_arena,
      &other->_impl_.roi_filter_, rhs_arena
  );
  swap(_impl_.ncut_param_, other->_impl_.ncut_param_);
  swap(_impl_.grid_radius_, other->_impl_.grid_radius_);
  swap(_impl_.height_threshold_, other->_impl_.height_threshold_);
  swap(_impl_.partition_cell_size_, other->_impl_.partition_cell_size_);
  swap(_impl_.vehicle_filter_cell_size_, other->_impl_.vehicle_filter_cell_size_);
  swap(_impl_.pedestrian_filter_cell_size_, other->_impl_.pedestrian_filter_cell_size_);
  swap(_impl_.outlier_length_, other->_impl_.outlier_length_);
  swap(_impl_.outlier_width_, other->_impl_.outlier_width_);
  swap(_impl_.outlier_height_, other->_impl_.outlier_height_);
  swap(_impl_.outlier_min_num_points_, other->_impl_.outlier_min_num_points_);
  swap(_impl_.remove_ground_points_, other->_impl_.remove_ground_points_);
  swap(_impl_.remove_roi_, other->_impl_.remove_roi_);
  swap(_impl_.do_classification_, other->_impl_.do_classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NCutSegmentationParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto[0]);
}

// ===================================================================

class NCutParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NCutParam>()._impl_._has_bits_);
  static void set_has_grid_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connect_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_super_pixel_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_cuts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ncuts_stop_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ncuts_enable_classifier_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sigma_space(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sigma_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skeleton_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_patch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_outlier_width_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_outlier_height_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_outlier_num_points_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_overlap_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_felzenszwalb_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_felzenszwalb_k(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_felzenszwalb_min_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NCutParam::NCutParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.NCutParam)
}
NCutParam::NCutParam(const NCutParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.felzenszwalb_min_size_){}
    , decltype(_impl_.grid_radius_){}
    , decltype(_impl_.connect_radius_){}
    , decltype(_impl_.super_pixel_cell_size_){}
    , decltype(_impl_.num_cuts_){}
    , decltype(_impl_.ncuts_stop_threshold_){}
    , decltype(_impl_.ncuts_enable_classifier_threshold_){}
    , decltype(_impl_.sigma_space_){}
    , decltype(_impl_.sigma_feature_){}
    , decltype(_impl_.skeleton_cell_size_){}
    , decltype(_impl_.patch_size_){}
    , decltype(_impl_.outlier_width_threshold_){}
    , decltype(_impl_.outlier_height_threshold_){}
    , decltype(_impl_.outlier_num_points_threshold_){}
    , decltype(_impl_.overlap_factor_){}
    , decltype(_impl_.felzenszwalb_sigma_){}
    , decltype(_impl_.felzenszwalb_k_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.felzenszwalb_min_size_, &from._impl_.felzenszwalb_min_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.felzenszwalb_k_) -
    reinterpret_cast<char*>(&_impl_.felzenszwalb_min_size_)) + sizeof(_impl_.felzenszwalb_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.NCutParam)
}

inline void NCutParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.felzenszwalb_min_size_){10u}
    , decltype(_impl_.grid_radius_){80}
    , decltype(_impl_.connect_radius_){1}
    , decltype(_impl_.super_pixel_cell_size_){0.25f}
    , decltype(_impl_.num_cuts_){5u}
    , decltype(_impl_.ncuts_stop_threshold_){0.4f}
    , decltype(_impl_.ncuts_enable_classifier_threshold_){0.3f}
    , decltype(_impl_.sigma_space_){1.5f}
    , decltype(_impl_.sigma_feature_){1.5f}
    , decltype(_impl_.skeleton_cell_size_){0.2f}
    , decltype(_impl_.patch_size_){3u}
    , decltype(_impl_.outlier_width_threshold_){0.1f}
    , decltype(_impl_.outlier_height_threshold_){0.1f}
    , decltype(_impl_.outlier_num_points_threshold_){10u}
    , decltype(_impl_.overlap_factor_){0.05f}
    , decltype(_impl_.felzenszwalb_sigma_){0.5f}
    , decltype(_impl_.felzenszwalb_k_){30}
  };
}

NCutParam::~NCutParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.NCutParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NCutParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NCutParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NCutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.NCutParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.felzenszwalb_min_size_ = 10u;
    _impl_.grid_radius_ = 80;
    _impl_.connect_radius_ = 1;
    _impl_.super_pixel_cell_size_ = 0.25f;
    _impl_.num_cuts_ = 5u;
    _impl_.ncuts_stop_threshold_ = 0.4f;
    _impl_.ncuts_enable_classifier_threshold_ = 0.3f;
    _impl_.sigma_space_ = 1.5f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.sigma_feature_ = 1.5f;
    _impl_.skeleton_cell_size_ = 0.2f;
    _impl_.patch_size_ = 3u;
    _impl_.outlier_width_threshold_ = 0.1f;
    _impl_.outlier_height_threshold_ = 0.1f;
    _impl_.outlier_num_points_threshold_ = 10u;
    _impl_.overlap_factor_ = 0.05f;
    _impl_.felzenszwalb_sigma_ = 0.5f;
  }
  _impl_.felzenszwalb_k_ = 30;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NCutParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float grid_radius = 1 [default = 80];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_grid_radius(&has_bits);
          _impl_.grid_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float connect_radius = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_connect_radius(&has_bits);
          _impl_.connect_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float super_pixel_cell_size = 3 [default = 0.25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_super_pixel_cell_size(&has_bits);
          _impl_.super_pixel_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_cuts = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_cuts(&has_bits);
          _impl_.num_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float ncuts_stop_threshold = 5 [default = 0.4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_ncuts_stop_threshold(&has_bits);
          _impl_.ncuts_stop_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_ncuts_enable_classifier_threshold(&has_bits);
          _impl_.ncuts_enable_classifier_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sigma_space = 7 [default = 1.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_sigma_space(&has_bits);
          _impl_.sigma_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sigma_feature = 8 [default = 1.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_sigma_feature(&has_bits);
          _impl_.sigma_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float skeleton_cell_size = 9 [default = 0.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_skeleton_cell_size(&has_bits);
          _impl_.skeleton_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 patch_size = 10 [default = 3];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_patch_size(&has_bits);
          _impl_.patch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float outlier_width_threshold = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_outlier_width_threshold(&has_bits);
          _impl_.outlier_width_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float outlier_height_threshold = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_outlier_height_threshold(&has_bits);
          _impl_.outlier_height_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 outlier_num_points_threshold = 13 [default = 10];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_outlier_num_points_threshold(&has_bits);
          _impl_.outlier_num_points_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float overlap_factor = 14 [default = 0.05];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_overlap_factor(&has_bits);
          _impl_.overlap_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float felzenszwalb_sigma = 15 [default = 0.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_felzenszwalb_sigma(&has_bits);
          _impl_.felzenszwalb_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float felzenszwalb_k = 16 [default = 30];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_felzenszwalb_k(&has_bits);
          _impl_.felzenszwalb_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 felzenszwalb_min_size = 17 [default = 10];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_felzenszwalb_min_size(&has_bits);
          _impl_.felzenszwalb_min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NCutParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.NCutParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float grid_radius = 1 [default = 80];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_grid_radius(), target);
  }

  // optional float connect_radius = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_connect_radius(), target);
  }

  // optional float super_pixel_cell_size = 3 [default = 0.25];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_super_pixel_cell_size(), target);
  }

  // optional uint32 num_cuts = 4 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_cuts(), target);
  }

  // optional float ncuts_stop_threshold = 5 [default = 0.4];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_ncuts_stop_threshold(), target);
  }

  // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ncuts_enable_classifier_threshold(), target);
  }

  // optional float sigma_space = 7 [default = 1.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_sigma_space(), target);
  }

  // optional float sigma_feature = 8 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_sigma_feature(), target);
  }

  // optional float skeleton_cell_size = 9 [default = 0.2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_skeleton_cell_size(), target);
  }

  // optional uint32 patch_size = 10 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_patch_size(), target);
  }

  // optional float outlier_width_threshold = 11 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_outlier_width_threshold(), target);
  }

  // optional float outlier_height_threshold = 12 [default = 0.1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_outlier_height_threshold(), target);
  }

  // optional uint32 outlier_num_points_threshold = 13 [default = 10];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_outlier_num_points_threshold(), target);
  }

  // optional float overlap_factor = 14 [default = 0.05];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_overlap_factor(), target);
  }

  // optional float felzenszwalb_sigma = 15 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_felzenszwalb_sigma(), target);
  }

  // optional float felzenszwalb_k = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_felzenszwalb_k(), target);
  }

  // optional uint32 felzenszwalb_min_size = 17 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_felzenszwalb_min_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.NCutParam)
  return target;
}

size_t NCutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.NCutParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 felzenszwalb_min_size = 17 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_felzenszwalb_min_size());
    }

    // optional float grid_radius = 1 [default = 80];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float connect_radius = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float super_pixel_cell_size = 3 [default = 0.25];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_cuts = 4 [default = 5];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_cuts());
    }

    // optional float ncuts_stop_threshold = 5 [default = 0.4];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float sigma_space = 7 [default = 1.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float sigma_feature = 8 [default = 1.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float skeleton_cell_size = 9 [default = 0.2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 patch_size = 10 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch_size());
    }

    // optional float outlier_width_threshold = 11 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float outlier_height_threshold = 12 [default = 0.1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 outlier_num_points_threshold = 13 [default = 10];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_outlier_num_points_threshold());
    }

    // optional float overlap_factor = 14 [default = 0.05];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float felzenszwalb_sigma = 15 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  // optional float felzenszwalb_k = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NCutParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NCutParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NCutParam::GetClassData() const { return &_class_data_; }

void NCutParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NCutParam *>(to)->MergeFrom(
      static_cast<const NCutParam &>(from));
}


void NCutParam::MergeFrom(const NCutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.NCutParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.felzenszwalb_min_size_ = from._impl_.felzenszwalb_min_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.grid_radius_ = from._impl_.grid_radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.connect_radius_ = from._impl_.connect_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.super_pixel_cell_size_ = from._impl_.super_pixel_cell_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.num_cuts_ = from._impl_.num_cuts_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ncuts_stop_threshold_ = from._impl_.ncuts_stop_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.ncuts_enable_classifier_threshold_ = from._impl_.ncuts_enable_classifier_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.sigma_space_ = from._impl_.sigma_space_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.sigma_feature_ = from._impl_.sigma_feature_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.skeleton_cell_size_ = from._impl_.skeleton_cell_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.patch_size_ = from._impl_.patch_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.outlier_width_threshold_ = from._impl_.outlier_width_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.outlier_height_threshold_ = from._impl_.outlier_height_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.outlier_num_points_threshold_ = from._impl_.outlier_num_points_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.overlap_factor_ = from._impl_.overlap_factor_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.felzenszwalb_sigma_ = from._impl_.felzenszwalb_sigma_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_felzenszwalb_k(from._internal_felzenszwalb_k());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NCutParam::CopyFrom(const NCutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.NCutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCutParam::IsInitialized() const {
  return true;
}

void NCutParam::InternalSwap(NCutParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.felzenszwalb_min_size_, other->_impl_.felzenszwalb_min_size_);
  swap(_impl_.grid_radius_, other->_impl_.grid_radius_);
  swap(_impl_.connect_radius_, other->_impl_.connect_radius_);
  swap(_impl_.super_pixel_cell_size_, other->_impl_.super_pixel_cell_size_);
  swap(_impl_.num_cuts_, other->_impl_.num_cuts_);
  swap(_impl_.ncuts_stop_threshold_, other->_impl_.ncuts_stop_threshold_);
  swap(_impl_.ncuts_enable_classifier_threshold_, other->_impl_.ncuts_enable_classifier_threshold_);
  swap(_impl_.sigma_space_, other->_impl_.sigma_space_);
  swap(_impl_.sigma_feature_, other->_impl_.sigma_feature_);
  swap(_impl_.skeleton_cell_size_, other->_impl_.skeleton_cell_size_);
  swap(_impl_.patch_size_, other->_impl_.patch_size_);
  swap(_impl_.outlier_width_threshold_, other->_impl_.outlier_width_threshold_);
  swap(_impl_.outlier_height_threshold_, other->_impl_.outlier_height_threshold_);
  swap(_impl_.outlier_num_points_threshold_, other->_impl_.outlier_num_points_threshold_);
  swap(_impl_.overlap_factor_, other->_impl_.overlap_factor_);
  swap(_impl_.felzenszwalb_sigma_, other->_impl_.felzenszwalb_sigma_);
  swap(_impl_.felzenszwalb_k_, other->_impl_.felzenszwalb_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NCutParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2fdetector_2fncut_5fsegmentation_2fproto_2fncut_5fparam_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::NCutSegmentationParam*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::NCutSegmentationParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::NCutSegmentationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::NCutParam*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::NCutParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::NCutParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
