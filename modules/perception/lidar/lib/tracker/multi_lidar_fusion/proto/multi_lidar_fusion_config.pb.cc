// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto

#include "modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace lidar {
PROTOBUF_CONSTEXPR MlfDistanceWeight::MlfDistanceWeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_name_pair_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_dist_weight_)*/0
  , /*decltype(_impl_.direction_dist_weight_)*/0
  , /*decltype(_impl_.bbox_size_dist_weight_)*/0
  , /*decltype(_impl_.point_num_dist_weight_)*/0
  , /*decltype(_impl_.histogram_dist_weight_)*/0
  , /*decltype(_impl_.centroid_shift_dist_weight_)*/0
  , /*decltype(_impl_.bbox_iou_dist_weight_)*/0
  , /*decltype(_impl_.semantic_map_dist_weight_)*/0} {}
struct MlfDistanceWeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfDistanceWeightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfDistanceWeightDefaultTypeInternal() {}
  union {
    MlfDistanceWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfDistanceWeightDefaultTypeInternal _MlfDistanceWeight_default_instance_;
PROTOBUF_CONSTEXPR MlfDistanceConfig::MlfDistanceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.foreground_weights_)*/{}
  , /*decltype(_impl_.background_weights_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MlfDistanceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfDistanceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfDistanceConfigDefaultTypeInternal() {}
  union {
    MlfDistanceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfDistanceConfigDefaultTypeInternal _MlfDistanceConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.foreground_mathcer_method_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.background_matcher_method_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bound_value_)*/100
  , /*decltype(_impl_.max_match_distance_)*/4} {}
struct MlfTrackObjectMatcherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfTrackObjectMatcherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfTrackObjectMatcherConfigDefaultTypeInternal() {}
  union {
    MlfTrackObjectMatcherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfTrackObjectMatcherConfigDefaultTypeInternal _MlfTrackObjectMatcherConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfTrackerConfig::MlfTrackerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MlfTrackerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfTrackerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfTrackerConfigDefaultTypeInternal() {}
  union {
    MlfTrackerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfTrackerConfigDefaultTypeInternal _MlfTrackerConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfMotionFilterConfig::MlfMotionFilterConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boostup_history_size_maximum_)*/6u
  , /*decltype(_impl_.use_adaptive_)*/true
  , /*decltype(_impl_.use_breakdown_)*/true
  , /*decltype(_impl_.use_convergence_boostup_)*/true
  , /*decltype(_impl_.boostup_history_size_minimum_)*/3u
  , /*decltype(_impl_.init_velocity_variance_)*/5
  , /*decltype(_impl_.init_acceleration_variance_)*/10
  , /*decltype(_impl_.measured_velocity_variance_)*/0.4
  , /*decltype(_impl_.predict_variance_per_sqrsec_)*/10
  , /*decltype(_impl_.converged_confidence_minimum_)*/0.5
  , /*decltype(_impl_.noise_maximum_)*/0.1
  , /*decltype(_impl_.trust_orientation_range_)*/40} {}
struct MlfMotionFilterConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfMotionFilterConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfMotionFilterConfigDefaultTypeInternal() {}
  union {
    MlfMotionFilterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfMotionFilterConfigDefaultTypeInternal _MlfMotionFilterConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfMotionRefinerConfig::MlfMotionRefinerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.claping_acceleration_threshold_)*/10
  , /*decltype(_impl_.claping_speed_threshold_)*/1} {}
struct MlfMotionRefinerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfMotionRefinerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfMotionRefinerConfigDefaultTypeInternal() {}
  union {
    MlfMotionRefinerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfMotionRefinerConfigDefaultTypeInternal _MlfMotionRefinerConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfShapeFilterConfig::MlfShapeFilterConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bottom_points_ignore_threshold_)*/0.1
  , /*decltype(_impl_.top_points_ignore_threshold_)*/1.6} {}
struct MlfShapeFilterConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfShapeFilterConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfShapeFilterConfigDefaultTypeInternal() {}
  union {
    MlfShapeFilterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfShapeFilterConfigDefaultTypeInternal _MlfShapeFilterConfig_default_instance_;
PROTOBUF_CONSTEXPR MlfEngineConfig::MlfEngineConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.main_sensor_)*/{}
  , /*decltype(_impl_.output_predict_objects_)*/false
  , /*decltype(_impl_.use_frame_timestamp_)*/false
  , /*decltype(_impl_.use_histogram_for_match_)*/true
  , /*decltype(_impl_.histogram_bin_size_)*/10u
  , /*decltype(_impl_.reserved_invisible_time_)*/0.2} {}
struct MlfEngineConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MlfEngineConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MlfEngineConfigDefaultTypeInternal() {}
  union {
    MlfEngineConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MlfEngineConfigDefaultTypeInternal _MlfEngineConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.sensor_name_pair_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.location_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.direction_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.bbox_size_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.point_num_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.histogram_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.centroid_shift_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.bbox_iou_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _impl_.semantic_map_dist_weight_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _impl_.foreground_weights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _impl_.background_weights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _impl_.foreground_mathcer_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _impl_.background_matcher_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _impl_.bound_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _impl_.max_match_distance_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _impl_.filter_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.use_adaptive_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.use_breakdown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.use_convergence_boostup_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.init_velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.init_acceleration_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.measured_velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.predict_variance_per_sqrsec_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.boostup_history_size_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.boostup_history_size_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.converged_confidence_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.noise_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _impl_.trust_orientation_range_),
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  4,
  0,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _impl_.claping_acceleration_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _impl_.claping_speed_threshold_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _impl_.bottom_points_ignore_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _impl_.top_points_ignore_threshold_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.main_sensor_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.use_histogram_for_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.histogram_bin_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.output_predict_objects_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.reserved_invisible_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _impl_.use_frame_timestamp_),
  ~0u,
  2,
  3,
  0,
  4,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::perception::lidar::MlfDistanceWeight)},
  { 24, -1, -1, sizeof(::apollo::perception::lidar::MlfDistanceConfig)},
  { 32, 42, -1, sizeof(::apollo::perception::lidar::MlfTrackObjectMatcherConfig)},
  { 46, -1, -1, sizeof(::apollo::perception::lidar::MlfTrackerConfig)},
  { 53, 71, -1, sizeof(::apollo::perception::lidar::MlfMotionFilterConfig)},
  { 83, 91, -1, sizeof(::apollo::perception::lidar::MlfMotionRefinerConfig)},
  { 93, 101, -1, sizeof(::apollo::perception::lidar::MlfShapeFilterConfig)},
  { 103, 115, -1, sizeof(::apollo::perception::lidar::MlfEngineConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::lidar::_MlfDistanceWeight_default_instance_._instance,
  &::apollo::perception::lidar::_MlfDistanceConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfTrackObjectMatcherConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfTrackerConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfMotionFilterConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfMotionRefinerConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfShapeFilterConfig_default_instance_._instance,
  &::apollo::perception::lidar::_MlfEngineConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n]modules/perception/lidar/lib/tracker/m"
  "ulti_lidar_fusion/proto/multi_lidar_fusi"
  "on_config.proto\022\027apollo.perception.lidar"
  "\"\305\002\n\021MlfDistanceWeight\022\032\n\020sensor_name_pa"
  "ir\030\001 \001(\t:\000\022\037\n\024location_dist_weight\030\002 \001(\002"
  ":\0010\022 \n\025direction_dist_weight\030\003 \001(\002:\0010\022 \n"
  "\025bbox_size_dist_weight\030\004 \001(\002:\0010\022 \n\025point"
  "_num_dist_weight\030\005 \001(\002:\0010\022 \n\025histogram_d"
  "ist_weight\030\006 \001(\002:\0010\022%\n\032centroid_shift_di"
  "st_weight\030\007 \001(\002:\0010\022\037\n\024bbox_iou_dist_weig"
  "ht\030\010 \001(\002:\0010\022#\n\030semantic_map_dist_weight\030"
  "\t \001(\002:\0010\"\243\001\n\021MlfDistanceConfig\022F\n\022foregr"
  "ound_weights\030\001 \003(\0132*.apollo.perception.l"
  "idar.MlfDistanceWeight\022F\n\022background_wei"
  "ghts\030\002 \003(\0132*.apollo.perception.lidar.Mlf"
  "DistanceWeight\"\324\001\n\033MlfTrackObjectMatcher"
  "Config\022\?\n\031foreground_mathcer_method\030\001 \001("
  "\t:\034MultiHmBipartiteGraphMatcher\022;\n\031backg"
  "round_matcher_method\030\002 \001(\t:\030GnnBipartite"
  "GraphMatcher\022\030\n\013bound_value\030\003 \001(\002:\003100\022\035"
  "\n\022max_match_distance\030\004 \001(\002:\0014\"\'\n\020MlfTrac"
  "kerConfig\022\023\n\013filter_name\030\001 \003(\t\"\322\003\n\025MlfMo"
  "tionFilterConfig\022\032\n\014use_adaptive\030\001 \001(\010:\004"
  "true\022\033\n\ruse_breakdown\030\002 \001(\010:\004true\022%\n\027use"
  "_convergence_boostup\030\003 \001(\010:\004true\022!\n\026init"
  "_velocity_variance\030\004 \001(\001:\0015\022&\n\032init_acce"
  "leration_variance\030\005 \001(\001:\00210\022\'\n\032measured_"
  "velocity_variance\030\006 \001(\001:\0030.4\022\'\n\033predict_"
  "variance_per_sqrsec\030\007 \001(\001:\00210\022\'\n\034boostup"
  "_history_size_minimum\030\010 \001(\r:\0013\022\'\n\034boostu"
  "p_history_size_maximum\030\t \001(\r:\0016\022)\n\034conve"
  "rged_confidence_minimum\030\n \001(\001:\0030.5\022\032\n\rno"
  "ise_maximum\030\014 \001(\001:\0030.1\022#\n\027trust_orientat"
  "ion_range\030\r \001(\001:\00240\"h\n\026MlfMotionRefinerC"
  "onfig\022*\n\036claping_acceleration_threshold\030"
  "\001 \001(\001:\00210\022\"\n\027claping_speed_threshold\030\002 \001"
  "(\001:\0011\"m\n\024MlfShapeFilterConfig\022+\n\036bottom_"
  "points_ignore_threshold\030\001 \001(\001:\0030.1\022(\n\033to"
  "p_points_ignore_threshold\030\002 \001(\001:\0031.6\"\336\001\n"
  "\017MlfEngineConfig\022\023\n\013main_sensor\030\001 \003(\t\022%\n"
  "\027use_histogram_for_match\030\002 \001(\010:\004true\022\036\n\022"
  "histogram_bin_size\030\003 \001(\r:\00210\022%\n\026output_p"
  "redict_objects\030\004 \001(\010:\005false\022$\n\027reserved_"
  "invisible_time\030\005 \001(\001:\0030.2\022\"\n\023use_frame_t"
  "imestamp\030\006 \001(\010:\005false"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = {
    false, false, 1781, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto,
    "modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto",
    &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto(&descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class MlfDistanceWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfDistanceWeight>()._impl_._has_bits_);
  static void set_has_sensor_name_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bbox_size_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_point_num_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_histogram_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_centroid_shift_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bbox_iou_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_semantic_map_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

MlfDistanceWeight::MlfDistanceWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfDistanceWeight)
}
MlfDistanceWeight::MlfDistanceWeight(const MlfDistanceWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_name_pair_){}
    , decltype(_impl_.location_dist_weight_){}
    , decltype(_impl_.direction_dist_weight_){}
    , decltype(_impl_.bbox_size_dist_weight_){}
    , decltype(_impl_.point_num_dist_weight_){}
    , decltype(_impl_.histogram_dist_weight_){}
    , decltype(_impl_.centroid_shift_dist_weight_){}
    , decltype(_impl_.bbox_iou_dist_weight_){}
    , decltype(_impl_.semantic_map_dist_weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_name_pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sensor_name_pair()) {
    _impl_.sensor_name_pair_.Set(from._internal_sensor_name_pair(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.location_dist_weight_, &from._impl_.location_dist_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.semantic_map_dist_weight_) -
    reinterpret_cast<char*>(&_impl_.location_dist_weight_)) + sizeof(_impl_.semantic_map_dist_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceWeight)
}

inline void MlfDistanceWeight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_name_pair_){}
    , decltype(_impl_.location_dist_weight_){0}
    , decltype(_impl_.direction_dist_weight_){0}
    , decltype(_impl_.bbox_size_dist_weight_){0}
    , decltype(_impl_.point_num_dist_weight_){0}
    , decltype(_impl_.histogram_dist_weight_){0}
    , decltype(_impl_.centroid_shift_dist_weight_){0}
    , decltype(_impl_.bbox_iou_dist_weight_){0}
    , decltype(_impl_.semantic_map_dist_weight_){0}
  };
  _impl_.sensor_name_pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_name_pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MlfDistanceWeight::~MlfDistanceWeight() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceWeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfDistanceWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_name_pair_.Destroy();
}

void MlfDistanceWeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfDistanceWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceWeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sensor_name_pair_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.location_dist_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bbox_iou_dist_weight_) -
        reinterpret_cast<char*>(&_impl_.location_dist_weight_)) + sizeof(_impl_.bbox_iou_dist_weight_));
  }
  _impl_.semantic_map_dist_weight_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfDistanceWeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sensor_name_pair = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name_pair();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float location_dist_weight = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_location_dist_weight(&has_bits);
          _impl_.location_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float direction_dist_weight = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_direction_dist_weight(&has_bits);
          _impl_.direction_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bbox_size_dist_weight = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_bbox_size_dist_weight(&has_bits);
          _impl_.bbox_size_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float point_num_dist_weight = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_point_num_dist_weight(&has_bits);
          _impl_.point_num_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float histogram_dist_weight = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_histogram_dist_weight(&has_bits);
          _impl_.histogram_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float centroid_shift_dist_weight = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_centroid_shift_dist_weight(&has_bits);
          _impl_.centroid_shift_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bbox_iou_dist_weight = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_bbox_iou_dist_weight(&has_bits);
          _impl_.bbox_iou_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float semantic_map_dist_weight = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_semantic_map_dist_weight(&has_bits);
          _impl_.semantic_map_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfDistanceWeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceWeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sensor_name_pair = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_name_pair().data(), static_cast<int>(this->_internal_sensor_name_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name_pair(), target);
  }

  // optional float location_dist_weight = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_location_dist_weight(), target);
  }

  // optional float direction_dist_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_direction_dist_weight(), target);
  }

  // optional float bbox_size_dist_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_bbox_size_dist_weight(), target);
  }

  // optional float point_num_dist_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_point_num_dist_weight(), target);
  }

  // optional float histogram_dist_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_histogram_dist_weight(), target);
  }

  // optional float centroid_shift_dist_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_centroid_shift_dist_weight(), target);
  }

  // optional float bbox_iou_dist_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_bbox_iou_dist_weight(), target);
  }

  // optional float semantic_map_dist_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_semantic_map_dist_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceWeight)
  return target;
}

size_t MlfDistanceWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceWeight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sensor_name_pair = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_name_pair());
    }

    // optional float location_dist_weight = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float direction_dist_weight = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bbox_size_dist_weight = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float point_num_dist_weight = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float histogram_dist_weight = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float centroid_shift_dist_weight = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float bbox_iou_dist_weight = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float semantic_map_dist_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfDistanceWeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfDistanceWeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfDistanceWeight::GetClassData() const { return &_class_data_; }

void MlfDistanceWeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfDistanceWeight *>(to)->MergeFrom(
      static_cast<const MlfDistanceWeight &>(from));
}


void MlfDistanceWeight::MergeFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceWeight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sensor_name_pair(from._internal_sensor_name_pair());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.location_dist_weight_ = from._impl_.location_dist_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.direction_dist_weight_ = from._impl_.direction_dist_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.bbox_size_dist_weight_ = from._impl_.bbox_size_dist_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.point_num_dist_weight_ = from._impl_.point_num_dist_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.histogram_dist_weight_ = from._impl_.histogram_dist_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.centroid_shift_dist_weight_ = from._impl_.centroid_shift_dist_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.bbox_iou_dist_weight_ = from._impl_.bbox_iou_dist_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_semantic_map_dist_weight(from._internal_semantic_map_dist_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfDistanceWeight::CopyFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceWeight::IsInitialized() const {
  return true;
}

void MlfDistanceWeight::InternalSwap(MlfDistanceWeight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_name_pair_, lhs_arena,
      &other->_impl_.sensor_name_pair_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MlfDistanceWeight, _impl_.semantic_map_dist_weight_)
      + sizeof(MlfDistanceWeight::_impl_.semantic_map_dist_weight_)
      - PROTOBUF_FIELD_OFFSET(MlfDistanceWeight, _impl_.location_dist_weight_)>(
          reinterpret_cast<char*>(&_impl_.location_dist_weight_),
          reinterpret_cast<char*>(&other->_impl_.location_dist_weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfDistanceWeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[0]);
}

// ===================================================================

class MlfDistanceConfig::_Internal {
 public:
};

MlfDistanceConfig::MlfDistanceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfDistanceConfig)
}
MlfDistanceConfig::MlfDistanceConfig(const MlfDistanceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.foreground_weights_){from._impl_.foreground_weights_}
    , decltype(_impl_.background_weights_){from._impl_.background_weights_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceConfig)
}

inline void MlfDistanceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.foreground_weights_){arena}
    , decltype(_impl_.background_weights_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MlfDistanceConfig::~MlfDistanceConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfDistanceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.foreground_weights_.~RepeatedPtrField();
  _impl_.background_weights_.~RepeatedPtrField();
}

void MlfDistanceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfDistanceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.foreground_weights_.Clear();
  _impl_.background_weights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfDistanceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foreground_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_background_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfDistanceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_foreground_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_foreground_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_background_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_background_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceConfig)
  return target;
}

size_t MlfDistanceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  total_size += 1UL * this->_internal_foreground_weights_size();
  for (const auto& msg : this->_impl_.foreground_weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  total_size += 1UL * this->_internal_background_weights_size();
  for (const auto& msg : this->_impl_.background_weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfDistanceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfDistanceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfDistanceConfig::GetClassData() const { return &_class_data_; }

void MlfDistanceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfDistanceConfig *>(to)->MergeFrom(
      static_cast<const MlfDistanceConfig &>(from));
}


void MlfDistanceConfig::MergeFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.foreground_weights_.MergeFrom(from._impl_.foreground_weights_);
  _impl_.background_weights_.MergeFrom(from._impl_.background_weights_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfDistanceConfig::CopyFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceConfig::IsInitialized() const {
  return true;
}

void MlfDistanceConfig::InternalSwap(MlfDistanceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.foreground_weights_.InternalSwap(&other->_impl_.foreground_weights_);
  _impl_.background_weights_.InternalSwap(&other->_impl_.background_weights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfDistanceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[1]);
}

// ===================================================================

class MlfTrackObjectMatcherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfTrackObjectMatcherConfig>()._impl_._has_bits_);
  static void set_has_foreground_mathcer_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_background_matcher_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bound_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString MlfTrackObjectMatcherConfig::Impl_::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_{{{"MultiHmBipartiteGraphMatcher", 28}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString MlfTrackObjectMatcherConfig::Impl_::_i_give_permission_to_break_this_code_default_background_matcher_method_{{{"GnnBipartiteGraphMatcher", 24}}, {nullptr}};
MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}
MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig(const MlfTrackObjectMatcherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.foreground_mathcer_method_){}
    , decltype(_impl_.background_matcher_method_){}
    , decltype(_impl_.bound_value_){}
    , decltype(_impl_.max_match_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.foreground_mathcer_method_.InitDefault();
  if (from._internal_has_foreground_mathcer_method()) {
    _impl_.foreground_mathcer_method_.Set(from._internal_foreground_mathcer_method(), 
      GetArenaForAllocation());
  }
  _impl_.background_matcher_method_.InitDefault();
  if (from._internal_has_background_matcher_method()) {
    _impl_.background_matcher_method_.Set(from._internal_background_matcher_method(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bound_value_, &from._impl_.bound_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_match_distance_) -
    reinterpret_cast<char*>(&_impl_.bound_value_)) + sizeof(_impl_.max_match_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}

inline void MlfTrackObjectMatcherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.foreground_mathcer_method_){}
    , decltype(_impl_.background_matcher_method_){}
    , decltype(_impl_.bound_value_){100}
    , decltype(_impl_.max_match_distance_){4}
  };
  _impl_.foreground_mathcer_method_.InitDefault();
  _impl_.background_matcher_method_.InitDefault();
}

MlfTrackObjectMatcherConfig::~MlfTrackObjectMatcherConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfTrackObjectMatcherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.foreground_mathcer_method_.Destroy();
  _impl_.background_matcher_method_.Destroy();
}

void MlfTrackObjectMatcherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfTrackObjectMatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.foreground_mathcer_method_.ClearToDefault(::apollo::perception::lidar::MlfTrackObjectMatcherConfig::Impl_::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.background_matcher_method_.ClearToDefault(::apollo::perception::lidar::MlfTrackObjectMatcherConfig::Impl_::_i_give_permission_to_break_this_code_default_background_matcher_method_, GetArenaForAllocation());
       }
    _impl_.bound_value_ = 100;
    _impl_.max_match_distance_ = 4;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfTrackObjectMatcherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_foreground_mathcer_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_background_matcher_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float bound_value = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_bound_value(&has_bits);
          _impl_.bound_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_match_distance = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_match_distance(&has_bits);
          _impl_.max_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfTrackObjectMatcherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foreground_mathcer_method().data(), static_cast<int>(this->_internal_foreground_mathcer_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_foreground_mathcer_method(), target);
  }

  // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_matcher_method().data(), static_cast<int>(this->_internal_background_matcher_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_background_matcher_method(), target);
  }

  // optional float bound_value = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_bound_value(), target);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_match_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  return target;
}

size_t MlfTrackObjectMatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foreground_mathcer_method());
    }

    // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_matcher_method());
    }

    // optional float bound_value = 3 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_match_distance = 4 [default = 4];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfTrackObjectMatcherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfTrackObjectMatcherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfTrackObjectMatcherConfig::GetClassData() const { return &_class_data_; }

void MlfTrackObjectMatcherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfTrackObjectMatcherConfig *>(to)->MergeFrom(
      static_cast<const MlfTrackObjectMatcherConfig &>(from));
}


void MlfTrackObjectMatcherConfig::MergeFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_foreground_mathcer_method(from._internal_foreground_mathcer_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_background_matcher_method(from._internal_background_matcher_method());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bound_value_ = from._impl_.bound_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_match_distance_ = from._impl_.max_match_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfTrackObjectMatcherConfig::CopyFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackObjectMatcherConfig::IsInitialized() const {
  return true;
}

void MlfTrackObjectMatcherConfig::InternalSwap(MlfTrackObjectMatcherConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.foreground_mathcer_method_, lhs_arena,
      &other->_impl_.foreground_mathcer_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.background_matcher_method_, lhs_arena,
      &other->_impl_.background_matcher_method_, rhs_arena
  );
  swap(_impl_.bound_value_, other->_impl_.bound_value_);
  swap(_impl_.max_match_distance_, other->_impl_.max_match_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfTrackObjectMatcherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[2]);
}

// ===================================================================

class MlfTrackerConfig::_Internal {
 public:
};

MlfTrackerConfig::MlfTrackerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfTrackerConfig)
}
MlfTrackerConfig::MlfTrackerConfig(const MlfTrackerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.filter_name_){from._impl_.filter_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackerConfig)
}

inline void MlfTrackerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MlfTrackerConfig::~MlfTrackerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfTrackerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_name_.~RepeatedPtrField();
}

void MlfTrackerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfTrackerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filter_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfTrackerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string filter_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filter_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackerConfig.filter_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfTrackerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  for (int i = 0, n = this->_internal_filter_name_size(); i < n; i++) {
    const auto& s = this->_internal_filter_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackerConfig.filter_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackerConfig)
  return target;
}

size_t MlfTrackerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.filter_name_.size());
  for (int i = 0, n = _impl_.filter_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.filter_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfTrackerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfTrackerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfTrackerConfig::GetClassData() const { return &_class_data_; }

void MlfTrackerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfTrackerConfig *>(to)->MergeFrom(
      static_cast<const MlfTrackerConfig &>(from));
}


void MlfTrackerConfig::MergeFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.filter_name_.MergeFrom(from._impl_.filter_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfTrackerConfig::CopyFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackerConfig::IsInitialized() const {
  return true;
}

void MlfTrackerConfig::InternalSwap(MlfTrackerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filter_name_.InternalSwap(&other->_impl_.filter_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfTrackerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[3]);
}

// ===================================================================

class MlfMotionFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfMotionFilterConfig>()._impl_._has_bits_);
  static void set_has_use_adaptive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_convergence_boostup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_init_velocity_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_init_acceleration_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_measured_velocity_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_predict_variance_per_sqrsec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_boostup_history_size_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_boostup_history_size_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_converged_confidence_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_noise_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_trust_orientation_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

MlfMotionFilterConfig::MlfMotionFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}
MlfMotionFilterConfig::MlfMotionFilterConfig(const MlfMotionFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boostup_history_size_maximum_){}
    , decltype(_impl_.use_adaptive_){}
    , decltype(_impl_.use_breakdown_){}
    , decltype(_impl_.use_convergence_boostup_){}
    , decltype(_impl_.boostup_history_size_minimum_){}
    , decltype(_impl_.init_velocity_variance_){}
    , decltype(_impl_.init_acceleration_variance_){}
    , decltype(_impl_.measured_velocity_variance_){}
    , decltype(_impl_.predict_variance_per_sqrsec_){}
    , decltype(_impl_.converged_confidence_minimum_){}
    , decltype(_impl_.noise_maximum_){}
    , decltype(_impl_.trust_orientation_range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.boostup_history_size_maximum_, &from._impl_.boostup_history_size_maximum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trust_orientation_range_) -
    reinterpret_cast<char*>(&_impl_.boostup_history_size_maximum_)) + sizeof(_impl_.trust_orientation_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}

inline void MlfMotionFilterConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boostup_history_size_maximum_){6u}
    , decltype(_impl_.use_adaptive_){true}
    , decltype(_impl_.use_breakdown_){true}
    , decltype(_impl_.use_convergence_boostup_){true}
    , decltype(_impl_.boostup_history_size_minimum_){3u}
    , decltype(_impl_.init_velocity_variance_){5}
    , decltype(_impl_.init_acceleration_variance_){10}
    , decltype(_impl_.measured_velocity_variance_){0.4}
    , decltype(_impl_.predict_variance_per_sqrsec_){10}
    , decltype(_impl_.converged_confidence_minimum_){0.5}
    , decltype(_impl_.noise_maximum_){0.1}
    , decltype(_impl_.trust_orientation_range_){40}
  };
}

MlfMotionFilterConfig::~MlfMotionFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionFilterConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfMotionFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MlfMotionFilterConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfMotionFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionFilterConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.boostup_history_size_maximum_ = 6u;
    _impl_.use_adaptive_ = true;
    _impl_.use_breakdown_ = true;
    _impl_.use_convergence_boostup_ = true;
    _impl_.boostup_history_size_minimum_ = 3u;
    _impl_.init_velocity_variance_ = 5;
    _impl_.init_acceleration_variance_ = 10;
    _impl_.measured_velocity_variance_ = 0.4;
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.predict_variance_per_sqrsec_ = 10;
    _impl_.converged_confidence_minimum_ = 0.5;
    _impl_.noise_maximum_ = 0.1;
    _impl_.trust_orientation_range_ = 40;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfMotionFilterConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_adaptive = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_adaptive(&has_bits);
          _impl_.use_adaptive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_breakdown = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_breakdown(&has_bits);
          _impl_.use_breakdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_convergence_boostup = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_convergence_boostup(&has_bits);
          _impl_.use_convergence_boostup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double init_velocity_variance = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_init_velocity_variance(&has_bits);
          _impl_.init_velocity_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double init_acceleration_variance = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_init_acceleration_variance(&has_bits);
          _impl_.init_acceleration_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double measured_velocity_variance = 6 [default = 0.4];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_measured_velocity_variance(&has_bits);
          _impl_.measured_velocity_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double predict_variance_per_sqrsec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_predict_variance_per_sqrsec(&has_bits);
          _impl_.predict_variance_per_sqrsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boostup_history_size_minimum = 8 [default = 3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_boostup_history_size_minimum(&has_bits);
          _impl_.boostup_history_size_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boostup_history_size_maximum = 9 [default = 6];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_boostup_history_size_maximum(&has_bits);
          _impl_.boostup_history_size_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double converged_confidence_minimum = 10 [default = 0.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_converged_confidence_minimum(&has_bits);
          _impl_.converged_confidence_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_maximum = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_noise_maximum(&has_bits);
          _impl_.noise_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double trust_orientation_range = 13 [default = 40];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_trust_orientation_range(&has_bits);
          _impl_.trust_orientation_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfMotionFilterConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionFilterConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_adaptive = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_adaptive(), target);
  }

  // optional bool use_breakdown = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_breakdown(), target);
  }

  // optional bool use_convergence_boostup = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_use_convergence_boostup(), target);
  }

  // optional double init_velocity_variance = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_init_velocity_variance(), target);
  }

  // optional double init_acceleration_variance = 5 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_init_acceleration_variance(), target);
  }

  // optional double measured_velocity_variance = 6 [default = 0.4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_measured_velocity_variance(), target);
  }

  // optional double predict_variance_per_sqrsec = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_predict_variance_per_sqrsec(), target);
  }

  // optional uint32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_boostup_history_size_minimum(), target);
  }

  // optional uint32 boostup_history_size_maximum = 9 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_boostup_history_size_maximum(), target);
  }

  // optional double converged_confidence_minimum = 10 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_converged_confidence_minimum(), target);
  }

  // optional double noise_maximum = 12 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_noise_maximum(), target);
  }

  // optional double trust_orientation_range = 13 [default = 40];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_trust_orientation_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionFilterConfig)
  return target;
}

size_t MlfMotionFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionFilterConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 boostup_history_size_maximum = 9 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boostup_history_size_maximum());
    }

    // optional bool use_adaptive = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_breakdown = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_convergence_boostup = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 boostup_history_size_minimum = 8 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boostup_history_size_minimum());
    }

    // optional double init_velocity_variance = 4 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double init_acceleration_variance = 5 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double measured_velocity_variance = 6 [default = 0.4];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double predict_variance_per_sqrsec = 7 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double converged_confidence_minimum = 10 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double noise_maximum = 12 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double trust_orientation_range = 13 [default = 40];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfMotionFilterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfMotionFilterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfMotionFilterConfig::GetClassData() const { return &_class_data_; }

void MlfMotionFilterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfMotionFilterConfig *>(to)->MergeFrom(
      static_cast<const MlfMotionFilterConfig &>(from));
}


void MlfMotionFilterConfig::MergeFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.boostup_history_size_maximum_ = from._impl_.boostup_history_size_maximum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.use_adaptive_ = from._impl_.use_adaptive_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.use_breakdown_ = from._impl_.use_breakdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.use_convergence_boostup_ = from._impl_.use_convergence_boostup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.boostup_history_size_minimum_ = from._impl_.boostup_history_size_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.init_velocity_variance_ = from._impl_.init_velocity_variance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.init_acceleration_variance_ = from._impl_.init_acceleration_variance_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.measured_velocity_variance_ = from._impl_.measured_velocity_variance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.predict_variance_per_sqrsec_ = from._impl_.predict_variance_per_sqrsec_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.converged_confidence_minimum_ = from._impl_.converged_confidence_minimum_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.noise_maximum_ = from._impl_.noise_maximum_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.trust_orientation_range_ = from._impl_.trust_orientation_range_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfMotionFilterConfig::CopyFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionFilterConfig::IsInitialized() const {
  return true;
}

void MlfMotionFilterConfig::InternalSwap(MlfMotionFilterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.boostup_history_size_maximum_, other->_impl_.boostup_history_size_maximum_);
  swap(_impl_.use_adaptive_, other->_impl_.use_adaptive_);
  swap(_impl_.use_breakdown_, other->_impl_.use_breakdown_);
  swap(_impl_.use_convergence_boostup_, other->_impl_.use_convergence_boostup_);
  swap(_impl_.boostup_history_size_minimum_, other->_impl_.boostup_history_size_minimum_);
  swap(_impl_.init_velocity_variance_, other->_impl_.init_velocity_variance_);
  swap(_impl_.init_acceleration_variance_, other->_impl_.init_acceleration_variance_);
  swap(_impl_.measured_velocity_variance_, other->_impl_.measured_velocity_variance_);
  swap(_impl_.predict_variance_per_sqrsec_, other->_impl_.predict_variance_per_sqrsec_);
  swap(_impl_.converged_confidence_minimum_, other->_impl_.converged_confidence_minimum_);
  swap(_impl_.noise_maximum_, other->_impl_.noise_maximum_);
  swap(_impl_.trust_orientation_range_, other->_impl_.trust_orientation_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfMotionFilterConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[4]);
}

// ===================================================================

class MlfMotionRefinerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfMotionRefinerConfig>()._impl_._has_bits_);
  static void set_has_claping_acceleration_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claping_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfMotionRefinerConfig::MlfMotionRefinerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}
MlfMotionRefinerConfig::MlfMotionRefinerConfig(const MlfMotionRefinerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.claping_acceleration_threshold_){}
    , decltype(_impl_.claping_speed_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.claping_acceleration_threshold_, &from._impl_.claping_acceleration_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.claping_speed_threshold_) -
    reinterpret_cast<char*>(&_impl_.claping_acceleration_threshold_)) + sizeof(_impl_.claping_speed_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}

inline void MlfMotionRefinerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.claping_acceleration_threshold_){10}
    , decltype(_impl_.claping_speed_threshold_){1}
  };
}

MlfMotionRefinerConfig::~MlfMotionRefinerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfMotionRefinerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MlfMotionRefinerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfMotionRefinerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.claping_acceleration_threshold_ = 10;
    _impl_.claping_speed_threshold_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfMotionRefinerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double claping_acceleration_threshold = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_claping_acceleration_threshold(&has_bits);
          _impl_.claping_acceleration_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double claping_speed_threshold = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_claping_speed_threshold(&has_bits);
          _impl_.claping_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfMotionRefinerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double claping_acceleration_threshold = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_claping_acceleration_threshold(), target);
  }

  // optional double claping_speed_threshold = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_claping_speed_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionRefinerConfig)
  return target;
}

size_t MlfMotionRefinerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double claping_acceleration_threshold = 1 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double claping_speed_threshold = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfMotionRefinerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfMotionRefinerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfMotionRefinerConfig::GetClassData() const { return &_class_data_; }

void MlfMotionRefinerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfMotionRefinerConfig *>(to)->MergeFrom(
      static_cast<const MlfMotionRefinerConfig &>(from));
}


void MlfMotionRefinerConfig::MergeFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.claping_acceleration_threshold_ = from._impl_.claping_acceleration_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.claping_speed_threshold_ = from._impl_.claping_speed_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfMotionRefinerConfig::CopyFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionRefinerConfig::IsInitialized() const {
  return true;
}

void MlfMotionRefinerConfig::InternalSwap(MlfMotionRefinerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.claping_acceleration_threshold_, other->_impl_.claping_acceleration_threshold_);
  swap(_impl_.claping_speed_threshold_, other->_impl_.claping_speed_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfMotionRefinerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[5]);
}

// ===================================================================

class MlfShapeFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfShapeFilterConfig>()._impl_._has_bits_);
  static void set_has_bottom_points_ignore_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_points_ignore_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfShapeFilterConfig::MlfShapeFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}
MlfShapeFilterConfig::MlfShapeFilterConfig(const MlfShapeFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_points_ignore_threshold_){}
    , decltype(_impl_.top_points_ignore_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bottom_points_ignore_threshold_, &from._impl_.bottom_points_ignore_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.top_points_ignore_threshold_) -
    reinterpret_cast<char*>(&_impl_.bottom_points_ignore_threshold_)) + sizeof(_impl_.top_points_ignore_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}

inline void MlfShapeFilterConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bottom_points_ignore_threshold_){0.1}
    , decltype(_impl_.top_points_ignore_threshold_){1.6}
  };
}

MlfShapeFilterConfig::~MlfShapeFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfShapeFilterConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfShapeFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MlfShapeFilterConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfShapeFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfShapeFilterConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.bottom_points_ignore_threshold_ = 0.1;
    _impl_.top_points_ignore_threshold_ = 1.6;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfShapeFilterConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_bottom_points_ignore_threshold(&has_bits);
          _impl_.bottom_points_ignore_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double top_points_ignore_threshold = 2 [default = 1.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_top_points_ignore_threshold(&has_bits);
          _impl_.top_points_ignore_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfShapeFilterConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfShapeFilterConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bottom_points_ignore_threshold(), target);
  }

  // optional double top_points_ignore_threshold = 2 [default = 1.6];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_top_points_ignore_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfShapeFilterConfig)
  return target;
}

size_t MlfShapeFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfShapeFilterConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double top_points_ignore_threshold = 2 [default = 1.6];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfShapeFilterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfShapeFilterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfShapeFilterConfig::GetClassData() const { return &_class_data_; }

void MlfShapeFilterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfShapeFilterConfig *>(to)->MergeFrom(
      static_cast<const MlfShapeFilterConfig &>(from));
}


void MlfShapeFilterConfig::MergeFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bottom_points_ignore_threshold_ = from._impl_.bottom_points_ignore_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.top_points_ignore_threshold_ = from._impl_.top_points_ignore_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfShapeFilterConfig::CopyFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfShapeFilterConfig::IsInitialized() const {
  return true;
}

void MlfShapeFilterConfig::InternalSwap(MlfShapeFilterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.bottom_points_ignore_threshold_, other->_impl_.bottom_points_ignore_threshold_);
  swap(_impl_.top_points_ignore_threshold_, other->_impl_.top_points_ignore_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfShapeFilterConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[6]);
}

// ===================================================================

class MlfEngineConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfEngineConfig>()._impl_._has_bits_);
  static void set_has_use_histogram_for_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_histogram_bin_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_predict_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reserved_invisible_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_frame_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfEngineConfig::MlfEngineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.MlfEngineConfig)
}
MlfEngineConfig::MlfEngineConfig(const MlfEngineConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_sensor_){from._impl_.main_sensor_}
    , decltype(_impl_.output_predict_objects_){}
    , decltype(_impl_.use_frame_timestamp_){}
    , decltype(_impl_.use_histogram_for_match_){}
    , decltype(_impl_.histogram_bin_size_){}
    , decltype(_impl_.reserved_invisible_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_predict_objects_, &from._impl_.output_predict_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reserved_invisible_time_) -
    reinterpret_cast<char*>(&_impl_.output_predict_objects_)) + sizeof(_impl_.reserved_invisible_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfEngineConfig)
}

inline void MlfEngineConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_sensor_){arena}
    , decltype(_impl_.output_predict_objects_){false}
    , decltype(_impl_.use_frame_timestamp_){false}
    , decltype(_impl_.use_histogram_for_match_){true}
    , decltype(_impl_.histogram_bin_size_){10u}
    , decltype(_impl_.reserved_invisible_time_){0.2}
  };
}

MlfEngineConfig::~MlfEngineConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfEngineConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MlfEngineConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.main_sensor_.~RepeatedPtrField();
}

void MlfEngineConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MlfEngineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfEngineConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.main_sensor_.Clear();
  ::memset(&_impl_.output_predict_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_frame_timestamp_) -
      reinterpret_cast<char*>(&_impl_.output_predict_objects_)) + sizeof(_impl_.use_frame_timestamp_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    _impl_.use_histogram_for_match_ = true;
    _impl_.histogram_bin_size_ = 10u;
    _impl_.reserved_invisible_time_ = 0.2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlfEngineConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string main_sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_main_sensor();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.perception.lidar.MlfEngineConfig.main_sensor");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool use_histogram_for_match = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_histogram_for_match(&has_bits);
          _impl_.use_histogram_for_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 histogram_bin_size = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_histogram_bin_size(&has_bits);
          _impl_.histogram_bin_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_predict_objects = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_predict_objects(&has_bits);
          _impl_.output_predict_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double reserved_invisible_time = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_reserved_invisible_time(&has_bits);
          _impl_.reserved_invisible_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_frame_timestamp = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_frame_timestamp(&has_bits);
          _impl_.use_frame_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MlfEngineConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfEngineConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  for (int i = 0, n = this->_internal_main_sensor_size(); i < n; i++) {
    const auto& s = this->_internal_main_sensor(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfEngineConfig.main_sensor");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_histogram_for_match = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_histogram_for_match(), target);
  }

  // optional uint32 histogram_bin_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_histogram_bin_size(), target);
  }

  // optional bool output_predict_objects = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_predict_objects(), target);
  }

  // optional double reserved_invisible_time = 5 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_reserved_invisible_time(), target);
  }

  // optional bool use_frame_timestamp = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_frame_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfEngineConfig)
  return target;
}

size_t MlfEngineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfEngineConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.main_sensor_.size());
  for (int i = 0, n = _impl_.main_sensor_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.main_sensor_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool output_predict_objects = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_frame_timestamp = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_histogram_for_match = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 histogram_bin_size = 3 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_histogram_bin_size());
    }

    // optional double reserved_invisible_time = 5 [default = 0.2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MlfEngineConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MlfEngineConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MlfEngineConfig::GetClassData() const { return &_class_data_; }

void MlfEngineConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MlfEngineConfig *>(to)->MergeFrom(
      static_cast<const MlfEngineConfig &>(from));
}


void MlfEngineConfig::MergeFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.main_sensor_.MergeFrom(from._impl_.main_sensor_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_predict_objects_ = from._impl_.output_predict_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.use_frame_timestamp_ = from._impl_.use_frame_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.use_histogram_for_match_ = from._impl_.use_histogram_for_match_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.histogram_bin_size_ = from._impl_.histogram_bin_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.reserved_invisible_time_ = from._impl_.reserved_invisible_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MlfEngineConfig::CopyFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfEngineConfig::IsInitialized() const {
  return true;
}

void MlfEngineConfig::InternalSwap(MlfEngineConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.main_sensor_.InternalSwap(&other->_impl_.main_sensor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MlfEngineConfig, _impl_.use_frame_timestamp_)
      + sizeof(MlfEngineConfig::_impl_.use_frame_timestamp_)
      - PROTOBUF_FIELD_OFFSET(MlfEngineConfig, _impl_.output_predict_objects_)>(
          reinterpret_cast<char*>(&_impl_.output_predict_objects_),
          reinterpret_cast<char*>(&other->_impl_.output_predict_objects_));
  swap(_impl_.use_histogram_for_match_, other->_impl_.use_histogram_for_match_);
  swap(_impl_.histogram_bin_size_, other->_impl_.histogram_bin_size_);
  swap(_impl_.reserved_invisible_time_, other->_impl_.reserved_invisible_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfEngineConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfDistanceWeight*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfDistanceWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfDistanceConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfDistanceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfTrackObjectMatcherConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfTrackerConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfTrackerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfMotionFilterConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfMotionFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfMotionRefinerConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionRefinerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfMotionRefinerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfShapeFilterConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfShapeFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfShapeFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfEngineConfig*
Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfEngineConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::MlfEngineConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
