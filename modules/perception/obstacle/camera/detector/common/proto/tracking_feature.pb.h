// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/camera/detector/common/proto/tracking_feature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto;
namespace apollo {
namespace perception {
class ExtractorParam;
struct ExtractorParamDefaultTypeInternal;
extern ExtractorParamDefaultTypeInternal _ExtractorParam_default_instance_;
class FeatureParam;
struct FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class ROIPoolingParam;
struct ROIPoolingParamDefaultTypeInternal;
extern ROIPoolingParamDefaultTypeInternal _ROIPoolingParam_default_instance_;
class ReorgParam;
struct ReorgParamDefaultTypeInternal;
extern ReorgParamDefaultTypeInternal _ReorgParam_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::ExtractorParam* Arena::CreateMaybeMessage<::apollo::perception::ExtractorParam>(Arena*);
template<> ::apollo::perception::FeatureParam* Arena::CreateMaybeMessage<::apollo::perception::FeatureParam>(Arena*);
template<> ::apollo::perception::ROIPoolingParam* Arena::CreateMaybeMessage<::apollo::perception::ROIPoolingParam>(Arena*);
template<> ::apollo::perception::ReorgParam* Arena::CreateMaybeMessage<::apollo::perception::ReorgParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

enum ExtractorParam_FeatureType : int {
  ExtractorParam_FeatureType_Reorg = 0,
  ExtractorParam_FeatureType_ROIPooling = 1
};
bool ExtractorParam_FeatureType_IsValid(int value);
constexpr ExtractorParam_FeatureType ExtractorParam_FeatureType_FeatureType_MIN = ExtractorParam_FeatureType_Reorg;
constexpr ExtractorParam_FeatureType ExtractorParam_FeatureType_FeatureType_MAX = ExtractorParam_FeatureType_ROIPooling;
constexpr int ExtractorParam_FeatureType_FeatureType_ARRAYSIZE = ExtractorParam_FeatureType_FeatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtractorParam_FeatureType_descriptor();
template<typename T>
inline const std::string& ExtractorParam_FeatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtractorParam_FeatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtractorParam_FeatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExtractorParam_FeatureType_descriptor(), enum_t_value);
}
inline bool ExtractorParam_FeatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtractorParam_FeatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtractorParam_FeatureType>(
    ExtractorParam_FeatureType_descriptor(), name, value);
}
// ===================================================================

class FeatureParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.FeatureParam) */ {
 public:
  inline FeatureParam() : FeatureParam(nullptr) {}
  ~FeatureParam() override;
  explicit PROTOBUF_CONSTEXPR FeatureParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureParam(const FeatureParam& from);
  FeatureParam(FeatureParam&& from) noexcept
    : FeatureParam() {
    *this = ::std::move(from);
  }

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureParam& operator=(FeatureParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeatureParam& a, FeatureParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FeatureParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.FeatureParam";
  }
  protected:
  explicit FeatureParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtractorFieldNumber = 2,
    kRemapModelFieldNumber = 3,
    kFeatStrideFieldNumber = 1,
  };
  // repeated .apollo.perception.ExtractorParam extractor = 2;
  int extractor_size() const;
  private:
  int _internal_extractor_size() const;
  public:
  void clear_extractor();
  ::apollo::perception::ExtractorParam* mutable_extractor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::ExtractorParam >*
      mutable_extractor();
  private:
  const ::apollo::perception::ExtractorParam& _internal_extractor(int index) const;
  ::apollo::perception::ExtractorParam* _internal_add_extractor();
  public:
  const ::apollo::perception::ExtractorParam& extractor(int index) const;
  ::apollo::perception::ExtractorParam* add_extractor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::ExtractorParam >&
      extractor() const;

  // optional string remap_model = 3;
  bool has_remap_model() const;
  private:
  bool _internal_has_remap_model() const;
  public:
  void clear_remap_model();
  const std::string& remap_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remap_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remap_model();
  PROTOBUF_NODISCARD std::string* release_remap_model();
  void set_allocated_remap_model(std::string* remap_model);
  private:
  const std::string& _internal_remap_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remap_model(const std::string& value);
  std::string* _internal_mutable_remap_model();
  public:

  // optional int32 feat_stride = 1 [default = 32];
  bool has_feat_stride() const;
  private:
  bool _internal_has_feat_stride() const;
  public:
  void clear_feat_stride();
  int32_t feat_stride() const;
  void set_feat_stride(int32_t value);
  private:
  int32_t _internal_feat_stride() const;
  void _internal_set_feat_stride(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.FeatureParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::ExtractorParam > extractor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remap_model_;
    int32_t feat_stride_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ExtractorParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.ExtractorParam) */ {
 public:
  inline ExtractorParam() : ExtractorParam(nullptr) {}
  ~ExtractorParam() override;
  explicit PROTOBUF_CONSTEXPR ExtractorParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractorParam(const ExtractorParam& from);
  ExtractorParam(ExtractorParam&& from) noexcept
    : ExtractorParam() {
    *this = ::std::move(from);
  }

  inline ExtractorParam& operator=(const ExtractorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractorParam& operator=(ExtractorParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractorParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractorParam* internal_default_instance() {
    return reinterpret_cast<const ExtractorParam*>(
               &_ExtractorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtractorParam& a, ExtractorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractorParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractorParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractorParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractorParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractorParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractorParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.ExtractorParam";
  }
  protected:
  explicit ExtractorParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExtractorParam_FeatureType FeatureType;
  static constexpr FeatureType Reorg =
    ExtractorParam_FeatureType_Reorg;
  static constexpr FeatureType ROIPooling =
    ExtractorParam_FeatureType_ROIPooling;
  static inline bool FeatureType_IsValid(int value) {
    return ExtractorParam_FeatureType_IsValid(value);
  }
  static constexpr FeatureType FeatureType_MIN =
    ExtractorParam_FeatureType_FeatureType_MIN;
  static constexpr FeatureType FeatureType_MAX =
    ExtractorParam_FeatureType_FeatureType_MAX;
  static constexpr int FeatureType_ARRAYSIZE =
    ExtractorParam_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureType_descriptor() {
    return ExtractorParam_FeatureType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureType_Name.");
    return ExtractorParam_FeatureType_Name(enum_t_value);
  }
  static inline bool FeatureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatureType* value) {
    return ExtractorParam_FeatureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatBlobFieldNumber = 1,
    kRoiPoolingParamFieldNumber = 3,
    kReorgParamFieldNumber = 4,
    kFeatTypeFieldNumber = 2,
  };
  // optional string feat_blob = 1;
  bool has_feat_blob() const;
  private:
  bool _internal_has_feat_blob() const;
  public:
  void clear_feat_blob();
  const std::string& feat_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feat_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feat_blob();
  PROTOBUF_NODISCARD std::string* release_feat_blob();
  void set_allocated_feat_blob(std::string* feat_blob);
  private:
  const std::string& _internal_feat_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feat_blob(const std::string& value);
  std::string* _internal_mutable_feat_blob();
  public:

  // optional .apollo.perception.ROIPoolingParam roi_pooling_param = 3;
  bool has_roi_pooling_param() const;
  private:
  bool _internal_has_roi_pooling_param() const;
  public:
  void clear_roi_pooling_param();
  const ::apollo::perception::ROIPoolingParam& roi_pooling_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::ROIPoolingParam* release_roi_pooling_param();
  ::apollo::perception::ROIPoolingParam* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::apollo::perception::ROIPoolingParam* roi_pooling_param);
  private:
  const ::apollo::perception::ROIPoolingParam& _internal_roi_pooling_param() const;
  ::apollo::perception::ROIPoolingParam* _internal_mutable_roi_pooling_param();
  public:
  void unsafe_arena_set_allocated_roi_pooling_param(
      ::apollo::perception::ROIPoolingParam* roi_pooling_param);
  ::apollo::perception::ROIPoolingParam* unsafe_arena_release_roi_pooling_param();

  // optional .apollo.perception.ReorgParam reorg_param = 4;
  bool has_reorg_param() const;
  private:
  bool _internal_has_reorg_param() const;
  public:
  void clear_reorg_param();
  const ::apollo::perception::ReorgParam& reorg_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::ReorgParam* release_reorg_param();
  ::apollo::perception::ReorgParam* mutable_reorg_param();
  void set_allocated_reorg_param(::apollo::perception::ReorgParam* reorg_param);
  private:
  const ::apollo::perception::ReorgParam& _internal_reorg_param() const;
  ::apollo::perception::ReorgParam* _internal_mutable_reorg_param();
  public:
  void unsafe_arena_set_allocated_reorg_param(
      ::apollo::perception::ReorgParam* reorg_param);
  ::apollo::perception::ReorgParam* unsafe_arena_release_reorg_param();

  // optional .apollo.perception.ExtractorParam.FeatureType feat_type = 2 [default = Reorg];
  bool has_feat_type() const;
  private:
  bool _internal_has_feat_type() const;
  public:
  void clear_feat_type();
  ::apollo::perception::ExtractorParam_FeatureType feat_type() const;
  void set_feat_type(::apollo::perception::ExtractorParam_FeatureType value);
  private:
  ::apollo::perception::ExtractorParam_FeatureType _internal_feat_type() const;
  void _internal_set_feat_type(::apollo::perception::ExtractorParam_FeatureType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.ExtractorParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feat_blob_;
    ::apollo::perception::ROIPoolingParam* roi_pooling_param_;
    ::apollo::perception::ReorgParam* reorg_param_;
    int feat_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ROIPoolingParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.ROIPoolingParam) */ {
 public:
  inline ROIPoolingParam() : ROIPoolingParam(nullptr) {}
  ~ROIPoolingParam() override;
  explicit PROTOBUF_CONSTEXPR ROIPoolingParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROIPoolingParam(const ROIPoolingParam& from);
  ROIPoolingParam(ROIPoolingParam&& from) noexcept
    : ROIPoolingParam() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParam& operator=(const ROIPoolingParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIPoolingParam& operator=(ROIPoolingParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROIPoolingParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROIPoolingParam* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParam*>(
               &_ROIPoolingParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ROIPoolingParam& a, ROIPoolingParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIPoolingParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIPoolingParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROIPoolingParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROIPoolingParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROIPoolingParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROIPoolingParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIPoolingParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.ROIPoolingParam";
  }
  protected:
  explicit ROIPoolingParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseFloorFieldNumber = 3,
    kPooledHFieldNumber = 1,
    kPooledWFieldNumber = 2,
  };
  // optional bool use_floor = 3 [default = false];
  bool has_use_floor() const;
  private:
  bool _internal_has_use_floor() const;
  public:
  void clear_use_floor();
  bool use_floor() const;
  void set_use_floor(bool value);
  private:
  bool _internal_use_floor() const;
  void _internal_set_use_floor(bool value);
  public:

  // optional int32 pooled_h = 1 [default = 3];
  bool has_pooled_h() const;
  private:
  bool _internal_has_pooled_h() const;
  public:
  void clear_pooled_h();
  int32_t pooled_h() const;
  void set_pooled_h(int32_t value);
  private:
  int32_t _internal_pooled_h() const;
  void _internal_set_pooled_h(int32_t value);
  public:

  // optional int32 pooled_w = 2 [default = 3];
  bool has_pooled_w() const;
  private:
  bool _internal_has_pooled_w() const;
  public:
  void clear_pooled_w();
  int32_t pooled_w() const;
  void set_pooled_w(int32_t value);
  private:
  int32_t _internal_pooled_w() const;
  void _internal_set_pooled_w(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.ROIPoolingParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool use_floor_;
    int32_t pooled_h_;
    int32_t pooled_w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ReorgParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.ReorgParam) */ {
 public:
  inline ReorgParam() : ReorgParam(nullptr) {}
  ~ReorgParam() override;
  explicit PROTOBUF_CONSTEXPR ReorgParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorgParam(const ReorgParam& from);
  ReorgParam(ReorgParam&& from) noexcept
    : ReorgParam() {
    *this = ::std::move(from);
  }

  inline ReorgParam& operator=(const ReorgParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorgParam& operator=(ReorgParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorgParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorgParam* internal_default_instance() {
    return reinterpret_cast<const ReorgParam*>(
               &_ReorgParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReorgParam& a, ReorgParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorgParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorgParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorgParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorgParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorgParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReorgParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorgParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.ReorgParam";
  }
  protected:
  explicit ReorgParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefHeightFieldNumber = 1,
    kRefWidthFieldNumber = 2,
  };
  // optional int32 ref_height = 1 [default = 0];
  bool has_ref_height() const;
  private:
  bool _internal_has_ref_height() const;
  public:
  void clear_ref_height();
  int32_t ref_height() const;
  void set_ref_height(int32_t value);
  private:
  int32_t _internal_ref_height() const;
  void _internal_set_ref_height(int32_t value);
  public:

  // optional int32 ref_width = 2 [default = 0];
  bool has_ref_width() const;
  private:
  bool _internal_has_ref_width() const;
  public:
  void clear_ref_width();
  int32_t ref_width() const;
  void set_ref_width(int32_t value);
  private:
  int32_t _internal_ref_width() const;
  void _internal_set_ref_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.ReorgParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ref_height_;
    int32_t ref_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeatureParam

// optional int32 feat_stride = 1 [default = 32];
inline bool FeatureParam::_internal_has_feat_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureParam::has_feat_stride() const {
  return _internal_has_feat_stride();
}
inline void FeatureParam::clear_feat_stride() {
  _impl_.feat_stride_ = 32;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FeatureParam::_internal_feat_stride() const {
  return _impl_.feat_stride_;
}
inline int32_t FeatureParam::feat_stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.FeatureParam.feat_stride)
  return _internal_feat_stride();
}
inline void FeatureParam::_internal_set_feat_stride(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.feat_stride_ = value;
}
inline void FeatureParam::set_feat_stride(int32_t value) {
  _internal_set_feat_stride(value);
  // @@protoc_insertion_point(field_set:apollo.perception.FeatureParam.feat_stride)
}

// repeated .apollo.perception.ExtractorParam extractor = 2;
inline int FeatureParam::_internal_extractor_size() const {
  return _impl_.extractor_.size();
}
inline int FeatureParam::extractor_size() const {
  return _internal_extractor_size();
}
inline void FeatureParam::clear_extractor() {
  _impl_.extractor_.Clear();
}
inline ::apollo::perception::ExtractorParam* FeatureParam::mutable_extractor(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.FeatureParam.extractor)
  return _impl_.extractor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::ExtractorParam >*
FeatureParam::mutable_extractor() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.FeatureParam.extractor)
  return &_impl_.extractor_;
}
inline const ::apollo::perception::ExtractorParam& FeatureParam::_internal_extractor(int index) const {
  return _impl_.extractor_.Get(index);
}
inline const ::apollo::perception::ExtractorParam& FeatureParam::extractor(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.FeatureParam.extractor)
  return _internal_extractor(index);
}
inline ::apollo::perception::ExtractorParam* FeatureParam::_internal_add_extractor() {
  return _impl_.extractor_.Add();
}
inline ::apollo::perception::ExtractorParam* FeatureParam::add_extractor() {
  ::apollo::perception::ExtractorParam* _add = _internal_add_extractor();
  // @@protoc_insertion_point(field_add:apollo.perception.FeatureParam.extractor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::ExtractorParam >&
FeatureParam::extractor() const {
  // @@protoc_insertion_point(field_list:apollo.perception.FeatureParam.extractor)
  return _impl_.extractor_;
}

// optional string remap_model = 3;
inline bool FeatureParam::_internal_has_remap_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureParam::has_remap_model() const {
  return _internal_has_remap_model();
}
inline void FeatureParam::clear_remap_model() {
  _impl_.remap_model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeatureParam::remap_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.FeatureParam.remap_model)
  return _internal_remap_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeatureParam::set_remap_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.remap_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.FeatureParam.remap_model)
}
inline std::string* FeatureParam::mutable_remap_model() {
  std::string* _s = _internal_mutable_remap_model();
  // @@protoc_insertion_point(field_mutable:apollo.perception.FeatureParam.remap_model)
  return _s;
}
inline const std::string& FeatureParam::_internal_remap_model() const {
  return _impl_.remap_model_.Get();
}
inline void FeatureParam::_internal_set_remap_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.remap_model_.Set(value, GetArenaForAllocation());
}
inline std::string* FeatureParam::_internal_mutable_remap_model() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.remap_model_.Mutable(GetArenaForAllocation());
}
inline std::string* FeatureParam::release_remap_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.FeatureParam.remap_model)
  if (!_internal_has_remap_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.remap_model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remap_model_.IsDefault()) {
    _impl_.remap_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FeatureParam::set_allocated_remap_model(std::string* remap_model) {
  if (remap_model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.remap_model_.SetAllocated(remap_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remap_model_.IsDefault()) {
    _impl_.remap_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.FeatureParam.remap_model)
}

// -------------------------------------------------------------------

// ExtractorParam

// optional string feat_blob = 1;
inline bool ExtractorParam::_internal_has_feat_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtractorParam::has_feat_blob() const {
  return _internal_has_feat_blob();
}
inline void ExtractorParam::clear_feat_blob() {
  _impl_.feat_blob_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtractorParam::feat_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ExtractorParam.feat_blob)
  return _internal_feat_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractorParam::set_feat_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.feat_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.ExtractorParam.feat_blob)
}
inline std::string* ExtractorParam::mutable_feat_blob() {
  std::string* _s = _internal_mutable_feat_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.ExtractorParam.feat_blob)
  return _s;
}
inline const std::string& ExtractorParam::_internal_feat_blob() const {
  return _impl_.feat_blob_.Get();
}
inline void ExtractorParam::_internal_set_feat_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.feat_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtractorParam::_internal_mutable_feat_blob() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.feat_blob_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtractorParam::release_feat_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.ExtractorParam.feat_blob)
  if (!_internal_has_feat_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.feat_blob_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.feat_blob_.IsDefault()) {
    _impl_.feat_blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtractorParam::set_allocated_feat_blob(std::string* feat_blob) {
  if (feat_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.feat_blob_.SetAllocated(feat_blob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.feat_blob_.IsDefault()) {
    _impl_.feat_blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.ExtractorParam.feat_blob)
}

// optional .apollo.perception.ExtractorParam.FeatureType feat_type = 2 [default = Reorg];
inline bool ExtractorParam::_internal_has_feat_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtractorParam::has_feat_type() const {
  return _internal_has_feat_type();
}
inline void ExtractorParam::clear_feat_type() {
  _impl_.feat_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::perception::ExtractorParam_FeatureType ExtractorParam::_internal_feat_type() const {
  return static_cast< ::apollo::perception::ExtractorParam_FeatureType >(_impl_.feat_type_);
}
inline ::apollo::perception::ExtractorParam_FeatureType ExtractorParam::feat_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ExtractorParam.feat_type)
  return _internal_feat_type();
}
inline void ExtractorParam::_internal_set_feat_type(::apollo::perception::ExtractorParam_FeatureType value) {
  assert(::apollo::perception::ExtractorParam_FeatureType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.feat_type_ = value;
}
inline void ExtractorParam::set_feat_type(::apollo::perception::ExtractorParam_FeatureType value) {
  _internal_set_feat_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ExtractorParam.feat_type)
}

// optional .apollo.perception.ROIPoolingParam roi_pooling_param = 3;
inline bool ExtractorParam::_internal_has_roi_pooling_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_pooling_param_ != nullptr);
  return value;
}
inline bool ExtractorParam::has_roi_pooling_param() const {
  return _internal_has_roi_pooling_param();
}
inline void ExtractorParam::clear_roi_pooling_param() {
  if (_impl_.roi_pooling_param_ != nullptr) _impl_.roi_pooling_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::ROIPoolingParam& ExtractorParam::_internal_roi_pooling_param() const {
  const ::apollo::perception::ROIPoolingParam* p = _impl_.roi_pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::ROIPoolingParam&>(
      ::apollo::perception::_ROIPoolingParam_default_instance_);
}
inline const ::apollo::perception::ROIPoolingParam& ExtractorParam::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ExtractorParam.roi_pooling_param)
  return _internal_roi_pooling_param();
}
inline void ExtractorParam::unsafe_arena_set_allocated_roi_pooling_param(
    ::apollo::perception::ROIPoolingParam* roi_pooling_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_pooling_param_);
  }
  _impl_.roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.ExtractorParam.roi_pooling_param)
}
inline ::apollo::perception::ROIPoolingParam* ExtractorParam::release_roi_pooling_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::ROIPoolingParam* temp = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::ROIPoolingParam* ExtractorParam::unsafe_arena_release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.ExtractorParam.roi_pooling_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::ROIPoolingParam* temp = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::ROIPoolingParam* ExtractorParam::_internal_mutable_roi_pooling_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::ROIPoolingParam>(GetArenaForAllocation());
    _impl_.roi_pooling_param_ = p;
  }
  return _impl_.roi_pooling_param_;
}
inline ::apollo::perception::ROIPoolingParam* ExtractorParam::mutable_roi_pooling_param() {
  ::apollo::perception::ROIPoolingParam* _msg = _internal_mutable_roi_pooling_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.ExtractorParam.roi_pooling_param)
  return _msg;
}
inline void ExtractorParam::set_allocated_roi_pooling_param(::apollo::perception::ROIPoolingParam* roi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roi_pooling_param);
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.ExtractorParam.roi_pooling_param)
}

// optional .apollo.perception.ReorgParam reorg_param = 4;
inline bool ExtractorParam::_internal_has_reorg_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reorg_param_ != nullptr);
  return value;
}
inline bool ExtractorParam::has_reorg_param() const {
  return _internal_has_reorg_param();
}
inline void ExtractorParam::clear_reorg_param() {
  if (_impl_.reorg_param_ != nullptr) _impl_.reorg_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::ReorgParam& ExtractorParam::_internal_reorg_param() const {
  const ::apollo::perception::ReorgParam* p = _impl_.reorg_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::ReorgParam&>(
      ::apollo::perception::_ReorgParam_default_instance_);
}
inline const ::apollo::perception::ReorgParam& ExtractorParam::reorg_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ExtractorParam.reorg_param)
  return _internal_reorg_param();
}
inline void ExtractorParam::unsafe_arena_set_allocated_reorg_param(
    ::apollo::perception::ReorgParam* reorg_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reorg_param_);
  }
  _impl_.reorg_param_ = reorg_param;
  if (reorg_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.ExtractorParam.reorg_param)
}
inline ::apollo::perception::ReorgParam* ExtractorParam::release_reorg_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::ReorgParam* temp = _impl_.reorg_param_;
  _impl_.reorg_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::ReorgParam* ExtractorParam::unsafe_arena_release_reorg_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.ExtractorParam.reorg_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::ReorgParam* temp = _impl_.reorg_param_;
  _impl_.reorg_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::ReorgParam* ExtractorParam::_internal_mutable_reorg_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.reorg_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::ReorgParam>(GetArenaForAllocation());
    _impl_.reorg_param_ = p;
  }
  return _impl_.reorg_param_;
}
inline ::apollo::perception::ReorgParam* ExtractorParam::mutable_reorg_param() {
  ::apollo::perception::ReorgParam* _msg = _internal_mutable_reorg_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.ExtractorParam.reorg_param)
  return _msg;
}
inline void ExtractorParam::set_allocated_reorg_param(::apollo::perception::ReorgParam* reorg_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reorg_param_;
  }
  if (reorg_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reorg_param);
    if (message_arena != submessage_arena) {
      reorg_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reorg_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.reorg_param_ = reorg_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.ExtractorParam.reorg_param)
}

// -------------------------------------------------------------------

// ROIPoolingParam

// optional int32 pooled_h = 1 [default = 3];
inline bool ROIPoolingParam::_internal_has_pooled_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_pooled_h() const {
  return _internal_has_pooled_h();
}
inline void ROIPoolingParam::clear_pooled_h() {
  _impl_.pooled_h_ = 3;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ROIPoolingParam::_internal_pooled_h() const {
  return _impl_.pooled_h_;
}
inline int32_t ROIPoolingParam::pooled_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ROIPoolingParam.pooled_h)
  return _internal_pooled_h();
}
inline void ROIPoolingParam::_internal_set_pooled_h(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pooled_h_ = value;
}
inline void ROIPoolingParam::set_pooled_h(int32_t value) {
  _internal_set_pooled_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ROIPoolingParam.pooled_h)
}

// optional int32 pooled_w = 2 [default = 3];
inline bool ROIPoolingParam::_internal_has_pooled_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_pooled_w() const {
  return _internal_has_pooled_w();
}
inline void ROIPoolingParam::clear_pooled_w() {
  _impl_.pooled_w_ = 3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ROIPoolingParam::_internal_pooled_w() const {
  return _impl_.pooled_w_;
}
inline int32_t ROIPoolingParam::pooled_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ROIPoolingParam.pooled_w)
  return _internal_pooled_w();
}
inline void ROIPoolingParam::_internal_set_pooled_w(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pooled_w_ = value;
}
inline void ROIPoolingParam::set_pooled_w(int32_t value) {
  _internal_set_pooled_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ROIPoolingParam.pooled_w)
}

// optional bool use_floor = 3 [default = false];
inline bool ROIPoolingParam::_internal_has_use_floor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_use_floor() const {
  return _internal_has_use_floor();
}
inline void ROIPoolingParam::clear_use_floor() {
  _impl_.use_floor_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ROIPoolingParam::_internal_use_floor() const {
  return _impl_.use_floor_;
}
inline bool ROIPoolingParam::use_floor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ROIPoolingParam.use_floor)
  return _internal_use_floor();
}
inline void ROIPoolingParam::_internal_set_use_floor(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.use_floor_ = value;
}
inline void ROIPoolingParam::set_use_floor(bool value) {
  _internal_set_use_floor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ROIPoolingParam.use_floor)
}

// -------------------------------------------------------------------

// ReorgParam

// optional int32 ref_height = 1 [default = 0];
inline bool ReorgParam::_internal_has_ref_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorgParam::has_ref_height() const {
  return _internal_has_ref_height();
}
inline void ReorgParam::clear_ref_height() {
  _impl_.ref_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ReorgParam::_internal_ref_height() const {
  return _impl_.ref_height_;
}
inline int32_t ReorgParam::ref_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ReorgParam.ref_height)
  return _internal_ref_height();
}
inline void ReorgParam::_internal_set_ref_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ref_height_ = value;
}
inline void ReorgParam::set_ref_height(int32_t value) {
  _internal_set_ref_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ReorgParam.ref_height)
}

// optional int32 ref_width = 2 [default = 0];
inline bool ReorgParam::_internal_has_ref_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorgParam::has_ref_width() const {
  return _internal_has_ref_width();
}
inline void ReorgParam::clear_ref_width() {
  _impl_.ref_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ReorgParam::_internal_ref_width() const {
  return _impl_.ref_width_;
}
inline int32_t ReorgParam::ref_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.ReorgParam.ref_width)
  return _internal_ref_width();
}
inline void ReorgParam::_internal_set_ref_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ref_width_ = value;
}
inline void ReorgParam::set_ref_width(int32_t value) {
  _internal_set_ref_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.ReorgParam.ref_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::ExtractorParam_FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::ExtractorParam_FeatureType>() {
  return ::apollo::perception::ExtractorParam_FeatureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fcommon_2fproto_2ftracking_5ffeature_2eproto
