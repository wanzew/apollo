// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto;
namespace apollo {
namespace perception {
namespace obstacle {
namespace yolo {
class ModelParam;
struct ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class NMSParam;
struct NMSParamDefaultTypeInternal;
extern NMSParamDefaultTypeInternal _NMSParam_default_instance_;
class NetworkParam;
struct NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
class YoloParam;
struct YoloParamDefaultTypeInternal;
extern YoloParamDefaultTypeInternal _YoloParam_default_instance_;
}  // namespace yolo
}  // namespace obstacle
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::obstacle::yolo::ModelParam* Arena::CreateMaybeMessage<::apollo::perception::obstacle::yolo::ModelParam>(Arena*);
template<> ::apollo::perception::obstacle::yolo::NMSParam* Arena::CreateMaybeMessage<::apollo::perception::obstacle::yolo::NMSParam>(Arena*);
template<> ::apollo::perception::obstacle::yolo::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::obstacle::yolo::NetworkParam>(Arena*);
template<> ::apollo::perception::obstacle::yolo::YoloParam* Arena::CreateMaybeMessage<::apollo::perception::obstacle::yolo::YoloParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace obstacle {
namespace yolo {

enum ModelType : int {
  Caffe = 0
};
bool ModelType_IsValid(int value);
constexpr ModelType ModelType_MIN = Caffe;
constexpr ModelType ModelType_MAX = Caffe;
constexpr int ModelType_ARRAYSIZE = ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor();
template<typename T>
inline const std::string& ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelType_descriptor(), enum_t_value);
}
inline bool ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelType>(
    ModelType_descriptor(), name, value);
}
// ===================================================================

class YoloParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.obstacle.yolo.YoloParam) */ {
 public:
  inline YoloParam() : YoloParam(nullptr) {}
  ~YoloParam() override;
  explicit PROTOBUF_CONSTEXPR YoloParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YoloParam(const YoloParam& from);
  YoloParam(YoloParam&& from) noexcept
    : YoloParam() {
    *this = ::std::move(from);
  }

  inline YoloParam& operator=(const YoloParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloParam& operator=(YoloParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YoloParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const YoloParam* internal_default_instance() {
    return reinterpret_cast<const YoloParam*>(
               &_YoloParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(YoloParam& a, YoloParam& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YoloParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YoloParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YoloParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YoloParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YoloParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.obstacle.yolo.YoloParam";
  }
  protected:
  explicit YoloParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelParamFieldNumber = 1,
    kNetParamFieldNumber = 2,
    kNmsParamFieldNumber = 3,
  };
  // required .apollo.perception.obstacle.yolo.ModelParam model_param = 1;
  bool has_model_param() const;
  private:
  bool _internal_has_model_param() const;
  public:
  void clear_model_param();
  const ::apollo::perception::obstacle::yolo::ModelParam& model_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::obstacle::yolo::ModelParam* release_model_param();
  ::apollo::perception::obstacle::yolo::ModelParam* mutable_model_param();
  void set_allocated_model_param(::apollo::perception::obstacle::yolo::ModelParam* model_param);
  private:
  const ::apollo::perception::obstacle::yolo::ModelParam& _internal_model_param() const;
  ::apollo::perception::obstacle::yolo::ModelParam* _internal_mutable_model_param();
  public:
  void unsafe_arena_set_allocated_model_param(
      ::apollo::perception::obstacle::yolo::ModelParam* model_param);
  ::apollo::perception::obstacle::yolo::ModelParam* unsafe_arena_release_model_param();

  // required .apollo.perception.obstacle.yolo.NetworkParam net_param = 2;
  bool has_net_param() const;
  private:
  bool _internal_has_net_param() const;
  public:
  void clear_net_param();
  const ::apollo::perception::obstacle::yolo::NetworkParam& net_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::obstacle::yolo::NetworkParam* release_net_param();
  ::apollo::perception::obstacle::yolo::NetworkParam* mutable_net_param();
  void set_allocated_net_param(::apollo::perception::obstacle::yolo::NetworkParam* net_param);
  private:
  const ::apollo::perception::obstacle::yolo::NetworkParam& _internal_net_param() const;
  ::apollo::perception::obstacle::yolo::NetworkParam* _internal_mutable_net_param();
  public:
  void unsafe_arena_set_allocated_net_param(
      ::apollo::perception::obstacle::yolo::NetworkParam* net_param);
  ::apollo::perception::obstacle::yolo::NetworkParam* unsafe_arena_release_net_param();

  // optional .apollo.perception.obstacle.yolo.NMSParam nms_param = 3;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::obstacle::yolo::NMSParam& nms_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::obstacle::yolo::NMSParam* release_nms_param();
  ::apollo::perception::obstacle::yolo::NMSParam* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::obstacle::yolo::NMSParam* nms_param);
  private:
  const ::apollo::perception::obstacle::yolo::NMSParam& _internal_nms_param() const;
  ::apollo::perception::obstacle::yolo::NMSParam* _internal_mutable_nms_param();
  public:
  void unsafe_arena_set_allocated_nms_param(
      ::apollo::perception::obstacle::yolo::NMSParam* nms_param);
  ::apollo::perception::obstacle::yolo::NMSParam* unsafe_arena_release_nms_param();

  // @@protoc_insertion_point(class_scope:apollo.perception.obstacle.yolo.YoloParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::obstacle::yolo::ModelParam* model_param_;
    ::apollo::perception::obstacle::yolo::NetworkParam* net_param_;
    ::apollo::perception::obstacle::yolo::NMSParam* nms_param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class ModelParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.obstacle.yolo.ModelParam) */ {
 public:
  inline ModelParam() : ModelParam(nullptr) {}
  ~ModelParam() override;
  explicit PROTOBUF_CONSTEXPR ModelParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelParam(const ModelParam& from);
  ModelParam(ModelParam&& from) noexcept
    : ModelParam() {
    *this = ::std::move(from);
  }

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelParam& operator=(ModelParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelParam& a, ModelParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.obstacle.yolo.ModelParam";
  }
  protected:
  explicit ModelParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kProtoFileFieldNumber = 2,
    kWeightFileFieldNumber = 3,
    kAnchorsFileFieldNumber = 4,
    kTypesFileFieldNumber = 5,
    kFeatureFileFieldNumber = 6,
    kCalibratetableRootFieldNumber = 11,
    kMin2DHeightFieldNumber = 9,
    kMin3DHeightFieldNumber = 10,
    kModelTypeFieldNumber = 12,
    kOffsetRatioFieldNumber = 7,
    kConfidenceThresholdFieldNumber = 8,
    kCroppedRatioFieldNumber = 13,
    kResizedWidthFieldNumber = 14,
    kAlignedPixelFieldNumber = 15,
    kIgnoredHeightFieldNumber = 16,
  };
  // required string model_name = 1 [default = "yolo-2d"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string proto_file = 2 [default = "deploy.pt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_file();
  PROTOBUF_NODISCARD std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 3 [default = "deploy.md"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weight_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weight_file();
  PROTOBUF_NODISCARD std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string anchors_file = 4 [default = "anchors.txt"];
  bool has_anchors_file() const;
  private:
  bool _internal_has_anchors_file() const;
  public:
  void clear_anchors_file();
  const std::string& anchors_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anchors_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anchors_file();
  PROTOBUF_NODISCARD std::string* release_anchors_file();
  void set_allocated_anchors_file(std::string* anchors_file);
  private:
  const std::string& _internal_anchors_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anchors_file(const std::string& value);
  std::string* _internal_mutable_anchors_file();
  public:

  // optional string types_file = 5 [default = "types.txt"];
  bool has_types_file() const;
  private:
  bool _internal_has_types_file() const;
  public:
  void clear_types_file();
  const std::string& types_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_types_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_types_file();
  PROTOBUF_NODISCARD std::string* release_types_file();
  void set_allocated_types_file(std::string* types_file);
  private:
  const std::string& _internal_types_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_types_file(const std::string& value);
  std::string* _internal_mutable_types_file();
  public:

  // optional string feature_file = 6 [default = "feature.pt"];
  bool has_feature_file() const;
  private:
  bool _internal_has_feature_file() const;
  public:
  void clear_feature_file();
  const std::string& feature_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feature_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feature_file();
  PROTOBUF_NODISCARD std::string* release_feature_file();
  void set_allocated_feature_file(std::string* feature_file);
  private:
  const std::string& _internal_feature_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature_file(const std::string& value);
  std::string* _internal_mutable_feature_file();
  public:

  // optional string calibratetable_root = 11 [default = "./"];
  bool has_calibratetable_root() const;
  private:
  bool _internal_has_calibratetable_root() const;
  public:
  void clear_calibratetable_root();
  const std::string& calibratetable_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calibratetable_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calibratetable_root();
  PROTOBUF_NODISCARD std::string* release_calibratetable_root();
  void set_allocated_calibratetable_root(std::string* calibratetable_root);
  private:
  const std::string& _internal_calibratetable_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calibratetable_root(const std::string& value);
  std::string* _internal_mutable_calibratetable_root();
  public:

  // optional float min_2d_height = 9 [default = 0];
  bool has_min_2d_height() const;
  private:
  bool _internal_has_min_2d_height() const;
  public:
  void clear_min_2d_height();
  float min_2d_height() const;
  void set_min_2d_height(float value);
  private:
  float _internal_min_2d_height() const;
  void _internal_set_min_2d_height(float value);
  public:

  // optional float min_3d_height = 10 [default = 0];
  bool has_min_3d_height() const;
  private:
  bool _internal_has_min_3d_height() const;
  public:
  void clear_min_3d_height();
  float min_3d_height() const;
  void set_min_3d_height(float value);
  private:
  float _internal_min_3d_height() const;
  void _internal_set_min_3d_height(float value);
  public:

  // optional .apollo.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  ::apollo::perception::obstacle::yolo::ModelType model_type() const;
  void set_model_type(::apollo::perception::obstacle::yolo::ModelType value);
  private:
  ::apollo::perception::obstacle::yolo::ModelType _internal_model_type() const;
  void _internal_set_model_type(::apollo::perception::obstacle::yolo::ModelType value);
  public:

  // optional float offset_ratio = 7 [default = 0.288889];
  bool has_offset_ratio() const;
  private:
  bool _internal_has_offset_ratio() const;
  public:
  void clear_offset_ratio();
  float offset_ratio() const;
  void set_offset_ratio(float value);
  private:
  float _internal_offset_ratio() const;
  void _internal_set_offset_ratio(float value);
  public:

  // optional float confidence_threshold = 8 [default = 0.1];
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional float cropped_ratio = 13 [default = 0.711111];
  bool has_cropped_ratio() const;
  private:
  bool _internal_has_cropped_ratio() const;
  public:
  void clear_cropped_ratio();
  float cropped_ratio() const;
  void set_cropped_ratio(float value);
  private:
  float _internal_cropped_ratio() const;
  void _internal_set_cropped_ratio(float value);
  public:

  // optional int32 resized_width = 14 [default = 1440];
  bool has_resized_width() const;
  private:
  bool _internal_has_resized_width() const;
  public:
  void clear_resized_width();
  int32_t resized_width() const;
  void set_resized_width(int32_t value);
  private:
  int32_t _internal_resized_width() const;
  void _internal_set_resized_width(int32_t value);
  public:

  // optional int32 aligned_pixel = 15 [default = 32];
  bool has_aligned_pixel() const;
  private:
  bool _internal_has_aligned_pixel() const;
  public:
  void clear_aligned_pixel();
  int32_t aligned_pixel() const;
  void set_aligned_pixel(int32_t value);
  private:
  int32_t _internal_aligned_pixel() const;
  void _internal_set_aligned_pixel(int32_t value);
  public:

  // optional int32 ignored_height = 16 [default = 100];
  bool has_ignored_height() const;
  private:
  bool _internal_has_ignored_height() const;
  public:
  void clear_ignored_height();
  int32_t ignored_height() const;
  void set_ignored_height(int32_t value);
  private:
  int32_t _internal_ignored_height() const;
  void _internal_set_ignored_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.obstacle.yolo.ModelParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_model_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_proto_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_weight_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_anchors_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchors_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_types_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr types_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_feature_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_calibratetable_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibratetable_root_;
    float min_2d_height_;
    float min_3d_height_;
    int model_type_;
    float offset_ratio_;
    float confidence_threshold_;
    float cropped_ratio_;
    int32_t resized_width_;
    int32_t aligned_pixel_;
    int32_t ignored_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.obstacle.yolo.NetworkParam) */ {
 public:
  inline NetworkParam() : NetworkParam(nullptr) {}
  ~NetworkParam() override;
  explicit PROTOBUF_CONSTEXPR NetworkParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.obstacle.yolo.NetworkParam";
  }
  protected:
  explicit NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocBlobFieldNumber = 1,
    kObjBlobFieldNumber = 2,
    kClsBlobFieldNumber = 3,
    kOriBlobFieldNumber = 4,
    kDimBlobFieldNumber = 5,
    kLofBlobFieldNumber = 6,
    kLorBlobFieldNumber = 7,
    kSegBlobFieldNumber = 8,
    kInputBlobFieldNumber = 10,
  };
  // optional string loc_blob = 1 [default = "loc_pred"];
  bool has_loc_blob() const;
  private:
  bool _internal_has_loc_blob() const;
  public:
  void clear_loc_blob();
  const std::string& loc_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loc_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loc_blob();
  PROTOBUF_NODISCARD std::string* release_loc_blob();
  void set_allocated_loc_blob(std::string* loc_blob);
  private:
  const std::string& _internal_loc_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loc_blob(const std::string& value);
  std::string* _internal_mutable_loc_blob();
  public:

  // optional string obj_blob = 2 [default = "obj_pred"];
  bool has_obj_blob() const;
  private:
  bool _internal_has_obj_blob() const;
  public:
  void clear_obj_blob();
  const std::string& obj_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obj_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obj_blob();
  PROTOBUF_NODISCARD std::string* release_obj_blob();
  void set_allocated_obj_blob(std::string* obj_blob);
  private:
  const std::string& _internal_obj_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_blob(const std::string& value);
  std::string* _internal_mutable_obj_blob();
  public:

  // optional string cls_blob = 3 [default = "cls_pred"];
  bool has_cls_blob() const;
  private:
  bool _internal_has_cls_blob() const;
  public:
  void clear_cls_blob();
  const std::string& cls_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cls_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cls_blob();
  PROTOBUF_NODISCARD std::string* release_cls_blob();
  void set_allocated_cls_blob(std::string* cls_blob);
  private:
  const std::string& _internal_cls_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cls_blob(const std::string& value);
  std::string* _internal_mutable_cls_blob();
  public:

  // optional string ori_blob = 4 [default = "ori_pred"];
  bool has_ori_blob() const;
  private:
  bool _internal_has_ori_blob() const;
  public:
  void clear_ori_blob();
  const std::string& ori_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ori_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ori_blob();
  PROTOBUF_NODISCARD std::string* release_ori_blob();
  void set_allocated_ori_blob(std::string* ori_blob);
  private:
  const std::string& _internal_ori_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ori_blob(const std::string& value);
  std::string* _internal_mutable_ori_blob();
  public:

  // optional string dim_blob = 5 [default = "dim_pred"];
  bool has_dim_blob() const;
  private:
  bool _internal_has_dim_blob() const;
  public:
  void clear_dim_blob();
  const std::string& dim_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dim_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dim_blob();
  PROTOBUF_NODISCARD std::string* release_dim_blob();
  void set_allocated_dim_blob(std::string* dim_blob);
  private:
  const std::string& _internal_dim_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dim_blob(const std::string& value);
  std::string* _internal_mutable_dim_blob();
  public:

  // optional string lof_blob = 6 [default = "lof_pred"];
  bool has_lof_blob() const;
  private:
  bool _internal_has_lof_blob() const;
  public:
  void clear_lof_blob();
  const std::string& lof_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lof_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lof_blob();
  PROTOBUF_NODISCARD std::string* release_lof_blob();
  void set_allocated_lof_blob(std::string* lof_blob);
  private:
  const std::string& _internal_lof_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lof_blob(const std::string& value);
  std::string* _internal_mutable_lof_blob();
  public:

  // optional string lor_blob = 7 [default = "lor_pred"];
  bool has_lor_blob() const;
  private:
  bool _internal_has_lor_blob() const;
  public:
  void clear_lor_blob();
  const std::string& lor_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lor_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lor_blob();
  PROTOBUF_NODISCARD std::string* release_lor_blob();
  void set_allocated_lor_blob(std::string* lor_blob);
  private:
  const std::string& _internal_lor_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lor_blob(const std::string& value);
  std::string* _internal_mutable_lor_blob();
  public:

  // optional string seg_blob = 8 [default = "seg_pred"];
  bool has_seg_blob() const;
  private:
  bool _internal_has_seg_blob() const;
  public:
  void clear_seg_blob();
  const std::string& seg_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seg_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seg_blob();
  PROTOBUF_NODISCARD std::string* release_seg_blob();
  void set_allocated_seg_blob(std::string* seg_blob);
  private:
  const std::string& _internal_seg_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seg_blob(const std::string& value);
  std::string* _internal_mutable_seg_blob();
  public:

  // optional string input_blob = 10 [default = "data"];
  bool has_input_blob() const;
  private:
  bool _internal_has_input_blob() const;
  public:
  void clear_input_blob();
  const std::string& input_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_blob();
  PROTOBUF_NODISCARD std::string* release_input_blob();
  void set_allocated_input_blob(std::string* input_blob);
  private:
  const std::string& _internal_input_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_blob(const std::string& value);
  std::string* _internal_mutable_input_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.obstacle.yolo.NetworkParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_loc_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loc_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_obj_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_cls_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cls_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_ori_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ori_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_dim_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dim_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_lof_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lof_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_lor_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lor_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_seg_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seg_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_input_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class NMSParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.obstacle.yolo.NMSParam) */ {
 public:
  inline NMSParam() : NMSParam(nullptr) {}
  ~NMSParam() override;
  explicit PROTOBUF_CONSTEXPR NMSParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NMSParam(const NMSParam& from);
  NMSParam(NMSParam&& from) noexcept
    : NMSParam() {
    *this = ::std::move(from);
  }

  inline NMSParam& operator=(const NMSParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NMSParam& operator=(NMSParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NMSParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const NMSParam* internal_default_instance() {
    return reinterpret_cast<const NMSParam*>(
               &_NMSParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NMSParam& a, NMSParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NMSParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NMSParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NMSParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NMSParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NMSParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NMSParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NMSParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.obstacle.yolo.NMSParam";
  }
  protected:
  explicit NMSParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kThresholdFieldNumber = 2,
    kSigmaFieldNumber = 3,
    kInterClsNmsThreshFieldNumber = 4,
    kCrossClassMergeThreshFieldNumber = 5,
  };
  // optional string type = 1 [default = "NormalNMS"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float threshold = 2 [default = 0.4];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // optional float sigma = 3 [default = 0.4];
  bool has_sigma() const;
  private:
  bool _internal_has_sigma() const;
  public:
  void clear_sigma();
  float sigma() const;
  void set_sigma(float value);
  private:
  float _internal_sigma() const;
  void _internal_set_sigma(float value);
  public:

  // optional float inter_cls_nms_thresh = 4 [default = 1];
  bool has_inter_cls_nms_thresh() const;
  private:
  bool _internal_has_inter_cls_nms_thresh() const;
  public:
  void clear_inter_cls_nms_thresh();
  float inter_cls_nms_thresh() const;
  void set_inter_cls_nms_thresh(float value);
  private:
  float _internal_inter_cls_nms_thresh() const;
  void _internal_set_inter_cls_nms_thresh(float value);
  public:

  // optional float cross_class_merge_thresh = 5 [default = 0.8];
  bool has_cross_class_merge_thresh() const;
  private:
  bool _internal_has_cross_class_merge_thresh() const;
  public:
  void clear_cross_class_merge_thresh();
  float cross_class_merge_thresh() const;
  void set_cross_class_merge_thresh(float value);
  private:
  float _internal_cross_class_merge_thresh() const;
  void _internal_set_cross_class_merge_thresh(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.obstacle.yolo.NMSParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    float threshold_;
    float sigma_;
    float inter_cls_nms_thresh_;
    float cross_class_merge_thresh_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// YoloParam

// required .apollo.perception.obstacle.yolo.ModelParam model_param = 1;
inline bool YoloParam::_internal_has_model_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_model_param() const {
  return _internal_has_model_param();
}
inline void YoloParam::clear_model_param() {
  if (_impl_.model_param_ != nullptr) _impl_.model_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::obstacle::yolo::ModelParam& YoloParam::_internal_model_param() const {
  const ::apollo::perception::obstacle::yolo::ModelParam* p = _impl_.model_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::obstacle::yolo::ModelParam&>(
      ::apollo::perception::obstacle::yolo::_ModelParam_default_instance_);
}
inline const ::apollo::perception::obstacle::yolo::ModelParam& YoloParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.YoloParam.model_param)
  return _internal_model_param();
}
inline void YoloParam::unsafe_arena_set_allocated_model_param(
    ::apollo::perception::obstacle::yolo::ModelParam* model_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_param_);
  }
  _impl_.model_param_ = model_param;
  if (model_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.obstacle.yolo.YoloParam.model_param)
}
inline ::apollo::perception::obstacle::yolo::ModelParam* YoloParam::release_model_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::obstacle::yolo::ModelParam* temp = _impl_.model_param_;
  _impl_.model_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::obstacle::yolo::ModelParam* YoloParam::unsafe_arena_release_model_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.YoloParam.model_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::obstacle::yolo::ModelParam* temp = _impl_.model_param_;
  _impl_.model_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::obstacle::yolo::ModelParam* YoloParam::_internal_mutable_model_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::obstacle::yolo::ModelParam>(GetArenaForAllocation());
    _impl_.model_param_ = p;
  }
  return _impl_.model_param_;
}
inline ::apollo::perception::obstacle::yolo::ModelParam* YoloParam::mutable_model_param() {
  ::apollo::perception::obstacle::yolo::ModelParam* _msg = _internal_mutable_model_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.YoloParam.model_param)
  return _msg;
}
inline void YoloParam::set_allocated_model_param(::apollo::perception::obstacle::yolo::ModelParam* model_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_param_;
  }
  if (model_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_param);
    if (message_arena != submessage_arena) {
      model_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_param_ = model_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.YoloParam.model_param)
}

// required .apollo.perception.obstacle.yolo.NetworkParam net_param = 2;
inline bool YoloParam::_internal_has_net_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.net_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_net_param() const {
  return _internal_has_net_param();
}
inline void YoloParam::clear_net_param() {
  if (_impl_.net_param_ != nullptr) _impl_.net_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::obstacle::yolo::NetworkParam& YoloParam::_internal_net_param() const {
  const ::apollo::perception::obstacle::yolo::NetworkParam* p = _impl_.net_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::obstacle::yolo::NetworkParam&>(
      ::apollo::perception::obstacle::yolo::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::obstacle::yolo::NetworkParam& YoloParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.YoloParam.net_param)
  return _internal_net_param();
}
inline void YoloParam::unsafe_arena_set_allocated_net_param(
    ::apollo::perception::obstacle::yolo::NetworkParam* net_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.net_param_);
  }
  _impl_.net_param_ = net_param;
  if (net_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.obstacle.yolo.YoloParam.net_param)
}
inline ::apollo::perception::obstacle::yolo::NetworkParam* YoloParam::release_net_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::obstacle::yolo::NetworkParam* temp = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::obstacle::yolo::NetworkParam* YoloParam::unsafe_arena_release_net_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.YoloParam.net_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::obstacle::yolo::NetworkParam* temp = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::obstacle::yolo::NetworkParam* YoloParam::_internal_mutable_net_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::obstacle::yolo::NetworkParam>(GetArenaForAllocation());
    _impl_.net_param_ = p;
  }
  return _impl_.net_param_;
}
inline ::apollo::perception::obstacle::yolo::NetworkParam* YoloParam::mutable_net_param() {
  ::apollo::perception::obstacle::yolo::NetworkParam* _msg = _internal_mutable_net_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.YoloParam.net_param)
  return _msg;
}
inline void YoloParam::set_allocated_net_param(::apollo::perception::obstacle::yolo::NetworkParam* net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.net_param_;
  }
  if (net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(net_param);
    if (message_arena != submessage_arena) {
      net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.YoloParam.net_param)
}

// optional .apollo.perception.obstacle.yolo.NMSParam nms_param = 3;
inline bool YoloParam::_internal_has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void YoloParam::clear_nms_param() {
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::obstacle::yolo::NMSParam& YoloParam::_internal_nms_param() const {
  const ::apollo::perception::obstacle::yolo::NMSParam* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::obstacle::yolo::NMSParam&>(
      ::apollo::perception::obstacle::yolo::_NMSParam_default_instance_);
}
inline const ::apollo::perception::obstacle::yolo::NMSParam& YoloParam::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.YoloParam.nms_param)
  return _internal_nms_param();
}
inline void YoloParam::unsafe_arena_set_allocated_nms_param(
    ::apollo::perception::obstacle::yolo::NMSParam* nms_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = nms_param;
  if (nms_param) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.obstacle.yolo.YoloParam.nms_param)
}
inline ::apollo::perception::obstacle::yolo::NMSParam* YoloParam::release_nms_param() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::obstacle::yolo::NMSParam* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::obstacle::yolo::NMSParam* YoloParam::unsafe_arena_release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.YoloParam.nms_param)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::obstacle::yolo::NMSParam* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::obstacle::yolo::NMSParam* YoloParam::_internal_mutable_nms_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::obstacle::yolo::NMSParam>(GetArenaForAllocation());
    _impl_.nms_param_ = p;
  }
  return _impl_.nms_param_;
}
inline ::apollo::perception::obstacle::yolo::NMSParam* YoloParam::mutable_nms_param() {
  ::apollo::perception::obstacle::yolo::NMSParam* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.YoloParam.nms_param)
  return _msg;
}
inline void YoloParam::set_allocated_nms_param(::apollo::perception::obstacle::yolo::NMSParam* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nms_param);
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.YoloParam.nms_param)
}

// -------------------------------------------------------------------

// ModelParam

// required string model_name = 1 [default = "yolo-2d"];
inline bool ModelParam::_internal_has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void ModelParam::clear_model_name() {
  _impl_.model_name_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.model_name)
  if (_impl_.model_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_model_name_.get();
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_model_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.model_name)
}
inline std::string* ModelParam::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.model_name)
  return _s;
}
inline const std::string& ModelParam::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void ModelParam::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_name_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_model_name_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_name_.Release();
  return p;
}
inline void ModelParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_name_.SetAllocated(model_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "deploy.pt"];
inline bool ModelParam::_internal_has_proto_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ModelParam::clear_proto_file() {
  _impl_.proto_file_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.proto_file)
  if (_impl_.proto_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_proto_file_.get();
  return _internal_proto_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_proto_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.proto_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.proto_file)
}
inline std::string* ModelParam::mutable_proto_file() {
  std::string* _s = _internal_mutable_proto_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.proto_file)
  return _s;
}
inline const std::string& ModelParam::_internal_proto_file() const {
  return _impl_.proto_file_.Get();
}
inline void ModelParam::_internal_set_proto_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.proto_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_proto_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.proto_file_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_proto_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.proto_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proto_file_.SetAllocated(proto_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "deploy.md"];
inline bool ModelParam::_internal_has_weight_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ModelParam::clear_weight_file() {
  _impl_.weight_file_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.weight_file)
  if (_impl_.weight_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_weight_file_.get();
  return _internal_weight_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_weight_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.weight_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.weight_file)
}
inline std::string* ModelParam::mutable_weight_file() {
  std::string* _s = _internal_mutable_weight_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.weight_file)
  return _s;
}
inline const std::string& ModelParam::_internal_weight_file() const {
  return _impl_.weight_file_.Get();
}
inline void ModelParam::_internal_set_weight_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.weight_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_weight_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.weight_file_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_weight_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.weight_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.weight_file_.SetAllocated(weight_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.weight_file)
}

// optional string anchors_file = 4 [default = "anchors.txt"];
inline bool ModelParam::_internal_has_anchors_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelParam::has_anchors_file() const {
  return _internal_has_anchors_file();
}
inline void ModelParam::clear_anchors_file() {
  _impl_.anchors_file_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_anchors_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelParam::anchors_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.anchors_file)
  if (_impl_.anchors_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_anchors_file_.get();
  return _internal_anchors_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_anchors_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.anchors_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.anchors_file)
}
inline std::string* ModelParam::mutable_anchors_file() {
  std::string* _s = _internal_mutable_anchors_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.anchors_file)
  return _s;
}
inline const std::string& ModelParam::_internal_anchors_file() const {
  return _impl_.anchors_file_.Get();
}
inline void ModelParam::_internal_set_anchors_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.anchors_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_anchors_file() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.anchors_file_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_anchors_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_anchors_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.anchors_file)
  if (!_internal_has_anchors_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.anchors_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_anchors_file(std::string* anchors_file) {
  if (anchors_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.anchors_file_.SetAllocated(anchors_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.anchors_file)
}

// optional string types_file = 5 [default = "types.txt"];
inline bool ModelParam::_internal_has_types_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelParam::has_types_file() const {
  return _internal_has_types_file();
}
inline void ModelParam::clear_types_file() {
  _impl_.types_file_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_types_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ModelParam::types_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.types_file)
  if (_impl_.types_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_types_file_.get();
  return _internal_types_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_types_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.types_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.types_file)
}
inline std::string* ModelParam::mutable_types_file() {
  std::string* _s = _internal_mutable_types_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.types_file)
  return _s;
}
inline const std::string& ModelParam::_internal_types_file() const {
  return _impl_.types_file_.Get();
}
inline void ModelParam::_internal_set_types_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.types_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_types_file() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.types_file_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_types_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_types_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.types_file)
  if (!_internal_has_types_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.types_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_types_file(std::string* types_file) {
  if (types_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.types_file_.SetAllocated(types_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.types_file)
}

// optional string feature_file = 6 [default = "feature.pt"];
inline bool ModelParam::_internal_has_feature_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelParam::has_feature_file() const {
  return _internal_has_feature_file();
}
inline void ModelParam::clear_feature_file() {
  _impl_.feature_file_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_feature_file_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ModelParam::feature_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.feature_file)
  if (_impl_.feature_file_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_feature_file_.get();
  return _internal_feature_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_feature_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.feature_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.feature_file)
}
inline std::string* ModelParam::mutable_feature_file() {
  std::string* _s = _internal_mutable_feature_file();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.feature_file)
  return _s;
}
inline const std::string& ModelParam::_internal_feature_file() const {
  return _impl_.feature_file_.Get();
}
inline void ModelParam::_internal_set_feature_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.feature_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_feature_file() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.feature_file_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_feature_file_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_feature_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.feature_file)
  if (!_internal_has_feature_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.feature_file_.Release();
  return p;
}
inline void ModelParam::set_allocated_feature_file(std::string* feature_file) {
  if (feature_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.feature_file_.SetAllocated(feature_file, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.feature_file)
}

// optional float offset_ratio = 7 [default = 0.288889];
inline bool ModelParam::_internal_has_offset_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelParam::has_offset_ratio() const {
  return _internal_has_offset_ratio();
}
inline void ModelParam::clear_offset_ratio() {
  _impl_.offset_ratio_ = 0.288889f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ModelParam::_internal_offset_ratio() const {
  return _impl_.offset_ratio_;
}
inline float ModelParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.offset_ratio)
  return _internal_offset_ratio();
}
inline void ModelParam::_internal_set_offset_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.offset_ratio_ = value;
}
inline void ModelParam::set_offset_ratio(float value) {
  _internal_set_offset_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.offset_ratio)
}

// optional float cropped_ratio = 13 [default = 0.711111];
inline bool ModelParam::_internal_has_cropped_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelParam::has_cropped_ratio() const {
  return _internal_has_cropped_ratio();
}
inline void ModelParam::clear_cropped_ratio() {
  _impl_.cropped_ratio_ = 0.711111f;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float ModelParam::_internal_cropped_ratio() const {
  return _impl_.cropped_ratio_;
}
inline float ModelParam::cropped_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.cropped_ratio)
  return _internal_cropped_ratio();
}
inline void ModelParam::_internal_set_cropped_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.cropped_ratio_ = value;
}
inline void ModelParam::set_cropped_ratio(float value) {
  _internal_set_cropped_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.cropped_ratio)
}

// optional int32 resized_width = 14 [default = 1440];
inline bool ModelParam::_internal_has_resized_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelParam::has_resized_width() const {
  return _internal_has_resized_width();
}
inline void ModelParam::clear_resized_width() {
  _impl_.resized_width_ = 1440;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t ModelParam::_internal_resized_width() const {
  return _impl_.resized_width_;
}
inline int32_t ModelParam::resized_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.resized_width)
  return _internal_resized_width();
}
inline void ModelParam::_internal_set_resized_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.resized_width_ = value;
}
inline void ModelParam::set_resized_width(int32_t value) {
  _internal_set_resized_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.resized_width)
}

// optional int32 aligned_pixel = 15 [default = 32];
inline bool ModelParam::_internal_has_aligned_pixel() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelParam::has_aligned_pixel() const {
  return _internal_has_aligned_pixel();
}
inline void ModelParam::clear_aligned_pixel() {
  _impl_.aligned_pixel_ = 32;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t ModelParam::_internal_aligned_pixel() const {
  return _impl_.aligned_pixel_;
}
inline int32_t ModelParam::aligned_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.aligned_pixel)
  return _internal_aligned_pixel();
}
inline void ModelParam::_internal_set_aligned_pixel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.aligned_pixel_ = value;
}
inline void ModelParam::set_aligned_pixel(int32_t value) {
  _internal_set_aligned_pixel(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.aligned_pixel)
}

// optional float confidence_threshold = 8 [default = 0.1];
inline bool ModelParam::_internal_has_confidence_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelParam::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void ModelParam::clear_confidence_threshold() {
  _impl_.confidence_threshold_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float ModelParam::_internal_confidence_threshold() const {
  return _impl_.confidence_threshold_;
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void ModelParam::_internal_set_confidence_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.confidence_threshold_ = value;
}
inline void ModelParam::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.confidence_threshold)
}

// optional float min_2d_height = 9 [default = 0];
inline bool ModelParam::_internal_has_min_2d_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelParam::has_min_2d_height() const {
  return _internal_has_min_2d_height();
}
inline void ModelParam::clear_min_2d_height() {
  _impl_.min_2d_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float ModelParam::_internal_min_2d_height() const {
  return _impl_.min_2d_height_;
}
inline float ModelParam::min_2d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.min_2d_height)
  return _internal_min_2d_height();
}
inline void ModelParam::_internal_set_min_2d_height(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.min_2d_height_ = value;
}
inline void ModelParam::set_min_2d_height(float value) {
  _internal_set_min_2d_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.min_2d_height)
}

// optional float min_3d_height = 10 [default = 0];
inline bool ModelParam::_internal_has_min_3d_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelParam::has_min_3d_height() const {
  return _internal_has_min_3d_height();
}
inline void ModelParam::clear_min_3d_height() {
  _impl_.min_3d_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float ModelParam::_internal_min_3d_height() const {
  return _impl_.min_3d_height_;
}
inline float ModelParam::min_3d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.min_3d_height)
  return _internal_min_3d_height();
}
inline void ModelParam::_internal_set_min_3d_height(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.min_3d_height_ = value;
}
inline void ModelParam::set_min_3d_height(float value) {
  _internal_set_min_3d_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.min_3d_height)
}

// optional string calibratetable_root = 11 [default = "./"];
inline bool ModelParam::_internal_has_calibratetable_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelParam::has_calibratetable_root() const {
  return _internal_has_calibratetable_root();
}
inline void ModelParam::clear_calibratetable_root() {
  _impl_.calibratetable_root_.ClearToDefault(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_calibratetable_root_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ModelParam::calibratetable_root() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.calibratetable_root)
  if (_impl_.calibratetable_root_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_calibratetable_root_.get();
  return _internal_calibratetable_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelParam::set_calibratetable_root(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.calibratetable_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
inline std::string* ModelParam::mutable_calibratetable_root() {
  std::string* _s = _internal_mutable_calibratetable_root();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.ModelParam.calibratetable_root)
  return _s;
}
inline const std::string& ModelParam::_internal_calibratetable_root() const {
  return _impl_.calibratetable_root_.Get();
}
inline void ModelParam::_internal_set_calibratetable_root(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.calibratetable_root_.Set(value, GetArenaForAllocation());
}
inline std::string* ModelParam::_internal_mutable_calibratetable_root() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.calibratetable_root_.Mutable(::apollo::perception::obstacle::yolo::ModelParam::Impl_::_i_give_permission_to_break_this_code_default_calibratetable_root_, GetArenaForAllocation());
}
inline std::string* ModelParam::release_calibratetable_root() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.ModelParam.calibratetable_root)
  if (!_internal_has_calibratetable_root()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.calibratetable_root_.Release();
  return p;
}
inline void ModelParam::set_allocated_calibratetable_root(std::string* calibratetable_root) {
  if (calibratetable_root != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.calibratetable_root_.SetAllocated(calibratetable_root, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.ModelParam.calibratetable_root)
}

// optional .apollo.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
inline bool ModelParam::_internal_has_model_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ModelParam::clear_model_type() {
  _impl_.model_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::perception::obstacle::yolo::ModelType ModelParam::_internal_model_type() const {
  return static_cast< ::apollo::perception::obstacle::yolo::ModelType >(_impl_.model_type_);
}
inline ::apollo::perception::obstacle::yolo::ModelType ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.model_type)
  return _internal_model_type();
}
inline void ModelParam::_internal_set_model_type(::apollo::perception::obstacle::yolo::ModelType value) {
  assert(::apollo::perception::obstacle::yolo::ModelType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.model_type_ = value;
}
inline void ModelParam::set_model_type(::apollo::perception::obstacle::yolo::ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.model_type)
}

// optional int32 ignored_height = 16 [default = 100];
inline bool ModelParam::_internal_has_ignored_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelParam::has_ignored_height() const {
  return _internal_has_ignored_height();
}
inline void ModelParam::clear_ignored_height() {
  _impl_.ignored_height_ = 100;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t ModelParam::_internal_ignored_height() const {
  return _impl_.ignored_height_;
}
inline int32_t ModelParam::ignored_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.ModelParam.ignored_height)
  return _internal_ignored_height();
}
inline void ModelParam::_internal_set_ignored_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.ignored_height_ = value;
}
inline void ModelParam::set_ignored_height(int32_t value) {
  _internal_set_ignored_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.ModelParam.ignored_height)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string loc_blob = 1 [default = "loc_pred"];
inline bool NetworkParam::_internal_has_loc_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_loc_blob() const {
  return _internal_has_loc_blob();
}
inline void NetworkParam::clear_loc_blob() {
  _impl_.loc_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_loc_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.loc_blob)
  if (_impl_.loc_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_loc_blob_.get();
  return _internal_loc_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_loc_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.loc_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.loc_blob)
}
inline std::string* NetworkParam::mutable_loc_blob() {
  std::string* _s = _internal_mutable_loc_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.loc_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_loc_blob() const {
  return _impl_.loc_blob_.Get();
}
inline void NetworkParam::_internal_set_loc_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.loc_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_loc_blob() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.loc_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_loc_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_loc_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.loc_blob)
  if (!_internal_has_loc_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.loc_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_loc_blob(std::string* loc_blob) {
  if (loc_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.loc_blob_.SetAllocated(loc_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.loc_blob)
}

// optional string obj_blob = 2 [default = "obj_pred"];
inline bool NetworkParam::_internal_has_obj_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_obj_blob() const {
  return _internal_has_obj_blob();
}
inline void NetworkParam::clear_obj_blob() {
  _impl_.obj_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_obj_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.obj_blob)
  if (_impl_.obj_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_obj_blob_.get();
  return _internal_obj_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_obj_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.obj_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.obj_blob)
}
inline std::string* NetworkParam::mutable_obj_blob() {
  std::string* _s = _internal_mutable_obj_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.obj_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_obj_blob() const {
  return _impl_.obj_blob_.Get();
}
inline void NetworkParam::_internal_set_obj_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.obj_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_obj_blob() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.obj_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_obj_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_obj_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.obj_blob)
  if (!_internal_has_obj_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.obj_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_obj_blob(std::string* obj_blob) {
  if (obj_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.obj_blob_.SetAllocated(obj_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.obj_blob)
}

// optional string cls_blob = 3 [default = "cls_pred"];
inline bool NetworkParam::_internal_has_cls_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkParam::has_cls_blob() const {
  return _internal_has_cls_blob();
}
inline void NetworkParam::clear_cls_blob() {
  _impl_.cls_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_cls_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkParam::cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.cls_blob)
  if (_impl_.cls_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_cls_blob_.get();
  return _internal_cls_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_cls_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.cls_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.cls_blob)
}
inline std::string* NetworkParam::mutable_cls_blob() {
  std::string* _s = _internal_mutable_cls_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.cls_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_cls_blob() const {
  return _impl_.cls_blob_.Get();
}
inline void NetworkParam::_internal_set_cls_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cls_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_cls_blob() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.cls_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_cls_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_cls_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.cls_blob)
  if (!_internal_has_cls_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.cls_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_cls_blob(std::string* cls_blob) {
  if (cls_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cls_blob_.SetAllocated(cls_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.cls_blob)
}

// optional string ori_blob = 4 [default = "ori_pred"];
inline bool NetworkParam::_internal_has_ori_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkParam::has_ori_blob() const {
  return _internal_has_ori_blob();
}
inline void NetworkParam::clear_ori_blob() {
  _impl_.ori_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ori_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetworkParam::ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.ori_blob)
  if (_impl_.ori_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_ori_blob_.get();
  return _internal_ori_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_ori_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.ori_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.ori_blob)
}
inline std::string* NetworkParam::mutable_ori_blob() {
  std::string* _s = _internal_mutable_ori_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.ori_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_ori_blob() const {
  return _impl_.ori_blob_.Get();
}
inline void NetworkParam::_internal_set_ori_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ori_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_ori_blob() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.ori_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_ori_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_ori_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.ori_blob)
  if (!_internal_has_ori_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.ori_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_ori_blob(std::string* ori_blob) {
  if (ori_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.ori_blob_.SetAllocated(ori_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.ori_blob)
}

// optional string dim_blob = 5 [default = "dim_pred"];
inline bool NetworkParam::_internal_has_dim_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkParam::has_dim_blob() const {
  return _internal_has_dim_blob();
}
inline void NetworkParam::clear_dim_blob() {
  _impl_.dim_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_dim_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetworkParam::dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.dim_blob)
  if (_impl_.dim_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_dim_blob_.get();
  return _internal_dim_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_dim_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.dim_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.dim_blob)
}
inline std::string* NetworkParam::mutable_dim_blob() {
  std::string* _s = _internal_mutable_dim_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.dim_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_dim_blob() const {
  return _impl_.dim_blob_.Get();
}
inline void NetworkParam::_internal_set_dim_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dim_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_dim_blob() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.dim_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_dim_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_dim_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.dim_blob)
  if (!_internal_has_dim_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.dim_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_dim_blob(std::string* dim_blob) {
  if (dim_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.dim_blob_.SetAllocated(dim_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.dim_blob)
}

// optional string lof_blob = 6 [default = "lof_pred"];
inline bool NetworkParam::_internal_has_lof_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkParam::has_lof_blob() const {
  return _internal_has_lof_blob();
}
inline void NetworkParam::clear_lof_blob() {
  _impl_.lof_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lof_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NetworkParam::lof_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.lof_blob)
  if (_impl_.lof_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_lof_blob_.get();
  return _internal_lof_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_lof_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.lof_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.lof_blob)
}
inline std::string* NetworkParam::mutable_lof_blob() {
  std::string* _s = _internal_mutable_lof_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.lof_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_lof_blob() const {
  return _impl_.lof_blob_.Get();
}
inline void NetworkParam::_internal_set_lof_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lof_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_lof_blob() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.lof_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lof_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_lof_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.lof_blob)
  if (!_internal_has_lof_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.lof_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_lof_blob(std::string* lof_blob) {
  if (lof_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.lof_blob_.SetAllocated(lof_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.lof_blob)
}

// optional string lor_blob = 7 [default = "lor_pred"];
inline bool NetworkParam::_internal_has_lor_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetworkParam::has_lor_blob() const {
  return _internal_has_lor_blob();
}
inline void NetworkParam::clear_lor_blob() {
  _impl_.lor_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lor_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& NetworkParam::lor_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.lor_blob)
  if (_impl_.lor_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_lor_blob_.get();
  return _internal_lor_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_lor_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.lor_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.lor_blob)
}
inline std::string* NetworkParam::mutable_lor_blob() {
  std::string* _s = _internal_mutable_lor_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.lor_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_lor_blob() const {
  return _impl_.lor_blob_.Get();
}
inline void NetworkParam::_internal_set_lor_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lor_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_lor_blob() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.lor_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_lor_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_lor_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.lor_blob)
  if (!_internal_has_lor_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.lor_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_lor_blob(std::string* lor_blob) {
  if (lor_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.lor_blob_.SetAllocated(lor_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.lor_blob)
}

// optional string seg_blob = 8 [default = "seg_pred"];
inline bool NetworkParam::_internal_has_seg_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NetworkParam::has_seg_blob() const {
  return _internal_has_seg_blob();
}
inline void NetworkParam::clear_seg_blob() {
  _impl_.seg_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_seg_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& NetworkParam::seg_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.seg_blob)
  if (_impl_.seg_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_seg_blob_.get();
  return _internal_seg_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_seg_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.seg_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.seg_blob)
}
inline std::string* NetworkParam::mutable_seg_blob() {
  std::string* _s = _internal_mutable_seg_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.seg_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_seg_blob() const {
  return _impl_.seg_blob_.Get();
}
inline void NetworkParam::_internal_set_seg_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.seg_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_seg_blob() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.seg_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_seg_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_seg_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.seg_blob)
  if (!_internal_has_seg_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.seg_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_seg_blob(std::string* seg_blob) {
  if (seg_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.seg_blob_.SetAllocated(seg_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.seg_blob)
}

// optional string input_blob = 10 [default = "data"];
inline bool NetworkParam::_internal_has_input_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NetworkParam::has_input_blob() const {
  return _internal_has_input_blob();
}
inline void NetworkParam::clear_input_blob() {
  _impl_.input_blob_.ClearToDefault(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NetworkParam.input_blob)
  if (_impl_.input_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_input_blob_.get();
  return _internal_input_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_input_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.input_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NetworkParam.input_blob)
}
inline std::string* NetworkParam::mutable_input_blob() {
  std::string* _s = _internal_mutable_input_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NetworkParam.input_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_input_blob() const {
  return _impl_.input_blob_.Get();
}
inline void NetworkParam::_internal_set_input_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.input_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_input_blob() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.input_blob_.Mutable(::apollo::perception::obstacle::yolo::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_input_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NetworkParam.input_blob)
  if (!_internal_has_input_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.input_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_input_blob(std::string* input_blob) {
  if (input_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.input_blob_.SetAllocated(input_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NetworkParam.input_blob)
}

// -------------------------------------------------------------------

// NMSParam

// optional string type = 1 [default = "NormalNMS"];
inline bool NMSParam::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NMSParam::has_type() const {
  return _internal_has_type();
}
inline void NMSParam::clear_type() {
  _impl_.type_.ClearToDefault(::apollo::perception::obstacle::yolo::NMSParam::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NMSParam::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NMSParam.type)
  if (_impl_.type_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_type_.get();
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NMSParam::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NMSParam.type)
}
inline std::string* NMSParam::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:apollo.perception.obstacle.yolo.NMSParam.type)
  return _s;
}
inline const std::string& NMSParam::_internal_type() const {
  return _impl_.type_.Get();
}
inline void NMSParam::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* NMSParam::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(::apollo::perception::obstacle::yolo::NMSParam::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
}
inline std::string* NMSParam::release_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.obstacle.yolo.NMSParam.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
  return p;
}
inline void NMSParam::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.obstacle.yolo.NMSParam.type)
}

// optional float threshold = 2 [default = 0.4];
inline bool NMSParam::_internal_has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NMSParam::has_threshold() const {
  return _internal_has_threshold();
}
inline void NMSParam::clear_threshold() {
  _impl_.threshold_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NMSParam::_internal_threshold() const {
  return _impl_.threshold_;
}
inline float NMSParam::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NMSParam.threshold)
  return _internal_threshold();
}
inline void NMSParam::_internal_set_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.threshold_ = value;
}
inline void NMSParam::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NMSParam.threshold)
}

// optional float sigma = 3 [default = 0.4];
inline bool NMSParam::_internal_has_sigma() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NMSParam::has_sigma() const {
  return _internal_has_sigma();
}
inline void NMSParam::clear_sigma() {
  _impl_.sigma_ = 0.4f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NMSParam::_internal_sigma() const {
  return _impl_.sigma_;
}
inline float NMSParam::sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NMSParam.sigma)
  return _internal_sigma();
}
inline void NMSParam::_internal_set_sigma(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sigma_ = value;
}
inline void NMSParam::set_sigma(float value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NMSParam.sigma)
}

// optional float inter_cls_nms_thresh = 4 [default = 1];
inline bool NMSParam::_internal_has_inter_cls_nms_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NMSParam::has_inter_cls_nms_thresh() const {
  return _internal_has_inter_cls_nms_thresh();
}
inline void NMSParam::clear_inter_cls_nms_thresh() {
  _impl_.inter_cls_nms_thresh_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float NMSParam::_internal_inter_cls_nms_thresh() const {
  return _impl_.inter_cls_nms_thresh_;
}
inline float NMSParam::inter_cls_nms_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
  return _internal_inter_cls_nms_thresh();
}
inline void NMSParam::_internal_set_inter_cls_nms_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.inter_cls_nms_thresh_ = value;
}
inline void NMSParam::set_inter_cls_nms_thresh(float value) {
  _internal_set_inter_cls_nms_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
}

// optional float cross_class_merge_thresh = 5 [default = 0.8];
inline bool NMSParam::_internal_has_cross_class_merge_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NMSParam::has_cross_class_merge_thresh() const {
  return _internal_has_cross_class_merge_thresh();
}
inline void NMSParam::clear_cross_class_merge_thresh() {
  _impl_.cross_class_merge_thresh_ = 0.8f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float NMSParam::_internal_cross_class_merge_thresh() const {
  return _impl_.cross_class_merge_thresh_;
}
inline float NMSParam::cross_class_merge_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
  return _internal_cross_class_merge_thresh();
}
inline void NMSParam::_internal_set_cross_class_merge_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cross_class_merge_thresh_ = value;
}
inline void NMSParam::set_cross_class_merge_thresh(float value) {
  _internal_set_cross_class_merge_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yolo
}  // namespace obstacle
}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::obstacle::yolo::ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::obstacle::yolo::ModelType>() {
  return ::apollo::perception::obstacle::yolo::ModelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto
