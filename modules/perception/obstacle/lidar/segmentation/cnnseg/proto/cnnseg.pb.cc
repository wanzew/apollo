// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto

#include "modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace perception {
namespace cnnseg {
PROTOBUF_CONSTEXPR CNNSegParam::CNNSegParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.network_param_)*/nullptr
  , /*decltype(_impl_.feature_param_)*/nullptr
  , /*decltype(_impl_.use_all_grids_for_clustering_)*/false
  , /*decltype(_impl_.use_full_cloud_)*/false
  , /*decltype(_impl_.gpu_id_)*/0u
  , /*decltype(_impl_.objectness_thresh_)*/0.5f
  , /*decltype(_impl_.confidence_thresh_)*/0.1f
  , /*decltype(_impl_.height_thresh_)*/0.5f
  , /*decltype(_impl_.min_pts_num_)*/3u} {}
struct CNNSegParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNNSegParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNNSegParamDefaultTypeInternal() {}
  union {
    CNNSegParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNNSegParamDefaultTypeInternal _CNNSegParam_default_instance_;
PROTOBUF_CONSTEXPR NetworkParam::NetworkParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_pt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_pt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_pt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_pt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feature_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.class_pt_blob_)*/{nullptr, ::_pbi::ConstantInitialized{}}} {}
struct NetworkParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkParamDefaultTypeInternal() {}
  union {
    NetworkParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
PROTOBUF_CONSTEXPR FeatureParam::FeatureParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_height_)*/5
  , /*decltype(_impl_.point_cloud_range_)*/60u
  , /*decltype(_impl_.width_)*/640u
  , /*decltype(_impl_.height_)*/640u
  , /*decltype(_impl_.min_height_)*/-5} {}
struct FeatureParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureParamDefaultTypeInternal() {}
  union {
    FeatureParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto = nullptr;

const uint32_t TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.network_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.feature_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.objectness_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.use_all_grids_for_clustering_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.confidence_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.height_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.min_pts_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.use_full_cloud_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::CNNSegParam, _impl_.gpu_id_),
  0,
  1,
  5,
  2,
  6,
  7,
  8,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.instance_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.category_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.confidence_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.height_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.feature_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::NetworkParam, _impl_.class_pt_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_.point_cloud_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_.min_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::cnnseg::FeatureParam, _impl_.max_height_),
  1,
  2,
  3,
  4,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::perception::cnnseg::CNNSegParam)},
  { 24, 36, -1, sizeof(::apollo::perception::cnnseg::NetworkParam)},
  { 42, 53, -1, sizeof(::apollo::perception::cnnseg::FeatureParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::perception::cnnseg::_CNNSegParam_default_instance_._instance,
  &::apollo::perception::cnnseg::_NetworkParam_default_instance_._instance,
  &::apollo::perception::cnnseg::_FeatureParam_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nHmodules/perception/obstacle/lidar/segm"
  "entation/cnnseg/proto/cnnseg.proto\022\030apol"
  "lo.perception.cnnseg\"\336\002\n\013CNNSegParam\022=\n\r"
  "network_param\030\001 \002(\0132&.apollo.perception."
  "cnnseg.NetworkParam\022=\n\rfeature_param\030\002 \002"
  "(\0132&.apollo.perception.cnnseg.FeaturePar"
  "am\022\036\n\021objectness_thresh\030\013 \001(\002:\0030.5\022+\n\034us"
  "e_all_grids_for_clustering\030\014 \001(\010:\005false\022"
  "\036\n\021confidence_thresh\030\r \001(\002:\0030.1\022\032\n\rheigh"
  "t_thresh\030\016 \001(\002:\0030.5\022\026\n\013min_pts_num\030\017 \001(\r"
  ":\0013\022\035\n\016use_full_cloud\030\037 \001(\010:\005false\022\021\n\006gp"
  "u_id\030) \001(\r:\0010\"\360\001\n\014NetworkParam\022%\n\020instan"
  "ce_pt_blob\030\001 \001(\t:\013instance_pt\022(\n\020categor"
  "y_pt_blob\030\002 \001(\t:\016category_score\022,\n\022confi"
  "dence_pt_blob\030\003 \001(\t:\020confidence_score\022!\n"
  "\016height_pt_blob\030\004 \001(\t:\theight_pt\022\032\n\014feat"
  "ure_blob\030\005 \001(\t:\004data\022\"\n\rclass_pt_blob\030\006 "
  "\001(\t:\013class_score\"\205\001\n\014FeatureParam\022\035\n\021poi"
  "nt_cloud_range\030\032 \001(\r:\00260\022\022\n\005width\030\033 \001(\r:"
  "\003640\022\023\n\006height\030\034 \001(\r:\003640\022\026\n\nmin_height\030"
  "\037 \001(\002:\002-5\022\025\n\nmax_height\030  \001(\002:\0015"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto = {
    false, false, 832, descriptor_table_protodef_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto,
    "modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto",
    &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto::offsets,
    file_level_metadata_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto, file_level_enum_descriptors_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto,
    file_level_service_descriptors_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto(&descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto);
namespace apollo {
namespace perception {
namespace cnnseg {

// ===================================================================

class CNNSegParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CNNSegParam>()._impl_._has_bits_);
  static const ::apollo::perception::cnnseg::NetworkParam& network_param(const CNNSegParam* msg);
  static void set_has_network_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::cnnseg::FeatureParam& feature_param(const CNNSegParam* msg);
  static void set_has_feature_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_objectness_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_all_grids_for_clustering(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confidence_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_pts_num(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_full_cloud(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::apollo::perception::cnnseg::NetworkParam&
CNNSegParam::_Internal::network_param(const CNNSegParam* msg) {
  return *msg->_impl_.network_param_;
}
const ::apollo::perception::cnnseg::FeatureParam&
CNNSegParam::_Internal::feature_param(const CNNSegParam* msg) {
  return *msg->_impl_.feature_param_;
}
CNNSegParam::CNNSegParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.cnnseg.CNNSegParam)
}
CNNSegParam::CNNSegParam(const CNNSegParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.network_param_){nullptr}
    , decltype(_impl_.feature_param_){nullptr}
    , decltype(_impl_.use_all_grids_for_clustering_){}
    , decltype(_impl_.use_full_cloud_){}
    , decltype(_impl_.gpu_id_){}
    , decltype(_impl_.objectness_thresh_){}
    , decltype(_impl_.confidence_thresh_){}
    , decltype(_impl_.height_thresh_){}
    , decltype(_impl_.min_pts_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_param()) {
    _impl_.network_param_ = new ::apollo::perception::cnnseg::NetworkParam(*from._impl_.network_param_);
  }
  if (from._internal_has_feature_param()) {
    _impl_.feature_param_ = new ::apollo::perception::cnnseg::FeatureParam(*from._impl_.feature_param_);
  }
  ::memcpy(&_impl_.use_all_grids_for_clustering_, &from._impl_.use_all_grids_for_clustering_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_pts_num_) -
    reinterpret_cast<char*>(&_impl_.use_all_grids_for_clustering_)) + sizeof(_impl_.min_pts_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.CNNSegParam)
}

inline void CNNSegParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.network_param_){nullptr}
    , decltype(_impl_.feature_param_){nullptr}
    , decltype(_impl_.use_all_grids_for_clustering_){false}
    , decltype(_impl_.use_full_cloud_){false}
    , decltype(_impl_.gpu_id_){0u}
    , decltype(_impl_.objectness_thresh_){0.5f}
    , decltype(_impl_.confidence_thresh_){0.1f}
    , decltype(_impl_.height_thresh_){0.5f}
    , decltype(_impl_.min_pts_num_){3u}
  };
}

CNNSegParam::~CNNSegParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.CNNSegParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNNSegParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.network_param_;
  if (this != internal_default_instance()) delete _impl_.feature_param_;
}

void CNNSegParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNNSegParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.CNNSegParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.network_param_ != nullptr);
      _impl_.network_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.feature_param_ != nullptr);
      _impl_.feature_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.use_all_grids_for_clustering_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gpu_id_) -
        reinterpret_cast<char*>(&_impl_.use_all_grids_for_clustering_)) + sizeof(_impl_.gpu_id_));
    _impl_.objectness_thresh_ = 0.5f;
    _impl_.confidence_thresh_ = 0.1f;
    _impl_.height_thresh_ = 0.5f;
  }
  _impl_.min_pts_num_ = 3u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNNSegParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float objectness_thresh = 11 [default = 0.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_objectness_thresh(&has_bits);
          _impl_.objectness_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_all_grids_for_clustering = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_use_all_grids_for_clustering(&has_bits);
          _impl_.use_all_grids_for_clustering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence_thresh = 13 [default = 0.1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_confidence_thresh(&has_bits);
          _impl_.confidence_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float height_thresh = 14 [default = 0.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_height_thresh(&has_bits);
          _impl_.height_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_pts_num = 15 [default = 3];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_min_pts_num(&has_bits);
          _impl_.min_pts_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_full_cloud = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_use_full_cloud(&has_bits);
          _impl_.use_full_cloud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpu_id = 41 [default = 0];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gpu_id(&has_bits);
          _impl_.gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNNSegParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.CNNSegParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::network_param(this),
        _Internal::network_param(this).GetCachedSize(), target, stream);
  }

  // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::feature_param(this),
        _Internal::feature_param(this).GetCachedSize(), target, stream);
  }

  // optional float objectness_thresh = 11 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_objectness_thresh(), target);
  }

  // optional bool use_all_grids_for_clustering = 12 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_use_all_grids_for_clustering(), target);
  }

  // optional float confidence_thresh = 13 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_confidence_thresh(), target);
  }

  // optional float height_thresh = 14 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_height_thresh(), target);
  }

  // optional uint32 min_pts_num = 15 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_min_pts_num(), target);
  }

  // optional bool use_full_cloud = 31 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_use_full_cloud(), target);
  }

  // optional uint32 gpu_id = 41 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.CNNSegParam)
  return target;
}

size_t CNNSegParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.perception.cnnseg.CNNSegParam)
  size_t total_size = 0;

  if (_internal_has_network_param()) {
    // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.network_param_);
  }

  if (_internal_has_feature_param()) {
    // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_param_);
  }

  return total_size;
}
size_t CNNSegParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.CNNSegParam)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.network_param_);

    // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_param_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional bool use_all_grids_for_clustering = 12 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_full_cloud = 31 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional uint32 gpu_id = 41 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpu_id());
    }

    // optional float objectness_thresh = 11 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float confidence_thresh = 13 [default = 0.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float height_thresh = 14 [default = 0.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional uint32 min_pts_num = 15 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_pts_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNNSegParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CNNSegParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNNSegParam::GetClassData() const { return &_class_data_; }

void CNNSegParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CNNSegParam *>(to)->MergeFrom(
      static_cast<const CNNSegParam &>(from));
}


void CNNSegParam::MergeFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.CNNSegParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_network_param()->::apollo::perception::cnnseg::NetworkParam::MergeFrom(from._internal_network_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_feature_param()->::apollo::perception::cnnseg::FeatureParam::MergeFrom(from._internal_feature_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.use_all_grids_for_clustering_ = from._impl_.use_all_grids_for_clustering_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.use_full_cloud_ = from._impl_.use_full_cloud_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gpu_id_ = from._impl_.gpu_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.objectness_thresh_ = from._impl_.objectness_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.confidence_thresh_ = from._impl_.confidence_thresh_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.height_thresh_ = from._impl_.height_thresh_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_min_pts_num(from._internal_min_pts_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNNSegParam::CopyFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.CNNSegParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNNSegParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CNNSegParam::InternalSwap(CNNSegParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNNSegParam, _impl_.gpu_id_)
      + sizeof(CNNSegParam::_impl_.gpu_id_)
      - PROTOBUF_FIELD_OFFSET(CNNSegParam, _impl_.network_param_)>(
          reinterpret_cast<char*>(&_impl_.network_param_),
          reinterpret_cast<char*>(&other->_impl_.network_param_));
  swap(_impl_.objectness_thresh_, other->_impl_.objectness_thresh_);
  swap(_impl_.confidence_thresh_, other->_impl_.confidence_thresh_);
  swap(_impl_.height_thresh_, other->_impl_.height_thresh_);
  swap(_impl_.min_pts_num_, other->_impl_.min_pts_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNNSegParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_getter, &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_once,
      file_level_metadata_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto[0]);
}

// ===================================================================

class NetworkParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkParam>()._impl_._has_bits_);
  static void set_has_instance_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_confidence_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_feature_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_class_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_instance_pt_blob_{{{"instance_pt", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_category_pt_blob_{{{"category_score", 14}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_confidence_pt_blob_{{{"confidence_score", 16}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_height_pt_blob_{{{"height_pt", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feature_blob_{{{"data", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_class_pt_blob_{{{"class_score", 11}}, {nullptr}};
NetworkParam::NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.cnnseg.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_pt_blob_){}
    , decltype(_impl_.category_pt_blob_){}
    , decltype(_impl_.confidence_pt_blob_){}
    , decltype(_impl_.height_pt_blob_){}
    , decltype(_impl_.feature_blob_){}
    , decltype(_impl_.class_pt_blob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_pt_blob_.InitDefault();
  if (from._internal_has_instance_pt_blob()) {
    _impl_.instance_pt_blob_.Set(from._internal_instance_pt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.category_pt_blob_.InitDefault();
  if (from._internal_has_category_pt_blob()) {
    _impl_.category_pt_blob_.Set(from._internal_category_pt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.confidence_pt_blob_.InitDefault();
  if (from._internal_has_confidence_pt_blob()) {
    _impl_.confidence_pt_blob_.Set(from._internal_confidence_pt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.height_pt_blob_.InitDefault();
  if (from._internal_has_height_pt_blob()) {
    _impl_.height_pt_blob_.Set(from._internal_height_pt_blob(), 
      GetArenaForAllocation());
  }
  _impl_.feature_blob_.InitDefault();
  if (from._internal_has_feature_blob()) {
    _impl_.feature_blob_.Set(from._internal_feature_blob(), 
      GetArenaForAllocation());
  }
  _impl_.class_pt_blob_.InitDefault();
  if (from._internal_has_class_pt_blob()) {
    _impl_.class_pt_blob_.Set(from._internal_class_pt_blob(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.NetworkParam)
}

inline void NetworkParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_pt_blob_){}
    , decltype(_impl_.category_pt_blob_){}
    , decltype(_impl_.confidence_pt_blob_){}
    , decltype(_impl_.height_pt_blob_){}
    , decltype(_impl_.feature_blob_){}
    , decltype(_impl_.class_pt_blob_){}
  };
  _impl_.instance_pt_blob_.InitDefault();
  _impl_.category_pt_blob_.InitDefault();
  _impl_.confidence_pt_blob_.InitDefault();
  _impl_.height_pt_blob_.InitDefault();
  _impl_.feature_blob_.InitDefault();
  _impl_.class_pt_blob_.InitDefault();
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.NetworkParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_pt_blob_.Destroy();
  _impl_.category_pt_blob_.Destroy();
  _impl_.confidence_pt_blob_.Destroy();
  _impl_.height_pt_blob_.Destroy();
  _impl_.feature_blob_.Destroy();
  _impl_.class_pt_blob_.Destroy();
}

void NetworkParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.NetworkParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_instance_pt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.category_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_category_pt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.confidence_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_confidence_pt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.height_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_height_pt_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.feature_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feature_blob_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.class_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_class_pt_blob_, GetArenaForAllocation());
       }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_pt_blob = 1 [default = "instance_pt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_pt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.instance_pt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string category_pt_blob = 2 [default = "category_score"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category_pt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.category_pt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string confidence_pt_blob = 3 [default = "confidence_score"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_confidence_pt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.confidence_pt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string height_pt_blob = 4 [default = "height_pt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_height_pt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.height_pt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string feature_blob = 5 [default = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_feature_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.feature_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string class_pt_blob = 6 [default = "class_score"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_class_pt_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.perception.cnnseg.NetworkParam.class_pt_blob");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.NetworkParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instance_pt_blob().data(), static_cast<int>(this->_internal_instance_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.instance_pt_blob");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_pt_blob(), target);
  }

  // optional string category_pt_blob = 2 [default = "category_score"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category_pt_blob().data(), static_cast<int>(this->_internal_category_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.category_pt_blob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category_pt_blob(), target);
  }

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_confidence_pt_blob().data(), static_cast<int>(this->_internal_confidence_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.confidence_pt_blob");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_confidence_pt_blob(), target);
  }

  // optional string height_pt_blob = 4 [default = "height_pt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_height_pt_blob().data(), static_cast<int>(this->_internal_height_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.height_pt_blob");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_height_pt_blob(), target);
  }

  // optional string feature_blob = 5 [default = "data"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feature_blob().data(), static_cast<int>(this->_internal_feature_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.feature_blob");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_feature_blob(), target);
  }

  // optional string class_pt_blob = 6 [default = "class_score"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_class_pt_blob().data(), static_cast<int>(this->_internal_class_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.cnnseg.NetworkParam.class_pt_blob");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_class_pt_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.NetworkParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string instance_pt_blob = 1 [default = "instance_pt"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_pt_blob());
    }

    // optional string category_pt_blob = 2 [default = "category_score"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_pt_blob());
    }

    // optional string confidence_pt_blob = 3 [default = "confidence_score"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_confidence_pt_blob());
    }

    // optional string height_pt_blob = 4 [default = "height_pt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_height_pt_blob());
    }

    // optional string feature_blob = 5 [default = "data"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature_blob());
    }

    // optional string class_pt_blob = 6 [default = "class_score"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_pt_blob());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkParam::GetClassData() const { return &_class_data_; }

void NetworkParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkParam *>(to)->MergeFrom(
      static_cast<const NetworkParam &>(from));
}


void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_instance_pt_blob(from._internal_instance_pt_blob());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_category_pt_blob(from._internal_category_pt_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_confidence_pt_blob(from._internal_confidence_pt_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_height_pt_blob(from._internal_height_pt_blob());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_feature_blob(from._internal_feature_blob());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_class_pt_blob(from._internal_class_pt_blob());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::InternalSwap(NetworkParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_pt_blob_, lhs_arena,
      &other->_impl_.instance_pt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_pt_blob_, lhs_arena,
      &other->_impl_.category_pt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confidence_pt_blob_, lhs_arena,
      &other->_impl_.confidence_pt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.height_pt_blob_, lhs_arena,
      &other->_impl_.height_pt_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.feature_blob_, lhs_arena,
      &other->_impl_.feature_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_pt_blob_, lhs_arena,
      &other->_impl_.class_pt_blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_getter, &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_once,
      file_level_metadata_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto[1]);
}

// ===================================================================

class FeatureParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureParam>()._impl_._has_bits_);
  static void set_has_point_cloud_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FeatureParam::FeatureParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.cnnseg.FeatureParam)
}
FeatureParam::FeatureParam(const FeatureParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_height_){}
    , decltype(_impl_.point_cloud_range_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.min_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_height_, &from._impl_.max_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_height_) -
    reinterpret_cast<char*>(&_impl_.max_height_)) + sizeof(_impl_.min_height_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.cnnseg.FeatureParam)
}

inline void FeatureParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_height_){5}
    , decltype(_impl_.point_cloud_range_){60u}
    , decltype(_impl_.width_){640u}
    , decltype(_impl_.height_){640u}
    , decltype(_impl_.min_height_){-5}
  };
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.cnnseg.FeatureParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FeatureParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.cnnseg.FeatureParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    _impl_.max_height_ = 5;
    _impl_.point_cloud_range_ = 60u;
    _impl_.width_ = 640u;
    _impl_.height_ = 640u;
    _impl_.min_height_ = -5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 point_cloud_range = 26 [default = 60];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_point_cloud_range(&has_bits);
          _impl_.point_cloud_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 27 [default = 640];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 28 [default = 640];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_height = 31 [default = -5];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_min_height(&has_bits);
          _impl_.min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_height = 32 [default = 5];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_max_height(&has_bits);
          _impl_.max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.cnnseg.FeatureParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 point_cloud_range = 26 [default = 60];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_point_cloud_range(), target);
  }

  // optional uint32 width = 27 [default = 640];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_width(), target);
  }

  // optional uint32 height = 28 [default = 640];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_height(), target);
  }

  // optional float min_height = 31 [default = -5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_min_height(), target);
  }

  // optional float max_height = 32 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_max_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.cnnseg.FeatureParam)
  return target;
}

size_t FeatureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.cnnseg.FeatureParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float max_height = 32 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional uint32 point_cloud_range = 26 [default = 60];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_point_cloud_range());
    }

    // optional uint32 width = 27 [default = 640];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 28 [default = 640];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional float min_height = 31 [default = -5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeatureParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureParam::GetClassData() const { return &_class_data_; }

void FeatureParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeatureParam *>(to)->MergeFrom(
      static_cast<const FeatureParam &>(from));
}


void FeatureParam::MergeFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.cnnseg.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_height_ = from._impl_.max_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.point_cloud_range_ = from._impl_.point_cloud_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.min_height_ = from._impl_.min_height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.cnnseg.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {
  return true;
}

void FeatureParam::InternalSwap(FeatureParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_height_, other->_impl_.max_height_);
  swap(_impl_.point_cloud_range_, other->_impl_.point_cloud_range_);
  swap(_impl_.width_, other->_impl_.width_);
  swap(_impl_.height_, other->_impl_.height_);
  swap(_impl_.min_height_, other->_impl_.min_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_getter, &descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto_once,
      file_level_metadata_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::cnnseg::CNNSegParam*
Arena::CreateMaybeMessage< ::apollo::perception::cnnseg::CNNSegParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::cnnseg::CNNSegParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::cnnseg::NetworkParam*
Arena::CreateMaybeMessage< ::apollo::perception::cnnseg::NetworkParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::cnnseg::NetworkParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::cnnseg::FeatureParam*
Arena::CreateMaybeMessage< ::apollo::perception::cnnseg::FeatureParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::cnnseg::FeatureParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
