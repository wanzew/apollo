// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/lidar/segmentation/cnnseg/proto/cnnseg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto;
namespace apollo {
namespace perception {
namespace cnnseg {
class CNNSegParam;
struct CNNSegParamDefaultTypeInternal;
extern CNNSegParamDefaultTypeInternal _CNNSegParam_default_instance_;
class FeatureParam;
struct FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class NetworkParam;
struct NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::cnnseg::CNNSegParam* Arena::CreateMaybeMessage<::apollo::perception::cnnseg::CNNSegParam>(Arena*);
template<> ::apollo::perception::cnnseg::FeatureParam* Arena::CreateMaybeMessage<::apollo::perception::cnnseg::FeatureParam>(Arena*);
template<> ::apollo::perception::cnnseg::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::cnnseg::NetworkParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace cnnseg {

// ===================================================================

class CNNSegParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.CNNSegParam) */ {
 public:
  inline CNNSegParam() : CNNSegParam(nullptr) {}
  ~CNNSegParam() override;
  explicit PROTOBUF_CONSTEXPR CNNSegParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNNSegParam(const CNNSegParam& from);
  CNNSegParam(CNNSegParam&& from) noexcept
    : CNNSegParam() {
    *this = ::std::move(from);
  }

  inline CNNSegParam& operator=(const CNNSegParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNNSegParam& operator=(CNNSegParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNNSegParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNNSegParam* internal_default_instance() {
    return reinterpret_cast<const CNNSegParam*>(
               &_CNNSegParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CNNSegParam& a, CNNSegParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CNNSegParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNNSegParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CNNSegParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CNNSegParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNNSegParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNNSegParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNNSegParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.cnnseg.CNNSegParam";
  }
  protected:
  explicit CNNSegParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkParamFieldNumber = 1,
    kFeatureParamFieldNumber = 2,
    kUseAllGridsForClusteringFieldNumber = 12,
    kUseFullCloudFieldNumber = 31,
    kGpuIdFieldNumber = 41,
    kObjectnessThreshFieldNumber = 11,
    kConfidenceThreshFieldNumber = 13,
    kHeightThreshFieldNumber = 14,
    kMinPtsNumFieldNumber = 15,
  };
  // required .apollo.perception.cnnseg.NetworkParam network_param = 1;
  bool has_network_param() const;
  private:
  bool _internal_has_network_param() const;
  public:
  void clear_network_param();
  const ::apollo::perception::cnnseg::NetworkParam& network_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::cnnseg::NetworkParam* release_network_param();
  ::apollo::perception::cnnseg::NetworkParam* mutable_network_param();
  void set_allocated_network_param(::apollo::perception::cnnseg::NetworkParam* network_param);
  private:
  const ::apollo::perception::cnnseg::NetworkParam& _internal_network_param() const;
  ::apollo::perception::cnnseg::NetworkParam* _internal_mutable_network_param();
  public:
  void unsafe_arena_set_allocated_network_param(
      ::apollo::perception::cnnseg::NetworkParam* network_param);
  ::apollo::perception::cnnseg::NetworkParam* unsafe_arena_release_network_param();

  // required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
  bool has_feature_param() const;
  private:
  bool _internal_has_feature_param() const;
  public:
  void clear_feature_param();
  const ::apollo::perception::cnnseg::FeatureParam& feature_param() const;
  PROTOBUF_NODISCARD ::apollo::perception::cnnseg::FeatureParam* release_feature_param();
  ::apollo::perception::cnnseg::FeatureParam* mutable_feature_param();
  void set_allocated_feature_param(::apollo::perception::cnnseg::FeatureParam* feature_param);
  private:
  const ::apollo::perception::cnnseg::FeatureParam& _internal_feature_param() const;
  ::apollo::perception::cnnseg::FeatureParam* _internal_mutable_feature_param();
  public:
  void unsafe_arena_set_allocated_feature_param(
      ::apollo::perception::cnnseg::FeatureParam* feature_param);
  ::apollo::perception::cnnseg::FeatureParam* unsafe_arena_release_feature_param();

  // optional bool use_all_grids_for_clustering = 12 [default = false];
  bool has_use_all_grids_for_clustering() const;
  private:
  bool _internal_has_use_all_grids_for_clustering() const;
  public:
  void clear_use_all_grids_for_clustering();
  bool use_all_grids_for_clustering() const;
  void set_use_all_grids_for_clustering(bool value);
  private:
  bool _internal_use_all_grids_for_clustering() const;
  void _internal_set_use_all_grids_for_clustering(bool value);
  public:

  // optional bool use_full_cloud = 31 [default = false];
  bool has_use_full_cloud() const;
  private:
  bool _internal_has_use_full_cloud() const;
  public:
  void clear_use_full_cloud();
  bool use_full_cloud() const;
  void set_use_full_cloud(bool value);
  private:
  bool _internal_use_full_cloud() const;
  void _internal_set_use_full_cloud(bool value);
  public:

  // optional uint32 gpu_id = 41 [default = 0];
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  uint32_t gpu_id() const;
  void set_gpu_id(uint32_t value);
  private:
  uint32_t _internal_gpu_id() const;
  void _internal_set_gpu_id(uint32_t value);
  public:

  // optional float objectness_thresh = 11 [default = 0.5];
  bool has_objectness_thresh() const;
  private:
  bool _internal_has_objectness_thresh() const;
  public:
  void clear_objectness_thresh();
  float objectness_thresh() const;
  void set_objectness_thresh(float value);
  private:
  float _internal_objectness_thresh() const;
  void _internal_set_objectness_thresh(float value);
  public:

  // optional float confidence_thresh = 13 [default = 0.1];
  bool has_confidence_thresh() const;
  private:
  bool _internal_has_confidence_thresh() const;
  public:
  void clear_confidence_thresh();
  float confidence_thresh() const;
  void set_confidence_thresh(float value);
  private:
  float _internal_confidence_thresh() const;
  void _internal_set_confidence_thresh(float value);
  public:

  // optional float height_thresh = 14 [default = 0.5];
  bool has_height_thresh() const;
  private:
  bool _internal_has_height_thresh() const;
  public:
  void clear_height_thresh();
  float height_thresh() const;
  void set_height_thresh(float value);
  private:
  float _internal_height_thresh() const;
  void _internal_set_height_thresh(float value);
  public:

  // optional uint32 min_pts_num = 15 [default = 3];
  bool has_min_pts_num() const;
  private:
  bool _internal_has_min_pts_num() const;
  public:
  void clear_min_pts_num();
  uint32_t min_pts_num() const;
  void set_min_pts_num(uint32_t value);
  private:
  uint32_t _internal_min_pts_num() const;
  void _internal_set_min_pts_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.CNNSegParam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::perception::cnnseg::NetworkParam* network_param_;
    ::apollo::perception::cnnseg::FeatureParam* feature_param_;
    bool use_all_grids_for_clustering_;
    bool use_full_cloud_;
    uint32_t gpu_id_;
    float objectness_thresh_;
    float confidence_thresh_;
    float height_thresh_;
    uint32_t min_pts_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.NetworkParam) */ {
 public:
  inline NetworkParam() : NetworkParam(nullptr) {}
  ~NetworkParam() override;
  explicit PROTOBUF_CONSTEXPR NetworkParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.cnnseg.NetworkParam";
  }
  protected:
  explicit NetworkParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancePtBlobFieldNumber = 1,
    kCategoryPtBlobFieldNumber = 2,
    kConfidencePtBlobFieldNumber = 3,
    kHeightPtBlobFieldNumber = 4,
    kFeatureBlobFieldNumber = 5,
    kClassPtBlobFieldNumber = 6,
  };
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  bool has_instance_pt_blob() const;
  private:
  bool _internal_has_instance_pt_blob() const;
  public:
  void clear_instance_pt_blob();
  const std::string& instance_pt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_pt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_pt_blob();
  PROTOBUF_NODISCARD std::string* release_instance_pt_blob();
  void set_allocated_instance_pt_blob(std::string* instance_pt_blob);
  private:
  const std::string& _internal_instance_pt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_pt_blob(const std::string& value);
  std::string* _internal_mutable_instance_pt_blob();
  public:

  // optional string category_pt_blob = 2 [default = "category_score"];
  bool has_category_pt_blob() const;
  private:
  bool _internal_has_category_pt_blob() const;
  public:
  void clear_category_pt_blob();
  const std::string& category_pt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category_pt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category_pt_blob();
  PROTOBUF_NODISCARD std::string* release_category_pt_blob();
  void set_allocated_category_pt_blob(std::string* category_pt_blob);
  private:
  const std::string& _internal_category_pt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category_pt_blob(const std::string& value);
  std::string* _internal_mutable_category_pt_blob();
  public:

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  bool has_confidence_pt_blob() const;
  private:
  bool _internal_has_confidence_pt_blob() const;
  public:
  void clear_confidence_pt_blob();
  const std::string& confidence_pt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence_pt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence_pt_blob();
  PROTOBUF_NODISCARD std::string* release_confidence_pt_blob();
  void set_allocated_confidence_pt_blob(std::string* confidence_pt_blob);
  private:
  const std::string& _internal_confidence_pt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence_pt_blob(const std::string& value);
  std::string* _internal_mutable_confidence_pt_blob();
  public:

  // optional string height_pt_blob = 4 [default = "height_pt"];
  bool has_height_pt_blob() const;
  private:
  bool _internal_has_height_pt_blob() const;
  public:
  void clear_height_pt_blob();
  const std::string& height_pt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_height_pt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_height_pt_blob();
  PROTOBUF_NODISCARD std::string* release_height_pt_blob();
  void set_allocated_height_pt_blob(std::string* height_pt_blob);
  private:
  const std::string& _internal_height_pt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_height_pt_blob(const std::string& value);
  std::string* _internal_mutable_height_pt_blob();
  public:

  // optional string feature_blob = 5 [default = "data"];
  bool has_feature_blob() const;
  private:
  bool _internal_has_feature_blob() const;
  public:
  void clear_feature_blob();
  const std::string& feature_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feature_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feature_blob();
  PROTOBUF_NODISCARD std::string* release_feature_blob();
  void set_allocated_feature_blob(std::string* feature_blob);
  private:
  const std::string& _internal_feature_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature_blob(const std::string& value);
  std::string* _internal_mutable_feature_blob();
  public:

  // optional string class_pt_blob = 6 [default = "class_score"];
  bool has_class_pt_blob() const;
  private:
  bool _internal_has_class_pt_blob() const;
  public:
  void clear_class_pt_blob();
  const std::string& class_pt_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_pt_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_pt_blob();
  PROTOBUF_NODISCARD std::string* release_class_pt_blob();
  void set_allocated_class_pt_blob(std::string* class_pt_blob);
  private:
  const std::string& _internal_class_pt_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_pt_blob(const std::string& value);
  std::string* _internal_mutable_class_pt_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.NetworkParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_instance_pt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_pt_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_category_pt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_pt_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_confidence_pt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_pt_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_height_pt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr height_pt_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_feature_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_blob_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_class_pt_blob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_pt_blob_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto;
};
// -------------------------------------------------------------------

class FeatureParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.cnnseg.FeatureParam) */ {
 public:
  inline FeatureParam() : FeatureParam(nullptr) {}
  ~FeatureParam() override;
  explicit PROTOBUF_CONSTEXPR FeatureParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureParam(const FeatureParam& from);
  FeatureParam(FeatureParam&& from) noexcept
    : FeatureParam() {
    *this = ::std::move(from);
  }

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureParam& operator=(FeatureParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeatureParam& a, FeatureParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FeatureParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.cnnseg.FeatureParam";
  }
  protected:
  explicit FeatureParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxHeightFieldNumber = 32,
    kPointCloudRangeFieldNumber = 26,
    kWidthFieldNumber = 27,
    kHeightFieldNumber = 28,
    kMinHeightFieldNumber = 31,
  };
  // optional float max_height = 32 [default = 5];
  bool has_max_height() const;
  private:
  bool _internal_has_max_height() const;
  public:
  void clear_max_height();
  float max_height() const;
  void set_max_height(float value);
  private:
  float _internal_max_height() const;
  void _internal_set_max_height(float value);
  public:

  // optional uint32 point_cloud_range = 26 [default = 60];
  bool has_point_cloud_range() const;
  private:
  bool _internal_has_point_cloud_range() const;
  public:
  void clear_point_cloud_range();
  uint32_t point_cloud_range() const;
  void set_point_cloud_range(uint32_t value);
  private:
  uint32_t _internal_point_cloud_range() const;
  void _internal_set_point_cloud_range(uint32_t value);
  public:

  // optional uint32 width = 27 [default = 640];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 28 [default = 640];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional float min_height = 31 [default = -5];
  bool has_min_height() const;
  private:
  bool _internal_has_min_height() const;
  public:
  void clear_min_height();
  float min_height() const;
  void set_min_height(float value);
  private:
  float _internal_min_height() const;
  void _internal_set_min_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.cnnseg.FeatureParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float max_height_;
    uint32_t point_cloud_range_;
    uint32_t width_;
    uint32_t height_;
    float min_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CNNSegParam

// required .apollo.perception.cnnseg.NetworkParam network_param = 1;
inline bool CNNSegParam::_internal_has_network_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.network_param_ != nullptr);
  return value;
}
inline bool CNNSegParam::has_network_param() const {
  return _internal_has_network_param();
}
inline void CNNSegParam::clear_network_param() {
  if (_impl_.network_param_ != nullptr) _impl_.network_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::cnnseg::NetworkParam& CNNSegParam::_internal_network_param() const {
  const ::apollo::perception::cnnseg::NetworkParam* p = _impl_.network_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::cnnseg::NetworkParam&>(
      ::apollo::perception::cnnseg::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::cnnseg::NetworkParam& CNNSegParam::network_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.network_param)
  return _internal_network_param();
}
inline void CNNSegParam::unsafe_arena_set_allocated_network_param(
    ::apollo::perception::cnnseg::NetworkParam* network_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.network_param_);
  }
  _impl_.network_param_ = network_param;
  if (network_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.cnnseg.CNNSegParam.network_param)
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::release_network_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::cnnseg::NetworkParam* temp = _impl_.network_param_;
  _impl_.network_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::unsafe_arena_release_network_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.network_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::cnnseg::NetworkParam* temp = _impl_.network_param_;
  _impl_.network_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::_internal_mutable_network_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.network_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::cnnseg::NetworkParam>(GetArenaForAllocation());
    _impl_.network_param_ = p;
  }
  return _impl_.network_param_;
}
inline ::apollo::perception::cnnseg::NetworkParam* CNNSegParam::mutable_network_param() {
  ::apollo::perception::cnnseg::NetworkParam* _msg = _internal_mutable_network_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.network_param)
  return _msg;
}
inline void CNNSegParam::set_allocated_network_param(::apollo::perception::cnnseg::NetworkParam* network_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.network_param_;
  }
  if (network_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(network_param);
    if (message_arena != submessage_arena) {
      network_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.network_param_ = network_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.network_param)
}

// required .apollo.perception.cnnseg.FeatureParam feature_param = 2;
inline bool CNNSegParam::_internal_has_feature_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feature_param_ != nullptr);
  return value;
}
inline bool CNNSegParam::has_feature_param() const {
  return _internal_has_feature_param();
}
inline void CNNSegParam::clear_feature_param() {
  if (_impl_.feature_param_ != nullptr) _impl_.feature_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::cnnseg::FeatureParam& CNNSegParam::_internal_feature_param() const {
  const ::apollo::perception::cnnseg::FeatureParam* p = _impl_.feature_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::cnnseg::FeatureParam&>(
      ::apollo::perception::cnnseg::_FeatureParam_default_instance_);
}
inline const ::apollo::perception::cnnseg::FeatureParam& CNNSegParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return _internal_feature_param();
}
inline void CNNSegParam::unsafe_arena_set_allocated_feature_param(
    ::apollo::perception::cnnseg::FeatureParam* feature_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_param_);
  }
  _impl_.feature_param_ = feature_param;
  if (feature_param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.cnnseg.CNNSegParam.feature_param)
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::release_feature_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::cnnseg::FeatureParam* temp = _impl_.feature_param_;
  _impl_.feature_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::unsafe_arena_release_feature_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.CNNSegParam.feature_param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::cnnseg::FeatureParam* temp = _impl_.feature_param_;
  _impl_.feature_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::_internal_mutable_feature_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.feature_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::cnnseg::FeatureParam>(GetArenaForAllocation());
    _impl_.feature_param_ = p;
  }
  return _impl_.feature_param_;
}
inline ::apollo::perception::cnnseg::FeatureParam* CNNSegParam::mutable_feature_param() {
  ::apollo::perception::cnnseg::FeatureParam* _msg = _internal_mutable_feature_param();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.CNNSegParam.feature_param)
  return _msg;
}
inline void CNNSegParam::set_allocated_feature_param(::apollo::perception::cnnseg::FeatureParam* feature_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.feature_param_;
  }
  if (feature_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feature_param);
    if (message_arena != submessage_arena) {
      feature_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.feature_param_ = feature_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.CNNSegParam.feature_param)
}

// optional float objectness_thresh = 11 [default = 0.5];
inline bool CNNSegParam::_internal_has_objectness_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CNNSegParam::has_objectness_thresh() const {
  return _internal_has_objectness_thresh();
}
inline void CNNSegParam::clear_objectness_thresh() {
  _impl_.objectness_thresh_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CNNSegParam::_internal_objectness_thresh() const {
  return _impl_.objectness_thresh_;
}
inline float CNNSegParam::objectness_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
  return _internal_objectness_thresh();
}
inline void CNNSegParam::_internal_set_objectness_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.objectness_thresh_ = value;
}
inline void CNNSegParam::set_objectness_thresh(float value) {
  _internal_set_objectness_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.objectness_thresh)
}

// optional bool use_all_grids_for_clustering = 12 [default = false];
inline bool CNNSegParam::_internal_has_use_all_grids_for_clustering() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNNSegParam::has_use_all_grids_for_clustering() const {
  return _internal_has_use_all_grids_for_clustering();
}
inline void CNNSegParam::clear_use_all_grids_for_clustering() {
  _impl_.use_all_grids_for_clustering_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CNNSegParam::_internal_use_all_grids_for_clustering() const {
  return _impl_.use_all_grids_for_clustering_;
}
inline bool CNNSegParam::use_all_grids_for_clustering() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
  return _internal_use_all_grids_for_clustering();
}
inline void CNNSegParam::_internal_set_use_all_grids_for_clustering(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.use_all_grids_for_clustering_ = value;
}
inline void CNNSegParam::set_use_all_grids_for_clustering(bool value) {
  _internal_set_use_all_grids_for_clustering(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_all_grids_for_clustering)
}

// optional float confidence_thresh = 13 [default = 0.1];
inline bool CNNSegParam::_internal_has_confidence_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CNNSegParam::has_confidence_thresh() const {
  return _internal_has_confidence_thresh();
}
inline void CNNSegParam::clear_confidence_thresh() {
  _impl_.confidence_thresh_ = 0.1f;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CNNSegParam::_internal_confidence_thresh() const {
  return _impl_.confidence_thresh_;
}
inline float CNNSegParam::confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
  return _internal_confidence_thresh();
}
inline void CNNSegParam::_internal_set_confidence_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.confidence_thresh_ = value;
}
inline void CNNSegParam::set_confidence_thresh(float value) {
  _internal_set_confidence_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.confidence_thresh)
}

// optional float height_thresh = 14 [default = 0.5];
inline bool CNNSegParam::_internal_has_height_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CNNSegParam::has_height_thresh() const {
  return _internal_has_height_thresh();
}
inline void CNNSegParam::clear_height_thresh() {
  _impl_.height_thresh_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CNNSegParam::_internal_height_thresh() const {
  return _impl_.height_thresh_;
}
inline float CNNSegParam::height_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.height_thresh)
  return _internal_height_thresh();
}
inline void CNNSegParam::_internal_set_height_thresh(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.height_thresh_ = value;
}
inline void CNNSegParam::set_height_thresh(float value) {
  _internal_set_height_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.height_thresh)
}

// optional uint32 min_pts_num = 15 [default = 3];
inline bool CNNSegParam::_internal_has_min_pts_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CNNSegParam::has_min_pts_num() const {
  return _internal_has_min_pts_num();
}
inline void CNNSegParam::clear_min_pts_num() {
  _impl_.min_pts_num_ = 3u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CNNSegParam::_internal_min_pts_num() const {
  return _impl_.min_pts_num_;
}
inline uint32_t CNNSegParam::min_pts_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
  return _internal_min_pts_num();
}
inline void CNNSegParam::_internal_set_min_pts_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.min_pts_num_ = value;
}
inline void CNNSegParam::set_min_pts_num(uint32_t value) {
  _internal_set_min_pts_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.min_pts_num)
}

// optional bool use_full_cloud = 31 [default = false];
inline bool CNNSegParam::_internal_has_use_full_cloud() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNNSegParam::has_use_full_cloud() const {
  return _internal_has_use_full_cloud();
}
inline void CNNSegParam::clear_use_full_cloud() {
  _impl_.use_full_cloud_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CNNSegParam::_internal_use_full_cloud() const {
  return _impl_.use_full_cloud_;
}
inline bool CNNSegParam::use_full_cloud() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
  return _internal_use_full_cloud();
}
inline void CNNSegParam::_internal_set_use_full_cloud(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_full_cloud_ = value;
}
inline void CNNSegParam::set_use_full_cloud(bool value) {
  _internal_set_use_full_cloud(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.use_full_cloud)
}

// optional uint32 gpu_id = 41 [default = 0];
inline bool CNNSegParam::_internal_has_gpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CNNSegParam::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void CNNSegParam::clear_gpu_id() {
  _impl_.gpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CNNSegParam::_internal_gpu_id() const {
  return _impl_.gpu_id_;
}
inline uint32_t CNNSegParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.CNNSegParam.gpu_id)
  return _internal_gpu_id();
}
inline void CNNSegParam::_internal_set_gpu_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.gpu_id_ = value;
}
inline void CNNSegParam::set_gpu_id(uint32_t value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.CNNSegParam.gpu_id)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string instance_pt_blob = 1 [default = "instance_pt"];
inline bool NetworkParam::_internal_has_instance_pt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_instance_pt_blob() const {
  return _internal_has_instance_pt_blob();
}
inline void NetworkParam::clear_instance_pt_blob() {
  _impl_.instance_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_instance_pt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::instance_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  if (_impl_.instance_pt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get();
  return _internal_instance_pt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_instance_pt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instance_pt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}
inline std::string* NetworkParam::mutable_instance_pt_blob() {
  std::string* _s = _internal_mutable_instance_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_instance_pt_blob() const {
  return _impl_.instance_pt_blob_.Get();
}
inline void NetworkParam::_internal_set_instance_pt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_pt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_instance_pt_blob() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_pt_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_instance_pt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_instance_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
  if (!_internal_has_instance_pt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instance_pt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_instance_pt_blob(std::string* instance_pt_blob) {
  if (instance_pt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_pt_blob_.SetAllocated(instance_pt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.instance_pt_blob)
}

// optional string category_pt_blob = 2 [default = "category_score"];
inline bool NetworkParam::_internal_has_category_pt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_category_pt_blob() const {
  return _internal_has_category_pt_blob();
}
inline void NetworkParam::clear_category_pt_blob() {
  _impl_.category_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_category_pt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::category_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  if (_impl_.category_pt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_category_pt_blob_.get();
  return _internal_category_pt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_category_pt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.category_pt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}
inline std::string* NetworkParam::mutable_category_pt_blob() {
  std::string* _s = _internal_mutable_category_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_category_pt_blob() const {
  return _impl_.category_pt_blob_.Get();
}
inline void NetworkParam::_internal_set_category_pt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.category_pt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_category_pt_blob() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.category_pt_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_category_pt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_category_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
  if (!_internal_has_category_pt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.category_pt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_category_pt_blob(std::string* category_pt_blob) {
  if (category_pt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.category_pt_blob_.SetAllocated(category_pt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.category_pt_blob)
}

// optional string confidence_pt_blob = 3 [default = "confidence_score"];
inline bool NetworkParam::_internal_has_confidence_pt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkParam::has_confidence_pt_blob() const {
  return _internal_has_confidence_pt_blob();
}
inline void NetworkParam::clear_confidence_pt_blob() {
  _impl_.confidence_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_confidence_pt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkParam::confidence_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  if (_impl_.confidence_pt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get();
  return _internal_confidence_pt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_confidence_pt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.confidence_pt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}
inline std::string* NetworkParam::mutable_confidence_pt_blob() {
  std::string* _s = _internal_mutable_confidence_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_confidence_pt_blob() const {
  return _impl_.confidence_pt_blob_.Get();
}
inline void NetworkParam::_internal_set_confidence_pt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.confidence_pt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_confidence_pt_blob() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.confidence_pt_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_confidence_pt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_confidence_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
  if (!_internal_has_confidence_pt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.confidence_pt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_confidence_pt_blob(std::string* confidence_pt_blob) {
  if (confidence_pt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.confidence_pt_blob_.SetAllocated(confidence_pt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.confidence_pt_blob)
}

// optional string height_pt_blob = 4 [default = "height_pt"];
inline bool NetworkParam::_internal_has_height_pt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkParam::has_height_pt_blob() const {
  return _internal_has_height_pt_blob();
}
inline void NetworkParam::clear_height_pt_blob() {
  _impl_.height_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_height_pt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetworkParam::height_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  if (_impl_.height_pt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_height_pt_blob_.get();
  return _internal_height_pt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_height_pt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.height_pt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}
inline std::string* NetworkParam::mutable_height_pt_blob() {
  std::string* _s = _internal_mutable_height_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_height_pt_blob() const {
  return _impl_.height_pt_blob_.Get();
}
inline void NetworkParam::_internal_set_height_pt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_pt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_height_pt_blob() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.height_pt_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_height_pt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_height_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
  if (!_internal_has_height_pt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.height_pt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_height_pt_blob(std::string* height_pt_blob) {
  if (height_pt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.height_pt_blob_.SetAllocated(height_pt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.height_pt_blob)
}

// optional string feature_blob = 5 [default = "data"];
inline bool NetworkParam::_internal_has_feature_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkParam::has_feature_blob() const {
  return _internal_has_feature_blob();
}
inline void NetworkParam::clear_feature_blob() {
  _impl_.feature_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feature_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetworkParam::feature_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.feature_blob)
  if (_impl_.feature_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_feature_blob_.get();
  return _internal_feature_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_feature_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.feature_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.feature_blob)
}
inline std::string* NetworkParam::mutable_feature_blob() {
  std::string* _s = _internal_mutable_feature_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.feature_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_feature_blob() const {
  return _impl_.feature_blob_.Get();
}
inline void NetworkParam::_internal_set_feature_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.feature_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_feature_blob() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.feature_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_feature_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_feature_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.feature_blob)
  if (!_internal_has_feature_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.feature_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_feature_blob(std::string* feature_blob) {
  if (feature_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.feature_blob_.SetAllocated(feature_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.feature_blob)
}

// optional string class_pt_blob = 6 [default = "class_score"];
inline bool NetworkParam::_internal_has_class_pt_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkParam::has_class_pt_blob() const {
  return _internal_has_class_pt_blob();
}
inline void NetworkParam::clear_class_pt_blob() {
  _impl_.class_pt_blob_.ClearToDefault(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_class_pt_blob_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NetworkParam::class_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  if (_impl_.class_pt_blob_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_class_pt_blob_.get();
  return _internal_class_pt_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkParam::set_class_pt_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.class_pt_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}
inline std::string* NetworkParam::mutable_class_pt_blob() {
  std::string* _s = _internal_mutable_class_pt_blob();
  // @@protoc_insertion_point(field_mutable:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  return _s;
}
inline const std::string& NetworkParam::_internal_class_pt_blob() const {
  return _impl_.class_pt_blob_.Get();
}
inline void NetworkParam::_internal_set_class_pt_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.class_pt_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkParam::_internal_mutable_class_pt_blob() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.class_pt_blob_.Mutable(::apollo::perception::cnnseg::NetworkParam::Impl_::_i_give_permission_to_break_this_code_default_class_pt_blob_, GetArenaForAllocation());
}
inline std::string* NetworkParam::release_class_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
  if (!_internal_has_class_pt_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.class_pt_blob_.Release();
  return p;
}
inline void NetworkParam::set_allocated_class_pt_blob(std::string* class_pt_blob) {
  if (class_pt_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.class_pt_blob_.SetAllocated(class_pt_blob, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.cnnseg.NetworkParam.class_pt_blob)
}

// -------------------------------------------------------------------

// FeatureParam

// optional uint32 point_cloud_range = 26 [default = 60];
inline bool FeatureParam::_internal_has_point_cloud_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureParam::has_point_cloud_range() const {
  return _internal_has_point_cloud_range();
}
inline void FeatureParam::clear_point_cloud_range() {
  _impl_.point_cloud_range_ = 60u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FeatureParam::_internal_point_cloud_range() const {
  return _impl_.point_cloud_range_;
}
inline uint32_t FeatureParam::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
  return _internal_point_cloud_range();
}
inline void FeatureParam::_internal_set_point_cloud_range(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.point_cloud_range_ = value;
}
inline void FeatureParam::set_point_cloud_range(uint32_t value) {
  _internal_set_point_cloud_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.point_cloud_range)
}

// optional uint32 width = 27 [default = 640];
inline bool FeatureParam::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeatureParam::has_width() const {
  return _internal_has_width();
}
inline void FeatureParam::clear_width() {
  _impl_.width_ = 640u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FeatureParam::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t FeatureParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.width)
  return _internal_width();
}
inline void FeatureParam::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void FeatureParam::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.width)
}

// optional uint32 height = 28 [default = 640];
inline bool FeatureParam::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeatureParam::has_height() const {
  return _internal_has_height();
}
inline void FeatureParam::clear_height() {
  _impl_.height_ = 640u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FeatureParam::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t FeatureParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.height)
  return _internal_height();
}
inline void FeatureParam::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_ = value;
}
inline void FeatureParam::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.height)
}

// optional float min_height = 31 [default = -5];
inline bool FeatureParam::_internal_has_min_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeatureParam::has_min_height() const {
  return _internal_has_min_height();
}
inline void FeatureParam::clear_min_height() {
  _impl_.min_height_ = -5;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float FeatureParam::_internal_min_height() const {
  return _impl_.min_height_;
}
inline float FeatureParam::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.min_height)
  return _internal_min_height();
}
inline void FeatureParam::_internal_set_min_height(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_height_ = value;
}
inline void FeatureParam::set_min_height(float value) {
  _internal_set_min_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.min_height)
}

// optional float max_height = 32 [default = 5];
inline bool FeatureParam::_internal_has_max_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureParam::has_max_height() const {
  return _internal_has_max_height();
}
inline void FeatureParam::clear_max_height() {
  _impl_.max_height_ = 5;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FeatureParam::_internal_max_height() const {
  return _impl_.max_height_;
}
inline float FeatureParam::max_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.cnnseg.FeatureParam.max_height)
  return _internal_max_height();
}
inline void FeatureParam::_internal_set_max_height(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_height_ = value;
}
inline void FeatureParam::set_max_height(float value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.cnnseg.FeatureParam.max_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cnnseg
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fobstacle_2flidar_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_2eproto
