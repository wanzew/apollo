// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/tool/data_generator/proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto;
namespace apollo {
namespace perception {
namespace data_generator {
class DataGeneratorInfo;
struct DataGeneratorInfoDefaultTypeInternal;
extern DataGeneratorInfoDefaultTypeInternal _DataGeneratorInfo_default_instance_;
class DataGeneratorObstacle;
struct DataGeneratorObstacleDefaultTypeInternal;
extern DataGeneratorObstacleDefaultTypeInternal _DataGeneratorObstacle_default_instance_;
class ROI;
struct ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class SensorConfig;
struct SensorConfigDefaultTypeInternal;
extern SensorConfigDefaultTypeInternal _SensorConfig_default_instance_;
}  // namespace data_generator
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::data_generator::DataGeneratorInfo* Arena::CreateMaybeMessage<::apollo::perception::data_generator::DataGeneratorInfo>(Arena*);
template<> ::apollo::perception::data_generator::DataGeneratorObstacle* Arena::CreateMaybeMessage<::apollo::perception::data_generator::DataGeneratorObstacle>(Arena*);
template<> ::apollo::perception::data_generator::ROI* Arena::CreateMaybeMessage<::apollo::perception::data_generator::ROI>(Arena*);
template<> ::apollo::perception::data_generator::SensorConfig* Arena::CreateMaybeMessage<::apollo::perception::data_generator::SensorConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace data_generator {

enum DataGeneratorObstacle_Type : int {
  DataGeneratorObstacle_Type_UNKNOWN = 0,
  DataGeneratorObstacle_Type_ROAD_SIGN = 1,
  DataGeneratorObstacle_Type_PEDESTRIAN = 2,
  DataGeneratorObstacle_Type_BICYCLE = 3,
  DataGeneratorObstacle_Type_SEDAN = 4,
  DataGeneratorObstacle_Type_SUV = 5,
  DataGeneratorObstacle_Type_BUS = 6,
  DataGeneratorObstacle_Type_TRUCK = 7
};
bool DataGeneratorObstacle_Type_IsValid(int value);
constexpr DataGeneratorObstacle_Type DataGeneratorObstacle_Type_Type_MIN = DataGeneratorObstacle_Type_UNKNOWN;
constexpr DataGeneratorObstacle_Type DataGeneratorObstacle_Type_Type_MAX = DataGeneratorObstacle_Type_TRUCK;
constexpr int DataGeneratorObstacle_Type_Type_ARRAYSIZE = DataGeneratorObstacle_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataGeneratorObstacle_Type_descriptor();
template<typename T>
inline const std::string& DataGeneratorObstacle_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataGeneratorObstacle_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataGeneratorObstacle_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataGeneratorObstacle_Type_descriptor(), enum_t_value);
}
inline bool DataGeneratorObstacle_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataGeneratorObstacle_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataGeneratorObstacle_Type>(
    DataGeneratorObstacle_Type_descriptor(), name, value);
}
enum SensorConfig_SensorId : int {
  SensorConfig_SensorId_VELODYNE64 = 1,
  SensorConfig_SensorId_VELODYNE16 = 2,
  SensorConfig_SensorId_CONTI_RADAR = 3
};
bool SensorConfig_SensorId_IsValid(int value);
constexpr SensorConfig_SensorId SensorConfig_SensorId_SensorId_MIN = SensorConfig_SensorId_VELODYNE64;
constexpr SensorConfig_SensorId SensorConfig_SensorId_SensorId_MAX = SensorConfig_SensorId_CONTI_RADAR;
constexpr int SensorConfig_SensorId_SensorId_ARRAYSIZE = SensorConfig_SensorId_SensorId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorConfig_SensorId_descriptor();
template<typename T>
inline const std::string& SensorConfig_SensorId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorConfig_SensorId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorConfig_SensorId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorConfig_SensorId_descriptor(), enum_t_value);
}
inline bool SensorConfig_SensorId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SensorConfig_SensorId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorConfig_SensorId>(
    SensorConfig_SensorId_descriptor(), name, value);
}
// ===================================================================

class DataGeneratorObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.data_generator.DataGeneratorObstacle) */ {
 public:
  inline DataGeneratorObstacle() : DataGeneratorObstacle(nullptr) {}
  ~DataGeneratorObstacle() override;
  explicit PROTOBUF_CONSTEXPR DataGeneratorObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataGeneratorObstacle(const DataGeneratorObstacle& from);
  DataGeneratorObstacle(DataGeneratorObstacle&& from) noexcept
    : DataGeneratorObstacle() {
    *this = ::std::move(from);
  }

  inline DataGeneratorObstacle& operator=(const DataGeneratorObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataGeneratorObstacle& operator=(DataGeneratorObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataGeneratorObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataGeneratorObstacle* internal_default_instance() {
    return reinterpret_cast<const DataGeneratorObstacle*>(
               &_DataGeneratorObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataGeneratorObstacle& a, DataGeneratorObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(DataGeneratorObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataGeneratorObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataGeneratorObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataGeneratorObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataGeneratorObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataGeneratorObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataGeneratorObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.data_generator.DataGeneratorObstacle";
  }
  protected:
  explicit DataGeneratorObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataGeneratorObstacle_Type Type;
  static constexpr Type UNKNOWN =
    DataGeneratorObstacle_Type_UNKNOWN;
  static constexpr Type ROAD_SIGN =
    DataGeneratorObstacle_Type_ROAD_SIGN;
  static constexpr Type PEDESTRIAN =
    DataGeneratorObstacle_Type_PEDESTRIAN;
  static constexpr Type BICYCLE =
    DataGeneratorObstacle_Type_BICYCLE;
  static constexpr Type SEDAN =
    DataGeneratorObstacle_Type_SEDAN;
  static constexpr Type SUV =
    DataGeneratorObstacle_Type_SUV;
  static constexpr Type BUS =
    DataGeneratorObstacle_Type_BUS;
  static constexpr Type TRUCK =
    DataGeneratorObstacle_Type_TRUCK;
  static inline bool Type_IsValid(int value) {
    return DataGeneratorObstacle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DataGeneratorObstacle_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DataGeneratorObstacle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DataGeneratorObstacle_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DataGeneratorObstacle_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DataGeneratorObstacle_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DataGeneratorObstacle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 8,
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 4,
    kThetaFieldNumber = 3,
    kLengthFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kTypeFieldNumber = 10,
  };
  // repeated .apollo.common.Point3D polygon_point = 8;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::common::Point3D* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_polygon_point();
  private:
  const ::apollo::common::Point3D& _internal_polygon_point(int index) const;
  ::apollo::common::Point3D* _internal_add_polygon_point();
  public:
  const ::apollo::common::Point3D& polygon_point(int index) const;
  ::apollo::common::Point3D* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      polygon_point() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.common.Point2D position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point2D& position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point2D* release_position();
  ::apollo::common::Point2D* mutable_position();
  void set_allocated_position(::apollo::common::Point2D* position);
  private:
  const ::apollo::common::Point2D& _internal_position() const;
  ::apollo::common::Point2D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point2D* position);
  ::apollo::common::Point2D* unsafe_arena_release_position();

  // optional .apollo.common.Point3D velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::common::Point3D* velocity);
  ::apollo::common::Point3D* unsafe_arena_release_velocity();

  // optional double theta = 3;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 5;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional .apollo.perception.data_generator.DataGeneratorObstacle.Type type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::data_generator::DataGeneratorObstacle_Type type() const;
  void set_type(::apollo::perception::data_generator::DataGeneratorObstacle_Type value);
  private:
  ::apollo::perception::data_generator::DataGeneratorObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::data_generator::DataGeneratorObstacle_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.data_generator.DataGeneratorObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > polygon_point_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::apollo::common::Point2D* position_;
    ::apollo::common::Point3D* velocity_;
    double theta_;
    double length_;
    double width_;
    double height_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ROI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.data_generator.ROI) */ {
 public:
  inline ROI() : ROI(nullptr) {}
  ~ROI() override;
  explicit PROTOBUF_CONSTEXPR ROI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROI(const ROI& from);
  ROI(ROI&& from) noexcept
    : ROI() {
    *this = ::std::move(from);
  }

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROI& operator=(ROI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ROI& a, ROI& b) {
    a.Swap(&b);
  }
  inline void Swap(ROI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.data_generator.ROI";
  }
  protected:
  explicit ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 1,
  };
  // repeated .apollo.common.Point3D polygon_point = 1;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::common::Point3D* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_polygon_point();
  private:
  const ::apollo::common::Point3D& _internal_polygon_point(int index) const;
  ::apollo::common::Point3D* _internal_add_polygon_point();
  public:
  const ::apollo::common::Point3D& polygon_point(int index) const;
  ::apollo::common::Point3D* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      polygon_point() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.data_generator.ROI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > polygon_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class SensorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.data_generator.SensorConfig) */ {
 public:
  inline SensorConfig() : SensorConfig(nullptr) {}
  ~SensorConfig() override;
  explicit PROTOBUF_CONSTEXPR SensorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorConfig(const SensorConfig& from);
  SensorConfig(SensorConfig&& from) noexcept
    : SensorConfig() {
    *this = ::std::move(from);
  }

  inline SensorConfig& operator=(const SensorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorConfig& operator=(SensorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorConfig* internal_default_instance() {
    return reinterpret_cast<const SensorConfig*>(
               &_SensorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorConfig& a, SensorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.data_generator.SensorConfig";
  }
  protected:
  explicit SensorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorConfig_SensorId SensorId;
  static constexpr SensorId VELODYNE64 =
    SensorConfig_SensorId_VELODYNE64;
  static constexpr SensorId VELODYNE16 =
    SensorConfig_SensorId_VELODYNE16;
  static constexpr SensorId CONTI_RADAR =
    SensorConfig_SensorId_CONTI_RADAR;
  static inline bool SensorId_IsValid(int value) {
    return SensorConfig_SensorId_IsValid(value);
  }
  static constexpr SensorId SensorId_MIN =
    SensorConfig_SensorId_SensorId_MIN;
  static constexpr SensorId SensorId_MAX =
    SensorConfig_SensorId_SensorId_MAX;
  static constexpr int SensorId_ARRAYSIZE =
    SensorConfig_SensorId_SensorId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorId_descriptor() {
    return SensorConfig_SensorId_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorId_Name.");
    return SensorConfig_SensorId_Name(enum_t_value);
  }
  static inline bool SensorId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SensorId* value) {
    return SensorConfig_SensorId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFrameNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string sensor_frame_name = 2;
  bool has_sensor_frame_name() const;
  private:
  bool _internal_has_sensor_frame_name() const;
  public:
  void clear_sensor_frame_name();
  const std::string& sensor_frame_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_frame_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_frame_name();
  PROTOBUF_NODISCARD std::string* release_sensor_frame_name();
  void set_allocated_sensor_frame_name(std::string* sensor_frame_name);
  private:
  const std::string& _internal_sensor_frame_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_frame_name(const std::string& value);
  std::string* _internal_mutable_sensor_frame_name();
  public:

  // optional .apollo.perception.data_generator.SensorConfig.SensorId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::apollo::perception::data_generator::SensorConfig_SensorId id() const;
  void set_id(::apollo::perception::data_generator::SensorConfig_SensorId value);
  private:
  ::apollo::perception::data_generator::SensorConfig_SensorId _internal_id() const;
  void _internal_set_id(::apollo::perception::data_generator::SensorConfig_SensorId value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.data_generator.SensorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_frame_name_;
    int id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataGeneratorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.data_generator.DataGeneratorInfo) */ {
 public:
  inline DataGeneratorInfo() : DataGeneratorInfo(nullptr) {}
  ~DataGeneratorInfo() override;
  explicit PROTOBUF_CONSTEXPR DataGeneratorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataGeneratorInfo(const DataGeneratorInfo& from);
  DataGeneratorInfo(DataGeneratorInfo&& from) noexcept
    : DataGeneratorInfo() {
    *this = ::std::move(from);
  }

  inline DataGeneratorInfo& operator=(const DataGeneratorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataGeneratorInfo& operator=(DataGeneratorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataGeneratorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataGeneratorInfo* internal_default_instance() {
    return reinterpret_cast<const DataGeneratorInfo*>(
               &_DataGeneratorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataGeneratorInfo& a, DataGeneratorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataGeneratorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataGeneratorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataGeneratorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataGeneratorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataGeneratorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataGeneratorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataGeneratorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.data_generator.DataGeneratorInfo";
  }
  protected:
  explicit DataGeneratorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
    kConfigFieldNumber = 3,
    kRoiFieldNumber = 1,
  };
  // repeated .apollo.perception.data_generator.DataGeneratorObstacle obstacle = 2;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::apollo::perception::data_generator::DataGeneratorObstacle* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::DataGeneratorObstacle >*
      mutable_obstacle();
  private:
  const ::apollo::perception::data_generator::DataGeneratorObstacle& _internal_obstacle(int index) const;
  ::apollo::perception::data_generator::DataGeneratorObstacle* _internal_add_obstacle();
  public:
  const ::apollo::perception::data_generator::DataGeneratorObstacle& obstacle(int index) const;
  ::apollo::perception::data_generator::DataGeneratorObstacle* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::DataGeneratorObstacle >&
      obstacle() const;

  // repeated .apollo.perception.data_generator.SensorConfig config = 3;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::apollo::perception::data_generator::SensorConfig* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::SensorConfig >*
      mutable_config();
  private:
  const ::apollo::perception::data_generator::SensorConfig& _internal_config(int index) const;
  ::apollo::perception::data_generator::SensorConfig* _internal_add_config();
  public:
  const ::apollo::perception::data_generator::SensorConfig& config(int index) const;
  ::apollo::perception::data_generator::SensorConfig* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::SensorConfig >&
      config() const;

  // optional .apollo.perception.data_generator.ROI roi = 1;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::apollo::perception::data_generator::ROI& roi() const;
  PROTOBUF_NODISCARD ::apollo::perception::data_generator::ROI* release_roi();
  ::apollo::perception::data_generator::ROI* mutable_roi();
  void set_allocated_roi(::apollo::perception::data_generator::ROI* roi);
  private:
  const ::apollo::perception::data_generator::ROI& _internal_roi() const;
  ::apollo::perception::data_generator::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::apollo::perception::data_generator::ROI* roi);
  ::apollo::perception::data_generator::ROI* unsafe_arena_release_roi();

  // @@protoc_insertion_point(class_scope:apollo.perception.data_generator.DataGeneratorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::DataGeneratorObstacle > obstacle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::SensorConfig > config_;
    ::apollo::perception::data_generator::ROI* roi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataGeneratorObstacle

// optional string id = 1;
inline bool DataGeneratorObstacle::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_id() const {
  return _internal_has_id();
}
inline void DataGeneratorObstacle::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataGeneratorObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataGeneratorObstacle::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.id)
}
inline std::string* DataGeneratorObstacle::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorObstacle.id)
  return _s;
}
inline const std::string& DataGeneratorObstacle::_internal_id() const {
  return _impl_.id_.Get();
}
inline void DataGeneratorObstacle::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataGeneratorObstacle::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataGeneratorObstacle::release_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.data_generator.DataGeneratorObstacle.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataGeneratorObstacle::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.data_generator.DataGeneratorObstacle.id)
}

// optional .apollo.common.Point2D position = 2;
inline bool DataGeneratorObstacle::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool DataGeneratorObstacle::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point2D& DataGeneratorObstacle::_internal_position() const {
  const ::apollo::common::Point2D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& DataGeneratorObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.position)
  return _internal_position();
}
inline void DataGeneratorObstacle::unsafe_arena_set_allocated_position(
    ::apollo::common::Point2D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.data_generator.DataGeneratorObstacle.position)
}
inline ::apollo::common::Point2D* DataGeneratorObstacle::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point2D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* DataGeneratorObstacle::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.data_generator.DataGeneratorObstacle.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point2D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* DataGeneratorObstacle::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::Point2D* DataGeneratorObstacle::mutable_position() {
  ::apollo::common::Point2D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorObstacle.position)
  return _msg;
}
inline void DataGeneratorObstacle::set_allocated_position(::apollo::common::Point2D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.data_generator.DataGeneratorObstacle.position)
}

// optional double theta = 3;
inline bool DataGeneratorObstacle::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_theta() const {
  return _internal_has_theta();
}
inline void DataGeneratorObstacle::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DataGeneratorObstacle::_internal_theta() const {
  return _impl_.theta_;
}
inline double DataGeneratorObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.theta)
  return _internal_theta();
}
inline void DataGeneratorObstacle::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.theta_ = value;
}
inline void DataGeneratorObstacle::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.theta)
}

// optional .apollo.common.Point3D velocity = 4;
inline bool DataGeneratorObstacle::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool DataGeneratorObstacle::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& DataGeneratorObstacle::_internal_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& DataGeneratorObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.velocity)
  return _internal_velocity();
}
inline void DataGeneratorObstacle::unsafe_arena_set_allocated_velocity(
    ::apollo::common::Point3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.data_generator.DataGeneratorObstacle.velocity)
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.data_generator.DataGeneratorObstacle.velocity)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::mutable_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorObstacle.velocity)
  return _msg;
}
inline void DataGeneratorObstacle::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.data_generator.DataGeneratorObstacle.velocity)
}

// optional double length = 5;
inline bool DataGeneratorObstacle::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_length() const {
  return _internal_has_length();
}
inline void DataGeneratorObstacle::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DataGeneratorObstacle::_internal_length() const {
  return _impl_.length_;
}
inline double DataGeneratorObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.length)
  return _internal_length();
}
inline void DataGeneratorObstacle::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.length_ = value;
}
inline void DataGeneratorObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.length)
}

// optional double width = 6;
inline bool DataGeneratorObstacle::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_width() const {
  return _internal_has_width();
}
inline void DataGeneratorObstacle::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double DataGeneratorObstacle::_internal_width() const {
  return _impl_.width_;
}
inline double DataGeneratorObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.width)
  return _internal_width();
}
inline void DataGeneratorObstacle::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.width_ = value;
}
inline void DataGeneratorObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.width)
}

// optional double height = 7;
inline bool DataGeneratorObstacle::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_height() const {
  return _internal_has_height();
}
inline void DataGeneratorObstacle::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double DataGeneratorObstacle::_internal_height() const {
  return _impl_.height_;
}
inline double DataGeneratorObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.height)
  return _internal_height();
}
inline void DataGeneratorObstacle::_internal_set_height(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.height_ = value;
}
inline void DataGeneratorObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.height)
}

// repeated .apollo.common.Point3D polygon_point = 8;
inline int DataGeneratorObstacle::_internal_polygon_point_size() const {
  return _impl_.polygon_point_.size();
}
inline int DataGeneratorObstacle::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return _impl_.polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
DataGeneratorObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return &_impl_.polygon_point_;
}
inline const ::apollo::common::Point3D& DataGeneratorObstacle::_internal_polygon_point(int index) const {
  return _impl_.polygon_point_.Get(index);
}
inline const ::apollo::common::Point3D& DataGeneratorObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::_internal_add_polygon_point() {
  return _impl_.polygon_point_.Add();
}
inline ::apollo::common::Point3D* DataGeneratorObstacle::add_polygon_point() {
  ::apollo::common::Point3D* _add = _internal_add_polygon_point();
  // @@protoc_insertion_point(field_add:apollo.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
DataGeneratorObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return _impl_.polygon_point_;
}

// optional .apollo.perception.data_generator.DataGeneratorObstacle.Type type = 10;
inline bool DataGeneratorObstacle::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DataGeneratorObstacle::has_type() const {
  return _internal_has_type();
}
inline void DataGeneratorObstacle::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::perception::data_generator::DataGeneratorObstacle_Type DataGeneratorObstacle::_internal_type() const {
  return static_cast< ::apollo::perception::data_generator::DataGeneratorObstacle_Type >(_impl_.type_);
}
inline ::apollo::perception::data_generator::DataGeneratorObstacle_Type DataGeneratorObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorObstacle.type)
  return _internal_type();
}
inline void DataGeneratorObstacle::_internal_set_type(::apollo::perception::data_generator::DataGeneratorObstacle_Type value) {
  assert(::apollo::perception::data_generator::DataGeneratorObstacle_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_ = value;
}
inline void DataGeneratorObstacle::set_type(::apollo::perception::data_generator::DataGeneratorObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.DataGeneratorObstacle.type)
}

// -------------------------------------------------------------------

// ROI

// repeated .apollo.common.Point3D polygon_point = 1;
inline int ROI::_internal_polygon_point_size() const {
  return _impl_.polygon_point_.size();
}
inline int ROI::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline ::apollo::common::Point3D* ROI::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.ROI.polygon_point)
  return _impl_.polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
ROI::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.data_generator.ROI.polygon_point)
  return &_impl_.polygon_point_;
}
inline const ::apollo::common::Point3D& ROI::_internal_polygon_point(int index) const {
  return _impl_.polygon_point_.Get(index);
}
inline const ::apollo::common::Point3D& ROI::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.ROI.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::common::Point3D* ROI::_internal_add_polygon_point() {
  return _impl_.polygon_point_.Add();
}
inline ::apollo::common::Point3D* ROI::add_polygon_point() {
  ::apollo::common::Point3D* _add = _internal_add_polygon_point();
  // @@protoc_insertion_point(field_add:apollo.perception.data_generator.ROI.polygon_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
ROI::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.data_generator.ROI.polygon_point)
  return _impl_.polygon_point_;
}

// -------------------------------------------------------------------

// SensorConfig

// optional .apollo.perception.data_generator.SensorConfig.SensorId id = 1;
inline bool SensorConfig::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SensorConfig::has_id() const {
  return _internal_has_id();
}
inline void SensorConfig::clear_id() {
  _impl_.id_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::data_generator::SensorConfig_SensorId SensorConfig::_internal_id() const {
  return static_cast< ::apollo::perception::data_generator::SensorConfig_SensorId >(_impl_.id_);
}
inline ::apollo::perception::data_generator::SensorConfig_SensorId SensorConfig::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.SensorConfig.id)
  return _internal_id();
}
inline void SensorConfig::_internal_set_id(::apollo::perception::data_generator::SensorConfig_SensorId value) {
  assert(::apollo::perception::data_generator::SensorConfig_SensorId_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void SensorConfig::set_id(::apollo::perception::data_generator::SensorConfig_SensorId value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.SensorConfig.id)
}

// optional string sensor_frame_name = 2;
inline bool SensorConfig::_internal_has_sensor_frame_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SensorConfig::has_sensor_frame_name() const {
  return _internal_has_sensor_frame_name();
}
inline void SensorConfig::clear_sensor_frame_name() {
  _impl_.sensor_frame_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorConfig::sensor_frame_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.SensorConfig.sensor_frame_name)
  return _internal_sensor_frame_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorConfig::set_sensor_frame_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sensor_frame_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.perception.data_generator.SensorConfig.sensor_frame_name)
}
inline std::string* SensorConfig::mutable_sensor_frame_name() {
  std::string* _s = _internal_mutable_sensor_frame_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.SensorConfig.sensor_frame_name)
  return _s;
}
inline const std::string& SensorConfig::_internal_sensor_frame_name() const {
  return _impl_.sensor_frame_name_.Get();
}
inline void SensorConfig::_internal_set_sensor_frame_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sensor_frame_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SensorConfig::_internal_mutable_sensor_frame_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sensor_frame_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SensorConfig::release_sensor_frame_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.data_generator.SensorConfig.sensor_frame_name)
  if (!_internal_has_sensor_frame_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sensor_frame_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_frame_name_.IsDefault()) {
    _impl_.sensor_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SensorConfig::set_allocated_sensor_frame_name(std::string* sensor_frame_name) {
  if (sensor_frame_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sensor_frame_name_.SetAllocated(sensor_frame_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_frame_name_.IsDefault()) {
    _impl_.sensor_frame_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.data_generator.SensorConfig.sensor_frame_name)
}

// -------------------------------------------------------------------

// DataGeneratorInfo

// optional .apollo.perception.data_generator.ROI roi = 1;
inline bool DataGeneratorInfo::_internal_has_roi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_ != nullptr);
  return value;
}
inline bool DataGeneratorInfo::has_roi() const {
  return _internal_has_roi();
}
inline void DataGeneratorInfo::clear_roi() {
  if (_impl_.roi_ != nullptr) _impl_.roi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::data_generator::ROI& DataGeneratorInfo::_internal_roi() const {
  const ::apollo::perception::data_generator::ROI* p = _impl_.roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::data_generator::ROI&>(
      ::apollo::perception::data_generator::_ROI_default_instance_);
}
inline const ::apollo::perception::data_generator::ROI& DataGeneratorInfo::roi() const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorInfo.roi)
  return _internal_roi();
}
inline void DataGeneratorInfo::unsafe_arena_set_allocated_roi(
    ::apollo::perception::data_generator::ROI* roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_);
  }
  _impl_.roi_ = roi;
  if (roi) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.data_generator.DataGeneratorInfo.roi)
}
inline ::apollo::perception::data_generator::ROI* DataGeneratorInfo::release_roi() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::data_generator::ROI* temp = _impl_.roi_;
  _impl_.roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::data_generator::ROI* DataGeneratorInfo::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:apollo.perception.data_generator.DataGeneratorInfo.roi)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::data_generator::ROI* temp = _impl_.roi_;
  _impl_.roi_ = nullptr;
  return temp;
}
inline ::apollo::perception::data_generator::ROI* DataGeneratorInfo::_internal_mutable_roi() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::data_generator::ROI>(GetArenaForAllocation());
    _impl_.roi_ = p;
  }
  return _impl_.roi_;
}
inline ::apollo::perception::data_generator::ROI* DataGeneratorInfo::mutable_roi() {
  ::apollo::perception::data_generator::ROI* _msg = _internal_mutable_roi();
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorInfo.roi)
  return _msg;
}
inline void DataGeneratorInfo::set_allocated_roi(::apollo::perception::data_generator::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roi_;
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roi);
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.data_generator.DataGeneratorInfo.roi)
}

// repeated .apollo.perception.data_generator.DataGeneratorObstacle obstacle = 2;
inline int DataGeneratorInfo::_internal_obstacle_size() const {
  return _impl_.obstacle_.size();
}
inline int DataGeneratorInfo::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void DataGeneratorInfo::clear_obstacle() {
  _impl_.obstacle_.Clear();
}
inline ::apollo::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorInfo.obstacle)
  return _impl_.obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::DataGeneratorObstacle >*
DataGeneratorInfo::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.data_generator.DataGeneratorInfo.obstacle)
  return &_impl_.obstacle_;
}
inline const ::apollo::perception::data_generator::DataGeneratorObstacle& DataGeneratorInfo::_internal_obstacle(int index) const {
  return _impl_.obstacle_.Get(index);
}
inline const ::apollo::perception::data_generator::DataGeneratorObstacle& DataGeneratorInfo::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorInfo.obstacle)
  return _internal_obstacle(index);
}
inline ::apollo::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::_internal_add_obstacle() {
  return _impl_.obstacle_.Add();
}
inline ::apollo::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::add_obstacle() {
  ::apollo::perception::data_generator::DataGeneratorObstacle* _add = _internal_add_obstacle();
  // @@protoc_insertion_point(field_add:apollo.perception.data_generator.DataGeneratorInfo.obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::DataGeneratorObstacle >&
DataGeneratorInfo::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.data_generator.DataGeneratorInfo.obstacle)
  return _impl_.obstacle_;
}

// repeated .apollo.perception.data_generator.SensorConfig config = 3;
inline int DataGeneratorInfo::_internal_config_size() const {
  return _impl_.config_.size();
}
inline int DataGeneratorInfo::config_size() const {
  return _internal_config_size();
}
inline void DataGeneratorInfo::clear_config() {
  _impl_.config_.Clear();
}
inline ::apollo::perception::data_generator::SensorConfig* DataGeneratorInfo::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.data_generator.DataGeneratorInfo.config)
  return _impl_.config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::SensorConfig >*
DataGeneratorInfo::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.data_generator.DataGeneratorInfo.config)
  return &_impl_.config_;
}
inline const ::apollo::perception::data_generator::SensorConfig& DataGeneratorInfo::_internal_config(int index) const {
  return _impl_.config_.Get(index);
}
inline const ::apollo::perception::data_generator::SensorConfig& DataGeneratorInfo::config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.data_generator.DataGeneratorInfo.config)
  return _internal_config(index);
}
inline ::apollo::perception::data_generator::SensorConfig* DataGeneratorInfo::_internal_add_config() {
  return _impl_.config_.Add();
}
inline ::apollo::perception::data_generator::SensorConfig* DataGeneratorInfo::add_config() {
  ::apollo::perception::data_generator::SensorConfig* _add = _internal_add_config();
  // @@protoc_insertion_point(field_add:apollo.perception.data_generator.DataGeneratorInfo.config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::data_generator::SensorConfig >&
DataGeneratorInfo::config() const {
  // @@protoc_insertion_point(field_list:apollo.perception.data_generator.DataGeneratorInfo.config)
  return _impl_.config_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_generator
}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::data_generator::DataGeneratorObstacle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::data_generator::DataGeneratorObstacle_Type>() {
  return ::apollo::perception::data_generator::DataGeneratorObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::data_generator::SensorConfig_SensorId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::data_generator::SensorConfig_SensorId>() {
  return ::apollo::perception::data_generator::SensorConfig_SensorId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto
