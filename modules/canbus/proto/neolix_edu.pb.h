// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/neolix_edu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
namespace apollo {
namespace canbus {
class Ads_brake_command_46;
struct Ads_brake_command_46DefaultTypeInternal;
extern Ads_brake_command_46DefaultTypeInternal _Ads_brake_command_46_default_instance_;
class Ads_diagnosis_628;
struct Ads_diagnosis_628DefaultTypeInternal;
extern Ads_diagnosis_628DefaultTypeInternal _Ads_diagnosis_628_default_instance_;
class Ads_drive_command_50;
struct Ads_drive_command_50DefaultTypeInternal;
extern Ads_drive_command_50DefaultTypeInternal _Ads_drive_command_50_default_instance_;
class Ads_eps_command_56;
struct Ads_eps_command_56DefaultTypeInternal;
extern Ads_eps_command_56DefaultTypeInternal _Ads_eps_command_56_default_instance_;
class Ads_light_horn_command_310;
struct Ads_light_horn_command_310DefaultTypeInternal;
extern Ads_light_horn_command_310DefaultTypeInternal _Ads_light_horn_command_310_default_instance_;
class Aeb_diagnosis1_626;
struct Aeb_diagnosis1_626DefaultTypeInternal;
extern Aeb_diagnosis1_626DefaultTypeInternal _Aeb_diagnosis1_626_default_instance_;
class Aeb_diagresp_718;
struct Aeb_diagresp_718DefaultTypeInternal;
extern Aeb_diagresp_718DefaultTypeInternal _Aeb_diagresp_718_default_instance_;
class Aeb_frontwheelspeed_353;
struct Aeb_frontwheelspeed_353DefaultTypeInternal;
extern Aeb_frontwheelspeed_353DefaultTypeInternal _Aeb_frontwheelspeed_353_default_instance_;
class Aeb_rearwheelspeed_354;
struct Aeb_rearwheelspeed_354DefaultTypeInternal;
extern Aeb_rearwheelspeed_354DefaultTypeInternal _Aeb_rearwheelspeed_354_default_instance_;
class Aeb_systemstate_11;
struct Aeb_systemstate_11DefaultTypeInternal;
extern Aeb_systemstate_11DefaultTypeInternal _Aeb_systemstate_11_default_instance_;
class Aeb_wheelimpulse_355;
struct Aeb_wheelimpulse_355DefaultTypeInternal;
extern Aeb_wheelimpulse_355DefaultTypeInternal _Aeb_wheelimpulse_355_default_instance_;
class Neolix_edu;
struct Neolix_eduDefaultTypeInternal;
extern Neolix_eduDefaultTypeInternal _Neolix_edu_default_instance_;
class Pas_1st_data_311;
struct Pas_1st_data_311DefaultTypeInternal;
extern Pas_1st_data_311DefaultTypeInternal _Pas_1st_data_311_default_instance_;
class Pas_2nd_data_312;
struct Pas_2nd_data_312DefaultTypeInternal;
extern Pas_2nd_data_312DefaultTypeInternal _Pas_2nd_data_312_default_instance_;
class Vcu_brake_report_47;
struct Vcu_brake_report_47DefaultTypeInternal;
extern Vcu_brake_report_47DefaultTypeInternal _Vcu_brake_report_47_default_instance_;
class Vcu_drive_report_52;
struct Vcu_drive_report_52DefaultTypeInternal;
extern Vcu_drive_report_52DefaultTypeInternal _Vcu_drive_report_52_default_instance_;
class Vcu_eps_report_57;
struct Vcu_eps_report_57DefaultTypeInternal;
extern Vcu_eps_report_57DefaultTypeInternal _Vcu_eps_report_57_default_instance_;
class Vcu_nm_401;
struct Vcu_nm_401DefaultTypeInternal;
extern Vcu_nm_401DefaultTypeInternal _Vcu_nm_401_default_instance_;
class Vcu_powerstatus_214;
struct Vcu_powerstatus_214DefaultTypeInternal;
extern Vcu_powerstatus_214DefaultTypeInternal _Vcu_powerstatus_214_default_instance_;
class Vcu_vehicle_fault_response_201;
struct Vcu_vehicle_fault_response_201DefaultTypeInternal;
extern Vcu_vehicle_fault_response_201DefaultTypeInternal _Vcu_vehicle_fault_response_201_default_instance_;
class Vcu_vehicle_info_response_502;
struct Vcu_vehicle_info_response_502DefaultTypeInternal;
extern Vcu_vehicle_info_response_502DefaultTypeInternal _Vcu_vehicle_info_response_502_default_instance_;
class Vcu_vehicle_status_report_101;
struct Vcu_vehicle_status_report_101DefaultTypeInternal;
extern Vcu_vehicle_status_report_101DefaultTypeInternal _Vcu_vehicle_status_report_101_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Ads_brake_command_46* Arena::CreateMaybeMessage<::apollo::canbus::Ads_brake_command_46>(Arena*);
template<> ::apollo::canbus::Ads_diagnosis_628* Arena::CreateMaybeMessage<::apollo::canbus::Ads_diagnosis_628>(Arena*);
template<> ::apollo::canbus::Ads_drive_command_50* Arena::CreateMaybeMessage<::apollo::canbus::Ads_drive_command_50>(Arena*);
template<> ::apollo::canbus::Ads_eps_command_56* Arena::CreateMaybeMessage<::apollo::canbus::Ads_eps_command_56>(Arena*);
template<> ::apollo::canbus::Ads_light_horn_command_310* Arena::CreateMaybeMessage<::apollo::canbus::Ads_light_horn_command_310>(Arena*);
template<> ::apollo::canbus::Aeb_diagnosis1_626* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_diagnosis1_626>(Arena*);
template<> ::apollo::canbus::Aeb_diagresp_718* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_diagresp_718>(Arena*);
template<> ::apollo::canbus::Aeb_frontwheelspeed_353* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_frontwheelspeed_353>(Arena*);
template<> ::apollo::canbus::Aeb_rearwheelspeed_354* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_rearwheelspeed_354>(Arena*);
template<> ::apollo::canbus::Aeb_systemstate_11* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_systemstate_11>(Arena*);
template<> ::apollo::canbus::Aeb_wheelimpulse_355* Arena::CreateMaybeMessage<::apollo::canbus::Aeb_wheelimpulse_355>(Arena*);
template<> ::apollo::canbus::Neolix_edu* Arena::CreateMaybeMessage<::apollo::canbus::Neolix_edu>(Arena*);
template<> ::apollo::canbus::Pas_1st_data_311* Arena::CreateMaybeMessage<::apollo::canbus::Pas_1st_data_311>(Arena*);
template<> ::apollo::canbus::Pas_2nd_data_312* Arena::CreateMaybeMessage<::apollo::canbus::Pas_2nd_data_312>(Arena*);
template<> ::apollo::canbus::Vcu_brake_report_47* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_brake_report_47>(Arena*);
template<> ::apollo::canbus::Vcu_drive_report_52* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_drive_report_52>(Arena*);
template<> ::apollo::canbus::Vcu_eps_report_57* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_eps_report_57>(Arena*);
template<> ::apollo::canbus::Vcu_nm_401* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_nm_401>(Arena*);
template<> ::apollo::canbus::Vcu_powerstatus_214* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_powerstatus_214>(Arena*);
template<> ::apollo::canbus::Vcu_vehicle_fault_response_201* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_fault_response_201>(Arena*);
template<> ::apollo::canbus::Vcu_vehicle_info_response_502* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_info_response_502>(Arena*);
template<> ::apollo::canbus::Vcu_vehicle_status_report_101* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_status_report_101>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Vcu_brake_report_47_Control_mode_respType : int {
  Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_STANDBY = 0,
  Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE = 1,
  Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE = 2,
  Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL = 3,
  Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4
};
bool Vcu_brake_report_47_Control_mode_respType_IsValid(int value);
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_MIN = Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_MAX = Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr int Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_ARRAYSIZE = Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_brake_report_47_Control_mode_respType_descriptor();
template<typename T>
inline const std::string& Vcu_brake_report_47_Control_mode_respType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_brake_report_47_Control_mode_respType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_brake_report_47_Control_mode_respType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_brake_report_47_Control_mode_respType_descriptor(), enum_t_value);
}
inline bool Vcu_brake_report_47_Control_mode_respType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_brake_report_47_Control_mode_respType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_brake_report_47_Control_mode_respType>(
    Vcu_brake_report_47_Control_mode_respType_descriptor(), name, value);
}
enum Vcu_eps_report_57_Control_mode_respType : int {
  Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_STANDBY = 0,
  Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE = 1,
  Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE = 2,
  Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL = 3,
  Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4
};
bool Vcu_eps_report_57_Control_mode_respType_IsValid(int value);
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_MIN = Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_MAX = Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr int Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_ARRAYSIZE = Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_eps_report_57_Control_mode_respType_descriptor();
template<typename T>
inline const std::string& Vcu_eps_report_57_Control_mode_respType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_eps_report_57_Control_mode_respType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_eps_report_57_Control_mode_respType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_eps_report_57_Control_mode_respType_descriptor(), enum_t_value);
}
inline bool Vcu_eps_report_57_Control_mode_respType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_eps_report_57_Control_mode_respType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_eps_report_57_Control_mode_respType>(
    Vcu_eps_report_57_Control_mode_respType_descriptor(), name, value);
}
enum Ads_drive_command_50_Auto_shift_commandType : int {
  Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_N = 0,
  Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_D = 1,
  Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_R = 2,
  Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_RESERVED = 3
};
bool Ads_drive_command_50_Auto_shift_commandType_IsValid(int value);
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_MIN = Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_N;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_MAX = Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_RESERVED;
constexpr int Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_ARRAYSIZE = Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ads_drive_command_50_Auto_shift_commandType_descriptor();
template<typename T>
inline const std::string& Ads_drive_command_50_Auto_shift_commandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ads_drive_command_50_Auto_shift_commandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ads_drive_command_50_Auto_shift_commandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ads_drive_command_50_Auto_shift_commandType_descriptor(), enum_t_value);
}
inline bool Ads_drive_command_50_Auto_shift_commandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ads_drive_command_50_Auto_shift_commandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ads_drive_command_50_Auto_shift_commandType>(
    Ads_drive_command_50_Auto_shift_commandType_descriptor(), name, value);
}
enum Vcu_drive_report_52_Control_mode_respType : int {
  Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_STANDBY = 0,
  Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE = 1,
  Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE = 2,
  Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL = 3,
  Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4
};
bool Vcu_drive_report_52_Control_mode_respType_IsValid(int value);
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_MIN = Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_MAX = Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr int Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_ARRAYSIZE = Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_drive_report_52_Control_mode_respType_descriptor();
template<typename T>
inline const std::string& Vcu_drive_report_52_Control_mode_respType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_drive_report_52_Control_mode_respType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_drive_report_52_Control_mode_respType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_drive_report_52_Control_mode_respType_descriptor(), enum_t_value);
}
inline bool Vcu_drive_report_52_Control_mode_respType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_drive_report_52_Control_mode_respType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_drive_report_52_Control_mode_respType>(
    Vcu_drive_report_52_Control_mode_respType_descriptor(), name, value);
}
enum Vcu_drive_report_52_Vcu_real_shiftType : int {
  Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_N = 0,
  Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_D = 1,
  Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_R = 2,
  Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_RESERVED = 3
};
bool Vcu_drive_report_52_Vcu_real_shiftType_IsValid(int value);
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_MIN = Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_N;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_MAX = Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_RESERVED;
constexpr int Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_ARRAYSIZE = Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_drive_report_52_Vcu_real_shiftType_descriptor();
template<typename T>
inline const std::string& Vcu_drive_report_52_Vcu_real_shiftType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_drive_report_52_Vcu_real_shiftType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_drive_report_52_Vcu_real_shiftType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_drive_report_52_Vcu_real_shiftType_descriptor(), enum_t_value);
}
inline bool Vcu_drive_report_52_Vcu_real_shiftType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_drive_report_52_Vcu_real_shiftType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_drive_report_52_Vcu_real_shiftType>(
    Vcu_drive_report_52_Vcu_real_shiftType_descriptor(), name, value);
}
enum Vcu_vehicle_status_report_101_Control_mode_respType : int {
  Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_STANDBY = 0,
  Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE = 1,
  Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE = 2,
  Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL = 3,
  Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4
};
bool Vcu_vehicle_status_report_101_Control_mode_respType_IsValid(int value);
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_MIN = Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_MAX = Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr int Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_ARRAYSIZE = Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_vehicle_status_report_101_Control_mode_respType_descriptor();
template<typename T>
inline const std::string& Vcu_vehicle_status_report_101_Control_mode_respType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_vehicle_status_report_101_Control_mode_respType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_vehicle_status_report_101_Control_mode_respType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_vehicle_status_report_101_Control_mode_respType_descriptor(), enum_t_value);
}
inline bool Vcu_vehicle_status_report_101_Control_mode_respType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_vehicle_status_report_101_Control_mode_respType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_vehicle_status_report_101_Control_mode_respType>(
    Vcu_vehicle_status_report_101_Control_mode_respType_descriptor(), name, value);
}
// ===================================================================

class Aeb_systemstate_11 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_systemstate_11) */ {
 public:
  inline Aeb_systemstate_11() : Aeb_systemstate_11(nullptr) {}
  ~Aeb_systemstate_11() override;
  explicit PROTOBUF_CONSTEXPR Aeb_systemstate_11(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_systemstate_11(const Aeb_systemstate_11& from);
  Aeb_systemstate_11(Aeb_systemstate_11&& from) noexcept
    : Aeb_systemstate_11() {
    *this = ::std::move(from);
  }

  inline Aeb_systemstate_11& operator=(const Aeb_systemstate_11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_systemstate_11& operator=(Aeb_systemstate_11&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_systemstate_11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_systemstate_11* internal_default_instance() {
    return reinterpret_cast<const Aeb_systemstate_11*>(
               &_Aeb_systemstate_11_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Aeb_systemstate_11& a, Aeb_systemstate_11& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_systemstate_11* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_systemstate_11* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_systemstate_11* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_systemstate_11>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_systemstate_11& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_systemstate_11& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_systemstate_11* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_systemstate_11";
  }
  protected:
  explicit Aeb_systemstate_11(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAebStateFieldNumber = 1,
    kFaultrankFieldNumber = 3,
    kCurrenttemperatureFieldNumber = 4,
    kAebBrakestateFieldNumber = 2,
    kPasF1StopFieldNumber = 5,
    kPasF2StopFieldNumber = 6,
    kPasF3StopFieldNumber = 7,
    kPasF4StopFieldNumber = 8,
    kPasB1StopFieldNumber = 9,
    kPasB2StopFieldNumber = 10,
    kPasB3StopFieldNumber = 11,
    kPasB4StopFieldNumber = 12,
    kAebLivecounterRearFieldNumber = 13,
    kAebCheksumFieldNumber = 14,
  };
  // optional int32 aeb_state = 1;
  bool has_aeb_state() const;
  private:
  bool _internal_has_aeb_state() const;
  public:
  void clear_aeb_state();
  int32_t aeb_state() const;
  void set_aeb_state(int32_t value);
  private:
  int32_t _internal_aeb_state() const;
  void _internal_set_aeb_state(int32_t value);
  public:

  // optional int32 faultrank = 3;
  bool has_faultrank() const;
  private:
  bool _internal_has_faultrank() const;
  public:
  void clear_faultrank();
  int32_t faultrank() const;
  void set_faultrank(int32_t value);
  private:
  int32_t _internal_faultrank() const;
  void _internal_set_faultrank(int32_t value);
  public:

  // optional int32 currenttemperature = 4;
  bool has_currenttemperature() const;
  private:
  bool _internal_has_currenttemperature() const;
  public:
  void clear_currenttemperature();
  int32_t currenttemperature() const;
  void set_currenttemperature(int32_t value);
  private:
  int32_t _internal_currenttemperature() const;
  void _internal_set_currenttemperature(int32_t value);
  public:

  // optional bool aeb_brakestate = 2;
  bool has_aeb_brakestate() const;
  private:
  bool _internal_has_aeb_brakestate() const;
  public:
  void clear_aeb_brakestate();
  bool aeb_brakestate() const;
  void set_aeb_brakestate(bool value);
  private:
  bool _internal_aeb_brakestate() const;
  void _internal_set_aeb_brakestate(bool value);
  public:

  // optional bool pas_f1_stop = 5;
  bool has_pas_f1_stop() const;
  private:
  bool _internal_has_pas_f1_stop() const;
  public:
  void clear_pas_f1_stop();
  bool pas_f1_stop() const;
  void set_pas_f1_stop(bool value);
  private:
  bool _internal_pas_f1_stop() const;
  void _internal_set_pas_f1_stop(bool value);
  public:

  // optional bool pas_f2_stop = 6;
  bool has_pas_f2_stop() const;
  private:
  bool _internal_has_pas_f2_stop() const;
  public:
  void clear_pas_f2_stop();
  bool pas_f2_stop() const;
  void set_pas_f2_stop(bool value);
  private:
  bool _internal_pas_f2_stop() const;
  void _internal_set_pas_f2_stop(bool value);
  public:

  // optional bool pas_f3_stop = 7;
  bool has_pas_f3_stop() const;
  private:
  bool _internal_has_pas_f3_stop() const;
  public:
  void clear_pas_f3_stop();
  bool pas_f3_stop() const;
  void set_pas_f3_stop(bool value);
  private:
  bool _internal_pas_f3_stop() const;
  void _internal_set_pas_f3_stop(bool value);
  public:

  // optional bool pas_f4_stop = 8;
  bool has_pas_f4_stop() const;
  private:
  bool _internal_has_pas_f4_stop() const;
  public:
  void clear_pas_f4_stop();
  bool pas_f4_stop() const;
  void set_pas_f4_stop(bool value);
  private:
  bool _internal_pas_f4_stop() const;
  void _internal_set_pas_f4_stop(bool value);
  public:

  // optional bool pas_b1_stop = 9;
  bool has_pas_b1_stop() const;
  private:
  bool _internal_has_pas_b1_stop() const;
  public:
  void clear_pas_b1_stop();
  bool pas_b1_stop() const;
  void set_pas_b1_stop(bool value);
  private:
  bool _internal_pas_b1_stop() const;
  void _internal_set_pas_b1_stop(bool value);
  public:

  // optional bool pas_b2_stop = 10;
  bool has_pas_b2_stop() const;
  private:
  bool _internal_has_pas_b2_stop() const;
  public:
  void clear_pas_b2_stop();
  bool pas_b2_stop() const;
  void set_pas_b2_stop(bool value);
  private:
  bool _internal_pas_b2_stop() const;
  void _internal_set_pas_b2_stop(bool value);
  public:

  // optional bool pas_b3_stop = 11;
  bool has_pas_b3_stop() const;
  private:
  bool _internal_has_pas_b3_stop() const;
  public:
  void clear_pas_b3_stop();
  bool pas_b3_stop() const;
  void set_pas_b3_stop(bool value);
  private:
  bool _internal_pas_b3_stop() const;
  void _internal_set_pas_b3_stop(bool value);
  public:

  // optional bool pas_b4_stop = 12;
  bool has_pas_b4_stop() const;
  private:
  bool _internal_has_pas_b4_stop() const;
  public:
  void clear_pas_b4_stop();
  bool pas_b4_stop() const;
  void set_pas_b4_stop(bool value);
  private:
  bool _internal_pas_b4_stop() const;
  void _internal_set_pas_b4_stop(bool value);
  public:

  // optional int32 aeb_livecounter_rear = 13;
  bool has_aeb_livecounter_rear() const;
  private:
  bool _internal_has_aeb_livecounter_rear() const;
  public:
  void clear_aeb_livecounter_rear();
  int32_t aeb_livecounter_rear() const;
  void set_aeb_livecounter_rear(int32_t value);
  private:
  int32_t _internal_aeb_livecounter_rear() const;
  void _internal_set_aeb_livecounter_rear(int32_t value);
  public:

  // optional int32 aeb_cheksum = 14;
  bool has_aeb_cheksum() const;
  private:
  bool _internal_has_aeb_cheksum() const;
  public:
  void clear_aeb_cheksum();
  int32_t aeb_cheksum() const;
  void set_aeb_cheksum(int32_t value);
  private:
  int32_t _internal_aeb_cheksum() const;
  void _internal_set_aeb_cheksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_systemstate_11)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t aeb_state_;
    int32_t faultrank_;
    int32_t currenttemperature_;
    bool aeb_brakestate_;
    bool pas_f1_stop_;
    bool pas_f2_stop_;
    bool pas_f3_stop_;
    bool pas_f4_stop_;
    bool pas_b1_stop_;
    bool pas_b2_stop_;
    bool pas_b3_stop_;
    bool pas_b4_stop_;
    int32_t aeb_livecounter_rear_;
    int32_t aeb_cheksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_vehicle_fault_response_201 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_vehicle_fault_response_201) */ {
 public:
  inline Vcu_vehicle_fault_response_201() : Vcu_vehicle_fault_response_201(nullptr) {}
  ~Vcu_vehicle_fault_response_201() override;
  explicit PROTOBUF_CONSTEXPR Vcu_vehicle_fault_response_201(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_vehicle_fault_response_201(const Vcu_vehicle_fault_response_201& from);
  Vcu_vehicle_fault_response_201(Vcu_vehicle_fault_response_201&& from) noexcept
    : Vcu_vehicle_fault_response_201() {
    *this = ::std::move(from);
  }

  inline Vcu_vehicle_fault_response_201& operator=(const Vcu_vehicle_fault_response_201& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_vehicle_fault_response_201& operator=(Vcu_vehicle_fault_response_201&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_vehicle_fault_response_201& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_vehicle_fault_response_201* internal_default_instance() {
    return reinterpret_cast<const Vcu_vehicle_fault_response_201*>(
               &_Vcu_vehicle_fault_response_201_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vcu_vehicle_fault_response_201& a, Vcu_vehicle_fault_response_201& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_vehicle_fault_response_201* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_vehicle_fault_response_201* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_vehicle_fault_response_201* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_vehicle_fault_response_201>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_vehicle_fault_response_201& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_vehicle_fault_response_201& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_vehicle_fault_response_201* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_vehicle_fault_response_201";
  }
  protected:
  explicit Vcu_vehicle_fault_response_201(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleErrorIndicationsvcuFieldNumber = 1,
    kBrakeSystemErrorehbFieldNumber = 2,
    kEpsErrorFieldNumber = 3,
    kMotorErrorFieldNumber = 4,
    kEpbErrorFieldNumber = 5,
    kHighVoltageBatteryErrorbcuFieldNumber = 6,
    kAutomodeExitReasonLosscommuniFieldNumber = 7,
    kAutomodeExitReasonReqsignalnoFieldNumber = 8,
    kAutomodeExitReasonLowPowerFieldNumber = 9,
    kAutomodeExitReasonHighvoltFieldNumber = 10,
    kAutomodeExitReasonVehicleFltFieldNumber = 11,
    kAutomodeExitReasonPressEmergFieldNumber = 12,
    kAutomodeExitReasonPressRemotFieldNumber = 13,
    kAutomodeExitReasonPduControlFieldNumber = 14,
    kVcuFaultreptAlivecounterFieldNumber = 15,
    kVcuFaultreptChecksumFieldNumber = 16,
  };
  // optional int32 vehicle_error_indicationsvcu = 1;
  bool has_vehicle_error_indicationsvcu() const;
  private:
  bool _internal_has_vehicle_error_indicationsvcu() const;
  public:
  void clear_vehicle_error_indicationsvcu();
  int32_t vehicle_error_indicationsvcu() const;
  void set_vehicle_error_indicationsvcu(int32_t value);
  private:
  int32_t _internal_vehicle_error_indicationsvcu() const;
  void _internal_set_vehicle_error_indicationsvcu(int32_t value);
  public:

  // optional int32 brake_system_errorehb = 2;
  bool has_brake_system_errorehb() const;
  private:
  bool _internal_has_brake_system_errorehb() const;
  public:
  void clear_brake_system_errorehb();
  int32_t brake_system_errorehb() const;
  void set_brake_system_errorehb(int32_t value);
  private:
  int32_t _internal_brake_system_errorehb() const;
  void _internal_set_brake_system_errorehb(int32_t value);
  public:

  // optional int32 eps_error = 3;
  bool has_eps_error() const;
  private:
  bool _internal_has_eps_error() const;
  public:
  void clear_eps_error();
  int32_t eps_error() const;
  void set_eps_error(int32_t value);
  private:
  int32_t _internal_eps_error() const;
  void _internal_set_eps_error(int32_t value);
  public:

  // optional int32 motor_error = 4;
  bool has_motor_error() const;
  private:
  bool _internal_has_motor_error() const;
  public:
  void clear_motor_error();
  int32_t motor_error() const;
  void set_motor_error(int32_t value);
  private:
  int32_t _internal_motor_error() const;
  void _internal_set_motor_error(int32_t value);
  public:

  // optional int32 epb_error = 5;
  bool has_epb_error() const;
  private:
  bool _internal_has_epb_error() const;
  public:
  void clear_epb_error();
  int32_t epb_error() const;
  void set_epb_error(int32_t value);
  private:
  int32_t _internal_epb_error() const;
  void _internal_set_epb_error(int32_t value);
  public:

  // optional int32 high_voltage_battery_errorbcu = 6;
  bool has_high_voltage_battery_errorbcu() const;
  private:
  bool _internal_has_high_voltage_battery_errorbcu() const;
  public:
  void clear_high_voltage_battery_errorbcu();
  int32_t high_voltage_battery_errorbcu() const;
  void set_high_voltage_battery_errorbcu(int32_t value);
  private:
  int32_t _internal_high_voltage_battery_errorbcu() const;
  void _internal_set_high_voltage_battery_errorbcu(int32_t value);
  public:

  // optional bool automode_exit_reason_losscommuni = 7;
  bool has_automode_exit_reason_losscommuni() const;
  private:
  bool _internal_has_automode_exit_reason_losscommuni() const;
  public:
  void clear_automode_exit_reason_losscommuni();
  bool automode_exit_reason_losscommuni() const;
  void set_automode_exit_reason_losscommuni(bool value);
  private:
  bool _internal_automode_exit_reason_losscommuni() const;
  void _internal_set_automode_exit_reason_losscommuni(bool value);
  public:

  // optional bool automode_exit_reason_reqsignalno = 8;
  bool has_automode_exit_reason_reqsignalno() const;
  private:
  bool _internal_has_automode_exit_reason_reqsignalno() const;
  public:
  void clear_automode_exit_reason_reqsignalno();
  bool automode_exit_reason_reqsignalno() const;
  void set_automode_exit_reason_reqsignalno(bool value);
  private:
  bool _internal_automode_exit_reason_reqsignalno() const;
  void _internal_set_automode_exit_reason_reqsignalno(bool value);
  public:

  // optional bool automode_exit_reason_low_power = 9;
  bool has_automode_exit_reason_low_power() const;
  private:
  bool _internal_has_automode_exit_reason_low_power() const;
  public:
  void clear_automode_exit_reason_low_power();
  bool automode_exit_reason_low_power() const;
  void set_automode_exit_reason_low_power(bool value);
  private:
  bool _internal_automode_exit_reason_low_power() const;
  void _internal_set_automode_exit_reason_low_power(bool value);
  public:

  // optional bool automode_exit_reason_highvolt = 10;
  bool has_automode_exit_reason_highvolt() const;
  private:
  bool _internal_has_automode_exit_reason_highvolt() const;
  public:
  void clear_automode_exit_reason_highvolt();
  bool automode_exit_reason_highvolt() const;
  void set_automode_exit_reason_highvolt(bool value);
  private:
  bool _internal_automode_exit_reason_highvolt() const;
  void _internal_set_automode_exit_reason_highvolt(bool value);
  public:

  // optional bool automode_exit_reason_vehicle_flt = 11;
  bool has_automode_exit_reason_vehicle_flt() const;
  private:
  bool _internal_has_automode_exit_reason_vehicle_flt() const;
  public:
  void clear_automode_exit_reason_vehicle_flt();
  bool automode_exit_reason_vehicle_flt() const;
  void set_automode_exit_reason_vehicle_flt(bool value);
  private:
  bool _internal_automode_exit_reason_vehicle_flt() const;
  void _internal_set_automode_exit_reason_vehicle_flt(bool value);
  public:

  // optional bool automode_exit_reason_press_emerg = 12;
  bool has_automode_exit_reason_press_emerg() const;
  private:
  bool _internal_has_automode_exit_reason_press_emerg() const;
  public:
  void clear_automode_exit_reason_press_emerg();
  bool automode_exit_reason_press_emerg() const;
  void set_automode_exit_reason_press_emerg(bool value);
  private:
  bool _internal_automode_exit_reason_press_emerg() const;
  void _internal_set_automode_exit_reason_press_emerg(bool value);
  public:

  // optional bool automode_exit_reason_press_remot = 13;
  bool has_automode_exit_reason_press_remot() const;
  private:
  bool _internal_has_automode_exit_reason_press_remot() const;
  public:
  void clear_automode_exit_reason_press_remot();
  bool automode_exit_reason_press_remot() const;
  void set_automode_exit_reason_press_remot(bool value);
  private:
  bool _internal_automode_exit_reason_press_remot() const;
  void _internal_set_automode_exit_reason_press_remot(bool value);
  public:

  // optional bool automode_exit_reason_pdu_control = 14;
  bool has_automode_exit_reason_pdu_control() const;
  private:
  bool _internal_has_automode_exit_reason_pdu_control() const;
  public:
  void clear_automode_exit_reason_pdu_control();
  bool automode_exit_reason_pdu_control() const;
  void set_automode_exit_reason_pdu_control(bool value);
  private:
  bool _internal_automode_exit_reason_pdu_control() const;
  void _internal_set_automode_exit_reason_pdu_control(bool value);
  public:

  // optional int32 vcu_faultrept_alivecounter = 15;
  bool has_vcu_faultrept_alivecounter() const;
  private:
  bool _internal_has_vcu_faultrept_alivecounter() const;
  public:
  void clear_vcu_faultrept_alivecounter();
  int32_t vcu_faultrept_alivecounter() const;
  void set_vcu_faultrept_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_faultrept_alivecounter() const;
  void _internal_set_vcu_faultrept_alivecounter(int32_t value);
  public:

  // optional int32 vcu_faultrept_checksum = 16;
  bool has_vcu_faultrept_checksum() const;
  private:
  bool _internal_has_vcu_faultrept_checksum() const;
  public:
  void clear_vcu_faultrept_checksum();
  int32_t vcu_faultrept_checksum() const;
  void set_vcu_faultrept_checksum(int32_t value);
  private:
  int32_t _internal_vcu_faultrept_checksum() const;
  void _internal_set_vcu_faultrept_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_vehicle_fault_response_201)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t vehicle_error_indicationsvcu_;
    int32_t brake_system_errorehb_;
    int32_t eps_error_;
    int32_t motor_error_;
    int32_t epb_error_;
    int32_t high_voltage_battery_errorbcu_;
    bool automode_exit_reason_losscommuni_;
    bool automode_exit_reason_reqsignalno_;
    bool automode_exit_reason_low_power_;
    bool automode_exit_reason_highvolt_;
    bool automode_exit_reason_vehicle_flt_;
    bool automode_exit_reason_press_emerg_;
    bool automode_exit_reason_press_remot_;
    bool automode_exit_reason_pdu_control_;
    int32_t vcu_faultrept_alivecounter_;
    int32_t vcu_faultrept_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_powerstatus_214 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_powerstatus_214) */ {
 public:
  inline Vcu_powerstatus_214() : Vcu_powerstatus_214(nullptr) {}
  ~Vcu_powerstatus_214() override;
  explicit PROTOBUF_CONSTEXPR Vcu_powerstatus_214(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_powerstatus_214(const Vcu_powerstatus_214& from);
  Vcu_powerstatus_214(Vcu_powerstatus_214&& from) noexcept
    : Vcu_powerstatus_214() {
    *this = ::std::move(from);
  }

  inline Vcu_powerstatus_214& operator=(const Vcu_powerstatus_214& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_powerstatus_214& operator=(Vcu_powerstatus_214&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_powerstatus_214& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_powerstatus_214* internal_default_instance() {
    return reinterpret_cast<const Vcu_powerstatus_214*>(
               &_Vcu_powerstatus_214_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vcu_powerstatus_214& a, Vcu_powerstatus_214& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_powerstatus_214* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_powerstatus_214* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_powerstatus_214* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_powerstatus_214>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_powerstatus_214& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_powerstatus_214& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_powerstatus_214* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_powerstatus_214";
  }
  protected:
  explicit Vcu_powerstatus_214(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcuPowermodeFieldNumber = 1,
    kVcuPowermodevalidFieldNumber = 2,
    kReplacebatterystateindicationFieldNumber = 3,
    kForbiddenAebSignalFieldNumber = 4,
    kVcuDriverinfoAlivecounterFieldNumber = 7,
    kBcuChargedischargecurrentFieldNumber = 5,
    kBcuBattInternalvoltageFieldNumber = 6,
    kVcuDriverinfoChecksumFieldNumber = 8,
  };
  // optional int32 vcu_powermode = 1;
  bool has_vcu_powermode() const;
  private:
  bool _internal_has_vcu_powermode() const;
  public:
  void clear_vcu_powermode();
  int32_t vcu_powermode() const;
  void set_vcu_powermode(int32_t value);
  private:
  int32_t _internal_vcu_powermode() const;
  void _internal_set_vcu_powermode(int32_t value);
  public:

  // optional int32 vcu_powermodevalid = 2;
  bool has_vcu_powermodevalid() const;
  private:
  bool _internal_has_vcu_powermodevalid() const;
  public:
  void clear_vcu_powermodevalid();
  int32_t vcu_powermodevalid() const;
  void set_vcu_powermodevalid(int32_t value);
  private:
  int32_t _internal_vcu_powermodevalid() const;
  void _internal_set_vcu_powermodevalid(int32_t value);
  public:

  // optional bool replacebatterystateindication = 3;
  bool has_replacebatterystateindication() const;
  private:
  bool _internal_has_replacebatterystateindication() const;
  public:
  void clear_replacebatterystateindication();
  bool replacebatterystateindication() const;
  void set_replacebatterystateindication(bool value);
  private:
  bool _internal_replacebatterystateindication() const;
  void _internal_set_replacebatterystateindication(bool value);
  public:

  // optional bool forbidden_aeb_signal = 4;
  bool has_forbidden_aeb_signal() const;
  private:
  bool _internal_has_forbidden_aeb_signal() const;
  public:
  void clear_forbidden_aeb_signal();
  bool forbidden_aeb_signal() const;
  void set_forbidden_aeb_signal(bool value);
  private:
  bool _internal_forbidden_aeb_signal() const;
  void _internal_set_forbidden_aeb_signal(bool value);
  public:

  // optional int32 vcu_driverinfo_alivecounter = 7;
  bool has_vcu_driverinfo_alivecounter() const;
  private:
  bool _internal_has_vcu_driverinfo_alivecounter() const;
  public:
  void clear_vcu_driverinfo_alivecounter();
  int32_t vcu_driverinfo_alivecounter() const;
  void set_vcu_driverinfo_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_driverinfo_alivecounter() const;
  void _internal_set_vcu_driverinfo_alivecounter(int32_t value);
  public:

  // optional double bcu_chargedischargecurrent = 5;
  bool has_bcu_chargedischargecurrent() const;
  private:
  bool _internal_has_bcu_chargedischargecurrent() const;
  public:
  void clear_bcu_chargedischargecurrent();
  double bcu_chargedischargecurrent() const;
  void set_bcu_chargedischargecurrent(double value);
  private:
  double _internal_bcu_chargedischargecurrent() const;
  void _internal_set_bcu_chargedischargecurrent(double value);
  public:

  // optional double bcu_batt_internalvoltage = 6;
  bool has_bcu_batt_internalvoltage() const;
  private:
  bool _internal_has_bcu_batt_internalvoltage() const;
  public:
  void clear_bcu_batt_internalvoltage();
  double bcu_batt_internalvoltage() const;
  void set_bcu_batt_internalvoltage(double value);
  private:
  double _internal_bcu_batt_internalvoltage() const;
  void _internal_set_bcu_batt_internalvoltage(double value);
  public:

  // optional int32 vcu_driverinfo_checksum = 8;
  bool has_vcu_driverinfo_checksum() const;
  private:
  bool _internal_has_vcu_driverinfo_checksum() const;
  public:
  void clear_vcu_driverinfo_checksum();
  int32_t vcu_driverinfo_checksum() const;
  void set_vcu_driverinfo_checksum(int32_t value);
  private:
  int32_t _internal_vcu_driverinfo_checksum() const;
  void _internal_set_vcu_driverinfo_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_powerstatus_214)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t vcu_powermode_;
    int32_t vcu_powermodevalid_;
    bool replacebatterystateindication_;
    bool forbidden_aeb_signal_;
    int32_t vcu_driverinfo_alivecounter_;
    double bcu_chargedischargecurrent_;
    double bcu_batt_internalvoltage_;
    int32_t vcu_driverinfo_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Ads_light_horn_command_310 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ads_light_horn_command_310) */ {
 public:
  inline Ads_light_horn_command_310() : Ads_light_horn_command_310(nullptr) {}
  ~Ads_light_horn_command_310() override;
  explicit PROTOBUF_CONSTEXPR Ads_light_horn_command_310(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ads_light_horn_command_310(const Ads_light_horn_command_310& from);
  Ads_light_horn_command_310(Ads_light_horn_command_310&& from) noexcept
    : Ads_light_horn_command_310() {
    *this = ::std::move(from);
  }

  inline Ads_light_horn_command_310& operator=(const Ads_light_horn_command_310& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ads_light_horn_command_310& operator=(Ads_light_horn_command_310&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ads_light_horn_command_310& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ads_light_horn_command_310* internal_default_instance() {
    return reinterpret_cast<const Ads_light_horn_command_310*>(
               &_Ads_light_horn_command_310_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ads_light_horn_command_310& a, Ads_light_horn_command_310& b) {
    a.Swap(&b);
  }
  inline void Swap(Ads_light_horn_command_310* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ads_light_horn_command_310* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ads_light_horn_command_310* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ads_light_horn_command_310>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ads_light_horn_command_310& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ads_light_horn_command_310& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ads_light_horn_command_310* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ads_light_horn_command_310";
  }
  protected:
  explicit Ads_light_horn_command_310(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnRightLightCommandFieldNumber = 1,
    kTurnLeftLightCommandFieldNumber = 2,
    kHornCommandFieldNumber = 3,
    kBeamCommandFieldNumber = 4,
    kAutoDrivercmdAlivecounterFieldNumber = 5,
    kAutoDrivercmdChecksumFieldNumber = 6,
  };
  // optional bool turn_right_light_command = 1;
  bool has_turn_right_light_command() const;
  private:
  bool _internal_has_turn_right_light_command() const;
  public:
  void clear_turn_right_light_command();
  bool turn_right_light_command() const;
  void set_turn_right_light_command(bool value);
  private:
  bool _internal_turn_right_light_command() const;
  void _internal_set_turn_right_light_command(bool value);
  public:

  // optional bool turn_left_light_command = 2;
  bool has_turn_left_light_command() const;
  private:
  bool _internal_has_turn_left_light_command() const;
  public:
  void clear_turn_left_light_command();
  bool turn_left_light_command() const;
  void set_turn_left_light_command(bool value);
  private:
  bool _internal_turn_left_light_command() const;
  void _internal_set_turn_left_light_command(bool value);
  public:

  // optional bool horn_command = 3;
  bool has_horn_command() const;
  private:
  bool _internal_has_horn_command() const;
  public:
  void clear_horn_command();
  bool horn_command() const;
  void set_horn_command(bool value);
  private:
  bool _internal_horn_command() const;
  void _internal_set_horn_command(bool value);
  public:

  // optional int32 beam_command = 4;
  bool has_beam_command() const;
  private:
  bool _internal_has_beam_command() const;
  public:
  void clear_beam_command();
  int32_t beam_command() const;
  void set_beam_command(int32_t value);
  private:
  int32_t _internal_beam_command() const;
  void _internal_set_beam_command(int32_t value);
  public:

  // optional int32 auto_drivercmd_alivecounter = 5;
  bool has_auto_drivercmd_alivecounter() const;
  private:
  bool _internal_has_auto_drivercmd_alivecounter() const;
  public:
  void clear_auto_drivercmd_alivecounter();
  int32_t auto_drivercmd_alivecounter() const;
  void set_auto_drivercmd_alivecounter(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_alivecounter() const;
  void _internal_set_auto_drivercmd_alivecounter(int32_t value);
  public:

  // optional int32 auto_drivercmd_checksum = 6;
  bool has_auto_drivercmd_checksum() const;
  private:
  bool _internal_has_auto_drivercmd_checksum() const;
  public:
  void clear_auto_drivercmd_checksum();
  int32_t auto_drivercmd_checksum() const;
  void set_auto_drivercmd_checksum(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_checksum() const;
  void _internal_set_auto_drivercmd_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ads_light_horn_command_310)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool turn_right_light_command_;
    bool turn_left_light_command_;
    bool horn_command_;
    int32_t beam_command_;
    int32_t auto_drivercmd_alivecounter_;
    int32_t auto_drivercmd_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Ads_brake_command_46 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ads_brake_command_46) */ {
 public:
  inline Ads_brake_command_46() : Ads_brake_command_46(nullptr) {}
  ~Ads_brake_command_46() override;
  explicit PROTOBUF_CONSTEXPR Ads_brake_command_46(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ads_brake_command_46(const Ads_brake_command_46& from);
  Ads_brake_command_46(Ads_brake_command_46&& from) noexcept
    : Ads_brake_command_46() {
    *this = ::std::move(from);
  }

  inline Ads_brake_command_46& operator=(const Ads_brake_command_46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ads_brake_command_46& operator=(Ads_brake_command_46&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ads_brake_command_46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ads_brake_command_46* internal_default_instance() {
    return reinterpret_cast<const Ads_brake_command_46*>(
               &_Ads_brake_command_46_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ads_brake_command_46& a, Ads_brake_command_46& b) {
    a.Swap(&b);
  }
  inline void Swap(Ads_brake_command_46* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ads_brake_command_46* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ads_brake_command_46* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ads_brake_command_46>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ads_brake_command_46& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ads_brake_command_46& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ads_brake_command_46* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ads_brake_command_46";
  }
  protected:
  explicit Ads_brake_command_46(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoBrakeCommandFieldNumber = 2,
    kDriveEnableFieldNumber = 1,
    kAutoParkingCommandFieldNumber = 3,
    kEpbRampauxiliarycommandFieldNumber = 4,
    kAutoDrivercmdAlivecounterFieldNumber = 5,
    kAutoDrivercmdChecksumFieldNumber = 6,
  };
  // optional int32 auto_brake_command = 2;
  bool has_auto_brake_command() const;
  private:
  bool _internal_has_auto_brake_command() const;
  public:
  void clear_auto_brake_command();
  int32_t auto_brake_command() const;
  void set_auto_brake_command(int32_t value);
  private:
  int32_t _internal_auto_brake_command() const;
  void _internal_set_auto_brake_command(int32_t value);
  public:

  // optional bool drive_enable = 1;
  bool has_drive_enable() const;
  private:
  bool _internal_has_drive_enable() const;
  public:
  void clear_drive_enable();
  bool drive_enable() const;
  void set_drive_enable(bool value);
  private:
  bool _internal_drive_enable() const;
  void _internal_set_drive_enable(bool value);
  public:

  // optional bool auto_parking_command = 3;
  bool has_auto_parking_command() const;
  private:
  bool _internal_has_auto_parking_command() const;
  public:
  void clear_auto_parking_command();
  bool auto_parking_command() const;
  void set_auto_parking_command(bool value);
  private:
  bool _internal_auto_parking_command() const;
  void _internal_set_auto_parking_command(bool value);
  public:

  // optional bool epb_rampauxiliarycommand = 4;
  bool has_epb_rampauxiliarycommand() const;
  private:
  bool _internal_has_epb_rampauxiliarycommand() const;
  public:
  void clear_epb_rampauxiliarycommand();
  bool epb_rampauxiliarycommand() const;
  void set_epb_rampauxiliarycommand(bool value);
  private:
  bool _internal_epb_rampauxiliarycommand() const;
  void _internal_set_epb_rampauxiliarycommand(bool value);
  public:

  // optional int32 auto_drivercmd_alivecounter = 5;
  bool has_auto_drivercmd_alivecounter() const;
  private:
  bool _internal_has_auto_drivercmd_alivecounter() const;
  public:
  void clear_auto_drivercmd_alivecounter();
  int32_t auto_drivercmd_alivecounter() const;
  void set_auto_drivercmd_alivecounter(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_alivecounter() const;
  void _internal_set_auto_drivercmd_alivecounter(int32_t value);
  public:

  // optional int32 auto_drivercmd_checksum = 6;
  bool has_auto_drivercmd_checksum() const;
  private:
  bool _internal_has_auto_drivercmd_checksum() const;
  public:
  void clear_auto_drivercmd_checksum();
  int32_t auto_drivercmd_checksum() const;
  void set_auto_drivercmd_checksum(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_checksum() const;
  void _internal_set_auto_drivercmd_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ads_brake_command_46)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t auto_brake_command_;
    bool drive_enable_;
    bool auto_parking_command_;
    bool epb_rampauxiliarycommand_;
    int32_t auto_drivercmd_alivecounter_;
    int32_t auto_drivercmd_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_brake_report_47 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_brake_report_47) */ {
 public:
  inline Vcu_brake_report_47() : Vcu_brake_report_47(nullptr) {}
  ~Vcu_brake_report_47() override;
  explicit PROTOBUF_CONSTEXPR Vcu_brake_report_47(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_brake_report_47(const Vcu_brake_report_47& from);
  Vcu_brake_report_47(Vcu_brake_report_47&& from) noexcept
    : Vcu_brake_report_47() {
    *this = ::std::move(from);
  }

  inline Vcu_brake_report_47& operator=(const Vcu_brake_report_47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_brake_report_47& operator=(Vcu_brake_report_47&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_brake_report_47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_brake_report_47* internal_default_instance() {
    return reinterpret_cast<const Vcu_brake_report_47*>(
               &_Vcu_brake_report_47_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vcu_brake_report_47& a, Vcu_brake_report_47& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_brake_report_47* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_brake_report_47* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_brake_report_47* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_brake_report_47>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_brake_report_47& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_brake_report_47& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_brake_report_47* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_brake_report_47";
  }
  protected:
  explicit Vcu_brake_report_47(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vcu_brake_report_47_Control_mode_respType Control_mode_respType;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_STANDBY =
    Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_AUTO_DRIVE =
    Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_NET_DRIVE =
    Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_REMOTE_CONTROL =
    Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_EMERGENCY_BRAKE =
    Vcu_brake_report_47_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
  static inline bool Control_mode_respType_IsValid(int value) {
    return Vcu_brake_report_47_Control_mode_respType_IsValid(value);
  }
  static constexpr Control_mode_respType Control_mode_respType_MIN =
    Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_MIN;
  static constexpr Control_mode_respType Control_mode_respType_MAX =
    Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_MAX;
  static constexpr int Control_mode_respType_ARRAYSIZE =
    Vcu_brake_report_47_Control_mode_respType_Control_mode_respType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Control_mode_respType_descriptor() {
    return Vcu_brake_report_47_Control_mode_respType_descriptor();
  }
  template<typename T>
  static inline const std::string& Control_mode_respType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Control_mode_respType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Control_mode_respType_Name.");
    return Vcu_brake_report_47_Control_mode_respType_Name(enum_t_value);
  }
  static inline bool Control_mode_respType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Control_mode_respType* value) {
    return Vcu_brake_report_47_Control_mode_respType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlModeRespFieldNumber = 2,
    kVcuRealBrakeFieldNumber = 4,
    kBrakeEnableRespFieldNumber = 1,
    kVcuRealBrakeValidFieldNumber = 3,
    kVcuRealParkingValidFieldNumber = 6,
    kRampauxiliaryindicationFieldNumber = 7,
    kVcuRealParkingStatusFieldNumber = 5,
    kVehicleslopeFieldNumber = 8,
    kVcuBrakereptAlivecounterFieldNumber = 9,
    kVcuBrakereptChecksumFieldNumber = 10,
  };
  // optional .apollo.canbus.Vcu_brake_report_47.Control_mode_respType control_mode_resp = 2;
  bool has_control_mode_resp() const;
  private:
  bool _internal_has_control_mode_resp() const;
  public:
  void clear_control_mode_resp();
  ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType control_mode_resp() const;
  void set_control_mode_resp(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType value);
  private:
  ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType _internal_control_mode_resp() const;
  void _internal_set_control_mode_resp(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType value);
  public:

  // optional int32 vcu_real_brake = 4;
  bool has_vcu_real_brake() const;
  private:
  bool _internal_has_vcu_real_brake() const;
  public:
  void clear_vcu_real_brake();
  int32_t vcu_real_brake() const;
  void set_vcu_real_brake(int32_t value);
  private:
  int32_t _internal_vcu_real_brake() const;
  void _internal_set_vcu_real_brake(int32_t value);
  public:

  // optional bool brake_enable_resp = 1;
  bool has_brake_enable_resp() const;
  private:
  bool _internal_has_brake_enable_resp() const;
  public:
  void clear_brake_enable_resp();
  bool brake_enable_resp() const;
  void set_brake_enable_resp(bool value);
  private:
  bool _internal_brake_enable_resp() const;
  void _internal_set_brake_enable_resp(bool value);
  public:

  // optional bool vcu_real_brake_valid = 3;
  bool has_vcu_real_brake_valid() const;
  private:
  bool _internal_has_vcu_real_brake_valid() const;
  public:
  void clear_vcu_real_brake_valid();
  bool vcu_real_brake_valid() const;
  void set_vcu_real_brake_valid(bool value);
  private:
  bool _internal_vcu_real_brake_valid() const;
  void _internal_set_vcu_real_brake_valid(bool value);
  public:

  // optional bool vcu_real_parking_valid = 6;
  bool has_vcu_real_parking_valid() const;
  private:
  bool _internal_has_vcu_real_parking_valid() const;
  public:
  void clear_vcu_real_parking_valid();
  bool vcu_real_parking_valid() const;
  void set_vcu_real_parking_valid(bool value);
  private:
  bool _internal_vcu_real_parking_valid() const;
  void _internal_set_vcu_real_parking_valid(bool value);
  public:

  // optional bool rampauxiliaryindication = 7;
  bool has_rampauxiliaryindication() const;
  private:
  bool _internal_has_rampauxiliaryindication() const;
  public:
  void clear_rampauxiliaryindication();
  bool rampauxiliaryindication() const;
  void set_rampauxiliaryindication(bool value);
  private:
  bool _internal_rampauxiliaryindication() const;
  void _internal_set_rampauxiliaryindication(bool value);
  public:

  // optional int32 vcu_real_parking_status = 5;
  bool has_vcu_real_parking_status() const;
  private:
  bool _internal_has_vcu_real_parking_status() const;
  public:
  void clear_vcu_real_parking_status();
  int32_t vcu_real_parking_status() const;
  void set_vcu_real_parking_status(int32_t value);
  private:
  int32_t _internal_vcu_real_parking_status() const;
  void _internal_set_vcu_real_parking_status(int32_t value);
  public:

  // optional double vehicleslope = 8;
  bool has_vehicleslope() const;
  private:
  bool _internal_has_vehicleslope() const;
  public:
  void clear_vehicleslope();
  double vehicleslope() const;
  void set_vehicleslope(double value);
  private:
  double _internal_vehicleslope() const;
  void _internal_set_vehicleslope(double value);
  public:

  // optional int32 vcu_brakerept_alivecounter = 9;
  bool has_vcu_brakerept_alivecounter() const;
  private:
  bool _internal_has_vcu_brakerept_alivecounter() const;
  public:
  void clear_vcu_brakerept_alivecounter();
  int32_t vcu_brakerept_alivecounter() const;
  void set_vcu_brakerept_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_brakerept_alivecounter() const;
  void _internal_set_vcu_brakerept_alivecounter(int32_t value);
  public:

  // optional int32 vcu_brakerept_checksum = 10;
  bool has_vcu_brakerept_checksum() const;
  private:
  bool _internal_has_vcu_brakerept_checksum() const;
  public:
  void clear_vcu_brakerept_checksum();
  int32_t vcu_brakerept_checksum() const;
  void set_vcu_brakerept_checksum(int32_t value);
  private:
  int32_t _internal_vcu_brakerept_checksum() const;
  void _internal_set_vcu_brakerept_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_brake_report_47)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int control_mode_resp_;
    int32_t vcu_real_brake_;
    bool brake_enable_resp_;
    bool vcu_real_brake_valid_;
    bool vcu_real_parking_valid_;
    bool rampauxiliaryindication_;
    int32_t vcu_real_parking_status_;
    double vehicleslope_;
    int32_t vcu_brakerept_alivecounter_;
    int32_t vcu_brakerept_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_eps_report_57 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_eps_report_57) */ {
 public:
  inline Vcu_eps_report_57() : Vcu_eps_report_57(nullptr) {}
  ~Vcu_eps_report_57() override;
  explicit PROTOBUF_CONSTEXPR Vcu_eps_report_57(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_eps_report_57(const Vcu_eps_report_57& from);
  Vcu_eps_report_57(Vcu_eps_report_57&& from) noexcept
    : Vcu_eps_report_57() {
    *this = ::std::move(from);
  }

  inline Vcu_eps_report_57& operator=(const Vcu_eps_report_57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_eps_report_57& operator=(Vcu_eps_report_57&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_eps_report_57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_eps_report_57* internal_default_instance() {
    return reinterpret_cast<const Vcu_eps_report_57*>(
               &_Vcu_eps_report_57_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Vcu_eps_report_57& a, Vcu_eps_report_57& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_eps_report_57* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_eps_report_57* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_eps_report_57* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_eps_report_57>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_eps_report_57& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_eps_report_57& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_eps_report_57* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_eps_report_57";
  }
  protected:
  explicit Vcu_eps_report_57(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vcu_eps_report_57_Control_mode_respType Control_mode_respType;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_STANDBY =
    Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_AUTO_DRIVE =
    Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_NET_DRIVE =
    Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_REMOTE_CONTROL =
    Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_EMERGENCY_BRAKE =
    Vcu_eps_report_57_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
  static inline bool Control_mode_respType_IsValid(int value) {
    return Vcu_eps_report_57_Control_mode_respType_IsValid(value);
  }
  static constexpr Control_mode_respType Control_mode_respType_MIN =
    Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_MIN;
  static constexpr Control_mode_respType Control_mode_respType_MAX =
    Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_MAX;
  static constexpr int Control_mode_respType_ARRAYSIZE =
    Vcu_eps_report_57_Control_mode_respType_Control_mode_respType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Control_mode_respType_descriptor() {
    return Vcu_eps_report_57_Control_mode_respType_descriptor();
  }
  template<typename T>
  static inline const std::string& Control_mode_respType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Control_mode_respType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Control_mode_respType_Name.");
    return Vcu_eps_report_57_Control_mode_respType_Name(enum_t_value);
  }
  static inline bool Control_mode_respType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Control_mode_respType* value) {
    return Vcu_eps_report_57_Control_mode_respType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlModeRespFieldNumber = 2,
    kDriveEnableRespFieldNumber = 1,
    kVcuEpsReportFieldNumber = 3,
    kVcuRealAngleValidFieldNumber = 5,
    kVcuTargetAngleValidFieldNumber = 6,
    kVcuRealAngleFieldNumber = 4,
    kVcuTargetAngleFieldNumber = 7,
    kVcuEpsReptAlivecounterFieldNumber = 8,
    kVcuEpsReptChecksumFieldNumber = 9,
  };
  // optional .apollo.canbus.Vcu_eps_report_57.Control_mode_respType control_mode_resp = 2;
  bool has_control_mode_resp() const;
  private:
  bool _internal_has_control_mode_resp() const;
  public:
  void clear_control_mode_resp();
  ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType control_mode_resp() const;
  void set_control_mode_resp(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType value);
  private:
  ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType _internal_control_mode_resp() const;
  void _internal_set_control_mode_resp(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType value);
  public:

  // optional bool drive_enable_resp = 1;
  bool has_drive_enable_resp() const;
  private:
  bool _internal_has_drive_enable_resp() const;
  public:
  void clear_drive_enable_resp();
  bool drive_enable_resp() const;
  void set_drive_enable_resp(bool value);
  private:
  bool _internal_drive_enable_resp() const;
  void _internal_set_drive_enable_resp(bool value);
  public:

  // optional bool vcu_eps_report = 3;
  bool has_vcu_eps_report() const;
  private:
  bool _internal_has_vcu_eps_report() const;
  public:
  void clear_vcu_eps_report();
  bool vcu_eps_report() const;
  void set_vcu_eps_report(bool value);
  private:
  bool _internal_vcu_eps_report() const;
  void _internal_set_vcu_eps_report(bool value);
  public:

  // optional bool vcu_real_angle_valid = 5;
  bool has_vcu_real_angle_valid() const;
  private:
  bool _internal_has_vcu_real_angle_valid() const;
  public:
  void clear_vcu_real_angle_valid();
  bool vcu_real_angle_valid() const;
  void set_vcu_real_angle_valid(bool value);
  private:
  bool _internal_vcu_real_angle_valid() const;
  void _internal_set_vcu_real_angle_valid(bool value);
  public:

  // optional bool vcu_target_angle_valid = 6;
  bool has_vcu_target_angle_valid() const;
  private:
  bool _internal_has_vcu_target_angle_valid() const;
  public:
  void clear_vcu_target_angle_valid();
  bool vcu_target_angle_valid() const;
  void set_vcu_target_angle_valid(bool value);
  private:
  bool _internal_vcu_target_angle_valid() const;
  void _internal_set_vcu_target_angle_valid(bool value);
  public:

  // optional double vcu_real_angle = 4;
  bool has_vcu_real_angle() const;
  private:
  bool _internal_has_vcu_real_angle() const;
  public:
  void clear_vcu_real_angle();
  double vcu_real_angle() const;
  void set_vcu_real_angle(double value);
  private:
  double _internal_vcu_real_angle() const;
  void _internal_set_vcu_real_angle(double value);
  public:

  // optional double vcu_target_angle = 7;
  bool has_vcu_target_angle() const;
  private:
  bool _internal_has_vcu_target_angle() const;
  public:
  void clear_vcu_target_angle();
  double vcu_target_angle() const;
  void set_vcu_target_angle(double value);
  private:
  double _internal_vcu_target_angle() const;
  void _internal_set_vcu_target_angle(double value);
  public:

  // optional int32 vcu_eps_rept_alivecounter = 8;
  bool has_vcu_eps_rept_alivecounter() const;
  private:
  bool _internal_has_vcu_eps_rept_alivecounter() const;
  public:
  void clear_vcu_eps_rept_alivecounter();
  int32_t vcu_eps_rept_alivecounter() const;
  void set_vcu_eps_rept_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_eps_rept_alivecounter() const;
  void _internal_set_vcu_eps_rept_alivecounter(int32_t value);
  public:

  // optional int32 vcu_eps_rept_checksum = 9;
  bool has_vcu_eps_rept_checksum() const;
  private:
  bool _internal_has_vcu_eps_rept_checksum() const;
  public:
  void clear_vcu_eps_rept_checksum();
  int32_t vcu_eps_rept_checksum() const;
  void set_vcu_eps_rept_checksum(int32_t value);
  private:
  int32_t _internal_vcu_eps_rept_checksum() const;
  void _internal_set_vcu_eps_rept_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_eps_report_57)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int control_mode_resp_;
    bool drive_enable_resp_;
    bool vcu_eps_report_;
    bool vcu_real_angle_valid_;
    bool vcu_target_angle_valid_;
    double vcu_real_angle_;
    double vcu_target_angle_;
    int32_t vcu_eps_rept_alivecounter_;
    int32_t vcu_eps_rept_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Ads_eps_command_56 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ads_eps_command_56) */ {
 public:
  inline Ads_eps_command_56() : Ads_eps_command_56(nullptr) {}
  ~Ads_eps_command_56() override;
  explicit PROTOBUF_CONSTEXPR Ads_eps_command_56(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ads_eps_command_56(const Ads_eps_command_56& from);
  Ads_eps_command_56(Ads_eps_command_56&& from) noexcept
    : Ads_eps_command_56() {
    *this = ::std::move(from);
  }

  inline Ads_eps_command_56& operator=(const Ads_eps_command_56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ads_eps_command_56& operator=(Ads_eps_command_56&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ads_eps_command_56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ads_eps_command_56* internal_default_instance() {
    return reinterpret_cast<const Ads_eps_command_56*>(
               &_Ads_eps_command_56_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ads_eps_command_56& a, Ads_eps_command_56& b) {
    a.Swap(&b);
  }
  inline void Swap(Ads_eps_command_56* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ads_eps_command_56* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ads_eps_command_56* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ads_eps_command_56>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ads_eps_command_56& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ads_eps_command_56& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ads_eps_command_56* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ads_eps_command_56";
  }
  protected:
  explicit Ads_eps_command_56(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoTargetAngleFieldNumber = 2,
    kDriveEnableFieldNumber = 1,
    kAutoDrivercmdAlivecounterFieldNumber = 3,
    kAutoDrivercmdChecksumFieldNumber = 4,
  };
  // optional double auto_target_angle = 2;
  bool has_auto_target_angle() const;
  private:
  bool _internal_has_auto_target_angle() const;
  public:
  void clear_auto_target_angle();
  double auto_target_angle() const;
  void set_auto_target_angle(double value);
  private:
  double _internal_auto_target_angle() const;
  void _internal_set_auto_target_angle(double value);
  public:

  // optional bool drive_enable = 1;
  bool has_drive_enable() const;
  private:
  bool _internal_has_drive_enable() const;
  public:
  void clear_drive_enable();
  bool drive_enable() const;
  void set_drive_enable(bool value);
  private:
  bool _internal_drive_enable() const;
  void _internal_set_drive_enable(bool value);
  public:

  // optional int32 auto_drivercmd_alivecounter = 3;
  bool has_auto_drivercmd_alivecounter() const;
  private:
  bool _internal_has_auto_drivercmd_alivecounter() const;
  public:
  void clear_auto_drivercmd_alivecounter();
  int32_t auto_drivercmd_alivecounter() const;
  void set_auto_drivercmd_alivecounter(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_alivecounter() const;
  void _internal_set_auto_drivercmd_alivecounter(int32_t value);
  public:

  // optional int32 auto_drivercmd_checksum = 4;
  bool has_auto_drivercmd_checksum() const;
  private:
  bool _internal_has_auto_drivercmd_checksum() const;
  public:
  void clear_auto_drivercmd_checksum();
  int32_t auto_drivercmd_checksum() const;
  void set_auto_drivercmd_checksum(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_checksum() const;
  void _internal_set_auto_drivercmd_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ads_eps_command_56)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double auto_target_angle_;
    bool drive_enable_;
    int32_t auto_drivercmd_alivecounter_;
    int32_t auto_drivercmd_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Ads_drive_command_50 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ads_drive_command_50) */ {
 public:
  inline Ads_drive_command_50() : Ads_drive_command_50(nullptr) {}
  ~Ads_drive_command_50() override;
  explicit PROTOBUF_CONSTEXPR Ads_drive_command_50(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ads_drive_command_50(const Ads_drive_command_50& from);
  Ads_drive_command_50(Ads_drive_command_50&& from) noexcept
    : Ads_drive_command_50() {
    *this = ::std::move(from);
  }

  inline Ads_drive_command_50& operator=(const Ads_drive_command_50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ads_drive_command_50& operator=(Ads_drive_command_50&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ads_drive_command_50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ads_drive_command_50* internal_default_instance() {
    return reinterpret_cast<const Ads_drive_command_50*>(
               &_Ads_drive_command_50_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Ads_drive_command_50& a, Ads_drive_command_50& b) {
    a.Swap(&b);
  }
  inline void Swap(Ads_drive_command_50* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ads_drive_command_50* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ads_drive_command_50* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ads_drive_command_50>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ads_drive_command_50& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ads_drive_command_50& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ads_drive_command_50* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ads_drive_command_50";
  }
  protected:
  explicit Ads_drive_command_50(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ads_drive_command_50_Auto_shift_commandType Auto_shift_commandType;
  static constexpr Auto_shift_commandType AUTO_SHIFT_COMMAND_N =
    Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_N;
  static constexpr Auto_shift_commandType AUTO_SHIFT_COMMAND_D =
    Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_D;
  static constexpr Auto_shift_commandType AUTO_SHIFT_COMMAND_R =
    Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_R;
  static constexpr Auto_shift_commandType AUTO_SHIFT_COMMAND_RESERVED =
    Ads_drive_command_50_Auto_shift_commandType_AUTO_SHIFT_COMMAND_RESERVED;
  static inline bool Auto_shift_commandType_IsValid(int value) {
    return Ads_drive_command_50_Auto_shift_commandType_IsValid(value);
  }
  static constexpr Auto_shift_commandType Auto_shift_commandType_MIN =
    Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_MIN;
  static constexpr Auto_shift_commandType Auto_shift_commandType_MAX =
    Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_MAX;
  static constexpr int Auto_shift_commandType_ARRAYSIZE =
    Ads_drive_command_50_Auto_shift_commandType_Auto_shift_commandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Auto_shift_commandType_descriptor() {
    return Ads_drive_command_50_Auto_shift_commandType_descriptor();
  }
  template<typename T>
  static inline const std::string& Auto_shift_commandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Auto_shift_commandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Auto_shift_commandType_Name.");
    return Ads_drive_command_50_Auto_shift_commandType_Name(enum_t_value);
  }
  static inline bool Auto_shift_commandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Auto_shift_commandType* value) {
    return Ads_drive_command_50_Auto_shift_commandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDriveEnableFieldNumber = 1,
    kAutoShiftCommandFieldNumber = 2,
    kAutoDriveTorqueFieldNumber = 3,
    kAutoDrivercmdAlivecounterFieldNumber = 4,
    kAutoDrivercmdChecksumFieldNumber = 5,
  };
  // optional bool drive_enable = 1;
  bool has_drive_enable() const;
  private:
  bool _internal_has_drive_enable() const;
  public:
  void clear_drive_enable();
  bool drive_enable() const;
  void set_drive_enable(bool value);
  private:
  bool _internal_drive_enable() const;
  void _internal_set_drive_enable(bool value);
  public:

  // optional .apollo.canbus.Ads_drive_command_50.Auto_shift_commandType auto_shift_command = 2;
  bool has_auto_shift_command() const;
  private:
  bool _internal_has_auto_shift_command() const;
  public:
  void clear_auto_shift_command();
  ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType auto_shift_command() const;
  void set_auto_shift_command(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType value);
  private:
  ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType _internal_auto_shift_command() const;
  void _internal_set_auto_shift_command(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType value);
  public:

  // optional double auto_drive_torque = 3;
  bool has_auto_drive_torque() const;
  private:
  bool _internal_has_auto_drive_torque() const;
  public:
  void clear_auto_drive_torque();
  double auto_drive_torque() const;
  void set_auto_drive_torque(double value);
  private:
  double _internal_auto_drive_torque() const;
  void _internal_set_auto_drive_torque(double value);
  public:

  // optional int32 auto_drivercmd_alivecounter = 4;
  bool has_auto_drivercmd_alivecounter() const;
  private:
  bool _internal_has_auto_drivercmd_alivecounter() const;
  public:
  void clear_auto_drivercmd_alivecounter();
  int32_t auto_drivercmd_alivecounter() const;
  void set_auto_drivercmd_alivecounter(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_alivecounter() const;
  void _internal_set_auto_drivercmd_alivecounter(int32_t value);
  public:

  // optional int32 auto_drivercmd_checksum = 5;
  bool has_auto_drivercmd_checksum() const;
  private:
  bool _internal_has_auto_drivercmd_checksum() const;
  public:
  void clear_auto_drivercmd_checksum();
  int32_t auto_drivercmd_checksum() const;
  void set_auto_drivercmd_checksum(int32_t value);
  private:
  int32_t _internal_auto_drivercmd_checksum() const;
  void _internal_set_auto_drivercmd_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ads_drive_command_50)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool drive_enable_;
    int auto_shift_command_;
    double auto_drive_torque_;
    int32_t auto_drivercmd_alivecounter_;
    int32_t auto_drivercmd_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_drive_report_52 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_drive_report_52) */ {
 public:
  inline Vcu_drive_report_52() : Vcu_drive_report_52(nullptr) {}
  ~Vcu_drive_report_52() override;
  explicit PROTOBUF_CONSTEXPR Vcu_drive_report_52(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_drive_report_52(const Vcu_drive_report_52& from);
  Vcu_drive_report_52(Vcu_drive_report_52&& from) noexcept
    : Vcu_drive_report_52() {
    *this = ::std::move(from);
  }

  inline Vcu_drive_report_52& operator=(const Vcu_drive_report_52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_drive_report_52& operator=(Vcu_drive_report_52&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_drive_report_52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_drive_report_52* internal_default_instance() {
    return reinterpret_cast<const Vcu_drive_report_52*>(
               &_Vcu_drive_report_52_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Vcu_drive_report_52& a, Vcu_drive_report_52& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_drive_report_52* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_drive_report_52* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_drive_report_52* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_drive_report_52>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_drive_report_52& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_drive_report_52& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_drive_report_52* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_drive_report_52";
  }
  protected:
  explicit Vcu_drive_report_52(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vcu_drive_report_52_Control_mode_respType Control_mode_respType;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_STANDBY =
    Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_AUTO_DRIVE =
    Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_NET_DRIVE =
    Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_REMOTE_CONTROL =
    Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_EMERGENCY_BRAKE =
    Vcu_drive_report_52_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
  static inline bool Control_mode_respType_IsValid(int value) {
    return Vcu_drive_report_52_Control_mode_respType_IsValid(value);
  }
  static constexpr Control_mode_respType Control_mode_respType_MIN =
    Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_MIN;
  static constexpr Control_mode_respType Control_mode_respType_MAX =
    Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_MAX;
  static constexpr int Control_mode_respType_ARRAYSIZE =
    Vcu_drive_report_52_Control_mode_respType_Control_mode_respType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Control_mode_respType_descriptor() {
    return Vcu_drive_report_52_Control_mode_respType_descriptor();
  }
  template<typename T>
  static inline const std::string& Control_mode_respType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Control_mode_respType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Control_mode_respType_Name.");
    return Vcu_drive_report_52_Control_mode_respType_Name(enum_t_value);
  }
  static inline bool Control_mode_respType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Control_mode_respType* value) {
    return Vcu_drive_report_52_Control_mode_respType_Parse(name, value);
  }

  typedef Vcu_drive_report_52_Vcu_real_shiftType Vcu_real_shiftType;
  static constexpr Vcu_real_shiftType VCU_REAL_SHIFT_N =
    Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_N;
  static constexpr Vcu_real_shiftType VCU_REAL_SHIFT_D =
    Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_D;
  static constexpr Vcu_real_shiftType VCU_REAL_SHIFT_R =
    Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_R;
  static constexpr Vcu_real_shiftType VCU_REAL_SHIFT_RESERVED =
    Vcu_drive_report_52_Vcu_real_shiftType_VCU_REAL_SHIFT_RESERVED;
  static inline bool Vcu_real_shiftType_IsValid(int value) {
    return Vcu_drive_report_52_Vcu_real_shiftType_IsValid(value);
  }
  static constexpr Vcu_real_shiftType Vcu_real_shiftType_MIN =
    Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_MIN;
  static constexpr Vcu_real_shiftType Vcu_real_shiftType_MAX =
    Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_MAX;
  static constexpr int Vcu_real_shiftType_ARRAYSIZE =
    Vcu_drive_report_52_Vcu_real_shiftType_Vcu_real_shiftType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Vcu_real_shiftType_descriptor() {
    return Vcu_drive_report_52_Vcu_real_shiftType_descriptor();
  }
  template<typename T>
  static inline const std::string& Vcu_real_shiftType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Vcu_real_shiftType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Vcu_real_shiftType_Name.");
    return Vcu_drive_report_52_Vcu_real_shiftType_Name(enum_t_value);
  }
  static inline bool Vcu_real_shiftType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Vcu_real_shiftType* value) {
    return Vcu_drive_report_52_Vcu_real_shiftType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlModeRespFieldNumber = 2,
    kVcuRealShiftFieldNumber = 3,
    kDriveEnableRespFieldNumber = 1,
    kVcuRealShiftValidFieldNumber = 4,
    kVcuRealTorqueValidFieldNumber = 5,
    kVcuLimitedtorquemodeFieldNumber = 7,
    kVcuDrivereptAlivecounterFieldNumber = 8,
    kVcuRealTorqueFieldNumber = 6,
    kVcuDrivereptChecksumFieldNumber = 9,
  };
  // optional .apollo.canbus.Vcu_drive_report_52.Control_mode_respType control_mode_resp = 2;
  bool has_control_mode_resp() const;
  private:
  bool _internal_has_control_mode_resp() const;
  public:
  void clear_control_mode_resp();
  ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType control_mode_resp() const;
  void set_control_mode_resp(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType value);
  private:
  ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType _internal_control_mode_resp() const;
  void _internal_set_control_mode_resp(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType value);
  public:

  // optional .apollo.canbus.Vcu_drive_report_52.Vcu_real_shiftType vcu_real_shift = 3;
  bool has_vcu_real_shift() const;
  private:
  bool _internal_has_vcu_real_shift() const;
  public:
  void clear_vcu_real_shift();
  ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType vcu_real_shift() const;
  void set_vcu_real_shift(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType value);
  private:
  ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType _internal_vcu_real_shift() const;
  void _internal_set_vcu_real_shift(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType value);
  public:

  // optional bool drive_enable_resp = 1;
  bool has_drive_enable_resp() const;
  private:
  bool _internal_has_drive_enable_resp() const;
  public:
  void clear_drive_enable_resp();
  bool drive_enable_resp() const;
  void set_drive_enable_resp(bool value);
  private:
  bool _internal_drive_enable_resp() const;
  void _internal_set_drive_enable_resp(bool value);
  public:

  // optional bool vcu_real_shift_valid = 4;
  bool has_vcu_real_shift_valid() const;
  private:
  bool _internal_has_vcu_real_shift_valid() const;
  public:
  void clear_vcu_real_shift_valid();
  bool vcu_real_shift_valid() const;
  void set_vcu_real_shift_valid(bool value);
  private:
  bool _internal_vcu_real_shift_valid() const;
  void _internal_set_vcu_real_shift_valid(bool value);
  public:

  // optional bool vcu_real_torque_valid = 5;
  bool has_vcu_real_torque_valid() const;
  private:
  bool _internal_has_vcu_real_torque_valid() const;
  public:
  void clear_vcu_real_torque_valid();
  bool vcu_real_torque_valid() const;
  void set_vcu_real_torque_valid(bool value);
  private:
  bool _internal_vcu_real_torque_valid() const;
  void _internal_set_vcu_real_torque_valid(bool value);
  public:

  // optional bool vcu_limitedtorquemode = 7;
  bool has_vcu_limitedtorquemode() const;
  private:
  bool _internal_has_vcu_limitedtorquemode() const;
  public:
  void clear_vcu_limitedtorquemode();
  bool vcu_limitedtorquemode() const;
  void set_vcu_limitedtorquemode(bool value);
  private:
  bool _internal_vcu_limitedtorquemode() const;
  void _internal_set_vcu_limitedtorquemode(bool value);
  public:

  // optional int32 vcu_driverept_alivecounter = 8;
  bool has_vcu_driverept_alivecounter() const;
  private:
  bool _internal_has_vcu_driverept_alivecounter() const;
  public:
  void clear_vcu_driverept_alivecounter();
  int32_t vcu_driverept_alivecounter() const;
  void set_vcu_driverept_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_driverept_alivecounter() const;
  void _internal_set_vcu_driverept_alivecounter(int32_t value);
  public:

  // optional double vcu_real_torque = 6;
  bool has_vcu_real_torque() const;
  private:
  bool _internal_has_vcu_real_torque() const;
  public:
  void clear_vcu_real_torque();
  double vcu_real_torque() const;
  void set_vcu_real_torque(double value);
  private:
  double _internal_vcu_real_torque() const;
  void _internal_set_vcu_real_torque(double value);
  public:

  // optional int32 vcu_driverept_checksum = 9;
  bool has_vcu_driverept_checksum() const;
  private:
  bool _internal_has_vcu_driverept_checksum() const;
  public:
  void clear_vcu_driverept_checksum();
  int32_t vcu_driverept_checksum() const;
  void set_vcu_driverept_checksum(int32_t value);
  private:
  int32_t _internal_vcu_driverept_checksum() const;
  void _internal_set_vcu_driverept_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_drive_report_52)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int control_mode_resp_;
    int vcu_real_shift_;
    bool drive_enable_resp_;
    bool vcu_real_shift_valid_;
    bool vcu_real_torque_valid_;
    bool vcu_limitedtorquemode_;
    int32_t vcu_driverept_alivecounter_;
    double vcu_real_torque_;
    int32_t vcu_driverept_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Ads_diagnosis_628 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ads_diagnosis_628) */ {
 public:
  inline Ads_diagnosis_628() : Ads_diagnosis_628(nullptr) {}
  ~Ads_diagnosis_628() override;
  explicit PROTOBUF_CONSTEXPR Ads_diagnosis_628(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ads_diagnosis_628(const Ads_diagnosis_628& from);
  Ads_diagnosis_628(Ads_diagnosis_628&& from) noexcept
    : Ads_diagnosis_628() {
    *this = ::std::move(from);
  }

  inline Ads_diagnosis_628& operator=(const Ads_diagnosis_628& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ads_diagnosis_628& operator=(Ads_diagnosis_628&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ads_diagnosis_628& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ads_diagnosis_628* internal_default_instance() {
    return reinterpret_cast<const Ads_diagnosis_628*>(
               &_Ads_diagnosis_628_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ads_diagnosis_628& a, Ads_diagnosis_628& b) {
    a.Swap(&b);
  }
  inline void Swap(Ads_diagnosis_628* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ads_diagnosis_628* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ads_diagnosis_628* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ads_diagnosis_628>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ads_diagnosis_628& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ads_diagnosis_628& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ads_diagnosis_628* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ads_diagnosis_628";
  }
  protected:
  explicit Ads_diagnosis_628(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultrankFieldNumber = 1,
    kAdasFaultCodeFieldNumber = 2,
    kAdasSoftwareversionFieldNumber = 3,
    kAdasHardwareversionFieldNumber = 4,
  };
  // optional int32 faultrank = 1;
  bool has_faultrank() const;
  private:
  bool _internal_has_faultrank() const;
  public:
  void clear_faultrank();
  int32_t faultrank() const;
  void set_faultrank(int32_t value);
  private:
  int32_t _internal_faultrank() const;
  void _internal_set_faultrank(int32_t value);
  public:

  // optional int32 adas_fault_code = 2;
  bool has_adas_fault_code() const;
  private:
  bool _internal_has_adas_fault_code() const;
  public:
  void clear_adas_fault_code();
  int32_t adas_fault_code() const;
  void set_adas_fault_code(int32_t value);
  private:
  int32_t _internal_adas_fault_code() const;
  void _internal_set_adas_fault_code(int32_t value);
  public:

  // optional int32 adas_softwareversion = 3;
  bool has_adas_softwareversion() const;
  private:
  bool _internal_has_adas_softwareversion() const;
  public:
  void clear_adas_softwareversion();
  int32_t adas_softwareversion() const;
  void set_adas_softwareversion(int32_t value);
  private:
  int32_t _internal_adas_softwareversion() const;
  void _internal_set_adas_softwareversion(int32_t value);
  public:

  // optional int32 adas_hardwareversion = 4;
  bool has_adas_hardwareversion() const;
  private:
  bool _internal_has_adas_hardwareversion() const;
  public:
  void clear_adas_hardwareversion();
  int32_t adas_hardwareversion() const;
  void set_adas_hardwareversion(int32_t value);
  private:
  int32_t _internal_adas_hardwareversion() const;
  void _internal_set_adas_hardwareversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ads_diagnosis_628)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t faultrank_;
    int32_t adas_fault_code_;
    int32_t adas_softwareversion_;
    int32_t adas_hardwareversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_nm_401 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_nm_401) */ {
 public:
  inline Vcu_nm_401() : Vcu_nm_401(nullptr) {}
  ~Vcu_nm_401() override;
  explicit PROTOBUF_CONSTEXPR Vcu_nm_401(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_nm_401(const Vcu_nm_401& from);
  Vcu_nm_401(Vcu_nm_401&& from) noexcept
    : Vcu_nm_401() {
    *this = ::std::move(from);
  }

  inline Vcu_nm_401& operator=(const Vcu_nm_401& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_nm_401& operator=(Vcu_nm_401&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_nm_401& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_nm_401* internal_default_instance() {
    return reinterpret_cast<const Vcu_nm_401*>(
               &_Vcu_nm_401_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Vcu_nm_401& a, Vcu_nm_401& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_nm_401* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_nm_401* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_nm_401* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_nm_401>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_nm_401& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_nm_401& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_nm_401* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_nm_401";
  }
  protected:
  explicit Vcu_nm_401(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcuSleepcommandFieldNumber = 1,
  };
  // optional bool vcu_sleepcommand = 1;
  bool has_vcu_sleepcommand() const;
  private:
  bool _internal_has_vcu_sleepcommand() const;
  public:
  void clear_vcu_sleepcommand();
  bool vcu_sleepcommand() const;
  void set_vcu_sleepcommand(bool value);
  private:
  bool _internal_vcu_sleepcommand() const;
  void _internal_set_vcu_sleepcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_nm_401)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool vcu_sleepcommand_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_vehicle_status_report_101 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_vehicle_status_report_101) */ {
 public:
  inline Vcu_vehicle_status_report_101() : Vcu_vehicle_status_report_101(nullptr) {}
  ~Vcu_vehicle_status_report_101() override;
  explicit PROTOBUF_CONSTEXPR Vcu_vehicle_status_report_101(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_vehicle_status_report_101(const Vcu_vehicle_status_report_101& from);
  Vcu_vehicle_status_report_101(Vcu_vehicle_status_report_101&& from) noexcept
    : Vcu_vehicle_status_report_101() {
    *this = ::std::move(from);
  }

  inline Vcu_vehicle_status_report_101& operator=(const Vcu_vehicle_status_report_101& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_vehicle_status_report_101& operator=(Vcu_vehicle_status_report_101&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_vehicle_status_report_101& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_vehicle_status_report_101* internal_default_instance() {
    return reinterpret_cast<const Vcu_vehicle_status_report_101*>(
               &_Vcu_vehicle_status_report_101_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Vcu_vehicle_status_report_101& a, Vcu_vehicle_status_report_101& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_vehicle_status_report_101* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_vehicle_status_report_101* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_vehicle_status_report_101* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_vehicle_status_report_101>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_vehicle_status_report_101& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_vehicle_status_report_101& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_vehicle_status_report_101* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_vehicle_status_report_101";
  }
  protected:
  explicit Vcu_vehicle_status_report_101(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vcu_vehicle_status_report_101_Control_mode_respType Control_mode_respType;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_STANDBY =
    Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_STANDBY;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_AUTO_DRIVE =
    Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_AUTO_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_NET_DRIVE =
    Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_NET_DRIVE;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_REMOTE_CONTROL =
    Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_REMOTE_CONTROL;
  static constexpr Control_mode_respType CONTROL_MODE_RESP_EMERGENCY_BRAKE =
    Vcu_vehicle_status_report_101_Control_mode_respType_CONTROL_MODE_RESP_EMERGENCY_BRAKE;
  static inline bool Control_mode_respType_IsValid(int value) {
    return Vcu_vehicle_status_report_101_Control_mode_respType_IsValid(value);
  }
  static constexpr Control_mode_respType Control_mode_respType_MIN =
    Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_MIN;
  static constexpr Control_mode_respType Control_mode_respType_MAX =
    Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_MAX;
  static constexpr int Control_mode_respType_ARRAYSIZE =
    Vcu_vehicle_status_report_101_Control_mode_respType_Control_mode_respType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Control_mode_respType_descriptor() {
    return Vcu_vehicle_status_report_101_Control_mode_respType_descriptor();
  }
  template<typename T>
  static inline const std::string& Control_mode_respType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Control_mode_respType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Control_mode_respType_Name.");
    return Vcu_vehicle_status_report_101_Control_mode_respType_Name(enum_t_value);
  }
  static inline bool Control_mode_respType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Control_mode_respType* value) {
    return Vcu_vehicle_status_report_101_Control_mode_respType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlModeRespFieldNumber = 4,
    kDriveEnableRespFieldNumber = 1,
    kVcuHighvoltagecircuitstateFieldNumber = 2,
    kVcuDcdcEnabledstatesFieldNumber = 3,
    kVcuMotorSpeedValidFieldNumber = 10,
    kVcuVehicleSpeedFieldNumber = 5,
    kVcuLowbatterychargingfunctionstFieldNumber = 6,
    kVcuDisplaySocFieldNumber = 7,
    kVcuMotorSpeedFieldNumber = 8,
    kVcuMotorDirectionFieldNumber = 9,
    kVcuStatusreptAlivecounterFieldNumber = 11,
    kVcuStatusreptChecksumFieldNumber = 12,
  };
  // optional .apollo.canbus.Vcu_vehicle_status_report_101.Control_mode_respType control_mode_resp = 4;
  bool has_control_mode_resp() const;
  private:
  bool _internal_has_control_mode_resp() const;
  public:
  void clear_control_mode_resp();
  ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType control_mode_resp() const;
  void set_control_mode_resp(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType value);
  private:
  ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType _internal_control_mode_resp() const;
  void _internal_set_control_mode_resp(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType value);
  public:

  // optional bool drive_enable_resp = 1;
  bool has_drive_enable_resp() const;
  private:
  bool _internal_has_drive_enable_resp() const;
  public:
  void clear_drive_enable_resp();
  bool drive_enable_resp() const;
  void set_drive_enable_resp(bool value);
  private:
  bool _internal_drive_enable_resp() const;
  void _internal_set_drive_enable_resp(bool value);
  public:

  // optional bool vcu_highvoltagecircuitstate = 2;
  bool has_vcu_highvoltagecircuitstate() const;
  private:
  bool _internal_has_vcu_highvoltagecircuitstate() const;
  public:
  void clear_vcu_highvoltagecircuitstate();
  bool vcu_highvoltagecircuitstate() const;
  void set_vcu_highvoltagecircuitstate(bool value);
  private:
  bool _internal_vcu_highvoltagecircuitstate() const;
  void _internal_set_vcu_highvoltagecircuitstate(bool value);
  public:

  // optional bool vcu_dcdc_enabledstates = 3;
  bool has_vcu_dcdc_enabledstates() const;
  private:
  bool _internal_has_vcu_dcdc_enabledstates() const;
  public:
  void clear_vcu_dcdc_enabledstates();
  bool vcu_dcdc_enabledstates() const;
  void set_vcu_dcdc_enabledstates(bool value);
  private:
  bool _internal_vcu_dcdc_enabledstates() const;
  void _internal_set_vcu_dcdc_enabledstates(bool value);
  public:

  // optional bool vcu_motor_speed_valid = 10;
  bool has_vcu_motor_speed_valid() const;
  private:
  bool _internal_has_vcu_motor_speed_valid() const;
  public:
  void clear_vcu_motor_speed_valid();
  bool vcu_motor_speed_valid() const;
  void set_vcu_motor_speed_valid(bool value);
  private:
  bool _internal_vcu_motor_speed_valid() const;
  void _internal_set_vcu_motor_speed_valid(bool value);
  public:

  // optional double vcu_vehicle_speed = 5;
  bool has_vcu_vehicle_speed() const;
  private:
  bool _internal_has_vcu_vehicle_speed() const;
  public:
  void clear_vcu_vehicle_speed();
  double vcu_vehicle_speed() const;
  void set_vcu_vehicle_speed(double value);
  private:
  double _internal_vcu_vehicle_speed() const;
  void _internal_set_vcu_vehicle_speed(double value);
  public:

  // optional int32 vcu_lowbatterychargingfunctionst = 6;
  bool has_vcu_lowbatterychargingfunctionst() const;
  private:
  bool _internal_has_vcu_lowbatterychargingfunctionst() const;
  public:
  void clear_vcu_lowbatterychargingfunctionst();
  int32_t vcu_lowbatterychargingfunctionst() const;
  void set_vcu_lowbatterychargingfunctionst(int32_t value);
  private:
  int32_t _internal_vcu_lowbatterychargingfunctionst() const;
  void _internal_set_vcu_lowbatterychargingfunctionst(int32_t value);
  public:

  // optional int32 vcu_display_soc = 7;
  bool has_vcu_display_soc() const;
  private:
  bool _internal_has_vcu_display_soc() const;
  public:
  void clear_vcu_display_soc();
  int32_t vcu_display_soc() const;
  void set_vcu_display_soc(int32_t value);
  private:
  int32_t _internal_vcu_display_soc() const;
  void _internal_set_vcu_display_soc(int32_t value);
  public:

  // optional double vcu_motor_speed = 8;
  bool has_vcu_motor_speed() const;
  private:
  bool _internal_has_vcu_motor_speed() const;
  public:
  void clear_vcu_motor_speed();
  double vcu_motor_speed() const;
  void set_vcu_motor_speed(double value);
  private:
  double _internal_vcu_motor_speed() const;
  void _internal_set_vcu_motor_speed(double value);
  public:

  // optional int32 vcu_motor_direction = 9;
  bool has_vcu_motor_direction() const;
  private:
  bool _internal_has_vcu_motor_direction() const;
  public:
  void clear_vcu_motor_direction();
  int32_t vcu_motor_direction() const;
  void set_vcu_motor_direction(int32_t value);
  private:
  int32_t _internal_vcu_motor_direction() const;
  void _internal_set_vcu_motor_direction(int32_t value);
  public:

  // optional int32 vcu_statusrept_alivecounter = 11;
  bool has_vcu_statusrept_alivecounter() const;
  private:
  bool _internal_has_vcu_statusrept_alivecounter() const;
  public:
  void clear_vcu_statusrept_alivecounter();
  int32_t vcu_statusrept_alivecounter() const;
  void set_vcu_statusrept_alivecounter(int32_t value);
  private:
  int32_t _internal_vcu_statusrept_alivecounter() const;
  void _internal_set_vcu_statusrept_alivecounter(int32_t value);
  public:

  // optional int32 vcu_statusrept_checksum = 12;
  bool has_vcu_statusrept_checksum() const;
  private:
  bool _internal_has_vcu_statusrept_checksum() const;
  public:
  void clear_vcu_statusrept_checksum();
  int32_t vcu_statusrept_checksum() const;
  void set_vcu_statusrept_checksum(int32_t value);
  private:
  int32_t _internal_vcu_statusrept_checksum() const;
  void _internal_set_vcu_statusrept_checksum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_vehicle_status_report_101)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int control_mode_resp_;
    bool drive_enable_resp_;
    bool vcu_highvoltagecircuitstate_;
    bool vcu_dcdc_enabledstates_;
    bool vcu_motor_speed_valid_;
    double vcu_vehicle_speed_;
    int32_t vcu_lowbatterychargingfunctionst_;
    int32_t vcu_display_soc_;
    double vcu_motor_speed_;
    int32_t vcu_motor_direction_;
    int32_t vcu_statusrept_alivecounter_;
    int32_t vcu_statusrept_checksum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Vcu_vehicle_info_response_502 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_vehicle_info_response_502) */ {
 public:
  inline Vcu_vehicle_info_response_502() : Vcu_vehicle_info_response_502(nullptr) {}
  ~Vcu_vehicle_info_response_502() override;
  explicit PROTOBUF_CONSTEXPR Vcu_vehicle_info_response_502(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_vehicle_info_response_502(const Vcu_vehicle_info_response_502& from);
  Vcu_vehicle_info_response_502(Vcu_vehicle_info_response_502&& from) noexcept
    : Vcu_vehicle_info_response_502() {
    *this = ::std::move(from);
  }

  inline Vcu_vehicle_info_response_502& operator=(const Vcu_vehicle_info_response_502& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_vehicle_info_response_502& operator=(Vcu_vehicle_info_response_502&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_vehicle_info_response_502& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_vehicle_info_response_502* internal_default_instance() {
    return reinterpret_cast<const Vcu_vehicle_info_response_502*>(
               &_Vcu_vehicle_info_response_502_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Vcu_vehicle_info_response_502& a, Vcu_vehicle_info_response_502& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_vehicle_info_response_502* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_vehicle_info_response_502* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_vehicle_info_response_502* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_vehicle_info_response_502>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_vehicle_info_response_502& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_vehicle_info_response_502& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_vehicle_info_response_502* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_vehicle_info_response_502";
  }
  protected:
  explicit Vcu_vehicle_info_response_502(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSoftwareversionIndicatiFieldNumber = 1,
    kProjectFieldNumber = 2,
    kManufacturerFieldNumber = 3,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
    kVehicleSerialNumberFieldNumber = 7,
  };
  // optional int32 vehicle_softwareversion_indicati = 1;
  bool has_vehicle_softwareversion_indicati() const;
  private:
  bool _internal_has_vehicle_softwareversion_indicati() const;
  public:
  void clear_vehicle_softwareversion_indicati();
  int32_t vehicle_softwareversion_indicati() const;
  void set_vehicle_softwareversion_indicati(int32_t value);
  private:
  int32_t _internal_vehicle_softwareversion_indicati() const;
  void _internal_set_vehicle_softwareversion_indicati(int32_t value);
  public:

  // optional int32 project = 2;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  int32_t project() const;
  void set_project(int32_t value);
  private:
  int32_t _internal_project() const;
  void _internal_set_project(int32_t value);
  public:

  // optional int32 manufacturer = 3;
  bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  void clear_manufacturer();
  int32_t manufacturer() const;
  void set_manufacturer(int32_t value);
  private:
  int32_t _internal_manufacturer() const;
  void _internal_set_manufacturer(int32_t value);
  public:

  // optional int32 year = 4;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  int32_t year() const;
  void set_year(int32_t value);
  private:
  int32_t _internal_year() const;
  void _internal_set_year(int32_t value);
  public:

  // optional int32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  int32_t month() const;
  void set_month(int32_t value);
  private:
  int32_t _internal_month() const;
  void _internal_set_month(int32_t value);
  public:

  // optional int32 day = 6;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // optional int32 vehicle_serial_number = 7;
  bool has_vehicle_serial_number() const;
  private:
  bool _internal_has_vehicle_serial_number() const;
  public:
  void clear_vehicle_serial_number();
  int32_t vehicle_serial_number() const;
  void set_vehicle_serial_number(int32_t value);
  private:
  int32_t _internal_vehicle_serial_number() const;
  void _internal_set_vehicle_serial_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_vehicle_info_response_502)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t vehicle_softwareversion_indicati_;
    int32_t project_;
    int32_t manufacturer_;
    int32_t year_;
    int32_t month_;
    int32_t day_;
    int32_t vehicle_serial_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Aeb_diagnosis1_626 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_diagnosis1_626) */ {
 public:
  inline Aeb_diagnosis1_626() : Aeb_diagnosis1_626(nullptr) {}
  ~Aeb_diagnosis1_626() override;
  explicit PROTOBUF_CONSTEXPR Aeb_diagnosis1_626(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_diagnosis1_626(const Aeb_diagnosis1_626& from);
  Aeb_diagnosis1_626(Aeb_diagnosis1_626&& from) noexcept
    : Aeb_diagnosis1_626() {
    *this = ::std::move(from);
  }

  inline Aeb_diagnosis1_626& operator=(const Aeb_diagnosis1_626& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_diagnosis1_626& operator=(Aeb_diagnosis1_626&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_diagnosis1_626& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_diagnosis1_626* internal_default_instance() {
    return reinterpret_cast<const Aeb_diagnosis1_626*>(
               &_Aeb_diagnosis1_626_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Aeb_diagnosis1_626& a, Aeb_diagnosis1_626& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_diagnosis1_626* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_diagnosis1_626* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_diagnosis1_626* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_diagnosis1_626>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_diagnosis1_626& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_diagnosis1_626& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_diagnosis1_626* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_diagnosis1_626";
  }
  protected:
  explicit Aeb_diagnosis1_626(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAebSoftwareversionFieldNumber = 1,
    kAebHardwareversionFieldNumber = 2,
  };
  // optional double aeb_softwareversion = 1;
  bool has_aeb_softwareversion() const;
  private:
  bool _internal_has_aeb_softwareversion() const;
  public:
  void clear_aeb_softwareversion();
  double aeb_softwareversion() const;
  void set_aeb_softwareversion(double value);
  private:
  double _internal_aeb_softwareversion() const;
  void _internal_set_aeb_softwareversion(double value);
  public:

  // optional double aeb_hardwareversion = 2;
  bool has_aeb_hardwareversion() const;
  private:
  bool _internal_has_aeb_hardwareversion() const;
  public:
  void clear_aeb_hardwareversion();
  double aeb_hardwareversion() const;
  void set_aeb_hardwareversion(double value);
  private:
  double _internal_aeb_hardwareversion() const;
  void _internal_set_aeb_hardwareversion(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_diagnosis1_626)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double aeb_softwareversion_;
    double aeb_hardwareversion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Aeb_diagresp_718 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_diagresp_718) */ {
 public:
  inline Aeb_diagresp_718() : Aeb_diagresp_718(nullptr) {}
  ~Aeb_diagresp_718() override;
  explicit PROTOBUF_CONSTEXPR Aeb_diagresp_718(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_diagresp_718(const Aeb_diagresp_718& from);
  Aeb_diagresp_718(Aeb_diagresp_718&& from) noexcept
    : Aeb_diagresp_718() {
    *this = ::std::move(from);
  }

  inline Aeb_diagresp_718& operator=(const Aeb_diagresp_718& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_diagresp_718& operator=(Aeb_diagresp_718&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_diagresp_718& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_diagresp_718* internal_default_instance() {
    return reinterpret_cast<const Aeb_diagresp_718*>(
               &_Aeb_diagresp_718_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Aeb_diagresp_718& a, Aeb_diagresp_718& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_diagresp_718* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_diagresp_718* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_diagresp_718* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_diagresp_718>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_diagresp_718& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_diagresp_718& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_diagresp_718* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_diagresp_718";
  }
  protected:
  explicit Aeb_diagresp_718(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAebDiagrespFieldNumber = 1,
  };
  // optional bool aeb_diagresp = 1;
  bool has_aeb_diagresp() const;
  private:
  bool _internal_has_aeb_diagresp() const;
  public:
  void clear_aeb_diagresp();
  bool aeb_diagresp() const;
  void set_aeb_diagresp(bool value);
  private:
  bool _internal_aeb_diagresp() const;
  void _internal_set_aeb_diagresp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_diagresp_718)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool aeb_diagresp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Pas_1st_data_311 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pas_1st_data_311) */ {
 public:
  inline Pas_1st_data_311() : Pas_1st_data_311(nullptr) {}
  ~Pas_1st_data_311() override;
  explicit PROTOBUF_CONSTEXPR Pas_1st_data_311(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pas_1st_data_311(const Pas_1st_data_311& from);
  Pas_1st_data_311(Pas_1st_data_311&& from) noexcept
    : Pas_1st_data_311() {
    *this = ::std::move(from);
  }

  inline Pas_1st_data_311& operator=(const Pas_1st_data_311& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pas_1st_data_311& operator=(Pas_1st_data_311&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pas_1st_data_311& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pas_1st_data_311* internal_default_instance() {
    return reinterpret_cast<const Pas_1st_data_311*>(
               &_Pas_1st_data_311_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Pas_1st_data_311& a, Pas_1st_data_311& b) {
    a.Swap(&b);
  }
  inline void Swap(Pas_1st_data_311* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pas_1st_data_311* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pas_1st_data_311* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pas_1st_data_311>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pas_1st_data_311& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pas_1st_data_311& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pas_1st_data_311* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Pas_1st_data_311";
  }
  protected:
  explicit Pas_1st_data_311(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasdistance4FieldNumber = 1,
    kPasdistance3FieldNumber = 2,
    kPasdistance2FieldNumber = 7,
    kPasdistance1FieldNumber = 8,
    kPasF1StatusFieldNumber = 3,
    kPasF2StatusFieldNumber = 4,
    kPasF3StatusFieldNumber = 5,
    kPasF4StatusFieldNumber = 6,
  };
  // optional double pasdistance4 = 1;
  bool has_pasdistance4() const;
  private:
  bool _internal_has_pasdistance4() const;
  public:
  void clear_pasdistance4();
  double pasdistance4() const;
  void set_pasdistance4(double value);
  private:
  double _internal_pasdistance4() const;
  void _internal_set_pasdistance4(double value);
  public:

  // optional double pasdistance3 = 2;
  bool has_pasdistance3() const;
  private:
  bool _internal_has_pasdistance3() const;
  public:
  void clear_pasdistance3();
  double pasdistance3() const;
  void set_pasdistance3(double value);
  private:
  double _internal_pasdistance3() const;
  void _internal_set_pasdistance3(double value);
  public:

  // optional double pasdistance2 = 7;
  bool has_pasdistance2() const;
  private:
  bool _internal_has_pasdistance2() const;
  public:
  void clear_pasdistance2();
  double pasdistance2() const;
  void set_pasdistance2(double value);
  private:
  double _internal_pasdistance2() const;
  void _internal_set_pasdistance2(double value);
  public:

  // optional double pasdistance1 = 8;
  bool has_pasdistance1() const;
  private:
  bool _internal_has_pasdistance1() const;
  public:
  void clear_pasdistance1();
  double pasdistance1() const;
  void set_pasdistance1(double value);
  private:
  double _internal_pasdistance1() const;
  void _internal_set_pasdistance1(double value);
  public:

  // optional bool pas_f1_status = 3;
  bool has_pas_f1_status() const;
  private:
  bool _internal_has_pas_f1_status() const;
  public:
  void clear_pas_f1_status();
  bool pas_f1_status() const;
  void set_pas_f1_status(bool value);
  private:
  bool _internal_pas_f1_status() const;
  void _internal_set_pas_f1_status(bool value);
  public:

  // optional bool pas_f2_status = 4;
  bool has_pas_f2_status() const;
  private:
  bool _internal_has_pas_f2_status() const;
  public:
  void clear_pas_f2_status();
  bool pas_f2_status() const;
  void set_pas_f2_status(bool value);
  private:
  bool _internal_pas_f2_status() const;
  void _internal_set_pas_f2_status(bool value);
  public:

  // optional bool pas_f3_status = 5;
  bool has_pas_f3_status() const;
  private:
  bool _internal_has_pas_f3_status() const;
  public:
  void clear_pas_f3_status();
  bool pas_f3_status() const;
  void set_pas_f3_status(bool value);
  private:
  bool _internal_pas_f3_status() const;
  void _internal_set_pas_f3_status(bool value);
  public:

  // optional bool pas_f4_status = 6;
  bool has_pas_f4_status() const;
  private:
  bool _internal_has_pas_f4_status() const;
  public:
  void clear_pas_f4_status();
  bool pas_f4_status() const;
  void set_pas_f4_status(bool value);
  private:
  bool _internal_pas_f4_status() const;
  void _internal_set_pas_f4_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pas_1st_data_311)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double pasdistance4_;
    double pasdistance3_;
    double pasdistance2_;
    double pasdistance1_;
    bool pas_f1_status_;
    bool pas_f2_status_;
    bool pas_f3_status_;
    bool pas_f4_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Pas_2nd_data_312 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pas_2nd_data_312) */ {
 public:
  inline Pas_2nd_data_312() : Pas_2nd_data_312(nullptr) {}
  ~Pas_2nd_data_312() override;
  explicit PROTOBUF_CONSTEXPR Pas_2nd_data_312(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pas_2nd_data_312(const Pas_2nd_data_312& from);
  Pas_2nd_data_312(Pas_2nd_data_312&& from) noexcept
    : Pas_2nd_data_312() {
    *this = ::std::move(from);
  }

  inline Pas_2nd_data_312& operator=(const Pas_2nd_data_312& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pas_2nd_data_312& operator=(Pas_2nd_data_312&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pas_2nd_data_312& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pas_2nd_data_312* internal_default_instance() {
    return reinterpret_cast<const Pas_2nd_data_312*>(
               &_Pas_2nd_data_312_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Pas_2nd_data_312& a, Pas_2nd_data_312& b) {
    a.Swap(&b);
  }
  inline void Swap(Pas_2nd_data_312* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pas_2nd_data_312* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pas_2nd_data_312* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pas_2nd_data_312>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pas_2nd_data_312& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pas_2nd_data_312& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pas_2nd_data_312* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Pas_2nd_data_312";
  }
  protected:
  explicit Pas_2nd_data_312(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasdistance1FieldNumber = 5,
    kPasdistance2FieldNumber = 6,
    kPasdistance3FieldNumber = 7,
    kPasdistance4FieldNumber = 8,
    kPasB1StatusFieldNumber = 1,
    kPasB2StatusFieldNumber = 2,
    kPasB3StatusFieldNumber = 3,
    kPasB4StatusFieldNumber = 4,
  };
  // optional double pasdistance1 = 5;
  bool has_pasdistance1() const;
  private:
  bool _internal_has_pasdistance1() const;
  public:
  void clear_pasdistance1();
  double pasdistance1() const;
  void set_pasdistance1(double value);
  private:
  double _internal_pasdistance1() const;
  void _internal_set_pasdistance1(double value);
  public:

  // optional double pasdistance2 = 6;
  bool has_pasdistance2() const;
  private:
  bool _internal_has_pasdistance2() const;
  public:
  void clear_pasdistance2();
  double pasdistance2() const;
  void set_pasdistance2(double value);
  private:
  double _internal_pasdistance2() const;
  void _internal_set_pasdistance2(double value);
  public:

  // optional double pasdistance3 = 7;
  bool has_pasdistance3() const;
  private:
  bool _internal_has_pasdistance3() const;
  public:
  void clear_pasdistance3();
  double pasdistance3() const;
  void set_pasdistance3(double value);
  private:
  double _internal_pasdistance3() const;
  void _internal_set_pasdistance3(double value);
  public:

  // optional double pasdistance4 = 8;
  bool has_pasdistance4() const;
  private:
  bool _internal_has_pasdistance4() const;
  public:
  void clear_pasdistance4();
  double pasdistance4() const;
  void set_pasdistance4(double value);
  private:
  double _internal_pasdistance4() const;
  void _internal_set_pasdistance4(double value);
  public:

  // optional bool pas_b1_status = 1;
  bool has_pas_b1_status() const;
  private:
  bool _internal_has_pas_b1_status() const;
  public:
  void clear_pas_b1_status();
  bool pas_b1_status() const;
  void set_pas_b1_status(bool value);
  private:
  bool _internal_pas_b1_status() const;
  void _internal_set_pas_b1_status(bool value);
  public:

  // optional bool pas_b2_status = 2;
  bool has_pas_b2_status() const;
  private:
  bool _internal_has_pas_b2_status() const;
  public:
  void clear_pas_b2_status();
  bool pas_b2_status() const;
  void set_pas_b2_status(bool value);
  private:
  bool _internal_pas_b2_status() const;
  void _internal_set_pas_b2_status(bool value);
  public:

  // optional bool pas_b3_status = 3;
  bool has_pas_b3_status() const;
  private:
  bool _internal_has_pas_b3_status() const;
  public:
  void clear_pas_b3_status();
  bool pas_b3_status() const;
  void set_pas_b3_status(bool value);
  private:
  bool _internal_pas_b3_status() const;
  void _internal_set_pas_b3_status(bool value);
  public:

  // optional bool pas_b4_status = 4;
  bool has_pas_b4_status() const;
  private:
  bool _internal_has_pas_b4_status() const;
  public:
  void clear_pas_b4_status();
  bool pas_b4_status() const;
  void set_pas_b4_status(bool value);
  private:
  bool _internal_pas_b4_status() const;
  void _internal_set_pas_b4_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pas_2nd_data_312)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double pasdistance1_;
    double pasdistance2_;
    double pasdistance3_;
    double pasdistance4_;
    bool pas_b1_status_;
    bool pas_b2_status_;
    bool pas_b3_status_;
    bool pas_b4_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Aeb_wheelimpulse_355 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_wheelimpulse_355) */ {
 public:
  inline Aeb_wheelimpulse_355() : Aeb_wheelimpulse_355(nullptr) {}
  ~Aeb_wheelimpulse_355() override;
  explicit PROTOBUF_CONSTEXPR Aeb_wheelimpulse_355(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_wheelimpulse_355(const Aeb_wheelimpulse_355& from);
  Aeb_wheelimpulse_355(Aeb_wheelimpulse_355&& from) noexcept
    : Aeb_wheelimpulse_355() {
    *this = ::std::move(from);
  }

  inline Aeb_wheelimpulse_355& operator=(const Aeb_wheelimpulse_355& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_wheelimpulse_355& operator=(Aeb_wheelimpulse_355&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_wheelimpulse_355& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_wheelimpulse_355* internal_default_instance() {
    return reinterpret_cast<const Aeb_wheelimpulse_355*>(
               &_Aeb_wheelimpulse_355_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Aeb_wheelimpulse_355& a, Aeb_wheelimpulse_355& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_wheelimpulse_355* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_wheelimpulse_355* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_wheelimpulse_355* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_wheelimpulse_355>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_wheelimpulse_355& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_wheelimpulse_355& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_wheelimpulse_355* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_wheelimpulse_355";
  }
  protected:
  explicit Aeb_wheelimpulse_355(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlimpulseFieldNumber = 1,
    kFrimpulseFieldNumber = 3,
    kRlimpulseFieldNumber = 5,
    kRrimpulseFieldNumber = 7,
    kAlivecounterFieldNumber = 9,
    kChecksumFieldNumber = 10,
    kFlimpulsevalidFieldNumber = 2,
    kFrimpulsevalidFieldNumber = 4,
    kRlimpulsevalidFieldNumber = 6,
    kRrimpulsevalidFieldNumber = 8,
  };
  // optional double flimpulse = 1;
  bool has_flimpulse() const;
  private:
  bool _internal_has_flimpulse() const;
  public:
  void clear_flimpulse();
  double flimpulse() const;
  void set_flimpulse(double value);
  private:
  double _internal_flimpulse() const;
  void _internal_set_flimpulse(double value);
  public:

  // optional double frimpulse = 3;
  bool has_frimpulse() const;
  private:
  bool _internal_has_frimpulse() const;
  public:
  void clear_frimpulse();
  double frimpulse() const;
  void set_frimpulse(double value);
  private:
  double _internal_frimpulse() const;
  void _internal_set_frimpulse(double value);
  public:

  // optional double rlimpulse = 5;
  bool has_rlimpulse() const;
  private:
  bool _internal_has_rlimpulse() const;
  public:
  void clear_rlimpulse();
  double rlimpulse() const;
  void set_rlimpulse(double value);
  private:
  double _internal_rlimpulse() const;
  void _internal_set_rlimpulse(double value);
  public:

  // optional double rrimpulse = 7;
  bool has_rrimpulse() const;
  private:
  bool _internal_has_rrimpulse() const;
  public:
  void clear_rrimpulse();
  double rrimpulse() const;
  void set_rrimpulse(double value);
  private:
  double _internal_rrimpulse() const;
  void _internal_set_rrimpulse(double value);
  public:

  // optional double alivecounter = 9;
  bool has_alivecounter() const;
  private:
  bool _internal_has_alivecounter() const;
  public:
  void clear_alivecounter();
  double alivecounter() const;
  void set_alivecounter(double value);
  private:
  double _internal_alivecounter() const;
  void _internal_set_alivecounter(double value);
  public:

  // optional double checksum = 10;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  double checksum() const;
  void set_checksum(double value);
  private:
  double _internal_checksum() const;
  void _internal_set_checksum(double value);
  public:

  // optional bool flimpulsevalid = 2;
  bool has_flimpulsevalid() const;
  private:
  bool _internal_has_flimpulsevalid() const;
  public:
  void clear_flimpulsevalid();
  bool flimpulsevalid() const;
  void set_flimpulsevalid(bool value);
  private:
  bool _internal_flimpulsevalid() const;
  void _internal_set_flimpulsevalid(bool value);
  public:

  // optional bool frimpulsevalid = 4;
  bool has_frimpulsevalid() const;
  private:
  bool _internal_has_frimpulsevalid() const;
  public:
  void clear_frimpulsevalid();
  bool frimpulsevalid() const;
  void set_frimpulsevalid(bool value);
  private:
  bool _internal_frimpulsevalid() const;
  void _internal_set_frimpulsevalid(bool value);
  public:

  // optional bool rlimpulsevalid = 6;
  bool has_rlimpulsevalid() const;
  private:
  bool _internal_has_rlimpulsevalid() const;
  public:
  void clear_rlimpulsevalid();
  bool rlimpulsevalid() const;
  void set_rlimpulsevalid(bool value);
  private:
  bool _internal_rlimpulsevalid() const;
  void _internal_set_rlimpulsevalid(bool value);
  public:

  // optional bool rrimpulsevalid = 8;
  bool has_rrimpulsevalid() const;
  private:
  bool _internal_has_rrimpulsevalid() const;
  public:
  void clear_rrimpulsevalid();
  bool rrimpulsevalid() const;
  void set_rrimpulsevalid(bool value);
  private:
  bool _internal_rrimpulsevalid() const;
  void _internal_set_rrimpulsevalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_wheelimpulse_355)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double flimpulse_;
    double frimpulse_;
    double rlimpulse_;
    double rrimpulse_;
    double alivecounter_;
    double checksum_;
    bool flimpulsevalid_;
    bool frimpulsevalid_;
    bool rlimpulsevalid_;
    bool rrimpulsevalid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Aeb_rearwheelspeed_354 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_rearwheelspeed_354) */ {
 public:
  inline Aeb_rearwheelspeed_354() : Aeb_rearwheelspeed_354(nullptr) {}
  ~Aeb_rearwheelspeed_354() override;
  explicit PROTOBUF_CONSTEXPR Aeb_rearwheelspeed_354(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_rearwheelspeed_354(const Aeb_rearwheelspeed_354& from);
  Aeb_rearwheelspeed_354(Aeb_rearwheelspeed_354&& from) noexcept
    : Aeb_rearwheelspeed_354() {
    *this = ::std::move(from);
  }

  inline Aeb_rearwheelspeed_354& operator=(const Aeb_rearwheelspeed_354& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_rearwheelspeed_354& operator=(Aeb_rearwheelspeed_354&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_rearwheelspeed_354& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_rearwheelspeed_354* internal_default_instance() {
    return reinterpret_cast<const Aeb_rearwheelspeed_354*>(
               &_Aeb_rearwheelspeed_354_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Aeb_rearwheelspeed_354& a, Aeb_rearwheelspeed_354& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_rearwheelspeed_354* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_rearwheelspeed_354* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_rearwheelspeed_354* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_rearwheelspeed_354>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_rearwheelspeed_354& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_rearwheelspeed_354& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_rearwheelspeed_354* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_rearwheelspeed_354";
  }
  protected:
  explicit Aeb_rearwheelspeed_354(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelspeedRlFieldNumber = 2,
    kWheelspeedRrFieldNumber = 4,
    kWheelspeedRlDirectFieldNumber = 5,
    kWheelspeedRrDirectFieldNumber = 6,
    kAlivecounterRearFieldNumber = 7,
    kChecksumRearFieldNumber = 8,
    kWheelspeedRlValidFieldNumber = 1,
    kWheelspeedRrValidFieldNumber = 3,
  };
  // optional double wheelspeed_rl = 2;
  bool has_wheelspeed_rl() const;
  private:
  bool _internal_has_wheelspeed_rl() const;
  public:
  void clear_wheelspeed_rl();
  double wheelspeed_rl() const;
  void set_wheelspeed_rl(double value);
  private:
  double _internal_wheelspeed_rl() const;
  void _internal_set_wheelspeed_rl(double value);
  public:

  // optional double wheelspeed_rr = 4;
  bool has_wheelspeed_rr() const;
  private:
  bool _internal_has_wheelspeed_rr() const;
  public:
  void clear_wheelspeed_rr();
  double wheelspeed_rr() const;
  void set_wheelspeed_rr(double value);
  private:
  double _internal_wheelspeed_rr() const;
  void _internal_set_wheelspeed_rr(double value);
  public:

  // optional double wheelspeed_rl_direct = 5;
  bool has_wheelspeed_rl_direct() const;
  private:
  bool _internal_has_wheelspeed_rl_direct() const;
  public:
  void clear_wheelspeed_rl_direct();
  double wheelspeed_rl_direct() const;
  void set_wheelspeed_rl_direct(double value);
  private:
  double _internal_wheelspeed_rl_direct() const;
  void _internal_set_wheelspeed_rl_direct(double value);
  public:

  // optional double wheelspeed_rr_direct = 6;
  bool has_wheelspeed_rr_direct() const;
  private:
  bool _internal_has_wheelspeed_rr_direct() const;
  public:
  void clear_wheelspeed_rr_direct();
  double wheelspeed_rr_direct() const;
  void set_wheelspeed_rr_direct(double value);
  private:
  double _internal_wheelspeed_rr_direct() const;
  void _internal_set_wheelspeed_rr_direct(double value);
  public:

  // optional double alivecounter_rear = 7;
  bool has_alivecounter_rear() const;
  private:
  bool _internal_has_alivecounter_rear() const;
  public:
  void clear_alivecounter_rear();
  double alivecounter_rear() const;
  void set_alivecounter_rear(double value);
  private:
  double _internal_alivecounter_rear() const;
  void _internal_set_alivecounter_rear(double value);
  public:

  // optional double checksum_rear = 8;
  bool has_checksum_rear() const;
  private:
  bool _internal_has_checksum_rear() const;
  public:
  void clear_checksum_rear();
  double checksum_rear() const;
  void set_checksum_rear(double value);
  private:
  double _internal_checksum_rear() const;
  void _internal_set_checksum_rear(double value);
  public:

  // optional bool wheelspeed_rl_valid = 1;
  bool has_wheelspeed_rl_valid() const;
  private:
  bool _internal_has_wheelspeed_rl_valid() const;
  public:
  void clear_wheelspeed_rl_valid();
  bool wheelspeed_rl_valid() const;
  void set_wheelspeed_rl_valid(bool value);
  private:
  bool _internal_wheelspeed_rl_valid() const;
  void _internal_set_wheelspeed_rl_valid(bool value);
  public:

  // optional bool wheelspeed_rr_valid = 3;
  bool has_wheelspeed_rr_valid() const;
  private:
  bool _internal_has_wheelspeed_rr_valid() const;
  public:
  void clear_wheelspeed_rr_valid();
  bool wheelspeed_rr_valid() const;
  void set_wheelspeed_rr_valid(bool value);
  private:
  bool _internal_wheelspeed_rr_valid() const;
  void _internal_set_wheelspeed_rr_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_rearwheelspeed_354)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double wheelspeed_rl_;
    double wheelspeed_rr_;
    double wheelspeed_rl_direct_;
    double wheelspeed_rr_direct_;
    double alivecounter_rear_;
    double checksum_rear_;
    bool wheelspeed_rl_valid_;
    bool wheelspeed_rr_valid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Aeb_frontwheelspeed_353 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aeb_frontwheelspeed_353) */ {
 public:
  inline Aeb_frontwheelspeed_353() : Aeb_frontwheelspeed_353(nullptr) {}
  ~Aeb_frontwheelspeed_353() override;
  explicit PROTOBUF_CONSTEXPR Aeb_frontwheelspeed_353(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aeb_frontwheelspeed_353(const Aeb_frontwheelspeed_353& from);
  Aeb_frontwheelspeed_353(Aeb_frontwheelspeed_353&& from) noexcept
    : Aeb_frontwheelspeed_353() {
    *this = ::std::move(from);
  }

  inline Aeb_frontwheelspeed_353& operator=(const Aeb_frontwheelspeed_353& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aeb_frontwheelspeed_353& operator=(Aeb_frontwheelspeed_353&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aeb_frontwheelspeed_353& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aeb_frontwheelspeed_353* internal_default_instance() {
    return reinterpret_cast<const Aeb_frontwheelspeed_353*>(
               &_Aeb_frontwheelspeed_353_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Aeb_frontwheelspeed_353& a, Aeb_frontwheelspeed_353& b) {
    a.Swap(&b);
  }
  inline void Swap(Aeb_frontwheelspeed_353* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aeb_frontwheelspeed_353* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aeb_frontwheelspeed_353* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aeb_frontwheelspeed_353>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aeb_frontwheelspeed_353& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Aeb_frontwheelspeed_353& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aeb_frontwheelspeed_353* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aeb_frontwheelspeed_353";
  }
  protected:
  explicit Aeb_frontwheelspeed_353(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclespeedFieldNumber = 2,
    kVehiclerealdirectFieldNumber = 3,
    kWheelspeedFlFieldNumber = 5,
    kWheelspeedFrFieldNumber = 7,
    kWheelspeedFlDirectFieldNumber = 8,
    kWheelspeedFrDirectFieldNumber = 9,
    kAlivecounterFrontFieldNumber = 10,
    kChecksumFrontFieldNumber = 11,
    kVehiclespeedvalidFieldNumber = 1,
    kWheelspeedFlValidFieldNumber = 4,
    kWheelspeedFrValidFieldNumber = 6,
  };
  // optional double vehiclespeed = 2;
  bool has_vehiclespeed() const;
  private:
  bool _internal_has_vehiclespeed() const;
  public:
  void clear_vehiclespeed();
  double vehiclespeed() const;
  void set_vehiclespeed(double value);
  private:
  double _internal_vehiclespeed() const;
  void _internal_set_vehiclespeed(double value);
  public:

  // optional double vehiclerealdirect = 3;
  bool has_vehiclerealdirect() const;
  private:
  bool _internal_has_vehiclerealdirect() const;
  public:
  void clear_vehiclerealdirect();
  double vehiclerealdirect() const;
  void set_vehiclerealdirect(double value);
  private:
  double _internal_vehiclerealdirect() const;
  void _internal_set_vehiclerealdirect(double value);
  public:

  // optional double wheelspeed_fl = 5;
  bool has_wheelspeed_fl() const;
  private:
  bool _internal_has_wheelspeed_fl() const;
  public:
  void clear_wheelspeed_fl();
  double wheelspeed_fl() const;
  void set_wheelspeed_fl(double value);
  private:
  double _internal_wheelspeed_fl() const;
  void _internal_set_wheelspeed_fl(double value);
  public:

  // optional double wheelspeed_fr = 7;
  bool has_wheelspeed_fr() const;
  private:
  bool _internal_has_wheelspeed_fr() const;
  public:
  void clear_wheelspeed_fr();
  double wheelspeed_fr() const;
  void set_wheelspeed_fr(double value);
  private:
  double _internal_wheelspeed_fr() const;
  void _internal_set_wheelspeed_fr(double value);
  public:

  // optional double wheelspeed_fl_direct = 8;
  bool has_wheelspeed_fl_direct() const;
  private:
  bool _internal_has_wheelspeed_fl_direct() const;
  public:
  void clear_wheelspeed_fl_direct();
  double wheelspeed_fl_direct() const;
  void set_wheelspeed_fl_direct(double value);
  private:
  double _internal_wheelspeed_fl_direct() const;
  void _internal_set_wheelspeed_fl_direct(double value);
  public:

  // optional double wheelspeed_fr_direct = 9;
  bool has_wheelspeed_fr_direct() const;
  private:
  bool _internal_has_wheelspeed_fr_direct() const;
  public:
  void clear_wheelspeed_fr_direct();
  double wheelspeed_fr_direct() const;
  void set_wheelspeed_fr_direct(double value);
  private:
  double _internal_wheelspeed_fr_direct() const;
  void _internal_set_wheelspeed_fr_direct(double value);
  public:

  // optional double alivecounter_front = 10;
  bool has_alivecounter_front() const;
  private:
  bool _internal_has_alivecounter_front() const;
  public:
  void clear_alivecounter_front();
  double alivecounter_front() const;
  void set_alivecounter_front(double value);
  private:
  double _internal_alivecounter_front() const;
  void _internal_set_alivecounter_front(double value);
  public:

  // optional double checksum_front = 11;
  bool has_checksum_front() const;
  private:
  bool _internal_has_checksum_front() const;
  public:
  void clear_checksum_front();
  double checksum_front() const;
  void set_checksum_front(double value);
  private:
  double _internal_checksum_front() const;
  void _internal_set_checksum_front(double value);
  public:

  // optional bool vehiclespeedvalid = 1;
  bool has_vehiclespeedvalid() const;
  private:
  bool _internal_has_vehiclespeedvalid() const;
  public:
  void clear_vehiclespeedvalid();
  bool vehiclespeedvalid() const;
  void set_vehiclespeedvalid(bool value);
  private:
  bool _internal_vehiclespeedvalid() const;
  void _internal_set_vehiclespeedvalid(bool value);
  public:

  // optional bool wheelspeed_fl_valid = 4;
  bool has_wheelspeed_fl_valid() const;
  private:
  bool _internal_has_wheelspeed_fl_valid() const;
  public:
  void clear_wheelspeed_fl_valid();
  bool wheelspeed_fl_valid() const;
  void set_wheelspeed_fl_valid(bool value);
  private:
  bool _internal_wheelspeed_fl_valid() const;
  void _internal_set_wheelspeed_fl_valid(bool value);
  public:

  // optional bool wheelspeed_fr_valid = 6;
  bool has_wheelspeed_fr_valid() const;
  private:
  bool _internal_has_wheelspeed_fr_valid() const;
  public:
  void clear_wheelspeed_fr_valid();
  bool wheelspeed_fr_valid() const;
  void set_wheelspeed_fr_valid(bool value);
  private:
  bool _internal_wheelspeed_fr_valid() const;
  void _internal_set_wheelspeed_fr_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aeb_frontwheelspeed_353)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double vehiclespeed_;
    double vehiclerealdirect_;
    double wheelspeed_fl_;
    double wheelspeed_fr_;
    double wheelspeed_fl_direct_;
    double wheelspeed_fr_direct_;
    double alivecounter_front_;
    double checksum_front_;
    bool vehiclespeedvalid_;
    bool wheelspeed_fl_valid_;
    bool wheelspeed_fr_valid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// -------------------------------------------------------------------

class Neolix_edu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Neolix_edu) */ {
 public:
  inline Neolix_edu() : Neolix_edu(nullptr) {}
  ~Neolix_edu() override;
  explicit PROTOBUF_CONSTEXPR Neolix_edu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Neolix_edu(const Neolix_edu& from);
  Neolix_edu(Neolix_edu&& from) noexcept
    : Neolix_edu() {
    *this = ::std::move(from);
  }

  inline Neolix_edu& operator=(const Neolix_edu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neolix_edu& operator=(Neolix_edu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Neolix_edu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Neolix_edu* internal_default_instance() {
    return reinterpret_cast<const Neolix_edu*>(
               &_Neolix_edu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Neolix_edu& a, Neolix_edu& b) {
    a.Swap(&b);
  }
  inline void Swap(Neolix_edu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neolix_edu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Neolix_edu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Neolix_edu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Neolix_edu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Neolix_edu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neolix_edu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Neolix_edu";
  }
  protected:
  explicit Neolix_edu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAebSystemstate11FieldNumber = 1,
    kVcuVehicleFaultResponse201FieldNumber = 2,
    kVcuPowerstatus214FieldNumber = 3,
    kAdsLightHornCommand310FieldNumber = 4,
    kAdsBrakeCommand46FieldNumber = 5,
    kVcuBrakeReport47FieldNumber = 6,
    kVcuEpsReport57FieldNumber = 7,
    kAdsEpsCommand56FieldNumber = 8,
    kAdsDriveCommand50FieldNumber = 9,
    kVcuDriveReport52FieldNumber = 10,
    kAdsDiagnosis628FieldNumber = 11,
    kVcuNm401FieldNumber = 12,
    kVcuVehicleStatusReport101FieldNumber = 13,
    kVcuVehicleInfoResponse502FieldNumber = 14,
    kAebDiagnosis1626FieldNumber = 15,
    kAebDiagresp718FieldNumber = 16,
    kPas1StData311FieldNumber = 17,
    kPas2NdData312FieldNumber = 18,
    kAebWheelimpulse355FieldNumber = 19,
    kAebRearwheelspeed354FieldNumber = 20,
    kAebFrontwheelspeed353FieldNumber = 21,
  };
  // optional .apollo.canbus.Aeb_systemstate_11 aeb_systemstate_11 = 1;
  bool has_aeb_systemstate_11() const;
  private:
  bool _internal_has_aeb_systemstate_11() const;
  public:
  void clear_aeb_systemstate_11();
  const ::apollo::canbus::Aeb_systemstate_11& aeb_systemstate_11() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_systemstate_11* release_aeb_systemstate_11();
  ::apollo::canbus::Aeb_systemstate_11* mutable_aeb_systemstate_11();
  void set_allocated_aeb_systemstate_11(::apollo::canbus::Aeb_systemstate_11* aeb_systemstate_11);
  private:
  const ::apollo::canbus::Aeb_systemstate_11& _internal_aeb_systemstate_11() const;
  ::apollo::canbus::Aeb_systemstate_11* _internal_mutable_aeb_systemstate_11();
  public:
  void unsafe_arena_set_allocated_aeb_systemstate_11(
      ::apollo::canbus::Aeb_systemstate_11* aeb_systemstate_11);
  ::apollo::canbus::Aeb_systemstate_11* unsafe_arena_release_aeb_systemstate_11();

  // optional .apollo.canbus.Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 = 2;
  bool has_vcu_vehicle_fault_response_201() const;
  private:
  bool _internal_has_vcu_vehicle_fault_response_201() const;
  public:
  void clear_vcu_vehicle_fault_response_201();
  const ::apollo::canbus::Vcu_vehicle_fault_response_201& vcu_vehicle_fault_response_201() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_vehicle_fault_response_201* release_vcu_vehicle_fault_response_201();
  ::apollo::canbus::Vcu_vehicle_fault_response_201* mutable_vcu_vehicle_fault_response_201();
  void set_allocated_vcu_vehicle_fault_response_201(::apollo::canbus::Vcu_vehicle_fault_response_201* vcu_vehicle_fault_response_201);
  private:
  const ::apollo::canbus::Vcu_vehicle_fault_response_201& _internal_vcu_vehicle_fault_response_201() const;
  ::apollo::canbus::Vcu_vehicle_fault_response_201* _internal_mutable_vcu_vehicle_fault_response_201();
  public:
  void unsafe_arena_set_allocated_vcu_vehicle_fault_response_201(
      ::apollo::canbus::Vcu_vehicle_fault_response_201* vcu_vehicle_fault_response_201);
  ::apollo::canbus::Vcu_vehicle_fault_response_201* unsafe_arena_release_vcu_vehicle_fault_response_201();

  // optional .apollo.canbus.Vcu_powerstatus_214 vcu_powerstatus_214 = 3;
  bool has_vcu_powerstatus_214() const;
  private:
  bool _internal_has_vcu_powerstatus_214() const;
  public:
  void clear_vcu_powerstatus_214();
  const ::apollo::canbus::Vcu_powerstatus_214& vcu_powerstatus_214() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_powerstatus_214* release_vcu_powerstatus_214();
  ::apollo::canbus::Vcu_powerstatus_214* mutable_vcu_powerstatus_214();
  void set_allocated_vcu_powerstatus_214(::apollo::canbus::Vcu_powerstatus_214* vcu_powerstatus_214);
  private:
  const ::apollo::canbus::Vcu_powerstatus_214& _internal_vcu_powerstatus_214() const;
  ::apollo::canbus::Vcu_powerstatus_214* _internal_mutable_vcu_powerstatus_214();
  public:
  void unsafe_arena_set_allocated_vcu_powerstatus_214(
      ::apollo::canbus::Vcu_powerstatus_214* vcu_powerstatus_214);
  ::apollo::canbus::Vcu_powerstatus_214* unsafe_arena_release_vcu_powerstatus_214();

  // optional .apollo.canbus.Ads_light_horn_command_310 ads_light_horn_command_310 = 4;
  bool has_ads_light_horn_command_310() const;
  private:
  bool _internal_has_ads_light_horn_command_310() const;
  public:
  void clear_ads_light_horn_command_310();
  const ::apollo::canbus::Ads_light_horn_command_310& ads_light_horn_command_310() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ads_light_horn_command_310* release_ads_light_horn_command_310();
  ::apollo::canbus::Ads_light_horn_command_310* mutable_ads_light_horn_command_310();
  void set_allocated_ads_light_horn_command_310(::apollo::canbus::Ads_light_horn_command_310* ads_light_horn_command_310);
  private:
  const ::apollo::canbus::Ads_light_horn_command_310& _internal_ads_light_horn_command_310() const;
  ::apollo::canbus::Ads_light_horn_command_310* _internal_mutable_ads_light_horn_command_310();
  public:
  void unsafe_arena_set_allocated_ads_light_horn_command_310(
      ::apollo::canbus::Ads_light_horn_command_310* ads_light_horn_command_310);
  ::apollo::canbus::Ads_light_horn_command_310* unsafe_arena_release_ads_light_horn_command_310();

  // optional .apollo.canbus.Ads_brake_command_46 ads_brake_command_46 = 5;
  bool has_ads_brake_command_46() const;
  private:
  bool _internal_has_ads_brake_command_46() const;
  public:
  void clear_ads_brake_command_46();
  const ::apollo::canbus::Ads_brake_command_46& ads_brake_command_46() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ads_brake_command_46* release_ads_brake_command_46();
  ::apollo::canbus::Ads_brake_command_46* mutable_ads_brake_command_46();
  void set_allocated_ads_brake_command_46(::apollo::canbus::Ads_brake_command_46* ads_brake_command_46);
  private:
  const ::apollo::canbus::Ads_brake_command_46& _internal_ads_brake_command_46() const;
  ::apollo::canbus::Ads_brake_command_46* _internal_mutable_ads_brake_command_46();
  public:
  void unsafe_arena_set_allocated_ads_brake_command_46(
      ::apollo::canbus::Ads_brake_command_46* ads_brake_command_46);
  ::apollo::canbus::Ads_brake_command_46* unsafe_arena_release_ads_brake_command_46();

  // optional .apollo.canbus.Vcu_brake_report_47 vcu_brake_report_47 = 6;
  bool has_vcu_brake_report_47() const;
  private:
  bool _internal_has_vcu_brake_report_47() const;
  public:
  void clear_vcu_brake_report_47();
  const ::apollo::canbus::Vcu_brake_report_47& vcu_brake_report_47() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_brake_report_47* release_vcu_brake_report_47();
  ::apollo::canbus::Vcu_brake_report_47* mutable_vcu_brake_report_47();
  void set_allocated_vcu_brake_report_47(::apollo::canbus::Vcu_brake_report_47* vcu_brake_report_47);
  private:
  const ::apollo::canbus::Vcu_brake_report_47& _internal_vcu_brake_report_47() const;
  ::apollo::canbus::Vcu_brake_report_47* _internal_mutable_vcu_brake_report_47();
  public:
  void unsafe_arena_set_allocated_vcu_brake_report_47(
      ::apollo::canbus::Vcu_brake_report_47* vcu_brake_report_47);
  ::apollo::canbus::Vcu_brake_report_47* unsafe_arena_release_vcu_brake_report_47();

  // optional .apollo.canbus.Vcu_eps_report_57 vcu_eps_report_57 = 7;
  bool has_vcu_eps_report_57() const;
  private:
  bool _internal_has_vcu_eps_report_57() const;
  public:
  void clear_vcu_eps_report_57();
  const ::apollo::canbus::Vcu_eps_report_57& vcu_eps_report_57() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_eps_report_57* release_vcu_eps_report_57();
  ::apollo::canbus::Vcu_eps_report_57* mutable_vcu_eps_report_57();
  void set_allocated_vcu_eps_report_57(::apollo::canbus::Vcu_eps_report_57* vcu_eps_report_57);
  private:
  const ::apollo::canbus::Vcu_eps_report_57& _internal_vcu_eps_report_57() const;
  ::apollo::canbus::Vcu_eps_report_57* _internal_mutable_vcu_eps_report_57();
  public:
  void unsafe_arena_set_allocated_vcu_eps_report_57(
      ::apollo::canbus::Vcu_eps_report_57* vcu_eps_report_57);
  ::apollo::canbus::Vcu_eps_report_57* unsafe_arena_release_vcu_eps_report_57();

  // optional .apollo.canbus.Ads_eps_command_56 ads_eps_command_56 = 8;
  bool has_ads_eps_command_56() const;
  private:
  bool _internal_has_ads_eps_command_56() const;
  public:
  void clear_ads_eps_command_56();
  const ::apollo::canbus::Ads_eps_command_56& ads_eps_command_56() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ads_eps_command_56* release_ads_eps_command_56();
  ::apollo::canbus::Ads_eps_command_56* mutable_ads_eps_command_56();
  void set_allocated_ads_eps_command_56(::apollo::canbus::Ads_eps_command_56* ads_eps_command_56);
  private:
  const ::apollo::canbus::Ads_eps_command_56& _internal_ads_eps_command_56() const;
  ::apollo::canbus::Ads_eps_command_56* _internal_mutable_ads_eps_command_56();
  public:
  void unsafe_arena_set_allocated_ads_eps_command_56(
      ::apollo::canbus::Ads_eps_command_56* ads_eps_command_56);
  ::apollo::canbus::Ads_eps_command_56* unsafe_arena_release_ads_eps_command_56();

  // optional .apollo.canbus.Ads_drive_command_50 ads_drive_command_50 = 9;
  bool has_ads_drive_command_50() const;
  private:
  bool _internal_has_ads_drive_command_50() const;
  public:
  void clear_ads_drive_command_50();
  const ::apollo::canbus::Ads_drive_command_50& ads_drive_command_50() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ads_drive_command_50* release_ads_drive_command_50();
  ::apollo::canbus::Ads_drive_command_50* mutable_ads_drive_command_50();
  void set_allocated_ads_drive_command_50(::apollo::canbus::Ads_drive_command_50* ads_drive_command_50);
  private:
  const ::apollo::canbus::Ads_drive_command_50& _internal_ads_drive_command_50() const;
  ::apollo::canbus::Ads_drive_command_50* _internal_mutable_ads_drive_command_50();
  public:
  void unsafe_arena_set_allocated_ads_drive_command_50(
      ::apollo::canbus::Ads_drive_command_50* ads_drive_command_50);
  ::apollo::canbus::Ads_drive_command_50* unsafe_arena_release_ads_drive_command_50();

  // optional .apollo.canbus.Vcu_drive_report_52 vcu_drive_report_52 = 10;
  bool has_vcu_drive_report_52() const;
  private:
  bool _internal_has_vcu_drive_report_52() const;
  public:
  void clear_vcu_drive_report_52();
  const ::apollo::canbus::Vcu_drive_report_52& vcu_drive_report_52() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_drive_report_52* release_vcu_drive_report_52();
  ::apollo::canbus::Vcu_drive_report_52* mutable_vcu_drive_report_52();
  void set_allocated_vcu_drive_report_52(::apollo::canbus::Vcu_drive_report_52* vcu_drive_report_52);
  private:
  const ::apollo::canbus::Vcu_drive_report_52& _internal_vcu_drive_report_52() const;
  ::apollo::canbus::Vcu_drive_report_52* _internal_mutable_vcu_drive_report_52();
  public:
  void unsafe_arena_set_allocated_vcu_drive_report_52(
      ::apollo::canbus::Vcu_drive_report_52* vcu_drive_report_52);
  ::apollo::canbus::Vcu_drive_report_52* unsafe_arena_release_vcu_drive_report_52();

  // optional .apollo.canbus.Ads_diagnosis_628 ads_diagnosis_628 = 11;
  bool has_ads_diagnosis_628() const;
  private:
  bool _internal_has_ads_diagnosis_628() const;
  public:
  void clear_ads_diagnosis_628();
  const ::apollo::canbus::Ads_diagnosis_628& ads_diagnosis_628() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ads_diagnosis_628* release_ads_diagnosis_628();
  ::apollo::canbus::Ads_diagnosis_628* mutable_ads_diagnosis_628();
  void set_allocated_ads_diagnosis_628(::apollo::canbus::Ads_diagnosis_628* ads_diagnosis_628);
  private:
  const ::apollo::canbus::Ads_diagnosis_628& _internal_ads_diagnosis_628() const;
  ::apollo::canbus::Ads_diagnosis_628* _internal_mutable_ads_diagnosis_628();
  public:
  void unsafe_arena_set_allocated_ads_diagnosis_628(
      ::apollo::canbus::Ads_diagnosis_628* ads_diagnosis_628);
  ::apollo::canbus::Ads_diagnosis_628* unsafe_arena_release_ads_diagnosis_628();

  // optional .apollo.canbus.Vcu_nm_401 vcu_nm_401 = 12;
  bool has_vcu_nm_401() const;
  private:
  bool _internal_has_vcu_nm_401() const;
  public:
  void clear_vcu_nm_401();
  const ::apollo::canbus::Vcu_nm_401& vcu_nm_401() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_nm_401* release_vcu_nm_401();
  ::apollo::canbus::Vcu_nm_401* mutable_vcu_nm_401();
  void set_allocated_vcu_nm_401(::apollo::canbus::Vcu_nm_401* vcu_nm_401);
  private:
  const ::apollo::canbus::Vcu_nm_401& _internal_vcu_nm_401() const;
  ::apollo::canbus::Vcu_nm_401* _internal_mutable_vcu_nm_401();
  public:
  void unsafe_arena_set_allocated_vcu_nm_401(
      ::apollo::canbus::Vcu_nm_401* vcu_nm_401);
  ::apollo::canbus::Vcu_nm_401* unsafe_arena_release_vcu_nm_401();

  // optional .apollo.canbus.Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 = 13;
  bool has_vcu_vehicle_status_report_101() const;
  private:
  bool _internal_has_vcu_vehicle_status_report_101() const;
  public:
  void clear_vcu_vehicle_status_report_101();
  const ::apollo::canbus::Vcu_vehicle_status_report_101& vcu_vehicle_status_report_101() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_vehicle_status_report_101* release_vcu_vehicle_status_report_101();
  ::apollo::canbus::Vcu_vehicle_status_report_101* mutable_vcu_vehicle_status_report_101();
  void set_allocated_vcu_vehicle_status_report_101(::apollo::canbus::Vcu_vehicle_status_report_101* vcu_vehicle_status_report_101);
  private:
  const ::apollo::canbus::Vcu_vehicle_status_report_101& _internal_vcu_vehicle_status_report_101() const;
  ::apollo::canbus::Vcu_vehicle_status_report_101* _internal_mutable_vcu_vehicle_status_report_101();
  public:
  void unsafe_arena_set_allocated_vcu_vehicle_status_report_101(
      ::apollo::canbus::Vcu_vehicle_status_report_101* vcu_vehicle_status_report_101);
  ::apollo::canbus::Vcu_vehicle_status_report_101* unsafe_arena_release_vcu_vehicle_status_report_101();

  // optional .apollo.canbus.Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 = 14;
  bool has_vcu_vehicle_info_response_502() const;
  private:
  bool _internal_has_vcu_vehicle_info_response_502() const;
  public:
  void clear_vcu_vehicle_info_response_502();
  const ::apollo::canbus::Vcu_vehicle_info_response_502& vcu_vehicle_info_response_502() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_vehicle_info_response_502* release_vcu_vehicle_info_response_502();
  ::apollo::canbus::Vcu_vehicle_info_response_502* mutable_vcu_vehicle_info_response_502();
  void set_allocated_vcu_vehicle_info_response_502(::apollo::canbus::Vcu_vehicle_info_response_502* vcu_vehicle_info_response_502);
  private:
  const ::apollo::canbus::Vcu_vehicle_info_response_502& _internal_vcu_vehicle_info_response_502() const;
  ::apollo::canbus::Vcu_vehicle_info_response_502* _internal_mutable_vcu_vehicle_info_response_502();
  public:
  void unsafe_arena_set_allocated_vcu_vehicle_info_response_502(
      ::apollo::canbus::Vcu_vehicle_info_response_502* vcu_vehicle_info_response_502);
  ::apollo::canbus::Vcu_vehicle_info_response_502* unsafe_arena_release_vcu_vehicle_info_response_502();

  // optional .apollo.canbus.Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;
  bool has_aeb_diagnosis1_626() const;
  private:
  bool _internal_has_aeb_diagnosis1_626() const;
  public:
  void clear_aeb_diagnosis1_626();
  const ::apollo::canbus::Aeb_diagnosis1_626& aeb_diagnosis1_626() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_diagnosis1_626* release_aeb_diagnosis1_626();
  ::apollo::canbus::Aeb_diagnosis1_626* mutable_aeb_diagnosis1_626();
  void set_allocated_aeb_diagnosis1_626(::apollo::canbus::Aeb_diagnosis1_626* aeb_diagnosis1_626);
  private:
  const ::apollo::canbus::Aeb_diagnosis1_626& _internal_aeb_diagnosis1_626() const;
  ::apollo::canbus::Aeb_diagnosis1_626* _internal_mutable_aeb_diagnosis1_626();
  public:
  void unsafe_arena_set_allocated_aeb_diagnosis1_626(
      ::apollo::canbus::Aeb_diagnosis1_626* aeb_diagnosis1_626);
  ::apollo::canbus::Aeb_diagnosis1_626* unsafe_arena_release_aeb_diagnosis1_626();

  // optional .apollo.canbus.Aeb_diagresp_718 aeb_diagresp_718 = 16;
  bool has_aeb_diagresp_718() const;
  private:
  bool _internal_has_aeb_diagresp_718() const;
  public:
  void clear_aeb_diagresp_718();
  const ::apollo::canbus::Aeb_diagresp_718& aeb_diagresp_718() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_diagresp_718* release_aeb_diagresp_718();
  ::apollo::canbus::Aeb_diagresp_718* mutable_aeb_diagresp_718();
  void set_allocated_aeb_diagresp_718(::apollo::canbus::Aeb_diagresp_718* aeb_diagresp_718);
  private:
  const ::apollo::canbus::Aeb_diagresp_718& _internal_aeb_diagresp_718() const;
  ::apollo::canbus::Aeb_diagresp_718* _internal_mutable_aeb_diagresp_718();
  public:
  void unsafe_arena_set_allocated_aeb_diagresp_718(
      ::apollo::canbus::Aeb_diagresp_718* aeb_diagresp_718);
  ::apollo::canbus::Aeb_diagresp_718* unsafe_arena_release_aeb_diagresp_718();

  // optional .apollo.canbus.Pas_1st_data_311 pas_1st_data_311 = 17;
  bool has_pas_1st_data_311() const;
  private:
  bool _internal_has_pas_1st_data_311() const;
  public:
  void clear_pas_1st_data_311();
  const ::apollo::canbus::Pas_1st_data_311& pas_1st_data_311() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Pas_1st_data_311* release_pas_1st_data_311();
  ::apollo::canbus::Pas_1st_data_311* mutable_pas_1st_data_311();
  void set_allocated_pas_1st_data_311(::apollo::canbus::Pas_1st_data_311* pas_1st_data_311);
  private:
  const ::apollo::canbus::Pas_1st_data_311& _internal_pas_1st_data_311() const;
  ::apollo::canbus::Pas_1st_data_311* _internal_mutable_pas_1st_data_311();
  public:
  void unsafe_arena_set_allocated_pas_1st_data_311(
      ::apollo::canbus::Pas_1st_data_311* pas_1st_data_311);
  ::apollo::canbus::Pas_1st_data_311* unsafe_arena_release_pas_1st_data_311();

  // optional .apollo.canbus.Pas_2nd_data_312 pas_2nd_data_312 = 18;
  bool has_pas_2nd_data_312() const;
  private:
  bool _internal_has_pas_2nd_data_312() const;
  public:
  void clear_pas_2nd_data_312();
  const ::apollo::canbus::Pas_2nd_data_312& pas_2nd_data_312() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Pas_2nd_data_312* release_pas_2nd_data_312();
  ::apollo::canbus::Pas_2nd_data_312* mutable_pas_2nd_data_312();
  void set_allocated_pas_2nd_data_312(::apollo::canbus::Pas_2nd_data_312* pas_2nd_data_312);
  private:
  const ::apollo::canbus::Pas_2nd_data_312& _internal_pas_2nd_data_312() const;
  ::apollo::canbus::Pas_2nd_data_312* _internal_mutable_pas_2nd_data_312();
  public:
  void unsafe_arena_set_allocated_pas_2nd_data_312(
      ::apollo::canbus::Pas_2nd_data_312* pas_2nd_data_312);
  ::apollo::canbus::Pas_2nd_data_312* unsafe_arena_release_pas_2nd_data_312();

  // optional .apollo.canbus.Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;
  bool has_aeb_wheelimpulse_355() const;
  private:
  bool _internal_has_aeb_wheelimpulse_355() const;
  public:
  void clear_aeb_wheelimpulse_355();
  const ::apollo::canbus::Aeb_wheelimpulse_355& aeb_wheelimpulse_355() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_wheelimpulse_355* release_aeb_wheelimpulse_355();
  ::apollo::canbus::Aeb_wheelimpulse_355* mutable_aeb_wheelimpulse_355();
  void set_allocated_aeb_wheelimpulse_355(::apollo::canbus::Aeb_wheelimpulse_355* aeb_wheelimpulse_355);
  private:
  const ::apollo::canbus::Aeb_wheelimpulse_355& _internal_aeb_wheelimpulse_355() const;
  ::apollo::canbus::Aeb_wheelimpulse_355* _internal_mutable_aeb_wheelimpulse_355();
  public:
  void unsafe_arena_set_allocated_aeb_wheelimpulse_355(
      ::apollo::canbus::Aeb_wheelimpulse_355* aeb_wheelimpulse_355);
  ::apollo::canbus::Aeb_wheelimpulse_355* unsafe_arena_release_aeb_wheelimpulse_355();

  // optional .apollo.canbus.Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 = 20;
  bool has_aeb_rearwheelspeed_354() const;
  private:
  bool _internal_has_aeb_rearwheelspeed_354() const;
  public:
  void clear_aeb_rearwheelspeed_354();
  const ::apollo::canbus::Aeb_rearwheelspeed_354& aeb_rearwheelspeed_354() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_rearwheelspeed_354* release_aeb_rearwheelspeed_354();
  ::apollo::canbus::Aeb_rearwheelspeed_354* mutable_aeb_rearwheelspeed_354();
  void set_allocated_aeb_rearwheelspeed_354(::apollo::canbus::Aeb_rearwheelspeed_354* aeb_rearwheelspeed_354);
  private:
  const ::apollo::canbus::Aeb_rearwheelspeed_354& _internal_aeb_rearwheelspeed_354() const;
  ::apollo::canbus::Aeb_rearwheelspeed_354* _internal_mutable_aeb_rearwheelspeed_354();
  public:
  void unsafe_arena_set_allocated_aeb_rearwheelspeed_354(
      ::apollo::canbus::Aeb_rearwheelspeed_354* aeb_rearwheelspeed_354);
  ::apollo::canbus::Aeb_rearwheelspeed_354* unsafe_arena_release_aeb_rearwheelspeed_354();

  // optional .apollo.canbus.Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 = 21;
  bool has_aeb_frontwheelspeed_353() const;
  private:
  bool _internal_has_aeb_frontwheelspeed_353() const;
  public:
  void clear_aeb_frontwheelspeed_353();
  const ::apollo::canbus::Aeb_frontwheelspeed_353& aeb_frontwheelspeed_353() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Aeb_frontwheelspeed_353* release_aeb_frontwheelspeed_353();
  ::apollo::canbus::Aeb_frontwheelspeed_353* mutable_aeb_frontwheelspeed_353();
  void set_allocated_aeb_frontwheelspeed_353(::apollo::canbus::Aeb_frontwheelspeed_353* aeb_frontwheelspeed_353);
  private:
  const ::apollo::canbus::Aeb_frontwheelspeed_353& _internal_aeb_frontwheelspeed_353() const;
  ::apollo::canbus::Aeb_frontwheelspeed_353* _internal_mutable_aeb_frontwheelspeed_353();
  public:
  void unsafe_arena_set_allocated_aeb_frontwheelspeed_353(
      ::apollo::canbus::Aeb_frontwheelspeed_353* aeb_frontwheelspeed_353);
  ::apollo::canbus::Aeb_frontwheelspeed_353* unsafe_arena_release_aeb_frontwheelspeed_353();

  // @@protoc_insertion_point(class_scope:apollo.canbus.Neolix_edu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::canbus::Aeb_systemstate_11* aeb_systemstate_11_;
    ::apollo::canbus::Vcu_vehicle_fault_response_201* vcu_vehicle_fault_response_201_;
    ::apollo::canbus::Vcu_powerstatus_214* vcu_powerstatus_214_;
    ::apollo::canbus::Ads_light_horn_command_310* ads_light_horn_command_310_;
    ::apollo::canbus::Ads_brake_command_46* ads_brake_command_46_;
    ::apollo::canbus::Vcu_brake_report_47* vcu_brake_report_47_;
    ::apollo::canbus::Vcu_eps_report_57* vcu_eps_report_57_;
    ::apollo::canbus::Ads_eps_command_56* ads_eps_command_56_;
    ::apollo::canbus::Ads_drive_command_50* ads_drive_command_50_;
    ::apollo::canbus::Vcu_drive_report_52* vcu_drive_report_52_;
    ::apollo::canbus::Ads_diagnosis_628* ads_diagnosis_628_;
    ::apollo::canbus::Vcu_nm_401* vcu_nm_401_;
    ::apollo::canbus::Vcu_vehicle_status_report_101* vcu_vehicle_status_report_101_;
    ::apollo::canbus::Vcu_vehicle_info_response_502* vcu_vehicle_info_response_502_;
    ::apollo::canbus::Aeb_diagnosis1_626* aeb_diagnosis1_626_;
    ::apollo::canbus::Aeb_diagresp_718* aeb_diagresp_718_;
    ::apollo::canbus::Pas_1st_data_311* pas_1st_data_311_;
    ::apollo::canbus::Pas_2nd_data_312* pas_2nd_data_312_;
    ::apollo::canbus::Aeb_wheelimpulse_355* aeb_wheelimpulse_355_;
    ::apollo::canbus::Aeb_rearwheelspeed_354* aeb_rearwheelspeed_354_;
    ::apollo::canbus::Aeb_frontwheelspeed_353* aeb_frontwheelspeed_353_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Aeb_systemstate_11

// optional int32 aeb_state = 1;
inline bool Aeb_systemstate_11::_internal_has_aeb_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_aeb_state() const {
  return _internal_has_aeb_state();
}
inline void Aeb_systemstate_11::clear_aeb_state() {
  _impl_.aeb_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Aeb_systemstate_11::_internal_aeb_state() const {
  return _impl_.aeb_state_;
}
inline int32_t Aeb_systemstate_11::aeb_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.aeb_state)
  return _internal_aeb_state();
}
inline void Aeb_systemstate_11::_internal_set_aeb_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.aeb_state_ = value;
}
inline void Aeb_systemstate_11::set_aeb_state(int32_t value) {
  _internal_set_aeb_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.aeb_state)
}

// optional bool aeb_brakestate = 2;
inline bool Aeb_systemstate_11::_internal_has_aeb_brakestate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_aeb_brakestate() const {
  return _internal_has_aeb_brakestate();
}
inline void Aeb_systemstate_11::clear_aeb_brakestate() {
  _impl_.aeb_brakestate_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Aeb_systemstate_11::_internal_aeb_brakestate() const {
  return _impl_.aeb_brakestate_;
}
inline bool Aeb_systemstate_11::aeb_brakestate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.aeb_brakestate)
  return _internal_aeb_brakestate();
}
inline void Aeb_systemstate_11::_internal_set_aeb_brakestate(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aeb_brakestate_ = value;
}
inline void Aeb_systemstate_11::set_aeb_brakestate(bool value) {
  _internal_set_aeb_brakestate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.aeb_brakestate)
}

// optional int32 faultrank = 3;
inline bool Aeb_systemstate_11::_internal_has_faultrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_faultrank() const {
  return _internal_has_faultrank();
}
inline void Aeb_systemstate_11::clear_faultrank() {
  _impl_.faultrank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Aeb_systemstate_11::_internal_faultrank() const {
  return _impl_.faultrank_;
}
inline int32_t Aeb_systemstate_11::faultrank() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.faultrank)
  return _internal_faultrank();
}
inline void Aeb_systemstate_11::_internal_set_faultrank(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.faultrank_ = value;
}
inline void Aeb_systemstate_11::set_faultrank(int32_t value) {
  _internal_set_faultrank(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.faultrank)
}

// optional int32 currenttemperature = 4;
inline bool Aeb_systemstate_11::_internal_has_currenttemperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_currenttemperature() const {
  return _internal_has_currenttemperature();
}
inline void Aeb_systemstate_11::clear_currenttemperature() {
  _impl_.currenttemperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Aeb_systemstate_11::_internal_currenttemperature() const {
  return _impl_.currenttemperature_;
}
inline int32_t Aeb_systemstate_11::currenttemperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.currenttemperature)
  return _internal_currenttemperature();
}
inline void Aeb_systemstate_11::_internal_set_currenttemperature(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.currenttemperature_ = value;
}
inline void Aeb_systemstate_11::set_currenttemperature(int32_t value) {
  _internal_set_currenttemperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.currenttemperature)
}

// optional bool pas_f1_stop = 5;
inline bool Aeb_systemstate_11::_internal_has_pas_f1_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_f1_stop() const {
  return _internal_has_pas_f1_stop();
}
inline void Aeb_systemstate_11::clear_pas_f1_stop() {
  _impl_.pas_f1_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Aeb_systemstate_11::_internal_pas_f1_stop() const {
  return _impl_.pas_f1_stop_;
}
inline bool Aeb_systemstate_11::pas_f1_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_f1_stop)
  return _internal_pas_f1_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_f1_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pas_f1_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_f1_stop(bool value) {
  _internal_set_pas_f1_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_f1_stop)
}

// optional bool pas_f2_stop = 6;
inline bool Aeb_systemstate_11::_internal_has_pas_f2_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_f2_stop() const {
  return _internal_has_pas_f2_stop();
}
inline void Aeb_systemstate_11::clear_pas_f2_stop() {
  _impl_.pas_f2_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Aeb_systemstate_11::_internal_pas_f2_stop() const {
  return _impl_.pas_f2_stop_;
}
inline bool Aeb_systemstate_11::pas_f2_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_f2_stop)
  return _internal_pas_f2_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_f2_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pas_f2_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_f2_stop(bool value) {
  _internal_set_pas_f2_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_f2_stop)
}

// optional bool pas_f3_stop = 7;
inline bool Aeb_systemstate_11::_internal_has_pas_f3_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_f3_stop() const {
  return _internal_has_pas_f3_stop();
}
inline void Aeb_systemstate_11::clear_pas_f3_stop() {
  _impl_.pas_f3_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Aeb_systemstate_11::_internal_pas_f3_stop() const {
  return _impl_.pas_f3_stop_;
}
inline bool Aeb_systemstate_11::pas_f3_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_f3_stop)
  return _internal_pas_f3_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_f3_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pas_f3_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_f3_stop(bool value) {
  _internal_set_pas_f3_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_f3_stop)
}

// optional bool pas_f4_stop = 8;
inline bool Aeb_systemstate_11::_internal_has_pas_f4_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_f4_stop() const {
  return _internal_has_pas_f4_stop();
}
inline void Aeb_systemstate_11::clear_pas_f4_stop() {
  _impl_.pas_f4_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Aeb_systemstate_11::_internal_pas_f4_stop() const {
  return _impl_.pas_f4_stop_;
}
inline bool Aeb_systemstate_11::pas_f4_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_f4_stop)
  return _internal_pas_f4_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_f4_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pas_f4_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_f4_stop(bool value) {
  _internal_set_pas_f4_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_f4_stop)
}

// optional bool pas_b1_stop = 9;
inline bool Aeb_systemstate_11::_internal_has_pas_b1_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_b1_stop() const {
  return _internal_has_pas_b1_stop();
}
inline void Aeb_systemstate_11::clear_pas_b1_stop() {
  _impl_.pas_b1_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Aeb_systemstate_11::_internal_pas_b1_stop() const {
  return _impl_.pas_b1_stop_;
}
inline bool Aeb_systemstate_11::pas_b1_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_b1_stop)
  return _internal_pas_b1_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_b1_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pas_b1_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_b1_stop(bool value) {
  _internal_set_pas_b1_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_b1_stop)
}

// optional bool pas_b2_stop = 10;
inline bool Aeb_systemstate_11::_internal_has_pas_b2_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_b2_stop() const {
  return _internal_has_pas_b2_stop();
}
inline void Aeb_systemstate_11::clear_pas_b2_stop() {
  _impl_.pas_b2_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Aeb_systemstate_11::_internal_pas_b2_stop() const {
  return _impl_.pas_b2_stop_;
}
inline bool Aeb_systemstate_11::pas_b2_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_b2_stop)
  return _internal_pas_b2_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_b2_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pas_b2_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_b2_stop(bool value) {
  _internal_set_pas_b2_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_b2_stop)
}

// optional bool pas_b3_stop = 11;
inline bool Aeb_systemstate_11::_internal_has_pas_b3_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_b3_stop() const {
  return _internal_has_pas_b3_stop();
}
inline void Aeb_systemstate_11::clear_pas_b3_stop() {
  _impl_.pas_b3_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Aeb_systemstate_11::_internal_pas_b3_stop() const {
  return _impl_.pas_b3_stop_;
}
inline bool Aeb_systemstate_11::pas_b3_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_b3_stop)
  return _internal_pas_b3_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_b3_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.pas_b3_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_b3_stop(bool value) {
  _internal_set_pas_b3_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_b3_stop)
}

// optional bool pas_b4_stop = 12;
inline bool Aeb_systemstate_11::_internal_has_pas_b4_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_pas_b4_stop() const {
  return _internal_has_pas_b4_stop();
}
inline void Aeb_systemstate_11::clear_pas_b4_stop() {
  _impl_.pas_b4_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Aeb_systemstate_11::_internal_pas_b4_stop() const {
  return _impl_.pas_b4_stop_;
}
inline bool Aeb_systemstate_11::pas_b4_stop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.pas_b4_stop)
  return _internal_pas_b4_stop();
}
inline void Aeb_systemstate_11::_internal_set_pas_b4_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.pas_b4_stop_ = value;
}
inline void Aeb_systemstate_11::set_pas_b4_stop(bool value) {
  _internal_set_pas_b4_stop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.pas_b4_stop)
}

// optional int32 aeb_livecounter_rear = 13;
inline bool Aeb_systemstate_11::_internal_has_aeb_livecounter_rear() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_aeb_livecounter_rear() const {
  return _internal_has_aeb_livecounter_rear();
}
inline void Aeb_systemstate_11::clear_aeb_livecounter_rear() {
  _impl_.aeb_livecounter_rear_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t Aeb_systemstate_11::_internal_aeb_livecounter_rear() const {
  return _impl_.aeb_livecounter_rear_;
}
inline int32_t Aeb_systemstate_11::aeb_livecounter_rear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.aeb_livecounter_rear)
  return _internal_aeb_livecounter_rear();
}
inline void Aeb_systemstate_11::_internal_set_aeb_livecounter_rear(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.aeb_livecounter_rear_ = value;
}
inline void Aeb_systemstate_11::set_aeb_livecounter_rear(int32_t value) {
  _internal_set_aeb_livecounter_rear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.aeb_livecounter_rear)
}

// optional int32 aeb_cheksum = 14;
inline bool Aeb_systemstate_11::_internal_has_aeb_cheksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Aeb_systemstate_11::has_aeb_cheksum() const {
  return _internal_has_aeb_cheksum();
}
inline void Aeb_systemstate_11::clear_aeb_cheksum() {
  _impl_.aeb_cheksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t Aeb_systemstate_11::_internal_aeb_cheksum() const {
  return _impl_.aeb_cheksum_;
}
inline int32_t Aeb_systemstate_11::aeb_cheksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_systemstate_11.aeb_cheksum)
  return _internal_aeb_cheksum();
}
inline void Aeb_systemstate_11::_internal_set_aeb_cheksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.aeb_cheksum_ = value;
}
inline void Aeb_systemstate_11::set_aeb_cheksum(int32_t value) {
  _internal_set_aeb_cheksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_systemstate_11.aeb_cheksum)
}

// -------------------------------------------------------------------

// Vcu_vehicle_fault_response_201

// optional int32 vehicle_error_indicationsvcu = 1;
inline bool Vcu_vehicle_fault_response_201::_internal_has_vehicle_error_indicationsvcu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_vehicle_error_indicationsvcu() const {
  return _internal_has_vehicle_error_indicationsvcu();
}
inline void Vcu_vehicle_fault_response_201::clear_vehicle_error_indicationsvcu() {
  _impl_.vehicle_error_indicationsvcu_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_vehicle_error_indicationsvcu() const {
  return _impl_.vehicle_error_indicationsvcu_;
}
inline int32_t Vcu_vehicle_fault_response_201::vehicle_error_indicationsvcu() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.vehicle_error_indicationsvcu)
  return _internal_vehicle_error_indicationsvcu();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_vehicle_error_indicationsvcu(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vehicle_error_indicationsvcu_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_vehicle_error_indicationsvcu(int32_t value) {
  _internal_set_vehicle_error_indicationsvcu(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.vehicle_error_indicationsvcu)
}

// optional int32 brake_system_errorehb = 2;
inline bool Vcu_vehicle_fault_response_201::_internal_has_brake_system_errorehb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_brake_system_errorehb() const {
  return _internal_has_brake_system_errorehb();
}
inline void Vcu_vehicle_fault_response_201::clear_brake_system_errorehb() {
  _impl_.brake_system_errorehb_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_brake_system_errorehb() const {
  return _impl_.brake_system_errorehb_;
}
inline int32_t Vcu_vehicle_fault_response_201::brake_system_errorehb() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.brake_system_errorehb)
  return _internal_brake_system_errorehb();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_brake_system_errorehb(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brake_system_errorehb_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_brake_system_errorehb(int32_t value) {
  _internal_set_brake_system_errorehb(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.brake_system_errorehb)
}

// optional int32 eps_error = 3;
inline bool Vcu_vehicle_fault_response_201::_internal_has_eps_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_eps_error() const {
  return _internal_has_eps_error();
}
inline void Vcu_vehicle_fault_response_201::clear_eps_error() {
  _impl_.eps_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_eps_error() const {
  return _impl_.eps_error_;
}
inline int32_t Vcu_vehicle_fault_response_201::eps_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.eps_error)
  return _internal_eps_error();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_eps_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eps_error_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_eps_error(int32_t value) {
  _internal_set_eps_error(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.eps_error)
}

// optional int32 motor_error = 4;
inline bool Vcu_vehicle_fault_response_201::_internal_has_motor_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_motor_error() const {
  return _internal_has_motor_error();
}
inline void Vcu_vehicle_fault_response_201::clear_motor_error() {
  _impl_.motor_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_motor_error() const {
  return _impl_.motor_error_;
}
inline int32_t Vcu_vehicle_fault_response_201::motor_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.motor_error)
  return _internal_motor_error();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_motor_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.motor_error_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_motor_error(int32_t value) {
  _internal_set_motor_error(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.motor_error)
}

// optional int32 epb_error = 5;
inline bool Vcu_vehicle_fault_response_201::_internal_has_epb_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_epb_error() const {
  return _internal_has_epb_error();
}
inline void Vcu_vehicle_fault_response_201::clear_epb_error() {
  _impl_.epb_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_epb_error() const {
  return _impl_.epb_error_;
}
inline int32_t Vcu_vehicle_fault_response_201::epb_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.epb_error)
  return _internal_epb_error();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_epb_error(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.epb_error_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_epb_error(int32_t value) {
  _internal_set_epb_error(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.epb_error)
}

// optional int32 high_voltage_battery_errorbcu = 6;
inline bool Vcu_vehicle_fault_response_201::_internal_has_high_voltage_battery_errorbcu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_high_voltage_battery_errorbcu() const {
  return _internal_has_high_voltage_battery_errorbcu();
}
inline void Vcu_vehicle_fault_response_201::clear_high_voltage_battery_errorbcu() {
  _impl_.high_voltage_battery_errorbcu_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_high_voltage_battery_errorbcu() const {
  return _impl_.high_voltage_battery_errorbcu_;
}
inline int32_t Vcu_vehicle_fault_response_201::high_voltage_battery_errorbcu() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.high_voltage_battery_errorbcu)
  return _internal_high_voltage_battery_errorbcu();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_high_voltage_battery_errorbcu(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.high_voltage_battery_errorbcu_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_high_voltage_battery_errorbcu(int32_t value) {
  _internal_set_high_voltage_battery_errorbcu(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.high_voltage_battery_errorbcu)
}

// optional bool automode_exit_reason_losscommuni = 7;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_losscommuni() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_losscommuni() const {
  return _internal_has_automode_exit_reason_losscommuni();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_losscommuni() {
  _impl_.automode_exit_reason_losscommuni_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_losscommuni() const {
  return _impl_.automode_exit_reason_losscommuni_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_losscommuni() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_losscommuni)
  return _internal_automode_exit_reason_losscommuni();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_losscommuni(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.automode_exit_reason_losscommuni_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_losscommuni(bool value) {
  _internal_set_automode_exit_reason_losscommuni(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_losscommuni)
}

// optional bool automode_exit_reason_reqsignalno = 8;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_reqsignalno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_reqsignalno() const {
  return _internal_has_automode_exit_reason_reqsignalno();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_reqsignalno() {
  _impl_.automode_exit_reason_reqsignalno_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_reqsignalno() const {
  return _impl_.automode_exit_reason_reqsignalno_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_reqsignalno() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_reqsignalno)
  return _internal_automode_exit_reason_reqsignalno();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_reqsignalno(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.automode_exit_reason_reqsignalno_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_reqsignalno(bool value) {
  _internal_set_automode_exit_reason_reqsignalno(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_reqsignalno)
}

// optional bool automode_exit_reason_low_power = 9;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_low_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_low_power() const {
  return _internal_has_automode_exit_reason_low_power();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_low_power() {
  _impl_.automode_exit_reason_low_power_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_low_power() const {
  return _impl_.automode_exit_reason_low_power_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_low_power() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_low_power)
  return _internal_automode_exit_reason_low_power();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_low_power(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.automode_exit_reason_low_power_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_low_power(bool value) {
  _internal_set_automode_exit_reason_low_power(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_low_power)
}

// optional bool automode_exit_reason_highvolt = 10;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_highvolt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_highvolt() const {
  return _internal_has_automode_exit_reason_highvolt();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_highvolt() {
  _impl_.automode_exit_reason_highvolt_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_highvolt() const {
  return _impl_.automode_exit_reason_highvolt_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_highvolt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_highvolt)
  return _internal_automode_exit_reason_highvolt();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_highvolt(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.automode_exit_reason_highvolt_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_highvolt(bool value) {
  _internal_set_automode_exit_reason_highvolt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_highvolt)
}

// optional bool automode_exit_reason_vehicle_flt = 11;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_vehicle_flt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_vehicle_flt() const {
  return _internal_has_automode_exit_reason_vehicle_flt();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_vehicle_flt() {
  _impl_.automode_exit_reason_vehicle_flt_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_vehicle_flt() const {
  return _impl_.automode_exit_reason_vehicle_flt_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_vehicle_flt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_vehicle_flt)
  return _internal_automode_exit_reason_vehicle_flt();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_vehicle_flt(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.automode_exit_reason_vehicle_flt_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_vehicle_flt(bool value) {
  _internal_set_automode_exit_reason_vehicle_flt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_vehicle_flt)
}

// optional bool automode_exit_reason_press_emerg = 12;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_press_emerg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_press_emerg() const {
  return _internal_has_automode_exit_reason_press_emerg();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_press_emerg() {
  _impl_.automode_exit_reason_press_emerg_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_press_emerg() const {
  return _impl_.automode_exit_reason_press_emerg_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_press_emerg() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_press_emerg)
  return _internal_automode_exit_reason_press_emerg();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_press_emerg(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.automode_exit_reason_press_emerg_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_press_emerg(bool value) {
  _internal_set_automode_exit_reason_press_emerg(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_press_emerg)
}

// optional bool automode_exit_reason_press_remot = 13;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_press_remot() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_press_remot() const {
  return _internal_has_automode_exit_reason_press_remot();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_press_remot() {
  _impl_.automode_exit_reason_press_remot_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_press_remot() const {
  return _impl_.automode_exit_reason_press_remot_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_press_remot() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_press_remot)
  return _internal_automode_exit_reason_press_remot();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_press_remot(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.automode_exit_reason_press_remot_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_press_remot(bool value) {
  _internal_set_automode_exit_reason_press_remot(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_press_remot)
}

// optional bool automode_exit_reason_pdu_control = 14;
inline bool Vcu_vehicle_fault_response_201::_internal_has_automode_exit_reason_pdu_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_automode_exit_reason_pdu_control() const {
  return _internal_has_automode_exit_reason_pdu_control();
}
inline void Vcu_vehicle_fault_response_201::clear_automode_exit_reason_pdu_control() {
  _impl_.automode_exit_reason_pdu_control_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Vcu_vehicle_fault_response_201::_internal_automode_exit_reason_pdu_control() const {
  return _impl_.automode_exit_reason_pdu_control_;
}
inline bool Vcu_vehicle_fault_response_201::automode_exit_reason_pdu_control() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_pdu_control)
  return _internal_automode_exit_reason_pdu_control();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_automode_exit_reason_pdu_control(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.automode_exit_reason_pdu_control_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_automode_exit_reason_pdu_control(bool value) {
  _internal_set_automode_exit_reason_pdu_control(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.automode_exit_reason_pdu_control)
}

// optional int32 vcu_faultrept_alivecounter = 15;
inline bool Vcu_vehicle_fault_response_201::_internal_has_vcu_faultrept_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_vcu_faultrept_alivecounter() const {
  return _internal_has_vcu_faultrept_alivecounter();
}
inline void Vcu_vehicle_fault_response_201::clear_vcu_faultrept_alivecounter() {
  _impl_.vcu_faultrept_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_vcu_faultrept_alivecounter() const {
  return _impl_.vcu_faultrept_alivecounter_;
}
inline int32_t Vcu_vehicle_fault_response_201::vcu_faultrept_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.vcu_faultrept_alivecounter)
  return _internal_vcu_faultrept_alivecounter();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_vcu_faultrept_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.vcu_faultrept_alivecounter_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_vcu_faultrept_alivecounter(int32_t value) {
  _internal_set_vcu_faultrept_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.vcu_faultrept_alivecounter)
}

// optional int32 vcu_faultrept_checksum = 16;
inline bool Vcu_vehicle_fault_response_201::_internal_has_vcu_faultrept_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Vcu_vehicle_fault_response_201::has_vcu_faultrept_checksum() const {
  return _internal_has_vcu_faultrept_checksum();
}
inline void Vcu_vehicle_fault_response_201::clear_vcu_faultrept_checksum() {
  _impl_.vcu_faultrept_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t Vcu_vehicle_fault_response_201::_internal_vcu_faultrept_checksum() const {
  return _impl_.vcu_faultrept_checksum_;
}
inline int32_t Vcu_vehicle_fault_response_201::vcu_faultrept_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_fault_response_201.vcu_faultrept_checksum)
  return _internal_vcu_faultrept_checksum();
}
inline void Vcu_vehicle_fault_response_201::_internal_set_vcu_faultrept_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.vcu_faultrept_checksum_ = value;
}
inline void Vcu_vehicle_fault_response_201::set_vcu_faultrept_checksum(int32_t value) {
  _internal_set_vcu_faultrept_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_fault_response_201.vcu_faultrept_checksum)
}

// -------------------------------------------------------------------

// Vcu_powerstatus_214

// optional int32 vcu_powermode = 1;
inline bool Vcu_powerstatus_214::_internal_has_vcu_powermode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_vcu_powermode() const {
  return _internal_has_vcu_powermode();
}
inline void Vcu_powerstatus_214::clear_vcu_powermode() {
  _impl_.vcu_powermode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Vcu_powerstatus_214::_internal_vcu_powermode() const {
  return _impl_.vcu_powermode_;
}
inline int32_t Vcu_powerstatus_214::vcu_powermode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.vcu_powermode)
  return _internal_vcu_powermode();
}
inline void Vcu_powerstatus_214::_internal_set_vcu_powermode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcu_powermode_ = value;
}
inline void Vcu_powerstatus_214::set_vcu_powermode(int32_t value) {
  _internal_set_vcu_powermode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.vcu_powermode)
}

// optional int32 vcu_powermodevalid = 2;
inline bool Vcu_powerstatus_214::_internal_has_vcu_powermodevalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_vcu_powermodevalid() const {
  return _internal_has_vcu_powermodevalid();
}
inline void Vcu_powerstatus_214::clear_vcu_powermodevalid() {
  _impl_.vcu_powermodevalid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Vcu_powerstatus_214::_internal_vcu_powermodevalid() const {
  return _impl_.vcu_powermodevalid_;
}
inline int32_t Vcu_powerstatus_214::vcu_powermodevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.vcu_powermodevalid)
  return _internal_vcu_powermodevalid();
}
inline void Vcu_powerstatus_214::_internal_set_vcu_powermodevalid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vcu_powermodevalid_ = value;
}
inline void Vcu_powerstatus_214::set_vcu_powermodevalid(int32_t value) {
  _internal_set_vcu_powermodevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.vcu_powermodevalid)
}

// optional bool replacebatterystateindication = 3;
inline bool Vcu_powerstatus_214::_internal_has_replacebatterystateindication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_replacebatterystateindication() const {
  return _internal_has_replacebatterystateindication();
}
inline void Vcu_powerstatus_214::clear_replacebatterystateindication() {
  _impl_.replacebatterystateindication_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Vcu_powerstatus_214::_internal_replacebatterystateindication() const {
  return _impl_.replacebatterystateindication_;
}
inline bool Vcu_powerstatus_214::replacebatterystateindication() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.replacebatterystateindication)
  return _internal_replacebatterystateindication();
}
inline void Vcu_powerstatus_214::_internal_set_replacebatterystateindication(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.replacebatterystateindication_ = value;
}
inline void Vcu_powerstatus_214::set_replacebatterystateindication(bool value) {
  _internal_set_replacebatterystateindication(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.replacebatterystateindication)
}

// optional bool forbidden_aeb_signal = 4;
inline bool Vcu_powerstatus_214::_internal_has_forbidden_aeb_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_forbidden_aeb_signal() const {
  return _internal_has_forbidden_aeb_signal();
}
inline void Vcu_powerstatus_214::clear_forbidden_aeb_signal() {
  _impl_.forbidden_aeb_signal_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Vcu_powerstatus_214::_internal_forbidden_aeb_signal() const {
  return _impl_.forbidden_aeb_signal_;
}
inline bool Vcu_powerstatus_214::forbidden_aeb_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.forbidden_aeb_signal)
  return _internal_forbidden_aeb_signal();
}
inline void Vcu_powerstatus_214::_internal_set_forbidden_aeb_signal(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.forbidden_aeb_signal_ = value;
}
inline void Vcu_powerstatus_214::set_forbidden_aeb_signal(bool value) {
  _internal_set_forbidden_aeb_signal(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.forbidden_aeb_signal)
}

// optional double bcu_chargedischargecurrent = 5;
inline bool Vcu_powerstatus_214::_internal_has_bcu_chargedischargecurrent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_bcu_chargedischargecurrent() const {
  return _internal_has_bcu_chargedischargecurrent();
}
inline void Vcu_powerstatus_214::clear_bcu_chargedischargecurrent() {
  _impl_.bcu_chargedischargecurrent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Vcu_powerstatus_214::_internal_bcu_chargedischargecurrent() const {
  return _impl_.bcu_chargedischargecurrent_;
}
inline double Vcu_powerstatus_214::bcu_chargedischargecurrent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.bcu_chargedischargecurrent)
  return _internal_bcu_chargedischargecurrent();
}
inline void Vcu_powerstatus_214::_internal_set_bcu_chargedischargecurrent(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bcu_chargedischargecurrent_ = value;
}
inline void Vcu_powerstatus_214::set_bcu_chargedischargecurrent(double value) {
  _internal_set_bcu_chargedischargecurrent(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.bcu_chargedischargecurrent)
}

// optional double bcu_batt_internalvoltage = 6;
inline bool Vcu_powerstatus_214::_internal_has_bcu_batt_internalvoltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_bcu_batt_internalvoltage() const {
  return _internal_has_bcu_batt_internalvoltage();
}
inline void Vcu_powerstatus_214::clear_bcu_batt_internalvoltage() {
  _impl_.bcu_batt_internalvoltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double Vcu_powerstatus_214::_internal_bcu_batt_internalvoltage() const {
  return _impl_.bcu_batt_internalvoltage_;
}
inline double Vcu_powerstatus_214::bcu_batt_internalvoltage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.bcu_batt_internalvoltage)
  return _internal_bcu_batt_internalvoltage();
}
inline void Vcu_powerstatus_214::_internal_set_bcu_batt_internalvoltage(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bcu_batt_internalvoltage_ = value;
}
inline void Vcu_powerstatus_214::set_bcu_batt_internalvoltage(double value) {
  _internal_set_bcu_batt_internalvoltage(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.bcu_batt_internalvoltage)
}

// optional int32 vcu_driverinfo_alivecounter = 7;
inline bool Vcu_powerstatus_214::_internal_has_vcu_driverinfo_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_vcu_driverinfo_alivecounter() const {
  return _internal_has_vcu_driverinfo_alivecounter();
}
inline void Vcu_powerstatus_214::clear_vcu_driverinfo_alivecounter() {
  _impl_.vcu_driverinfo_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Vcu_powerstatus_214::_internal_vcu_driverinfo_alivecounter() const {
  return _impl_.vcu_driverinfo_alivecounter_;
}
inline int32_t Vcu_powerstatus_214::vcu_driverinfo_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.vcu_driverinfo_alivecounter)
  return _internal_vcu_driverinfo_alivecounter();
}
inline void Vcu_powerstatus_214::_internal_set_vcu_driverinfo_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vcu_driverinfo_alivecounter_ = value;
}
inline void Vcu_powerstatus_214::set_vcu_driverinfo_alivecounter(int32_t value) {
  _internal_set_vcu_driverinfo_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.vcu_driverinfo_alivecounter)
}

// optional int32 vcu_driverinfo_checksum = 8;
inline bool Vcu_powerstatus_214::_internal_has_vcu_driverinfo_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_powerstatus_214::has_vcu_driverinfo_checksum() const {
  return _internal_has_vcu_driverinfo_checksum();
}
inline void Vcu_powerstatus_214::clear_vcu_driverinfo_checksum() {
  _impl_.vcu_driverinfo_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Vcu_powerstatus_214::_internal_vcu_driverinfo_checksum() const {
  return _impl_.vcu_driverinfo_checksum_;
}
inline int32_t Vcu_powerstatus_214::vcu_driverinfo_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_powerstatus_214.vcu_driverinfo_checksum)
  return _internal_vcu_driverinfo_checksum();
}
inline void Vcu_powerstatus_214::_internal_set_vcu_driverinfo_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vcu_driverinfo_checksum_ = value;
}
inline void Vcu_powerstatus_214::set_vcu_driverinfo_checksum(int32_t value) {
  _internal_set_vcu_driverinfo_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_powerstatus_214.vcu_driverinfo_checksum)
}

// -------------------------------------------------------------------

// Ads_light_horn_command_310

// optional bool turn_right_light_command = 1;
inline bool Ads_light_horn_command_310::_internal_has_turn_right_light_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_turn_right_light_command() const {
  return _internal_has_turn_right_light_command();
}
inline void Ads_light_horn_command_310::clear_turn_right_light_command() {
  _impl_.turn_right_light_command_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Ads_light_horn_command_310::_internal_turn_right_light_command() const {
  return _impl_.turn_right_light_command_;
}
inline bool Ads_light_horn_command_310::turn_right_light_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.turn_right_light_command)
  return _internal_turn_right_light_command();
}
inline void Ads_light_horn_command_310::_internal_set_turn_right_light_command(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.turn_right_light_command_ = value;
}
inline void Ads_light_horn_command_310::set_turn_right_light_command(bool value) {
  _internal_set_turn_right_light_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.turn_right_light_command)
}

// optional bool turn_left_light_command = 2;
inline bool Ads_light_horn_command_310::_internal_has_turn_left_light_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_turn_left_light_command() const {
  return _internal_has_turn_left_light_command();
}
inline void Ads_light_horn_command_310::clear_turn_left_light_command() {
  _impl_.turn_left_light_command_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Ads_light_horn_command_310::_internal_turn_left_light_command() const {
  return _impl_.turn_left_light_command_;
}
inline bool Ads_light_horn_command_310::turn_left_light_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.turn_left_light_command)
  return _internal_turn_left_light_command();
}
inline void Ads_light_horn_command_310::_internal_set_turn_left_light_command(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.turn_left_light_command_ = value;
}
inline void Ads_light_horn_command_310::set_turn_left_light_command(bool value) {
  _internal_set_turn_left_light_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.turn_left_light_command)
}

// optional bool horn_command = 3;
inline bool Ads_light_horn_command_310::_internal_has_horn_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_horn_command() const {
  return _internal_has_horn_command();
}
inline void Ads_light_horn_command_310::clear_horn_command() {
  _impl_.horn_command_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Ads_light_horn_command_310::_internal_horn_command() const {
  return _impl_.horn_command_;
}
inline bool Ads_light_horn_command_310::horn_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.horn_command)
  return _internal_horn_command();
}
inline void Ads_light_horn_command_310::_internal_set_horn_command(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.horn_command_ = value;
}
inline void Ads_light_horn_command_310::set_horn_command(bool value) {
  _internal_set_horn_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.horn_command)
}

// optional int32 beam_command = 4;
inline bool Ads_light_horn_command_310::_internal_has_beam_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_beam_command() const {
  return _internal_has_beam_command();
}
inline void Ads_light_horn_command_310::clear_beam_command() {
  _impl_.beam_command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ads_light_horn_command_310::_internal_beam_command() const {
  return _impl_.beam_command_;
}
inline int32_t Ads_light_horn_command_310::beam_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.beam_command)
  return _internal_beam_command();
}
inline void Ads_light_horn_command_310::_internal_set_beam_command(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.beam_command_ = value;
}
inline void Ads_light_horn_command_310::set_beam_command(int32_t value) {
  _internal_set_beam_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.beam_command)
}

// optional int32 auto_drivercmd_alivecounter = 5;
inline bool Ads_light_horn_command_310::_internal_has_auto_drivercmd_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_auto_drivercmd_alivecounter() const {
  return _internal_has_auto_drivercmd_alivecounter();
}
inline void Ads_light_horn_command_310::clear_auto_drivercmd_alivecounter() {
  _impl_.auto_drivercmd_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Ads_light_horn_command_310::_internal_auto_drivercmd_alivecounter() const {
  return _impl_.auto_drivercmd_alivecounter_;
}
inline int32_t Ads_light_horn_command_310::auto_drivercmd_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.auto_drivercmd_alivecounter)
  return _internal_auto_drivercmd_alivecounter();
}
inline void Ads_light_horn_command_310::_internal_set_auto_drivercmd_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auto_drivercmd_alivecounter_ = value;
}
inline void Ads_light_horn_command_310::set_auto_drivercmd_alivecounter(int32_t value) {
  _internal_set_auto_drivercmd_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.auto_drivercmd_alivecounter)
}

// optional int32 auto_drivercmd_checksum = 6;
inline bool Ads_light_horn_command_310::_internal_has_auto_drivercmd_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ads_light_horn_command_310::has_auto_drivercmd_checksum() const {
  return _internal_has_auto_drivercmd_checksum();
}
inline void Ads_light_horn_command_310::clear_auto_drivercmd_checksum() {
  _impl_.auto_drivercmd_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Ads_light_horn_command_310::_internal_auto_drivercmd_checksum() const {
  return _impl_.auto_drivercmd_checksum_;
}
inline int32_t Ads_light_horn_command_310::auto_drivercmd_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_light_horn_command_310.auto_drivercmd_checksum)
  return _internal_auto_drivercmd_checksum();
}
inline void Ads_light_horn_command_310::_internal_set_auto_drivercmd_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.auto_drivercmd_checksum_ = value;
}
inline void Ads_light_horn_command_310::set_auto_drivercmd_checksum(int32_t value) {
  _internal_set_auto_drivercmd_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_light_horn_command_310.auto_drivercmd_checksum)
}

// -------------------------------------------------------------------

// Ads_brake_command_46

// optional bool drive_enable = 1;
inline bool Ads_brake_command_46::_internal_has_drive_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_drive_enable() const {
  return _internal_has_drive_enable();
}
inline void Ads_brake_command_46::clear_drive_enable() {
  _impl_.drive_enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Ads_brake_command_46::_internal_drive_enable() const {
  return _impl_.drive_enable_;
}
inline bool Ads_brake_command_46::drive_enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.drive_enable)
  return _internal_drive_enable();
}
inline void Ads_brake_command_46::_internal_set_drive_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.drive_enable_ = value;
}
inline void Ads_brake_command_46::set_drive_enable(bool value) {
  _internal_set_drive_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.drive_enable)
}

// optional int32 auto_brake_command = 2;
inline bool Ads_brake_command_46::_internal_has_auto_brake_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_auto_brake_command() const {
  return _internal_has_auto_brake_command();
}
inline void Ads_brake_command_46::clear_auto_brake_command() {
  _impl_.auto_brake_command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Ads_brake_command_46::_internal_auto_brake_command() const {
  return _impl_.auto_brake_command_;
}
inline int32_t Ads_brake_command_46::auto_brake_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.auto_brake_command)
  return _internal_auto_brake_command();
}
inline void Ads_brake_command_46::_internal_set_auto_brake_command(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.auto_brake_command_ = value;
}
inline void Ads_brake_command_46::set_auto_brake_command(int32_t value) {
  _internal_set_auto_brake_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.auto_brake_command)
}

// optional bool auto_parking_command = 3;
inline bool Ads_brake_command_46::_internal_has_auto_parking_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_auto_parking_command() const {
  return _internal_has_auto_parking_command();
}
inline void Ads_brake_command_46::clear_auto_parking_command() {
  _impl_.auto_parking_command_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Ads_brake_command_46::_internal_auto_parking_command() const {
  return _impl_.auto_parking_command_;
}
inline bool Ads_brake_command_46::auto_parking_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.auto_parking_command)
  return _internal_auto_parking_command();
}
inline void Ads_brake_command_46::_internal_set_auto_parking_command(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auto_parking_command_ = value;
}
inline void Ads_brake_command_46::set_auto_parking_command(bool value) {
  _internal_set_auto_parking_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.auto_parking_command)
}

// optional bool epb_rampauxiliarycommand = 4;
inline bool Ads_brake_command_46::_internal_has_epb_rampauxiliarycommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_epb_rampauxiliarycommand() const {
  return _internal_has_epb_rampauxiliarycommand();
}
inline void Ads_brake_command_46::clear_epb_rampauxiliarycommand() {
  _impl_.epb_rampauxiliarycommand_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Ads_brake_command_46::_internal_epb_rampauxiliarycommand() const {
  return _impl_.epb_rampauxiliarycommand_;
}
inline bool Ads_brake_command_46::epb_rampauxiliarycommand() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.epb_rampauxiliarycommand)
  return _internal_epb_rampauxiliarycommand();
}
inline void Ads_brake_command_46::_internal_set_epb_rampauxiliarycommand(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.epb_rampauxiliarycommand_ = value;
}
inline void Ads_brake_command_46::set_epb_rampauxiliarycommand(bool value) {
  _internal_set_epb_rampauxiliarycommand(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.epb_rampauxiliarycommand)
}

// optional int32 auto_drivercmd_alivecounter = 5;
inline bool Ads_brake_command_46::_internal_has_auto_drivercmd_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_auto_drivercmd_alivecounter() const {
  return _internal_has_auto_drivercmd_alivecounter();
}
inline void Ads_brake_command_46::clear_auto_drivercmd_alivecounter() {
  _impl_.auto_drivercmd_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Ads_brake_command_46::_internal_auto_drivercmd_alivecounter() const {
  return _impl_.auto_drivercmd_alivecounter_;
}
inline int32_t Ads_brake_command_46::auto_drivercmd_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.auto_drivercmd_alivecounter)
  return _internal_auto_drivercmd_alivecounter();
}
inline void Ads_brake_command_46::_internal_set_auto_drivercmd_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auto_drivercmd_alivecounter_ = value;
}
inline void Ads_brake_command_46::set_auto_drivercmd_alivecounter(int32_t value) {
  _internal_set_auto_drivercmd_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.auto_drivercmd_alivecounter)
}

// optional int32 auto_drivercmd_checksum = 6;
inline bool Ads_brake_command_46::_internal_has_auto_drivercmd_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ads_brake_command_46::has_auto_drivercmd_checksum() const {
  return _internal_has_auto_drivercmd_checksum();
}
inline void Ads_brake_command_46::clear_auto_drivercmd_checksum() {
  _impl_.auto_drivercmd_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Ads_brake_command_46::_internal_auto_drivercmd_checksum() const {
  return _impl_.auto_drivercmd_checksum_;
}
inline int32_t Ads_brake_command_46::auto_drivercmd_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_brake_command_46.auto_drivercmd_checksum)
  return _internal_auto_drivercmd_checksum();
}
inline void Ads_brake_command_46::_internal_set_auto_drivercmd_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.auto_drivercmd_checksum_ = value;
}
inline void Ads_brake_command_46::set_auto_drivercmd_checksum(int32_t value) {
  _internal_set_auto_drivercmd_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_brake_command_46.auto_drivercmd_checksum)
}

// -------------------------------------------------------------------

// Vcu_brake_report_47

// optional bool brake_enable_resp = 1;
inline bool Vcu_brake_report_47::_internal_has_brake_enable_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_brake_enable_resp() const {
  return _internal_has_brake_enable_resp();
}
inline void Vcu_brake_report_47::clear_brake_enable_resp() {
  _impl_.brake_enable_resp_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Vcu_brake_report_47::_internal_brake_enable_resp() const {
  return _impl_.brake_enable_resp_;
}
inline bool Vcu_brake_report_47::brake_enable_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.brake_enable_resp)
  return _internal_brake_enable_resp();
}
inline void Vcu_brake_report_47::_internal_set_brake_enable_resp(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.brake_enable_resp_ = value;
}
inline void Vcu_brake_report_47::set_brake_enable_resp(bool value) {
  _internal_set_brake_enable_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.brake_enable_resp)
}

// optional .apollo.canbus.Vcu_brake_report_47.Control_mode_respType control_mode_resp = 2;
inline bool Vcu_brake_report_47::_internal_has_control_mode_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_control_mode_resp() const {
  return _internal_has_control_mode_resp();
}
inline void Vcu_brake_report_47::clear_control_mode_resp() {
  _impl_.control_mode_resp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::_internal_control_mode_resp() const {
  return static_cast< ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType >(_impl_.control_mode_resp_);
}
inline ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::control_mode_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.control_mode_resp)
  return _internal_control_mode_resp();
}
inline void Vcu_brake_report_47::_internal_set_control_mode_resp(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType value) {
  assert(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_mode_resp_ = value;
}
inline void Vcu_brake_report_47::set_control_mode_resp(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType value) {
  _internal_set_control_mode_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.control_mode_resp)
}

// optional bool vcu_real_brake_valid = 3;
inline bool Vcu_brake_report_47::_internal_has_vcu_real_brake_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_real_brake_valid() const {
  return _internal_has_vcu_real_brake_valid();
}
inline void Vcu_brake_report_47::clear_vcu_real_brake_valid() {
  _impl_.vcu_real_brake_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Vcu_brake_report_47::_internal_vcu_real_brake_valid() const {
  return _impl_.vcu_real_brake_valid_;
}
inline bool Vcu_brake_report_47::vcu_real_brake_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_real_brake_valid)
  return _internal_vcu_real_brake_valid();
}
inline void Vcu_brake_report_47::_internal_set_vcu_real_brake_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcu_real_brake_valid_ = value;
}
inline void Vcu_brake_report_47::set_vcu_real_brake_valid(bool value) {
  _internal_set_vcu_real_brake_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_real_brake_valid)
}

// optional int32 vcu_real_brake = 4;
inline bool Vcu_brake_report_47::_internal_has_vcu_real_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_real_brake() const {
  return _internal_has_vcu_real_brake();
}
inline void Vcu_brake_report_47::clear_vcu_real_brake() {
  _impl_.vcu_real_brake_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Vcu_brake_report_47::_internal_vcu_real_brake() const {
  return _impl_.vcu_real_brake_;
}
inline int32_t Vcu_brake_report_47::vcu_real_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_real_brake)
  return _internal_vcu_real_brake();
}
inline void Vcu_brake_report_47::_internal_set_vcu_real_brake(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vcu_real_brake_ = value;
}
inline void Vcu_brake_report_47::set_vcu_real_brake(int32_t value) {
  _internal_set_vcu_real_brake(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_real_brake)
}

// optional int32 vcu_real_parking_status = 5;
inline bool Vcu_brake_report_47::_internal_has_vcu_real_parking_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_real_parking_status() const {
  return _internal_has_vcu_real_parking_status();
}
inline void Vcu_brake_report_47::clear_vcu_real_parking_status() {
  _impl_.vcu_real_parking_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Vcu_brake_report_47::_internal_vcu_real_parking_status() const {
  return _impl_.vcu_real_parking_status_;
}
inline int32_t Vcu_brake_report_47::vcu_real_parking_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_real_parking_status)
  return _internal_vcu_real_parking_status();
}
inline void Vcu_brake_report_47::_internal_set_vcu_real_parking_status(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vcu_real_parking_status_ = value;
}
inline void Vcu_brake_report_47::set_vcu_real_parking_status(int32_t value) {
  _internal_set_vcu_real_parking_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_real_parking_status)
}

// optional bool vcu_real_parking_valid = 6;
inline bool Vcu_brake_report_47::_internal_has_vcu_real_parking_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_real_parking_valid() const {
  return _internal_has_vcu_real_parking_valid();
}
inline void Vcu_brake_report_47::clear_vcu_real_parking_valid() {
  _impl_.vcu_real_parking_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Vcu_brake_report_47::_internal_vcu_real_parking_valid() const {
  return _impl_.vcu_real_parking_valid_;
}
inline bool Vcu_brake_report_47::vcu_real_parking_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_real_parking_valid)
  return _internal_vcu_real_parking_valid();
}
inline void Vcu_brake_report_47::_internal_set_vcu_real_parking_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vcu_real_parking_valid_ = value;
}
inline void Vcu_brake_report_47::set_vcu_real_parking_valid(bool value) {
  _internal_set_vcu_real_parking_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_real_parking_valid)
}

// optional bool rampauxiliaryindication = 7;
inline bool Vcu_brake_report_47::_internal_has_rampauxiliaryindication() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_rampauxiliaryindication() const {
  return _internal_has_rampauxiliaryindication();
}
inline void Vcu_brake_report_47::clear_rampauxiliaryindication() {
  _impl_.rampauxiliaryindication_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Vcu_brake_report_47::_internal_rampauxiliaryindication() const {
  return _impl_.rampauxiliaryindication_;
}
inline bool Vcu_brake_report_47::rampauxiliaryindication() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.rampauxiliaryindication)
  return _internal_rampauxiliaryindication();
}
inline void Vcu_brake_report_47::_internal_set_rampauxiliaryindication(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rampauxiliaryindication_ = value;
}
inline void Vcu_brake_report_47::set_rampauxiliaryindication(bool value) {
  _internal_set_rampauxiliaryindication(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.rampauxiliaryindication)
}

// optional double vehicleslope = 8;
inline bool Vcu_brake_report_47::_internal_has_vehicleslope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vehicleslope() const {
  return _internal_has_vehicleslope();
}
inline void Vcu_brake_report_47::clear_vehicleslope() {
  _impl_.vehicleslope_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Vcu_brake_report_47::_internal_vehicleslope() const {
  return _impl_.vehicleslope_;
}
inline double Vcu_brake_report_47::vehicleslope() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vehicleslope)
  return _internal_vehicleslope();
}
inline void Vcu_brake_report_47::_internal_set_vehicleslope(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vehicleslope_ = value;
}
inline void Vcu_brake_report_47::set_vehicleslope(double value) {
  _internal_set_vehicleslope(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vehicleslope)
}

// optional int32 vcu_brakerept_alivecounter = 9;
inline bool Vcu_brake_report_47::_internal_has_vcu_brakerept_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_brakerept_alivecounter() const {
  return _internal_has_vcu_brakerept_alivecounter();
}
inline void Vcu_brake_report_47::clear_vcu_brakerept_alivecounter() {
  _impl_.vcu_brakerept_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Vcu_brake_report_47::_internal_vcu_brakerept_alivecounter() const {
  return _impl_.vcu_brakerept_alivecounter_;
}
inline int32_t Vcu_brake_report_47::vcu_brakerept_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_brakerept_alivecounter)
  return _internal_vcu_brakerept_alivecounter();
}
inline void Vcu_brake_report_47::_internal_set_vcu_brakerept_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vcu_brakerept_alivecounter_ = value;
}
inline void Vcu_brake_report_47::set_vcu_brakerept_alivecounter(int32_t value) {
  _internal_set_vcu_brakerept_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_brakerept_alivecounter)
}

// optional int32 vcu_brakerept_checksum = 10;
inline bool Vcu_brake_report_47::_internal_has_vcu_brakerept_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vcu_brake_report_47::has_vcu_brakerept_checksum() const {
  return _internal_has_vcu_brakerept_checksum();
}
inline void Vcu_brake_report_47::clear_vcu_brakerept_checksum() {
  _impl_.vcu_brakerept_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t Vcu_brake_report_47::_internal_vcu_brakerept_checksum() const {
  return _impl_.vcu_brakerept_checksum_;
}
inline int32_t Vcu_brake_report_47::vcu_brakerept_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_brake_report_47.vcu_brakerept_checksum)
  return _internal_vcu_brakerept_checksum();
}
inline void Vcu_brake_report_47::_internal_set_vcu_brakerept_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.vcu_brakerept_checksum_ = value;
}
inline void Vcu_brake_report_47::set_vcu_brakerept_checksum(int32_t value) {
  _internal_set_vcu_brakerept_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_brake_report_47.vcu_brakerept_checksum)
}

// -------------------------------------------------------------------

// Vcu_eps_report_57

// optional bool drive_enable_resp = 1;
inline bool Vcu_eps_report_57::_internal_has_drive_enable_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_drive_enable_resp() const {
  return _internal_has_drive_enable_resp();
}
inline void Vcu_eps_report_57::clear_drive_enable_resp() {
  _impl_.drive_enable_resp_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Vcu_eps_report_57::_internal_drive_enable_resp() const {
  return _impl_.drive_enable_resp_;
}
inline bool Vcu_eps_report_57::drive_enable_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.drive_enable_resp)
  return _internal_drive_enable_resp();
}
inline void Vcu_eps_report_57::_internal_set_drive_enable_resp(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.drive_enable_resp_ = value;
}
inline void Vcu_eps_report_57::set_drive_enable_resp(bool value) {
  _internal_set_drive_enable_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.drive_enable_resp)
}

// optional .apollo.canbus.Vcu_eps_report_57.Control_mode_respType control_mode_resp = 2;
inline bool Vcu_eps_report_57::_internal_has_control_mode_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_control_mode_resp() const {
  return _internal_has_control_mode_resp();
}
inline void Vcu_eps_report_57::clear_control_mode_resp() {
  _impl_.control_mode_resp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::_internal_control_mode_resp() const {
  return static_cast< ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType >(_impl_.control_mode_resp_);
}
inline ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::control_mode_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.control_mode_resp)
  return _internal_control_mode_resp();
}
inline void Vcu_eps_report_57::_internal_set_control_mode_resp(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType value) {
  assert(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_mode_resp_ = value;
}
inline void Vcu_eps_report_57::set_control_mode_resp(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType value) {
  _internal_set_control_mode_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.control_mode_resp)
}

// optional bool vcu_eps_report = 3;
inline bool Vcu_eps_report_57::_internal_has_vcu_eps_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_eps_report() const {
  return _internal_has_vcu_eps_report();
}
inline void Vcu_eps_report_57::clear_vcu_eps_report() {
  _impl_.vcu_eps_report_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Vcu_eps_report_57::_internal_vcu_eps_report() const {
  return _impl_.vcu_eps_report_;
}
inline bool Vcu_eps_report_57::vcu_eps_report() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_eps_report)
  return _internal_vcu_eps_report();
}
inline void Vcu_eps_report_57::_internal_set_vcu_eps_report(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcu_eps_report_ = value;
}
inline void Vcu_eps_report_57::set_vcu_eps_report(bool value) {
  _internal_set_vcu_eps_report(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_eps_report)
}

// optional double vcu_real_angle = 4;
inline bool Vcu_eps_report_57::_internal_has_vcu_real_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_real_angle() const {
  return _internal_has_vcu_real_angle();
}
inline void Vcu_eps_report_57::clear_vcu_real_angle() {
  _impl_.vcu_real_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Vcu_eps_report_57::_internal_vcu_real_angle() const {
  return _impl_.vcu_real_angle_;
}
inline double Vcu_eps_report_57::vcu_real_angle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_real_angle)
  return _internal_vcu_real_angle();
}
inline void Vcu_eps_report_57::_internal_set_vcu_real_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vcu_real_angle_ = value;
}
inline void Vcu_eps_report_57::set_vcu_real_angle(double value) {
  _internal_set_vcu_real_angle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_real_angle)
}

// optional bool vcu_real_angle_valid = 5;
inline bool Vcu_eps_report_57::_internal_has_vcu_real_angle_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_real_angle_valid() const {
  return _internal_has_vcu_real_angle_valid();
}
inline void Vcu_eps_report_57::clear_vcu_real_angle_valid() {
  _impl_.vcu_real_angle_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Vcu_eps_report_57::_internal_vcu_real_angle_valid() const {
  return _impl_.vcu_real_angle_valid_;
}
inline bool Vcu_eps_report_57::vcu_real_angle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_real_angle_valid)
  return _internal_vcu_real_angle_valid();
}
inline void Vcu_eps_report_57::_internal_set_vcu_real_angle_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcu_real_angle_valid_ = value;
}
inline void Vcu_eps_report_57::set_vcu_real_angle_valid(bool value) {
  _internal_set_vcu_real_angle_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_real_angle_valid)
}

// optional bool vcu_target_angle_valid = 6;
inline bool Vcu_eps_report_57::_internal_has_vcu_target_angle_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_target_angle_valid() const {
  return _internal_has_vcu_target_angle_valid();
}
inline void Vcu_eps_report_57::clear_vcu_target_angle_valid() {
  _impl_.vcu_target_angle_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Vcu_eps_report_57::_internal_vcu_target_angle_valid() const {
  return _impl_.vcu_target_angle_valid_;
}
inline bool Vcu_eps_report_57::vcu_target_angle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_target_angle_valid)
  return _internal_vcu_target_angle_valid();
}
inline void Vcu_eps_report_57::_internal_set_vcu_target_angle_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vcu_target_angle_valid_ = value;
}
inline void Vcu_eps_report_57::set_vcu_target_angle_valid(bool value) {
  _internal_set_vcu_target_angle_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_target_angle_valid)
}

// optional double vcu_target_angle = 7;
inline bool Vcu_eps_report_57::_internal_has_vcu_target_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_target_angle() const {
  return _internal_has_vcu_target_angle();
}
inline void Vcu_eps_report_57::clear_vcu_target_angle() {
  _impl_.vcu_target_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double Vcu_eps_report_57::_internal_vcu_target_angle() const {
  return _impl_.vcu_target_angle_;
}
inline double Vcu_eps_report_57::vcu_target_angle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_target_angle)
  return _internal_vcu_target_angle();
}
inline void Vcu_eps_report_57::_internal_set_vcu_target_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vcu_target_angle_ = value;
}
inline void Vcu_eps_report_57::set_vcu_target_angle(double value) {
  _internal_set_vcu_target_angle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_target_angle)
}

// optional int32 vcu_eps_rept_alivecounter = 8;
inline bool Vcu_eps_report_57::_internal_has_vcu_eps_rept_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_eps_rept_alivecounter() const {
  return _internal_has_vcu_eps_rept_alivecounter();
}
inline void Vcu_eps_report_57::clear_vcu_eps_rept_alivecounter() {
  _impl_.vcu_eps_rept_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Vcu_eps_report_57::_internal_vcu_eps_rept_alivecounter() const {
  return _impl_.vcu_eps_rept_alivecounter_;
}
inline int32_t Vcu_eps_report_57::vcu_eps_rept_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_eps_rept_alivecounter)
  return _internal_vcu_eps_rept_alivecounter();
}
inline void Vcu_eps_report_57::_internal_set_vcu_eps_rept_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vcu_eps_rept_alivecounter_ = value;
}
inline void Vcu_eps_report_57::set_vcu_eps_rept_alivecounter(int32_t value) {
  _internal_set_vcu_eps_rept_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_eps_rept_alivecounter)
}

// optional int32 vcu_eps_rept_checksum = 9;
inline bool Vcu_eps_report_57::_internal_has_vcu_eps_rept_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcu_eps_report_57::has_vcu_eps_rept_checksum() const {
  return _internal_has_vcu_eps_rept_checksum();
}
inline void Vcu_eps_report_57::clear_vcu_eps_rept_checksum() {
  _impl_.vcu_eps_rept_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Vcu_eps_report_57::_internal_vcu_eps_rept_checksum() const {
  return _impl_.vcu_eps_rept_checksum_;
}
inline int32_t Vcu_eps_report_57::vcu_eps_rept_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_eps_report_57.vcu_eps_rept_checksum)
  return _internal_vcu_eps_rept_checksum();
}
inline void Vcu_eps_report_57::_internal_set_vcu_eps_rept_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vcu_eps_rept_checksum_ = value;
}
inline void Vcu_eps_report_57::set_vcu_eps_rept_checksum(int32_t value) {
  _internal_set_vcu_eps_rept_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_eps_report_57.vcu_eps_rept_checksum)
}

// -------------------------------------------------------------------

// Ads_eps_command_56

// optional bool drive_enable = 1;
inline bool Ads_eps_command_56::_internal_has_drive_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ads_eps_command_56::has_drive_enable() const {
  return _internal_has_drive_enable();
}
inline void Ads_eps_command_56::clear_drive_enable() {
  _impl_.drive_enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Ads_eps_command_56::_internal_drive_enable() const {
  return _impl_.drive_enable_;
}
inline bool Ads_eps_command_56::drive_enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_eps_command_56.drive_enable)
  return _internal_drive_enable();
}
inline void Ads_eps_command_56::_internal_set_drive_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.drive_enable_ = value;
}
inline void Ads_eps_command_56::set_drive_enable(bool value) {
  _internal_set_drive_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_eps_command_56.drive_enable)
}

// optional double auto_target_angle = 2;
inline bool Ads_eps_command_56::_internal_has_auto_target_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ads_eps_command_56::has_auto_target_angle() const {
  return _internal_has_auto_target_angle();
}
inline void Ads_eps_command_56::clear_auto_target_angle() {
  _impl_.auto_target_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ads_eps_command_56::_internal_auto_target_angle() const {
  return _impl_.auto_target_angle_;
}
inline double Ads_eps_command_56::auto_target_angle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_eps_command_56.auto_target_angle)
  return _internal_auto_target_angle();
}
inline void Ads_eps_command_56::_internal_set_auto_target_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.auto_target_angle_ = value;
}
inline void Ads_eps_command_56::set_auto_target_angle(double value) {
  _internal_set_auto_target_angle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_eps_command_56.auto_target_angle)
}

// optional int32 auto_drivercmd_alivecounter = 3;
inline bool Ads_eps_command_56::_internal_has_auto_drivercmd_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ads_eps_command_56::has_auto_drivercmd_alivecounter() const {
  return _internal_has_auto_drivercmd_alivecounter();
}
inline void Ads_eps_command_56::clear_auto_drivercmd_alivecounter() {
  _impl_.auto_drivercmd_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Ads_eps_command_56::_internal_auto_drivercmd_alivecounter() const {
  return _impl_.auto_drivercmd_alivecounter_;
}
inline int32_t Ads_eps_command_56::auto_drivercmd_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_eps_command_56.auto_drivercmd_alivecounter)
  return _internal_auto_drivercmd_alivecounter();
}
inline void Ads_eps_command_56::_internal_set_auto_drivercmd_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auto_drivercmd_alivecounter_ = value;
}
inline void Ads_eps_command_56::set_auto_drivercmd_alivecounter(int32_t value) {
  _internal_set_auto_drivercmd_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_eps_command_56.auto_drivercmd_alivecounter)
}

// optional int32 auto_drivercmd_checksum = 4;
inline bool Ads_eps_command_56::_internal_has_auto_drivercmd_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ads_eps_command_56::has_auto_drivercmd_checksum() const {
  return _internal_has_auto_drivercmd_checksum();
}
inline void Ads_eps_command_56::clear_auto_drivercmd_checksum() {
  _impl_.auto_drivercmd_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ads_eps_command_56::_internal_auto_drivercmd_checksum() const {
  return _impl_.auto_drivercmd_checksum_;
}
inline int32_t Ads_eps_command_56::auto_drivercmd_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_eps_command_56.auto_drivercmd_checksum)
  return _internal_auto_drivercmd_checksum();
}
inline void Ads_eps_command_56::_internal_set_auto_drivercmd_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auto_drivercmd_checksum_ = value;
}
inline void Ads_eps_command_56::set_auto_drivercmd_checksum(int32_t value) {
  _internal_set_auto_drivercmd_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_eps_command_56.auto_drivercmd_checksum)
}

// -------------------------------------------------------------------

// Ads_drive_command_50

// optional bool drive_enable = 1;
inline bool Ads_drive_command_50::_internal_has_drive_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ads_drive_command_50::has_drive_enable() const {
  return _internal_has_drive_enable();
}
inline void Ads_drive_command_50::clear_drive_enable() {
  _impl_.drive_enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Ads_drive_command_50::_internal_drive_enable() const {
  return _impl_.drive_enable_;
}
inline bool Ads_drive_command_50::drive_enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_drive_command_50.drive_enable)
  return _internal_drive_enable();
}
inline void Ads_drive_command_50::_internal_set_drive_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.drive_enable_ = value;
}
inline void Ads_drive_command_50::set_drive_enable(bool value) {
  _internal_set_drive_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_drive_command_50.drive_enable)
}

// optional .apollo.canbus.Ads_drive_command_50.Auto_shift_commandType auto_shift_command = 2;
inline bool Ads_drive_command_50::_internal_has_auto_shift_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ads_drive_command_50::has_auto_shift_command() const {
  return _internal_has_auto_shift_command();
}
inline void Ads_drive_command_50::clear_auto_shift_command() {
  _impl_.auto_shift_command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::_internal_auto_shift_command() const {
  return static_cast< ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType >(_impl_.auto_shift_command_);
}
inline ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::auto_shift_command() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_drive_command_50.auto_shift_command)
  return _internal_auto_shift_command();
}
inline void Ads_drive_command_50::_internal_set_auto_shift_command(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType value) {
  assert(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auto_shift_command_ = value;
}
inline void Ads_drive_command_50::set_auto_shift_command(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType value) {
  _internal_set_auto_shift_command(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_drive_command_50.auto_shift_command)
}

// optional double auto_drive_torque = 3;
inline bool Ads_drive_command_50::_internal_has_auto_drive_torque() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ads_drive_command_50::has_auto_drive_torque() const {
  return _internal_has_auto_drive_torque();
}
inline void Ads_drive_command_50::clear_auto_drive_torque() {
  _impl_.auto_drive_torque_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ads_drive_command_50::_internal_auto_drive_torque() const {
  return _impl_.auto_drive_torque_;
}
inline double Ads_drive_command_50::auto_drive_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_drive_command_50.auto_drive_torque)
  return _internal_auto_drive_torque();
}
inline void Ads_drive_command_50::_internal_set_auto_drive_torque(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auto_drive_torque_ = value;
}
inline void Ads_drive_command_50::set_auto_drive_torque(double value) {
  _internal_set_auto_drive_torque(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_drive_command_50.auto_drive_torque)
}

// optional int32 auto_drivercmd_alivecounter = 4;
inline bool Ads_drive_command_50::_internal_has_auto_drivercmd_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ads_drive_command_50::has_auto_drivercmd_alivecounter() const {
  return _internal_has_auto_drivercmd_alivecounter();
}
inline void Ads_drive_command_50::clear_auto_drivercmd_alivecounter() {
  _impl_.auto_drivercmd_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ads_drive_command_50::_internal_auto_drivercmd_alivecounter() const {
  return _impl_.auto_drivercmd_alivecounter_;
}
inline int32_t Ads_drive_command_50::auto_drivercmd_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_drive_command_50.auto_drivercmd_alivecounter)
  return _internal_auto_drivercmd_alivecounter();
}
inline void Ads_drive_command_50::_internal_set_auto_drivercmd_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auto_drivercmd_alivecounter_ = value;
}
inline void Ads_drive_command_50::set_auto_drivercmd_alivecounter(int32_t value) {
  _internal_set_auto_drivercmd_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_drive_command_50.auto_drivercmd_alivecounter)
}

// optional int32 auto_drivercmd_checksum = 5;
inline bool Ads_drive_command_50::_internal_has_auto_drivercmd_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ads_drive_command_50::has_auto_drivercmd_checksum() const {
  return _internal_has_auto_drivercmd_checksum();
}
inline void Ads_drive_command_50::clear_auto_drivercmd_checksum() {
  _impl_.auto_drivercmd_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Ads_drive_command_50::_internal_auto_drivercmd_checksum() const {
  return _impl_.auto_drivercmd_checksum_;
}
inline int32_t Ads_drive_command_50::auto_drivercmd_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_drive_command_50.auto_drivercmd_checksum)
  return _internal_auto_drivercmd_checksum();
}
inline void Ads_drive_command_50::_internal_set_auto_drivercmd_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auto_drivercmd_checksum_ = value;
}
inline void Ads_drive_command_50::set_auto_drivercmd_checksum(int32_t value) {
  _internal_set_auto_drivercmd_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_drive_command_50.auto_drivercmd_checksum)
}

// -------------------------------------------------------------------

// Vcu_drive_report_52

// optional bool drive_enable_resp = 1;
inline bool Vcu_drive_report_52::_internal_has_drive_enable_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_drive_enable_resp() const {
  return _internal_has_drive_enable_resp();
}
inline void Vcu_drive_report_52::clear_drive_enable_resp() {
  _impl_.drive_enable_resp_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Vcu_drive_report_52::_internal_drive_enable_resp() const {
  return _impl_.drive_enable_resp_;
}
inline bool Vcu_drive_report_52::drive_enable_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.drive_enable_resp)
  return _internal_drive_enable_resp();
}
inline void Vcu_drive_report_52::_internal_set_drive_enable_resp(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.drive_enable_resp_ = value;
}
inline void Vcu_drive_report_52::set_drive_enable_resp(bool value) {
  _internal_set_drive_enable_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.drive_enable_resp)
}

// optional .apollo.canbus.Vcu_drive_report_52.Control_mode_respType control_mode_resp = 2;
inline bool Vcu_drive_report_52::_internal_has_control_mode_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_control_mode_resp() const {
  return _internal_has_control_mode_resp();
}
inline void Vcu_drive_report_52::clear_control_mode_resp() {
  _impl_.control_mode_resp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::_internal_control_mode_resp() const {
  return static_cast< ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType >(_impl_.control_mode_resp_);
}
inline ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::control_mode_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.control_mode_resp)
  return _internal_control_mode_resp();
}
inline void Vcu_drive_report_52::_internal_set_control_mode_resp(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType value) {
  assert(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_mode_resp_ = value;
}
inline void Vcu_drive_report_52::set_control_mode_resp(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType value) {
  _internal_set_control_mode_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.control_mode_resp)
}

// optional .apollo.canbus.Vcu_drive_report_52.Vcu_real_shiftType vcu_real_shift = 3;
inline bool Vcu_drive_report_52::_internal_has_vcu_real_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_real_shift() const {
  return _internal_has_vcu_real_shift();
}
inline void Vcu_drive_report_52::clear_vcu_real_shift() {
  _impl_.vcu_real_shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::_internal_vcu_real_shift() const {
  return static_cast< ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType >(_impl_.vcu_real_shift_);
}
inline ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::vcu_real_shift() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_real_shift)
  return _internal_vcu_real_shift();
}
inline void Vcu_drive_report_52::_internal_set_vcu_real_shift(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType value) {
  assert(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vcu_real_shift_ = value;
}
inline void Vcu_drive_report_52::set_vcu_real_shift(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType value) {
  _internal_set_vcu_real_shift(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_real_shift)
}

// optional bool vcu_real_shift_valid = 4;
inline bool Vcu_drive_report_52::_internal_has_vcu_real_shift_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_real_shift_valid() const {
  return _internal_has_vcu_real_shift_valid();
}
inline void Vcu_drive_report_52::clear_vcu_real_shift_valid() {
  _impl_.vcu_real_shift_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Vcu_drive_report_52::_internal_vcu_real_shift_valid() const {
  return _impl_.vcu_real_shift_valid_;
}
inline bool Vcu_drive_report_52::vcu_real_shift_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_real_shift_valid)
  return _internal_vcu_real_shift_valid();
}
inline void Vcu_drive_report_52::_internal_set_vcu_real_shift_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcu_real_shift_valid_ = value;
}
inline void Vcu_drive_report_52::set_vcu_real_shift_valid(bool value) {
  _internal_set_vcu_real_shift_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_real_shift_valid)
}

// optional bool vcu_real_torque_valid = 5;
inline bool Vcu_drive_report_52::_internal_has_vcu_real_torque_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_real_torque_valid() const {
  return _internal_has_vcu_real_torque_valid();
}
inline void Vcu_drive_report_52::clear_vcu_real_torque_valid() {
  _impl_.vcu_real_torque_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Vcu_drive_report_52::_internal_vcu_real_torque_valid() const {
  return _impl_.vcu_real_torque_valid_;
}
inline bool Vcu_drive_report_52::vcu_real_torque_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_real_torque_valid)
  return _internal_vcu_real_torque_valid();
}
inline void Vcu_drive_report_52::_internal_set_vcu_real_torque_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vcu_real_torque_valid_ = value;
}
inline void Vcu_drive_report_52::set_vcu_real_torque_valid(bool value) {
  _internal_set_vcu_real_torque_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_real_torque_valid)
}

// optional double vcu_real_torque = 6;
inline bool Vcu_drive_report_52::_internal_has_vcu_real_torque() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_real_torque() const {
  return _internal_has_vcu_real_torque();
}
inline void Vcu_drive_report_52::clear_vcu_real_torque() {
  _impl_.vcu_real_torque_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Vcu_drive_report_52::_internal_vcu_real_torque() const {
  return _impl_.vcu_real_torque_;
}
inline double Vcu_drive_report_52::vcu_real_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_real_torque)
  return _internal_vcu_real_torque();
}
inline void Vcu_drive_report_52::_internal_set_vcu_real_torque(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vcu_real_torque_ = value;
}
inline void Vcu_drive_report_52::set_vcu_real_torque(double value) {
  _internal_set_vcu_real_torque(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_real_torque)
}

// optional bool vcu_limitedtorquemode = 7;
inline bool Vcu_drive_report_52::_internal_has_vcu_limitedtorquemode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_limitedtorquemode() const {
  return _internal_has_vcu_limitedtorquemode();
}
inline void Vcu_drive_report_52::clear_vcu_limitedtorquemode() {
  _impl_.vcu_limitedtorquemode_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Vcu_drive_report_52::_internal_vcu_limitedtorquemode() const {
  return _impl_.vcu_limitedtorquemode_;
}
inline bool Vcu_drive_report_52::vcu_limitedtorquemode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_limitedtorquemode)
  return _internal_vcu_limitedtorquemode();
}
inline void Vcu_drive_report_52::_internal_set_vcu_limitedtorquemode(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vcu_limitedtorquemode_ = value;
}
inline void Vcu_drive_report_52::set_vcu_limitedtorquemode(bool value) {
  _internal_set_vcu_limitedtorquemode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_limitedtorquemode)
}

// optional int32 vcu_driverept_alivecounter = 8;
inline bool Vcu_drive_report_52::_internal_has_vcu_driverept_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_driverept_alivecounter() const {
  return _internal_has_vcu_driverept_alivecounter();
}
inline void Vcu_drive_report_52::clear_vcu_driverept_alivecounter() {
  _impl_.vcu_driverept_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Vcu_drive_report_52::_internal_vcu_driverept_alivecounter() const {
  return _impl_.vcu_driverept_alivecounter_;
}
inline int32_t Vcu_drive_report_52::vcu_driverept_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_driverept_alivecounter)
  return _internal_vcu_driverept_alivecounter();
}
inline void Vcu_drive_report_52::_internal_set_vcu_driverept_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vcu_driverept_alivecounter_ = value;
}
inline void Vcu_drive_report_52::set_vcu_driverept_alivecounter(int32_t value) {
  _internal_set_vcu_driverept_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_driverept_alivecounter)
}

// optional int32 vcu_driverept_checksum = 9;
inline bool Vcu_drive_report_52::_internal_has_vcu_driverept_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcu_drive_report_52::has_vcu_driverept_checksum() const {
  return _internal_has_vcu_driverept_checksum();
}
inline void Vcu_drive_report_52::clear_vcu_driverept_checksum() {
  _impl_.vcu_driverept_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Vcu_drive_report_52::_internal_vcu_driverept_checksum() const {
  return _impl_.vcu_driverept_checksum_;
}
inline int32_t Vcu_drive_report_52::vcu_driverept_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_drive_report_52.vcu_driverept_checksum)
  return _internal_vcu_driverept_checksum();
}
inline void Vcu_drive_report_52::_internal_set_vcu_driverept_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vcu_driverept_checksum_ = value;
}
inline void Vcu_drive_report_52::set_vcu_driverept_checksum(int32_t value) {
  _internal_set_vcu_driverept_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_drive_report_52.vcu_driverept_checksum)
}

// -------------------------------------------------------------------

// Ads_diagnosis_628

// optional int32 faultrank = 1;
inline bool Ads_diagnosis_628::_internal_has_faultrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ads_diagnosis_628::has_faultrank() const {
  return _internal_has_faultrank();
}
inline void Ads_diagnosis_628::clear_faultrank() {
  _impl_.faultrank_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Ads_diagnosis_628::_internal_faultrank() const {
  return _impl_.faultrank_;
}
inline int32_t Ads_diagnosis_628::faultrank() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_diagnosis_628.faultrank)
  return _internal_faultrank();
}
inline void Ads_diagnosis_628::_internal_set_faultrank(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.faultrank_ = value;
}
inline void Ads_diagnosis_628::set_faultrank(int32_t value) {
  _internal_set_faultrank(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_diagnosis_628.faultrank)
}

// optional int32 adas_fault_code = 2;
inline bool Ads_diagnosis_628::_internal_has_adas_fault_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ads_diagnosis_628::has_adas_fault_code() const {
  return _internal_has_adas_fault_code();
}
inline void Ads_diagnosis_628::clear_adas_fault_code() {
  _impl_.adas_fault_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Ads_diagnosis_628::_internal_adas_fault_code() const {
  return _impl_.adas_fault_code_;
}
inline int32_t Ads_diagnosis_628::adas_fault_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_diagnosis_628.adas_fault_code)
  return _internal_adas_fault_code();
}
inline void Ads_diagnosis_628::_internal_set_adas_fault_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adas_fault_code_ = value;
}
inline void Ads_diagnosis_628::set_adas_fault_code(int32_t value) {
  _internal_set_adas_fault_code(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_diagnosis_628.adas_fault_code)
}

// optional int32 adas_softwareversion = 3;
inline bool Ads_diagnosis_628::_internal_has_adas_softwareversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ads_diagnosis_628::has_adas_softwareversion() const {
  return _internal_has_adas_softwareversion();
}
inline void Ads_diagnosis_628::clear_adas_softwareversion() {
  _impl_.adas_softwareversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Ads_diagnosis_628::_internal_adas_softwareversion() const {
  return _impl_.adas_softwareversion_;
}
inline int32_t Ads_diagnosis_628::adas_softwareversion() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_diagnosis_628.adas_softwareversion)
  return _internal_adas_softwareversion();
}
inline void Ads_diagnosis_628::_internal_set_adas_softwareversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.adas_softwareversion_ = value;
}
inline void Ads_diagnosis_628::set_adas_softwareversion(int32_t value) {
  _internal_set_adas_softwareversion(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_diagnosis_628.adas_softwareversion)
}

// optional int32 adas_hardwareversion = 4;
inline bool Ads_diagnosis_628::_internal_has_adas_hardwareversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ads_diagnosis_628::has_adas_hardwareversion() const {
  return _internal_has_adas_hardwareversion();
}
inline void Ads_diagnosis_628::clear_adas_hardwareversion() {
  _impl_.adas_hardwareversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ads_diagnosis_628::_internal_adas_hardwareversion() const {
  return _impl_.adas_hardwareversion_;
}
inline int32_t Ads_diagnosis_628::adas_hardwareversion() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ads_diagnosis_628.adas_hardwareversion)
  return _internal_adas_hardwareversion();
}
inline void Ads_diagnosis_628::_internal_set_adas_hardwareversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.adas_hardwareversion_ = value;
}
inline void Ads_diagnosis_628::set_adas_hardwareversion(int32_t value) {
  _internal_set_adas_hardwareversion(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ads_diagnosis_628.adas_hardwareversion)
}

// -------------------------------------------------------------------

// Vcu_nm_401

// optional bool vcu_sleepcommand = 1;
inline bool Vcu_nm_401::_internal_has_vcu_sleepcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_nm_401::has_vcu_sleepcommand() const {
  return _internal_has_vcu_sleepcommand();
}
inline void Vcu_nm_401::clear_vcu_sleepcommand() {
  _impl_.vcu_sleepcommand_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Vcu_nm_401::_internal_vcu_sleepcommand() const {
  return _impl_.vcu_sleepcommand_;
}
inline bool Vcu_nm_401::vcu_sleepcommand() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_nm_401.vcu_sleepcommand)
  return _internal_vcu_sleepcommand();
}
inline void Vcu_nm_401::_internal_set_vcu_sleepcommand(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcu_sleepcommand_ = value;
}
inline void Vcu_nm_401::set_vcu_sleepcommand(bool value) {
  _internal_set_vcu_sleepcommand(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_nm_401.vcu_sleepcommand)
}

// -------------------------------------------------------------------

// Vcu_vehicle_status_report_101

// optional bool drive_enable_resp = 1;
inline bool Vcu_vehicle_status_report_101::_internal_has_drive_enable_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_drive_enable_resp() const {
  return _internal_has_drive_enable_resp();
}
inline void Vcu_vehicle_status_report_101::clear_drive_enable_resp() {
  _impl_.drive_enable_resp_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Vcu_vehicle_status_report_101::_internal_drive_enable_resp() const {
  return _impl_.drive_enable_resp_;
}
inline bool Vcu_vehicle_status_report_101::drive_enable_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.drive_enable_resp)
  return _internal_drive_enable_resp();
}
inline void Vcu_vehicle_status_report_101::_internal_set_drive_enable_resp(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.drive_enable_resp_ = value;
}
inline void Vcu_vehicle_status_report_101::set_drive_enable_resp(bool value) {
  _internal_set_drive_enable_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.drive_enable_resp)
}

// optional bool vcu_highvoltagecircuitstate = 2;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_highvoltagecircuitstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_highvoltagecircuitstate() const {
  return _internal_has_vcu_highvoltagecircuitstate();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_highvoltagecircuitstate() {
  _impl_.vcu_highvoltagecircuitstate_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Vcu_vehicle_status_report_101::_internal_vcu_highvoltagecircuitstate() const {
  return _impl_.vcu_highvoltagecircuitstate_;
}
inline bool Vcu_vehicle_status_report_101::vcu_highvoltagecircuitstate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_highvoltagecircuitstate)
  return _internal_vcu_highvoltagecircuitstate();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_highvoltagecircuitstate(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcu_highvoltagecircuitstate_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_highvoltagecircuitstate(bool value) {
  _internal_set_vcu_highvoltagecircuitstate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_highvoltagecircuitstate)
}

// optional bool vcu_dcdc_enabledstates = 3;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_dcdc_enabledstates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_dcdc_enabledstates() const {
  return _internal_has_vcu_dcdc_enabledstates();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_dcdc_enabledstates() {
  _impl_.vcu_dcdc_enabledstates_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Vcu_vehicle_status_report_101::_internal_vcu_dcdc_enabledstates() const {
  return _impl_.vcu_dcdc_enabledstates_;
}
inline bool Vcu_vehicle_status_report_101::vcu_dcdc_enabledstates() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_dcdc_enabledstates)
  return _internal_vcu_dcdc_enabledstates();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_dcdc_enabledstates(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcu_dcdc_enabledstates_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_dcdc_enabledstates(bool value) {
  _internal_set_vcu_dcdc_enabledstates(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_dcdc_enabledstates)
}

// optional .apollo.canbus.Vcu_vehicle_status_report_101.Control_mode_respType control_mode_resp = 4;
inline bool Vcu_vehicle_status_report_101::_internal_has_control_mode_resp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_control_mode_resp() const {
  return _internal_has_control_mode_resp();
}
inline void Vcu_vehicle_status_report_101::clear_control_mode_resp() {
  _impl_.control_mode_resp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::_internal_control_mode_resp() const {
  return static_cast< ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType >(_impl_.control_mode_resp_);
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::control_mode_resp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.control_mode_resp)
  return _internal_control_mode_resp();
}
inline void Vcu_vehicle_status_report_101::_internal_set_control_mode_resp(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType value) {
  assert(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.control_mode_resp_ = value;
}
inline void Vcu_vehicle_status_report_101::set_control_mode_resp(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType value) {
  _internal_set_control_mode_resp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.control_mode_resp)
}

// optional double vcu_vehicle_speed = 5;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_vehicle_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_vehicle_speed() const {
  return _internal_has_vcu_vehicle_speed();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_vehicle_speed() {
  _impl_.vcu_vehicle_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Vcu_vehicle_status_report_101::_internal_vcu_vehicle_speed() const {
  return _impl_.vcu_vehicle_speed_;
}
inline double Vcu_vehicle_status_report_101::vcu_vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_vehicle_speed)
  return _internal_vcu_vehicle_speed();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_vehicle_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vcu_vehicle_speed_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_vehicle_speed(double value) {
  _internal_set_vcu_vehicle_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_vehicle_speed)
}

// optional int32 vcu_lowbatterychargingfunctionst = 6;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_lowbatterychargingfunctionst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_lowbatterychargingfunctionst() const {
  return _internal_has_vcu_lowbatterychargingfunctionst();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_lowbatterychargingfunctionst() {
  _impl_.vcu_lowbatterychargingfunctionst_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Vcu_vehicle_status_report_101::_internal_vcu_lowbatterychargingfunctionst() const {
  return _impl_.vcu_lowbatterychargingfunctionst_;
}
inline int32_t Vcu_vehicle_status_report_101::vcu_lowbatterychargingfunctionst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_lowbatterychargingfunctionst)
  return _internal_vcu_lowbatterychargingfunctionst();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_lowbatterychargingfunctionst(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vcu_lowbatterychargingfunctionst_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_lowbatterychargingfunctionst(int32_t value) {
  _internal_set_vcu_lowbatterychargingfunctionst(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_lowbatterychargingfunctionst)
}

// optional int32 vcu_display_soc = 7;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_display_soc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_display_soc() const {
  return _internal_has_vcu_display_soc();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_display_soc() {
  _impl_.vcu_display_soc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Vcu_vehicle_status_report_101::_internal_vcu_display_soc() const {
  return _impl_.vcu_display_soc_;
}
inline int32_t Vcu_vehicle_status_report_101::vcu_display_soc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_display_soc)
  return _internal_vcu_display_soc();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_display_soc(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vcu_display_soc_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_display_soc(int32_t value) {
  _internal_set_vcu_display_soc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_display_soc)
}

// optional double vcu_motor_speed = 8;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_motor_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_motor_speed() const {
  return _internal_has_vcu_motor_speed();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_motor_speed() {
  _impl_.vcu_motor_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Vcu_vehicle_status_report_101::_internal_vcu_motor_speed() const {
  return _impl_.vcu_motor_speed_;
}
inline double Vcu_vehicle_status_report_101::vcu_motor_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_speed)
  return _internal_vcu_motor_speed();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_motor_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vcu_motor_speed_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_motor_speed(double value) {
  _internal_set_vcu_motor_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_speed)
}

// optional int32 vcu_motor_direction = 9;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_motor_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_motor_direction() const {
  return _internal_has_vcu_motor_direction();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_motor_direction() {
  _impl_.vcu_motor_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t Vcu_vehicle_status_report_101::_internal_vcu_motor_direction() const {
  return _impl_.vcu_motor_direction_;
}
inline int32_t Vcu_vehicle_status_report_101::vcu_motor_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_direction)
  return _internal_vcu_motor_direction();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_motor_direction(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.vcu_motor_direction_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_motor_direction(int32_t value) {
  _internal_set_vcu_motor_direction(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_direction)
}

// optional bool vcu_motor_speed_valid = 10;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_motor_speed_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_motor_speed_valid() const {
  return _internal_has_vcu_motor_speed_valid();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_motor_speed_valid() {
  _impl_.vcu_motor_speed_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Vcu_vehicle_status_report_101::_internal_vcu_motor_speed_valid() const {
  return _impl_.vcu_motor_speed_valid_;
}
inline bool Vcu_vehicle_status_report_101::vcu_motor_speed_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_speed_valid)
  return _internal_vcu_motor_speed_valid();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_motor_speed_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vcu_motor_speed_valid_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_motor_speed_valid(bool value) {
  _internal_set_vcu_motor_speed_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_motor_speed_valid)
}

// optional int32 vcu_statusrept_alivecounter = 11;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_statusrept_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_statusrept_alivecounter() const {
  return _internal_has_vcu_statusrept_alivecounter();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_statusrept_alivecounter() {
  _impl_.vcu_statusrept_alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t Vcu_vehicle_status_report_101::_internal_vcu_statusrept_alivecounter() const {
  return _impl_.vcu_statusrept_alivecounter_;
}
inline int32_t Vcu_vehicle_status_report_101::vcu_statusrept_alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_statusrept_alivecounter)
  return _internal_vcu_statusrept_alivecounter();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_statusrept_alivecounter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.vcu_statusrept_alivecounter_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_statusrept_alivecounter(int32_t value) {
  _internal_set_vcu_statusrept_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_statusrept_alivecounter)
}

// optional int32 vcu_statusrept_checksum = 12;
inline bool Vcu_vehicle_status_report_101::_internal_has_vcu_statusrept_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vcu_vehicle_status_report_101::has_vcu_statusrept_checksum() const {
  return _internal_has_vcu_statusrept_checksum();
}
inline void Vcu_vehicle_status_report_101::clear_vcu_statusrept_checksum() {
  _impl_.vcu_statusrept_checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Vcu_vehicle_status_report_101::_internal_vcu_statusrept_checksum() const {
  return _impl_.vcu_statusrept_checksum_;
}
inline int32_t Vcu_vehicle_status_report_101::vcu_statusrept_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_status_report_101.vcu_statusrept_checksum)
  return _internal_vcu_statusrept_checksum();
}
inline void Vcu_vehicle_status_report_101::_internal_set_vcu_statusrept_checksum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.vcu_statusrept_checksum_ = value;
}
inline void Vcu_vehicle_status_report_101::set_vcu_statusrept_checksum(int32_t value) {
  _internal_set_vcu_statusrept_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_status_report_101.vcu_statusrept_checksum)
}

// -------------------------------------------------------------------

// Vcu_vehicle_info_response_502

// optional int32 vehicle_softwareversion_indicati = 1;
inline bool Vcu_vehicle_info_response_502::_internal_has_vehicle_softwareversion_indicati() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_vehicle_softwareversion_indicati() const {
  return _internal_has_vehicle_softwareversion_indicati();
}
inline void Vcu_vehicle_info_response_502::clear_vehicle_softwareversion_indicati() {
  _impl_.vehicle_softwareversion_indicati_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_vehicle_softwareversion_indicati() const {
  return _impl_.vehicle_softwareversion_indicati_;
}
inline int32_t Vcu_vehicle_info_response_502::vehicle_softwareversion_indicati() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.vehicle_softwareversion_indicati)
  return _internal_vehicle_softwareversion_indicati();
}
inline void Vcu_vehicle_info_response_502::_internal_set_vehicle_softwareversion_indicati(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vehicle_softwareversion_indicati_ = value;
}
inline void Vcu_vehicle_info_response_502::set_vehicle_softwareversion_indicati(int32_t value) {
  _internal_set_vehicle_softwareversion_indicati(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.vehicle_softwareversion_indicati)
}

// optional int32 project = 2;
inline bool Vcu_vehicle_info_response_502::_internal_has_project() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_project() const {
  return _internal_has_project();
}
inline void Vcu_vehicle_info_response_502::clear_project() {
  _impl_.project_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_project() const {
  return _impl_.project_;
}
inline int32_t Vcu_vehicle_info_response_502::project() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.project)
  return _internal_project();
}
inline void Vcu_vehicle_info_response_502::_internal_set_project(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.project_ = value;
}
inline void Vcu_vehicle_info_response_502::set_project(int32_t value) {
  _internal_set_project(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.project)
}

// optional int32 manufacturer = 3;
inline bool Vcu_vehicle_info_response_502::_internal_has_manufacturer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void Vcu_vehicle_info_response_502::clear_manufacturer() {
  _impl_.manufacturer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_manufacturer() const {
  return _impl_.manufacturer_;
}
inline int32_t Vcu_vehicle_info_response_502::manufacturer() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.manufacturer)
  return _internal_manufacturer();
}
inline void Vcu_vehicle_info_response_502::_internal_set_manufacturer(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.manufacturer_ = value;
}
inline void Vcu_vehicle_info_response_502::set_manufacturer(int32_t value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.manufacturer)
}

// optional int32 year = 4;
inline bool Vcu_vehicle_info_response_502::_internal_has_year() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_year() const {
  return _internal_has_year();
}
inline void Vcu_vehicle_info_response_502::clear_year() {
  _impl_.year_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_year() const {
  return _impl_.year_;
}
inline int32_t Vcu_vehicle_info_response_502::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.year)
  return _internal_year();
}
inline void Vcu_vehicle_info_response_502::_internal_set_year(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.year_ = value;
}
inline void Vcu_vehicle_info_response_502::set_year(int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.year)
}

// optional int32 month = 5;
inline bool Vcu_vehicle_info_response_502::_internal_has_month() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_month() const {
  return _internal_has_month();
}
inline void Vcu_vehicle_info_response_502::clear_month() {
  _impl_.month_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_month() const {
  return _impl_.month_;
}
inline int32_t Vcu_vehicle_info_response_502::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.month)
  return _internal_month();
}
inline void Vcu_vehicle_info_response_502::_internal_set_month(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.month_ = value;
}
inline void Vcu_vehicle_info_response_502::set_month(int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.month)
}

// optional int32 day = 6;
inline bool Vcu_vehicle_info_response_502::_internal_has_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_day() const {
  return _internal_has_day();
}
inline void Vcu_vehicle_info_response_502::clear_day() {
  _impl_.day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_day() const {
  return _impl_.day_;
}
inline int32_t Vcu_vehicle_info_response_502::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.day)
  return _internal_day();
}
inline void Vcu_vehicle_info_response_502::_internal_set_day(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.day_ = value;
}
inline void Vcu_vehicle_info_response_502::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.day)
}

// optional int32 vehicle_serial_number = 7;
inline bool Vcu_vehicle_info_response_502::_internal_has_vehicle_serial_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcu_vehicle_info_response_502::has_vehicle_serial_number() const {
  return _internal_has_vehicle_serial_number();
}
inline void Vcu_vehicle_info_response_502::clear_vehicle_serial_number() {
  _impl_.vehicle_serial_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Vcu_vehicle_info_response_502::_internal_vehicle_serial_number() const {
  return _impl_.vehicle_serial_number_;
}
inline int32_t Vcu_vehicle_info_response_502::vehicle_serial_number() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_vehicle_info_response_502.vehicle_serial_number)
  return _internal_vehicle_serial_number();
}
inline void Vcu_vehicle_info_response_502::_internal_set_vehicle_serial_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vehicle_serial_number_ = value;
}
inline void Vcu_vehicle_info_response_502::set_vehicle_serial_number(int32_t value) {
  _internal_set_vehicle_serial_number(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_vehicle_info_response_502.vehicle_serial_number)
}

// -------------------------------------------------------------------

// Aeb_diagnosis1_626

// optional double aeb_softwareversion = 1;
inline bool Aeb_diagnosis1_626::_internal_has_aeb_softwareversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_diagnosis1_626::has_aeb_softwareversion() const {
  return _internal_has_aeb_softwareversion();
}
inline void Aeb_diagnosis1_626::clear_aeb_softwareversion() {
  _impl_.aeb_softwareversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Aeb_diagnosis1_626::_internal_aeb_softwareversion() const {
  return _impl_.aeb_softwareversion_;
}
inline double Aeb_diagnosis1_626::aeb_softwareversion() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_diagnosis1_626.aeb_softwareversion)
  return _internal_aeb_softwareversion();
}
inline void Aeb_diagnosis1_626::_internal_set_aeb_softwareversion(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.aeb_softwareversion_ = value;
}
inline void Aeb_diagnosis1_626::set_aeb_softwareversion(double value) {
  _internal_set_aeb_softwareversion(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_diagnosis1_626.aeb_softwareversion)
}

// optional double aeb_hardwareversion = 2;
inline bool Aeb_diagnosis1_626::_internal_has_aeb_hardwareversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aeb_diagnosis1_626::has_aeb_hardwareversion() const {
  return _internal_has_aeb_hardwareversion();
}
inline void Aeb_diagnosis1_626::clear_aeb_hardwareversion() {
  _impl_.aeb_hardwareversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Aeb_diagnosis1_626::_internal_aeb_hardwareversion() const {
  return _impl_.aeb_hardwareversion_;
}
inline double Aeb_diagnosis1_626::aeb_hardwareversion() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_diagnosis1_626.aeb_hardwareversion)
  return _internal_aeb_hardwareversion();
}
inline void Aeb_diagnosis1_626::_internal_set_aeb_hardwareversion(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.aeb_hardwareversion_ = value;
}
inline void Aeb_diagnosis1_626::set_aeb_hardwareversion(double value) {
  _internal_set_aeb_hardwareversion(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_diagnosis1_626.aeb_hardwareversion)
}

// -------------------------------------------------------------------

// Aeb_diagresp_718

// optional bool aeb_diagresp = 1;
inline bool Aeb_diagresp_718::_internal_has_aeb_diagresp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_diagresp_718::has_aeb_diagresp() const {
  return _internal_has_aeb_diagresp();
}
inline void Aeb_diagresp_718::clear_aeb_diagresp() {
  _impl_.aeb_diagresp_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Aeb_diagresp_718::_internal_aeb_diagresp() const {
  return _impl_.aeb_diagresp_;
}
inline bool Aeb_diagresp_718::aeb_diagresp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_diagresp_718.aeb_diagresp)
  return _internal_aeb_diagresp();
}
inline void Aeb_diagresp_718::_internal_set_aeb_diagresp(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.aeb_diagresp_ = value;
}
inline void Aeb_diagresp_718::set_aeb_diagresp(bool value) {
  _internal_set_aeb_diagresp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_diagresp_718.aeb_diagresp)
}

// -------------------------------------------------------------------

// Pas_1st_data_311

// optional double pasdistance4 = 1;
inline bool Pas_1st_data_311::_internal_has_pasdistance4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pasdistance4() const {
  return _internal_has_pasdistance4();
}
inline void Pas_1st_data_311::clear_pasdistance4() {
  _impl_.pasdistance4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Pas_1st_data_311::_internal_pasdistance4() const {
  return _impl_.pasdistance4_;
}
inline double Pas_1st_data_311::pasdistance4() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pasdistance4)
  return _internal_pasdistance4();
}
inline void Pas_1st_data_311::_internal_set_pasdistance4(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pasdistance4_ = value;
}
inline void Pas_1st_data_311::set_pasdistance4(double value) {
  _internal_set_pasdistance4(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pasdistance4)
}

// optional double pasdistance3 = 2;
inline bool Pas_1st_data_311::_internal_has_pasdistance3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pasdistance3() const {
  return _internal_has_pasdistance3();
}
inline void Pas_1st_data_311::clear_pasdistance3() {
  _impl_.pasdistance3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Pas_1st_data_311::_internal_pasdistance3() const {
  return _impl_.pasdistance3_;
}
inline double Pas_1st_data_311::pasdistance3() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pasdistance3)
  return _internal_pasdistance3();
}
inline void Pas_1st_data_311::_internal_set_pasdistance3(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pasdistance3_ = value;
}
inline void Pas_1st_data_311::set_pasdistance3(double value) {
  _internal_set_pasdistance3(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pasdistance3)
}

// optional bool pas_f1_status = 3;
inline bool Pas_1st_data_311::_internal_has_pas_f1_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pas_f1_status() const {
  return _internal_has_pas_f1_status();
}
inline void Pas_1st_data_311::clear_pas_f1_status() {
  _impl_.pas_f1_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Pas_1st_data_311::_internal_pas_f1_status() const {
  return _impl_.pas_f1_status_;
}
inline bool Pas_1st_data_311::pas_f1_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pas_f1_status)
  return _internal_pas_f1_status();
}
inline void Pas_1st_data_311::_internal_set_pas_f1_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pas_f1_status_ = value;
}
inline void Pas_1st_data_311::set_pas_f1_status(bool value) {
  _internal_set_pas_f1_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pas_f1_status)
}

// optional bool pas_f2_status = 4;
inline bool Pas_1st_data_311::_internal_has_pas_f2_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pas_f2_status() const {
  return _internal_has_pas_f2_status();
}
inline void Pas_1st_data_311::clear_pas_f2_status() {
  _impl_.pas_f2_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Pas_1st_data_311::_internal_pas_f2_status() const {
  return _impl_.pas_f2_status_;
}
inline bool Pas_1st_data_311::pas_f2_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pas_f2_status)
  return _internal_pas_f2_status();
}
inline void Pas_1st_data_311::_internal_set_pas_f2_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pas_f2_status_ = value;
}
inline void Pas_1st_data_311::set_pas_f2_status(bool value) {
  _internal_set_pas_f2_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pas_f2_status)
}

// optional bool pas_f3_status = 5;
inline bool Pas_1st_data_311::_internal_has_pas_f3_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pas_f3_status() const {
  return _internal_has_pas_f3_status();
}
inline void Pas_1st_data_311::clear_pas_f3_status() {
  _impl_.pas_f3_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Pas_1st_data_311::_internal_pas_f3_status() const {
  return _impl_.pas_f3_status_;
}
inline bool Pas_1st_data_311::pas_f3_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pas_f3_status)
  return _internal_pas_f3_status();
}
inline void Pas_1st_data_311::_internal_set_pas_f3_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pas_f3_status_ = value;
}
inline void Pas_1st_data_311::set_pas_f3_status(bool value) {
  _internal_set_pas_f3_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pas_f3_status)
}

// optional bool pas_f4_status = 6;
inline bool Pas_1st_data_311::_internal_has_pas_f4_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pas_f4_status() const {
  return _internal_has_pas_f4_status();
}
inline void Pas_1st_data_311::clear_pas_f4_status() {
  _impl_.pas_f4_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Pas_1st_data_311::_internal_pas_f4_status() const {
  return _impl_.pas_f4_status_;
}
inline bool Pas_1st_data_311::pas_f4_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pas_f4_status)
  return _internal_pas_f4_status();
}
inline void Pas_1st_data_311::_internal_set_pas_f4_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pas_f4_status_ = value;
}
inline void Pas_1st_data_311::set_pas_f4_status(bool value) {
  _internal_set_pas_f4_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pas_f4_status)
}

// optional double pasdistance2 = 7;
inline bool Pas_1st_data_311::_internal_has_pasdistance2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pasdistance2() const {
  return _internal_has_pasdistance2();
}
inline void Pas_1st_data_311::clear_pasdistance2() {
  _impl_.pasdistance2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Pas_1st_data_311::_internal_pasdistance2() const {
  return _impl_.pasdistance2_;
}
inline double Pas_1st_data_311::pasdistance2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pasdistance2)
  return _internal_pasdistance2();
}
inline void Pas_1st_data_311::_internal_set_pasdistance2(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pasdistance2_ = value;
}
inline void Pas_1st_data_311::set_pasdistance2(double value) {
  _internal_set_pasdistance2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pasdistance2)
}

// optional double pasdistance1 = 8;
inline bool Pas_1st_data_311::_internal_has_pasdistance1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pas_1st_data_311::has_pasdistance1() const {
  return _internal_has_pasdistance1();
}
inline void Pas_1st_data_311::clear_pasdistance1() {
  _impl_.pasdistance1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Pas_1st_data_311::_internal_pasdistance1() const {
  return _impl_.pasdistance1_;
}
inline double Pas_1st_data_311::pasdistance1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_1st_data_311.pasdistance1)
  return _internal_pasdistance1();
}
inline void Pas_1st_data_311::_internal_set_pasdistance1(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pasdistance1_ = value;
}
inline void Pas_1st_data_311::set_pasdistance1(double value) {
  _internal_set_pasdistance1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_1st_data_311.pasdistance1)
}

// -------------------------------------------------------------------

// Pas_2nd_data_312

// optional bool pas_b1_status = 1;
inline bool Pas_2nd_data_312::_internal_has_pas_b1_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pas_b1_status() const {
  return _internal_has_pas_b1_status();
}
inline void Pas_2nd_data_312::clear_pas_b1_status() {
  _impl_.pas_b1_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Pas_2nd_data_312::_internal_pas_b1_status() const {
  return _impl_.pas_b1_status_;
}
inline bool Pas_2nd_data_312::pas_b1_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pas_b1_status)
  return _internal_pas_b1_status();
}
inline void Pas_2nd_data_312::_internal_set_pas_b1_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pas_b1_status_ = value;
}
inline void Pas_2nd_data_312::set_pas_b1_status(bool value) {
  _internal_set_pas_b1_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pas_b1_status)
}

// optional bool pas_b2_status = 2;
inline bool Pas_2nd_data_312::_internal_has_pas_b2_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pas_b2_status() const {
  return _internal_has_pas_b2_status();
}
inline void Pas_2nd_data_312::clear_pas_b2_status() {
  _impl_.pas_b2_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Pas_2nd_data_312::_internal_pas_b2_status() const {
  return _impl_.pas_b2_status_;
}
inline bool Pas_2nd_data_312::pas_b2_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pas_b2_status)
  return _internal_pas_b2_status();
}
inline void Pas_2nd_data_312::_internal_set_pas_b2_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pas_b2_status_ = value;
}
inline void Pas_2nd_data_312::set_pas_b2_status(bool value) {
  _internal_set_pas_b2_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pas_b2_status)
}

// optional bool pas_b3_status = 3;
inline bool Pas_2nd_data_312::_internal_has_pas_b3_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pas_b3_status() const {
  return _internal_has_pas_b3_status();
}
inline void Pas_2nd_data_312::clear_pas_b3_status() {
  _impl_.pas_b3_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Pas_2nd_data_312::_internal_pas_b3_status() const {
  return _impl_.pas_b3_status_;
}
inline bool Pas_2nd_data_312::pas_b3_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pas_b3_status)
  return _internal_pas_b3_status();
}
inline void Pas_2nd_data_312::_internal_set_pas_b3_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pas_b3_status_ = value;
}
inline void Pas_2nd_data_312::set_pas_b3_status(bool value) {
  _internal_set_pas_b3_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pas_b3_status)
}

// optional bool pas_b4_status = 4;
inline bool Pas_2nd_data_312::_internal_has_pas_b4_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pas_b4_status() const {
  return _internal_has_pas_b4_status();
}
inline void Pas_2nd_data_312::clear_pas_b4_status() {
  _impl_.pas_b4_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Pas_2nd_data_312::_internal_pas_b4_status() const {
  return _impl_.pas_b4_status_;
}
inline bool Pas_2nd_data_312::pas_b4_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pas_b4_status)
  return _internal_pas_b4_status();
}
inline void Pas_2nd_data_312::_internal_set_pas_b4_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pas_b4_status_ = value;
}
inline void Pas_2nd_data_312::set_pas_b4_status(bool value) {
  _internal_set_pas_b4_status(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pas_b4_status)
}

// optional double pasdistance1 = 5;
inline bool Pas_2nd_data_312::_internal_has_pasdistance1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pasdistance1() const {
  return _internal_has_pasdistance1();
}
inline void Pas_2nd_data_312::clear_pasdistance1() {
  _impl_.pasdistance1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Pas_2nd_data_312::_internal_pasdistance1() const {
  return _impl_.pasdistance1_;
}
inline double Pas_2nd_data_312::pasdistance1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pasdistance1)
  return _internal_pasdistance1();
}
inline void Pas_2nd_data_312::_internal_set_pasdistance1(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pasdistance1_ = value;
}
inline void Pas_2nd_data_312::set_pasdistance1(double value) {
  _internal_set_pasdistance1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pasdistance1)
}

// optional double pasdistance2 = 6;
inline bool Pas_2nd_data_312::_internal_has_pasdistance2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pasdistance2() const {
  return _internal_has_pasdistance2();
}
inline void Pas_2nd_data_312::clear_pasdistance2() {
  _impl_.pasdistance2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Pas_2nd_data_312::_internal_pasdistance2() const {
  return _impl_.pasdistance2_;
}
inline double Pas_2nd_data_312::pasdistance2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pasdistance2)
  return _internal_pasdistance2();
}
inline void Pas_2nd_data_312::_internal_set_pasdistance2(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pasdistance2_ = value;
}
inline void Pas_2nd_data_312::set_pasdistance2(double value) {
  _internal_set_pasdistance2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pasdistance2)
}

// optional double pasdistance3 = 7;
inline bool Pas_2nd_data_312::_internal_has_pasdistance3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pasdistance3() const {
  return _internal_has_pasdistance3();
}
inline void Pas_2nd_data_312::clear_pasdistance3() {
  _impl_.pasdistance3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Pas_2nd_data_312::_internal_pasdistance3() const {
  return _impl_.pasdistance3_;
}
inline double Pas_2nd_data_312::pasdistance3() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pasdistance3)
  return _internal_pasdistance3();
}
inline void Pas_2nd_data_312::_internal_set_pasdistance3(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pasdistance3_ = value;
}
inline void Pas_2nd_data_312::set_pasdistance3(double value) {
  _internal_set_pasdistance3(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pasdistance3)
}

// optional double pasdistance4 = 8;
inline bool Pas_2nd_data_312::_internal_has_pasdistance4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pas_2nd_data_312::has_pasdistance4() const {
  return _internal_has_pasdistance4();
}
inline void Pas_2nd_data_312::clear_pasdistance4() {
  _impl_.pasdistance4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Pas_2nd_data_312::_internal_pasdistance4() const {
  return _impl_.pasdistance4_;
}
inline double Pas_2nd_data_312::pasdistance4() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pas_2nd_data_312.pasdistance4)
  return _internal_pasdistance4();
}
inline void Pas_2nd_data_312::_internal_set_pasdistance4(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pasdistance4_ = value;
}
inline void Pas_2nd_data_312::set_pasdistance4(double value) {
  _internal_set_pasdistance4(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pas_2nd_data_312.pasdistance4)
}

// -------------------------------------------------------------------

// Aeb_wheelimpulse_355

// optional double flimpulse = 1;
inline bool Aeb_wheelimpulse_355::_internal_has_flimpulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_flimpulse() const {
  return _internal_has_flimpulse();
}
inline void Aeb_wheelimpulse_355::clear_flimpulse() {
  _impl_.flimpulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Aeb_wheelimpulse_355::_internal_flimpulse() const {
  return _impl_.flimpulse_;
}
inline double Aeb_wheelimpulse_355::flimpulse() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.flimpulse)
  return _internal_flimpulse();
}
inline void Aeb_wheelimpulse_355::_internal_set_flimpulse(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.flimpulse_ = value;
}
inline void Aeb_wheelimpulse_355::set_flimpulse(double value) {
  _internal_set_flimpulse(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.flimpulse)
}

// optional bool flimpulsevalid = 2;
inline bool Aeb_wheelimpulse_355::_internal_has_flimpulsevalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_flimpulsevalid() const {
  return _internal_has_flimpulsevalid();
}
inline void Aeb_wheelimpulse_355::clear_flimpulsevalid() {
  _impl_.flimpulsevalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Aeb_wheelimpulse_355::_internal_flimpulsevalid() const {
  return _impl_.flimpulsevalid_;
}
inline bool Aeb_wheelimpulse_355::flimpulsevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.flimpulsevalid)
  return _internal_flimpulsevalid();
}
inline void Aeb_wheelimpulse_355::_internal_set_flimpulsevalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.flimpulsevalid_ = value;
}
inline void Aeb_wheelimpulse_355::set_flimpulsevalid(bool value) {
  _internal_set_flimpulsevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.flimpulsevalid)
}

// optional double frimpulse = 3;
inline bool Aeb_wheelimpulse_355::_internal_has_frimpulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_frimpulse() const {
  return _internal_has_frimpulse();
}
inline void Aeb_wheelimpulse_355::clear_frimpulse() {
  _impl_.frimpulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Aeb_wheelimpulse_355::_internal_frimpulse() const {
  return _impl_.frimpulse_;
}
inline double Aeb_wheelimpulse_355::frimpulse() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.frimpulse)
  return _internal_frimpulse();
}
inline void Aeb_wheelimpulse_355::_internal_set_frimpulse(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frimpulse_ = value;
}
inline void Aeb_wheelimpulse_355::set_frimpulse(double value) {
  _internal_set_frimpulse(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.frimpulse)
}

// optional bool frimpulsevalid = 4;
inline bool Aeb_wheelimpulse_355::_internal_has_frimpulsevalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_frimpulsevalid() const {
  return _internal_has_frimpulsevalid();
}
inline void Aeb_wheelimpulse_355::clear_frimpulsevalid() {
  _impl_.frimpulsevalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Aeb_wheelimpulse_355::_internal_frimpulsevalid() const {
  return _impl_.frimpulsevalid_;
}
inline bool Aeb_wheelimpulse_355::frimpulsevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.frimpulsevalid)
  return _internal_frimpulsevalid();
}
inline void Aeb_wheelimpulse_355::_internal_set_frimpulsevalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.frimpulsevalid_ = value;
}
inline void Aeb_wheelimpulse_355::set_frimpulsevalid(bool value) {
  _internal_set_frimpulsevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.frimpulsevalid)
}

// optional double rlimpulse = 5;
inline bool Aeb_wheelimpulse_355::_internal_has_rlimpulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_rlimpulse() const {
  return _internal_has_rlimpulse();
}
inline void Aeb_wheelimpulse_355::clear_rlimpulse() {
  _impl_.rlimpulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Aeb_wheelimpulse_355::_internal_rlimpulse() const {
  return _impl_.rlimpulse_;
}
inline double Aeb_wheelimpulse_355::rlimpulse() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.rlimpulse)
  return _internal_rlimpulse();
}
inline void Aeb_wheelimpulse_355::_internal_set_rlimpulse(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rlimpulse_ = value;
}
inline void Aeb_wheelimpulse_355::set_rlimpulse(double value) {
  _internal_set_rlimpulse(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.rlimpulse)
}

// optional bool rlimpulsevalid = 6;
inline bool Aeb_wheelimpulse_355::_internal_has_rlimpulsevalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_rlimpulsevalid() const {
  return _internal_has_rlimpulsevalid();
}
inline void Aeb_wheelimpulse_355::clear_rlimpulsevalid() {
  _impl_.rlimpulsevalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Aeb_wheelimpulse_355::_internal_rlimpulsevalid() const {
  return _impl_.rlimpulsevalid_;
}
inline bool Aeb_wheelimpulse_355::rlimpulsevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.rlimpulsevalid)
  return _internal_rlimpulsevalid();
}
inline void Aeb_wheelimpulse_355::_internal_set_rlimpulsevalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.rlimpulsevalid_ = value;
}
inline void Aeb_wheelimpulse_355::set_rlimpulsevalid(bool value) {
  _internal_set_rlimpulsevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.rlimpulsevalid)
}

// optional double rrimpulse = 7;
inline bool Aeb_wheelimpulse_355::_internal_has_rrimpulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_rrimpulse() const {
  return _internal_has_rrimpulse();
}
inline void Aeb_wheelimpulse_355::clear_rrimpulse() {
  _impl_.rrimpulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Aeb_wheelimpulse_355::_internal_rrimpulse() const {
  return _impl_.rrimpulse_;
}
inline double Aeb_wheelimpulse_355::rrimpulse() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.rrimpulse)
  return _internal_rrimpulse();
}
inline void Aeb_wheelimpulse_355::_internal_set_rrimpulse(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rrimpulse_ = value;
}
inline void Aeb_wheelimpulse_355::set_rrimpulse(double value) {
  _internal_set_rrimpulse(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.rrimpulse)
}

// optional bool rrimpulsevalid = 8;
inline bool Aeb_wheelimpulse_355::_internal_has_rrimpulsevalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_rrimpulsevalid() const {
  return _internal_has_rrimpulsevalid();
}
inline void Aeb_wheelimpulse_355::clear_rrimpulsevalid() {
  _impl_.rrimpulsevalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Aeb_wheelimpulse_355::_internal_rrimpulsevalid() const {
  return _impl_.rrimpulsevalid_;
}
inline bool Aeb_wheelimpulse_355::rrimpulsevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.rrimpulsevalid)
  return _internal_rrimpulsevalid();
}
inline void Aeb_wheelimpulse_355::_internal_set_rrimpulsevalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rrimpulsevalid_ = value;
}
inline void Aeb_wheelimpulse_355::set_rrimpulsevalid(bool value) {
  _internal_set_rrimpulsevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.rrimpulsevalid)
}

// optional double alivecounter = 9;
inline bool Aeb_wheelimpulse_355::_internal_has_alivecounter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_alivecounter() const {
  return _internal_has_alivecounter();
}
inline void Aeb_wheelimpulse_355::clear_alivecounter() {
  _impl_.alivecounter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Aeb_wheelimpulse_355::_internal_alivecounter() const {
  return _impl_.alivecounter_;
}
inline double Aeb_wheelimpulse_355::alivecounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.alivecounter)
  return _internal_alivecounter();
}
inline void Aeb_wheelimpulse_355::_internal_set_alivecounter(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.alivecounter_ = value;
}
inline void Aeb_wheelimpulse_355::set_alivecounter(double value) {
  _internal_set_alivecounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.alivecounter)
}

// optional double checksum = 10;
inline bool Aeb_wheelimpulse_355::_internal_has_checksum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aeb_wheelimpulse_355::has_checksum() const {
  return _internal_has_checksum();
}
inline void Aeb_wheelimpulse_355::clear_checksum() {
  _impl_.checksum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Aeb_wheelimpulse_355::_internal_checksum() const {
  return _impl_.checksum_;
}
inline double Aeb_wheelimpulse_355::checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_wheelimpulse_355.checksum)
  return _internal_checksum();
}
inline void Aeb_wheelimpulse_355::_internal_set_checksum(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.checksum_ = value;
}
inline void Aeb_wheelimpulse_355::set_checksum(double value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_wheelimpulse_355.checksum)
}

// -------------------------------------------------------------------

// Aeb_rearwheelspeed_354

// optional bool wheelspeed_rl_valid = 1;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rl_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rl_valid() const {
  return _internal_has_wheelspeed_rl_valid();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rl_valid() {
  _impl_.wheelspeed_rl_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Aeb_rearwheelspeed_354::_internal_wheelspeed_rl_valid() const {
  return _impl_.wheelspeed_rl_valid_;
}
inline bool Aeb_rearwheelspeed_354::wheelspeed_rl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl_valid)
  return _internal_wheelspeed_rl_valid();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rl_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.wheelspeed_rl_valid_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rl_valid(bool value) {
  _internal_set_wheelspeed_rl_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl_valid)
}

// optional double wheelspeed_rl = 2;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rl() const {
  return _internal_has_wheelspeed_rl();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rl() {
  _impl_.wheelspeed_rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Aeb_rearwheelspeed_354::_internal_wheelspeed_rl() const {
  return _impl_.wheelspeed_rl_;
}
inline double Aeb_rearwheelspeed_354::wheelspeed_rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl)
  return _internal_wheelspeed_rl();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rl(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wheelspeed_rl_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rl(double value) {
  _internal_set_wheelspeed_rl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl)
}

// optional bool wheelspeed_rr_valid = 3;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rr_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rr_valid() const {
  return _internal_has_wheelspeed_rr_valid();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rr_valid() {
  _impl_.wheelspeed_rr_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Aeb_rearwheelspeed_354::_internal_wheelspeed_rr_valid() const {
  return _impl_.wheelspeed_rr_valid_;
}
inline bool Aeb_rearwheelspeed_354::wheelspeed_rr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr_valid)
  return _internal_wheelspeed_rr_valid();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rr_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.wheelspeed_rr_valid_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rr_valid(bool value) {
  _internal_set_wheelspeed_rr_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr_valid)
}

// optional double wheelspeed_rr = 4;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rr() const {
  return _internal_has_wheelspeed_rr();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rr() {
  _impl_.wheelspeed_rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Aeb_rearwheelspeed_354::_internal_wheelspeed_rr() const {
  return _impl_.wheelspeed_rr_;
}
inline double Aeb_rearwheelspeed_354::wheelspeed_rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr)
  return _internal_wheelspeed_rr();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rr(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.wheelspeed_rr_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rr(double value) {
  _internal_set_wheelspeed_rr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr)
}

// optional double wheelspeed_rl_direct = 5;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rl_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rl_direct() const {
  return _internal_has_wheelspeed_rl_direct();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rl_direct() {
  _impl_.wheelspeed_rl_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Aeb_rearwheelspeed_354::_internal_wheelspeed_rl_direct() const {
  return _impl_.wheelspeed_rl_direct_;
}
inline double Aeb_rearwheelspeed_354::wheelspeed_rl_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl_direct)
  return _internal_wheelspeed_rl_direct();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rl_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.wheelspeed_rl_direct_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rl_direct(double value) {
  _internal_set_wheelspeed_rl_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rl_direct)
}

// optional double wheelspeed_rr_direct = 6;
inline bool Aeb_rearwheelspeed_354::_internal_has_wheelspeed_rr_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_wheelspeed_rr_direct() const {
  return _internal_has_wheelspeed_rr_direct();
}
inline void Aeb_rearwheelspeed_354::clear_wheelspeed_rr_direct() {
  _impl_.wheelspeed_rr_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Aeb_rearwheelspeed_354::_internal_wheelspeed_rr_direct() const {
  return _impl_.wheelspeed_rr_direct_;
}
inline double Aeb_rearwheelspeed_354::wheelspeed_rr_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr_direct)
  return _internal_wheelspeed_rr_direct();
}
inline void Aeb_rearwheelspeed_354::_internal_set_wheelspeed_rr_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wheelspeed_rr_direct_ = value;
}
inline void Aeb_rearwheelspeed_354::set_wheelspeed_rr_direct(double value) {
  _internal_set_wheelspeed_rr_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.wheelspeed_rr_direct)
}

// optional double alivecounter_rear = 7;
inline bool Aeb_rearwheelspeed_354::_internal_has_alivecounter_rear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_alivecounter_rear() const {
  return _internal_has_alivecounter_rear();
}
inline void Aeb_rearwheelspeed_354::clear_alivecounter_rear() {
  _impl_.alivecounter_rear_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Aeb_rearwheelspeed_354::_internal_alivecounter_rear() const {
  return _impl_.alivecounter_rear_;
}
inline double Aeb_rearwheelspeed_354::alivecounter_rear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.alivecounter_rear)
  return _internal_alivecounter_rear();
}
inline void Aeb_rearwheelspeed_354::_internal_set_alivecounter_rear(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.alivecounter_rear_ = value;
}
inline void Aeb_rearwheelspeed_354::set_alivecounter_rear(double value) {
  _internal_set_alivecounter_rear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.alivecounter_rear)
}

// optional double checksum_rear = 8;
inline bool Aeb_rearwheelspeed_354::_internal_has_checksum_rear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aeb_rearwheelspeed_354::has_checksum_rear() const {
  return _internal_has_checksum_rear();
}
inline void Aeb_rearwheelspeed_354::clear_checksum_rear() {
  _impl_.checksum_rear_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Aeb_rearwheelspeed_354::_internal_checksum_rear() const {
  return _impl_.checksum_rear_;
}
inline double Aeb_rearwheelspeed_354::checksum_rear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_rearwheelspeed_354.checksum_rear)
  return _internal_checksum_rear();
}
inline void Aeb_rearwheelspeed_354::_internal_set_checksum_rear(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.checksum_rear_ = value;
}
inline void Aeb_rearwheelspeed_354::set_checksum_rear(double value) {
  _internal_set_checksum_rear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_rearwheelspeed_354.checksum_rear)
}

// -------------------------------------------------------------------

// Aeb_frontwheelspeed_353

// optional bool vehiclespeedvalid = 1;
inline bool Aeb_frontwheelspeed_353::_internal_has_vehiclespeedvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_vehiclespeedvalid() const {
  return _internal_has_vehiclespeedvalid();
}
inline void Aeb_frontwheelspeed_353::clear_vehiclespeedvalid() {
  _impl_.vehiclespeedvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Aeb_frontwheelspeed_353::_internal_vehiclespeedvalid() const {
  return _impl_.vehiclespeedvalid_;
}
inline bool Aeb_frontwheelspeed_353::vehiclespeedvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.vehiclespeedvalid)
  return _internal_vehiclespeedvalid();
}
inline void Aeb_frontwheelspeed_353::_internal_set_vehiclespeedvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vehiclespeedvalid_ = value;
}
inline void Aeb_frontwheelspeed_353::set_vehiclespeedvalid(bool value) {
  _internal_set_vehiclespeedvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.vehiclespeedvalid)
}

// optional double vehiclespeed = 2;
inline bool Aeb_frontwheelspeed_353::_internal_has_vehiclespeed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_vehiclespeed() const {
  return _internal_has_vehiclespeed();
}
inline void Aeb_frontwheelspeed_353::clear_vehiclespeed() {
  _impl_.vehiclespeed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Aeb_frontwheelspeed_353::_internal_vehiclespeed() const {
  return _impl_.vehiclespeed_;
}
inline double Aeb_frontwheelspeed_353::vehiclespeed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.vehiclespeed)
  return _internal_vehiclespeed();
}
inline void Aeb_frontwheelspeed_353::_internal_set_vehiclespeed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vehiclespeed_ = value;
}
inline void Aeb_frontwheelspeed_353::set_vehiclespeed(double value) {
  _internal_set_vehiclespeed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.vehiclespeed)
}

// optional double vehiclerealdirect = 3;
inline bool Aeb_frontwheelspeed_353::_internal_has_vehiclerealdirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_vehiclerealdirect() const {
  return _internal_has_vehiclerealdirect();
}
inline void Aeb_frontwheelspeed_353::clear_vehiclerealdirect() {
  _impl_.vehiclerealdirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Aeb_frontwheelspeed_353::_internal_vehiclerealdirect() const {
  return _impl_.vehiclerealdirect_;
}
inline double Aeb_frontwheelspeed_353::vehiclerealdirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.vehiclerealdirect)
  return _internal_vehiclerealdirect();
}
inline void Aeb_frontwheelspeed_353::_internal_set_vehiclerealdirect(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vehiclerealdirect_ = value;
}
inline void Aeb_frontwheelspeed_353::set_vehiclerealdirect(double value) {
  _internal_set_vehiclerealdirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.vehiclerealdirect)
}

// optional bool wheelspeed_fl_valid = 4;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fl_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fl_valid() const {
  return _internal_has_wheelspeed_fl_valid();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fl_valid() {
  _impl_.wheelspeed_fl_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Aeb_frontwheelspeed_353::_internal_wheelspeed_fl_valid() const {
  return _impl_.wheelspeed_fl_valid_;
}
inline bool Aeb_frontwheelspeed_353::wheelspeed_fl_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl_valid)
  return _internal_wheelspeed_fl_valid();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fl_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.wheelspeed_fl_valid_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fl_valid(bool value) {
  _internal_set_wheelspeed_fl_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl_valid)
}

// optional double wheelspeed_fl = 5;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fl() const {
  return _internal_has_wheelspeed_fl();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fl() {
  _impl_.wheelspeed_fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Aeb_frontwheelspeed_353::_internal_wheelspeed_fl() const {
  return _impl_.wheelspeed_fl_;
}
inline double Aeb_frontwheelspeed_353::wheelspeed_fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl)
  return _internal_wheelspeed_fl();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fl(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.wheelspeed_fl_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fl(double value) {
  _internal_set_wheelspeed_fl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl)
}

// optional bool wheelspeed_fr_valid = 6;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fr_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fr_valid() const {
  return _internal_has_wheelspeed_fr_valid();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fr_valid() {
  _impl_.wheelspeed_fr_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Aeb_frontwheelspeed_353::_internal_wheelspeed_fr_valid() const {
  return _impl_.wheelspeed_fr_valid_;
}
inline bool Aeb_frontwheelspeed_353::wheelspeed_fr_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr_valid)
  return _internal_wheelspeed_fr_valid();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fr_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.wheelspeed_fr_valid_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fr_valid(bool value) {
  _internal_set_wheelspeed_fr_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr_valid)
}

// optional double wheelspeed_fr = 7;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fr() const {
  return _internal_has_wheelspeed_fr();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fr() {
  _impl_.wheelspeed_fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Aeb_frontwheelspeed_353::_internal_wheelspeed_fr() const {
  return _impl_.wheelspeed_fr_;
}
inline double Aeb_frontwheelspeed_353::wheelspeed_fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr)
  return _internal_wheelspeed_fr();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fr(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wheelspeed_fr_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fr(double value) {
  _internal_set_wheelspeed_fr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr)
}

// optional double wheelspeed_fl_direct = 8;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fl_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fl_direct() const {
  return _internal_has_wheelspeed_fl_direct();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fl_direct() {
  _impl_.wheelspeed_fl_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Aeb_frontwheelspeed_353::_internal_wheelspeed_fl_direct() const {
  return _impl_.wheelspeed_fl_direct_;
}
inline double Aeb_frontwheelspeed_353::wheelspeed_fl_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl_direct)
  return _internal_wheelspeed_fl_direct();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fl_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.wheelspeed_fl_direct_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fl_direct(double value) {
  _internal_set_wheelspeed_fl_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fl_direct)
}

// optional double wheelspeed_fr_direct = 9;
inline bool Aeb_frontwheelspeed_353::_internal_has_wheelspeed_fr_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_wheelspeed_fr_direct() const {
  return _internal_has_wheelspeed_fr_direct();
}
inline void Aeb_frontwheelspeed_353::clear_wheelspeed_fr_direct() {
  _impl_.wheelspeed_fr_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Aeb_frontwheelspeed_353::_internal_wheelspeed_fr_direct() const {
  return _impl_.wheelspeed_fr_direct_;
}
inline double Aeb_frontwheelspeed_353::wheelspeed_fr_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr_direct)
  return _internal_wheelspeed_fr_direct();
}
inline void Aeb_frontwheelspeed_353::_internal_set_wheelspeed_fr_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wheelspeed_fr_direct_ = value;
}
inline void Aeb_frontwheelspeed_353::set_wheelspeed_fr_direct(double value) {
  _internal_set_wheelspeed_fr_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.wheelspeed_fr_direct)
}

// optional double alivecounter_front = 10;
inline bool Aeb_frontwheelspeed_353::_internal_has_alivecounter_front() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_alivecounter_front() const {
  return _internal_has_alivecounter_front();
}
inline void Aeb_frontwheelspeed_353::clear_alivecounter_front() {
  _impl_.alivecounter_front_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double Aeb_frontwheelspeed_353::_internal_alivecounter_front() const {
  return _impl_.alivecounter_front_;
}
inline double Aeb_frontwheelspeed_353::alivecounter_front() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.alivecounter_front)
  return _internal_alivecounter_front();
}
inline void Aeb_frontwheelspeed_353::_internal_set_alivecounter_front(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.alivecounter_front_ = value;
}
inline void Aeb_frontwheelspeed_353::set_alivecounter_front(double value) {
  _internal_set_alivecounter_front(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.alivecounter_front)
}

// optional double checksum_front = 11;
inline bool Aeb_frontwheelspeed_353::_internal_has_checksum_front() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aeb_frontwheelspeed_353::has_checksum_front() const {
  return _internal_has_checksum_front();
}
inline void Aeb_frontwheelspeed_353::clear_checksum_front() {
  _impl_.checksum_front_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Aeb_frontwheelspeed_353::_internal_checksum_front() const {
  return _impl_.checksum_front_;
}
inline double Aeb_frontwheelspeed_353::checksum_front() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aeb_frontwheelspeed_353.checksum_front)
  return _internal_checksum_front();
}
inline void Aeb_frontwheelspeed_353::_internal_set_checksum_front(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.checksum_front_ = value;
}
inline void Aeb_frontwheelspeed_353::set_checksum_front(double value) {
  _internal_set_checksum_front(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aeb_frontwheelspeed_353.checksum_front)
}

// -------------------------------------------------------------------

// Neolix_edu

// optional .apollo.canbus.Aeb_systemstate_11 aeb_systemstate_11 = 1;
inline bool Neolix_edu::_internal_has_aeb_systemstate_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_systemstate_11_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_systemstate_11() const {
  return _internal_has_aeb_systemstate_11();
}
inline void Neolix_edu::clear_aeb_systemstate_11() {
  if (_impl_.aeb_systemstate_11_ != nullptr) _impl_.aeb_systemstate_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Aeb_systemstate_11& Neolix_edu::_internal_aeb_systemstate_11() const {
  const ::apollo::canbus::Aeb_systemstate_11* p = _impl_.aeb_systemstate_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_systemstate_11&>(
      ::apollo::canbus::_Aeb_systemstate_11_default_instance_);
}
inline const ::apollo::canbus::Aeb_systemstate_11& Neolix_edu::aeb_systemstate_11() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_systemstate_11)
  return _internal_aeb_systemstate_11();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_systemstate_11(
    ::apollo::canbus::Aeb_systemstate_11* aeb_systemstate_11) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_systemstate_11_);
  }
  _impl_.aeb_systemstate_11_ = aeb_systemstate_11;
  if (aeb_systemstate_11) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_systemstate_11)
}
inline ::apollo::canbus::Aeb_systemstate_11* Neolix_edu::release_aeb_systemstate_11() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Aeb_systemstate_11* temp = _impl_.aeb_systemstate_11_;
  _impl_.aeb_systemstate_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_systemstate_11* Neolix_edu::unsafe_arena_release_aeb_systemstate_11() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_systemstate_11)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Aeb_systemstate_11* temp = _impl_.aeb_systemstate_11_;
  _impl_.aeb_systemstate_11_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_systemstate_11* Neolix_edu::_internal_mutable_aeb_systemstate_11() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.aeb_systemstate_11_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_systemstate_11>(GetArenaForAllocation());
    _impl_.aeb_systemstate_11_ = p;
  }
  return _impl_.aeb_systemstate_11_;
}
inline ::apollo::canbus::Aeb_systemstate_11* Neolix_edu::mutable_aeb_systemstate_11() {
  ::apollo::canbus::Aeb_systemstate_11* _msg = _internal_mutable_aeb_systemstate_11();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_systemstate_11)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_systemstate_11(::apollo::canbus::Aeb_systemstate_11* aeb_systemstate_11) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_systemstate_11_;
  }
  if (aeb_systemstate_11) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_systemstate_11);
    if (message_arena != submessage_arena) {
      aeb_systemstate_11 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_systemstate_11, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.aeb_systemstate_11_ = aeb_systemstate_11;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_systemstate_11)
}

// optional .apollo.canbus.Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 = 2;
inline bool Neolix_edu::_internal_has_vcu_vehicle_fault_response_201() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_vehicle_fault_response_201_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_vehicle_fault_response_201() const {
  return _internal_has_vcu_vehicle_fault_response_201();
}
inline void Neolix_edu::clear_vcu_vehicle_fault_response_201() {
  if (_impl_.vcu_vehicle_fault_response_201_ != nullptr) _impl_.vcu_vehicle_fault_response_201_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Vcu_vehicle_fault_response_201& Neolix_edu::_internal_vcu_vehicle_fault_response_201() const {
  const ::apollo::canbus::Vcu_vehicle_fault_response_201* p = _impl_.vcu_vehicle_fault_response_201_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_vehicle_fault_response_201&>(
      ::apollo::canbus::_Vcu_vehicle_fault_response_201_default_instance_);
}
inline const ::apollo::canbus::Vcu_vehicle_fault_response_201& Neolix_edu::vcu_vehicle_fault_response_201() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_vehicle_fault_response_201)
  return _internal_vcu_vehicle_fault_response_201();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_vehicle_fault_response_201(
    ::apollo::canbus::Vcu_vehicle_fault_response_201* vcu_vehicle_fault_response_201) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_vehicle_fault_response_201_);
  }
  _impl_.vcu_vehicle_fault_response_201_ = vcu_vehicle_fault_response_201;
  if (vcu_vehicle_fault_response_201) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_fault_response_201)
}
inline ::apollo::canbus::Vcu_vehicle_fault_response_201* Neolix_edu::release_vcu_vehicle_fault_response_201() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Vcu_vehicle_fault_response_201* temp = _impl_.vcu_vehicle_fault_response_201_;
  _impl_.vcu_vehicle_fault_response_201_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_fault_response_201* Neolix_edu::unsafe_arena_release_vcu_vehicle_fault_response_201() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_vehicle_fault_response_201)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Vcu_vehicle_fault_response_201* temp = _impl_.vcu_vehicle_fault_response_201_;
  _impl_.vcu_vehicle_fault_response_201_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_fault_response_201* Neolix_edu::_internal_mutable_vcu_vehicle_fault_response_201() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vcu_vehicle_fault_response_201_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_fault_response_201>(GetArenaForAllocation());
    _impl_.vcu_vehicle_fault_response_201_ = p;
  }
  return _impl_.vcu_vehicle_fault_response_201_;
}
inline ::apollo::canbus::Vcu_vehicle_fault_response_201* Neolix_edu::mutable_vcu_vehicle_fault_response_201() {
  ::apollo::canbus::Vcu_vehicle_fault_response_201* _msg = _internal_mutable_vcu_vehicle_fault_response_201();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_vehicle_fault_response_201)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_vehicle_fault_response_201(::apollo::canbus::Vcu_vehicle_fault_response_201* vcu_vehicle_fault_response_201) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_vehicle_fault_response_201_;
  }
  if (vcu_vehicle_fault_response_201) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_vehicle_fault_response_201);
    if (message_arena != submessage_arena) {
      vcu_vehicle_fault_response_201 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_vehicle_fault_response_201, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vcu_vehicle_fault_response_201_ = vcu_vehicle_fault_response_201;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_fault_response_201)
}

// optional .apollo.canbus.Vcu_powerstatus_214 vcu_powerstatus_214 = 3;
inline bool Neolix_edu::_internal_has_vcu_powerstatus_214() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_powerstatus_214_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_powerstatus_214() const {
  return _internal_has_vcu_powerstatus_214();
}
inline void Neolix_edu::clear_vcu_powerstatus_214() {
  if (_impl_.vcu_powerstatus_214_ != nullptr) _impl_.vcu_powerstatus_214_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Vcu_powerstatus_214& Neolix_edu::_internal_vcu_powerstatus_214() const {
  const ::apollo::canbus::Vcu_powerstatus_214* p = _impl_.vcu_powerstatus_214_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_powerstatus_214&>(
      ::apollo::canbus::_Vcu_powerstatus_214_default_instance_);
}
inline const ::apollo::canbus::Vcu_powerstatus_214& Neolix_edu::vcu_powerstatus_214() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_powerstatus_214)
  return _internal_vcu_powerstatus_214();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_powerstatus_214(
    ::apollo::canbus::Vcu_powerstatus_214* vcu_powerstatus_214) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_powerstatus_214_);
  }
  _impl_.vcu_powerstatus_214_ = vcu_powerstatus_214;
  if (vcu_powerstatus_214) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_powerstatus_214)
}
inline ::apollo::canbus::Vcu_powerstatus_214* Neolix_edu::release_vcu_powerstatus_214() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Vcu_powerstatus_214* temp = _impl_.vcu_powerstatus_214_;
  _impl_.vcu_powerstatus_214_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_powerstatus_214* Neolix_edu::unsafe_arena_release_vcu_powerstatus_214() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_powerstatus_214)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Vcu_powerstatus_214* temp = _impl_.vcu_powerstatus_214_;
  _impl_.vcu_powerstatus_214_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_powerstatus_214* Neolix_edu::_internal_mutable_vcu_powerstatus_214() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vcu_powerstatus_214_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_powerstatus_214>(GetArenaForAllocation());
    _impl_.vcu_powerstatus_214_ = p;
  }
  return _impl_.vcu_powerstatus_214_;
}
inline ::apollo::canbus::Vcu_powerstatus_214* Neolix_edu::mutable_vcu_powerstatus_214() {
  ::apollo::canbus::Vcu_powerstatus_214* _msg = _internal_mutable_vcu_powerstatus_214();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_powerstatus_214)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_powerstatus_214(::apollo::canbus::Vcu_powerstatus_214* vcu_powerstatus_214) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_powerstatus_214_;
  }
  if (vcu_powerstatus_214) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_powerstatus_214);
    if (message_arena != submessage_arena) {
      vcu_powerstatus_214 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_powerstatus_214, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vcu_powerstatus_214_ = vcu_powerstatus_214;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_powerstatus_214)
}

// optional .apollo.canbus.Ads_light_horn_command_310 ads_light_horn_command_310 = 4;
inline bool Neolix_edu::_internal_has_ads_light_horn_command_310() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ads_light_horn_command_310_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_ads_light_horn_command_310() const {
  return _internal_has_ads_light_horn_command_310();
}
inline void Neolix_edu::clear_ads_light_horn_command_310() {
  if (_impl_.ads_light_horn_command_310_ != nullptr) _impl_.ads_light_horn_command_310_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Ads_light_horn_command_310& Neolix_edu::_internal_ads_light_horn_command_310() const {
  const ::apollo::canbus::Ads_light_horn_command_310* p = _impl_.ads_light_horn_command_310_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ads_light_horn_command_310&>(
      ::apollo::canbus::_Ads_light_horn_command_310_default_instance_);
}
inline const ::apollo::canbus::Ads_light_horn_command_310& Neolix_edu::ads_light_horn_command_310() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.ads_light_horn_command_310)
  return _internal_ads_light_horn_command_310();
}
inline void Neolix_edu::unsafe_arena_set_allocated_ads_light_horn_command_310(
    ::apollo::canbus::Ads_light_horn_command_310* ads_light_horn_command_310) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ads_light_horn_command_310_);
  }
  _impl_.ads_light_horn_command_310_ = ads_light_horn_command_310;
  if (ads_light_horn_command_310) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.ads_light_horn_command_310)
}
inline ::apollo::canbus::Ads_light_horn_command_310* Neolix_edu::release_ads_light_horn_command_310() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Ads_light_horn_command_310* temp = _impl_.ads_light_horn_command_310_;
  _impl_.ads_light_horn_command_310_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ads_light_horn_command_310* Neolix_edu::unsafe_arena_release_ads_light_horn_command_310() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.ads_light_horn_command_310)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Ads_light_horn_command_310* temp = _impl_.ads_light_horn_command_310_;
  _impl_.ads_light_horn_command_310_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ads_light_horn_command_310* Neolix_edu::_internal_mutable_ads_light_horn_command_310() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.ads_light_horn_command_310_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ads_light_horn_command_310>(GetArenaForAllocation());
    _impl_.ads_light_horn_command_310_ = p;
  }
  return _impl_.ads_light_horn_command_310_;
}
inline ::apollo::canbus::Ads_light_horn_command_310* Neolix_edu::mutable_ads_light_horn_command_310() {
  ::apollo::canbus::Ads_light_horn_command_310* _msg = _internal_mutable_ads_light_horn_command_310();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.ads_light_horn_command_310)
  return _msg;
}
inline void Neolix_edu::set_allocated_ads_light_horn_command_310(::apollo::canbus::Ads_light_horn_command_310* ads_light_horn_command_310) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ads_light_horn_command_310_;
  }
  if (ads_light_horn_command_310) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ads_light_horn_command_310);
    if (message_arena != submessage_arena) {
      ads_light_horn_command_310 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_light_horn_command_310, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.ads_light_horn_command_310_ = ads_light_horn_command_310;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.ads_light_horn_command_310)
}

// optional .apollo.canbus.Ads_brake_command_46 ads_brake_command_46 = 5;
inline bool Neolix_edu::_internal_has_ads_brake_command_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ads_brake_command_46_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_ads_brake_command_46() const {
  return _internal_has_ads_brake_command_46();
}
inline void Neolix_edu::clear_ads_brake_command_46() {
  if (_impl_.ads_brake_command_46_ != nullptr) _impl_.ads_brake_command_46_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Ads_brake_command_46& Neolix_edu::_internal_ads_brake_command_46() const {
  const ::apollo::canbus::Ads_brake_command_46* p = _impl_.ads_brake_command_46_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ads_brake_command_46&>(
      ::apollo::canbus::_Ads_brake_command_46_default_instance_);
}
inline const ::apollo::canbus::Ads_brake_command_46& Neolix_edu::ads_brake_command_46() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.ads_brake_command_46)
  return _internal_ads_brake_command_46();
}
inline void Neolix_edu::unsafe_arena_set_allocated_ads_brake_command_46(
    ::apollo::canbus::Ads_brake_command_46* ads_brake_command_46) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ads_brake_command_46_);
  }
  _impl_.ads_brake_command_46_ = ads_brake_command_46;
  if (ads_brake_command_46) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.ads_brake_command_46)
}
inline ::apollo::canbus::Ads_brake_command_46* Neolix_edu::release_ads_brake_command_46() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Ads_brake_command_46* temp = _impl_.ads_brake_command_46_;
  _impl_.ads_brake_command_46_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ads_brake_command_46* Neolix_edu::unsafe_arena_release_ads_brake_command_46() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.ads_brake_command_46)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Ads_brake_command_46* temp = _impl_.ads_brake_command_46_;
  _impl_.ads_brake_command_46_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ads_brake_command_46* Neolix_edu::_internal_mutable_ads_brake_command_46() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.ads_brake_command_46_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ads_brake_command_46>(GetArenaForAllocation());
    _impl_.ads_brake_command_46_ = p;
  }
  return _impl_.ads_brake_command_46_;
}
inline ::apollo::canbus::Ads_brake_command_46* Neolix_edu::mutable_ads_brake_command_46() {
  ::apollo::canbus::Ads_brake_command_46* _msg = _internal_mutable_ads_brake_command_46();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.ads_brake_command_46)
  return _msg;
}
inline void Neolix_edu::set_allocated_ads_brake_command_46(::apollo::canbus::Ads_brake_command_46* ads_brake_command_46) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ads_brake_command_46_;
  }
  if (ads_brake_command_46) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ads_brake_command_46);
    if (message_arena != submessage_arena) {
      ads_brake_command_46 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_brake_command_46, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.ads_brake_command_46_ = ads_brake_command_46;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.ads_brake_command_46)
}

// optional .apollo.canbus.Vcu_brake_report_47 vcu_brake_report_47 = 6;
inline bool Neolix_edu::_internal_has_vcu_brake_report_47() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_brake_report_47_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_brake_report_47() const {
  return _internal_has_vcu_brake_report_47();
}
inline void Neolix_edu::clear_vcu_brake_report_47() {
  if (_impl_.vcu_brake_report_47_ != nullptr) _impl_.vcu_brake_report_47_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Vcu_brake_report_47& Neolix_edu::_internal_vcu_brake_report_47() const {
  const ::apollo::canbus::Vcu_brake_report_47* p = _impl_.vcu_brake_report_47_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_brake_report_47&>(
      ::apollo::canbus::_Vcu_brake_report_47_default_instance_);
}
inline const ::apollo::canbus::Vcu_brake_report_47& Neolix_edu::vcu_brake_report_47() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_brake_report_47)
  return _internal_vcu_brake_report_47();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_brake_report_47(
    ::apollo::canbus::Vcu_brake_report_47* vcu_brake_report_47) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_brake_report_47_);
  }
  _impl_.vcu_brake_report_47_ = vcu_brake_report_47;
  if (vcu_brake_report_47) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_brake_report_47)
}
inline ::apollo::canbus::Vcu_brake_report_47* Neolix_edu::release_vcu_brake_report_47() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Vcu_brake_report_47* temp = _impl_.vcu_brake_report_47_;
  _impl_.vcu_brake_report_47_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_brake_report_47* Neolix_edu::unsafe_arena_release_vcu_brake_report_47() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_brake_report_47)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Vcu_brake_report_47* temp = _impl_.vcu_brake_report_47_;
  _impl_.vcu_brake_report_47_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_brake_report_47* Neolix_edu::_internal_mutable_vcu_brake_report_47() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.vcu_brake_report_47_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_brake_report_47>(GetArenaForAllocation());
    _impl_.vcu_brake_report_47_ = p;
  }
  return _impl_.vcu_brake_report_47_;
}
inline ::apollo::canbus::Vcu_brake_report_47* Neolix_edu::mutable_vcu_brake_report_47() {
  ::apollo::canbus::Vcu_brake_report_47* _msg = _internal_mutable_vcu_brake_report_47();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_brake_report_47)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_brake_report_47(::apollo::canbus::Vcu_brake_report_47* vcu_brake_report_47) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_brake_report_47_;
  }
  if (vcu_brake_report_47) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_brake_report_47);
    if (message_arena != submessage_arena) {
      vcu_brake_report_47 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_brake_report_47, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.vcu_brake_report_47_ = vcu_brake_report_47;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_brake_report_47)
}

// optional .apollo.canbus.Vcu_eps_report_57 vcu_eps_report_57 = 7;
inline bool Neolix_edu::_internal_has_vcu_eps_report_57() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_eps_report_57_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_eps_report_57() const {
  return _internal_has_vcu_eps_report_57();
}
inline void Neolix_edu::clear_vcu_eps_report_57() {
  if (_impl_.vcu_eps_report_57_ != nullptr) _impl_.vcu_eps_report_57_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Vcu_eps_report_57& Neolix_edu::_internal_vcu_eps_report_57() const {
  const ::apollo::canbus::Vcu_eps_report_57* p = _impl_.vcu_eps_report_57_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_eps_report_57&>(
      ::apollo::canbus::_Vcu_eps_report_57_default_instance_);
}
inline const ::apollo::canbus::Vcu_eps_report_57& Neolix_edu::vcu_eps_report_57() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_eps_report_57)
  return _internal_vcu_eps_report_57();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_eps_report_57(
    ::apollo::canbus::Vcu_eps_report_57* vcu_eps_report_57) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_eps_report_57_);
  }
  _impl_.vcu_eps_report_57_ = vcu_eps_report_57;
  if (vcu_eps_report_57) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_eps_report_57)
}
inline ::apollo::canbus::Vcu_eps_report_57* Neolix_edu::release_vcu_eps_report_57() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Vcu_eps_report_57* temp = _impl_.vcu_eps_report_57_;
  _impl_.vcu_eps_report_57_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_eps_report_57* Neolix_edu::unsafe_arena_release_vcu_eps_report_57() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_eps_report_57)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Vcu_eps_report_57* temp = _impl_.vcu_eps_report_57_;
  _impl_.vcu_eps_report_57_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_eps_report_57* Neolix_edu::_internal_mutable_vcu_eps_report_57() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.vcu_eps_report_57_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_eps_report_57>(GetArenaForAllocation());
    _impl_.vcu_eps_report_57_ = p;
  }
  return _impl_.vcu_eps_report_57_;
}
inline ::apollo::canbus::Vcu_eps_report_57* Neolix_edu::mutable_vcu_eps_report_57() {
  ::apollo::canbus::Vcu_eps_report_57* _msg = _internal_mutable_vcu_eps_report_57();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_eps_report_57)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_eps_report_57(::apollo::canbus::Vcu_eps_report_57* vcu_eps_report_57) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_eps_report_57_;
  }
  if (vcu_eps_report_57) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_eps_report_57);
    if (message_arena != submessage_arena) {
      vcu_eps_report_57 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_eps_report_57, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.vcu_eps_report_57_ = vcu_eps_report_57;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_eps_report_57)
}

// optional .apollo.canbus.Ads_eps_command_56 ads_eps_command_56 = 8;
inline bool Neolix_edu::_internal_has_ads_eps_command_56() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ads_eps_command_56_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_ads_eps_command_56() const {
  return _internal_has_ads_eps_command_56();
}
inline void Neolix_edu::clear_ads_eps_command_56() {
  if (_impl_.ads_eps_command_56_ != nullptr) _impl_.ads_eps_command_56_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Ads_eps_command_56& Neolix_edu::_internal_ads_eps_command_56() const {
  const ::apollo::canbus::Ads_eps_command_56* p = _impl_.ads_eps_command_56_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ads_eps_command_56&>(
      ::apollo::canbus::_Ads_eps_command_56_default_instance_);
}
inline const ::apollo::canbus::Ads_eps_command_56& Neolix_edu::ads_eps_command_56() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.ads_eps_command_56)
  return _internal_ads_eps_command_56();
}
inline void Neolix_edu::unsafe_arena_set_allocated_ads_eps_command_56(
    ::apollo::canbus::Ads_eps_command_56* ads_eps_command_56) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ads_eps_command_56_);
  }
  _impl_.ads_eps_command_56_ = ads_eps_command_56;
  if (ads_eps_command_56) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.ads_eps_command_56)
}
inline ::apollo::canbus::Ads_eps_command_56* Neolix_edu::release_ads_eps_command_56() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Ads_eps_command_56* temp = _impl_.ads_eps_command_56_;
  _impl_.ads_eps_command_56_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ads_eps_command_56* Neolix_edu::unsafe_arena_release_ads_eps_command_56() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.ads_eps_command_56)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Ads_eps_command_56* temp = _impl_.ads_eps_command_56_;
  _impl_.ads_eps_command_56_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ads_eps_command_56* Neolix_edu::_internal_mutable_ads_eps_command_56() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.ads_eps_command_56_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ads_eps_command_56>(GetArenaForAllocation());
    _impl_.ads_eps_command_56_ = p;
  }
  return _impl_.ads_eps_command_56_;
}
inline ::apollo::canbus::Ads_eps_command_56* Neolix_edu::mutable_ads_eps_command_56() {
  ::apollo::canbus::Ads_eps_command_56* _msg = _internal_mutable_ads_eps_command_56();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.ads_eps_command_56)
  return _msg;
}
inline void Neolix_edu::set_allocated_ads_eps_command_56(::apollo::canbus::Ads_eps_command_56* ads_eps_command_56) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ads_eps_command_56_;
  }
  if (ads_eps_command_56) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ads_eps_command_56);
    if (message_arena != submessage_arena) {
      ads_eps_command_56 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_eps_command_56, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.ads_eps_command_56_ = ads_eps_command_56;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.ads_eps_command_56)
}

// optional .apollo.canbus.Ads_drive_command_50 ads_drive_command_50 = 9;
inline bool Neolix_edu::_internal_has_ads_drive_command_50() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ads_drive_command_50_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_ads_drive_command_50() const {
  return _internal_has_ads_drive_command_50();
}
inline void Neolix_edu::clear_ads_drive_command_50() {
  if (_impl_.ads_drive_command_50_ != nullptr) _impl_.ads_drive_command_50_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Ads_drive_command_50& Neolix_edu::_internal_ads_drive_command_50() const {
  const ::apollo::canbus::Ads_drive_command_50* p = _impl_.ads_drive_command_50_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ads_drive_command_50&>(
      ::apollo::canbus::_Ads_drive_command_50_default_instance_);
}
inline const ::apollo::canbus::Ads_drive_command_50& Neolix_edu::ads_drive_command_50() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.ads_drive_command_50)
  return _internal_ads_drive_command_50();
}
inline void Neolix_edu::unsafe_arena_set_allocated_ads_drive_command_50(
    ::apollo::canbus::Ads_drive_command_50* ads_drive_command_50) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ads_drive_command_50_);
  }
  _impl_.ads_drive_command_50_ = ads_drive_command_50;
  if (ads_drive_command_50) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.ads_drive_command_50)
}
inline ::apollo::canbus::Ads_drive_command_50* Neolix_edu::release_ads_drive_command_50() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Ads_drive_command_50* temp = _impl_.ads_drive_command_50_;
  _impl_.ads_drive_command_50_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ads_drive_command_50* Neolix_edu::unsafe_arena_release_ads_drive_command_50() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.ads_drive_command_50)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Ads_drive_command_50* temp = _impl_.ads_drive_command_50_;
  _impl_.ads_drive_command_50_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ads_drive_command_50* Neolix_edu::_internal_mutable_ads_drive_command_50() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.ads_drive_command_50_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ads_drive_command_50>(GetArenaForAllocation());
    _impl_.ads_drive_command_50_ = p;
  }
  return _impl_.ads_drive_command_50_;
}
inline ::apollo::canbus::Ads_drive_command_50* Neolix_edu::mutable_ads_drive_command_50() {
  ::apollo::canbus::Ads_drive_command_50* _msg = _internal_mutable_ads_drive_command_50();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.ads_drive_command_50)
  return _msg;
}
inline void Neolix_edu::set_allocated_ads_drive_command_50(::apollo::canbus::Ads_drive_command_50* ads_drive_command_50) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ads_drive_command_50_;
  }
  if (ads_drive_command_50) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ads_drive_command_50);
    if (message_arena != submessage_arena) {
      ads_drive_command_50 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_drive_command_50, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.ads_drive_command_50_ = ads_drive_command_50;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.ads_drive_command_50)
}

// optional .apollo.canbus.Vcu_drive_report_52 vcu_drive_report_52 = 10;
inline bool Neolix_edu::_internal_has_vcu_drive_report_52() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_drive_report_52_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_drive_report_52() const {
  return _internal_has_vcu_drive_report_52();
}
inline void Neolix_edu::clear_vcu_drive_report_52() {
  if (_impl_.vcu_drive_report_52_ != nullptr) _impl_.vcu_drive_report_52_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Vcu_drive_report_52& Neolix_edu::_internal_vcu_drive_report_52() const {
  const ::apollo::canbus::Vcu_drive_report_52* p = _impl_.vcu_drive_report_52_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_drive_report_52&>(
      ::apollo::canbus::_Vcu_drive_report_52_default_instance_);
}
inline const ::apollo::canbus::Vcu_drive_report_52& Neolix_edu::vcu_drive_report_52() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_drive_report_52)
  return _internal_vcu_drive_report_52();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_drive_report_52(
    ::apollo::canbus::Vcu_drive_report_52* vcu_drive_report_52) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_drive_report_52_);
  }
  _impl_.vcu_drive_report_52_ = vcu_drive_report_52;
  if (vcu_drive_report_52) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_drive_report_52)
}
inline ::apollo::canbus::Vcu_drive_report_52* Neolix_edu::release_vcu_drive_report_52() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Vcu_drive_report_52* temp = _impl_.vcu_drive_report_52_;
  _impl_.vcu_drive_report_52_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_drive_report_52* Neolix_edu::unsafe_arena_release_vcu_drive_report_52() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_drive_report_52)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Vcu_drive_report_52* temp = _impl_.vcu_drive_report_52_;
  _impl_.vcu_drive_report_52_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_drive_report_52* Neolix_edu::_internal_mutable_vcu_drive_report_52() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.vcu_drive_report_52_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_drive_report_52>(GetArenaForAllocation());
    _impl_.vcu_drive_report_52_ = p;
  }
  return _impl_.vcu_drive_report_52_;
}
inline ::apollo::canbus::Vcu_drive_report_52* Neolix_edu::mutable_vcu_drive_report_52() {
  ::apollo::canbus::Vcu_drive_report_52* _msg = _internal_mutable_vcu_drive_report_52();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_drive_report_52)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_drive_report_52(::apollo::canbus::Vcu_drive_report_52* vcu_drive_report_52) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_drive_report_52_;
  }
  if (vcu_drive_report_52) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_drive_report_52);
    if (message_arena != submessage_arena) {
      vcu_drive_report_52 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_drive_report_52, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.vcu_drive_report_52_ = vcu_drive_report_52;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_drive_report_52)
}

// optional .apollo.canbus.Ads_diagnosis_628 ads_diagnosis_628 = 11;
inline bool Neolix_edu::_internal_has_ads_diagnosis_628() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ads_diagnosis_628_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_ads_diagnosis_628() const {
  return _internal_has_ads_diagnosis_628();
}
inline void Neolix_edu::clear_ads_diagnosis_628() {
  if (_impl_.ads_diagnosis_628_ != nullptr) _impl_.ads_diagnosis_628_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Ads_diagnosis_628& Neolix_edu::_internal_ads_diagnosis_628() const {
  const ::apollo::canbus::Ads_diagnosis_628* p = _impl_.ads_diagnosis_628_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ads_diagnosis_628&>(
      ::apollo::canbus::_Ads_diagnosis_628_default_instance_);
}
inline const ::apollo::canbus::Ads_diagnosis_628& Neolix_edu::ads_diagnosis_628() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.ads_diagnosis_628)
  return _internal_ads_diagnosis_628();
}
inline void Neolix_edu::unsafe_arena_set_allocated_ads_diagnosis_628(
    ::apollo::canbus::Ads_diagnosis_628* ads_diagnosis_628) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ads_diagnosis_628_);
  }
  _impl_.ads_diagnosis_628_ = ads_diagnosis_628;
  if (ads_diagnosis_628) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.ads_diagnosis_628)
}
inline ::apollo::canbus::Ads_diagnosis_628* Neolix_edu::release_ads_diagnosis_628() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Ads_diagnosis_628* temp = _impl_.ads_diagnosis_628_;
  _impl_.ads_diagnosis_628_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ads_diagnosis_628* Neolix_edu::unsafe_arena_release_ads_diagnosis_628() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.ads_diagnosis_628)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Ads_diagnosis_628* temp = _impl_.ads_diagnosis_628_;
  _impl_.ads_diagnosis_628_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ads_diagnosis_628* Neolix_edu::_internal_mutable_ads_diagnosis_628() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.ads_diagnosis_628_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ads_diagnosis_628>(GetArenaForAllocation());
    _impl_.ads_diagnosis_628_ = p;
  }
  return _impl_.ads_diagnosis_628_;
}
inline ::apollo::canbus::Ads_diagnosis_628* Neolix_edu::mutable_ads_diagnosis_628() {
  ::apollo::canbus::Ads_diagnosis_628* _msg = _internal_mutable_ads_diagnosis_628();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.ads_diagnosis_628)
  return _msg;
}
inline void Neolix_edu::set_allocated_ads_diagnosis_628(::apollo::canbus::Ads_diagnosis_628* ads_diagnosis_628) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ads_diagnosis_628_;
  }
  if (ads_diagnosis_628) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ads_diagnosis_628);
    if (message_arena != submessage_arena) {
      ads_diagnosis_628 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_diagnosis_628, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.ads_diagnosis_628_ = ads_diagnosis_628;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.ads_diagnosis_628)
}

// optional .apollo.canbus.Vcu_nm_401 vcu_nm_401 = 12;
inline bool Neolix_edu::_internal_has_vcu_nm_401() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_nm_401_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_nm_401() const {
  return _internal_has_vcu_nm_401();
}
inline void Neolix_edu::clear_vcu_nm_401() {
  if (_impl_.vcu_nm_401_ != nullptr) _impl_.vcu_nm_401_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Vcu_nm_401& Neolix_edu::_internal_vcu_nm_401() const {
  const ::apollo::canbus::Vcu_nm_401* p = _impl_.vcu_nm_401_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_nm_401&>(
      ::apollo::canbus::_Vcu_nm_401_default_instance_);
}
inline const ::apollo::canbus::Vcu_nm_401& Neolix_edu::vcu_nm_401() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_nm_401)
  return _internal_vcu_nm_401();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_nm_401(
    ::apollo::canbus::Vcu_nm_401* vcu_nm_401) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_nm_401_);
  }
  _impl_.vcu_nm_401_ = vcu_nm_401;
  if (vcu_nm_401) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_nm_401)
}
inline ::apollo::canbus::Vcu_nm_401* Neolix_edu::release_vcu_nm_401() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Vcu_nm_401* temp = _impl_.vcu_nm_401_;
  _impl_.vcu_nm_401_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_nm_401* Neolix_edu::unsafe_arena_release_vcu_nm_401() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_nm_401)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Vcu_nm_401* temp = _impl_.vcu_nm_401_;
  _impl_.vcu_nm_401_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_nm_401* Neolix_edu::_internal_mutable_vcu_nm_401() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.vcu_nm_401_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_nm_401>(GetArenaForAllocation());
    _impl_.vcu_nm_401_ = p;
  }
  return _impl_.vcu_nm_401_;
}
inline ::apollo::canbus::Vcu_nm_401* Neolix_edu::mutable_vcu_nm_401() {
  ::apollo::canbus::Vcu_nm_401* _msg = _internal_mutable_vcu_nm_401();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_nm_401)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_nm_401(::apollo::canbus::Vcu_nm_401* vcu_nm_401) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_nm_401_;
  }
  if (vcu_nm_401) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_nm_401);
    if (message_arena != submessage_arena) {
      vcu_nm_401 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_nm_401, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.vcu_nm_401_ = vcu_nm_401;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_nm_401)
}

// optional .apollo.canbus.Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 = 13;
inline bool Neolix_edu::_internal_has_vcu_vehicle_status_report_101() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_vehicle_status_report_101_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_vehicle_status_report_101() const {
  return _internal_has_vcu_vehicle_status_report_101();
}
inline void Neolix_edu::clear_vcu_vehicle_status_report_101() {
  if (_impl_.vcu_vehicle_status_report_101_ != nullptr) _impl_.vcu_vehicle_status_report_101_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::canbus::Vcu_vehicle_status_report_101& Neolix_edu::_internal_vcu_vehicle_status_report_101() const {
  const ::apollo::canbus::Vcu_vehicle_status_report_101* p = _impl_.vcu_vehicle_status_report_101_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_vehicle_status_report_101&>(
      ::apollo::canbus::_Vcu_vehicle_status_report_101_default_instance_);
}
inline const ::apollo::canbus::Vcu_vehicle_status_report_101& Neolix_edu::vcu_vehicle_status_report_101() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_vehicle_status_report_101)
  return _internal_vcu_vehicle_status_report_101();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_vehicle_status_report_101(
    ::apollo::canbus::Vcu_vehicle_status_report_101* vcu_vehicle_status_report_101) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_vehicle_status_report_101_);
  }
  _impl_.vcu_vehicle_status_report_101_ = vcu_vehicle_status_report_101;
  if (vcu_vehicle_status_report_101) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_status_report_101)
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101* Neolix_edu::release_vcu_vehicle_status_report_101() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Vcu_vehicle_status_report_101* temp = _impl_.vcu_vehicle_status_report_101_;
  _impl_.vcu_vehicle_status_report_101_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101* Neolix_edu::unsafe_arena_release_vcu_vehicle_status_report_101() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_vehicle_status_report_101)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Vcu_vehicle_status_report_101* temp = _impl_.vcu_vehicle_status_report_101_;
  _impl_.vcu_vehicle_status_report_101_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101* Neolix_edu::_internal_mutable_vcu_vehicle_status_report_101() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.vcu_vehicle_status_report_101_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_status_report_101>(GetArenaForAllocation());
    _impl_.vcu_vehicle_status_report_101_ = p;
  }
  return _impl_.vcu_vehicle_status_report_101_;
}
inline ::apollo::canbus::Vcu_vehicle_status_report_101* Neolix_edu::mutable_vcu_vehicle_status_report_101() {
  ::apollo::canbus::Vcu_vehicle_status_report_101* _msg = _internal_mutable_vcu_vehicle_status_report_101();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_vehicle_status_report_101)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_vehicle_status_report_101(::apollo::canbus::Vcu_vehicle_status_report_101* vcu_vehicle_status_report_101) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_vehicle_status_report_101_;
  }
  if (vcu_vehicle_status_report_101) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_vehicle_status_report_101);
    if (message_arena != submessage_arena) {
      vcu_vehicle_status_report_101 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_vehicle_status_report_101, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.vcu_vehicle_status_report_101_ = vcu_vehicle_status_report_101;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_status_report_101)
}

// optional .apollo.canbus.Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 = 14;
inline bool Neolix_edu::_internal_has_vcu_vehicle_info_response_502() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_vehicle_info_response_502_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_vcu_vehicle_info_response_502() const {
  return _internal_has_vcu_vehicle_info_response_502();
}
inline void Neolix_edu::clear_vcu_vehicle_info_response_502() {
  if (_impl_.vcu_vehicle_info_response_502_ != nullptr) _impl_.vcu_vehicle_info_response_502_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::canbus::Vcu_vehicle_info_response_502& Neolix_edu::_internal_vcu_vehicle_info_response_502() const {
  const ::apollo::canbus::Vcu_vehicle_info_response_502* p = _impl_.vcu_vehicle_info_response_502_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_vehicle_info_response_502&>(
      ::apollo::canbus::_Vcu_vehicle_info_response_502_default_instance_);
}
inline const ::apollo::canbus::Vcu_vehicle_info_response_502& Neolix_edu::vcu_vehicle_info_response_502() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.vcu_vehicle_info_response_502)
  return _internal_vcu_vehicle_info_response_502();
}
inline void Neolix_edu::unsafe_arena_set_allocated_vcu_vehicle_info_response_502(
    ::apollo::canbus::Vcu_vehicle_info_response_502* vcu_vehicle_info_response_502) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_vehicle_info_response_502_);
  }
  _impl_.vcu_vehicle_info_response_502_ = vcu_vehicle_info_response_502;
  if (vcu_vehicle_info_response_502) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_info_response_502)
}
inline ::apollo::canbus::Vcu_vehicle_info_response_502* Neolix_edu::release_vcu_vehicle_info_response_502() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Vcu_vehicle_info_response_502* temp = _impl_.vcu_vehicle_info_response_502_;
  _impl_.vcu_vehicle_info_response_502_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_info_response_502* Neolix_edu::unsafe_arena_release_vcu_vehicle_info_response_502() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.vcu_vehicle_info_response_502)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Vcu_vehicle_info_response_502* temp = _impl_.vcu_vehicle_info_response_502_;
  _impl_.vcu_vehicle_info_response_502_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_vehicle_info_response_502* Neolix_edu::_internal_mutable_vcu_vehicle_info_response_502() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.vcu_vehicle_info_response_502_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_vehicle_info_response_502>(GetArenaForAllocation());
    _impl_.vcu_vehicle_info_response_502_ = p;
  }
  return _impl_.vcu_vehicle_info_response_502_;
}
inline ::apollo::canbus::Vcu_vehicle_info_response_502* Neolix_edu::mutable_vcu_vehicle_info_response_502() {
  ::apollo::canbus::Vcu_vehicle_info_response_502* _msg = _internal_mutable_vcu_vehicle_info_response_502();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.vcu_vehicle_info_response_502)
  return _msg;
}
inline void Neolix_edu::set_allocated_vcu_vehicle_info_response_502(::apollo::canbus::Vcu_vehicle_info_response_502* vcu_vehicle_info_response_502) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_vehicle_info_response_502_;
  }
  if (vcu_vehicle_info_response_502) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_vehicle_info_response_502);
    if (message_arena != submessage_arena) {
      vcu_vehicle_info_response_502 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_vehicle_info_response_502, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.vcu_vehicle_info_response_502_ = vcu_vehicle_info_response_502;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.vcu_vehicle_info_response_502)
}

// optional .apollo.canbus.Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;
inline bool Neolix_edu::_internal_has_aeb_diagnosis1_626() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_diagnosis1_626_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_diagnosis1_626() const {
  return _internal_has_aeb_diagnosis1_626();
}
inline void Neolix_edu::clear_aeb_diagnosis1_626() {
  if (_impl_.aeb_diagnosis1_626_ != nullptr) _impl_.aeb_diagnosis1_626_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::canbus::Aeb_diagnosis1_626& Neolix_edu::_internal_aeb_diagnosis1_626() const {
  const ::apollo::canbus::Aeb_diagnosis1_626* p = _impl_.aeb_diagnosis1_626_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_diagnosis1_626&>(
      ::apollo::canbus::_Aeb_diagnosis1_626_default_instance_);
}
inline const ::apollo::canbus::Aeb_diagnosis1_626& Neolix_edu::aeb_diagnosis1_626() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_diagnosis1_626)
  return _internal_aeb_diagnosis1_626();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_diagnosis1_626(
    ::apollo::canbus::Aeb_diagnosis1_626* aeb_diagnosis1_626) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_diagnosis1_626_);
  }
  _impl_.aeb_diagnosis1_626_ = aeb_diagnosis1_626;
  if (aeb_diagnosis1_626) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_diagnosis1_626)
}
inline ::apollo::canbus::Aeb_diagnosis1_626* Neolix_edu::release_aeb_diagnosis1_626() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Aeb_diagnosis1_626* temp = _impl_.aeb_diagnosis1_626_;
  _impl_.aeb_diagnosis1_626_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_diagnosis1_626* Neolix_edu::unsafe_arena_release_aeb_diagnosis1_626() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_diagnosis1_626)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Aeb_diagnosis1_626* temp = _impl_.aeb_diagnosis1_626_;
  _impl_.aeb_diagnosis1_626_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_diagnosis1_626* Neolix_edu::_internal_mutable_aeb_diagnosis1_626() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.aeb_diagnosis1_626_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_diagnosis1_626>(GetArenaForAllocation());
    _impl_.aeb_diagnosis1_626_ = p;
  }
  return _impl_.aeb_diagnosis1_626_;
}
inline ::apollo::canbus::Aeb_diagnosis1_626* Neolix_edu::mutable_aeb_diagnosis1_626() {
  ::apollo::canbus::Aeb_diagnosis1_626* _msg = _internal_mutable_aeb_diagnosis1_626();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_diagnosis1_626)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_diagnosis1_626(::apollo::canbus::Aeb_diagnosis1_626* aeb_diagnosis1_626) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_diagnosis1_626_;
  }
  if (aeb_diagnosis1_626) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_diagnosis1_626);
    if (message_arena != submessage_arena) {
      aeb_diagnosis1_626 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_diagnosis1_626, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.aeb_diagnosis1_626_ = aeb_diagnosis1_626;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_diagnosis1_626)
}

// optional .apollo.canbus.Aeb_diagresp_718 aeb_diagresp_718 = 16;
inline bool Neolix_edu::_internal_has_aeb_diagresp_718() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_diagresp_718_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_diagresp_718() const {
  return _internal_has_aeb_diagresp_718();
}
inline void Neolix_edu::clear_aeb_diagresp_718() {
  if (_impl_.aeb_diagresp_718_ != nullptr) _impl_.aeb_diagresp_718_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::canbus::Aeb_diagresp_718& Neolix_edu::_internal_aeb_diagresp_718() const {
  const ::apollo::canbus::Aeb_diagresp_718* p = _impl_.aeb_diagresp_718_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_diagresp_718&>(
      ::apollo::canbus::_Aeb_diagresp_718_default_instance_);
}
inline const ::apollo::canbus::Aeb_diagresp_718& Neolix_edu::aeb_diagresp_718() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_diagresp_718)
  return _internal_aeb_diagresp_718();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_diagresp_718(
    ::apollo::canbus::Aeb_diagresp_718* aeb_diagresp_718) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_diagresp_718_);
  }
  _impl_.aeb_diagresp_718_ = aeb_diagresp_718;
  if (aeb_diagresp_718) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_diagresp_718)
}
inline ::apollo::canbus::Aeb_diagresp_718* Neolix_edu::release_aeb_diagresp_718() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Aeb_diagresp_718* temp = _impl_.aeb_diagresp_718_;
  _impl_.aeb_diagresp_718_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_diagresp_718* Neolix_edu::unsafe_arena_release_aeb_diagresp_718() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_diagresp_718)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Aeb_diagresp_718* temp = _impl_.aeb_diagresp_718_;
  _impl_.aeb_diagresp_718_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_diagresp_718* Neolix_edu::_internal_mutable_aeb_diagresp_718() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.aeb_diagresp_718_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_diagresp_718>(GetArenaForAllocation());
    _impl_.aeb_diagresp_718_ = p;
  }
  return _impl_.aeb_diagresp_718_;
}
inline ::apollo::canbus::Aeb_diagresp_718* Neolix_edu::mutable_aeb_diagresp_718() {
  ::apollo::canbus::Aeb_diagresp_718* _msg = _internal_mutable_aeb_diagresp_718();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_diagresp_718)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_diagresp_718(::apollo::canbus::Aeb_diagresp_718* aeb_diagresp_718) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_diagresp_718_;
  }
  if (aeb_diagresp_718) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_diagresp_718);
    if (message_arena != submessage_arena) {
      aeb_diagresp_718 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_diagresp_718, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.aeb_diagresp_718_ = aeb_diagresp_718;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_diagresp_718)
}

// optional .apollo.canbus.Pas_1st_data_311 pas_1st_data_311 = 17;
inline bool Neolix_edu::_internal_has_pas_1st_data_311() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pas_1st_data_311_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_pas_1st_data_311() const {
  return _internal_has_pas_1st_data_311();
}
inline void Neolix_edu::clear_pas_1st_data_311() {
  if (_impl_.pas_1st_data_311_ != nullptr) _impl_.pas_1st_data_311_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::canbus::Pas_1st_data_311& Neolix_edu::_internal_pas_1st_data_311() const {
  const ::apollo::canbus::Pas_1st_data_311* p = _impl_.pas_1st_data_311_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Pas_1st_data_311&>(
      ::apollo::canbus::_Pas_1st_data_311_default_instance_);
}
inline const ::apollo::canbus::Pas_1st_data_311& Neolix_edu::pas_1st_data_311() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.pas_1st_data_311)
  return _internal_pas_1st_data_311();
}
inline void Neolix_edu::unsafe_arena_set_allocated_pas_1st_data_311(
    ::apollo::canbus::Pas_1st_data_311* pas_1st_data_311) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pas_1st_data_311_);
  }
  _impl_.pas_1st_data_311_ = pas_1st_data_311;
  if (pas_1st_data_311) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.pas_1st_data_311)
}
inline ::apollo::canbus::Pas_1st_data_311* Neolix_edu::release_pas_1st_data_311() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Pas_1st_data_311* temp = _impl_.pas_1st_data_311_;
  _impl_.pas_1st_data_311_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Pas_1st_data_311* Neolix_edu::unsafe_arena_release_pas_1st_data_311() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.pas_1st_data_311)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Pas_1st_data_311* temp = _impl_.pas_1st_data_311_;
  _impl_.pas_1st_data_311_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Pas_1st_data_311* Neolix_edu::_internal_mutable_pas_1st_data_311() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.pas_1st_data_311_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pas_1st_data_311>(GetArenaForAllocation());
    _impl_.pas_1st_data_311_ = p;
  }
  return _impl_.pas_1st_data_311_;
}
inline ::apollo::canbus::Pas_1st_data_311* Neolix_edu::mutable_pas_1st_data_311() {
  ::apollo::canbus::Pas_1st_data_311* _msg = _internal_mutable_pas_1st_data_311();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.pas_1st_data_311)
  return _msg;
}
inline void Neolix_edu::set_allocated_pas_1st_data_311(::apollo::canbus::Pas_1st_data_311* pas_1st_data_311) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pas_1st_data_311_;
  }
  if (pas_1st_data_311) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pas_1st_data_311);
    if (message_arena != submessage_arena) {
      pas_1st_data_311 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pas_1st_data_311, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.pas_1st_data_311_ = pas_1st_data_311;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.pas_1st_data_311)
}

// optional .apollo.canbus.Pas_2nd_data_312 pas_2nd_data_312 = 18;
inline bool Neolix_edu::_internal_has_pas_2nd_data_312() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pas_2nd_data_312_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_pas_2nd_data_312() const {
  return _internal_has_pas_2nd_data_312();
}
inline void Neolix_edu::clear_pas_2nd_data_312() {
  if (_impl_.pas_2nd_data_312_ != nullptr) _impl_.pas_2nd_data_312_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::canbus::Pas_2nd_data_312& Neolix_edu::_internal_pas_2nd_data_312() const {
  const ::apollo::canbus::Pas_2nd_data_312* p = _impl_.pas_2nd_data_312_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Pas_2nd_data_312&>(
      ::apollo::canbus::_Pas_2nd_data_312_default_instance_);
}
inline const ::apollo::canbus::Pas_2nd_data_312& Neolix_edu::pas_2nd_data_312() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.pas_2nd_data_312)
  return _internal_pas_2nd_data_312();
}
inline void Neolix_edu::unsafe_arena_set_allocated_pas_2nd_data_312(
    ::apollo::canbus::Pas_2nd_data_312* pas_2nd_data_312) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pas_2nd_data_312_);
  }
  _impl_.pas_2nd_data_312_ = pas_2nd_data_312;
  if (pas_2nd_data_312) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.pas_2nd_data_312)
}
inline ::apollo::canbus::Pas_2nd_data_312* Neolix_edu::release_pas_2nd_data_312() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Pas_2nd_data_312* temp = _impl_.pas_2nd_data_312_;
  _impl_.pas_2nd_data_312_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Pas_2nd_data_312* Neolix_edu::unsafe_arena_release_pas_2nd_data_312() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.pas_2nd_data_312)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Pas_2nd_data_312* temp = _impl_.pas_2nd_data_312_;
  _impl_.pas_2nd_data_312_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Pas_2nd_data_312* Neolix_edu::_internal_mutable_pas_2nd_data_312() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.pas_2nd_data_312_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pas_2nd_data_312>(GetArenaForAllocation());
    _impl_.pas_2nd_data_312_ = p;
  }
  return _impl_.pas_2nd_data_312_;
}
inline ::apollo::canbus::Pas_2nd_data_312* Neolix_edu::mutable_pas_2nd_data_312() {
  ::apollo::canbus::Pas_2nd_data_312* _msg = _internal_mutable_pas_2nd_data_312();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.pas_2nd_data_312)
  return _msg;
}
inline void Neolix_edu::set_allocated_pas_2nd_data_312(::apollo::canbus::Pas_2nd_data_312* pas_2nd_data_312) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pas_2nd_data_312_;
  }
  if (pas_2nd_data_312) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pas_2nd_data_312);
    if (message_arena != submessage_arena) {
      pas_2nd_data_312 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pas_2nd_data_312, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.pas_2nd_data_312_ = pas_2nd_data_312;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.pas_2nd_data_312)
}

// optional .apollo.canbus.Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;
inline bool Neolix_edu::_internal_has_aeb_wheelimpulse_355() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_wheelimpulse_355_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_wheelimpulse_355() const {
  return _internal_has_aeb_wheelimpulse_355();
}
inline void Neolix_edu::clear_aeb_wheelimpulse_355() {
  if (_impl_.aeb_wheelimpulse_355_ != nullptr) _impl_.aeb_wheelimpulse_355_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::canbus::Aeb_wheelimpulse_355& Neolix_edu::_internal_aeb_wheelimpulse_355() const {
  const ::apollo::canbus::Aeb_wheelimpulse_355* p = _impl_.aeb_wheelimpulse_355_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_wheelimpulse_355&>(
      ::apollo::canbus::_Aeb_wheelimpulse_355_default_instance_);
}
inline const ::apollo::canbus::Aeb_wheelimpulse_355& Neolix_edu::aeb_wheelimpulse_355() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_wheelimpulse_355)
  return _internal_aeb_wheelimpulse_355();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_wheelimpulse_355(
    ::apollo::canbus::Aeb_wheelimpulse_355* aeb_wheelimpulse_355) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_wheelimpulse_355_);
  }
  _impl_.aeb_wheelimpulse_355_ = aeb_wheelimpulse_355;
  if (aeb_wheelimpulse_355) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_wheelimpulse_355)
}
inline ::apollo::canbus::Aeb_wheelimpulse_355* Neolix_edu::release_aeb_wheelimpulse_355() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::canbus::Aeb_wheelimpulse_355* temp = _impl_.aeb_wheelimpulse_355_;
  _impl_.aeb_wheelimpulse_355_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_wheelimpulse_355* Neolix_edu::unsafe_arena_release_aeb_wheelimpulse_355() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_wheelimpulse_355)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::apollo::canbus::Aeb_wheelimpulse_355* temp = _impl_.aeb_wheelimpulse_355_;
  _impl_.aeb_wheelimpulse_355_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_wheelimpulse_355* Neolix_edu::_internal_mutable_aeb_wheelimpulse_355() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.aeb_wheelimpulse_355_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_wheelimpulse_355>(GetArenaForAllocation());
    _impl_.aeb_wheelimpulse_355_ = p;
  }
  return _impl_.aeb_wheelimpulse_355_;
}
inline ::apollo::canbus::Aeb_wheelimpulse_355* Neolix_edu::mutable_aeb_wheelimpulse_355() {
  ::apollo::canbus::Aeb_wheelimpulse_355* _msg = _internal_mutable_aeb_wheelimpulse_355();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_wheelimpulse_355)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_wheelimpulse_355(::apollo::canbus::Aeb_wheelimpulse_355* aeb_wheelimpulse_355) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_wheelimpulse_355_;
  }
  if (aeb_wheelimpulse_355) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_wheelimpulse_355);
    if (message_arena != submessage_arena) {
      aeb_wheelimpulse_355 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_wheelimpulse_355, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.aeb_wheelimpulse_355_ = aeb_wheelimpulse_355;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_wheelimpulse_355)
}

// optional .apollo.canbus.Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 = 20;
inline bool Neolix_edu::_internal_has_aeb_rearwheelspeed_354() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_rearwheelspeed_354_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_rearwheelspeed_354() const {
  return _internal_has_aeb_rearwheelspeed_354();
}
inline void Neolix_edu::clear_aeb_rearwheelspeed_354() {
  if (_impl_.aeb_rearwheelspeed_354_ != nullptr) _impl_.aeb_rearwheelspeed_354_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::canbus::Aeb_rearwheelspeed_354& Neolix_edu::_internal_aeb_rearwheelspeed_354() const {
  const ::apollo::canbus::Aeb_rearwheelspeed_354* p = _impl_.aeb_rearwheelspeed_354_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_rearwheelspeed_354&>(
      ::apollo::canbus::_Aeb_rearwheelspeed_354_default_instance_);
}
inline const ::apollo::canbus::Aeb_rearwheelspeed_354& Neolix_edu::aeb_rearwheelspeed_354() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_rearwheelspeed_354)
  return _internal_aeb_rearwheelspeed_354();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_rearwheelspeed_354(
    ::apollo::canbus::Aeb_rearwheelspeed_354* aeb_rearwheelspeed_354) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_rearwheelspeed_354_);
  }
  _impl_.aeb_rearwheelspeed_354_ = aeb_rearwheelspeed_354;
  if (aeb_rearwheelspeed_354) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_rearwheelspeed_354)
}
inline ::apollo::canbus::Aeb_rearwheelspeed_354* Neolix_edu::release_aeb_rearwheelspeed_354() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::canbus::Aeb_rearwheelspeed_354* temp = _impl_.aeb_rearwheelspeed_354_;
  _impl_.aeb_rearwheelspeed_354_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_rearwheelspeed_354* Neolix_edu::unsafe_arena_release_aeb_rearwheelspeed_354() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_rearwheelspeed_354)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::apollo::canbus::Aeb_rearwheelspeed_354* temp = _impl_.aeb_rearwheelspeed_354_;
  _impl_.aeb_rearwheelspeed_354_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_rearwheelspeed_354* Neolix_edu::_internal_mutable_aeb_rearwheelspeed_354() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.aeb_rearwheelspeed_354_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_rearwheelspeed_354>(GetArenaForAllocation());
    _impl_.aeb_rearwheelspeed_354_ = p;
  }
  return _impl_.aeb_rearwheelspeed_354_;
}
inline ::apollo::canbus::Aeb_rearwheelspeed_354* Neolix_edu::mutable_aeb_rearwheelspeed_354() {
  ::apollo::canbus::Aeb_rearwheelspeed_354* _msg = _internal_mutable_aeb_rearwheelspeed_354();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_rearwheelspeed_354)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_rearwheelspeed_354(::apollo::canbus::Aeb_rearwheelspeed_354* aeb_rearwheelspeed_354) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_rearwheelspeed_354_;
  }
  if (aeb_rearwheelspeed_354) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_rearwheelspeed_354);
    if (message_arena != submessage_arena) {
      aeb_rearwheelspeed_354 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_rearwheelspeed_354, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.aeb_rearwheelspeed_354_ = aeb_rearwheelspeed_354;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_rearwheelspeed_354)
}

// optional .apollo.canbus.Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 = 21;
inline bool Neolix_edu::_internal_has_aeb_frontwheelspeed_353() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aeb_frontwheelspeed_353_ != nullptr);
  return value;
}
inline bool Neolix_edu::has_aeb_frontwheelspeed_353() const {
  return _internal_has_aeb_frontwheelspeed_353();
}
inline void Neolix_edu::clear_aeb_frontwheelspeed_353() {
  if (_impl_.aeb_frontwheelspeed_353_ != nullptr) _impl_.aeb_frontwheelspeed_353_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::canbus::Aeb_frontwheelspeed_353& Neolix_edu::_internal_aeb_frontwheelspeed_353() const {
  const ::apollo::canbus::Aeb_frontwheelspeed_353* p = _impl_.aeb_frontwheelspeed_353_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aeb_frontwheelspeed_353&>(
      ::apollo::canbus::_Aeb_frontwheelspeed_353_default_instance_);
}
inline const ::apollo::canbus::Aeb_frontwheelspeed_353& Neolix_edu::aeb_frontwheelspeed_353() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Neolix_edu.aeb_frontwheelspeed_353)
  return _internal_aeb_frontwheelspeed_353();
}
inline void Neolix_edu::unsafe_arena_set_allocated_aeb_frontwheelspeed_353(
    ::apollo::canbus::Aeb_frontwheelspeed_353* aeb_frontwheelspeed_353) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aeb_frontwheelspeed_353_);
  }
  _impl_.aeb_frontwheelspeed_353_ = aeb_frontwheelspeed_353;
  if (aeb_frontwheelspeed_353) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Neolix_edu.aeb_frontwheelspeed_353)
}
inline ::apollo::canbus::Aeb_frontwheelspeed_353* Neolix_edu::release_aeb_frontwheelspeed_353() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::canbus::Aeb_frontwheelspeed_353* temp = _impl_.aeb_frontwheelspeed_353_;
  _impl_.aeb_frontwheelspeed_353_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Aeb_frontwheelspeed_353* Neolix_edu::unsafe_arena_release_aeb_frontwheelspeed_353() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Neolix_edu.aeb_frontwheelspeed_353)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::apollo::canbus::Aeb_frontwheelspeed_353* temp = _impl_.aeb_frontwheelspeed_353_;
  _impl_.aeb_frontwheelspeed_353_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aeb_frontwheelspeed_353* Neolix_edu::_internal_mutable_aeb_frontwheelspeed_353() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.aeb_frontwheelspeed_353_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aeb_frontwheelspeed_353>(GetArenaForAllocation());
    _impl_.aeb_frontwheelspeed_353_ = p;
  }
  return _impl_.aeb_frontwheelspeed_353_;
}
inline ::apollo::canbus::Aeb_frontwheelspeed_353* Neolix_edu::mutable_aeb_frontwheelspeed_353() {
  ::apollo::canbus::Aeb_frontwheelspeed_353* _msg = _internal_mutable_aeb_frontwheelspeed_353();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Neolix_edu.aeb_frontwheelspeed_353)
  return _msg;
}
inline void Neolix_edu::set_allocated_aeb_frontwheelspeed_353(::apollo::canbus::Aeb_frontwheelspeed_353* aeb_frontwheelspeed_353) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aeb_frontwheelspeed_353_;
  }
  if (aeb_frontwheelspeed_353) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aeb_frontwheelspeed_353);
    if (message_arena != submessage_arena) {
      aeb_frontwheelspeed_353 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_frontwheelspeed_353, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.aeb_frontwheelspeed_353_ = aeb_frontwheelspeed_353;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Neolix_edu.aeb_frontwheelspeed_353)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType>() {
  return ::apollo::canbus::Vcu_brake_report_47_Control_mode_respType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType>() {
  return ::apollo::canbus::Vcu_eps_report_57_Control_mode_respType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType>() {
  return ::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType>() {
  return ::apollo::canbus::Vcu_drive_report_52_Control_mode_respType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType>() {
  return ::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType>() {
  return ::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto
