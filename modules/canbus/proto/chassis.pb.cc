// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#include "modules/canbus/proto/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR Chassis::Chassis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.signal_)*/nullptr
  , /*decltype(_impl_.chassis_gps_)*/nullptr
  , /*decltype(_impl_.engage_advice_)*/nullptr
  , /*decltype(_impl_.wheel_speed_)*/nullptr
  , /*decltype(_impl_.surround_)*/nullptr
  , /*decltype(_impl_.license_)*/nullptr
  , /*decltype(_impl_.vehicle_id_)*/nullptr
  , /*decltype(_impl_.fuel_range_m_)*/0
  , /*decltype(_impl_.engine_started_)*/false
  , /*decltype(_impl_.parking_brake_)*/false
  , /*decltype(_impl_.high_beam_signal_)*/false
  , /*decltype(_impl_.low_beam_signal_)*/false
  , /*decltype(_impl_.left_turn_signal_)*/false
  , /*decltype(_impl_.right_turn_signal_)*/false
  , /*decltype(_impl_.horn_)*/false
  , /*decltype(_impl_.wiper_)*/false
  , /*decltype(_impl_.disengage_status_)*/false
  , /*decltype(_impl_.driving_mode_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.steering_timestamp_)*/0
  , /*decltype(_impl_.gear_location_)*/0
  , /*decltype(_impl_.chassis_error_mask_)*/0
  , /*decltype(_impl_.engine_rpm_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.speed_mps_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.odometer_m_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.throttle_percentage_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.brake_percentage_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.steering_percentage_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.steering_torque_nm_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.battery_soc_percentage_)*/-1} {}
struct ChassisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisDefaultTypeInternal() {}
  union {
    Chassis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisDefaultTypeInternal _Chassis_default_instance_;
PROTOBUF_CONSTEXPR ChassisGPS::ChassisGPS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.year_)*/0
  , /*decltype(_impl_.month_)*/0
  , /*decltype(_impl_.day_)*/0
  , /*decltype(_impl_.hours_)*/0
  , /*decltype(_impl_.minutes_)*/0
  , /*decltype(_impl_.seconds_)*/0
  , /*decltype(_impl_.compass_direction_)*/0
  , /*decltype(_impl_.pdop_)*/0
  , /*decltype(_impl_.gps_valid_)*/false
  , /*decltype(_impl_.is_gps_fault_)*/false
  , /*decltype(_impl_.is_inferred_)*/false
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.hdop_)*/0
  , /*decltype(_impl_.vdop_)*/0
  , /*decltype(_impl_.gps_speed_)*/0
  , /*decltype(_impl_.num_satellites_)*/0} {}
struct ChassisGPSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisGPSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisGPSDefaultTypeInternal() {}
  union {
    ChassisGPS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
PROTOBUF_CONSTEXPR WheelSpeed::WheelSpeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wheel_spd_rr_)*/0
  , /*decltype(_impl_.wheel_spd_rl_)*/0
  , /*decltype(_impl_.wheel_spd_fr_)*/0
  , /*decltype(_impl_.wheel_spd_fl_)*/0
  , /*decltype(_impl_.is_wheel_spd_rr_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_rl_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_fr_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_fl_valid_)*/false
  , /*decltype(_impl_.wheel_direction_rr_)*/3
  , /*decltype(_impl_.wheel_direction_rl_)*/3
  , /*decltype(_impl_.wheel_direction_fr_)*/3
  , /*decltype(_impl_.wheel_direction_fl_)*/3} {}
struct WheelSpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WheelSpeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WheelSpeedDefaultTypeInternal() {}
  union {
    WheelSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
PROTOBUF_CONSTEXPR Sonar::Sonar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.range_)*/0} {}
struct SonarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SonarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SonarDefaultTypeInternal() {}
  union {
    Sonar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SonarDefaultTypeInternal _Sonar_default_instance_;
PROTOBUF_CONSTEXPR Surround::Surround(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sonar_range_)*/{}
  , /*decltype(_impl_.sonar_)*/{}
  , /*decltype(_impl_.cross_traffic_alert_left_)*/false
  , /*decltype(_impl_.cross_traffic_alert_left_enabled_)*/false
  , /*decltype(_impl_.blind_spot_left_alert_)*/false
  , /*decltype(_impl_.blind_spot_left_alert_enabled_)*/false
  , /*decltype(_impl_.cross_traffic_alert_right_)*/false
  , /*decltype(_impl_.cross_traffic_alert_right_enabled_)*/false
  , /*decltype(_impl_.blind_spot_right_alert_)*/false
  , /*decltype(_impl_.blind_spot_right_alert_enabled_)*/false
  , /*decltype(_impl_.sonar00_)*/0
  , /*decltype(_impl_.sonar01_)*/0
  , /*decltype(_impl_.sonar02_)*/0
  , /*decltype(_impl_.sonar03_)*/0
  , /*decltype(_impl_.sonar04_)*/0
  , /*decltype(_impl_.sonar05_)*/0
  , /*decltype(_impl_.sonar06_)*/0
  , /*decltype(_impl_.sonar07_)*/0
  , /*decltype(_impl_.sonar08_)*/0
  , /*decltype(_impl_.sonar09_)*/0
  , /*decltype(_impl_.sonar10_)*/0
  , /*decltype(_impl_.sonar11_)*/0
  , /*decltype(_impl_.sonar_enabled_)*/false
  , /*decltype(_impl_.sonar_fault_)*/false} {}
struct SurroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurroundDefaultTypeInternal() {}
  union {
    Surround _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurroundDefaultTypeInternal _Surround_default_instance_;
PROTOBUF_CONSTEXPR License::License(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LicenseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LicenseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LicenseDefaultTypeInternal() {}
  union {
    License _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LicenseDefaultTypeInternal _License_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.engine_started_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.speed_mps_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.odometer_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.parking_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.wiper_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.disengage_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.gear_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.chassis_error_mask_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.chassis_gps_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.surround_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _impl_.battery_soc_percentage_),
  9,
  23,
  24,
  25,
  8,
  26,
  27,
  28,
  29,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  0,
  22,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  30,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.gps_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.hours_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.compass_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.is_inferred_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.altitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.vdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.num_satellites_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _impl_.gps_speed_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  14,
  15,
  16,
  17,
  13,
  19,
  18,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.is_wheel_spd_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_direction_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_spd_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.is_wheel_spd_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_direction_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_spd_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.is_wheel_spd_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_direction_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_spd_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.is_wheel_spd_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_direction_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _impl_.wheel_spd_fl_),
  4,
  8,
  0,
  5,
  9,
  1,
  6,
  10,
  2,
  7,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Sonar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Sonar, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Sonar, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Sonar, _impl_.rotation_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.cross_traffic_alert_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.cross_traffic_alert_left_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.blind_spot_left_alert_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.blind_spot_left_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.cross_traffic_alert_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.cross_traffic_alert_right_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.blind_spot_right_alert_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.blind_spot_right_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar00_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar01_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar02_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar03_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar04_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar05_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar06_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar07_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar08_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar09_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar10_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar11_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Surround, _impl_.sonar_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, _impl_.vin_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 37, -1, sizeof(::apollo::canbus::Chassis)},
  { 68, 94, -1, sizeof(::apollo::canbus::ChassisGPS)},
  { 114, 132, -1, sizeof(::apollo::canbus::WheelSpeed)},
  { 144, 153, -1, sizeof(::apollo::canbus::Sonar)},
  { 156, 186, -1, sizeof(::apollo::canbus::Surround)},
  { 210, 217, -1, sizeof(::apollo::canbus::License)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_Chassis_default_instance_._instance,
  &::apollo::canbus::_ChassisGPS_default_instance_._instance,
  &::apollo::canbus::_WheelSpeed_default_instance_._instance,
  &::apollo::canbus::_Sonar_default_instance_._instance,
  &::apollo::canbus::_Surround_default_instance_._instance,
  &::apollo::canbus::_License_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"modules/canbus/proto/chassis.proto\022\rap"
  "ollo.canbus\032!modules/common/proto/header"
  ".proto\032)modules/common/proto/vehicle_sig"
  "nal.proto\032&modules/common/proto/drive_st"
  "ate.proto\032#modules/common/proto/geometry"
  ".proto\0321modules/common/configs/proto/veh"
  "icle_config.proto\"\354\014\n\007Chassis\022\026\n\016engine_"
  "started\030\003 \001(\010\022\027\n\nengine_rpm\030\004 \001(\002:\003nan\022\026"
  "\n\tspeed_mps\030\005 \001(\002:\003nan\022\027\n\nodometer_m\030\006 \001"
  "(\002:\003nan\022\024\n\014fuel_range_m\030\007 \001(\005\022 \n\023throttl"
  "e_percentage\030\010 \001(\002:\003nan\022\035\n\020brake_percent"
  "age\030\t \001(\002:\003nan\022 \n\023steering_percentage\030\013 "
  "\001(\002:\003nan\022\037\n\022steering_torque_nm\030\014 \001(\002:\003na"
  "n\022\025\n\rparking_brake\030\r \001(\010\022\034\n\020high_beam_si"
  "gnal\030\016 \001(\010B\002\030\001\022\033\n\017low_beam_signal\030\017 \001(\010B"
  "\002\030\001\022\034\n\020left_turn_signal\030\020 \001(\010B\002\030\001\022\035\n\021rig"
  "ht_turn_signal\030\021 \001(\010B\002\030\001\022\020\n\004horn\030\022 \001(\010B\002"
  "\030\001\022\r\n\005wiper\030\023 \001(\010\022\034\n\020disengage_status\030\024 "
  "\001(\010B\002\030\001\022I\n\014driving_mode\030\025 \001(\0162\".apollo.c"
  "anbus.Chassis.DrivingMode:\017COMPLETE_MANU"
  "AL\022>\n\nerror_code\030\026 \001(\0162 .apollo.canbus.C"
  "hassis.ErrorCode:\010NO_ERROR\022:\n\rgear_locat"
  "ion\030\027 \001(\0162#.apollo.canbus.Chassis.GearPo"
  "sition\022\032\n\022steering_timestamp\030\030 \001(\001\022%\n\006he"
  "ader\030\031 \001(\0132\025.apollo.common.Header\022\035\n\022cha"
  "ssis_error_mask\030\032 \001(\005:\0010\022,\n\006signal\030\033 \001(\013"
  "2\034.apollo.common.VehicleSignal\022.\n\013chassi"
  "s_gps\030\034 \001(\0132\031.apollo.canbus.ChassisGPS\0222"
  "\n\rengage_advice\030\035 \001(\0132\033.apollo.common.En"
  "gageAdvice\022.\n\013wheel_speed\030\036 \001(\0132\031.apollo"
  ".canbus.WheelSpeed\022)\n\010surround\030\037 \001(\0132\027.a"
  "pollo.canbus.Surround\022+\n\007license\030  \001(\0132\026"
  ".apollo.canbus.LicenseB\002\030\001\022,\n\nvehicle_id"
  "\030! \001(\0132\030.apollo.common.VehicleID\022\"\n\026batt"
  "ery_soc_percentage\030\" \001(\005:\002-1\"y\n\013DrivingM"
  "ode\022\023\n\017COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUT"
  "O_DRIVE\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_S"
  "PEED_ONLY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\200\002\n\tErro"
  "rCode\022\014\n\010NO_ERROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD"
  "\020\001\022\021\n\rCHASSIS_ERROR\020\002\022\032\n\026CHASSIS_ERROR_O"
  "N_STEER\020\006\022\032\n\026CHASSIS_ERROR_ON_BRAKE\020\007\022\035\n"
  "\031CHASSIS_ERROR_ON_THROTTLE\020\010\022\031\n\025CHASSIS_"
  "ERROR_ON_GEAR\020\t\022\027\n\023MANUAL_INTERVENTION\020\003"
  "\022\035\n\031CHASSIS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNO"
  "WN_ERROR\020\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_NEUT"
  "RAL\020\000\022\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022"
  "\020\n\014GEAR_PARKING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_"
  "INVALID\020\005\022\r\n\tGEAR_NONE\020\006\"\211\003\n\nChassisGPS\022"
  "\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\t"
  "gps_valid\030\003 \001(\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005"
  " \001(\005\022\013\n\003day\030\006 \001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minu"
  "tes\030\010 \001(\005\022\017\n\007seconds\030\t \001(\005\022\031\n\021compass_di"
  "rection\030\n \001(\001\022\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fa"
  "ult\030\014 \001(\010\022\023\n\013is_inferred\030\r \001(\010\022\020\n\010altitu"
  "de\030\016 \001(\001\022\017\n\007heading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022"
  "\014\n\004vdop\030\021 \001(\001\022*\n\007quality\030\022 \001(\0162\031.apollo."
  "canbus.GpsQuality\022\026\n\016num_satellites\030\023 \001("
  "\005\022\021\n\tgps_speed\030\024 \001(\001\"\216\005\n\nWheelSpeed\022$\n\025i"
  "s_wheel_spd_rr_valid\030\001 \001(\010:\005false\022M\n\022whe"
  "el_direction_rr\030\002 \001(\0162(.apollo.canbus.Wh"
  "eelSpeed.WheelSpeedType:\007INVALID\022\027\n\014whee"
  "l_spd_rr\030\003 \001(\001:\0010\022$\n\025is_wheel_spd_rl_val"
  "id\030\004 \001(\010:\005false\022M\n\022wheel_direction_rl\030\005 "
  "\001(\0162(.apollo.canbus.WheelSpeed.WheelSpee"
  "dType:\007INVALID\022\027\n\014wheel_spd_rl\030\006 \001(\001:\0010\022"
  "$\n\025is_wheel_spd_fr_valid\030\007 \001(\010:\005false\022M\n"
  "\022wheel_direction_fr\030\010 \001(\0162(.apollo.canbu"
  "s.WheelSpeed.WheelSpeedType:\007INVALID\022\027\n\014"
  "wheel_spd_fr\030\t \001(\001:\0010\022$\n\025is_wheel_spd_fl"
  "_valid\030\n \001(\010:\005false\022M\n\022wheel_direction_f"
  "l\030\013 \001(\0162(.apollo.canbus.WheelSpeed.Wheel"
  "SpeedType:\007INVALID\022\027\n\014wheel_spd_fl\030\014 \001(\001"
  ":\0010\"H\n\016WheelSpeedType\022\013\n\007FORWARD\020\000\022\014\n\010BA"
  "CKWARD\020\001\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVALID\020\003\"p\n"
  "\005Sonar\022\r\n\005range\030\001 \001(\001\022+\n\013translation\030\002 \001"
  "(\0132\026.apollo.common.Point3D\022+\n\010rotation\030\003"
  " \001(\0132\031.apollo.common.Quaternion\"\344\004\n\010Surr"
  "ound\022 \n\030cross_traffic_alert_left\030\001 \001(\010\022("
  "\n cross_traffic_alert_left_enabled\030\002 \001(\010"
  "\022\035\n\025blind_spot_left_alert\030\003 \001(\010\022%\n\035blind"
  "_spot_left_alert_enabled\030\004 \001(\010\022!\n\031cross_"
  "traffic_alert_right\030\005 \001(\010\022)\n!cross_traff"
  "ic_alert_right_enabled\030\006 \001(\010\022\036\n\026blind_sp"
  "ot_right_alert\030\007 \001(\010\022&\n\036blind_spot_right"
  "_alert_enabled\030\010 \001(\010\022\017\n\007sonar00\030\t \001(\001\022\017\n"
  "\007sonar01\030\n \001(\001\022\017\n\007sonar02\030\013 \001(\001\022\017\n\007sonar"
  "03\030\014 \001(\001\022\017\n\007sonar04\030\r \001(\001\022\017\n\007sonar05\030\016 \001"
  "(\001\022\017\n\007sonar06\030\017 \001(\001\022\017\n\007sonar07\030\020 \001(\001\022\017\n\007"
  "sonar08\030\021 \001(\001\022\017\n\007sonar09\030\022 \001(\001\022\017\n\007sonar1"
  "0\030\023 \001(\001\022\017\n\007sonar11\030\024 \001(\001\022\025\n\rsonar_enable"
  "d\030\025 \001(\010\022\023\n\013sonar_fault\030\026 \001(\010\022\023\n\013sonar_ra"
  "nge\030\027 \003(\001\022#\n\005sonar\030\030 \003(\0132\024.apollo.canbus"
  ".Sonar\"\032\n\007License\022\017\n\003vin\030\001 \001(\tB\002\030\001*A\n\nGp"
  "sQuality\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_"
  "3D\020\002\022\017\n\013FIX_INVALID\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto = {
    false, false, 3781, descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_2eproto,
    "modules/canbus/proto/chassis.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_deps, 5, 6,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fchassis_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
constexpr Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
constexpr Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
constexpr Chassis_DrivingMode Chassis::EMERGENCY_MODE;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_ErrorCode Chassis::NO_ERROR;
constexpr Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
constexpr Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
constexpr Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MIN;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MAX;
constexpr int Chassis::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_GearPosition Chassis::GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis::GEAR_DRIVE;
constexpr Chassis_GearPosition Chassis::GEAR_REVERSE;
constexpr Chassis_GearPosition Chassis::GEAR_PARKING;
constexpr Chassis_GearPosition Chassis::GEAR_LOW;
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GEAR_NONE;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[3];
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
constexpr int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[4];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Chassis::_Internal {
 public:
  using HasBits = decltype(std::declval<Chassis>()._impl_._has_bits_);
  static void set_has_engine_started(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_engine_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_odometer_m(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fuel_range_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_steering_torque_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_high_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_low_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_left_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_right_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_disengage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_steering_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::common::Header& header(const Chassis* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chassis_error_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::common::VehicleSignal& signal(const Chassis* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::ChassisGPS& chassis_gps(const Chassis* msg);
  static void set_has_chassis_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const Chassis* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::WheelSpeed& wheel_speed(const Chassis* msg);
  static void set_has_wheel_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Surround& surround(const Chassis* msg);
  static void set_has_surround(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::License& license(const Chassis* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::VehicleID& vehicle_id(const Chassis* msg);
  static void set_has_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_battery_soc_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::apollo::common::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::VehicleSignal&
Chassis::_Internal::signal(const Chassis* msg) {
  return *msg->_impl_.signal_;
}
const ::apollo::canbus::ChassisGPS&
Chassis::_Internal::chassis_gps(const Chassis* msg) {
  return *msg->_impl_.chassis_gps_;
}
const ::apollo::common::EngageAdvice&
Chassis::_Internal::engage_advice(const Chassis* msg) {
  return *msg->_impl_.engage_advice_;
}
const ::apollo::canbus::WheelSpeed&
Chassis::_Internal::wheel_speed(const Chassis* msg) {
  return *msg->_impl_.wheel_speed_;
}
const ::apollo::canbus::Surround&
Chassis::_Internal::surround(const Chassis* msg) {
  return *msg->_impl_.surround_;
}
const ::apollo::canbus::License&
Chassis::_Internal::license(const Chassis* msg) {
  return *msg->_impl_.license_;
}
const ::apollo::common::VehicleID&
Chassis::_Internal::vehicle_id(const Chassis* msg) {
  return *msg->_impl_.vehicle_id_;
}
void Chassis::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_signal() {
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_engage_advice() {
  if (_impl_.engage_advice_ != nullptr) _impl_.engage_advice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Chassis::clear_vehicle_id() {
  if (_impl_.vehicle_id_ != nullptr) _impl_.vehicle_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
Chassis::Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.chassis_gps_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.wheel_speed_){nullptr}
    , decltype(_impl_.surround_){nullptr}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.vehicle_id_){nullptr}
    , decltype(_impl_.fuel_range_m_){}
    , decltype(_impl_.engine_started_){}
    , decltype(_impl_.parking_brake_){}
    , decltype(_impl_.high_beam_signal_){}
    , decltype(_impl_.low_beam_signal_){}
    , decltype(_impl_.left_turn_signal_){}
    , decltype(_impl_.right_turn_signal_){}
    , decltype(_impl_.horn_){}
    , decltype(_impl_.wiper_){}
    , decltype(_impl_.disengage_status_){}
    , decltype(_impl_.driving_mode_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.steering_timestamp_){}
    , decltype(_impl_.gear_location_){}
    , decltype(_impl_.chassis_error_mask_){}
    , decltype(_impl_.engine_rpm_){}
    , decltype(_impl_.speed_mps_){}
    , decltype(_impl_.odometer_m_){}
    , decltype(_impl_.throttle_percentage_){}
    , decltype(_impl_.brake_percentage_){}
    , decltype(_impl_.steering_percentage_){}
    , decltype(_impl_.steering_torque_nm_){}
    , decltype(_impl_.battery_soc_percentage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_signal()) {
    _impl_.signal_ = new ::apollo::common::VehicleSignal(*from._impl_.signal_);
  }
  if (from._internal_has_chassis_gps()) {
    _impl_.chassis_gps_ = new ::apollo::canbus::ChassisGPS(*from._impl_.chassis_gps_);
  }
  if (from._internal_has_engage_advice()) {
    _impl_.engage_advice_ = new ::apollo::common::EngageAdvice(*from._impl_.engage_advice_);
  }
  if (from._internal_has_wheel_speed()) {
    _impl_.wheel_speed_ = new ::apollo::canbus::WheelSpeed(*from._impl_.wheel_speed_);
  }
  if (from._internal_has_surround()) {
    _impl_.surround_ = new ::apollo::canbus::Surround(*from._impl_.surround_);
  }
  if (from._internal_has_license()) {
    _impl_.license_ = new ::apollo::canbus::License(*from._impl_.license_);
  }
  if (from._internal_has_vehicle_id()) {
    _impl_.vehicle_id_ = new ::apollo::common::VehicleID(*from._impl_.vehicle_id_);
  }
  ::memcpy(&_impl_.fuel_range_m_, &from._impl_.fuel_range_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_soc_percentage_) -
    reinterpret_cast<char*>(&_impl_.fuel_range_m_)) + sizeof(_impl_.battery_soc_percentage_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Chassis)
}

inline void Chassis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.chassis_gps_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.wheel_speed_){nullptr}
    , decltype(_impl_.surround_){nullptr}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.vehicle_id_){nullptr}
    , decltype(_impl_.fuel_range_m_){0}
    , decltype(_impl_.engine_started_){false}
    , decltype(_impl_.parking_brake_){false}
    , decltype(_impl_.high_beam_signal_){false}
    , decltype(_impl_.low_beam_signal_){false}
    , decltype(_impl_.left_turn_signal_){false}
    , decltype(_impl_.right_turn_signal_){false}
    , decltype(_impl_.horn_){false}
    , decltype(_impl_.wiper_){false}
    , decltype(_impl_.disengage_status_){false}
    , decltype(_impl_.driving_mode_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.steering_timestamp_){0}
    , decltype(_impl_.gear_location_){0}
    , decltype(_impl_.chassis_error_mask_){0}
    , decltype(_impl_.engine_rpm_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.speed_mps_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.odometer_m_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.throttle_percentage_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.brake_percentage_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.steering_percentage_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.steering_torque_nm_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.battery_soc_percentage_){-1}
  };
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Chassis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chassis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.signal_;
  if (this != internal_default_instance()) delete _impl_.chassis_gps_;
  if (this != internal_default_instance()) delete _impl_.engage_advice_;
  if (this != internal_default_instance()) delete _impl_.wheel_speed_;
  if (this != internal_default_instance()) delete _impl_.surround_;
  if (this != internal_default_instance()) delete _impl_.license_;
  if (this != internal_default_instance()) delete _impl_.vehicle_id_;
}

void Chassis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Chassis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chassis_gps_ != nullptr);
      _impl_.chassis_gps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.engage_advice_ != nullptr);
      _impl_.engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.wheel_speed_ != nullptr);
      _impl_.wheel_speed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.surround_ != nullptr);
      _impl_.surround_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.license_ != nullptr);
      _impl_.license_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.vehicle_id_ != nullptr);
      _impl_.vehicle_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.fuel_range_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.horn_) -
        reinterpret_cast<char*>(&_impl_.fuel_range_m_)) + sizeof(_impl_.horn_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.wiper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chassis_error_mask_) -
        reinterpret_cast<char*>(&_impl_.wiper_)) + sizeof(_impl_.chassis_error_mask_));
    _impl_.engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
  }
  if (cached_has_bits & 0x7f000000u) {
    _impl_.speed_mps_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.odometer_m_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.throttle_percentage_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.brake_percentage_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.steering_percentage_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.battery_soc_percentage_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chassis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool engine_started = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_engine_started(&has_bits);
          _impl_.engine_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float engine_rpm = 4 [default = nan];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_engine_rpm(&has_bits);
          _impl_.engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_mps = 5 [default = nan];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_speed_mps(&has_bits);
          _impl_.speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float odometer_m = 6 [default = nan];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_odometer_m(&has_bits);
          _impl_.odometer_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fuel_range_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_fuel_range_m(&has_bits);
          _impl_.fuel_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float throttle_percentage = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_throttle_percentage(&has_bits);
          _impl_.throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float brake_percentage = 9 [default = nan];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_brake_percentage(&has_bits);
          _impl_.brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float steering_percentage = 11 [default = nan];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_steering_percentage(&has_bits);
          _impl_.steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float steering_torque_nm = 12 [default = nan];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_steering_torque_nm(&has_bits);
          _impl_.steering_torque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_brake = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_parking_brake(&has_bits);
          _impl_.parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_high_beam_signal(&has_bits);
          _impl_.high_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_low_beam_signal(&has_bits);
          _impl_.low_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_left_turn_signal(&has_bits);
          _impl_.left_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_right_turn_signal(&has_bits);
          _impl_.right_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool horn = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_horn(&has_bits);
          _impl_.horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool wiper = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_wiper(&has_bits);
          _impl_.wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disengage_status = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_disengage_status(&has_bits);
          _impl_.disengage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::canbus::Chassis_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double steering_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_steering_timestamp(&has_bits);
          _impl_.steering_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_chassis_error_mask(&has_bits);
          _impl_.chassis_error_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal signal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis_gps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Surround surround = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_surround(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 32 [deprecated = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleID vehicle_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 battery_soc_percentage = 34 [default = -1];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_battery_soc_percentage(&has_bits);
          _impl_.battery_soc_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chassis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Chassis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_engine_started(), target);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_disengage_status(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_error_code(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_steering_timestamp(), target);
  }

  // optional .apollo.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_chassis_error_mask(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::chassis_gps(this),
        _Internal::chassis_gps(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::engage_advice(this),
        _Internal::engage_advice(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::wheel_speed(this),
        _Internal::wheel_speed(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::surround(this),
        _Internal::surround(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::license(this),
        _Internal::license(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.VehicleID vehicle_id = 33;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::vehicle_id(this),
        _Internal::vehicle_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 battery_soc_percentage = 34 [default = -1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_battery_soc_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Chassis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.VehicleSignal signal = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_);
    }

    // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chassis_gps_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.engage_advice_);
    }

    // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wheel_speed_);
    }

    // optional .apollo.canbus.Surround surround = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.surround_);
    }

    // optional .apollo.canbus.License license = 32 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.license_);
    }

    // optional .apollo.common.VehicleID vehicle_id = 33;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_id_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 fuel_range_m = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fuel_range_m());
    }

    // optional bool engine_started = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool wiper = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
    }

    // optional double steering_timestamp = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_chassis_error_mask());
    }

    // optional float engine_rpm = 4 [default = nan];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional float speed_mps = 5 [default = nan];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = nan];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = nan];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional int32 battery_soc_percentage = 34 [default = -1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_battery_soc_percentage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chassis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chassis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chassis::GetClassData() const { return &_class_data_; }

void Chassis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chassis *>(to)->MergeFrom(
      static_cast<const Chassis &>(from));
}


void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chassis_gps()->::apollo::canbus::ChassisGPS::MergeFrom(from._internal_chassis_gps());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_wheel_speed()->::apollo::canbus::WheelSpeed::MergeFrom(from._internal_wheel_speed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_surround()->::apollo::canbus::Surround::MergeFrom(from._internal_surround());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_license()->::apollo::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vehicle_id()->::apollo::common::VehicleID::MergeFrom(from._internal_vehicle_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.fuel_range_m_ = from._impl_.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.engine_started_ = from._impl_.engine_started_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.parking_brake_ = from._impl_.parking_brake_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.high_beam_signal_ = from._impl_.high_beam_signal_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.low_beam_signal_ = from._impl_.low_beam_signal_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.left_turn_signal_ = from._impl_.left_turn_signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.right_turn_signal_ = from._impl_.right_turn_signal_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.horn_ = from._impl_.horn_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.wiper_ = from._impl_.wiper_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.disengage_status_ = from._impl_.disengage_status_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.driving_mode_ = from._impl_.driving_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.steering_timestamp_ = from._impl_.steering_timestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.gear_location_ = from._impl_.gear_location_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.chassis_error_mask_ = from._impl_.chassis_error_mask_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.engine_rpm_ = from._impl_.engine_rpm_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.speed_mps_ = from._impl_.speed_mps_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.odometer_m_ = from._impl_.odometer_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.throttle_percentage_ = from._impl_.throttle_percentage_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.brake_percentage_ = from._impl_.brake_percentage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.steering_percentage_ = from._impl_.steering_percentage_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.steering_torque_nm_ = from._impl_.steering_torque_nm_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.battery_soc_percentage_ = from._impl_.battery_soc_percentage_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chassis, _impl_.chassis_error_mask_)
      + sizeof(Chassis::_impl_.chassis_error_mask_)
      - PROTOBUF_FIELD_OFFSET(Chassis, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
  swap(_impl_.engine_rpm_, other->_impl_.engine_rpm_);
  swap(_impl_.speed_mps_, other->_impl_.speed_mps_);
  swap(_impl_.odometer_m_, other->_impl_.odometer_m_);
  swap(_impl_.throttle_percentage_, other->_impl_.throttle_percentage_);
  swap(_impl_.brake_percentage_, other->_impl_.brake_percentage_);
  swap(_impl_.steering_percentage_, other->_impl_.steering_percentage_);
  swap(_impl_.steering_torque_nm_, other->_impl_.steering_torque_nm_);
  swap(_impl_.battery_soc_percentage_, other->_impl_.battery_soc_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[0]);
}

// ===================================================================

class ChassisGPS::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisGPS>()._impl_._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_compass_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_gps_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_inferred(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_satellites(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

ChassisGPS::ChassisGPS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.hours_){}
    , decltype(_impl_.minutes_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.compass_direction_){}
    , decltype(_impl_.pdop_){}
    , decltype(_impl_.gps_valid_){}
    , decltype(_impl_.is_gps_fault_){}
    , decltype(_impl_.is_inferred_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.altitude_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.hdop_){}
    , decltype(_impl_.vdop_){}
    , decltype(_impl_.gps_speed_){}
    , decltype(_impl_.num_satellites_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_satellites_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.num_satellites_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisGPS)
}

inline void ChassisGPS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.year_){0}
    , decltype(_impl_.month_){0}
    , decltype(_impl_.day_){0}
    , decltype(_impl_.hours_){0}
    , decltype(_impl_.minutes_){0}
    , decltype(_impl_.seconds_){0}
    , decltype(_impl_.compass_direction_){0}
    , decltype(_impl_.pdop_){0}
    , decltype(_impl_.gps_valid_){false}
    , decltype(_impl_.is_gps_fault_){false}
    , decltype(_impl_.is_inferred_){false}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.altitude_){0}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.hdop_){0}
    , decltype(_impl_.vdop_){0}
    , decltype(_impl_.gps_speed_){0}
    , decltype(_impl_.num_satellites_){0}
  };
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisGPS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChassisGPS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChassisGPS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisGPS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_) -
        reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.seconds_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.compass_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heading_) -
        reinterpret_cast<char*>(&_impl_.compass_direction_)) + sizeof(_impl_.heading_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.hdop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_satellites_) -
        reinterpret_cast<char*>(&_impl_.hdop_)) + sizeof(_impl_.num_satellites_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisGPS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool gps_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gps_valid(&has_bits);
          _impl_.gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_day(&has_bits);
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hours(&has_bits);
          _impl_.hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_minutes(&has_bits);
          _impl_.minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double compass_direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_compass_direction(&has_bits);
          _impl_.compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pdop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_pdop(&has_bits);
          _impl_.pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_gps_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_gps_fault(&has_bits);
          _impl_.is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inferred = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_inferred(&has_bits);
          _impl_.is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double altitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_altitude(&has_bits);
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hdop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_hdop(&has_bits);
          _impl_.hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vdop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_vdop(&has_bits);
          _impl_.vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.GpsQuality quality = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::GpsQuality_IsValid(val))) {
            _internal_set_quality(static_cast<::apollo::canbus::GpsQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_satellites = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_num_satellites(&has_bits);
          _impl_.num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gps_speed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_gps_speed(&has_bits);
          _impl_.gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChassisGPS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisGPS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_gps_valid(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_day(), target);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_hours(), target);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_minutes(), target);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_seconds(), target);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_compass_direction(), target);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_inferred(), target);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_altitude(), target);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_heading(), target);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_hdop(), target);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_gps_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisGPS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_year());
    }

    // optional int32 month = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_month());
    }

    // optional int32 day = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day());
    }

    // optional int32 hours = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hours());
    }

    // optional int32 minutes = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minutes());
    }

    // optional int32 seconds = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seconds());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double compass_direction = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.GpsQuality quality = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
    }

    // optional double altitude = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double hdop = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_satellites());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisGPS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChassisGPS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisGPS::GetClassData() const { return &_class_data_; }

void ChassisGPS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChassisGPS *>(to)->MergeFrom(
      static_cast<const ChassisGPS &>(from));
}


void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitude_ = from._impl_.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.day_ = from._impl_.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.hours_ = from._impl_.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.minutes_ = from._impl_.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.seconds_ = from._impl_.seconds_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.compass_direction_ = from._impl_.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.pdop_ = from._impl_.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.gps_valid_ = from._impl_.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.is_gps_fault_ = from._impl_.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.is_inferred_ = from._impl_.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.altitude_ = from._impl_.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.hdop_ = from._impl_.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.vdop_ = from._impl_.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.gps_speed_ = from._impl_.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.num_satellites_ = from._impl_.num_satellites_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::InternalSwap(ChassisGPS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisGPS, _impl_.num_satellites_)
      + sizeof(ChassisGPS::_impl_.num_satellites_)
      - PROTOBUF_FIELD_OFFSET(ChassisGPS, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisGPS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[1]);
}

// ===================================================================

class WheelSpeed::_Internal {
 public:
  using HasBits = decltype(std::declval<WheelSpeed>()._impl_._has_bits_);
  static void set_has_is_wheel_spd_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheel_direction_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wheel_spd_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_wheel_spd_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wheel_direction_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wheel_spd_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_wheel_spd_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wheel_direction_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wheel_spd_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_wheel_spd_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wheel_direction_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wheel_spd_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WheelSpeed::WheelSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rr_){}
    , decltype(_impl_.wheel_spd_rl_){}
    , decltype(_impl_.wheel_spd_fr_){}
    , decltype(_impl_.wheel_spd_fl_){}
    , decltype(_impl_.is_wheel_spd_rr_valid_){}
    , decltype(_impl_.is_wheel_spd_rl_valid_){}
    , decltype(_impl_.is_wheel_spd_fr_valid_){}
    , decltype(_impl_.is_wheel_spd_fl_valid_){}
    , decltype(_impl_.wheel_direction_rr_){}
    , decltype(_impl_.wheel_direction_rl_){}
    , decltype(_impl_.wheel_direction_fr_){}
    , decltype(_impl_.wheel_direction_fl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wheel_spd_rr_, &from._impl_.wheel_spd_rr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wheel_direction_fl_) -
    reinterpret_cast<char*>(&_impl_.wheel_spd_rr_)) + sizeof(_impl_.wheel_direction_fl_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.WheelSpeed)
}

inline void WheelSpeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rr_){0}
    , decltype(_impl_.wheel_spd_rl_){0}
    , decltype(_impl_.wheel_spd_fr_){0}
    , decltype(_impl_.wheel_spd_fl_){0}
    , decltype(_impl_.is_wheel_spd_rr_valid_){false}
    , decltype(_impl_.is_wheel_spd_rl_valid_){false}
    , decltype(_impl_.is_wheel_spd_fr_valid_){false}
    , decltype(_impl_.is_wheel_spd_fl_valid_){false}
    , decltype(_impl_.wheel_direction_rr_){3}
    , decltype(_impl_.wheel_direction_rl_){3}
    , decltype(_impl_.wheel_direction_fr_){3}
    , decltype(_impl_.wheel_direction_fl_){3}
  };
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:apollo.canbus.WheelSpeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WheelSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WheelSpeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.WheelSpeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.wheel_spd_rr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_wheel_spd_fl_valid_) -
        reinterpret_cast<char*>(&_impl_.wheel_spd_rr_)) + sizeof(_impl_.is_wheel_spd_fl_valid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.wheel_direction_rr_ = 3;
    _impl_.wheel_direction_rl_ = 3;
    _impl_.wheel_direction_fr_ = 3;
    _impl_.wheel_direction_fl_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelSpeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_wheel_spd_rr_valid = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_wheel_spd_rr_valid(&has_bits);
          _impl_.is_wheel_spd_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_rr = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_wheel_spd_rr(&has_bits);
          _impl_.wheel_spd_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rl_valid = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_wheel_spd_rl_valid(&has_bits);
          _impl_.is_wheel_spd_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_rl = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_wheel_spd_rl(&has_bits);
          _impl_.wheel_spd_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fr_valid = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_wheel_spd_fr_valid(&has_bits);
          _impl_.is_wheel_spd_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_fr = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_wheel_spd_fr(&has_bits);
          _impl_.wheel_spd_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fl_valid = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_wheel_spd_fl_valid(&has_bits);
          _impl_.is_wheel_spd_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_fl = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_wheel_spd_fl(&has_bits);
          _impl_.wheel_spd_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WheelSpeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.WheelSpeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_wheel_spd_fl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.WheelSpeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double wheel_spd_rr = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fr = 9 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fl = 12 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_rr_valid = 1 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fr_valid = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_rr());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_rl());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_fr());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_fl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WheelSpeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WheelSpeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WheelSpeed::GetClassData() const { return &_class_data_; }

void WheelSpeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WheelSpeed *>(to)->MergeFrom(
      static_cast<const WheelSpeed &>(from));
}


void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.wheel_spd_rr_ = from._impl_.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wheel_spd_rl_ = from._impl_.wheel_spd_rl_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.wheel_spd_fr_ = from._impl_.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.wheel_spd_fl_ = from._impl_.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_wheel_spd_rr_valid_ = from._impl_.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_wheel_spd_rl_valid_ = from._impl_.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_wheel_spd_fr_valid_ = from._impl_.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.is_wheel_spd_fl_valid_ = from._impl_.is_wheel_spd_fl_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.wheel_direction_rr_ = from._impl_.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.wheel_direction_rl_ = from._impl_.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.wheel_direction_fr_ = from._impl_.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.wheel_direction_fl_ = from._impl_.wheel_direction_fl_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::InternalSwap(WheelSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelSpeed, _impl_.is_wheel_spd_fl_valid_)
      + sizeof(WheelSpeed::_impl_.is_wheel_spd_fl_valid_)
      - PROTOBUF_FIELD_OFFSET(WheelSpeed, _impl_.wheel_spd_rr_)>(
          reinterpret_cast<char*>(&_impl_.wheel_spd_rr_),
          reinterpret_cast<char*>(&other->_impl_.wheel_spd_rr_));
  swap(_impl_.wheel_direction_rr_, other->_impl_.wheel_direction_rr_);
  swap(_impl_.wheel_direction_rl_, other->_impl_.wheel_direction_rl_);
  swap(_impl_.wheel_direction_fr_, other->_impl_.wheel_direction_fr_);
  swap(_impl_.wheel_direction_fl_, other->_impl_.wheel_direction_fl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelSpeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[2]);
}

// ===================================================================

class Sonar::_Internal {
 public:
  using HasBits = decltype(std::declval<Sonar>()._impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& translation(const Sonar* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Quaternion& rotation(const Sonar* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Point3D&
Sonar::_Internal::translation(const Sonar* msg) {
  return *msg->_impl_.translation_;
}
const ::apollo::common::Quaternion&
Sonar::_Internal::rotation(const Sonar* msg) {
  return *msg->_impl_.rotation_;
}
void Sonar::clear_translation() {
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Sonar::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Sonar::Sonar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _impl_.translation_ = new ::apollo::common::Point3D(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _impl_.rotation_ = new ::apollo::common::Quaternion(*from._impl_.rotation_);
  }
  _impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Sonar)
}

inline void Sonar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.range_){0}
  };
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Sonar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sonar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void Sonar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Sonar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_.range_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sonar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Quaternion rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sonar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Sonar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_range(), target);
  }

  // optional .apollo.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Sonar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Point3D translation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_);
    }

    // optional .apollo.common.Quaternion rotation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

    // optional double range = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sonar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sonar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sonar::GetClassData() const { return &_class_data_; }

void Sonar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sonar *>(to)->MergeFrom(
      static_cast<const Sonar &>(from));
}


void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_translation()->::apollo::common::Point3D::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.range_ = from._impl_.range_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sonar, _impl_.range_)
      + sizeof(Sonar::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(Sonar, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sonar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[3]);
}

// ===================================================================

class Surround::_Internal {
 public:
  using HasBits = decltype(std::declval<Surround>()._impl_._has_bits_);
  static void set_has_cross_traffic_alert_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cross_traffic_alert_left_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blind_spot_left_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blind_spot_left_alert_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cross_traffic_alert_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cross_traffic_alert_right_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_blind_spot_right_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_blind_spot_right_alert_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sonar00(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sonar01(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sonar02(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sonar03(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sonar04(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sonar05(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sonar06(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sonar07(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sonar08(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sonar09(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sonar10(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_sonar11(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sonar_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_sonar_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

Surround::Surround(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Surround)
}
Surround::Surround(const Surround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sonar_range_){from._impl_.sonar_range_}
    , decltype(_impl_.sonar_){from._impl_.sonar_}
    , decltype(_impl_.cross_traffic_alert_left_){}
    , decltype(_impl_.cross_traffic_alert_left_enabled_){}
    , decltype(_impl_.blind_spot_left_alert_){}
    , decltype(_impl_.blind_spot_left_alert_enabled_){}
    , decltype(_impl_.cross_traffic_alert_right_){}
    , decltype(_impl_.cross_traffic_alert_right_enabled_){}
    , decltype(_impl_.blind_spot_right_alert_){}
    , decltype(_impl_.blind_spot_right_alert_enabled_){}
    , decltype(_impl_.sonar00_){}
    , decltype(_impl_.sonar01_){}
    , decltype(_impl_.sonar02_){}
    , decltype(_impl_.sonar03_){}
    , decltype(_impl_.sonar04_){}
    , decltype(_impl_.sonar05_){}
    , decltype(_impl_.sonar06_){}
    , decltype(_impl_.sonar07_){}
    , decltype(_impl_.sonar08_){}
    , decltype(_impl_.sonar09_){}
    , decltype(_impl_.sonar10_){}
    , decltype(_impl_.sonar11_){}
    , decltype(_impl_.sonar_enabled_){}
    , decltype(_impl_.sonar_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cross_traffic_alert_left_, &from._impl_.cross_traffic_alert_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sonar_fault_) -
    reinterpret_cast<char*>(&_impl_.cross_traffic_alert_left_)) + sizeof(_impl_.sonar_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Surround)
}

inline void Surround::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sonar_range_){arena}
    , decltype(_impl_.sonar_){arena}
    , decltype(_impl_.cross_traffic_alert_left_){false}
    , decltype(_impl_.cross_traffic_alert_left_enabled_){false}
    , decltype(_impl_.blind_spot_left_alert_){false}
    , decltype(_impl_.blind_spot_left_alert_enabled_){false}
    , decltype(_impl_.cross_traffic_alert_right_){false}
    , decltype(_impl_.cross_traffic_alert_right_enabled_){false}
    , decltype(_impl_.blind_spot_right_alert_){false}
    , decltype(_impl_.blind_spot_right_alert_enabled_){false}
    , decltype(_impl_.sonar00_){0}
    , decltype(_impl_.sonar01_){0}
    , decltype(_impl_.sonar02_){0}
    , decltype(_impl_.sonar03_){0}
    , decltype(_impl_.sonar04_){0}
    , decltype(_impl_.sonar05_){0}
    , decltype(_impl_.sonar06_){0}
    , decltype(_impl_.sonar07_){0}
    , decltype(_impl_.sonar08_){0}
    , decltype(_impl_.sonar09_){0}
    , decltype(_impl_.sonar10_){0}
    , decltype(_impl_.sonar11_){0}
    , decltype(_impl_.sonar_enabled_){false}
    , decltype(_impl_.sonar_fault_){false}
  };
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Surround)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Surround::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sonar_range_.~RepeatedField();
  _impl_.sonar_.~RepeatedPtrField();
}

void Surround::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Surround)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sonar_range_.Clear();
  _impl_.sonar_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cross_traffic_alert_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.blind_spot_right_alert_enabled_) -
        reinterpret_cast<char*>(&_impl_.cross_traffic_alert_left_)) + sizeof(_impl_.blind_spot_right_alert_enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.sonar00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sonar07_) -
        reinterpret_cast<char*>(&_impl_.sonar00_)) + sizeof(_impl_.sonar07_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.sonar08_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sonar_fault_) -
        reinterpret_cast<char*>(&_impl_.sonar08_)) + sizeof(_impl_.sonar_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Surround::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool cross_traffic_alert_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cross_traffic_alert_left(&has_bits);
          _impl_.cross_traffic_alert_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_left_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cross_traffic_alert_left_enabled(&has_bits);
          _impl_.cross_traffic_alert_left_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blind_spot_left_alert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_blind_spot_left_alert(&has_bits);
          _impl_.blind_spot_left_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blind_spot_left_alert_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_blind_spot_left_alert_enabled(&has_bits);
          _impl_.blind_spot_left_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cross_traffic_alert_right(&has_bits);
          _impl_.cross_traffic_alert_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cross_traffic_alert_right_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cross_traffic_alert_right_enabled(&has_bits);
          _impl_.cross_traffic_alert_right_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blind_spot_right_alert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_blind_spot_right_alert(&has_bits);
          _impl_.blind_spot_right_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blind_spot_right_alert_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_blind_spot_right_alert_enabled(&has_bits);
          _impl_.blind_spot_right_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar00 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_sonar00(&has_bits);
          _impl_.sonar00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar01 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_sonar01(&has_bits);
          _impl_.sonar01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar02 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_sonar02(&has_bits);
          _impl_.sonar02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar03 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_sonar03(&has_bits);
          _impl_.sonar03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar04 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_sonar04(&has_bits);
          _impl_.sonar04_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar05 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_sonar05(&has_bits);
          _impl_.sonar05_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar06 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_sonar06(&has_bits);
          _impl_.sonar06_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar07 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_sonar07(&has_bits);
          _impl_.sonar07_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar08 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_sonar08(&has_bits);
          _impl_.sonar08_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar09 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_sonar09(&has_bits);
          _impl_.sonar09_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_sonar10(&has_bits);
          _impl_.sonar10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sonar11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_sonar11(&has_bits);
          _impl_.sonar11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool sonar_enabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_sonar_enabled(&has_bits);
          _impl_.sonar_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sonar_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_sonar_fault(&has_bits);
          _impl_.sonar_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double sonar_range = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_sonar_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<185>(ptr));
        } else if (static_cast<uint8_t>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sonar_range(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.canbus.Sonar sonar = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sonar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Surround::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Surround)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cross_traffic_alert_left(), target);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cross_traffic_alert_left_enabled(), target);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_blind_spot_left_alert(), target);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_blind_spot_left_alert_enabled(), target);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_cross_traffic_alert_right(), target);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cross_traffic_alert_right_enabled(), target);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_blind_spot_right_alert(), target);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_blind_spot_right_alert_enabled(), target);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_sonar00(), target);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_sonar01(), target);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_sonar02(), target);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_sonar03(), target);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_sonar04(), target);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_sonar05(), target);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_sonar06(), target);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_sonar07(), target);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_sonar08(), target);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_sonar09(), target);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_sonar10(), target);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_sonar11(), target);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_sonar_enabled(), target);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  for (int i = 0, n = this->_internal_sonar_range_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_sonar_range(i), target);
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sonar_size()); i < n; i++) {
    const auto& repfield = this->_internal_sonar(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Surround)
  return target;
}

size_t Surround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Surround)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sonar_range = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sonar_range_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_sonar_range_size());
    total_size += data_size;
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  total_size += 2UL * this->_internal_sonar_size();
  for (const auto& msg : this->_impl_.sonar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool cross_traffic_alert_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_left_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert_enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double sonar00 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double sonar01 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double sonar02 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double sonar03 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double sonar04 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double sonar05 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double sonar06 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double sonar07 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double sonar08 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double sonar09 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double sonar10 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double sonar11 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool sonar_enabled = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool sonar_fault = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Surround::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Surround::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Surround::GetClassData() const { return &_class_data_; }

void Surround::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Surround *>(to)->MergeFrom(
      static_cast<const Surround &>(from));
}


void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sonar_range_.MergeFrom(from._impl_.sonar_range_);
  _impl_.sonar_.MergeFrom(from._impl_.sonar_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cross_traffic_alert_left_ = from._impl_.cross_traffic_alert_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cross_traffic_alert_left_enabled_ = from._impl_.cross_traffic_alert_left_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.blind_spot_left_alert_ = from._impl_.blind_spot_left_alert_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.blind_spot_left_alert_enabled_ = from._impl_.blind_spot_left_alert_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.cross_traffic_alert_right_ = from._impl_.cross_traffic_alert_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.cross_traffic_alert_right_enabled_ = from._impl_.cross_traffic_alert_right_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.blind_spot_right_alert_ = from._impl_.blind_spot_right_alert_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.blind_spot_right_alert_enabled_ = from._impl_.blind_spot_right_alert_enabled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.sonar00_ = from._impl_.sonar00_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.sonar01_ = from._impl_.sonar01_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.sonar02_ = from._impl_.sonar02_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.sonar03_ = from._impl_.sonar03_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.sonar04_ = from._impl_.sonar04_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.sonar05_ = from._impl_.sonar05_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.sonar06_ = from._impl_.sonar06_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.sonar07_ = from._impl_.sonar07_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.sonar08_ = from._impl_.sonar08_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.sonar09_ = from._impl_.sonar09_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.sonar10_ = from._impl_.sonar10_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.sonar11_ = from._impl_.sonar11_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.sonar_enabled_ = from._impl_.sonar_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.sonar_fault_ = from._impl_.sonar_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {
  return true;
}

void Surround::InternalSwap(Surround* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sonar_range_.InternalSwap(&other->_impl_.sonar_range_);
  _impl_.sonar_.InternalSwap(&other->_impl_.sonar_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Surround, _impl_.sonar_fault_)
      + sizeof(Surround::_impl_.sonar_fault_)
      - PROTOBUF_FIELD_OFFSET(Surround, _impl_.cross_traffic_alert_left_)>(
          reinterpret_cast<char*>(&_impl_.cross_traffic_alert_left_),
          reinterpret_cast<char*>(&other->_impl_.cross_traffic_alert_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Surround::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[4]);
}

// ===================================================================

class License::_Internal {
 public:
  using HasBits = decltype(std::declval<License>()._impl_._has_bits_);
  static void set_has_vin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

License::License(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.License)
}
License::License(const License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vin()) {
    _impl_.vin_.Set(from._internal_vin(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.License)
}

inline void License::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vin_){}
  };
  _impl_.vin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

License::~License() {
  // @@protoc_insertion_point(destructor:apollo.canbus.License)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void License::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vin_.Destroy();
}

void License::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.License)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.vin_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* License::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vin = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.canbus.License.vin");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* License::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.License)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vin().data(), static_cast<int>(this->_internal_vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.License)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vin = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData License::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    License::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*License::GetClassData() const { return &_class_data_; }

void License::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<License *>(to)->MergeFrom(
      static_cast<const License &>(from));
}


void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vin()) {
    _internal_set_vin(from._internal_vin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::InternalSwap(License* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vin_, lhs_arena,
      &other->_impl_.vin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata License::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Chassis*
Arena::CreateMaybeMessage< ::apollo::canbus::Chassis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Chassis >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::ChassisGPS*
Arena::CreateMaybeMessage< ::apollo::canbus::ChassisGPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::ChassisGPS >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::WheelSpeed*
Arena::CreateMaybeMessage< ::apollo::canbus::WheelSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::WheelSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Sonar*
Arena::CreateMaybeMessage< ::apollo::canbus::Sonar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Sonar >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Surround*
Arena::CreateMaybeMessage< ::apollo::canbus::Surround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Surround >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::License*
Arena::CreateMaybeMessage< ::apollo::canbus::License >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::License >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
