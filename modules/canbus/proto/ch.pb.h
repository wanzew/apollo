// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2fch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto;
namespace apollo {
namespace canbus {
class Brake_command_111;
struct Brake_command_111DefaultTypeInternal;
extern Brake_command_111DefaultTypeInternal _Brake_command_111_default_instance_;
class Brake_status__511;
struct Brake_status__511DefaultTypeInternal;
extern Brake_status__511DefaultTypeInternal _Brake_status__511_default_instance_;
class Ch;
struct ChDefaultTypeInternal;
extern ChDefaultTypeInternal _Ch_default_instance_;
class Control_command_115;
struct Control_command_115DefaultTypeInternal;
extern Control_command_115DefaultTypeInternal _Control_command_115_default_instance_;
class Ecu_status_1_515;
struct Ecu_status_1_515DefaultTypeInternal;
extern Ecu_status_1_515DefaultTypeInternal _Ecu_status_1_515_default_instance_;
class Ecu_status_2_516;
struct Ecu_status_2_516DefaultTypeInternal;
extern Ecu_status_2_516DefaultTypeInternal _Ecu_status_2_516_default_instance_;
class Ecu_status_3_517;
struct Ecu_status_3_517DefaultTypeInternal;
extern Ecu_status_3_517DefaultTypeInternal _Ecu_status_3_517_default_instance_;
class Gear_command_114;
struct Gear_command_114DefaultTypeInternal;
extern Gear_command_114DefaultTypeInternal _Gear_command_114_default_instance_;
class Gear_status_514;
struct Gear_status_514DefaultTypeInternal;
extern Gear_status_514DefaultTypeInternal _Gear_status_514_default_instance_;
class Steer_command_112;
struct Steer_command_112DefaultTypeInternal;
extern Steer_command_112DefaultTypeInternal _Steer_command_112_default_instance_;
class Steer_status__512;
struct Steer_status__512DefaultTypeInternal;
extern Steer_status__512DefaultTypeInternal _Steer_status__512_default_instance_;
class Throttle_command_110;
struct Throttle_command_110DefaultTypeInternal;
extern Throttle_command_110DefaultTypeInternal _Throttle_command_110_default_instance_;
class Throttle_status__510;
struct Throttle_status__510DefaultTypeInternal;
extern Throttle_status__510DefaultTypeInternal _Throttle_status__510_default_instance_;
class Turnsignal_command_113;
struct Turnsignal_command_113DefaultTypeInternal;
extern Turnsignal_command_113DefaultTypeInternal _Turnsignal_command_113_default_instance_;
class Turnsignal_status__513;
struct Turnsignal_status__513DefaultTypeInternal;
extern Turnsignal_status__513DefaultTypeInternal _Turnsignal_status__513_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Brake_command_111* Arena::CreateMaybeMessage<::apollo::canbus::Brake_command_111>(Arena*);
template<> ::apollo::canbus::Brake_status__511* Arena::CreateMaybeMessage<::apollo::canbus::Brake_status__511>(Arena*);
template<> ::apollo::canbus::Ch* Arena::CreateMaybeMessage<::apollo::canbus::Ch>(Arena*);
template<> ::apollo::canbus::Control_command_115* Arena::CreateMaybeMessage<::apollo::canbus::Control_command_115>(Arena*);
template<> ::apollo::canbus::Ecu_status_1_515* Arena::CreateMaybeMessage<::apollo::canbus::Ecu_status_1_515>(Arena*);
template<> ::apollo::canbus::Ecu_status_2_516* Arena::CreateMaybeMessage<::apollo::canbus::Ecu_status_2_516>(Arena*);
template<> ::apollo::canbus::Ecu_status_3_517* Arena::CreateMaybeMessage<::apollo::canbus::Ecu_status_3_517>(Arena*);
template<> ::apollo::canbus::Gear_command_114* Arena::CreateMaybeMessage<::apollo::canbus::Gear_command_114>(Arena*);
template<> ::apollo::canbus::Gear_status_514* Arena::CreateMaybeMessage<::apollo::canbus::Gear_status_514>(Arena*);
template<> ::apollo::canbus::Steer_command_112* Arena::CreateMaybeMessage<::apollo::canbus::Steer_command_112>(Arena*);
template<> ::apollo::canbus::Steer_status__512* Arena::CreateMaybeMessage<::apollo::canbus::Steer_status__512>(Arena*);
template<> ::apollo::canbus::Throttle_command_110* Arena::CreateMaybeMessage<::apollo::canbus::Throttle_command_110>(Arena*);
template<> ::apollo::canbus::Throttle_status__510* Arena::CreateMaybeMessage<::apollo::canbus::Throttle_status__510>(Arena*);
template<> ::apollo::canbus::Turnsignal_command_113* Arena::CreateMaybeMessage<::apollo::canbus::Turnsignal_command_113>(Arena*);
template<> ::apollo::canbus::Turnsignal_status__513* Arena::CreateMaybeMessage<::apollo::canbus::Turnsignal_status__513>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Control_command_115_Ctrl_cmdType : int {
  Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL = 0,
  Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL = 1
};
bool Control_command_115_Ctrl_cmdType_IsValid(int value);
constexpr Control_command_115_Ctrl_cmdType Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MIN = Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL;
constexpr Control_command_115_Ctrl_cmdType Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX = Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL;
constexpr int Control_command_115_Ctrl_cmdType_Ctrl_cmdType_ARRAYSIZE = Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_command_115_Ctrl_cmdType_descriptor();
template<typename T>
inline const std::string& Control_command_115_Ctrl_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Control_command_115_Ctrl_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Control_command_115_Ctrl_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Control_command_115_Ctrl_cmdType_descriptor(), enum_t_value);
}
inline bool Control_command_115_Ctrl_cmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Control_command_115_Ctrl_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Control_command_115_Ctrl_cmdType>(
    Control_command_115_Ctrl_cmdType_descriptor(), name, value);
}
enum Gear_command_114_Gear_cmdType : int {
  Gear_command_114_Gear_cmdType_GEAR_CMD_PARK = 1,
  Gear_command_114_Gear_cmdType_GEAR_CMD_REVERSE = 2,
  Gear_command_114_Gear_cmdType_GEAR_CMD_NEUTRAL = 3,
  Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE = 4
};
bool Gear_command_114_Gear_cmdType_IsValid(int value);
constexpr Gear_command_114_Gear_cmdType Gear_command_114_Gear_cmdType_Gear_cmdType_MIN = Gear_command_114_Gear_cmdType_GEAR_CMD_PARK;
constexpr Gear_command_114_Gear_cmdType Gear_command_114_Gear_cmdType_Gear_cmdType_MAX = Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE;
constexpr int Gear_command_114_Gear_cmdType_Gear_cmdType_ARRAYSIZE = Gear_command_114_Gear_cmdType_Gear_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_command_114_Gear_cmdType_descriptor();
template<typename T>
inline const std::string& Gear_command_114_Gear_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_command_114_Gear_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_command_114_Gear_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_command_114_Gear_cmdType_descriptor(), enum_t_value);
}
inline bool Gear_command_114_Gear_cmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_command_114_Gear_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_command_114_Gear_cmdType>(
    Gear_command_114_Gear_cmdType_descriptor(), name, value);
}
enum Brake_command_111_Brake_pedal_en_ctrlType : int {
  Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE = 0,
  Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE = 1
};
bool Brake_command_111_Brake_pedal_en_ctrlType_IsValid(int value);
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MIN = Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX = Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE;
constexpr int Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_ARRAYSIZE = Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Brake_command_111_Brake_pedal_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_command_111_Brake_pedal_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_command_111_Brake_pedal_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_command_111_Brake_pedal_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Brake_command_111_Brake_pedal_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_command_111_Brake_pedal_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_command_111_Brake_pedal_en_ctrlType>(
    Brake_command_111_Brake_pedal_en_ctrlType_descriptor(), name, value);
}
enum Throttle_command_110_Throttle_pedal_en_ctrlType : int {
  Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE = 0,
  Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE = 1
};
bool Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(int value);
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MIN = Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX = Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE;
constexpr int Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_ARRAYSIZE = Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Throttle_command_110_Throttle_pedal_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_command_110_Throttle_pedal_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_command_110_Throttle_pedal_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Throttle_command_110_Throttle_pedal_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_command_110_Throttle_pedal_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_command_110_Throttle_pedal_en_ctrlType>(
    Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor(), name, value);
}
enum Turnsignal_command_113_Turn_signal_cmdType : int {
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE = 0,
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT = 1,
  Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT = 2
};
bool Turnsignal_command_113_Turn_signal_cmdType_IsValid(int value);
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MIN = Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX = Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
constexpr int Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE = Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_command_113_Turn_signal_cmdType_descriptor();
template<typename T>
inline const std::string& Turnsignal_command_113_Turn_signal_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turnsignal_command_113_Turn_signal_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turnsignal_command_113_Turn_signal_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turnsignal_command_113_Turn_signal_cmdType_descriptor(), enum_t_value);
}
inline bool Turnsignal_command_113_Turn_signal_cmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Turnsignal_command_113_Turn_signal_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turnsignal_command_113_Turn_signal_cmdType>(
    Turnsignal_command_113_Turn_signal_cmdType_descriptor(), name, value);
}
enum Steer_command_112_Steer_angle_en_ctrlType : int {
  Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE = 0,
  Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE = 1
};
bool Steer_command_112_Steer_angle_en_ctrlType_IsValid(int value);
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MIN = Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX = Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE;
constexpr int Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_ARRAYSIZE = Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_command_112_Steer_angle_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Steer_command_112_Steer_angle_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steer_command_112_Steer_angle_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steer_command_112_Steer_angle_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steer_command_112_Steer_angle_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Steer_command_112_Steer_angle_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steer_command_112_Steer_angle_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steer_command_112_Steer_angle_en_ctrlType>(
    Steer_command_112_Steer_angle_en_ctrlType_descriptor(), name, value);
}
enum Brake_status__511_Brake_pedal_en_stsType : int {
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE = 0,
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_ENABLE = 1,
  Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER = 2
};
bool Brake_status__511_Brake_pedal_en_stsType_IsValid(int value);
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MIN = Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX = Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER;
constexpr int Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_ARRAYSIZE = Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Brake_pedal_en_stsType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Brake_pedal_en_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Brake_pedal_en_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Brake_pedal_en_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Brake_pedal_en_stsType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Brake_pedal_en_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Brake_pedal_en_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Brake_pedal_en_stsType>(
    Brake_status__511_Brake_pedal_en_stsType_descriptor(), name, value);
}
enum Brake_status__511_Brake_errType : int {
  Brake_status__511_Brake_errType_BRAKE_ERR_NOERR = 0,
  Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR = 1
};
bool Brake_status__511_Brake_errType_IsValid(int value);
constexpr Brake_status__511_Brake_errType Brake_status__511_Brake_errType_Brake_errType_MIN = Brake_status__511_Brake_errType_BRAKE_ERR_NOERR;
constexpr Brake_status__511_Brake_errType Brake_status__511_Brake_errType_Brake_errType_MAX = Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR;
constexpr int Brake_status__511_Brake_errType_Brake_errType_ARRAYSIZE = Brake_status__511_Brake_errType_Brake_errType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Brake_errType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Brake_errType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Brake_errType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Brake_errType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Brake_errType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Brake_errType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Brake_errType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Brake_errType>(
    Brake_status__511_Brake_errType_descriptor(), name, value);
}
enum Brake_status__511_Emergency_btn_envType : int {
  Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV = 0,
  Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV = 1
};
bool Brake_status__511_Emergency_btn_envType_IsValid(int value);
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MIN = Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV;
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX = Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
constexpr int Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_ARRAYSIZE = Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Emergency_btn_envType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Emergency_btn_envType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Emergency_btn_envType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Emergency_btn_envType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Emergency_btn_envType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Emergency_btn_envType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Emergency_btn_envType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Emergency_btn_envType>(
    Brake_status__511_Emergency_btn_envType_descriptor(), name, value);
}
enum Brake_status__511_Front_bump_envType : int {
  Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV = 0,
  Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV = 1
};
bool Brake_status__511_Front_bump_envType_IsValid(int value);
constexpr Brake_status__511_Front_bump_envType Brake_status__511_Front_bump_envType_Front_bump_envType_MIN = Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV;
constexpr Brake_status__511_Front_bump_envType Brake_status__511_Front_bump_envType_Front_bump_envType_MAX = Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
constexpr int Brake_status__511_Front_bump_envType_Front_bump_envType_ARRAYSIZE = Brake_status__511_Front_bump_envType_Front_bump_envType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Front_bump_envType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Front_bump_envType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Front_bump_envType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Front_bump_envType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Front_bump_envType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Front_bump_envType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Front_bump_envType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Front_bump_envType>(
    Brake_status__511_Front_bump_envType_descriptor(), name, value);
}
enum Brake_status__511_Back_bump_envType : int {
  Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV = 0,
  Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV = 1
};
bool Brake_status__511_Back_bump_envType_IsValid(int value);
constexpr Brake_status__511_Back_bump_envType Brake_status__511_Back_bump_envType_Back_bump_envType_MIN = Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV;
constexpr Brake_status__511_Back_bump_envType Brake_status__511_Back_bump_envType_Back_bump_envType_MAX = Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV;
constexpr int Brake_status__511_Back_bump_envType_Back_bump_envType_ARRAYSIZE = Brake_status__511_Back_bump_envType_Back_bump_envType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Back_bump_envType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Back_bump_envType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Back_bump_envType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Back_bump_envType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Back_bump_envType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Back_bump_envType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Back_bump_envType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Back_bump_envType>(
    Brake_status__511_Back_bump_envType_descriptor(), name, value);
}
enum Brake_status__511_Overspd_envType : int {
  Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV = 0,
  Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV = 1
};
bool Brake_status__511_Overspd_envType_IsValid(int value);
constexpr Brake_status__511_Overspd_envType Brake_status__511_Overspd_envType_Overspd_envType_MIN = Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV;
constexpr Brake_status__511_Overspd_envType Brake_status__511_Overspd_envType_Overspd_envType_MAX = Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV;
constexpr int Brake_status__511_Overspd_envType_Overspd_envType_ARRAYSIZE = Brake_status__511_Overspd_envType_Overspd_envType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Overspd_envType_descriptor();
template<typename T>
inline const std::string& Brake_status__511_Overspd_envType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_status__511_Overspd_envType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_status__511_Overspd_envType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_status__511_Overspd_envType_descriptor(), enum_t_value);
}
inline bool Brake_status__511_Overspd_envType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_status__511_Overspd_envType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_status__511_Overspd_envType>(
    Brake_status__511_Overspd_envType_descriptor(), name, value);
}
enum Throttle_status__510_Throttle_pedal_en_stsType : int {
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE = 0,
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_ENABLE = 1,
  Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER = 2
};
bool Throttle_status__510_Throttle_pedal_en_stsType_IsValid(int value);
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MIN = Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX = Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER;
constexpr int Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_ARRAYSIZE = Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
template<typename T>
inline const std::string& Throttle_status__510_Throttle_pedal_en_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_status__510_Throttle_pedal_en_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_status__510_Throttle_pedal_en_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_status__510_Throttle_pedal_en_stsType_descriptor(), enum_t_value);
}
inline bool Throttle_status__510_Throttle_pedal_en_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_status__510_Throttle_pedal_en_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_status__510_Throttle_pedal_en_stsType>(
    Throttle_status__510_Throttle_pedal_en_stsType_descriptor(), name, value);
}
enum Throttle_status__510_Drive_motor_errType : int {
  Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR = 0,
  Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR = 1
};
bool Throttle_status__510_Drive_motor_errType_IsValid(int value);
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MIN = Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR;
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX = Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
constexpr int Throttle_status__510_Drive_motor_errType_Drive_motor_errType_ARRAYSIZE = Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Drive_motor_errType_descriptor();
template<typename T>
inline const std::string& Throttle_status__510_Drive_motor_errType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_status__510_Drive_motor_errType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_status__510_Drive_motor_errType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_status__510_Drive_motor_errType_descriptor(), enum_t_value);
}
inline bool Throttle_status__510_Drive_motor_errType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_status__510_Drive_motor_errType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_status__510_Drive_motor_errType>(
    Throttle_status__510_Drive_motor_errType_descriptor(), name, value);
}
enum Throttle_status__510_Battery_bms_errType : int {
  Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR = 0,
  Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR = 1
};
bool Throttle_status__510_Battery_bms_errType_IsValid(int value);
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MIN = Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR;
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX = Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR;
constexpr int Throttle_status__510_Battery_bms_errType_Battery_bms_errType_ARRAYSIZE = Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Battery_bms_errType_descriptor();
template<typename T>
inline const std::string& Throttle_status__510_Battery_bms_errType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_status__510_Battery_bms_errType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_status__510_Battery_bms_errType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_status__510_Battery_bms_errType_descriptor(), enum_t_value);
}
inline bool Throttle_status__510_Battery_bms_errType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_status__510_Battery_bms_errType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_status__510_Battery_bms_errType>(
    Throttle_status__510_Battery_bms_errType_descriptor(), name, value);
}
enum Turnsignal_status__513_Turn_signal_stsType : int {
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE = 0,
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_LEFT = 1,
  Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT = 2
};
bool Turnsignal_status__513_Turn_signal_stsType_IsValid(int value);
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MIN = Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX = Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT;
constexpr int Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_ARRAYSIZE = Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_status__513_Turn_signal_stsType_descriptor();
template<typename T>
inline const std::string& Turnsignal_status__513_Turn_signal_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turnsignal_status__513_Turn_signal_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turnsignal_status__513_Turn_signal_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turnsignal_status__513_Turn_signal_stsType_descriptor(), enum_t_value);
}
inline bool Turnsignal_status__513_Turn_signal_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Turnsignal_status__513_Turn_signal_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turnsignal_status__513_Turn_signal_stsType>(
    Turnsignal_status__513_Turn_signal_stsType_descriptor(), name, value);
}
enum Steer_status__512_Steer_angle_en_stsType : int {
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE = 0,
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_ENABLE = 1,
  Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER = 2
};
bool Steer_status__512_Steer_angle_en_stsType_IsValid(int value);
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MIN = Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX = Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER;
constexpr int Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_ARRAYSIZE = Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Steer_angle_en_stsType_descriptor();
template<typename T>
inline const std::string& Steer_status__512_Steer_angle_en_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steer_status__512_Steer_angle_en_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steer_status__512_Steer_angle_en_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steer_status__512_Steer_angle_en_stsType_descriptor(), enum_t_value);
}
inline bool Steer_status__512_Steer_angle_en_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steer_status__512_Steer_angle_en_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steer_status__512_Steer_angle_en_stsType>(
    Steer_status__512_Steer_angle_en_stsType_descriptor(), name, value);
}
enum Steer_status__512_Steer_errType : int {
  Steer_status__512_Steer_errType_STEER_ERR_NOERR = 0,
  Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR = 1
};
bool Steer_status__512_Steer_errType_IsValid(int value);
constexpr Steer_status__512_Steer_errType Steer_status__512_Steer_errType_Steer_errType_MIN = Steer_status__512_Steer_errType_STEER_ERR_NOERR;
constexpr Steer_status__512_Steer_errType Steer_status__512_Steer_errType_Steer_errType_MAX = Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR;
constexpr int Steer_status__512_Steer_errType_Steer_errType_ARRAYSIZE = Steer_status__512_Steer_errType_Steer_errType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Steer_errType_descriptor();
template<typename T>
inline const std::string& Steer_status__512_Steer_errType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steer_status__512_Steer_errType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steer_status__512_Steer_errType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steer_status__512_Steer_errType_descriptor(), enum_t_value);
}
inline bool Steer_status__512_Steer_errType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steer_status__512_Steer_errType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steer_status__512_Steer_errType>(
    Steer_status__512_Steer_errType_descriptor(), name, value);
}
enum Steer_status__512_Sensor_errType : int {
  Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR = 0,
  Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR = 1
};
bool Steer_status__512_Sensor_errType_IsValid(int value);
constexpr Steer_status__512_Sensor_errType Steer_status__512_Sensor_errType_Sensor_errType_MIN = Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR;
constexpr Steer_status__512_Sensor_errType Steer_status__512_Sensor_errType_Sensor_errType_MAX = Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR;
constexpr int Steer_status__512_Sensor_errType_Sensor_errType_ARRAYSIZE = Steer_status__512_Sensor_errType_Sensor_errType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Sensor_errType_descriptor();
template<typename T>
inline const std::string& Steer_status__512_Sensor_errType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steer_status__512_Sensor_errType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steer_status__512_Sensor_errType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steer_status__512_Sensor_errType_descriptor(), enum_t_value);
}
inline bool Steer_status__512_Sensor_errType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steer_status__512_Sensor_errType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steer_status__512_Sensor_errType>(
    Steer_status__512_Sensor_errType_descriptor(), name, value);
}
enum Ecu_status_1_515_Ctrl_stsType : int {
  Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL = 0,
  Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL = 1
};
bool Ecu_status_1_515_Ctrl_stsType_IsValid(int value);
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MIN = Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX = Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL;
constexpr int Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_ARRAYSIZE = Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ecu_status_1_515_Ctrl_stsType_descriptor();
template<typename T>
inline const std::string& Ecu_status_1_515_Ctrl_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ecu_status_1_515_Ctrl_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ecu_status_1_515_Ctrl_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ecu_status_1_515_Ctrl_stsType_descriptor(), enum_t_value);
}
inline bool Ecu_status_1_515_Ctrl_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ecu_status_1_515_Ctrl_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ecu_status_1_515_Ctrl_stsType>(
    Ecu_status_1_515_Ctrl_stsType_descriptor(), name, value);
}
enum Gear_status_514_Gear_stsType : int {
  Gear_status_514_Gear_stsType_GEAR_STS_PARK = 1,
  Gear_status_514_Gear_stsType_GEAR_STS_REVERSE = 2,
  Gear_status_514_Gear_stsType_GEAR_STS_NEUTRAL = 3,
  Gear_status_514_Gear_stsType_GEAR_STS_DRIVE = 4
};
bool Gear_status_514_Gear_stsType_IsValid(int value);
constexpr Gear_status_514_Gear_stsType Gear_status_514_Gear_stsType_Gear_stsType_MIN = Gear_status_514_Gear_stsType_GEAR_STS_PARK;
constexpr Gear_status_514_Gear_stsType Gear_status_514_Gear_stsType_Gear_stsType_MAX = Gear_status_514_Gear_stsType_GEAR_STS_DRIVE;
constexpr int Gear_status_514_Gear_stsType_Gear_stsType_ARRAYSIZE = Gear_status_514_Gear_stsType_Gear_stsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_status_514_Gear_stsType_descriptor();
template<typename T>
inline const std::string& Gear_status_514_Gear_stsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_status_514_Gear_stsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_status_514_Gear_stsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_status_514_Gear_stsType_descriptor(), enum_t_value);
}
inline bool Gear_status_514_Gear_stsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_status_514_Gear_stsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_status_514_Gear_stsType>(
    Gear_status_514_Gear_stsType_descriptor(), name, value);
}
// ===================================================================

class Control_command_115 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Control_command_115) */ {
 public:
  inline Control_command_115() : Control_command_115(nullptr) {}
  ~Control_command_115() override;
  explicit PROTOBUF_CONSTEXPR Control_command_115(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control_command_115(const Control_command_115& from);
  Control_command_115(Control_command_115&& from) noexcept
    : Control_command_115() {
    *this = ::std::move(from);
  }

  inline Control_command_115& operator=(const Control_command_115& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control_command_115& operator=(Control_command_115&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control_command_115& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control_command_115* internal_default_instance() {
    return reinterpret_cast<const Control_command_115*>(
               &_Control_command_115_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Control_command_115& a, Control_command_115& b) {
    a.Swap(&b);
  }
  inline void Swap(Control_command_115* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control_command_115* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control_command_115* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control_command_115>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Control_command_115& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Control_command_115& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control_command_115* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Control_command_115";
  }
  protected:
  explicit Control_command_115(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Control_command_115_Ctrl_cmdType Ctrl_cmdType;
  static constexpr Ctrl_cmdType CTRL_CMD_OUT_OF_CONTROL =
    Control_command_115_Ctrl_cmdType_CTRL_CMD_OUT_OF_CONTROL;
  static constexpr Ctrl_cmdType CTRL_CMD_UNDER_CONTROL =
    Control_command_115_Ctrl_cmdType_CTRL_CMD_UNDER_CONTROL;
  static inline bool Ctrl_cmdType_IsValid(int value) {
    return Control_command_115_Ctrl_cmdType_IsValid(value);
  }
  static constexpr Ctrl_cmdType Ctrl_cmdType_MIN =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MIN;
  static constexpr Ctrl_cmdType Ctrl_cmdType_MAX =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_MAX;
  static constexpr int Ctrl_cmdType_ARRAYSIZE =
    Control_command_115_Ctrl_cmdType_Ctrl_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Ctrl_cmdType_descriptor() {
    return Control_command_115_Ctrl_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Ctrl_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ctrl_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ctrl_cmdType_Name.");
    return Control_command_115_Ctrl_cmdType_Name(enum_t_value);
  }
  static inline bool Ctrl_cmdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Ctrl_cmdType* value) {
    return Control_command_115_Ctrl_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlCmdFieldNumber = 1,
  };
  // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  bool has_ctrl_cmd() const;
  private:
  bool _internal_has_ctrl_cmd() const;
  public:
  void clear_ctrl_cmd();
  ::apollo::canbus::Control_command_115_Ctrl_cmdType ctrl_cmd() const;
  void set_ctrl_cmd(::apollo::canbus::Control_command_115_Ctrl_cmdType value);
  private:
  ::apollo::canbus::Control_command_115_Ctrl_cmdType _internal_ctrl_cmd() const;
  void _internal_set_ctrl_cmd(::apollo::canbus::Control_command_115_Ctrl_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Control_command_115)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int ctrl_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Gear_command_114 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Gear_command_114) */ {
 public:
  inline Gear_command_114() : Gear_command_114(nullptr) {}
  ~Gear_command_114() override;
  explicit PROTOBUF_CONSTEXPR Gear_command_114(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gear_command_114(const Gear_command_114& from);
  Gear_command_114(Gear_command_114&& from) noexcept
    : Gear_command_114() {
    *this = ::std::move(from);
  }

  inline Gear_command_114& operator=(const Gear_command_114& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gear_command_114& operator=(Gear_command_114&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gear_command_114& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gear_command_114* internal_default_instance() {
    return reinterpret_cast<const Gear_command_114*>(
               &_Gear_command_114_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Gear_command_114& a, Gear_command_114& b) {
    a.Swap(&b);
  }
  inline void Swap(Gear_command_114* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gear_command_114* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gear_command_114* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gear_command_114>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gear_command_114& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gear_command_114& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gear_command_114* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Gear_command_114";
  }
  protected:
  explicit Gear_command_114(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gear_command_114_Gear_cmdType Gear_cmdType;
  static constexpr Gear_cmdType GEAR_CMD_PARK =
    Gear_command_114_Gear_cmdType_GEAR_CMD_PARK;
  static constexpr Gear_cmdType GEAR_CMD_REVERSE =
    Gear_command_114_Gear_cmdType_GEAR_CMD_REVERSE;
  static constexpr Gear_cmdType GEAR_CMD_NEUTRAL =
    Gear_command_114_Gear_cmdType_GEAR_CMD_NEUTRAL;
  static constexpr Gear_cmdType GEAR_CMD_DRIVE =
    Gear_command_114_Gear_cmdType_GEAR_CMD_DRIVE;
  static inline bool Gear_cmdType_IsValid(int value) {
    return Gear_command_114_Gear_cmdType_IsValid(value);
  }
  static constexpr Gear_cmdType Gear_cmdType_MIN =
    Gear_command_114_Gear_cmdType_Gear_cmdType_MIN;
  static constexpr Gear_cmdType Gear_cmdType_MAX =
    Gear_command_114_Gear_cmdType_Gear_cmdType_MAX;
  static constexpr int Gear_cmdType_ARRAYSIZE =
    Gear_command_114_Gear_cmdType_Gear_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_cmdType_descriptor() {
    return Gear_command_114_Gear_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_cmdType_Name.");
    return Gear_command_114_Gear_cmdType_Name(enum_t_value);
  }
  static inline bool Gear_cmdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_cmdType* value) {
    return Gear_command_114_Gear_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGearCmdFieldNumber = 1,
  };
  // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  bool has_gear_cmd() const;
  private:
  bool _internal_has_gear_cmd() const;
  public:
  void clear_gear_cmd();
  ::apollo::canbus::Gear_command_114_Gear_cmdType gear_cmd() const;
  void set_gear_cmd(::apollo::canbus::Gear_command_114_Gear_cmdType value);
  private:
  ::apollo::canbus::Gear_command_114_Gear_cmdType _internal_gear_cmd() const;
  void _internal_set_gear_cmd(::apollo::canbus::Gear_command_114_Gear_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Gear_command_114)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int gear_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Brake_command_111 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_command_111) */ {
 public:
  inline Brake_command_111() : Brake_command_111(nullptr) {}
  ~Brake_command_111() override;
  explicit PROTOBUF_CONSTEXPR Brake_command_111(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Brake_command_111(const Brake_command_111& from);
  Brake_command_111(Brake_command_111&& from) noexcept
    : Brake_command_111() {
    *this = ::std::move(from);
  }

  inline Brake_command_111& operator=(const Brake_command_111& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_command_111& operator=(Brake_command_111&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brake_command_111& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brake_command_111* internal_default_instance() {
    return reinterpret_cast<const Brake_command_111*>(
               &_Brake_command_111_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Brake_command_111& a, Brake_command_111& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_command_111* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brake_command_111* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brake_command_111* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brake_command_111>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Brake_command_111& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Brake_command_111& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_command_111* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_command_111";
  }
  protected:
  explicit Brake_command_111(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Brake_command_111_Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType;
  static constexpr Brake_pedal_en_ctrlType BRAKE_PEDAL_EN_CTRL_DISABLE =
    Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_DISABLE;
  static constexpr Brake_pedal_en_ctrlType BRAKE_PEDAL_EN_CTRL_ENABLE =
    Brake_command_111_Brake_pedal_en_ctrlType_BRAKE_PEDAL_EN_CTRL_ENABLE;
  static inline bool Brake_pedal_en_ctrlType_IsValid(int value) {
    return Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value);
  }
  static constexpr Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType_MIN =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MIN;
  static constexpr Brake_pedal_en_ctrlType Brake_pedal_en_ctrlType_MAX =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_MAX;
  static constexpr int Brake_pedal_en_ctrlType_ARRAYSIZE =
    Brake_command_111_Brake_pedal_en_ctrlType_Brake_pedal_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_pedal_en_ctrlType_descriptor() {
    return Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_pedal_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_pedal_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_pedal_en_ctrlType_Name.");
    return Brake_command_111_Brake_pedal_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Brake_pedal_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_pedal_en_ctrlType* value) {
    return Brake_command_111_Brake_pedal_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrakePedalEnCtrlFieldNumber = 1,
    kBrakePedalCmdFieldNumber = 2,
  };
  // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  bool has_brake_pedal_en_ctrl() const;
  private:
  bool _internal_has_brake_pedal_en_ctrl() const;
  public:
  void clear_brake_pedal_en_ctrl();
  ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType brake_pedal_en_ctrl() const;
  void set_brake_pedal_en_ctrl(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType value);
  private:
  ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType _internal_brake_pedal_en_ctrl() const;
  void _internal_set_brake_pedal_en_ctrl(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType value);
  public:

  // optional int32 brake_pedal_cmd = 2;
  bool has_brake_pedal_cmd() const;
  private:
  bool _internal_has_brake_pedal_cmd() const;
  public:
  void clear_brake_pedal_cmd();
  int32_t brake_pedal_cmd() const;
  void set_brake_pedal_cmd(int32_t value);
  private:
  int32_t _internal_brake_pedal_cmd() const;
  void _internal_set_brake_pedal_cmd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_command_111)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int brake_pedal_en_ctrl_;
    int32_t brake_pedal_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Throttle_command_110 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Throttle_command_110) */ {
 public:
  inline Throttle_command_110() : Throttle_command_110(nullptr) {}
  ~Throttle_command_110() override;
  explicit PROTOBUF_CONSTEXPR Throttle_command_110(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Throttle_command_110(const Throttle_command_110& from);
  Throttle_command_110(Throttle_command_110&& from) noexcept
    : Throttle_command_110() {
    *this = ::std::move(from);
  }

  inline Throttle_command_110& operator=(const Throttle_command_110& from) {
    CopyFrom(from);
    return *this;
  }
  inline Throttle_command_110& operator=(Throttle_command_110&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Throttle_command_110& default_instance() {
    return *internal_default_instance();
  }
  static inline const Throttle_command_110* internal_default_instance() {
    return reinterpret_cast<const Throttle_command_110*>(
               &_Throttle_command_110_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Throttle_command_110& a, Throttle_command_110& b) {
    a.Swap(&b);
  }
  inline void Swap(Throttle_command_110* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Throttle_command_110* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Throttle_command_110* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Throttle_command_110>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Throttle_command_110& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Throttle_command_110& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Throttle_command_110* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Throttle_command_110";
  }
  protected:
  explicit Throttle_command_110(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType;
  static constexpr Throttle_pedal_en_ctrlType THROTTLE_PEDAL_EN_CTRL_DISABLE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_DISABLE;
  static constexpr Throttle_pedal_en_ctrlType THROTTLE_PEDAL_EN_CTRL_ENABLE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_THROTTLE_PEDAL_EN_CTRL_ENABLE;
  static inline bool Throttle_pedal_en_ctrlType_IsValid(int value) {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value);
  }
  static constexpr Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType_MIN =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MIN;
  static constexpr Throttle_pedal_en_ctrlType Throttle_pedal_en_ctrlType_MAX =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_MAX;
  static constexpr int Throttle_pedal_en_ctrlType_ARRAYSIZE =
    Throttle_command_110_Throttle_pedal_en_ctrlType_Throttle_pedal_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_pedal_en_ctrlType_descriptor() {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_pedal_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_pedal_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_pedal_en_ctrlType_Name.");
    return Throttle_command_110_Throttle_pedal_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Throttle_pedal_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_pedal_en_ctrlType* value) {
    return Throttle_command_110_Throttle_pedal_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThrottlePedalEnCtrlFieldNumber = 1,
    kThrottlePedalCmdFieldNumber = 2,
  };
  // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  bool has_throttle_pedal_en_ctrl() const;
  private:
  bool _internal_has_throttle_pedal_en_ctrl() const;
  public:
  void clear_throttle_pedal_en_ctrl();
  ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl() const;
  void set_throttle_pedal_en_ctrl(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value);
  private:
  ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType _internal_throttle_pedal_en_ctrl() const;
  void _internal_set_throttle_pedal_en_ctrl(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value);
  public:

  // optional int32 throttle_pedal_cmd = 2;
  bool has_throttle_pedal_cmd() const;
  private:
  bool _internal_has_throttle_pedal_cmd() const;
  public:
  void clear_throttle_pedal_cmd();
  int32_t throttle_pedal_cmd() const;
  void set_throttle_pedal_cmd(int32_t value);
  private:
  int32_t _internal_throttle_pedal_cmd() const;
  void _internal_set_throttle_pedal_cmd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Throttle_command_110)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int throttle_pedal_en_ctrl_;
    int32_t throttle_pedal_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Turnsignal_command_113 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Turnsignal_command_113) */ {
 public:
  inline Turnsignal_command_113() : Turnsignal_command_113(nullptr) {}
  ~Turnsignal_command_113() override;
  explicit PROTOBUF_CONSTEXPR Turnsignal_command_113(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Turnsignal_command_113(const Turnsignal_command_113& from);
  Turnsignal_command_113(Turnsignal_command_113&& from) noexcept
    : Turnsignal_command_113() {
    *this = ::std::move(from);
  }

  inline Turnsignal_command_113& operator=(const Turnsignal_command_113& from) {
    CopyFrom(from);
    return *this;
  }
  inline Turnsignal_command_113& operator=(Turnsignal_command_113&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Turnsignal_command_113& default_instance() {
    return *internal_default_instance();
  }
  static inline const Turnsignal_command_113* internal_default_instance() {
    return reinterpret_cast<const Turnsignal_command_113*>(
               &_Turnsignal_command_113_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Turnsignal_command_113& a, Turnsignal_command_113& b) {
    a.Swap(&b);
  }
  inline void Swap(Turnsignal_command_113* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Turnsignal_command_113* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Turnsignal_command_113* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Turnsignal_command_113>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Turnsignal_command_113& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Turnsignal_command_113& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Turnsignal_command_113* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Turnsignal_command_113";
  }
  protected:
  explicit Turnsignal_command_113(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Turnsignal_command_113_Turn_signal_cmdType Turn_signal_cmdType;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_NONE =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_LEFT =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_RIGHT =
    Turnsignal_command_113_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
  static inline bool Turn_signal_cmdType_IsValid(int value) {
    return Turnsignal_command_113_Turn_signal_cmdType_IsValid(value);
  }
  static constexpr Turn_signal_cmdType Turn_signal_cmdType_MIN =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MIN;
  static constexpr Turn_signal_cmdType Turn_signal_cmdType_MAX =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_MAX;
  static constexpr int Turn_signal_cmdType_ARRAYSIZE =
    Turnsignal_command_113_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Turn_signal_cmdType_descriptor() {
    return Turnsignal_command_113_Turn_signal_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Turn_signal_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Turn_signal_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Turn_signal_cmdType_Name.");
    return Turnsignal_command_113_Turn_signal_cmdType_Name(enum_t_value);
  }
  static inline bool Turn_signal_cmdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Turn_signal_cmdType* value) {
    return Turnsignal_command_113_Turn_signal_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTurnSignalCmdFieldNumber = 1,
  };
  // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  bool has_turn_signal_cmd() const;
  private:
  bool _internal_has_turn_signal_cmd() const;
  public:
  void clear_turn_signal_cmd();
  ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType turn_signal_cmd() const;
  void set_turn_signal_cmd(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType value);
  private:
  ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType _internal_turn_signal_cmd() const;
  void _internal_set_turn_signal_cmd(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Turnsignal_command_113)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int turn_signal_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Steer_command_112 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steer_command_112) */ {
 public:
  inline Steer_command_112() : Steer_command_112(nullptr) {}
  ~Steer_command_112() override;
  explicit PROTOBUF_CONSTEXPR Steer_command_112(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Steer_command_112(const Steer_command_112& from);
  Steer_command_112(Steer_command_112&& from) noexcept
    : Steer_command_112() {
    *this = ::std::move(from);
  }

  inline Steer_command_112& operator=(const Steer_command_112& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steer_command_112& operator=(Steer_command_112&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Steer_command_112& default_instance() {
    return *internal_default_instance();
  }
  static inline const Steer_command_112* internal_default_instance() {
    return reinterpret_cast<const Steer_command_112*>(
               &_Steer_command_112_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Steer_command_112& a, Steer_command_112& b) {
    a.Swap(&b);
  }
  inline void Swap(Steer_command_112* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Steer_command_112* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Steer_command_112* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Steer_command_112>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Steer_command_112& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Steer_command_112& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steer_command_112* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steer_command_112";
  }
  protected:
  explicit Steer_command_112(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Steer_command_112_Steer_angle_en_ctrlType Steer_angle_en_ctrlType;
  static constexpr Steer_angle_en_ctrlType STEER_ANGLE_EN_CTRL_DISABLE =
    Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_DISABLE;
  static constexpr Steer_angle_en_ctrlType STEER_ANGLE_EN_CTRL_ENABLE =
    Steer_command_112_Steer_angle_en_ctrlType_STEER_ANGLE_EN_CTRL_ENABLE;
  static inline bool Steer_angle_en_ctrlType_IsValid(int value) {
    return Steer_command_112_Steer_angle_en_ctrlType_IsValid(value);
  }
  static constexpr Steer_angle_en_ctrlType Steer_angle_en_ctrlType_MIN =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MIN;
  static constexpr Steer_angle_en_ctrlType Steer_angle_en_ctrlType_MAX =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_MAX;
  static constexpr int Steer_angle_en_ctrlType_ARRAYSIZE =
    Steer_command_112_Steer_angle_en_ctrlType_Steer_angle_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_angle_en_ctrlType_descriptor() {
    return Steer_command_112_Steer_angle_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_angle_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_angle_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_angle_en_ctrlType_Name.");
    return Steer_command_112_Steer_angle_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Steer_angle_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_angle_en_ctrlType* value) {
    return Steer_command_112_Steer_angle_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteerAngleCmdFieldNumber = 2,
    kSteerAngleEnCtrlFieldNumber = 1,
  };
  // optional double steer_angle_cmd = 2;
  bool has_steer_angle_cmd() const;
  private:
  bool _internal_has_steer_angle_cmd() const;
  public:
  void clear_steer_angle_cmd();
  double steer_angle_cmd() const;
  void set_steer_angle_cmd(double value);
  private:
  double _internal_steer_angle_cmd() const;
  void _internal_set_steer_angle_cmd(double value);
  public:

  // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  bool has_steer_angle_en_ctrl() const;
  private:
  bool _internal_has_steer_angle_en_ctrl() const;
  public:
  void clear_steer_angle_en_ctrl();
  ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType steer_angle_en_ctrl() const;
  void set_steer_angle_en_ctrl(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType value);
  private:
  ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType _internal_steer_angle_en_ctrl() const;
  void _internal_set_steer_angle_en_ctrl(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steer_command_112)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double steer_angle_cmd_;
    int steer_angle_en_ctrl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Brake_status__511 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_status__511) */ {
 public:
  inline Brake_status__511() : Brake_status__511(nullptr) {}
  ~Brake_status__511() override;
  explicit PROTOBUF_CONSTEXPR Brake_status__511(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Brake_status__511(const Brake_status__511& from);
  Brake_status__511(Brake_status__511&& from) noexcept
    : Brake_status__511() {
    *this = ::std::move(from);
  }

  inline Brake_status__511& operator=(const Brake_status__511& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_status__511& operator=(Brake_status__511&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brake_status__511& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brake_status__511* internal_default_instance() {
    return reinterpret_cast<const Brake_status__511*>(
               &_Brake_status__511_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Brake_status__511& a, Brake_status__511& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_status__511* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brake_status__511* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brake_status__511* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brake_status__511>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Brake_status__511& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Brake_status__511& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_status__511* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_status__511";
  }
  protected:
  explicit Brake_status__511(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Brake_status__511_Brake_pedal_en_stsType Brake_pedal_en_stsType;
  static constexpr Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_DISABLE =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_DISABLE;
  static constexpr Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_ENABLE =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_ENABLE;
  static constexpr Brake_pedal_en_stsType BRAKE_PEDAL_EN_STS_TAKEOVER =
    Brake_status__511_Brake_pedal_en_stsType_BRAKE_PEDAL_EN_STS_TAKEOVER;
  static inline bool Brake_pedal_en_stsType_IsValid(int value) {
    return Brake_status__511_Brake_pedal_en_stsType_IsValid(value);
  }
  static constexpr Brake_pedal_en_stsType Brake_pedal_en_stsType_MIN =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MIN;
  static constexpr Brake_pedal_en_stsType Brake_pedal_en_stsType_MAX =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_MAX;
  static constexpr int Brake_pedal_en_stsType_ARRAYSIZE =
    Brake_status__511_Brake_pedal_en_stsType_Brake_pedal_en_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_pedal_en_stsType_descriptor() {
    return Brake_status__511_Brake_pedal_en_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_pedal_en_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_pedal_en_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_pedal_en_stsType_Name.");
    return Brake_status__511_Brake_pedal_en_stsType_Name(enum_t_value);
  }
  static inline bool Brake_pedal_en_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_pedal_en_stsType* value) {
    return Brake_status__511_Brake_pedal_en_stsType_Parse(name, value);
  }

  typedef Brake_status__511_Brake_errType Brake_errType;
  static constexpr Brake_errType BRAKE_ERR_NOERR =
    Brake_status__511_Brake_errType_BRAKE_ERR_NOERR;
  static constexpr Brake_errType BRAKE_ERR_BRAKE_SYSTEM_ERR =
    Brake_status__511_Brake_errType_BRAKE_ERR_BRAKE_SYSTEM_ERR;
  static inline bool Brake_errType_IsValid(int value) {
    return Brake_status__511_Brake_errType_IsValid(value);
  }
  static constexpr Brake_errType Brake_errType_MIN =
    Brake_status__511_Brake_errType_Brake_errType_MIN;
  static constexpr Brake_errType Brake_errType_MAX =
    Brake_status__511_Brake_errType_Brake_errType_MAX;
  static constexpr int Brake_errType_ARRAYSIZE =
    Brake_status__511_Brake_errType_Brake_errType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_errType_descriptor() {
    return Brake_status__511_Brake_errType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_errType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_errType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_errType_Name.");
    return Brake_status__511_Brake_errType_Name(enum_t_value);
  }
  static inline bool Brake_errType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_errType* value) {
    return Brake_status__511_Brake_errType_Parse(name, value);
  }

  typedef Brake_status__511_Emergency_btn_envType Emergency_btn_envType;
  static constexpr Emergency_btn_envType EMERGENCY_BTN_ENV_NOENV =
    Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_NOENV;
  static constexpr Emergency_btn_envType EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV =
    Brake_status__511_Emergency_btn_envType_EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
  static inline bool Emergency_btn_envType_IsValid(int value) {
    return Brake_status__511_Emergency_btn_envType_IsValid(value);
  }
  static constexpr Emergency_btn_envType Emergency_btn_envType_MIN =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MIN;
  static constexpr Emergency_btn_envType Emergency_btn_envType_MAX =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_MAX;
  static constexpr int Emergency_btn_envType_ARRAYSIZE =
    Brake_status__511_Emergency_btn_envType_Emergency_btn_envType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Emergency_btn_envType_descriptor() {
    return Brake_status__511_Emergency_btn_envType_descriptor();
  }
  template<typename T>
  static inline const std::string& Emergency_btn_envType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Emergency_btn_envType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Emergency_btn_envType_Name.");
    return Brake_status__511_Emergency_btn_envType_Name(enum_t_value);
  }
  static inline bool Emergency_btn_envType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Emergency_btn_envType* value) {
    return Brake_status__511_Emergency_btn_envType_Parse(name, value);
  }

  typedef Brake_status__511_Front_bump_envType Front_bump_envType;
  static constexpr Front_bump_envType FRONT_BUMP_ENV_NOENV =
    Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_NOENV;
  static constexpr Front_bump_envType FRONT_BUMP_ENV_FRONT_BUMPER_ENV =
    Brake_status__511_Front_bump_envType_FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
  static inline bool Front_bump_envType_IsValid(int value) {
    return Brake_status__511_Front_bump_envType_IsValid(value);
  }
  static constexpr Front_bump_envType Front_bump_envType_MIN =
    Brake_status__511_Front_bump_envType_Front_bump_envType_MIN;
  static constexpr Front_bump_envType Front_bump_envType_MAX =
    Brake_status__511_Front_bump_envType_Front_bump_envType_MAX;
  static constexpr int Front_bump_envType_ARRAYSIZE =
    Brake_status__511_Front_bump_envType_Front_bump_envType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Front_bump_envType_descriptor() {
    return Brake_status__511_Front_bump_envType_descriptor();
  }
  template<typename T>
  static inline const std::string& Front_bump_envType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Front_bump_envType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Front_bump_envType_Name.");
    return Brake_status__511_Front_bump_envType_Name(enum_t_value);
  }
  static inline bool Front_bump_envType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Front_bump_envType* value) {
    return Brake_status__511_Front_bump_envType_Parse(name, value);
  }

  typedef Brake_status__511_Back_bump_envType Back_bump_envType;
  static constexpr Back_bump_envType BACK_BUMP_ENV_NOENV =
    Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_NOENV;
  static constexpr Back_bump_envType BACK_BUMP_ENV_BACK_BUMPER_ENV =
    Brake_status__511_Back_bump_envType_BACK_BUMP_ENV_BACK_BUMPER_ENV;
  static inline bool Back_bump_envType_IsValid(int value) {
    return Brake_status__511_Back_bump_envType_IsValid(value);
  }
  static constexpr Back_bump_envType Back_bump_envType_MIN =
    Brake_status__511_Back_bump_envType_Back_bump_envType_MIN;
  static constexpr Back_bump_envType Back_bump_envType_MAX =
    Brake_status__511_Back_bump_envType_Back_bump_envType_MAX;
  static constexpr int Back_bump_envType_ARRAYSIZE =
    Brake_status__511_Back_bump_envType_Back_bump_envType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Back_bump_envType_descriptor() {
    return Brake_status__511_Back_bump_envType_descriptor();
  }
  template<typename T>
  static inline const std::string& Back_bump_envType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Back_bump_envType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Back_bump_envType_Name.");
    return Brake_status__511_Back_bump_envType_Name(enum_t_value);
  }
  static inline bool Back_bump_envType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Back_bump_envType* value) {
    return Brake_status__511_Back_bump_envType_Parse(name, value);
  }

  typedef Brake_status__511_Overspd_envType Overspd_envType;
  static constexpr Overspd_envType OVERSPD_ENV_NOENV =
    Brake_status__511_Overspd_envType_OVERSPD_ENV_NOENV;
  static constexpr Overspd_envType OVERSPD_ENV_OVERSPEED_ENV =
    Brake_status__511_Overspd_envType_OVERSPD_ENV_OVERSPEED_ENV;
  static inline bool Overspd_envType_IsValid(int value) {
    return Brake_status__511_Overspd_envType_IsValid(value);
  }
  static constexpr Overspd_envType Overspd_envType_MIN =
    Brake_status__511_Overspd_envType_Overspd_envType_MIN;
  static constexpr Overspd_envType Overspd_envType_MAX =
    Brake_status__511_Overspd_envType_Overspd_envType_MAX;
  static constexpr int Overspd_envType_ARRAYSIZE =
    Brake_status__511_Overspd_envType_Overspd_envType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Overspd_envType_descriptor() {
    return Brake_status__511_Overspd_envType_descriptor();
  }
  template<typename T>
  static inline const std::string& Overspd_envType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Overspd_envType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Overspd_envType_Name.");
    return Brake_status__511_Overspd_envType_Name(enum_t_value);
  }
  static inline bool Overspd_envType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Overspd_envType* value) {
    return Brake_status__511_Overspd_envType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrakePedalEnStsFieldNumber = 1,
    kBrakePedalStsFieldNumber = 2,
    kBrakeErrFieldNumber = 3,
    kEmergencyBtnEnvFieldNumber = 4,
    kFrontBumpEnvFieldNumber = 5,
    kBackBumpEnvFieldNumber = 6,
    kOverspdEnvFieldNumber = 7,
  };
  // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  bool has_brake_pedal_en_sts() const;
  private:
  bool _internal_has_brake_pedal_en_sts() const;
  public:
  void clear_brake_pedal_en_sts();
  ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType brake_pedal_en_sts() const;
  void set_brake_pedal_en_sts(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType value);
  private:
  ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType _internal_brake_pedal_en_sts() const;
  void _internal_set_brake_pedal_en_sts(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType value);
  public:

  // optional int32 brake_pedal_sts = 2;
  bool has_brake_pedal_sts() const;
  private:
  bool _internal_has_brake_pedal_sts() const;
  public:
  void clear_brake_pedal_sts();
  int32_t brake_pedal_sts() const;
  void set_brake_pedal_sts(int32_t value);
  private:
  int32_t _internal_brake_pedal_sts() const;
  void _internal_set_brake_pedal_sts(int32_t value);
  public:

  // optional .apollo.canbus.Brake_status__511.Brake_errType brake_err = 3;
  bool has_brake_err() const;
  private:
  bool _internal_has_brake_err() const;
  public:
  void clear_brake_err();
  ::apollo::canbus::Brake_status__511_Brake_errType brake_err() const;
  void set_brake_err(::apollo::canbus::Brake_status__511_Brake_errType value);
  private:
  ::apollo::canbus::Brake_status__511_Brake_errType _internal_brake_err() const;
  void _internal_set_brake_err(::apollo::canbus::Brake_status__511_Brake_errType value);
  public:

  // optional .apollo.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
  bool has_emergency_btn_env() const;
  private:
  bool _internal_has_emergency_btn_env() const;
  public:
  void clear_emergency_btn_env();
  ::apollo::canbus::Brake_status__511_Emergency_btn_envType emergency_btn_env() const;
  void set_emergency_btn_env(::apollo::canbus::Brake_status__511_Emergency_btn_envType value);
  private:
  ::apollo::canbus::Brake_status__511_Emergency_btn_envType _internal_emergency_btn_env() const;
  void _internal_set_emergency_btn_env(::apollo::canbus::Brake_status__511_Emergency_btn_envType value);
  public:

  // optional .apollo.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
  bool has_front_bump_env() const;
  private:
  bool _internal_has_front_bump_env() const;
  public:
  void clear_front_bump_env();
  ::apollo::canbus::Brake_status__511_Front_bump_envType front_bump_env() const;
  void set_front_bump_env(::apollo::canbus::Brake_status__511_Front_bump_envType value);
  private:
  ::apollo::canbus::Brake_status__511_Front_bump_envType _internal_front_bump_env() const;
  void _internal_set_front_bump_env(::apollo::canbus::Brake_status__511_Front_bump_envType value);
  public:

  // optional .apollo.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
  bool has_back_bump_env() const;
  private:
  bool _internal_has_back_bump_env() const;
  public:
  void clear_back_bump_env();
  ::apollo::canbus::Brake_status__511_Back_bump_envType back_bump_env() const;
  void set_back_bump_env(::apollo::canbus::Brake_status__511_Back_bump_envType value);
  private:
  ::apollo::canbus::Brake_status__511_Back_bump_envType _internal_back_bump_env() const;
  void _internal_set_back_bump_env(::apollo::canbus::Brake_status__511_Back_bump_envType value);
  public:

  // optional .apollo.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
  bool has_overspd_env() const;
  private:
  bool _internal_has_overspd_env() const;
  public:
  void clear_overspd_env();
  ::apollo::canbus::Brake_status__511_Overspd_envType overspd_env() const;
  void set_overspd_env(::apollo::canbus::Brake_status__511_Overspd_envType value);
  private:
  ::apollo::canbus::Brake_status__511_Overspd_envType _internal_overspd_env() const;
  void _internal_set_overspd_env(::apollo::canbus::Brake_status__511_Overspd_envType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_status__511)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int brake_pedal_en_sts_;
    int32_t brake_pedal_sts_;
    int brake_err_;
    int emergency_btn_env_;
    int front_bump_env_;
    int back_bump_env_;
    int overspd_env_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Throttle_status__510 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Throttle_status__510) */ {
 public:
  inline Throttle_status__510() : Throttle_status__510(nullptr) {}
  ~Throttle_status__510() override;
  explicit PROTOBUF_CONSTEXPR Throttle_status__510(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Throttle_status__510(const Throttle_status__510& from);
  Throttle_status__510(Throttle_status__510&& from) noexcept
    : Throttle_status__510() {
    *this = ::std::move(from);
  }

  inline Throttle_status__510& operator=(const Throttle_status__510& from) {
    CopyFrom(from);
    return *this;
  }
  inline Throttle_status__510& operator=(Throttle_status__510&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Throttle_status__510& default_instance() {
    return *internal_default_instance();
  }
  static inline const Throttle_status__510* internal_default_instance() {
    return reinterpret_cast<const Throttle_status__510*>(
               &_Throttle_status__510_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Throttle_status__510& a, Throttle_status__510& b) {
    a.Swap(&b);
  }
  inline void Swap(Throttle_status__510* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Throttle_status__510* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Throttle_status__510* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Throttle_status__510>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Throttle_status__510& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Throttle_status__510& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Throttle_status__510* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Throttle_status__510";
  }
  protected:
  explicit Throttle_status__510(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Throttle_status__510_Throttle_pedal_en_stsType Throttle_pedal_en_stsType;
  static constexpr Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_DISABLE =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_DISABLE;
  static constexpr Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_ENABLE =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_ENABLE;
  static constexpr Throttle_pedal_en_stsType THROTTLE_PEDAL_EN_STS_TAKEOVER =
    Throttle_status__510_Throttle_pedal_en_stsType_THROTTLE_PEDAL_EN_STS_TAKEOVER;
  static inline bool Throttle_pedal_en_stsType_IsValid(int value) {
    return Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value);
  }
  static constexpr Throttle_pedal_en_stsType Throttle_pedal_en_stsType_MIN =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MIN;
  static constexpr Throttle_pedal_en_stsType Throttle_pedal_en_stsType_MAX =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_MAX;
  static constexpr int Throttle_pedal_en_stsType_ARRAYSIZE =
    Throttle_status__510_Throttle_pedal_en_stsType_Throttle_pedal_en_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_pedal_en_stsType_descriptor() {
    return Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_pedal_en_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_pedal_en_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_pedal_en_stsType_Name.");
    return Throttle_status__510_Throttle_pedal_en_stsType_Name(enum_t_value);
  }
  static inline bool Throttle_pedal_en_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_pedal_en_stsType* value) {
    return Throttle_status__510_Throttle_pedal_en_stsType_Parse(name, value);
  }

  typedef Throttle_status__510_Drive_motor_errType Drive_motor_errType;
  static constexpr Drive_motor_errType DRIVE_MOTOR_ERR_NOERR =
    Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_NOERR;
  static constexpr Drive_motor_errType DRIVE_MOTOR_ERR_DRV_MOTOR_ERR =
    Throttle_status__510_Drive_motor_errType_DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
  static inline bool Drive_motor_errType_IsValid(int value) {
    return Throttle_status__510_Drive_motor_errType_IsValid(value);
  }
  static constexpr Drive_motor_errType Drive_motor_errType_MIN =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MIN;
  static constexpr Drive_motor_errType Drive_motor_errType_MAX =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_MAX;
  static constexpr int Drive_motor_errType_ARRAYSIZE =
    Throttle_status__510_Drive_motor_errType_Drive_motor_errType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Drive_motor_errType_descriptor() {
    return Throttle_status__510_Drive_motor_errType_descriptor();
  }
  template<typename T>
  static inline const std::string& Drive_motor_errType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Drive_motor_errType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Drive_motor_errType_Name.");
    return Throttle_status__510_Drive_motor_errType_Name(enum_t_value);
  }
  static inline bool Drive_motor_errType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Drive_motor_errType* value) {
    return Throttle_status__510_Drive_motor_errType_Parse(name, value);
  }

  typedef Throttle_status__510_Battery_bms_errType Battery_bms_errType;
  static constexpr Battery_bms_errType BATTERY_BMS_ERR_NOERR =
    Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_NOERR;
  static constexpr Battery_bms_errType BATTERY_BMS_ERR_BATTERY_ERR =
    Throttle_status__510_Battery_bms_errType_BATTERY_BMS_ERR_BATTERY_ERR;
  static inline bool Battery_bms_errType_IsValid(int value) {
    return Throttle_status__510_Battery_bms_errType_IsValid(value);
  }
  static constexpr Battery_bms_errType Battery_bms_errType_MIN =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MIN;
  static constexpr Battery_bms_errType Battery_bms_errType_MAX =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_MAX;
  static constexpr int Battery_bms_errType_ARRAYSIZE =
    Throttle_status__510_Battery_bms_errType_Battery_bms_errType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Battery_bms_errType_descriptor() {
    return Throttle_status__510_Battery_bms_errType_descriptor();
  }
  template<typename T>
  static inline const std::string& Battery_bms_errType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Battery_bms_errType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Battery_bms_errType_Name.");
    return Throttle_status__510_Battery_bms_errType_Name(enum_t_value);
  }
  static inline bool Battery_bms_errType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Battery_bms_errType* value) {
    return Throttle_status__510_Battery_bms_errType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThrottlePedalEnStsFieldNumber = 1,
    kThrottlePedalStsFieldNumber = 2,
    kDriveMotorErrFieldNumber = 3,
    kBatteryBmsErrFieldNumber = 4,
  };
  // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  bool has_throttle_pedal_en_sts() const;
  private:
  bool _internal_has_throttle_pedal_en_sts() const;
  public:
  void clear_throttle_pedal_en_sts();
  ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType throttle_pedal_en_sts() const;
  void set_throttle_pedal_en_sts(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType value);
  private:
  ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType _internal_throttle_pedal_en_sts() const;
  void _internal_set_throttle_pedal_en_sts(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType value);
  public:

  // optional int32 throttle_pedal_sts = 2;
  bool has_throttle_pedal_sts() const;
  private:
  bool _internal_has_throttle_pedal_sts() const;
  public:
  void clear_throttle_pedal_sts();
  int32_t throttle_pedal_sts() const;
  void set_throttle_pedal_sts(int32_t value);
  private:
  int32_t _internal_throttle_pedal_sts() const;
  void _internal_set_throttle_pedal_sts(int32_t value);
  public:

  // optional .apollo.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
  bool has_drive_motor_err() const;
  private:
  bool _internal_has_drive_motor_err() const;
  public:
  void clear_drive_motor_err();
  ::apollo::canbus::Throttle_status__510_Drive_motor_errType drive_motor_err() const;
  void set_drive_motor_err(::apollo::canbus::Throttle_status__510_Drive_motor_errType value);
  private:
  ::apollo::canbus::Throttle_status__510_Drive_motor_errType _internal_drive_motor_err() const;
  void _internal_set_drive_motor_err(::apollo::canbus::Throttle_status__510_Drive_motor_errType value);
  public:

  // optional .apollo.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
  bool has_battery_bms_err() const;
  private:
  bool _internal_has_battery_bms_err() const;
  public:
  void clear_battery_bms_err();
  ::apollo::canbus::Throttle_status__510_Battery_bms_errType battery_bms_err() const;
  void set_battery_bms_err(::apollo::canbus::Throttle_status__510_Battery_bms_errType value);
  private:
  ::apollo::canbus::Throttle_status__510_Battery_bms_errType _internal_battery_bms_err() const;
  void _internal_set_battery_bms_err(::apollo::canbus::Throttle_status__510_Battery_bms_errType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Throttle_status__510)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int throttle_pedal_en_sts_;
    int32_t throttle_pedal_sts_;
    int drive_motor_err_;
    int battery_bms_err_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Turnsignal_status__513 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Turnsignal_status__513) */ {
 public:
  inline Turnsignal_status__513() : Turnsignal_status__513(nullptr) {}
  ~Turnsignal_status__513() override;
  explicit PROTOBUF_CONSTEXPR Turnsignal_status__513(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Turnsignal_status__513(const Turnsignal_status__513& from);
  Turnsignal_status__513(Turnsignal_status__513&& from) noexcept
    : Turnsignal_status__513() {
    *this = ::std::move(from);
  }

  inline Turnsignal_status__513& operator=(const Turnsignal_status__513& from) {
    CopyFrom(from);
    return *this;
  }
  inline Turnsignal_status__513& operator=(Turnsignal_status__513&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Turnsignal_status__513& default_instance() {
    return *internal_default_instance();
  }
  static inline const Turnsignal_status__513* internal_default_instance() {
    return reinterpret_cast<const Turnsignal_status__513*>(
               &_Turnsignal_status__513_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Turnsignal_status__513& a, Turnsignal_status__513& b) {
    a.Swap(&b);
  }
  inline void Swap(Turnsignal_status__513* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Turnsignal_status__513* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Turnsignal_status__513* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Turnsignal_status__513>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Turnsignal_status__513& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Turnsignal_status__513& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Turnsignal_status__513* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Turnsignal_status__513";
  }
  protected:
  explicit Turnsignal_status__513(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Turnsignal_status__513_Turn_signal_stsType Turn_signal_stsType;
  static constexpr Turn_signal_stsType TURN_SIGNAL_STS_NONE =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_NONE;
  static constexpr Turn_signal_stsType TURN_SIGNAL_STS_LEFT =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_LEFT;
  static constexpr Turn_signal_stsType TURN_SIGNAL_STS_RIGHT =
    Turnsignal_status__513_Turn_signal_stsType_TURN_SIGNAL_STS_RIGHT;
  static inline bool Turn_signal_stsType_IsValid(int value) {
    return Turnsignal_status__513_Turn_signal_stsType_IsValid(value);
  }
  static constexpr Turn_signal_stsType Turn_signal_stsType_MIN =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MIN;
  static constexpr Turn_signal_stsType Turn_signal_stsType_MAX =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_MAX;
  static constexpr int Turn_signal_stsType_ARRAYSIZE =
    Turnsignal_status__513_Turn_signal_stsType_Turn_signal_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Turn_signal_stsType_descriptor() {
    return Turnsignal_status__513_Turn_signal_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Turn_signal_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Turn_signal_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Turn_signal_stsType_Name.");
    return Turnsignal_status__513_Turn_signal_stsType_Name(enum_t_value);
  }
  static inline bool Turn_signal_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Turn_signal_stsType* value) {
    return Turnsignal_status__513_Turn_signal_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTurnSignalStsFieldNumber = 1,
  };
  // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  bool has_turn_signal_sts() const;
  private:
  bool _internal_has_turn_signal_sts() const;
  public:
  void clear_turn_signal_sts();
  ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType turn_signal_sts() const;
  void set_turn_signal_sts(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType value);
  private:
  ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType _internal_turn_signal_sts() const;
  void _internal_set_turn_signal_sts(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Turnsignal_status__513)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int turn_signal_sts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Steer_status__512 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steer_status__512) */ {
 public:
  inline Steer_status__512() : Steer_status__512(nullptr) {}
  ~Steer_status__512() override;
  explicit PROTOBUF_CONSTEXPR Steer_status__512(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Steer_status__512(const Steer_status__512& from);
  Steer_status__512(Steer_status__512&& from) noexcept
    : Steer_status__512() {
    *this = ::std::move(from);
  }

  inline Steer_status__512& operator=(const Steer_status__512& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steer_status__512& operator=(Steer_status__512&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Steer_status__512& default_instance() {
    return *internal_default_instance();
  }
  static inline const Steer_status__512* internal_default_instance() {
    return reinterpret_cast<const Steer_status__512*>(
               &_Steer_status__512_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Steer_status__512& a, Steer_status__512& b) {
    a.Swap(&b);
  }
  inline void Swap(Steer_status__512* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Steer_status__512* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Steer_status__512* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Steer_status__512>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Steer_status__512& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Steer_status__512& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steer_status__512* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steer_status__512";
  }
  protected:
  explicit Steer_status__512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Steer_status__512_Steer_angle_en_stsType Steer_angle_en_stsType;
  static constexpr Steer_angle_en_stsType STEER_ANGLE_EN_STS_DISABLE =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_DISABLE;
  static constexpr Steer_angle_en_stsType STEER_ANGLE_EN_STS_ENABLE =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_ENABLE;
  static constexpr Steer_angle_en_stsType STEER_ANGLE_EN_STS_TAKEOVER =
    Steer_status__512_Steer_angle_en_stsType_STEER_ANGLE_EN_STS_TAKEOVER;
  static inline bool Steer_angle_en_stsType_IsValid(int value) {
    return Steer_status__512_Steer_angle_en_stsType_IsValid(value);
  }
  static constexpr Steer_angle_en_stsType Steer_angle_en_stsType_MIN =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MIN;
  static constexpr Steer_angle_en_stsType Steer_angle_en_stsType_MAX =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_MAX;
  static constexpr int Steer_angle_en_stsType_ARRAYSIZE =
    Steer_status__512_Steer_angle_en_stsType_Steer_angle_en_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_angle_en_stsType_descriptor() {
    return Steer_status__512_Steer_angle_en_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_angle_en_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_angle_en_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_angle_en_stsType_Name.");
    return Steer_status__512_Steer_angle_en_stsType_Name(enum_t_value);
  }
  static inline bool Steer_angle_en_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_angle_en_stsType* value) {
    return Steer_status__512_Steer_angle_en_stsType_Parse(name, value);
  }

  typedef Steer_status__512_Steer_errType Steer_errType;
  static constexpr Steer_errType STEER_ERR_NOERR =
    Steer_status__512_Steer_errType_STEER_ERR_NOERR;
  static constexpr Steer_errType STEER_ERR_STEER_MOTOR_ERR =
    Steer_status__512_Steer_errType_STEER_ERR_STEER_MOTOR_ERR;
  static inline bool Steer_errType_IsValid(int value) {
    return Steer_status__512_Steer_errType_IsValid(value);
  }
  static constexpr Steer_errType Steer_errType_MIN =
    Steer_status__512_Steer_errType_Steer_errType_MIN;
  static constexpr Steer_errType Steer_errType_MAX =
    Steer_status__512_Steer_errType_Steer_errType_MAX;
  static constexpr int Steer_errType_ARRAYSIZE =
    Steer_status__512_Steer_errType_Steer_errType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_errType_descriptor() {
    return Steer_status__512_Steer_errType_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_errType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_errType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_errType_Name.");
    return Steer_status__512_Steer_errType_Name(enum_t_value);
  }
  static inline bool Steer_errType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_errType* value) {
    return Steer_status__512_Steer_errType_Parse(name, value);
  }

  typedef Steer_status__512_Sensor_errType Sensor_errType;
  static constexpr Sensor_errType SENSOR_ERR_NOERR =
    Steer_status__512_Sensor_errType_SENSOR_ERR_NOERR;
  static constexpr Sensor_errType SENSOR_ERR_STEER_SENSOR_ERR =
    Steer_status__512_Sensor_errType_SENSOR_ERR_STEER_SENSOR_ERR;
  static inline bool Sensor_errType_IsValid(int value) {
    return Steer_status__512_Sensor_errType_IsValid(value);
  }
  static constexpr Sensor_errType Sensor_errType_MIN =
    Steer_status__512_Sensor_errType_Sensor_errType_MIN;
  static constexpr Sensor_errType Sensor_errType_MAX =
    Steer_status__512_Sensor_errType_Sensor_errType_MAX;
  static constexpr int Sensor_errType_ARRAYSIZE =
    Steer_status__512_Sensor_errType_Sensor_errType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sensor_errType_descriptor() {
    return Steer_status__512_Sensor_errType_descriptor();
  }
  template<typename T>
  static inline const std::string& Sensor_errType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sensor_errType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sensor_errType_Name.");
    return Steer_status__512_Sensor_errType_Name(enum_t_value);
  }
  static inline bool Sensor_errType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Sensor_errType* value) {
    return Steer_status__512_Sensor_errType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteerAngleStsFieldNumber = 2,
    kSteerAngleEnStsFieldNumber = 1,
    kSteerErrFieldNumber = 3,
    kSensorErrFieldNumber = 4,
  };
  // optional double steer_angle_sts = 2;
  bool has_steer_angle_sts() const;
  private:
  bool _internal_has_steer_angle_sts() const;
  public:
  void clear_steer_angle_sts();
  double steer_angle_sts() const;
  void set_steer_angle_sts(double value);
  private:
  double _internal_steer_angle_sts() const;
  void _internal_set_steer_angle_sts(double value);
  public:

  // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  bool has_steer_angle_en_sts() const;
  private:
  bool _internal_has_steer_angle_en_sts() const;
  public:
  void clear_steer_angle_en_sts();
  ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType steer_angle_en_sts() const;
  void set_steer_angle_en_sts(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType value);
  private:
  ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType _internal_steer_angle_en_sts() const;
  void _internal_set_steer_angle_en_sts(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType value);
  public:

  // optional .apollo.canbus.Steer_status__512.Steer_errType steer_err = 3;
  bool has_steer_err() const;
  private:
  bool _internal_has_steer_err() const;
  public:
  void clear_steer_err();
  ::apollo::canbus::Steer_status__512_Steer_errType steer_err() const;
  void set_steer_err(::apollo::canbus::Steer_status__512_Steer_errType value);
  private:
  ::apollo::canbus::Steer_status__512_Steer_errType _internal_steer_err() const;
  void _internal_set_steer_err(::apollo::canbus::Steer_status__512_Steer_errType value);
  public:

  // optional .apollo.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
  bool has_sensor_err() const;
  private:
  bool _internal_has_sensor_err() const;
  public:
  void clear_sensor_err();
  ::apollo::canbus::Steer_status__512_Sensor_errType sensor_err() const;
  void set_sensor_err(::apollo::canbus::Steer_status__512_Sensor_errType value);
  private:
  ::apollo::canbus::Steer_status__512_Sensor_errType _internal_sensor_err() const;
  void _internal_set_sensor_err(::apollo::canbus::Steer_status__512_Sensor_errType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steer_status__512)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double steer_angle_sts_;
    int steer_angle_en_sts_;
    int steer_err_;
    int sensor_err_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Ecu_status_1_515 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ecu_status_1_515) */ {
 public:
  inline Ecu_status_1_515() : Ecu_status_1_515(nullptr) {}
  ~Ecu_status_1_515() override;
  explicit PROTOBUF_CONSTEXPR Ecu_status_1_515(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ecu_status_1_515(const Ecu_status_1_515& from);
  Ecu_status_1_515(Ecu_status_1_515&& from) noexcept
    : Ecu_status_1_515() {
    *this = ::std::move(from);
  }

  inline Ecu_status_1_515& operator=(const Ecu_status_1_515& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ecu_status_1_515& operator=(Ecu_status_1_515&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ecu_status_1_515& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ecu_status_1_515* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_1_515*>(
               &_Ecu_status_1_515_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ecu_status_1_515& a, Ecu_status_1_515& b) {
    a.Swap(&b);
  }
  inline void Swap(Ecu_status_1_515* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ecu_status_1_515* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ecu_status_1_515* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ecu_status_1_515>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ecu_status_1_515& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ecu_status_1_515& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ecu_status_1_515* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ecu_status_1_515";
  }
  protected:
  explicit Ecu_status_1_515(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ecu_status_1_515_Ctrl_stsType Ctrl_stsType;
  static constexpr Ctrl_stsType CTRL_STS_OUT_OF_CONTROL =
    Ecu_status_1_515_Ctrl_stsType_CTRL_STS_OUT_OF_CONTROL;
  static constexpr Ctrl_stsType CTRL_STS_UNDER_CONTROL =
    Ecu_status_1_515_Ctrl_stsType_CTRL_STS_UNDER_CONTROL;
  static inline bool Ctrl_stsType_IsValid(int value) {
    return Ecu_status_1_515_Ctrl_stsType_IsValid(value);
  }
  static constexpr Ctrl_stsType Ctrl_stsType_MIN =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MIN;
  static constexpr Ctrl_stsType Ctrl_stsType_MAX =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_MAX;
  static constexpr int Ctrl_stsType_ARRAYSIZE =
    Ecu_status_1_515_Ctrl_stsType_Ctrl_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Ctrl_stsType_descriptor() {
    return Ecu_status_1_515_Ctrl_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Ctrl_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ctrl_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ctrl_stsType_Name.");
    return Ecu_status_1_515_Ctrl_stsType_Name(enum_t_value);
  }
  static inline bool Ctrl_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Ctrl_stsType* value) {
    return Ecu_status_1_515_Ctrl_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kAccSpeedFieldNumber = 2,
    kCtrlStsFieldNumber = 3,
    kChassisStsFieldNumber = 4,
    kChassisErrFieldNumber = 5,
  };
  // optional double speed = 1;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acc_speed = 2;
  bool has_acc_speed() const;
  private:
  bool _internal_has_acc_speed() const;
  public:
  void clear_acc_speed();
  double acc_speed() const;
  void set_acc_speed(double value);
  private:
  double _internal_acc_speed() const;
  void _internal_set_acc_speed(double value);
  public:

  // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  bool has_ctrl_sts() const;
  private:
  bool _internal_has_ctrl_sts() const;
  public:
  void clear_ctrl_sts();
  ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType ctrl_sts() const;
  void set_ctrl_sts(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType value);
  private:
  ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType _internal_ctrl_sts() const;
  void _internal_set_ctrl_sts(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType value);
  public:

  // optional int32 chassis_sts = 4;
  bool has_chassis_sts() const;
  private:
  bool _internal_has_chassis_sts() const;
  public:
  void clear_chassis_sts();
  int32_t chassis_sts() const;
  void set_chassis_sts(int32_t value);
  private:
  int32_t _internal_chassis_sts() const;
  void _internal_set_chassis_sts(int32_t value);
  public:

  // optional int32 chassis_err = 5;
  bool has_chassis_err() const;
  private:
  bool _internal_has_chassis_err() const;
  public:
  void clear_chassis_err();
  int32_t chassis_err() const;
  void set_chassis_err(int32_t value);
  private:
  int32_t _internal_chassis_err() const;
  void _internal_set_chassis_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ecu_status_1_515)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double speed_;
    double acc_speed_;
    int ctrl_sts_;
    int32_t chassis_sts_;
    int32_t chassis_err_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Gear_status_514 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Gear_status_514) */ {
 public:
  inline Gear_status_514() : Gear_status_514(nullptr) {}
  ~Gear_status_514() override;
  explicit PROTOBUF_CONSTEXPR Gear_status_514(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gear_status_514(const Gear_status_514& from);
  Gear_status_514(Gear_status_514&& from) noexcept
    : Gear_status_514() {
    *this = ::std::move(from);
  }

  inline Gear_status_514& operator=(const Gear_status_514& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gear_status_514& operator=(Gear_status_514&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gear_status_514& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gear_status_514* internal_default_instance() {
    return reinterpret_cast<const Gear_status_514*>(
               &_Gear_status_514_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Gear_status_514& a, Gear_status_514& b) {
    a.Swap(&b);
  }
  inline void Swap(Gear_status_514* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gear_status_514* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gear_status_514* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gear_status_514>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gear_status_514& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gear_status_514& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gear_status_514* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Gear_status_514";
  }
  protected:
  explicit Gear_status_514(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gear_status_514_Gear_stsType Gear_stsType;
  static constexpr Gear_stsType GEAR_STS_PARK =
    Gear_status_514_Gear_stsType_GEAR_STS_PARK;
  static constexpr Gear_stsType GEAR_STS_REVERSE =
    Gear_status_514_Gear_stsType_GEAR_STS_REVERSE;
  static constexpr Gear_stsType GEAR_STS_NEUTRAL =
    Gear_status_514_Gear_stsType_GEAR_STS_NEUTRAL;
  static constexpr Gear_stsType GEAR_STS_DRIVE =
    Gear_status_514_Gear_stsType_GEAR_STS_DRIVE;
  static inline bool Gear_stsType_IsValid(int value) {
    return Gear_status_514_Gear_stsType_IsValid(value);
  }
  static constexpr Gear_stsType Gear_stsType_MIN =
    Gear_status_514_Gear_stsType_Gear_stsType_MIN;
  static constexpr Gear_stsType Gear_stsType_MAX =
    Gear_status_514_Gear_stsType_Gear_stsType_MAX;
  static constexpr int Gear_stsType_ARRAYSIZE =
    Gear_status_514_Gear_stsType_Gear_stsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_stsType_descriptor() {
    return Gear_status_514_Gear_stsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_stsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_stsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_stsType_Name.");
    return Gear_status_514_Gear_stsType_Name(enum_t_value);
  }
  static inline bool Gear_stsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_stsType* value) {
    return Gear_status_514_Gear_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGearStsFieldNumber = 1,
  };
  // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  bool has_gear_sts() const;
  private:
  bool _internal_has_gear_sts() const;
  public:
  void clear_gear_sts();
  ::apollo::canbus::Gear_status_514_Gear_stsType gear_sts() const;
  void set_gear_sts(::apollo::canbus::Gear_status_514_Gear_stsType value);
  private:
  ::apollo::canbus::Gear_status_514_Gear_stsType _internal_gear_sts() const;
  void _internal_set_gear_sts(::apollo::canbus::Gear_status_514_Gear_stsType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Gear_status_514)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int gear_sts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Ecu_status_3_517 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ecu_status_3_517) */ {
 public:
  inline Ecu_status_3_517() : Ecu_status_3_517(nullptr) {}
  ~Ecu_status_3_517() override;
  explicit PROTOBUF_CONSTEXPR Ecu_status_3_517(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ecu_status_3_517(const Ecu_status_3_517& from);
  Ecu_status_3_517(Ecu_status_3_517&& from) noexcept
    : Ecu_status_3_517() {
    *this = ::std::move(from);
  }

  inline Ecu_status_3_517& operator=(const Ecu_status_3_517& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ecu_status_3_517& operator=(Ecu_status_3_517&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ecu_status_3_517& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ecu_status_3_517* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_3_517*>(
               &_Ecu_status_3_517_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Ecu_status_3_517& a, Ecu_status_3_517& b) {
    a.Swap(&b);
  }
  inline void Swap(Ecu_status_3_517* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ecu_status_3_517* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ecu_status_3_517* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ecu_status_3_517>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ecu_status_3_517& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ecu_status_3_517& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ecu_status_3_517* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ecu_status_3_517";
  }
  protected:
  explicit Ecu_status_3_517(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUltrasoundDist1FieldNumber = 1,
    kUltrasoundDist2FieldNumber = 2,
    kUltrasoundDist3FieldNumber = 3,
    kUltrasoundDist4FieldNumber = 4,
    kUltrasoundDist5FieldNumber = 5,
    kUltrasoundDist6FieldNumber = 6,
    kUltrasoundDist7FieldNumber = 7,
    kUltrasoundDist8FieldNumber = 8,
  };
  // optional int32 ultrasound_dist_1 = 1;
  bool has_ultrasound_dist_1() const;
  private:
  bool _internal_has_ultrasound_dist_1() const;
  public:
  void clear_ultrasound_dist_1();
  int32_t ultrasound_dist_1() const;
  void set_ultrasound_dist_1(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_1() const;
  void _internal_set_ultrasound_dist_1(int32_t value);
  public:

  // optional int32 ultrasound_dist_2 = 2;
  bool has_ultrasound_dist_2() const;
  private:
  bool _internal_has_ultrasound_dist_2() const;
  public:
  void clear_ultrasound_dist_2();
  int32_t ultrasound_dist_2() const;
  void set_ultrasound_dist_2(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_2() const;
  void _internal_set_ultrasound_dist_2(int32_t value);
  public:

  // optional int32 ultrasound_dist_3 = 3;
  bool has_ultrasound_dist_3() const;
  private:
  bool _internal_has_ultrasound_dist_3() const;
  public:
  void clear_ultrasound_dist_3();
  int32_t ultrasound_dist_3() const;
  void set_ultrasound_dist_3(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_3() const;
  void _internal_set_ultrasound_dist_3(int32_t value);
  public:

  // optional int32 ultrasound_dist_4 = 4;
  bool has_ultrasound_dist_4() const;
  private:
  bool _internal_has_ultrasound_dist_4() const;
  public:
  void clear_ultrasound_dist_4();
  int32_t ultrasound_dist_4() const;
  void set_ultrasound_dist_4(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_4() const;
  void _internal_set_ultrasound_dist_4(int32_t value);
  public:

  // optional int32 ultrasound_dist_5 = 5;
  bool has_ultrasound_dist_5() const;
  private:
  bool _internal_has_ultrasound_dist_5() const;
  public:
  void clear_ultrasound_dist_5();
  int32_t ultrasound_dist_5() const;
  void set_ultrasound_dist_5(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_5() const;
  void _internal_set_ultrasound_dist_5(int32_t value);
  public:

  // optional int32 ultrasound_dist_6 = 6;
  bool has_ultrasound_dist_6() const;
  private:
  bool _internal_has_ultrasound_dist_6() const;
  public:
  void clear_ultrasound_dist_6();
  int32_t ultrasound_dist_6() const;
  void set_ultrasound_dist_6(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_6() const;
  void _internal_set_ultrasound_dist_6(int32_t value);
  public:

  // optional int32 ultrasound_dist_7 = 7;
  bool has_ultrasound_dist_7() const;
  private:
  bool _internal_has_ultrasound_dist_7() const;
  public:
  void clear_ultrasound_dist_7();
  int32_t ultrasound_dist_7() const;
  void set_ultrasound_dist_7(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_7() const;
  void _internal_set_ultrasound_dist_7(int32_t value);
  public:

  // optional int32 ultrasound_dist_8 = 8;
  bool has_ultrasound_dist_8() const;
  private:
  bool _internal_has_ultrasound_dist_8() const;
  public:
  void clear_ultrasound_dist_8();
  int32_t ultrasound_dist_8() const;
  void set_ultrasound_dist_8(int32_t value);
  private:
  int32_t _internal_ultrasound_dist_8() const;
  void _internal_set_ultrasound_dist_8(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ecu_status_3_517)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ultrasound_dist_1_;
    int32_t ultrasound_dist_2_;
    int32_t ultrasound_dist_3_;
    int32_t ultrasound_dist_4_;
    int32_t ultrasound_dist_5_;
    int32_t ultrasound_dist_6_;
    int32_t ultrasound_dist_7_;
    int32_t ultrasound_dist_8_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Ecu_status_2_516 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ecu_status_2_516) */ {
 public:
  inline Ecu_status_2_516() : Ecu_status_2_516(nullptr) {}
  ~Ecu_status_2_516() override;
  explicit PROTOBUF_CONSTEXPR Ecu_status_2_516(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ecu_status_2_516(const Ecu_status_2_516& from);
  Ecu_status_2_516(Ecu_status_2_516&& from) noexcept
    : Ecu_status_2_516() {
    *this = ::std::move(from);
  }

  inline Ecu_status_2_516& operator=(const Ecu_status_2_516& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ecu_status_2_516& operator=(Ecu_status_2_516&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ecu_status_2_516& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ecu_status_2_516* internal_default_instance() {
    return reinterpret_cast<const Ecu_status_2_516*>(
               &_Ecu_status_2_516_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Ecu_status_2_516& a, Ecu_status_2_516& b) {
    a.Swap(&b);
  }
  inline void Swap(Ecu_status_2_516* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ecu_status_2_516* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ecu_status_2_516* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ecu_status_2_516>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ecu_status_2_516& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ecu_status_2_516& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ecu_status_2_516* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ecu_status_2_516";
  }
  protected:
  explicit Ecu_status_2_516(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryVoltageFieldNumber = 2,
    kBatteryRemainingCapacityFieldNumber = 1,
    kBatteryTemperatureFieldNumber = 4,
    kBatteryCurrentFieldNumber = 3,
  };
  // optional double battery_voltage = 2;
  bool has_battery_voltage() const;
  private:
  bool _internal_has_battery_voltage() const;
  public:
  void clear_battery_voltage();
  double battery_voltage() const;
  void set_battery_voltage(double value);
  private:
  double _internal_battery_voltage() const;
  void _internal_set_battery_voltage(double value);
  public:

  // optional int32 battery_remaining_capacity = 1;
  bool has_battery_remaining_capacity() const;
  private:
  bool _internal_has_battery_remaining_capacity() const;
  public:
  void clear_battery_remaining_capacity();
  int32_t battery_remaining_capacity() const;
  void set_battery_remaining_capacity(int32_t value);
  private:
  int32_t _internal_battery_remaining_capacity() const;
  void _internal_set_battery_remaining_capacity(int32_t value);
  public:

  // optional int32 battery_temperature = 4;
  bool has_battery_temperature() const;
  private:
  bool _internal_has_battery_temperature() const;
  public:
  void clear_battery_temperature();
  int32_t battery_temperature() const;
  void set_battery_temperature(int32_t value);
  private:
  int32_t _internal_battery_temperature() const;
  void _internal_set_battery_temperature(int32_t value);
  public:

  // optional double battery_current = 3;
  bool has_battery_current() const;
  private:
  bool _internal_has_battery_current() const;
  public:
  void clear_battery_current();
  double battery_current() const;
  void set_battery_current(double value);
  private:
  double _internal_battery_current() const;
  void _internal_set_battery_current(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ecu_status_2_516)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double battery_voltage_;
    int32_t battery_remaining_capacity_;
    int32_t battery_temperature_;
    double battery_current_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// -------------------------------------------------------------------

class Ch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ch) */ {
 public:
  inline Ch() : Ch(nullptr) {}
  ~Ch() override;
  explicit PROTOBUF_CONSTEXPR Ch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ch(const Ch& from);
  Ch(Ch&& from) noexcept
    : Ch() {
    *this = ::std::move(from);
  }

  inline Ch& operator=(const Ch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ch& operator=(Ch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ch& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ch* internal_default_instance() {
    return reinterpret_cast<const Ch*>(
               &_Ch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Ch& a, Ch& b) {
    a.Swap(&b);
  }
  inline void Swap(Ch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ch";
  }
  protected:
  explicit Ch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlCommand115FieldNumber = 1,
    kGearCommand114FieldNumber = 2,
    kBrakeCommand111FieldNumber = 3,
    kThrottleCommand110FieldNumber = 4,
    kTurnsignalCommand113FieldNumber = 5,
    kSteerCommand112FieldNumber = 6,
    kBrakeStatus511FieldNumber = 7,
    kThrottleStatus510FieldNumber = 8,
    kTurnsignalStatus513FieldNumber = 9,
    kSteerStatus512FieldNumber = 10,
    kEcuStatus1515FieldNumber = 11,
    kGearStatus514FieldNumber = 12,
    kEcuStatus3517FieldNumber = 13,
    kEcuStatus2516FieldNumber = 14,
  };
  // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
  bool has_control_command_115() const;
  private:
  bool _internal_has_control_command_115() const;
  public:
  void clear_control_command_115();
  const ::apollo::canbus::Control_command_115& control_command_115() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Control_command_115* release_control_command_115();
  ::apollo::canbus::Control_command_115* mutable_control_command_115();
  void set_allocated_control_command_115(::apollo::canbus::Control_command_115* control_command_115);
  private:
  const ::apollo::canbus::Control_command_115& _internal_control_command_115() const;
  ::apollo::canbus::Control_command_115* _internal_mutable_control_command_115();
  public:
  void unsafe_arena_set_allocated_control_command_115(
      ::apollo::canbus::Control_command_115* control_command_115);
  ::apollo::canbus::Control_command_115* unsafe_arena_release_control_command_115();

  // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
  bool has_gear_command_114() const;
  private:
  bool _internal_has_gear_command_114() const;
  public:
  void clear_gear_command_114();
  const ::apollo::canbus::Gear_command_114& gear_command_114() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Gear_command_114* release_gear_command_114();
  ::apollo::canbus::Gear_command_114* mutable_gear_command_114();
  void set_allocated_gear_command_114(::apollo::canbus::Gear_command_114* gear_command_114);
  private:
  const ::apollo::canbus::Gear_command_114& _internal_gear_command_114() const;
  ::apollo::canbus::Gear_command_114* _internal_mutable_gear_command_114();
  public:
  void unsafe_arena_set_allocated_gear_command_114(
      ::apollo::canbus::Gear_command_114* gear_command_114);
  ::apollo::canbus::Gear_command_114* unsafe_arena_release_gear_command_114();

  // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
  bool has_brake_command_111() const;
  private:
  bool _internal_has_brake_command_111() const;
  public:
  void clear_brake_command_111();
  const ::apollo::canbus::Brake_command_111& brake_command_111() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Brake_command_111* release_brake_command_111();
  ::apollo::canbus::Brake_command_111* mutable_brake_command_111();
  void set_allocated_brake_command_111(::apollo::canbus::Brake_command_111* brake_command_111);
  private:
  const ::apollo::canbus::Brake_command_111& _internal_brake_command_111() const;
  ::apollo::canbus::Brake_command_111* _internal_mutable_brake_command_111();
  public:
  void unsafe_arena_set_allocated_brake_command_111(
      ::apollo::canbus::Brake_command_111* brake_command_111);
  ::apollo::canbus::Brake_command_111* unsafe_arena_release_brake_command_111();

  // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
  bool has_throttle_command_110() const;
  private:
  bool _internal_has_throttle_command_110() const;
  public:
  void clear_throttle_command_110();
  const ::apollo::canbus::Throttle_command_110& throttle_command_110() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Throttle_command_110* release_throttle_command_110();
  ::apollo::canbus::Throttle_command_110* mutable_throttle_command_110();
  void set_allocated_throttle_command_110(::apollo::canbus::Throttle_command_110* throttle_command_110);
  private:
  const ::apollo::canbus::Throttle_command_110& _internal_throttle_command_110() const;
  ::apollo::canbus::Throttle_command_110* _internal_mutable_throttle_command_110();
  public:
  void unsafe_arena_set_allocated_throttle_command_110(
      ::apollo::canbus::Throttle_command_110* throttle_command_110);
  ::apollo::canbus::Throttle_command_110* unsafe_arena_release_throttle_command_110();

  // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  bool has_turnsignal_command_113() const;
  private:
  bool _internal_has_turnsignal_command_113() const;
  public:
  void clear_turnsignal_command_113();
  const ::apollo::canbus::Turnsignal_command_113& turnsignal_command_113() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Turnsignal_command_113* release_turnsignal_command_113();
  ::apollo::canbus::Turnsignal_command_113* mutable_turnsignal_command_113();
  void set_allocated_turnsignal_command_113(::apollo::canbus::Turnsignal_command_113* turnsignal_command_113);
  private:
  const ::apollo::canbus::Turnsignal_command_113& _internal_turnsignal_command_113() const;
  ::apollo::canbus::Turnsignal_command_113* _internal_mutable_turnsignal_command_113();
  public:
  void unsafe_arena_set_allocated_turnsignal_command_113(
      ::apollo::canbus::Turnsignal_command_113* turnsignal_command_113);
  ::apollo::canbus::Turnsignal_command_113* unsafe_arena_release_turnsignal_command_113();

  // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
  bool has_steer_command_112() const;
  private:
  bool _internal_has_steer_command_112() const;
  public:
  void clear_steer_command_112();
  const ::apollo::canbus::Steer_command_112& steer_command_112() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Steer_command_112* release_steer_command_112();
  ::apollo::canbus::Steer_command_112* mutable_steer_command_112();
  void set_allocated_steer_command_112(::apollo::canbus::Steer_command_112* steer_command_112);
  private:
  const ::apollo::canbus::Steer_command_112& _internal_steer_command_112() const;
  ::apollo::canbus::Steer_command_112* _internal_mutable_steer_command_112();
  public:
  void unsafe_arena_set_allocated_steer_command_112(
      ::apollo::canbus::Steer_command_112* steer_command_112);
  ::apollo::canbus::Steer_command_112* unsafe_arena_release_steer_command_112();

  // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
  bool has_brake_status__511() const;
  private:
  bool _internal_has_brake_status__511() const;
  public:
  void clear_brake_status__511();
  const ::apollo::canbus::Brake_status__511& brake_status__511() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Brake_status__511* release_brake_status__511();
  ::apollo::canbus::Brake_status__511* mutable_brake_status__511();
  void set_allocated_brake_status__511(::apollo::canbus::Brake_status__511* brake_status__511);
  private:
  const ::apollo::canbus::Brake_status__511& _internal_brake_status__511() const;
  ::apollo::canbus::Brake_status__511* _internal_mutable_brake_status__511();
  public:
  void unsafe_arena_set_allocated_brake_status__511(
      ::apollo::canbus::Brake_status__511* brake_status__511);
  ::apollo::canbus::Brake_status__511* unsafe_arena_release_brake_status__511();

  // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
  bool has_throttle_status__510() const;
  private:
  bool _internal_has_throttle_status__510() const;
  public:
  void clear_throttle_status__510();
  const ::apollo::canbus::Throttle_status__510& throttle_status__510() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Throttle_status__510* release_throttle_status__510();
  ::apollo::canbus::Throttle_status__510* mutable_throttle_status__510();
  void set_allocated_throttle_status__510(::apollo::canbus::Throttle_status__510* throttle_status__510);
  private:
  const ::apollo::canbus::Throttle_status__510& _internal_throttle_status__510() const;
  ::apollo::canbus::Throttle_status__510* _internal_mutable_throttle_status__510();
  public:
  void unsafe_arena_set_allocated_throttle_status__510(
      ::apollo::canbus::Throttle_status__510* throttle_status__510);
  ::apollo::canbus::Throttle_status__510* unsafe_arena_release_throttle_status__510();

  // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  bool has_turnsignal_status__513() const;
  private:
  bool _internal_has_turnsignal_status__513() const;
  public:
  void clear_turnsignal_status__513();
  const ::apollo::canbus::Turnsignal_status__513& turnsignal_status__513() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Turnsignal_status__513* release_turnsignal_status__513();
  ::apollo::canbus::Turnsignal_status__513* mutable_turnsignal_status__513();
  void set_allocated_turnsignal_status__513(::apollo::canbus::Turnsignal_status__513* turnsignal_status__513);
  private:
  const ::apollo::canbus::Turnsignal_status__513& _internal_turnsignal_status__513() const;
  ::apollo::canbus::Turnsignal_status__513* _internal_mutable_turnsignal_status__513();
  public:
  void unsafe_arena_set_allocated_turnsignal_status__513(
      ::apollo::canbus::Turnsignal_status__513* turnsignal_status__513);
  ::apollo::canbus::Turnsignal_status__513* unsafe_arena_release_turnsignal_status__513();

  // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
  bool has_steer_status__512() const;
  private:
  bool _internal_has_steer_status__512() const;
  public:
  void clear_steer_status__512();
  const ::apollo::canbus::Steer_status__512& steer_status__512() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Steer_status__512* release_steer_status__512();
  ::apollo::canbus::Steer_status__512* mutable_steer_status__512();
  void set_allocated_steer_status__512(::apollo::canbus::Steer_status__512* steer_status__512);
  private:
  const ::apollo::canbus::Steer_status__512& _internal_steer_status__512() const;
  ::apollo::canbus::Steer_status__512* _internal_mutable_steer_status__512();
  public:
  void unsafe_arena_set_allocated_steer_status__512(
      ::apollo::canbus::Steer_status__512* steer_status__512);
  ::apollo::canbus::Steer_status__512* unsafe_arena_release_steer_status__512();

  // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  bool has_ecu_status_1_515() const;
  private:
  bool _internal_has_ecu_status_1_515() const;
  public:
  void clear_ecu_status_1_515();
  const ::apollo::canbus::Ecu_status_1_515& ecu_status_1_515() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ecu_status_1_515* release_ecu_status_1_515();
  ::apollo::canbus::Ecu_status_1_515* mutable_ecu_status_1_515();
  void set_allocated_ecu_status_1_515(::apollo::canbus::Ecu_status_1_515* ecu_status_1_515);
  private:
  const ::apollo::canbus::Ecu_status_1_515& _internal_ecu_status_1_515() const;
  ::apollo::canbus::Ecu_status_1_515* _internal_mutable_ecu_status_1_515();
  public:
  void unsafe_arena_set_allocated_ecu_status_1_515(
      ::apollo::canbus::Ecu_status_1_515* ecu_status_1_515);
  ::apollo::canbus::Ecu_status_1_515* unsafe_arena_release_ecu_status_1_515();

  // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
  bool has_gear_status_514() const;
  private:
  bool _internal_has_gear_status_514() const;
  public:
  void clear_gear_status_514();
  const ::apollo::canbus::Gear_status_514& gear_status_514() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Gear_status_514* release_gear_status_514();
  ::apollo::canbus::Gear_status_514* mutable_gear_status_514();
  void set_allocated_gear_status_514(::apollo::canbus::Gear_status_514* gear_status_514);
  private:
  const ::apollo::canbus::Gear_status_514& _internal_gear_status_514() const;
  ::apollo::canbus::Gear_status_514* _internal_mutable_gear_status_514();
  public:
  void unsafe_arena_set_allocated_gear_status_514(
      ::apollo::canbus::Gear_status_514* gear_status_514);
  ::apollo::canbus::Gear_status_514* unsafe_arena_release_gear_status_514();

  // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  bool has_ecu_status_3_517() const;
  private:
  bool _internal_has_ecu_status_3_517() const;
  public:
  void clear_ecu_status_3_517();
  const ::apollo::canbus::Ecu_status_3_517& ecu_status_3_517() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ecu_status_3_517* release_ecu_status_3_517();
  ::apollo::canbus::Ecu_status_3_517* mutable_ecu_status_3_517();
  void set_allocated_ecu_status_3_517(::apollo::canbus::Ecu_status_3_517* ecu_status_3_517);
  private:
  const ::apollo::canbus::Ecu_status_3_517& _internal_ecu_status_3_517() const;
  ::apollo::canbus::Ecu_status_3_517* _internal_mutable_ecu_status_3_517();
  public:
  void unsafe_arena_set_allocated_ecu_status_3_517(
      ::apollo::canbus::Ecu_status_3_517* ecu_status_3_517);
  ::apollo::canbus::Ecu_status_3_517* unsafe_arena_release_ecu_status_3_517();

  // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  bool has_ecu_status_2_516() const;
  private:
  bool _internal_has_ecu_status_2_516() const;
  public:
  void clear_ecu_status_2_516();
  const ::apollo::canbus::Ecu_status_2_516& ecu_status_2_516() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ecu_status_2_516* release_ecu_status_2_516();
  ::apollo::canbus::Ecu_status_2_516* mutable_ecu_status_2_516();
  void set_allocated_ecu_status_2_516(::apollo::canbus::Ecu_status_2_516* ecu_status_2_516);
  private:
  const ::apollo::canbus::Ecu_status_2_516& _internal_ecu_status_2_516() const;
  ::apollo::canbus::Ecu_status_2_516* _internal_mutable_ecu_status_2_516();
  public:
  void unsafe_arena_set_allocated_ecu_status_2_516(
      ::apollo::canbus::Ecu_status_2_516* ecu_status_2_516);
  ::apollo::canbus::Ecu_status_2_516* unsafe_arena_release_ecu_status_2_516();

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::canbus::Control_command_115* control_command_115_;
    ::apollo::canbus::Gear_command_114* gear_command_114_;
    ::apollo::canbus::Brake_command_111* brake_command_111_;
    ::apollo::canbus::Throttle_command_110* throttle_command_110_;
    ::apollo::canbus::Turnsignal_command_113* turnsignal_command_113_;
    ::apollo::canbus::Steer_command_112* steer_command_112_;
    ::apollo::canbus::Brake_status__511* brake_status__511_;
    ::apollo::canbus::Throttle_status__510* throttle_status__510_;
    ::apollo::canbus::Turnsignal_status__513* turnsignal_status__513_;
    ::apollo::canbus::Steer_status__512* steer_status__512_;
    ::apollo::canbus::Ecu_status_1_515* ecu_status_1_515_;
    ::apollo::canbus::Gear_status_514* gear_status_514_;
    ::apollo::canbus::Ecu_status_3_517* ecu_status_3_517_;
    ::apollo::canbus::Ecu_status_2_516* ecu_status_2_516_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Control_command_115

// optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
inline bool Control_command_115::_internal_has_ctrl_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Control_command_115::has_ctrl_cmd() const {
  return _internal_has_ctrl_cmd();
}
inline void Control_command_115::clear_ctrl_cmd() {
  _impl_.ctrl_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Control_command_115_Ctrl_cmdType Control_command_115::_internal_ctrl_cmd() const {
  return static_cast< ::apollo::canbus::Control_command_115_Ctrl_cmdType >(_impl_.ctrl_cmd_);
}
inline ::apollo::canbus::Control_command_115_Ctrl_cmdType Control_command_115::ctrl_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Control_command_115.ctrl_cmd)
  return _internal_ctrl_cmd();
}
inline void Control_command_115::_internal_set_ctrl_cmd(::apollo::canbus::Control_command_115_Ctrl_cmdType value) {
  assert(::apollo::canbus::Control_command_115_Ctrl_cmdType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctrl_cmd_ = value;
}
inline void Control_command_115::set_ctrl_cmd(::apollo::canbus::Control_command_115_Ctrl_cmdType value) {
  _internal_set_ctrl_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Control_command_115.ctrl_cmd)
}

// -------------------------------------------------------------------

// Gear_command_114

// optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
inline bool Gear_command_114::_internal_has_gear_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gear_command_114::has_gear_cmd() const {
  return _internal_has_gear_cmd();
}
inline void Gear_command_114::clear_gear_cmd() {
  _impl_.gear_cmd_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Gear_command_114_Gear_cmdType Gear_command_114::_internal_gear_cmd() const {
  return static_cast< ::apollo::canbus::Gear_command_114_Gear_cmdType >(_impl_.gear_cmd_);
}
inline ::apollo::canbus::Gear_command_114_Gear_cmdType Gear_command_114::gear_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_command_114.gear_cmd)
  return _internal_gear_cmd();
}
inline void Gear_command_114::_internal_set_gear_cmd(::apollo::canbus::Gear_command_114_Gear_cmdType value) {
  assert(::apollo::canbus::Gear_command_114_Gear_cmdType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gear_cmd_ = value;
}
inline void Gear_command_114::set_gear_cmd(::apollo::canbus::Gear_command_114_Gear_cmdType value) {
  _internal_set_gear_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_command_114.gear_cmd)
}

// -------------------------------------------------------------------

// Brake_command_111

// optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
inline bool Brake_command_111::_internal_has_brake_pedal_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_command_111::has_brake_pedal_en_ctrl() const {
  return _internal_has_brake_pedal_en_ctrl();
}
inline void Brake_command_111::clear_brake_pedal_en_ctrl() {
  _impl_.brake_pedal_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::_internal_brake_pedal_en_ctrl() const {
  return static_cast< ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType >(_impl_.brake_pedal_en_ctrl_);
}
inline ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::brake_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_111.brake_pedal_en_ctrl)
  return _internal_brake_pedal_en_ctrl();
}
inline void Brake_command_111::_internal_set_brake_pedal_en_ctrl(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType value) {
  assert(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brake_pedal_en_ctrl_ = value;
}
inline void Brake_command_111::set_brake_pedal_en_ctrl(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType value) {
  _internal_set_brake_pedal_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_111.brake_pedal_en_ctrl)
}

// optional int32 brake_pedal_cmd = 2;
inline bool Brake_command_111::_internal_has_brake_pedal_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_command_111::has_brake_pedal_cmd() const {
  return _internal_has_brake_pedal_cmd();
}
inline void Brake_command_111::clear_brake_pedal_cmd() {
  _impl_.brake_pedal_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Brake_command_111::_internal_brake_pedal_cmd() const {
  return _impl_.brake_pedal_cmd_;
}
inline int32_t Brake_command_111::brake_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_111.brake_pedal_cmd)
  return _internal_brake_pedal_cmd();
}
inline void Brake_command_111::_internal_set_brake_pedal_cmd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brake_pedal_cmd_ = value;
}
inline void Brake_command_111::set_brake_pedal_cmd(int32_t value) {
  _internal_set_brake_pedal_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_111.brake_pedal_cmd)
}

// -------------------------------------------------------------------

// Throttle_command_110

// optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
inline bool Throttle_command_110::_internal_has_throttle_pedal_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Throttle_command_110::has_throttle_pedal_en_ctrl() const {
  return _internal_has_throttle_pedal_en_ctrl();
}
inline void Throttle_command_110::clear_throttle_pedal_en_ctrl() {
  _impl_.throttle_pedal_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::_internal_throttle_pedal_en_ctrl() const {
  return static_cast< ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType >(_impl_.throttle_pedal_en_ctrl_);
}
inline ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::throttle_pedal_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
  return _internal_throttle_pedal_en_ctrl();
}
inline void Throttle_command_110::_internal_set_throttle_pedal_en_ctrl(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value) {
  assert(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.throttle_pedal_en_ctrl_ = value;
}
inline void Throttle_command_110::set_throttle_pedal_en_ctrl(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType value) {
  _internal_set_throttle_pedal_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_110.throttle_pedal_en_ctrl)
}

// optional int32 throttle_pedal_cmd = 2;
inline bool Throttle_command_110::_internal_has_throttle_pedal_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Throttle_command_110::has_throttle_pedal_cmd() const {
  return _internal_has_throttle_pedal_cmd();
}
inline void Throttle_command_110::clear_throttle_pedal_cmd() {
  _impl_.throttle_pedal_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Throttle_command_110::_internal_throttle_pedal_cmd() const {
  return _impl_.throttle_pedal_cmd_;
}
inline int32_t Throttle_command_110::throttle_pedal_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_110.throttle_pedal_cmd)
  return _internal_throttle_pedal_cmd();
}
inline void Throttle_command_110::_internal_set_throttle_pedal_cmd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_pedal_cmd_ = value;
}
inline void Throttle_command_110::set_throttle_pedal_cmd(int32_t value) {
  _internal_set_throttle_pedal_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_110.throttle_pedal_cmd)
}

// -------------------------------------------------------------------

// Turnsignal_command_113

// optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
inline bool Turnsignal_command_113::_internal_has_turn_signal_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Turnsignal_command_113::has_turn_signal_cmd() const {
  return _internal_has_turn_signal_cmd();
}
inline void Turnsignal_command_113::clear_turn_signal_cmd() {
  _impl_.turn_signal_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::_internal_turn_signal_cmd() const {
  return static_cast< ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType >(_impl_.turn_signal_cmd_);
}
inline ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::turn_signal_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turnsignal_command_113.turn_signal_cmd)
  return _internal_turn_signal_cmd();
}
inline void Turnsignal_command_113::_internal_set_turn_signal_cmd(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType value) {
  assert(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.turn_signal_cmd_ = value;
}
inline void Turnsignal_command_113::set_turn_signal_cmd(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType value) {
  _internal_set_turn_signal_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turnsignal_command_113.turn_signal_cmd)
}

// -------------------------------------------------------------------

// Steer_command_112

// optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
inline bool Steer_command_112::_internal_has_steer_angle_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steer_command_112::has_steer_angle_en_ctrl() const {
  return _internal_has_steer_angle_en_ctrl();
}
inline void Steer_command_112::clear_steer_angle_en_ctrl() {
  _impl_.steer_angle_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::_internal_steer_angle_en_ctrl() const {
  return static_cast< ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType >(_impl_.steer_angle_en_ctrl_);
}
inline ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::steer_angle_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_command_112.steer_angle_en_ctrl)
  return _internal_steer_angle_en_ctrl();
}
inline void Steer_command_112::_internal_set_steer_angle_en_ctrl(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType value) {
  assert(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steer_angle_en_ctrl_ = value;
}
inline void Steer_command_112::set_steer_angle_en_ctrl(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType value) {
  _internal_set_steer_angle_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_command_112.steer_angle_en_ctrl)
}

// optional double steer_angle_cmd = 2;
inline bool Steer_command_112::_internal_has_steer_angle_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steer_command_112::has_steer_angle_cmd() const {
  return _internal_has_steer_angle_cmd();
}
inline void Steer_command_112::clear_steer_angle_cmd() {
  _impl_.steer_angle_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Steer_command_112::_internal_steer_angle_cmd() const {
  return _impl_.steer_angle_cmd_;
}
inline double Steer_command_112::steer_angle_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_command_112.steer_angle_cmd)
  return _internal_steer_angle_cmd();
}
inline void Steer_command_112::_internal_set_steer_angle_cmd(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steer_angle_cmd_ = value;
}
inline void Steer_command_112::set_steer_angle_cmd(double value) {
  _internal_set_steer_angle_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_command_112.steer_angle_cmd)
}

// -------------------------------------------------------------------

// Brake_status__511

// optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
inline bool Brake_status__511::_internal_has_brake_pedal_en_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_status__511::has_brake_pedal_en_sts() const {
  return _internal_has_brake_pedal_en_sts();
}
inline void Brake_status__511::clear_brake_pedal_en_sts() {
  _impl_.brake_pedal_en_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType Brake_status__511::_internal_brake_pedal_en_sts() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType >(_impl_.brake_pedal_en_sts_);
}
inline ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType Brake_status__511::brake_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.brake_pedal_en_sts)
  return _internal_brake_pedal_en_sts();
}
inline void Brake_status__511::_internal_set_brake_pedal_en_sts(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType value) {
  assert(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brake_pedal_en_sts_ = value;
}
inline void Brake_status__511::set_brake_pedal_en_sts(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType value) {
  _internal_set_brake_pedal_en_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.brake_pedal_en_sts)
}

// optional int32 brake_pedal_sts = 2;
inline bool Brake_status__511::_internal_has_brake_pedal_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_status__511::has_brake_pedal_sts() const {
  return _internal_has_brake_pedal_sts();
}
inline void Brake_status__511::clear_brake_pedal_sts() {
  _impl_.brake_pedal_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Brake_status__511::_internal_brake_pedal_sts() const {
  return _impl_.brake_pedal_sts_;
}
inline int32_t Brake_status__511::brake_pedal_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.brake_pedal_sts)
  return _internal_brake_pedal_sts();
}
inline void Brake_status__511::_internal_set_brake_pedal_sts(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brake_pedal_sts_ = value;
}
inline void Brake_status__511::set_brake_pedal_sts(int32_t value) {
  _internal_set_brake_pedal_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.brake_pedal_sts)
}

// optional .apollo.canbus.Brake_status__511.Brake_errType brake_err = 3;
inline bool Brake_status__511::_internal_has_brake_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_status__511::has_brake_err() const {
  return _internal_has_brake_err();
}
inline void Brake_status__511::clear_brake_err() {
  _impl_.brake_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Brake_status__511_Brake_errType Brake_status__511::_internal_brake_err() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Brake_errType >(_impl_.brake_err_);
}
inline ::apollo::canbus::Brake_status__511_Brake_errType Brake_status__511::brake_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.brake_err)
  return _internal_brake_err();
}
inline void Brake_status__511::_internal_set_brake_err(::apollo::canbus::Brake_status__511_Brake_errType value) {
  assert(::apollo::canbus::Brake_status__511_Brake_errType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.brake_err_ = value;
}
inline void Brake_status__511::set_brake_err(::apollo::canbus::Brake_status__511_Brake_errType value) {
  _internal_set_brake_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.brake_err)
}

// optional .apollo.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
inline bool Brake_status__511::_internal_has_emergency_btn_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_status__511::has_emergency_btn_env() const {
  return _internal_has_emergency_btn_env();
}
inline void Brake_status__511::clear_emergency_btn_env() {
  _impl_.emergency_btn_env_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Brake_status__511_Emergency_btn_envType Brake_status__511::_internal_emergency_btn_env() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Emergency_btn_envType >(_impl_.emergency_btn_env_);
}
inline ::apollo::canbus::Brake_status__511_Emergency_btn_envType Brake_status__511::emergency_btn_env() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.emergency_btn_env)
  return _internal_emergency_btn_env();
}
inline void Brake_status__511::_internal_set_emergency_btn_env(::apollo::canbus::Brake_status__511_Emergency_btn_envType value) {
  assert(::apollo::canbus::Brake_status__511_Emergency_btn_envType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.emergency_btn_env_ = value;
}
inline void Brake_status__511::set_emergency_btn_env(::apollo::canbus::Brake_status__511_Emergency_btn_envType value) {
  _internal_set_emergency_btn_env(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.emergency_btn_env)
}

// optional .apollo.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
inline bool Brake_status__511::_internal_has_front_bump_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brake_status__511::has_front_bump_env() const {
  return _internal_has_front_bump_env();
}
inline void Brake_status__511::clear_front_bump_env() {
  _impl_.front_bump_env_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Brake_status__511_Front_bump_envType Brake_status__511::_internal_front_bump_env() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Front_bump_envType >(_impl_.front_bump_env_);
}
inline ::apollo::canbus::Brake_status__511_Front_bump_envType Brake_status__511::front_bump_env() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.front_bump_env)
  return _internal_front_bump_env();
}
inline void Brake_status__511::_internal_set_front_bump_env(::apollo::canbus::Brake_status__511_Front_bump_envType value) {
  assert(::apollo::canbus::Brake_status__511_Front_bump_envType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.front_bump_env_ = value;
}
inline void Brake_status__511::set_front_bump_env(::apollo::canbus::Brake_status__511_Front_bump_envType value) {
  _internal_set_front_bump_env(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.front_bump_env)
}

// optional .apollo.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
inline bool Brake_status__511::_internal_has_back_bump_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Brake_status__511::has_back_bump_env() const {
  return _internal_has_back_bump_env();
}
inline void Brake_status__511::clear_back_bump_env() {
  _impl_.back_bump_env_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Brake_status__511_Back_bump_envType Brake_status__511::_internal_back_bump_env() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Back_bump_envType >(_impl_.back_bump_env_);
}
inline ::apollo::canbus::Brake_status__511_Back_bump_envType Brake_status__511::back_bump_env() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.back_bump_env)
  return _internal_back_bump_env();
}
inline void Brake_status__511::_internal_set_back_bump_env(::apollo::canbus::Brake_status__511_Back_bump_envType value) {
  assert(::apollo::canbus::Brake_status__511_Back_bump_envType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.back_bump_env_ = value;
}
inline void Brake_status__511::set_back_bump_env(::apollo::canbus::Brake_status__511_Back_bump_envType value) {
  _internal_set_back_bump_env(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.back_bump_env)
}

// optional .apollo.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
inline bool Brake_status__511::_internal_has_overspd_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Brake_status__511::has_overspd_env() const {
  return _internal_has_overspd_env();
}
inline void Brake_status__511::clear_overspd_env() {
  _impl_.overspd_env_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Brake_status__511_Overspd_envType Brake_status__511::_internal_overspd_env() const {
  return static_cast< ::apollo::canbus::Brake_status__511_Overspd_envType >(_impl_.overspd_env_);
}
inline ::apollo::canbus::Brake_status__511_Overspd_envType Brake_status__511::overspd_env() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_status__511.overspd_env)
  return _internal_overspd_env();
}
inline void Brake_status__511::_internal_set_overspd_env(::apollo::canbus::Brake_status__511_Overspd_envType value) {
  assert(::apollo::canbus::Brake_status__511_Overspd_envType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.overspd_env_ = value;
}
inline void Brake_status__511::set_overspd_env(::apollo::canbus::Brake_status__511_Overspd_envType value) {
  _internal_set_overspd_env(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_status__511.overspd_env)
}

// -------------------------------------------------------------------

// Throttle_status__510

// optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
inline bool Throttle_status__510::_internal_has_throttle_pedal_en_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Throttle_status__510::has_throttle_pedal_en_sts() const {
  return _internal_has_throttle_pedal_en_sts();
}
inline void Throttle_status__510::clear_throttle_pedal_en_sts() {
  _impl_.throttle_pedal_en_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::_internal_throttle_pedal_en_sts() const {
  return static_cast< ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType >(_impl_.throttle_pedal_en_sts_);
}
inline ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::throttle_pedal_en_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_status__510.throttle_pedal_en_sts)
  return _internal_throttle_pedal_en_sts();
}
inline void Throttle_status__510::_internal_set_throttle_pedal_en_sts(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType value) {
  assert(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.throttle_pedal_en_sts_ = value;
}
inline void Throttle_status__510::set_throttle_pedal_en_sts(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType value) {
  _internal_set_throttle_pedal_en_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_status__510.throttle_pedal_en_sts)
}

// optional int32 throttle_pedal_sts = 2;
inline bool Throttle_status__510::_internal_has_throttle_pedal_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Throttle_status__510::has_throttle_pedal_sts() const {
  return _internal_has_throttle_pedal_sts();
}
inline void Throttle_status__510::clear_throttle_pedal_sts() {
  _impl_.throttle_pedal_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Throttle_status__510::_internal_throttle_pedal_sts() const {
  return _impl_.throttle_pedal_sts_;
}
inline int32_t Throttle_status__510::throttle_pedal_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_status__510.throttle_pedal_sts)
  return _internal_throttle_pedal_sts();
}
inline void Throttle_status__510::_internal_set_throttle_pedal_sts(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_pedal_sts_ = value;
}
inline void Throttle_status__510::set_throttle_pedal_sts(int32_t value) {
  _internal_set_throttle_pedal_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_status__510.throttle_pedal_sts)
}

// optional .apollo.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
inline bool Throttle_status__510::_internal_has_drive_motor_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Throttle_status__510::has_drive_motor_err() const {
  return _internal_has_drive_motor_err();
}
inline void Throttle_status__510::clear_drive_motor_err() {
  _impl_.drive_motor_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Throttle_status__510_Drive_motor_errType Throttle_status__510::_internal_drive_motor_err() const {
  return static_cast< ::apollo::canbus::Throttle_status__510_Drive_motor_errType >(_impl_.drive_motor_err_);
}
inline ::apollo::canbus::Throttle_status__510_Drive_motor_errType Throttle_status__510::drive_motor_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_status__510.drive_motor_err)
  return _internal_drive_motor_err();
}
inline void Throttle_status__510::_internal_set_drive_motor_err(::apollo::canbus::Throttle_status__510_Drive_motor_errType value) {
  assert(::apollo::canbus::Throttle_status__510_Drive_motor_errType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.drive_motor_err_ = value;
}
inline void Throttle_status__510::set_drive_motor_err(::apollo::canbus::Throttle_status__510_Drive_motor_errType value) {
  _internal_set_drive_motor_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_status__510.drive_motor_err)
}

// optional .apollo.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
inline bool Throttle_status__510::_internal_has_battery_bms_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Throttle_status__510::has_battery_bms_err() const {
  return _internal_has_battery_bms_err();
}
inline void Throttle_status__510::clear_battery_bms_err() {
  _impl_.battery_bms_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Throttle_status__510_Battery_bms_errType Throttle_status__510::_internal_battery_bms_err() const {
  return static_cast< ::apollo::canbus::Throttle_status__510_Battery_bms_errType >(_impl_.battery_bms_err_);
}
inline ::apollo::canbus::Throttle_status__510_Battery_bms_errType Throttle_status__510::battery_bms_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_status__510.battery_bms_err)
  return _internal_battery_bms_err();
}
inline void Throttle_status__510::_internal_set_battery_bms_err(::apollo::canbus::Throttle_status__510_Battery_bms_errType value) {
  assert(::apollo::canbus::Throttle_status__510_Battery_bms_errType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.battery_bms_err_ = value;
}
inline void Throttle_status__510::set_battery_bms_err(::apollo::canbus::Throttle_status__510_Battery_bms_errType value) {
  _internal_set_battery_bms_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_status__510.battery_bms_err)
}

// -------------------------------------------------------------------

// Turnsignal_status__513

// optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
inline bool Turnsignal_status__513::_internal_has_turn_signal_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Turnsignal_status__513::has_turn_signal_sts() const {
  return _internal_has_turn_signal_sts();
}
inline void Turnsignal_status__513::clear_turn_signal_sts() {
  _impl_.turn_signal_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::_internal_turn_signal_sts() const {
  return static_cast< ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType >(_impl_.turn_signal_sts_);
}
inline ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::turn_signal_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turnsignal_status__513.turn_signal_sts)
  return _internal_turn_signal_sts();
}
inline void Turnsignal_status__513::_internal_set_turn_signal_sts(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType value) {
  assert(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.turn_signal_sts_ = value;
}
inline void Turnsignal_status__513::set_turn_signal_sts(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType value) {
  _internal_set_turn_signal_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turnsignal_status__513.turn_signal_sts)
}

// -------------------------------------------------------------------

// Steer_status__512

// optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
inline bool Steer_status__512::_internal_has_steer_angle_en_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steer_status__512::has_steer_angle_en_sts() const {
  return _internal_has_steer_angle_en_sts();
}
inline void Steer_status__512::clear_steer_angle_en_sts() {
  _impl_.steer_angle_en_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType Steer_status__512::_internal_steer_angle_en_sts() const {
  return static_cast< ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType >(_impl_.steer_angle_en_sts_);
}
inline ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType Steer_status__512::steer_angle_en_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_status__512.steer_angle_en_sts)
  return _internal_steer_angle_en_sts();
}
inline void Steer_status__512::_internal_set_steer_angle_en_sts(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType value) {
  assert(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steer_angle_en_sts_ = value;
}
inline void Steer_status__512::set_steer_angle_en_sts(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType value) {
  _internal_set_steer_angle_en_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_status__512.steer_angle_en_sts)
}

// optional double steer_angle_sts = 2;
inline bool Steer_status__512::_internal_has_steer_angle_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steer_status__512::has_steer_angle_sts() const {
  return _internal_has_steer_angle_sts();
}
inline void Steer_status__512::clear_steer_angle_sts() {
  _impl_.steer_angle_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Steer_status__512::_internal_steer_angle_sts() const {
  return _impl_.steer_angle_sts_;
}
inline double Steer_status__512::steer_angle_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_status__512.steer_angle_sts)
  return _internal_steer_angle_sts();
}
inline void Steer_status__512::_internal_set_steer_angle_sts(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steer_angle_sts_ = value;
}
inline void Steer_status__512::set_steer_angle_sts(double value) {
  _internal_set_steer_angle_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_status__512.steer_angle_sts)
}

// optional .apollo.canbus.Steer_status__512.Steer_errType steer_err = 3;
inline bool Steer_status__512::_internal_has_steer_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steer_status__512::has_steer_err() const {
  return _internal_has_steer_err();
}
inline void Steer_status__512::clear_steer_err() {
  _impl_.steer_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Steer_status__512_Steer_errType Steer_status__512::_internal_steer_err() const {
  return static_cast< ::apollo::canbus::Steer_status__512_Steer_errType >(_impl_.steer_err_);
}
inline ::apollo::canbus::Steer_status__512_Steer_errType Steer_status__512::steer_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_status__512.steer_err)
  return _internal_steer_err();
}
inline void Steer_status__512::_internal_set_steer_err(::apollo::canbus::Steer_status__512_Steer_errType value) {
  assert(::apollo::canbus::Steer_status__512_Steer_errType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steer_err_ = value;
}
inline void Steer_status__512::set_steer_err(::apollo::canbus::Steer_status__512_Steer_errType value) {
  _internal_set_steer_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_status__512.steer_err)
}

// optional .apollo.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
inline bool Steer_status__512::_internal_has_sensor_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steer_status__512::has_sensor_err() const {
  return _internal_has_sensor_err();
}
inline void Steer_status__512::clear_sensor_err() {
  _impl_.sensor_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Steer_status__512_Sensor_errType Steer_status__512::_internal_sensor_err() const {
  return static_cast< ::apollo::canbus::Steer_status__512_Sensor_errType >(_impl_.sensor_err_);
}
inline ::apollo::canbus::Steer_status__512_Sensor_errType Steer_status__512::sensor_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steer_status__512.sensor_err)
  return _internal_sensor_err();
}
inline void Steer_status__512::_internal_set_sensor_err(::apollo::canbus::Steer_status__512_Sensor_errType value) {
  assert(::apollo::canbus::Steer_status__512_Sensor_errType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sensor_err_ = value;
}
inline void Steer_status__512::set_sensor_err(::apollo::canbus::Steer_status__512_Sensor_errType value) {
  _internal_set_sensor_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steer_status__512.sensor_err)
}

// -------------------------------------------------------------------

// Ecu_status_1_515

// optional double speed = 1;
inline bool Ecu_status_1_515::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ecu_status_1_515::has_speed() const {
  return _internal_has_speed();
}
inline void Ecu_status_1_515::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ecu_status_1_515::_internal_speed() const {
  return _impl_.speed_;
}
inline double Ecu_status_1_515::speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_1_515.speed)
  return _internal_speed();
}
inline void Ecu_status_1_515::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.speed_ = value;
}
inline void Ecu_status_1_515::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_1_515.speed)
}

// optional double acc_speed = 2;
inline bool Ecu_status_1_515::_internal_has_acc_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ecu_status_1_515::has_acc_speed() const {
  return _internal_has_acc_speed();
}
inline void Ecu_status_1_515::clear_acc_speed() {
  _impl_.acc_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ecu_status_1_515::_internal_acc_speed() const {
  return _impl_.acc_speed_;
}
inline double Ecu_status_1_515::acc_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_1_515.acc_speed)
  return _internal_acc_speed();
}
inline void Ecu_status_1_515::_internal_set_acc_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acc_speed_ = value;
}
inline void Ecu_status_1_515::set_acc_speed(double value) {
  _internal_set_acc_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_1_515.acc_speed)
}

// optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
inline bool Ecu_status_1_515::_internal_has_ctrl_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ecu_status_1_515::has_ctrl_sts() const {
  return _internal_has_ctrl_sts();
}
inline void Ecu_status_1_515::clear_ctrl_sts() {
  _impl_.ctrl_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::_internal_ctrl_sts() const {
  return static_cast< ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType >(_impl_.ctrl_sts_);
}
inline ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::ctrl_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_1_515.ctrl_sts)
  return _internal_ctrl_sts();
}
inline void Ecu_status_1_515::_internal_set_ctrl_sts(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType value) {
  assert(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ctrl_sts_ = value;
}
inline void Ecu_status_1_515::set_ctrl_sts(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType value) {
  _internal_set_ctrl_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_1_515.ctrl_sts)
}

// optional int32 chassis_sts = 4;
inline bool Ecu_status_1_515::_internal_has_chassis_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ecu_status_1_515::has_chassis_sts() const {
  return _internal_has_chassis_sts();
}
inline void Ecu_status_1_515::clear_chassis_sts() {
  _impl_.chassis_sts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ecu_status_1_515::_internal_chassis_sts() const {
  return _impl_.chassis_sts_;
}
inline int32_t Ecu_status_1_515::chassis_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_1_515.chassis_sts)
  return _internal_chassis_sts();
}
inline void Ecu_status_1_515::_internal_set_chassis_sts(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.chassis_sts_ = value;
}
inline void Ecu_status_1_515::set_chassis_sts(int32_t value) {
  _internal_set_chassis_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_1_515.chassis_sts)
}

// optional int32 chassis_err = 5;
inline bool Ecu_status_1_515::_internal_has_chassis_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ecu_status_1_515::has_chassis_err() const {
  return _internal_has_chassis_err();
}
inline void Ecu_status_1_515::clear_chassis_err() {
  _impl_.chassis_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Ecu_status_1_515::_internal_chassis_err() const {
  return _impl_.chassis_err_;
}
inline int32_t Ecu_status_1_515::chassis_err() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_1_515.chassis_err)
  return _internal_chassis_err();
}
inline void Ecu_status_1_515::_internal_set_chassis_err(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.chassis_err_ = value;
}
inline void Ecu_status_1_515::set_chassis_err(int32_t value) {
  _internal_set_chassis_err(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_1_515.chassis_err)
}

// -------------------------------------------------------------------

// Gear_status_514

// optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
inline bool Gear_status_514::_internal_has_gear_sts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gear_status_514::has_gear_sts() const {
  return _internal_has_gear_sts();
}
inline void Gear_status_514::clear_gear_sts() {
  _impl_.gear_sts_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Gear_status_514_Gear_stsType Gear_status_514::_internal_gear_sts() const {
  return static_cast< ::apollo::canbus::Gear_status_514_Gear_stsType >(_impl_.gear_sts_);
}
inline ::apollo::canbus::Gear_status_514_Gear_stsType Gear_status_514::gear_sts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_status_514.gear_sts)
  return _internal_gear_sts();
}
inline void Gear_status_514::_internal_set_gear_sts(::apollo::canbus::Gear_status_514_Gear_stsType value) {
  assert(::apollo::canbus::Gear_status_514_Gear_stsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gear_sts_ = value;
}
inline void Gear_status_514::set_gear_sts(::apollo::canbus::Gear_status_514_Gear_stsType value) {
  _internal_set_gear_sts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_status_514.gear_sts)
}

// -------------------------------------------------------------------

// Ecu_status_3_517

// optional int32 ultrasound_dist_1 = 1;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_1() const {
  return _internal_has_ultrasound_dist_1();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_1() {
  _impl_.ultrasound_dist_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_1() const {
  return _impl_.ultrasound_dist_1_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_1)
  return _internal_ultrasound_dist_1();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ultrasound_dist_1_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_1(int32_t value) {
  _internal_set_ultrasound_dist_1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_1)
}

// optional int32 ultrasound_dist_2 = 2;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_2() const {
  return _internal_has_ultrasound_dist_2();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_2() {
  _impl_.ultrasound_dist_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_2() const {
  return _impl_.ultrasound_dist_2_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_2)
  return _internal_ultrasound_dist_2();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ultrasound_dist_2_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_2(int32_t value) {
  _internal_set_ultrasound_dist_2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_2)
}

// optional int32 ultrasound_dist_3 = 3;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_3() const {
  return _internal_has_ultrasound_dist_3();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_3() {
  _impl_.ultrasound_dist_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_3() const {
  return _impl_.ultrasound_dist_3_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_3() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_3)
  return _internal_ultrasound_dist_3();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_3(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ultrasound_dist_3_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_3(int32_t value) {
  _internal_set_ultrasound_dist_3(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_3)
}

// optional int32 ultrasound_dist_4 = 4;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_4() const {
  return _internal_has_ultrasound_dist_4();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_4() {
  _impl_.ultrasound_dist_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_4() const {
  return _impl_.ultrasound_dist_4_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_4() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_4)
  return _internal_ultrasound_dist_4();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_4(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ultrasound_dist_4_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_4(int32_t value) {
  _internal_set_ultrasound_dist_4(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_4)
}

// optional int32 ultrasound_dist_5 = 5;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_5() const {
  return _internal_has_ultrasound_dist_5();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_5() {
  _impl_.ultrasound_dist_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_5() const {
  return _impl_.ultrasound_dist_5_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_5() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_5)
  return _internal_ultrasound_dist_5();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_5(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ultrasound_dist_5_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_5(int32_t value) {
  _internal_set_ultrasound_dist_5(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_5)
}

// optional int32 ultrasound_dist_6 = 6;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_6() const {
  return _internal_has_ultrasound_dist_6();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_6() {
  _impl_.ultrasound_dist_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_6() const {
  return _impl_.ultrasound_dist_6_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_6() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_6)
  return _internal_ultrasound_dist_6();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_6(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ultrasound_dist_6_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_6(int32_t value) {
  _internal_set_ultrasound_dist_6(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_6)
}

// optional int32 ultrasound_dist_7 = 7;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_7() const {
  return _internal_has_ultrasound_dist_7();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_7() {
  _impl_.ultrasound_dist_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_7() const {
  return _impl_.ultrasound_dist_7_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_7() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_7)
  return _internal_ultrasound_dist_7();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_7(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ultrasound_dist_7_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_7(int32_t value) {
  _internal_set_ultrasound_dist_7(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_7)
}

// optional int32 ultrasound_dist_8 = 8;
inline bool Ecu_status_3_517::_internal_has_ultrasound_dist_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Ecu_status_3_517::has_ultrasound_dist_8() const {
  return _internal_has_ultrasound_dist_8();
}
inline void Ecu_status_3_517::clear_ultrasound_dist_8() {
  _impl_.ultrasound_dist_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Ecu_status_3_517::_internal_ultrasound_dist_8() const {
  return _impl_.ultrasound_dist_8_;
}
inline int32_t Ecu_status_3_517::ultrasound_dist_8() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_3_517.ultrasound_dist_8)
  return _internal_ultrasound_dist_8();
}
inline void Ecu_status_3_517::_internal_set_ultrasound_dist_8(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ultrasound_dist_8_ = value;
}
inline void Ecu_status_3_517::set_ultrasound_dist_8(int32_t value) {
  _internal_set_ultrasound_dist_8(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_3_517.ultrasound_dist_8)
}

// -------------------------------------------------------------------

// Ecu_status_2_516

// optional int32 battery_remaining_capacity = 1;
inline bool Ecu_status_2_516::_internal_has_battery_remaining_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ecu_status_2_516::has_battery_remaining_capacity() const {
  return _internal_has_battery_remaining_capacity();
}
inline void Ecu_status_2_516::clear_battery_remaining_capacity() {
  _impl_.battery_remaining_capacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Ecu_status_2_516::_internal_battery_remaining_capacity() const {
  return _impl_.battery_remaining_capacity_;
}
inline int32_t Ecu_status_2_516::battery_remaining_capacity() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_2_516.battery_remaining_capacity)
  return _internal_battery_remaining_capacity();
}
inline void Ecu_status_2_516::_internal_set_battery_remaining_capacity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.battery_remaining_capacity_ = value;
}
inline void Ecu_status_2_516::set_battery_remaining_capacity(int32_t value) {
  _internal_set_battery_remaining_capacity(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_2_516.battery_remaining_capacity)
}

// optional double battery_voltage = 2;
inline bool Ecu_status_2_516::_internal_has_battery_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ecu_status_2_516::has_battery_voltage() const {
  return _internal_has_battery_voltage();
}
inline void Ecu_status_2_516::clear_battery_voltage() {
  _impl_.battery_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ecu_status_2_516::_internal_battery_voltage() const {
  return _impl_.battery_voltage_;
}
inline double Ecu_status_2_516::battery_voltage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_2_516.battery_voltage)
  return _internal_battery_voltage();
}
inline void Ecu_status_2_516::_internal_set_battery_voltage(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.battery_voltage_ = value;
}
inline void Ecu_status_2_516::set_battery_voltage(double value) {
  _internal_set_battery_voltage(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_2_516.battery_voltage)
}

// optional double battery_current = 3;
inline bool Ecu_status_2_516::_internal_has_battery_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ecu_status_2_516::has_battery_current() const {
  return _internal_has_battery_current();
}
inline void Ecu_status_2_516::clear_battery_current() {
  _impl_.battery_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ecu_status_2_516::_internal_battery_current() const {
  return _impl_.battery_current_;
}
inline double Ecu_status_2_516::battery_current() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_2_516.battery_current)
  return _internal_battery_current();
}
inline void Ecu_status_2_516::_internal_set_battery_current(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.battery_current_ = value;
}
inline void Ecu_status_2_516::set_battery_current(double value) {
  _internal_set_battery_current(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_2_516.battery_current)
}

// optional int32 battery_temperature = 4;
inline bool Ecu_status_2_516::_internal_has_battery_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ecu_status_2_516::has_battery_temperature() const {
  return _internal_has_battery_temperature();
}
inline void Ecu_status_2_516::clear_battery_temperature() {
  _impl_.battery_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Ecu_status_2_516::_internal_battery_temperature() const {
  return _impl_.battery_temperature_;
}
inline int32_t Ecu_status_2_516::battery_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ecu_status_2_516.battery_temperature)
  return _internal_battery_temperature();
}
inline void Ecu_status_2_516::_internal_set_battery_temperature(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.battery_temperature_ = value;
}
inline void Ecu_status_2_516::set_battery_temperature(int32_t value) {
  _internal_set_battery_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ecu_status_2_516.battery_temperature)
}

// -------------------------------------------------------------------

// Ch

// optional .apollo.canbus.Control_command_115 control_command_115 = 1;
inline bool Ch::_internal_has_control_command_115() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_command_115_ != nullptr);
  return value;
}
inline bool Ch::has_control_command_115() const {
  return _internal_has_control_command_115();
}
inline void Ch::clear_control_command_115() {
  if (_impl_.control_command_115_ != nullptr) _impl_.control_command_115_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Control_command_115& Ch::_internal_control_command_115() const {
  const ::apollo::canbus::Control_command_115* p = _impl_.control_command_115_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Control_command_115&>(
      ::apollo::canbus::_Control_command_115_default_instance_);
}
inline const ::apollo::canbus::Control_command_115& Ch::control_command_115() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.control_command_115)
  return _internal_control_command_115();
}
inline void Ch::unsafe_arena_set_allocated_control_command_115(
    ::apollo::canbus::Control_command_115* control_command_115) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.control_command_115_);
  }
  _impl_.control_command_115_ = control_command_115;
  if (control_command_115) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.control_command_115)
}
inline ::apollo::canbus::Control_command_115* Ch::release_control_command_115() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Control_command_115* temp = _impl_.control_command_115_;
  _impl_.control_command_115_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Control_command_115* Ch::unsafe_arena_release_control_command_115() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.control_command_115)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Control_command_115* temp = _impl_.control_command_115_;
  _impl_.control_command_115_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Control_command_115* Ch::_internal_mutable_control_command_115() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.control_command_115_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Control_command_115>(GetArenaForAllocation());
    _impl_.control_command_115_ = p;
  }
  return _impl_.control_command_115_;
}
inline ::apollo::canbus::Control_command_115* Ch::mutable_control_command_115() {
  ::apollo::canbus::Control_command_115* _msg = _internal_mutable_control_command_115();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.control_command_115)
  return _msg;
}
inline void Ch::set_allocated_control_command_115(::apollo::canbus::Control_command_115* control_command_115) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.control_command_115_;
  }
  if (control_command_115) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_command_115);
    if (message_arena != submessage_arena) {
      control_command_115 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_command_115, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.control_command_115_ = control_command_115;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.control_command_115)
}

// optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
inline bool Ch::_internal_has_gear_command_114() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gear_command_114_ != nullptr);
  return value;
}
inline bool Ch::has_gear_command_114() const {
  return _internal_has_gear_command_114();
}
inline void Ch::clear_gear_command_114() {
  if (_impl_.gear_command_114_ != nullptr) _impl_.gear_command_114_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Gear_command_114& Ch::_internal_gear_command_114() const {
  const ::apollo::canbus::Gear_command_114* p = _impl_.gear_command_114_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Gear_command_114&>(
      ::apollo::canbus::_Gear_command_114_default_instance_);
}
inline const ::apollo::canbus::Gear_command_114& Ch::gear_command_114() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.gear_command_114)
  return _internal_gear_command_114();
}
inline void Ch::unsafe_arena_set_allocated_gear_command_114(
    ::apollo::canbus::Gear_command_114* gear_command_114) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_command_114_);
  }
  _impl_.gear_command_114_ = gear_command_114;
  if (gear_command_114) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.gear_command_114)
}
inline ::apollo::canbus::Gear_command_114* Ch::release_gear_command_114() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Gear_command_114* temp = _impl_.gear_command_114_;
  _impl_.gear_command_114_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Gear_command_114* Ch::unsafe_arena_release_gear_command_114() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.gear_command_114)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Gear_command_114* temp = _impl_.gear_command_114_;
  _impl_.gear_command_114_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Gear_command_114* Ch::_internal_mutable_gear_command_114() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gear_command_114_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Gear_command_114>(GetArenaForAllocation());
    _impl_.gear_command_114_ = p;
  }
  return _impl_.gear_command_114_;
}
inline ::apollo::canbus::Gear_command_114* Ch::mutable_gear_command_114() {
  ::apollo::canbus::Gear_command_114* _msg = _internal_mutable_gear_command_114();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.gear_command_114)
  return _msg;
}
inline void Ch::set_allocated_gear_command_114(::apollo::canbus::Gear_command_114* gear_command_114) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gear_command_114_;
  }
  if (gear_command_114) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gear_command_114);
    if (message_arena != submessage_arena) {
      gear_command_114 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear_command_114, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gear_command_114_ = gear_command_114;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.gear_command_114)
}

// optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
inline bool Ch::_internal_has_brake_command_111() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_command_111_ != nullptr);
  return value;
}
inline bool Ch::has_brake_command_111() const {
  return _internal_has_brake_command_111();
}
inline void Ch::clear_brake_command_111() {
  if (_impl_.brake_command_111_ != nullptr) _impl_.brake_command_111_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Brake_command_111& Ch::_internal_brake_command_111() const {
  const ::apollo::canbus::Brake_command_111* p = _impl_.brake_command_111_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Brake_command_111&>(
      ::apollo::canbus::_Brake_command_111_default_instance_);
}
inline const ::apollo::canbus::Brake_command_111& Ch::brake_command_111() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.brake_command_111)
  return _internal_brake_command_111();
}
inline void Ch::unsafe_arena_set_allocated_brake_command_111(
    ::apollo::canbus::Brake_command_111* brake_command_111) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_command_111_);
  }
  _impl_.brake_command_111_ = brake_command_111;
  if (brake_command_111) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.brake_command_111)
}
inline ::apollo::canbus::Brake_command_111* Ch::release_brake_command_111() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Brake_command_111* temp = _impl_.brake_command_111_;
  _impl_.brake_command_111_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Brake_command_111* Ch::unsafe_arena_release_brake_command_111() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.brake_command_111)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Brake_command_111* temp = _impl_.brake_command_111_;
  _impl_.brake_command_111_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_command_111* Ch::_internal_mutable_brake_command_111() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.brake_command_111_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_command_111>(GetArenaForAllocation());
    _impl_.brake_command_111_ = p;
  }
  return _impl_.brake_command_111_;
}
inline ::apollo::canbus::Brake_command_111* Ch::mutable_brake_command_111() {
  ::apollo::canbus::Brake_command_111* _msg = _internal_mutable_brake_command_111();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.brake_command_111)
  return _msg;
}
inline void Ch::set_allocated_brake_command_111(::apollo::canbus::Brake_command_111* brake_command_111) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.brake_command_111_;
  }
  if (brake_command_111) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(brake_command_111);
    if (message_arena != submessage_arena) {
      brake_command_111 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_command_111, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.brake_command_111_ = brake_command_111;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.brake_command_111)
}

// optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
inline bool Ch::_internal_has_throttle_command_110() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.throttle_command_110_ != nullptr);
  return value;
}
inline bool Ch::has_throttle_command_110() const {
  return _internal_has_throttle_command_110();
}
inline void Ch::clear_throttle_command_110() {
  if (_impl_.throttle_command_110_ != nullptr) _impl_.throttle_command_110_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Throttle_command_110& Ch::_internal_throttle_command_110() const {
  const ::apollo::canbus::Throttle_command_110* p = _impl_.throttle_command_110_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Throttle_command_110&>(
      ::apollo::canbus::_Throttle_command_110_default_instance_);
}
inline const ::apollo::canbus::Throttle_command_110& Ch::throttle_command_110() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.throttle_command_110)
  return _internal_throttle_command_110();
}
inline void Ch::unsafe_arena_set_allocated_throttle_command_110(
    ::apollo::canbus::Throttle_command_110* throttle_command_110) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_command_110_);
  }
  _impl_.throttle_command_110_ = throttle_command_110;
  if (throttle_command_110) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.throttle_command_110)
}
inline ::apollo::canbus::Throttle_command_110* Ch::release_throttle_command_110() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Throttle_command_110* temp = _impl_.throttle_command_110_;
  _impl_.throttle_command_110_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Throttle_command_110* Ch::unsafe_arena_release_throttle_command_110() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.throttle_command_110)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Throttle_command_110* temp = _impl_.throttle_command_110_;
  _impl_.throttle_command_110_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Throttle_command_110* Ch::_internal_mutable_throttle_command_110() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.throttle_command_110_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Throttle_command_110>(GetArenaForAllocation());
    _impl_.throttle_command_110_ = p;
  }
  return _impl_.throttle_command_110_;
}
inline ::apollo::canbus::Throttle_command_110* Ch::mutable_throttle_command_110() {
  ::apollo::canbus::Throttle_command_110* _msg = _internal_mutable_throttle_command_110();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.throttle_command_110)
  return _msg;
}
inline void Ch::set_allocated_throttle_command_110(::apollo::canbus::Throttle_command_110* throttle_command_110) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.throttle_command_110_;
  }
  if (throttle_command_110) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_command_110);
    if (message_arena != submessage_arena) {
      throttle_command_110 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_command_110, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.throttle_command_110_ = throttle_command_110;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.throttle_command_110)
}

// optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
inline bool Ch::_internal_has_turnsignal_command_113() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.turnsignal_command_113_ != nullptr);
  return value;
}
inline bool Ch::has_turnsignal_command_113() const {
  return _internal_has_turnsignal_command_113();
}
inline void Ch::clear_turnsignal_command_113() {
  if (_impl_.turnsignal_command_113_ != nullptr) _impl_.turnsignal_command_113_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Turnsignal_command_113& Ch::_internal_turnsignal_command_113() const {
  const ::apollo::canbus::Turnsignal_command_113* p = _impl_.turnsignal_command_113_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Turnsignal_command_113&>(
      ::apollo::canbus::_Turnsignal_command_113_default_instance_);
}
inline const ::apollo::canbus::Turnsignal_command_113& Ch::turnsignal_command_113() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.turnsignal_command_113)
  return _internal_turnsignal_command_113();
}
inline void Ch::unsafe_arena_set_allocated_turnsignal_command_113(
    ::apollo::canbus::Turnsignal_command_113* turnsignal_command_113) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.turnsignal_command_113_);
  }
  _impl_.turnsignal_command_113_ = turnsignal_command_113;
  if (turnsignal_command_113) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.turnsignal_command_113)
}
inline ::apollo::canbus::Turnsignal_command_113* Ch::release_turnsignal_command_113() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Turnsignal_command_113* temp = _impl_.turnsignal_command_113_;
  _impl_.turnsignal_command_113_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Turnsignal_command_113* Ch::unsafe_arena_release_turnsignal_command_113() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.turnsignal_command_113)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Turnsignal_command_113* temp = _impl_.turnsignal_command_113_;
  _impl_.turnsignal_command_113_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Turnsignal_command_113* Ch::_internal_mutable_turnsignal_command_113() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.turnsignal_command_113_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Turnsignal_command_113>(GetArenaForAllocation());
    _impl_.turnsignal_command_113_ = p;
  }
  return _impl_.turnsignal_command_113_;
}
inline ::apollo::canbus::Turnsignal_command_113* Ch::mutable_turnsignal_command_113() {
  ::apollo::canbus::Turnsignal_command_113* _msg = _internal_mutable_turnsignal_command_113();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.turnsignal_command_113)
  return _msg;
}
inline void Ch::set_allocated_turnsignal_command_113(::apollo::canbus::Turnsignal_command_113* turnsignal_command_113) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.turnsignal_command_113_;
  }
  if (turnsignal_command_113) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(turnsignal_command_113);
    if (message_arena != submessage_arena) {
      turnsignal_command_113 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turnsignal_command_113, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.turnsignal_command_113_ = turnsignal_command_113;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.turnsignal_command_113)
}

// optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
inline bool Ch::_internal_has_steer_command_112() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steer_command_112_ != nullptr);
  return value;
}
inline bool Ch::has_steer_command_112() const {
  return _internal_has_steer_command_112();
}
inline void Ch::clear_steer_command_112() {
  if (_impl_.steer_command_112_ != nullptr) _impl_.steer_command_112_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Steer_command_112& Ch::_internal_steer_command_112() const {
  const ::apollo::canbus::Steer_command_112* p = _impl_.steer_command_112_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Steer_command_112&>(
      ::apollo::canbus::_Steer_command_112_default_instance_);
}
inline const ::apollo::canbus::Steer_command_112& Ch::steer_command_112() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.steer_command_112)
  return _internal_steer_command_112();
}
inline void Ch::unsafe_arena_set_allocated_steer_command_112(
    ::apollo::canbus::Steer_command_112* steer_command_112) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_command_112_);
  }
  _impl_.steer_command_112_ = steer_command_112;
  if (steer_command_112) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.steer_command_112)
}
inline ::apollo::canbus::Steer_command_112* Ch::release_steer_command_112() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Steer_command_112* temp = _impl_.steer_command_112_;
  _impl_.steer_command_112_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Steer_command_112* Ch::unsafe_arena_release_steer_command_112() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.steer_command_112)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Steer_command_112* temp = _impl_.steer_command_112_;
  _impl_.steer_command_112_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steer_command_112* Ch::_internal_mutable_steer_command_112() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.steer_command_112_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steer_command_112>(GetArenaForAllocation());
    _impl_.steer_command_112_ = p;
  }
  return _impl_.steer_command_112_;
}
inline ::apollo::canbus::Steer_command_112* Ch::mutable_steer_command_112() {
  ::apollo::canbus::Steer_command_112* _msg = _internal_mutable_steer_command_112();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.steer_command_112)
  return _msg;
}
inline void Ch::set_allocated_steer_command_112(::apollo::canbus::Steer_command_112* steer_command_112) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.steer_command_112_;
  }
  if (steer_command_112) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(steer_command_112);
    if (message_arena != submessage_arena) {
      steer_command_112 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_command_112, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.steer_command_112_ = steer_command_112;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.steer_command_112)
}

// optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
inline bool Ch::_internal_has_brake_status__511() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_status__511_ != nullptr);
  return value;
}
inline bool Ch::has_brake_status__511() const {
  return _internal_has_brake_status__511();
}
inline void Ch::clear_brake_status__511() {
  if (_impl_.brake_status__511_ != nullptr) _impl_.brake_status__511_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Brake_status__511& Ch::_internal_brake_status__511() const {
  const ::apollo::canbus::Brake_status__511* p = _impl_.brake_status__511_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Brake_status__511&>(
      ::apollo::canbus::_Brake_status__511_default_instance_);
}
inline const ::apollo::canbus::Brake_status__511& Ch::brake_status__511() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.brake_status__511)
  return _internal_brake_status__511();
}
inline void Ch::unsafe_arena_set_allocated_brake_status__511(
    ::apollo::canbus::Brake_status__511* brake_status__511) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_status__511_);
  }
  _impl_.brake_status__511_ = brake_status__511;
  if (brake_status__511) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.brake_status__511)
}
inline ::apollo::canbus::Brake_status__511* Ch::release_brake_status__511() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Brake_status__511* temp = _impl_.brake_status__511_;
  _impl_.brake_status__511_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Brake_status__511* Ch::unsafe_arena_release_brake_status__511() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.brake_status__511)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Brake_status__511* temp = _impl_.brake_status__511_;
  _impl_.brake_status__511_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_status__511* Ch::_internal_mutable_brake_status__511() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.brake_status__511_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_status__511>(GetArenaForAllocation());
    _impl_.brake_status__511_ = p;
  }
  return _impl_.brake_status__511_;
}
inline ::apollo::canbus::Brake_status__511* Ch::mutable_brake_status__511() {
  ::apollo::canbus::Brake_status__511* _msg = _internal_mutable_brake_status__511();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.brake_status__511)
  return _msg;
}
inline void Ch::set_allocated_brake_status__511(::apollo::canbus::Brake_status__511* brake_status__511) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.brake_status__511_;
  }
  if (brake_status__511) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(brake_status__511);
    if (message_arena != submessage_arena) {
      brake_status__511 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_status__511, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.brake_status__511_ = brake_status__511;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.brake_status__511)
}

// optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
inline bool Ch::_internal_has_throttle_status__510() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.throttle_status__510_ != nullptr);
  return value;
}
inline bool Ch::has_throttle_status__510() const {
  return _internal_has_throttle_status__510();
}
inline void Ch::clear_throttle_status__510() {
  if (_impl_.throttle_status__510_ != nullptr) _impl_.throttle_status__510_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Throttle_status__510& Ch::_internal_throttle_status__510() const {
  const ::apollo::canbus::Throttle_status__510* p = _impl_.throttle_status__510_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Throttle_status__510&>(
      ::apollo::canbus::_Throttle_status__510_default_instance_);
}
inline const ::apollo::canbus::Throttle_status__510& Ch::throttle_status__510() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.throttle_status__510)
  return _internal_throttle_status__510();
}
inline void Ch::unsafe_arena_set_allocated_throttle_status__510(
    ::apollo::canbus::Throttle_status__510* throttle_status__510) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_status__510_);
  }
  _impl_.throttle_status__510_ = throttle_status__510;
  if (throttle_status__510) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.throttle_status__510)
}
inline ::apollo::canbus::Throttle_status__510* Ch::release_throttle_status__510() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Throttle_status__510* temp = _impl_.throttle_status__510_;
  _impl_.throttle_status__510_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Throttle_status__510* Ch::unsafe_arena_release_throttle_status__510() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.throttle_status__510)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Throttle_status__510* temp = _impl_.throttle_status__510_;
  _impl_.throttle_status__510_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Throttle_status__510* Ch::_internal_mutable_throttle_status__510() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.throttle_status__510_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Throttle_status__510>(GetArenaForAllocation());
    _impl_.throttle_status__510_ = p;
  }
  return _impl_.throttle_status__510_;
}
inline ::apollo::canbus::Throttle_status__510* Ch::mutable_throttle_status__510() {
  ::apollo::canbus::Throttle_status__510* _msg = _internal_mutable_throttle_status__510();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.throttle_status__510)
  return _msg;
}
inline void Ch::set_allocated_throttle_status__510(::apollo::canbus::Throttle_status__510* throttle_status__510) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.throttle_status__510_;
  }
  if (throttle_status__510) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_status__510);
    if (message_arena != submessage_arena) {
      throttle_status__510 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_status__510, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.throttle_status__510_ = throttle_status__510;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.throttle_status__510)
}

// optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
inline bool Ch::_internal_has_turnsignal_status__513() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.turnsignal_status__513_ != nullptr);
  return value;
}
inline bool Ch::has_turnsignal_status__513() const {
  return _internal_has_turnsignal_status__513();
}
inline void Ch::clear_turnsignal_status__513() {
  if (_impl_.turnsignal_status__513_ != nullptr) _impl_.turnsignal_status__513_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Turnsignal_status__513& Ch::_internal_turnsignal_status__513() const {
  const ::apollo::canbus::Turnsignal_status__513* p = _impl_.turnsignal_status__513_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Turnsignal_status__513&>(
      ::apollo::canbus::_Turnsignal_status__513_default_instance_);
}
inline const ::apollo::canbus::Turnsignal_status__513& Ch::turnsignal_status__513() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.turnsignal_status__513)
  return _internal_turnsignal_status__513();
}
inline void Ch::unsafe_arena_set_allocated_turnsignal_status__513(
    ::apollo::canbus::Turnsignal_status__513* turnsignal_status__513) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.turnsignal_status__513_);
  }
  _impl_.turnsignal_status__513_ = turnsignal_status__513;
  if (turnsignal_status__513) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.turnsignal_status__513)
}
inline ::apollo::canbus::Turnsignal_status__513* Ch::release_turnsignal_status__513() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Turnsignal_status__513* temp = _impl_.turnsignal_status__513_;
  _impl_.turnsignal_status__513_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Turnsignal_status__513* Ch::unsafe_arena_release_turnsignal_status__513() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.turnsignal_status__513)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Turnsignal_status__513* temp = _impl_.turnsignal_status__513_;
  _impl_.turnsignal_status__513_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Turnsignal_status__513* Ch::_internal_mutable_turnsignal_status__513() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.turnsignal_status__513_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Turnsignal_status__513>(GetArenaForAllocation());
    _impl_.turnsignal_status__513_ = p;
  }
  return _impl_.turnsignal_status__513_;
}
inline ::apollo::canbus::Turnsignal_status__513* Ch::mutable_turnsignal_status__513() {
  ::apollo::canbus::Turnsignal_status__513* _msg = _internal_mutable_turnsignal_status__513();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.turnsignal_status__513)
  return _msg;
}
inline void Ch::set_allocated_turnsignal_status__513(::apollo::canbus::Turnsignal_status__513* turnsignal_status__513) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.turnsignal_status__513_;
  }
  if (turnsignal_status__513) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(turnsignal_status__513);
    if (message_arena != submessage_arena) {
      turnsignal_status__513 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turnsignal_status__513, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.turnsignal_status__513_ = turnsignal_status__513;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.turnsignal_status__513)
}

// optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
inline bool Ch::_internal_has_steer_status__512() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steer_status__512_ != nullptr);
  return value;
}
inline bool Ch::has_steer_status__512() const {
  return _internal_has_steer_status__512();
}
inline void Ch::clear_steer_status__512() {
  if (_impl_.steer_status__512_ != nullptr) _impl_.steer_status__512_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Steer_status__512& Ch::_internal_steer_status__512() const {
  const ::apollo::canbus::Steer_status__512* p = _impl_.steer_status__512_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Steer_status__512&>(
      ::apollo::canbus::_Steer_status__512_default_instance_);
}
inline const ::apollo::canbus::Steer_status__512& Ch::steer_status__512() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.steer_status__512)
  return _internal_steer_status__512();
}
inline void Ch::unsafe_arena_set_allocated_steer_status__512(
    ::apollo::canbus::Steer_status__512* steer_status__512) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steer_status__512_);
  }
  _impl_.steer_status__512_ = steer_status__512;
  if (steer_status__512) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.steer_status__512)
}
inline ::apollo::canbus::Steer_status__512* Ch::release_steer_status__512() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Steer_status__512* temp = _impl_.steer_status__512_;
  _impl_.steer_status__512_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Steer_status__512* Ch::unsafe_arena_release_steer_status__512() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.steer_status__512)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Steer_status__512* temp = _impl_.steer_status__512_;
  _impl_.steer_status__512_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steer_status__512* Ch::_internal_mutable_steer_status__512() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.steer_status__512_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steer_status__512>(GetArenaForAllocation());
    _impl_.steer_status__512_ = p;
  }
  return _impl_.steer_status__512_;
}
inline ::apollo::canbus::Steer_status__512* Ch::mutable_steer_status__512() {
  ::apollo::canbus::Steer_status__512* _msg = _internal_mutable_steer_status__512();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.steer_status__512)
  return _msg;
}
inline void Ch::set_allocated_steer_status__512(::apollo::canbus::Steer_status__512* steer_status__512) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.steer_status__512_;
  }
  if (steer_status__512) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(steer_status__512);
    if (message_arena != submessage_arena) {
      steer_status__512 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_status__512, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.steer_status__512_ = steer_status__512;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.steer_status__512)
}

// optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
inline bool Ch::_internal_has_ecu_status_1_515() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ecu_status_1_515_ != nullptr);
  return value;
}
inline bool Ch::has_ecu_status_1_515() const {
  return _internal_has_ecu_status_1_515();
}
inline void Ch::clear_ecu_status_1_515() {
  if (_impl_.ecu_status_1_515_ != nullptr) _impl_.ecu_status_1_515_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Ecu_status_1_515& Ch::_internal_ecu_status_1_515() const {
  const ::apollo::canbus::Ecu_status_1_515* p = _impl_.ecu_status_1_515_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ecu_status_1_515&>(
      ::apollo::canbus::_Ecu_status_1_515_default_instance_);
}
inline const ::apollo::canbus::Ecu_status_1_515& Ch::ecu_status_1_515() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.ecu_status_1_515)
  return _internal_ecu_status_1_515();
}
inline void Ch::unsafe_arena_set_allocated_ecu_status_1_515(
    ::apollo::canbus::Ecu_status_1_515* ecu_status_1_515) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ecu_status_1_515_);
  }
  _impl_.ecu_status_1_515_ = ecu_status_1_515;
  if (ecu_status_1_515) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.ecu_status_1_515)
}
inline ::apollo::canbus::Ecu_status_1_515* Ch::release_ecu_status_1_515() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Ecu_status_1_515* temp = _impl_.ecu_status_1_515_;
  _impl_.ecu_status_1_515_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ecu_status_1_515* Ch::unsafe_arena_release_ecu_status_1_515() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.ecu_status_1_515)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Ecu_status_1_515* temp = _impl_.ecu_status_1_515_;
  _impl_.ecu_status_1_515_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ecu_status_1_515* Ch::_internal_mutable_ecu_status_1_515() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.ecu_status_1_515_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ecu_status_1_515>(GetArenaForAllocation());
    _impl_.ecu_status_1_515_ = p;
  }
  return _impl_.ecu_status_1_515_;
}
inline ::apollo::canbus::Ecu_status_1_515* Ch::mutable_ecu_status_1_515() {
  ::apollo::canbus::Ecu_status_1_515* _msg = _internal_mutable_ecu_status_1_515();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.ecu_status_1_515)
  return _msg;
}
inline void Ch::set_allocated_ecu_status_1_515(::apollo::canbus::Ecu_status_1_515* ecu_status_1_515) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ecu_status_1_515_;
  }
  if (ecu_status_1_515) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ecu_status_1_515);
    if (message_arena != submessage_arena) {
      ecu_status_1_515 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecu_status_1_515, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.ecu_status_1_515_ = ecu_status_1_515;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.ecu_status_1_515)
}

// optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
inline bool Ch::_internal_has_gear_status_514() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gear_status_514_ != nullptr);
  return value;
}
inline bool Ch::has_gear_status_514() const {
  return _internal_has_gear_status_514();
}
inline void Ch::clear_gear_status_514() {
  if (_impl_.gear_status_514_ != nullptr) _impl_.gear_status_514_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Gear_status_514& Ch::_internal_gear_status_514() const {
  const ::apollo::canbus::Gear_status_514* p = _impl_.gear_status_514_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Gear_status_514&>(
      ::apollo::canbus::_Gear_status_514_default_instance_);
}
inline const ::apollo::canbus::Gear_status_514& Ch::gear_status_514() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.gear_status_514)
  return _internal_gear_status_514();
}
inline void Ch::unsafe_arena_set_allocated_gear_status_514(
    ::apollo::canbus::Gear_status_514* gear_status_514) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_status_514_);
  }
  _impl_.gear_status_514_ = gear_status_514;
  if (gear_status_514) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.gear_status_514)
}
inline ::apollo::canbus::Gear_status_514* Ch::release_gear_status_514() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Gear_status_514* temp = _impl_.gear_status_514_;
  _impl_.gear_status_514_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Gear_status_514* Ch::unsafe_arena_release_gear_status_514() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.gear_status_514)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Gear_status_514* temp = _impl_.gear_status_514_;
  _impl_.gear_status_514_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Gear_status_514* Ch::_internal_mutable_gear_status_514() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.gear_status_514_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Gear_status_514>(GetArenaForAllocation());
    _impl_.gear_status_514_ = p;
  }
  return _impl_.gear_status_514_;
}
inline ::apollo::canbus::Gear_status_514* Ch::mutable_gear_status_514() {
  ::apollo::canbus::Gear_status_514* _msg = _internal_mutable_gear_status_514();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.gear_status_514)
  return _msg;
}
inline void Ch::set_allocated_gear_status_514(::apollo::canbus::Gear_status_514* gear_status_514) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gear_status_514_;
  }
  if (gear_status_514) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gear_status_514);
    if (message_arena != submessage_arena) {
      gear_status_514 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear_status_514, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.gear_status_514_ = gear_status_514;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.gear_status_514)
}

// optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
inline bool Ch::_internal_has_ecu_status_3_517() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ecu_status_3_517_ != nullptr);
  return value;
}
inline bool Ch::has_ecu_status_3_517() const {
  return _internal_has_ecu_status_3_517();
}
inline void Ch::clear_ecu_status_3_517() {
  if (_impl_.ecu_status_3_517_ != nullptr) _impl_.ecu_status_3_517_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::canbus::Ecu_status_3_517& Ch::_internal_ecu_status_3_517() const {
  const ::apollo::canbus::Ecu_status_3_517* p = _impl_.ecu_status_3_517_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ecu_status_3_517&>(
      ::apollo::canbus::_Ecu_status_3_517_default_instance_);
}
inline const ::apollo::canbus::Ecu_status_3_517& Ch::ecu_status_3_517() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.ecu_status_3_517)
  return _internal_ecu_status_3_517();
}
inline void Ch::unsafe_arena_set_allocated_ecu_status_3_517(
    ::apollo::canbus::Ecu_status_3_517* ecu_status_3_517) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ecu_status_3_517_);
  }
  _impl_.ecu_status_3_517_ = ecu_status_3_517;
  if (ecu_status_3_517) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.ecu_status_3_517)
}
inline ::apollo::canbus::Ecu_status_3_517* Ch::release_ecu_status_3_517() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Ecu_status_3_517* temp = _impl_.ecu_status_3_517_;
  _impl_.ecu_status_3_517_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ecu_status_3_517* Ch::unsafe_arena_release_ecu_status_3_517() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.ecu_status_3_517)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Ecu_status_3_517* temp = _impl_.ecu_status_3_517_;
  _impl_.ecu_status_3_517_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ecu_status_3_517* Ch::_internal_mutable_ecu_status_3_517() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.ecu_status_3_517_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ecu_status_3_517>(GetArenaForAllocation());
    _impl_.ecu_status_3_517_ = p;
  }
  return _impl_.ecu_status_3_517_;
}
inline ::apollo::canbus::Ecu_status_3_517* Ch::mutable_ecu_status_3_517() {
  ::apollo::canbus::Ecu_status_3_517* _msg = _internal_mutable_ecu_status_3_517();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.ecu_status_3_517)
  return _msg;
}
inline void Ch::set_allocated_ecu_status_3_517(::apollo::canbus::Ecu_status_3_517* ecu_status_3_517) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ecu_status_3_517_;
  }
  if (ecu_status_3_517) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ecu_status_3_517);
    if (message_arena != submessage_arena) {
      ecu_status_3_517 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecu_status_3_517, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.ecu_status_3_517_ = ecu_status_3_517;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.ecu_status_3_517)
}

// optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
inline bool Ch::_internal_has_ecu_status_2_516() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ecu_status_2_516_ != nullptr);
  return value;
}
inline bool Ch::has_ecu_status_2_516() const {
  return _internal_has_ecu_status_2_516();
}
inline void Ch::clear_ecu_status_2_516() {
  if (_impl_.ecu_status_2_516_ != nullptr) _impl_.ecu_status_2_516_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::canbus::Ecu_status_2_516& Ch::_internal_ecu_status_2_516() const {
  const ::apollo::canbus::Ecu_status_2_516* p = _impl_.ecu_status_2_516_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ecu_status_2_516&>(
      ::apollo::canbus::_Ecu_status_2_516_default_instance_);
}
inline const ::apollo::canbus::Ecu_status_2_516& Ch::ecu_status_2_516() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ch.ecu_status_2_516)
  return _internal_ecu_status_2_516();
}
inline void Ch::unsafe_arena_set_allocated_ecu_status_2_516(
    ::apollo::canbus::Ecu_status_2_516* ecu_status_2_516) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ecu_status_2_516_);
  }
  _impl_.ecu_status_2_516_ = ecu_status_2_516;
  if (ecu_status_2_516) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Ch.ecu_status_2_516)
}
inline ::apollo::canbus::Ecu_status_2_516* Ch::release_ecu_status_2_516() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Ecu_status_2_516* temp = _impl_.ecu_status_2_516_;
  _impl_.ecu_status_2_516_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ecu_status_2_516* Ch::unsafe_arena_release_ecu_status_2_516() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ch.ecu_status_2_516)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Ecu_status_2_516* temp = _impl_.ecu_status_2_516_;
  _impl_.ecu_status_2_516_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ecu_status_2_516* Ch::_internal_mutable_ecu_status_2_516() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.ecu_status_2_516_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ecu_status_2_516>(GetArenaForAllocation());
    _impl_.ecu_status_2_516_ = p;
  }
  return _impl_.ecu_status_2_516_;
}
inline ::apollo::canbus::Ecu_status_2_516* Ch::mutable_ecu_status_2_516() {
  ::apollo::canbus::Ecu_status_2_516* _msg = _internal_mutable_ecu_status_2_516();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ch.ecu_status_2_516)
  return _msg;
}
inline void Ch::set_allocated_ecu_status_2_516(::apollo::canbus::Ecu_status_2_516* ecu_status_2_516) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ecu_status_2_516_;
  }
  if (ecu_status_2_516) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ecu_status_2_516);
    if (message_arena != submessage_arena) {
      ecu_status_2_516 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecu_status_2_516, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.ecu_status_2_516_ = ecu_status_2_516;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ch.ecu_status_2_516)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Control_command_115_Ctrl_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Control_command_115_Ctrl_cmdType>() {
  return ::apollo::canbus::Control_command_115_Ctrl_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_command_114_Gear_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_command_114_Gear_cmdType>() {
  return ::apollo::canbus::Gear_command_114_Gear_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType>() {
  return ::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType>() {
  return ::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType>() {
  return ::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType>() {
  return ::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType>() {
  return ::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Brake_errType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Brake_errType>() {
  return ::apollo::canbus::Brake_status__511_Brake_errType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Emergency_btn_envType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Emergency_btn_envType>() {
  return ::apollo::canbus::Brake_status__511_Emergency_btn_envType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Front_bump_envType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Front_bump_envType>() {
  return ::apollo::canbus::Brake_status__511_Front_bump_envType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Back_bump_envType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Back_bump_envType>() {
  return ::apollo::canbus::Brake_status__511_Back_bump_envType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_status__511_Overspd_envType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_status__511_Overspd_envType>() {
  return ::apollo::canbus::Brake_status__511_Overspd_envType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType>() {
  return ::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_status__510_Drive_motor_errType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_status__510_Drive_motor_errType>() {
  return ::apollo::canbus::Throttle_status__510_Drive_motor_errType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_status__510_Battery_bms_errType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_status__510_Battery_bms_errType>() {
  return ::apollo::canbus::Throttle_status__510_Battery_bms_errType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType>() {
  return ::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType>() {
  return ::apollo::canbus::Steer_status__512_Steer_angle_en_stsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steer_status__512_Steer_errType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steer_status__512_Steer_errType>() {
  return ::apollo::canbus::Steer_status__512_Steer_errType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steer_status__512_Sensor_errType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steer_status__512_Sensor_errType>() {
  return ::apollo::canbus::Steer_status__512_Sensor_errType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType>() {
  return ::apollo::canbus::Ecu_status_1_515_Ctrl_stsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_status_514_Gear_stsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_status_514_Gear_stsType>() {
  return ::apollo::canbus::Gear_status_514_Gear_stsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fch_2eproto
