// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/canbus_conf.proto

#include "modules/canbus/proto/canbus_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR CanbusConf::CanbusConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_parameter_)*/nullptr
  , /*decltype(_impl_.can_card_parameter_)*/nullptr
  , /*decltype(_impl_.enable_debug_mode_)*/false
  , /*decltype(_impl_.enable_receiver_log_)*/false
  , /*decltype(_impl_.enable_sender_log_)*/false} {}
struct CanbusConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanbusConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanbusConfDefaultTypeInternal() {}
  union {
    CanbusConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanbusConfDefaultTypeInternal _CanbusConf_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_.vehicle_parameter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_.can_card_parameter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_.enable_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_.enable_receiver_log_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CanbusConf, _impl_.enable_sender_log_),
  0,
  1,
  2,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::canbus::CanbusConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_CanbusConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/canbus/proto/canbus_conf.proto"
  "\022\rapollo.canbus\0325modules/drivers/canbus/"
  "proto/can_card_parameter.proto\032,modules/"
  "canbus/proto/vehicle_parameter.proto\"\365\001\n"
  "\nCanbusConf\022:\n\021vehicle_parameter\030\001 \001(\0132\037"
  ".apollo.canbus.VehicleParameter\022C\n\022can_c"
  "ard_parameter\030\002 \001(\0132\'.apollo.drivers.can"
  "bus.CANCardParameter\022 \n\021enable_debug_mod"
  "e\030\003 \001(\010:\005false\022\"\n\023enable_receiver_log\030\004 "
  "\001(\010:\005false\022 \n\021enable_sender_log\030\005 \001(\010:\005f"
  "alse"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto,
  &::descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto = {
    false, false, 404, descriptor_table_protodef_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto,
    "modules/canbus/proto/canbus_conf.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto);
namespace apollo {
namespace canbus {

// ===================================================================

class CanbusConf::_Internal {
 public:
  using HasBits = decltype(std::declval<CanbusConf>()._impl_._has_bits_);
  static const ::apollo::canbus::VehicleParameter& vehicle_parameter(const CanbusConf* msg);
  static void set_has_vehicle_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::canbus::CANCardParameter& can_card_parameter(const CanbusConf* msg);
  static void set_has_can_card_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_debug_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_receiver_log(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_sender_log(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::canbus::VehicleParameter&
CanbusConf::_Internal::vehicle_parameter(const CanbusConf* msg) {
  return *msg->_impl_.vehicle_parameter_;
}
const ::apollo::drivers::canbus::CANCardParameter&
CanbusConf::_Internal::can_card_parameter(const CanbusConf* msg) {
  return *msg->_impl_.can_card_parameter_;
}
void CanbusConf::clear_vehicle_parameter() {
  if (_impl_.vehicle_parameter_ != nullptr) _impl_.vehicle_parameter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CanbusConf::clear_can_card_parameter() {
  if (_impl_.can_card_parameter_ != nullptr) _impl_.can_card_parameter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CanbusConf::CanbusConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.CanbusConf)
}
CanbusConf::CanbusConf(const CanbusConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_parameter_){nullptr}
    , decltype(_impl_.can_card_parameter_){nullptr}
    , decltype(_impl_.enable_debug_mode_){}
    , decltype(_impl_.enable_receiver_log_){}
    , decltype(_impl_.enable_sender_log_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_parameter()) {
    _impl_.vehicle_parameter_ = new ::apollo::canbus::VehicleParameter(*from._impl_.vehicle_parameter_);
  }
  if (from._internal_has_can_card_parameter()) {
    _impl_.can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter(*from._impl_.can_card_parameter_);
  }
  ::memcpy(&_impl_.enable_debug_mode_, &from._impl_.enable_debug_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_sender_log_) -
    reinterpret_cast<char*>(&_impl_.enable_debug_mode_)) + sizeof(_impl_.enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CanbusConf)
}

inline void CanbusConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_parameter_){nullptr}
    , decltype(_impl_.can_card_parameter_){nullptr}
    , decltype(_impl_.enable_debug_mode_){false}
    , decltype(_impl_.enable_receiver_log_){false}
    , decltype(_impl_.enable_sender_log_){false}
  };
}

CanbusConf::~CanbusConf() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CanbusConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanbusConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vehicle_parameter_;
  if (this != internal_default_instance()) delete _impl_.can_card_parameter_;
}

void CanbusConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanbusConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CanbusConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.vehicle_parameter_ != nullptr);
      _impl_.vehicle_parameter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.can_card_parameter_ != nullptr);
      _impl_.can_card_parameter_->Clear();
    }
  }
  ::memset(&_impl_.enable_debug_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_sender_log_) -
      reinterpret_cast<char*>(&_impl_.enable_debug_mode_)) + sizeof(_impl_.enable_sender_log_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanbusConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.VehicleParameter vehicle_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_parameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_card_parameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_debug_mode = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_debug_mode(&has_bits);
          _impl_.enable_debug_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_receiver_log = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_receiver_log(&has_bits);
          _impl_.enable_receiver_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_sender_log = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable_sender_log(&has_bits);
          _impl_.enable_sender_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanbusConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CanbusConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.VehicleParameter vehicle_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vehicle_parameter(this),
        _Internal::vehicle_parameter(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::can_card_parameter(this),
        _Internal::can_card_parameter(this).GetCachedSize(), target, stream);
  }

  // optional bool enable_debug_mode = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_sender_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CanbusConf)
  return target;
}

size_t CanbusConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CanbusConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.VehicleParameter vehicle_parameter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_parameter_);
    }

    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.can_card_parameter_);
    }

    // optional bool enable_debug_mode = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanbusConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanbusConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanbusConf::GetClassData() const { return &_class_data_; }

void CanbusConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanbusConf *>(to)->MergeFrom(
      static_cast<const CanbusConf &>(from));
}


void CanbusConf::MergeFrom(const CanbusConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CanbusConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle_parameter()->::apollo::canbus::VehicleParameter::MergeFrom(from._internal_vehicle_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from._internal_can_card_parameter());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.enable_debug_mode_ = from._impl_.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_receiver_log_ = from._impl_.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.enable_sender_log_ = from._impl_.enable_sender_log_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanbusConf::CopyFrom(const CanbusConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CanbusConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanbusConf::IsInitialized() const {
  return true;
}

void CanbusConf::InternalSwap(CanbusConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanbusConf, _impl_.enable_sender_log_)
      + sizeof(CanbusConf::_impl_.enable_sender_log_)
      - PROTOBUF_FIELD_OFFSET(CanbusConf, _impl_.vehicle_parameter_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_parameter_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_parameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanbusConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::CanbusConf*
Arena::CreateMaybeMessage< ::apollo::canbus::CanbusConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::CanbusConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
