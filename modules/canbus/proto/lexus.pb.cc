// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/lexus.proto

#include "modules/canbus/proto/lexus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR Hazard_lights_rpt_214::Hazard_lights_rpt_214(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/false
  , /*decltype(_impl_.commanded_value_)*/false
  , /*decltype(_impl_.manual_input_)*/false
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false} {}
struct Hazard_lights_rpt_214DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Hazard_lights_rpt_214DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Hazard_lights_rpt_214DefaultTypeInternal() {}
  union {
    Hazard_lights_rpt_214 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Hazard_lights_rpt_214DefaultTypeInternal _Hazard_lights_rpt_214_default_instance_;
PROTOBUF_CONSTEXPR Steering_cmd_12c::Steering_cmd_12c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.rotation_rate_)*/0
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Steering_cmd_12cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_cmd_12cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_cmd_12cDefaultTypeInternal() {}
  union {
    Steering_cmd_12c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_cmd_12cDefaultTypeInternal _Steering_cmd_12c_default_instance_;
PROTOBUF_CONSTEXPR Dash_controls_right_rpt_210::Dash_controls_right_rpt_210(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.manual_input_)*/0} {}
struct Dash_controls_right_rpt_210DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dash_controls_right_rpt_210DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dash_controls_right_rpt_210DefaultTypeInternal() {}
  union {
    Dash_controls_right_rpt_210 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dash_controls_right_rpt_210DefaultTypeInternal _Dash_controls_right_rpt_210_default_instance_;
PROTOBUF_CONSTEXPR Dash_controls_left_cmd_10c::Dash_controls_left_cmd_10c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.dash_controls_button_)*/0} {}
struct Dash_controls_left_cmd_10cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dash_controls_left_cmd_10cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dash_controls_left_cmd_10cDefaultTypeInternal() {}
  union {
    Dash_controls_left_cmd_10c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dash_controls_left_cmd_10cDefaultTypeInternal _Dash_controls_left_cmd_10c_default_instance_;
PROTOBUF_CONSTEXPR Steering_rpt_22c::Steering_rpt_22c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Steering_rpt_22cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_rpt_22cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_rpt_22cDefaultTypeInternal() {}
  union {
    Steering_rpt_22c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_rpt_22cDefaultTypeInternal _Steering_rpt_22c_default_instance_;
PROTOBUF_CONSTEXPR Turn_aux_rpt_330::Turn_aux_rpt_330(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pass_blinker_bulb_on_is_valid_)*/false
  , /*decltype(_impl_.pass_blinker_bulb_on_)*/false
  , /*decltype(_impl_.driver_blinker_bulb_on_is_valid_)*/false
  , /*decltype(_impl_.driver_blinker_bulb_on_)*/false} {}
struct Turn_aux_rpt_330DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turn_aux_rpt_330DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turn_aux_rpt_330DefaultTypeInternal() {}
  union {
    Turn_aux_rpt_330 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turn_aux_rpt_330DefaultTypeInternal _Turn_aux_rpt_330_default_instance_;
PROTOBUF_CONSTEXPR Headlight_rpt_218::Headlight_rpt_218(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0} {}
struct Headlight_rpt_218DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Headlight_rpt_218DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Headlight_rpt_218DefaultTypeInternal() {}
  union {
    Headlight_rpt_218 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Headlight_rpt_218DefaultTypeInternal _Headlight_rpt_218_default_instance_;
PROTOBUF_CONSTEXPR Hazard_lights_cmd_114::Hazard_lights_cmd_114(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hazard_lights_cmd_)*/false
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Hazard_lights_cmd_114DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Hazard_lights_cmd_114DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Hazard_lights_cmd_114DefaultTypeInternal() {}
  union {
    Hazard_lights_cmd_114 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Hazard_lights_cmd_114DefaultTypeInternal _Hazard_lights_cmd_114_default_instance_;
PROTOBUF_CONSTEXPR Dash_controls_left_rpt_20c::Dash_controls_left_rpt_20c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false} {}
struct Dash_controls_left_rpt_20cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dash_controls_left_rpt_20cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dash_controls_left_rpt_20cDefaultTypeInternal() {}
  union {
    Dash_controls_left_rpt_20c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dash_controls_left_rpt_20cDefaultTypeInternal _Dash_controls_left_rpt_20c_default_instance_;
PROTOBUF_CONSTEXPR Headlight_aux_rpt_318::Headlight_aux_rpt_318(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headlights_mode_)*/0
  , /*decltype(_impl_.headlights_mode_is_valid_)*/false
  , /*decltype(_impl_.fog_lights_on_is_valid_)*/false
  , /*decltype(_impl_.fog_lights_on_)*/false
  , /*decltype(_impl_.headlights_on_bright_is_valid_)*/false
  , /*decltype(_impl_.headlights_on_bright_)*/false
  , /*decltype(_impl_.headlights_on_is_valid_)*/false
  , /*decltype(_impl_.headlights_on_)*/false} {}
struct Headlight_aux_rpt_318DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Headlight_aux_rpt_318DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Headlight_aux_rpt_318DefaultTypeInternal() {}
  union {
    Headlight_aux_rpt_318 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Headlight_aux_rpt_318DefaultTypeInternal _Headlight_aux_rpt_318_default_instance_;
PROTOBUF_CONSTEXPR Dash_controls_right_cmd_110::Dash_controls_right_cmd_110(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.dash_controls_button_)*/0} {}
struct Dash_controls_right_cmd_110DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dash_controls_right_cmd_110DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dash_controls_right_cmd_110DefaultTypeInternal() {}
  union {
    Dash_controls_right_cmd_110 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dash_controls_right_cmd_110DefaultTypeInternal _Dash_controls_right_cmd_110_default_instance_;
PROTOBUF_CONSTEXPR Wiper_cmd_134::Wiper_cmd_134(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.wiper_cmd_)*/0} {}
struct Wiper_cmd_134DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wiper_cmd_134DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wiper_cmd_134DefaultTypeInternal() {}
  union {
    Wiper_cmd_134 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wiper_cmd_134DefaultTypeInternal _Wiper_cmd_134_default_instance_;
PROTOBUF_CONSTEXPR Wiper_rpt_234::Wiper_rpt_234(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0} {}
struct Wiper_rpt_234DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wiper_rpt_234DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wiper_rpt_234DefaultTypeInternal() {}
  union {
    Wiper_rpt_234 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wiper_rpt_234DefaultTypeInternal _Wiper_rpt_234_default_instance_;
PROTOBUF_CONSTEXPR Turn_rpt_230::Turn_rpt_230(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Turn_rpt_230DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turn_rpt_230DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turn_rpt_230DefaultTypeInternal() {}
  union {
    Turn_rpt_230 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turn_rpt_230DefaultTypeInternal _Turn_rpt_230_default_instance_;
PROTOBUF_CONSTEXPR Headlight_cmd_118::Headlight_cmd_118(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.headlight_cmd_)*/0} {}
struct Headlight_cmd_118DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Headlight_cmd_118DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Headlight_cmd_118DefaultTypeInternal() {}
  union {
    Headlight_cmd_118 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Headlight_cmd_118DefaultTypeInternal _Headlight_cmd_118_default_instance_;
PROTOBUF_CONSTEXPR Door_rpt_417::Door_rpt_417(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fuel_door_open_is_valid_)*/false
  , /*decltype(_impl_.trunk_open_is_valid_)*/false
  , /*decltype(_impl_.hood_open_is_valid_)*/false
  , /*decltype(_impl_.rear_pass_door_open_is_valid_)*/false
  , /*decltype(_impl_.rear_driver_door_open_is_valid_)*/false
  , /*decltype(_impl_.pass_door_open_is_valid_)*/false
  , /*decltype(_impl_.driver_door_open_is_valid_)*/false
  , /*decltype(_impl_.fuel_door_open_)*/false
  , /*decltype(_impl_.trunk_open_)*/false
  , /*decltype(_impl_.hood_open_)*/false
  , /*decltype(_impl_.rear_pass_door_open_)*/false
  , /*decltype(_impl_.rear_driver_door_open_)*/false
  , /*decltype(_impl_.pass_door_open_)*/false
  , /*decltype(_impl_.driver_door_open_)*/false} {}
struct Door_rpt_417DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Door_rpt_417DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Door_rpt_417DefaultTypeInternal() {}
  union {
    Door_rpt_417 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Door_rpt_417DefaultTypeInternal _Door_rpt_417_default_instance_;
PROTOBUF_CONSTEXPR Component_rpt_20::Component_rpt_20(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_type_)*/0
  , /*decltype(_impl_.component_func_)*/0
  , /*decltype(_impl_.counter_)*/0
  , /*decltype(_impl_.complement_)*/0
  , /*decltype(_impl_.config_fault_)*/false} {}
struct Component_rpt_20DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Component_rpt_20DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Component_rpt_20DefaultTypeInternal() {}
  union {
    Component_rpt_20 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Component_rpt_20DefaultTypeInternal _Component_rpt_20_default_instance_;
PROTOBUF_CONSTEXPR Wheel_speed_rpt_407::Wheel_speed_rpt_407(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wheel_spd_rear_right_)*/0
  , /*decltype(_impl_.wheel_spd_rear_left_)*/0
  , /*decltype(_impl_.wheel_spd_front_right_)*/0
  , /*decltype(_impl_.wheel_spd_front_left_)*/0} {}
struct Wheel_speed_rpt_407DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wheel_speed_rpt_407DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wheel_speed_rpt_407DefaultTypeInternal() {}
  union {
    Wheel_speed_rpt_407 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wheel_speed_rpt_407DefaultTypeInternal _Wheel_speed_rpt_407_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_3_406::Steering_motor_rpt_3_406(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.torque_output_)*/0
  , /*decltype(_impl_.torque_input_)*/0} {}
struct Steering_motor_rpt_3_406DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_3_406DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_3_406DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_3_406 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_3_406DefaultTypeInternal _Steering_motor_rpt_3_406_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_2_405::Steering_motor_rpt_2_405(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encoder_temperature_)*/0
  , /*decltype(_impl_.motor_temperature_)*/0
  , /*decltype(_impl_.angular_speed_)*/0} {}
struct Steering_motor_rpt_2_405DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_2_405DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_2_405DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_2_405 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_2_405DefaultTypeInternal _Steering_motor_rpt_2_405_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_1_404::Steering_motor_rpt_1_404(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motor_current_)*/0
  , /*decltype(_impl_.shaft_position_)*/0} {}
struct Steering_motor_rpt_1_404DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_1_404DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_1_404DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_1_404 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_1_404DefaultTypeInternal _Steering_motor_rpt_1_404_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_3_403::Brake_motor_rpt_3_403(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.torque_output_)*/0
  , /*decltype(_impl_.torque_input_)*/0} {}
struct Brake_motor_rpt_3_403DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_3_403DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_3_403DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_3_403 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_3_403DefaultTypeInternal _Brake_motor_rpt_3_403_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_2_402::Brake_motor_rpt_2_402(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encoder_temperature_)*/0
  , /*decltype(_impl_.motor_temperature_)*/0
  , /*decltype(_impl_.angular_speed_)*/0} {}
struct Brake_motor_rpt_2_402DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_2_402DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_2_402DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_2_402 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_2_402DefaultTypeInternal _Brake_motor_rpt_2_402_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_1_401::Brake_motor_rpt_1_401(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motor_current_)*/0
  , /*decltype(_impl_.shaft_position_)*/0} {}
struct Brake_motor_rpt_1_401DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_1_401DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_1_401DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_1_401 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_1_401DefaultTypeInternal _Brake_motor_rpt_1_401_default_instance_;
PROTOBUF_CONSTEXPR Wiper_aux_rpt_334::Wiper_aux_rpt_334(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spray_empty_is_valid_)*/false
  , /*decltype(_impl_.spray_empty_)*/false
  , /*decltype(_impl_.spray_near_empty_is_valid_)*/false
  , /*decltype(_impl_.spray_near_empty_)*/false
  , /*decltype(_impl_.rear_spraying_is_valid_)*/false
  , /*decltype(_impl_.rear_spraying_)*/false
  , /*decltype(_impl_.rear_wiping_is_valid_)*/false
  , /*decltype(_impl_.rear_wiping_)*/false
  , /*decltype(_impl_.front_spraying_is_valid_)*/false
  , /*decltype(_impl_.front_spraying_)*/false
  , /*decltype(_impl_.front_wiping_is_valid_)*/false
  , /*decltype(_impl_.front_wiping_)*/false} {}
struct Wiper_aux_rpt_334DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wiper_aux_rpt_334DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wiper_aux_rpt_334DefaultTypeInternal() {}
  union {
    Wiper_aux_rpt_334 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wiper_aux_rpt_334DefaultTypeInternal _Wiper_aux_rpt_334_default_instance_;
PROTOBUF_CONSTEXPR Shift_aux_rpt_328::Shift_aux_rpt_328(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.speed_interlock_active_is_valid_)*/false
  , /*decltype(_impl_.speed_interlock_active_)*/false
  , /*decltype(_impl_.brake_interlock_active_is_valid_)*/false
  , /*decltype(_impl_.brake_interlock_active_)*/false
  , /*decltype(_impl_.stay_in_neutral_mode_is_valid_)*/false
  , /*decltype(_impl_.stay_in_neutral_mode_)*/false
  , /*decltype(_impl_.between_gears_is_valid_)*/false
  , /*decltype(_impl_.between_gears_)*/false} {}
struct Shift_aux_rpt_328DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Shift_aux_rpt_328DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Shift_aux_rpt_328DefaultTypeInternal() {}
  union {
    Shift_aux_rpt_328 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Shift_aux_rpt_328DefaultTypeInternal _Shift_aux_rpt_328_default_instance_;
PROTOBUF_CONSTEXPR Accel_rpt_200::Accel_rpt_200(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Accel_rpt_200DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Accel_rpt_200DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Accel_rpt_200DefaultTypeInternal() {}
  union {
    Accel_rpt_200 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Accel_rpt_200DefaultTypeInternal _Accel_rpt_200_default_instance_;
PROTOBUF_CONSTEXPR Brake_rpt_204::Brake_rpt_204(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Brake_rpt_204DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_rpt_204DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_rpt_204DefaultTypeInternal() {}
  union {
    Brake_rpt_204 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_rpt_204DefaultTypeInternal _Brake_rpt_204_default_instance_;
PROTOBUF_CONSTEXPR Horn_cmd_11c::Horn_cmd_11c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.horn_cmd_)*/0} {}
struct Horn_cmd_11cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Horn_cmd_11cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Horn_cmd_11cDefaultTypeInternal() {}
  union {
    Horn_cmd_11c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Horn_cmd_11cDefaultTypeInternal _Horn_cmd_11c_default_instance_;
PROTOBUF_CONSTEXPR Global_rpt_10::Global_rpt_10(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pacmod_system_enabled_)*/0
  , /*decltype(_impl_.config_fault_active_)*/false
  , /*decltype(_impl_.pacmod_subsystem_timeout_)*/false
  , /*decltype(_impl_.pacmod_system_fault_active_)*/false
  , /*decltype(_impl_.veh_can_timeout_)*/false
  , /*decltype(_impl_.pacmod_system_override_active_)*/0
  , /*decltype(_impl_.brk_can_timeout_)*/0
  , /*decltype(_impl_.str_can_timeout_)*/false
  , /*decltype(_impl_.usr_can_timeout_)*/false
  , /*decltype(_impl_.usr_can_read_errors_)*/0} {}
struct Global_rpt_10DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Global_rpt_10DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Global_rpt_10DefaultTypeInternal() {}
  union {
    Global_rpt_10 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Global_rpt_10DefaultTypeInternal _Global_rpt_10_default_instance_;
PROTOBUF_CONSTEXPR Accel_aux_rpt_300::Accel_aux_rpt_300(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_pedal_force_)*/0
  , /*decltype(_impl_.raw_pedal_pos_)*/0
  , /*decltype(_impl_.user_interaction_is_valid_)*/false
  , /*decltype(_impl_.user_interaction_)*/false
  , /*decltype(_impl_.raw_pedal_force_is_valid_)*/false
  , /*decltype(_impl_.raw_pedal_pos_is_valid_)*/false} {}
struct Accel_aux_rpt_300DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Accel_aux_rpt_300DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Accel_aux_rpt_300DefaultTypeInternal() {}
  union {
    Accel_aux_rpt_300 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Accel_aux_rpt_300DefaultTypeInternal _Accel_aux_rpt_300_default_instance_;
PROTOBUF_CONSTEXPR Cruise_control_buttons_rpt_208::Cruise_control_buttons_rpt_208(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false} {}
struct Cruise_control_buttons_rpt_208DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Cruise_control_buttons_rpt_208DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Cruise_control_buttons_rpt_208DefaultTypeInternal() {}
  union {
    Cruise_control_buttons_rpt_208 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Cruise_control_buttons_rpt_208DefaultTypeInternal _Cruise_control_buttons_rpt_208_default_instance_;
PROTOBUF_CONSTEXPR Vehicle_speed_rpt_400::Vehicle_speed_rpt_400(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_speed_)*/0
  , /*decltype(_impl_.vehicle_speed_valid_)*/0} {}
struct Vehicle_speed_rpt_400DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vehicle_speed_rpt_400DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vehicle_speed_rpt_400DefaultTypeInternal() {}
  union {
    Vehicle_speed_rpt_400 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vehicle_speed_rpt_400DefaultTypeInternal _Vehicle_speed_rpt_400_default_instance_;
PROTOBUF_CONSTEXPR Brake_aux_rpt_304::Brake_aux_rpt_304(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_on_off_is_valid_)*/false
  , /*decltype(_impl_.brake_on_off_)*/false
  , /*decltype(_impl_.user_interaction_is_valid_)*/false
  , /*decltype(_impl_.user_interaction_)*/false
  , /*decltype(_impl_.raw_brake_pressure_is_valid_)*/false
  , /*decltype(_impl_.raw_pedal_force_is_valid_)*/false
  , /*decltype(_impl_.raw_pedal_pos_is_valid_)*/false
  , /*decltype(_impl_.raw_brake_pressure_)*/0
  , /*decltype(_impl_.raw_pedal_force_)*/0
  , /*decltype(_impl_.raw_pedal_pos_)*/0} {}
struct Brake_aux_rpt_304DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_aux_rpt_304DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_aux_rpt_304DefaultTypeInternal() {}
  union {
    Brake_aux_rpt_304 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_aux_rpt_304DefaultTypeInternal _Brake_aux_rpt_304_default_instance_;
PROTOBUF_CONSTEXPR Media_controls_cmd_120::Media_controls_cmd_120(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_controls_cmd_)*/0
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.enable_)*/false} {}
struct Media_controls_cmd_120DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Media_controls_cmd_120DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Media_controls_cmd_120DefaultTypeInternal() {}
  union {
    Media_controls_cmd_120 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Media_controls_cmd_120DefaultTypeInternal _Media_controls_cmd_120_default_instance_;
PROTOBUF_CONSTEXPR Cruise_control_buttons_cmd_108::Cruise_control_buttons_cmd_108(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cruise_control_button_)*/0
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Cruise_control_buttons_cmd_108DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Cruise_control_buttons_cmd_108DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Cruise_control_buttons_cmd_108DefaultTypeInternal() {}
  union {
    Cruise_control_buttons_cmd_108 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Cruise_control_buttons_cmd_108DefaultTypeInternal _Cruise_control_buttons_cmd_108_default_instance_;
PROTOBUF_CONSTEXPR Parking_brake_cmd_124::Parking_brake_cmd_124(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.parking_brake_cmd_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Parking_brake_cmd_124DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Parking_brake_cmd_124DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Parking_brake_cmd_124DefaultTypeInternal() {}
  union {
    Parking_brake_cmd_124 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Parking_brake_cmd_124DefaultTypeInternal _Parking_brake_cmd_124_default_instance_;
PROTOBUF_CONSTEXPR Horn_rpt_21c::Horn_rpt_21c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0} {}
struct Horn_rpt_21cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Horn_rpt_21cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Horn_rpt_21cDefaultTypeInternal() {}
  union {
    Horn_rpt_21c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Horn_rpt_21cDefaultTypeInternal _Horn_rpt_21c_default_instance_;
PROTOBUF_CONSTEXPR Shift_rpt_228::Shift_rpt_228(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Shift_rpt_228DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Shift_rpt_228DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Shift_rpt_228DefaultTypeInternal() {}
  union {
    Shift_rpt_228 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Shift_rpt_228DefaultTypeInternal _Shift_rpt_228_default_instance_;
PROTOBUF_CONSTEXPR Shift_cmd_128::Shift_cmd_128(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.shift_cmd_)*/0} {}
struct Shift_cmd_128DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Shift_cmd_128DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Shift_cmd_128DefaultTypeInternal() {}
  union {
    Shift_cmd_128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Shift_cmd_128DefaultTypeInternal _Shift_cmd_128_default_instance_;
PROTOBUF_CONSTEXPR Accel_cmd_100::Accel_cmd_100(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accel_cmd_)*/0
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Accel_cmd_100DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Accel_cmd_100DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Accel_cmd_100DefaultTypeInternal() {}
  union {
    Accel_cmd_100 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Accel_cmd_100DefaultTypeInternal _Accel_cmd_100_default_instance_;
PROTOBUF_CONSTEXPR Parking_brake_rpt_224::Parking_brake_rpt_224(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false
  , /*decltype(_impl_.output_value_)*/false
  , /*decltype(_impl_.commanded_value_)*/false
  , /*decltype(_impl_.manual_input_)*/false} {}
struct Parking_brake_rpt_224DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Parking_brake_rpt_224DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Parking_brake_rpt_224DefaultTypeInternal() {}
  union {
    Parking_brake_rpt_224 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Parking_brake_rpt_224DefaultTypeInternal _Parking_brake_rpt_224_default_instance_;
PROTOBUF_CONSTEXPR Brake_cmd_104::Brake_cmd_104(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_cmd_)*/0
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false} {}
struct Brake_cmd_104DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_cmd_104DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_cmd_104DefaultTypeInternal() {}
  union {
    Brake_cmd_104 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_cmd_104DefaultTypeInternal _Brake_cmd_104_default_instance_;
PROTOBUF_CONSTEXPR Media_controls_rpt_220::Media_controls_rpt_220(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.vehicle_fault_)*/false
  , /*decltype(_impl_.pacmod_fault_)*/false
  , /*decltype(_impl_.override_active_)*/false
  , /*decltype(_impl_.output_reported_fault_)*/false
  , /*decltype(_impl_.input_output_fault_)*/false
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.command_output_fault_)*/false} {}
struct Media_controls_rpt_220DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Media_controls_rpt_220DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Media_controls_rpt_220DefaultTypeInternal() {}
  union {
    Media_controls_rpt_220 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Media_controls_rpt_220DefaultTypeInternal _Media_controls_rpt_220_default_instance_;
PROTOBUF_CONSTEXPR Steering_aux_rpt_32c::Steering_aux_rpt_32c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_interaction_is_valid_)*/false
  , /*decltype(_impl_.user_interaction_)*/false
  , /*decltype(_impl_.rotation_rate_is_valid_)*/false
  , /*decltype(_impl_.raw_torque_is_valid_)*/false
  , /*decltype(_impl_.raw_position_is_valid_)*/false
  , /*decltype(_impl_.rotation_rate_)*/0
  , /*decltype(_impl_.raw_torque_)*/0
  , /*decltype(_impl_.raw_position_)*/0} {}
struct Steering_aux_rpt_32cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_aux_rpt_32cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_aux_rpt_32cDefaultTypeInternal() {}
  union {
    Steering_aux_rpt_32c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_aux_rpt_32cDefaultTypeInternal _Steering_aux_rpt_32c_default_instance_;
PROTOBUF_CONSTEXPR Lat_lon_heading_rpt_40e::Lat_lon_heading_rpt_40e(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.longitude_seconds_)*/0
  , /*decltype(_impl_.longitude_minutes_)*/0
  , /*decltype(_impl_.longitude_degrees_)*/0
  , /*decltype(_impl_.latitude_seconds_)*/0
  , /*decltype(_impl_.latitude_minutes_)*/0
  , /*decltype(_impl_.latitude_degrees_)*/0} {}
struct Lat_lon_heading_rpt_40eDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Lat_lon_heading_rpt_40eDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Lat_lon_heading_rpt_40eDefaultTypeInternal() {}
  union {
    Lat_lon_heading_rpt_40e _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Lat_lon_heading_rpt_40eDefaultTypeInternal _Lat_lon_heading_rpt_40e_default_instance_;
PROTOBUF_CONSTEXPR Yaw_rate_rpt_40d::Yaw_rate_rpt_40d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.yaw_rate_)*/0} {}
struct Yaw_rate_rpt_40dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Yaw_rate_rpt_40dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Yaw_rate_rpt_40dDefaultTypeInternal() {}
  union {
    Yaw_rate_rpt_40d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Yaw_rate_rpt_40dDefaultTypeInternal _Yaw_rate_rpt_40d_default_instance_;
PROTOBUF_CONSTEXPR Date_time_rpt_40f::Date_time_rpt_40f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_second_)*/0
  , /*decltype(_impl_.time_minute_)*/0
  , /*decltype(_impl_.time_hour_)*/0
  , /*decltype(_impl_.date_day_)*/0
  , /*decltype(_impl_.date_month_)*/0
  , /*decltype(_impl_.date_year_)*/0} {}
struct Date_time_rpt_40fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Date_time_rpt_40fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Date_time_rpt_40fDefaultTypeInternal() {}
  union {
    Date_time_rpt_40f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Date_time_rpt_40fDefaultTypeInternal _Date_time_rpt_40f_default_instance_;
PROTOBUF_CONSTEXPR Vin_rpt_414::Vin_rpt_414(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.veh_serial_)*/0
  , /*decltype(_impl_.veh_my_code_)*/0
  , /*decltype(_impl_.veh_mfg_code_)*/0} {}
struct Vin_rpt_414DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vin_rpt_414DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vin_rpt_414DefaultTypeInternal() {}
  union {
    Vin_rpt_414 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vin_rpt_414DefaultTypeInternal _Vin_rpt_414_default_instance_;
PROTOBUF_CONSTEXPR Occupancy_rpt_415::Occupancy_rpt_415(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rear_seatbelt_buckled_is_valid_)*/false
  , /*decltype(_impl_.pass_seatbelt_buckled_is_valid_)*/false
  , /*decltype(_impl_.driver_seatbelt_buckled_is_valid_)*/false
  , /*decltype(_impl_.rear_seat_occupied_is_valid_)*/false
  , /*decltype(_impl_.pass_seat_occupied_is_valid_)*/false
  , /*decltype(_impl_.driver_seat_occupied_is_valid_)*/false
  , /*decltype(_impl_.rear_seatbelt_buckled_)*/false
  , /*decltype(_impl_.pass_seatbelt_buckled_)*/false
  , /*decltype(_impl_.driver_seatbelt_buckled_)*/false
  , /*decltype(_impl_.rear_seat_occupied_)*/false
  , /*decltype(_impl_.pass_seat_occupied_)*/false
  , /*decltype(_impl_.driver_seat_occupied_)*/false} {}
struct Occupancy_rpt_415DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Occupancy_rpt_415DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Occupancy_rpt_415DefaultTypeInternal() {}
  union {
    Occupancy_rpt_415 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Occupancy_rpt_415DefaultTypeInternal _Occupancy_rpt_415_default_instance_;
PROTOBUF_CONSTEXPR Interior_lights_rpt_416::Interior_lights_rpt_416(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dim_level_is_valid_)*/false
  , /*decltype(_impl_.mood_lights_on_is_valid_)*/false
  , /*decltype(_impl_.rear_dome_lights_on_is_valid_)*/false
  , /*decltype(_impl_.front_dome_lights_on_is_valid_)*/false
  , /*decltype(_impl_.dim_level_)*/0
  , /*decltype(_impl_.mood_lights_on_)*/false
  , /*decltype(_impl_.rear_dome_lights_on_)*/false
  , /*decltype(_impl_.front_dome_lights_on_)*/false} {}
struct Interior_lights_rpt_416DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Interior_lights_rpt_416DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Interior_lights_rpt_416DefaultTypeInternal() {}
  union {
    Interior_lights_rpt_416 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Interior_lights_rpt_416DefaultTypeInternal _Interior_lights_rpt_416_default_instance_;
PROTOBUF_CONSTEXPR Turn_cmd_130::Turn_cmd_130(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ignore_overrides_)*/false
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.clear_override_)*/false
  , /*decltype(_impl_.clear_faults_)*/false
  , /*decltype(_impl_.turn_signal_cmd_)*/0} {}
struct Turn_cmd_130DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turn_cmd_130DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turn_cmd_130DefaultTypeInternal() {}
  union {
    Turn_cmd_130 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turn_cmd_130DefaultTypeInternal _Turn_cmd_130_default_instance_;
PROTOBUF_CONSTEXPR Detected_object_rpt_411::Detected_object_rpt_411(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.front_object_distance_high_res_)*/0
  , /*decltype(_impl_.front_object_distance_low_res_)*/0} {}
struct Detected_object_rpt_411DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Detected_object_rpt_411DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Detected_object_rpt_411DefaultTypeInternal() {}
  union {
    Detected_object_rpt_411 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Detected_object_rpt_411DefaultTypeInternal _Detected_object_rpt_411_default_instance_;
PROTOBUF_CONSTEXPR Veh_specific_rpt_1_412::Veh_specific_rpt_1_412(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shift_pos_2_)*/0
  , /*decltype(_impl_.shift_pos_1_)*/0} {}
struct Veh_specific_rpt_1_412DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Veh_specific_rpt_1_412DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Veh_specific_rpt_1_412DefaultTypeInternal() {}
  union {
    Veh_specific_rpt_1_412 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Veh_specific_rpt_1_412DefaultTypeInternal _Veh_specific_rpt_1_412_default_instance_;
PROTOBUF_CONSTEXPR Veh_dynamics_rpt_413::Veh_dynamics_rpt_413(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.veh_g_forces_)*/0} {}
struct Veh_dynamics_rpt_413DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Veh_dynamics_rpt_413DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Veh_dynamics_rpt_413DefaultTypeInternal() {}
  union {
    Veh_dynamics_rpt_413 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Veh_dynamics_rpt_413DefaultTypeInternal _Veh_dynamics_rpt_413_default_instance_;
PROTOBUF_CONSTEXPR Rear_lights_rpt_418::Rear_lights_rpt_418(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reverse_lights_on_is_valid_)*/false
  , /*decltype(_impl_.brake_lights_on_is_valid_)*/false
  , /*decltype(_impl_.reverse_lights_on_)*/false
  , /*decltype(_impl_.brake_lights_on_)*/false} {}
struct Rear_lights_rpt_418DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rear_lights_rpt_418DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rear_lights_rpt_418DefaultTypeInternal() {}
  union {
    Rear_lights_rpt_418 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rear_lights_rpt_418DefaultTypeInternal _Rear_lights_rpt_418_default_instance_;
PROTOBUF_CONSTEXPR Lexus::Lexus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hazard_lights_rpt_214_)*/nullptr
  , /*decltype(_impl_.steering_cmd_12c_)*/nullptr
  , /*decltype(_impl_.dash_controls_right_rpt_210_)*/nullptr
  , /*decltype(_impl_.dash_controls_left_cmd_10c_)*/nullptr
  , /*decltype(_impl_.steering_rpt_22c_)*/nullptr
  , /*decltype(_impl_.turn_aux_rpt_330_)*/nullptr
  , /*decltype(_impl_.headlight_rpt_218_)*/nullptr
  , /*decltype(_impl_.hazard_lights_cmd_114_)*/nullptr
  , /*decltype(_impl_.dash_controls_left_rpt_20c_)*/nullptr
  , /*decltype(_impl_.headlight_aux_rpt_318_)*/nullptr
  , /*decltype(_impl_.dash_controls_right_cmd_110_)*/nullptr
  , /*decltype(_impl_.wiper_cmd_134_)*/nullptr
  , /*decltype(_impl_.wiper_rpt_234_)*/nullptr
  , /*decltype(_impl_.turn_rpt_230_)*/nullptr
  , /*decltype(_impl_.headlight_cmd_118_)*/nullptr
  , /*decltype(_impl_.door_rpt_417_)*/nullptr
  , /*decltype(_impl_.component_rpt_20_)*/nullptr
  , /*decltype(_impl_.wheel_speed_rpt_407_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_3_406_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_2_405_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_1_404_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_3_403_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_2_402_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_1_401_)*/nullptr
  , /*decltype(_impl_.wiper_aux_rpt_334_)*/nullptr
  , /*decltype(_impl_.shift_aux_rpt_328_)*/nullptr
  , /*decltype(_impl_.accel_rpt_200_)*/nullptr
  , /*decltype(_impl_.brake_rpt_204_)*/nullptr
  , /*decltype(_impl_.horn_cmd_11c_)*/nullptr
  , /*decltype(_impl_.global_rpt_10_)*/nullptr
  , /*decltype(_impl_.accel_aux_rpt_300_)*/nullptr
  , /*decltype(_impl_.cruise_control_buttons_rpt_208_)*/nullptr
  , /*decltype(_impl_.vehicle_speed_rpt_400_)*/nullptr
  , /*decltype(_impl_.brake_aux_rpt_304_)*/nullptr
  , /*decltype(_impl_.media_controls_cmd_120_)*/nullptr
  , /*decltype(_impl_.cruise_control_buttons_cmd_108_)*/nullptr
  , /*decltype(_impl_.parking_brake_cmd_124_)*/nullptr
  , /*decltype(_impl_.horn_rpt_21c_)*/nullptr
  , /*decltype(_impl_.shift_rpt_228_)*/nullptr
  , /*decltype(_impl_.shift_cmd_128_)*/nullptr
  , /*decltype(_impl_.accel_cmd_100_)*/nullptr
  , /*decltype(_impl_.parking_brake_rpt_224_)*/nullptr
  , /*decltype(_impl_.brake_cmd_104_)*/nullptr
  , /*decltype(_impl_.media_controls_rpt_220_)*/nullptr
  , /*decltype(_impl_.steering_aux_rpt_32c_)*/nullptr
  , /*decltype(_impl_.lat_lon_heading_rpt_40e_)*/nullptr
  , /*decltype(_impl_.yaw_rate_rpt_40d_)*/nullptr
  , /*decltype(_impl_.date_time_rpt_40f_)*/nullptr
  , /*decltype(_impl_.vin_rpt_414_)*/nullptr
  , /*decltype(_impl_.occupancy_rpt_415_)*/nullptr
  , /*decltype(_impl_.interior_lights_rpt_416_)*/nullptr
  , /*decltype(_impl_.turn_cmd_130_)*/nullptr
  , /*decltype(_impl_.detected_object_rpt_411_)*/nullptr
  , /*decltype(_impl_.veh_specific_rpt_1_412_)*/nullptr
  , /*decltype(_impl_.veh_dynamics_rpt_413_)*/nullptr
  , /*decltype(_impl_.rear_lights_rpt_418_)*/nullptr} {}
struct LexusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LexusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LexusDefaultTypeInternal() {}
  union {
    Lexus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LexusDefaultTypeInternal _Lexus_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[57];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[44];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _impl_.command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _impl_.rotation_rate_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _impl_.manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _impl_.dash_controls_button_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _impl_.output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _impl_.pass_blinker_bulb_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _impl_.pass_blinker_bulb_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _impl_.driver_blinker_bulb_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _impl_.driver_blinker_bulb_on_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _impl_.commanded_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_.hazard_lights_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _impl_.clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _impl_.command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_mode_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.fog_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.fog_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_on_bright_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_on_bright_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _impl_.headlights_on_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _impl_.dash_controls_button_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_.wiper_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _impl_.clear_faults_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _impl_.manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _impl_.output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _impl_.headlight_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.fuel_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.trunk_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.hood_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.rear_pass_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.rear_driver_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.pass_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.driver_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.fuel_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.trunk_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.hood_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.rear_pass_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.rear_driver_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.pass_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _impl_.driver_door_open_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_.component_func_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_.counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_.complement_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _impl_.config_fault_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _impl_.wheel_spd_rear_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _impl_.wheel_spd_rear_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _impl_.wheel_spd_front_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _impl_.wheel_spd_front_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _impl_.torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _impl_.torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _impl_.encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _impl_.motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _impl_.angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _impl_.motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _impl_.shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _impl_.torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _impl_.torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _impl_.encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _impl_.motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _impl_.angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _impl_.motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _impl_.shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.spray_empty_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.spray_empty_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.spray_near_empty_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.spray_near_empty_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.rear_spraying_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.rear_spraying_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.rear_wiping_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.rear_wiping_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.front_spraying_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.front_spraying_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.front_wiping_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _impl_.front_wiping_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.speed_interlock_active_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.speed_interlock_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.brake_interlock_active_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.brake_interlock_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.stay_in_neutral_mode_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.stay_in_neutral_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.between_gears_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _impl_.between_gears_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _impl_.output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _impl_.output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _impl_.horn_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.config_fault_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.pacmod_subsystem_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.pacmod_system_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.pacmod_system_override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.pacmod_system_fault_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.veh_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.str_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.brk_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.usr_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _impl_.usr_can_read_errors_),
  1,
  2,
  0,
  5,
  3,
  4,
  7,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.raw_pedal_force_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.raw_pedal_force_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.raw_pedal_pos_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _impl_.raw_pedal_pos_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _impl_.command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _impl_.vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _impl_.vehicle_speed_valid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.brake_on_off_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.brake_on_off_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_brake_pressure_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_pedal_force_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_pedal_force_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_pedal_pos_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _impl_.raw_pedal_pos_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  8,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_.media_controls_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _impl_.enable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_.cruise_control_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _impl_.clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_.parking_brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _impl_.clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _impl_.manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _impl_.output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _impl_.shift_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _impl_.accel_cmd_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _impl_.manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _impl_.brake_cmd_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _impl_.command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.rotation_rate_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.raw_torque_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.raw_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.raw_position_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _impl_.raw_position_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.longitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.longitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.longitude_degrees_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.latitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.latitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _impl_.latitude_degrees_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, _impl_.yaw_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.time_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.time_minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.time_hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.date_day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.date_month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _impl_.date_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _impl_.veh_serial_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _impl_.veh_my_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _impl_.veh_mfg_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.rear_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.pass_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.driver_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.rear_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.pass_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.driver_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.rear_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.pass_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.driver_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.rear_seat_occupied_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.pass_seat_occupied_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _impl_.driver_seat_occupied_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.dim_level_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.mood_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.rear_dome_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.front_dome_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.dim_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.mood_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.rear_dome_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _impl_.front_dome_lights_on_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_.ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_.clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _impl_.turn_signal_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _impl_.front_object_distance_high_res_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _impl_.front_object_distance_low_res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _impl_.shift_pos_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _impl_.shift_pos_1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, _impl_.veh_g_forces_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _impl_.reverse_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _impl_.brake_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _impl_.reverse_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _impl_.brake_lights_on_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.hazard_lights_rpt_214_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_cmd_12c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.dash_controls_right_rpt_210_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.dash_controls_left_cmd_10c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_rpt_22c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.turn_aux_rpt_330_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.headlight_rpt_218_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.hazard_lights_cmd_114_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.dash_controls_left_rpt_20c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.headlight_aux_rpt_318_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.dash_controls_right_cmd_110_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.wiper_cmd_134_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.wiper_rpt_234_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.turn_rpt_230_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.headlight_cmd_118_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.door_rpt_417_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.component_rpt_20_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.wheel_speed_rpt_407_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_motor_rpt_3_406_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_motor_rpt_2_405_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_motor_rpt_1_404_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_motor_rpt_3_403_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_motor_rpt_2_402_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_motor_rpt_1_401_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.wiper_aux_rpt_334_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.shift_aux_rpt_328_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.accel_rpt_200_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_rpt_204_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.horn_cmd_11c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.global_rpt_10_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.accel_aux_rpt_300_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.cruise_control_buttons_rpt_208_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.vehicle_speed_rpt_400_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_aux_rpt_304_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.media_controls_cmd_120_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.cruise_control_buttons_cmd_108_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.parking_brake_cmd_124_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.horn_rpt_21c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.shift_rpt_228_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.shift_cmd_128_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.accel_cmd_100_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.parking_brake_rpt_224_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.brake_cmd_104_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.media_controls_rpt_220_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.steering_aux_rpt_32c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.lat_lon_heading_rpt_40e_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.yaw_rate_rpt_40d_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.date_time_rpt_40f_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.vin_rpt_414_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.occupancy_rpt_415_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.interior_lights_rpt_416_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.turn_cmd_130_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.detected_object_rpt_411_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.veh_specific_rpt_1_412_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.veh_dynamics_rpt_413_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _impl_.rear_lights_rpt_418_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::apollo::canbus::Hazard_lights_rpt_214)},
  { 26, 38, -1, sizeof(::apollo::canbus::Steering_cmd_12c)},
  { 44, 60, -1, sizeof(::apollo::canbus::Dash_controls_right_rpt_210)},
  { 70, 81, -1, sizeof(::apollo::canbus::Dash_controls_left_cmd_10c)},
  { 86, 102, -1, sizeof(::apollo::canbus::Steering_rpt_22c)},
  { 112, 122, -1, sizeof(::apollo::canbus::Turn_aux_rpt_330)},
  { 126, 142, -1, sizeof(::apollo::canbus::Headlight_rpt_218)},
  { 152, 163, -1, sizeof(::apollo::canbus::Hazard_lights_cmd_114)},
  { 168, 184, -1, sizeof(::apollo::canbus::Dash_controls_left_rpt_20c)},
  { 194, 208, -1, sizeof(::apollo::canbus::Headlight_aux_rpt_318)},
  { 216, 227, -1, sizeof(::apollo::canbus::Dash_controls_right_cmd_110)},
  { 232, 243, -1, sizeof(::apollo::canbus::Wiper_cmd_134)},
  { 248, 264, -1, sizeof(::apollo::canbus::Wiper_rpt_234)},
  { 274, 290, -1, sizeof(::apollo::canbus::Turn_rpt_230)},
  { 300, 311, -1, sizeof(::apollo::canbus::Headlight_cmd_118)},
  { 316, 336, -1, sizeof(::apollo::canbus::Door_rpt_417)},
  { 350, 361, -1, sizeof(::apollo::canbus::Component_rpt_20)},
  { 366, 376, -1, sizeof(::apollo::canbus::Wheel_speed_rpt_407)},
  { 380, 388, -1, sizeof(::apollo::canbus::Steering_motor_rpt_3_406)},
  { 390, 399, -1, sizeof(::apollo::canbus::Steering_motor_rpt_2_405)},
  { 402, 410, -1, sizeof(::apollo::canbus::Steering_motor_rpt_1_404)},
  { 412, 420, -1, sizeof(::apollo::canbus::Brake_motor_rpt_3_403)},
  { 422, 431, -1, sizeof(::apollo::canbus::Brake_motor_rpt_2_402)},
  { 434, 442, -1, sizeof(::apollo::canbus::Brake_motor_rpt_1_401)},
  { 444, 462, -1, sizeof(::apollo::canbus::Wiper_aux_rpt_334)},
  { 474, 488, -1, sizeof(::apollo::canbus::Shift_aux_rpt_328)},
  { 496, 512, -1, sizeof(::apollo::canbus::Accel_rpt_200)},
  { 522, 538, -1, sizeof(::apollo::canbus::Brake_rpt_204)},
  { 548, 559, -1, sizeof(::apollo::canbus::Horn_cmd_11c)},
  { 564, 580, -1, sizeof(::apollo::canbus::Global_rpt_10)},
  { 590, 602, -1, sizeof(::apollo::canbus::Accel_aux_rpt_300)},
  { 608, 624, -1, sizeof(::apollo::canbus::Cruise_control_buttons_rpt_208)},
  { 634, 642, -1, sizeof(::apollo::canbus::Vehicle_speed_rpt_400)},
  { 644, 660, -1, sizeof(::apollo::canbus::Brake_aux_rpt_304)},
  { 670, 681, -1, sizeof(::apollo::canbus::Media_controls_cmd_120)},
  { 686, 697, -1, sizeof(::apollo::canbus::Cruise_control_buttons_cmd_108)},
  { 702, 713, -1, sizeof(::apollo::canbus::Parking_brake_cmd_124)},
  { 718, 734, -1, sizeof(::apollo::canbus::Horn_rpt_21c)},
  { 744, 760, -1, sizeof(::apollo::canbus::Shift_rpt_228)},
  { 770, 781, -1, sizeof(::apollo::canbus::Shift_cmd_128)},
  { 786, 797, -1, sizeof(::apollo::canbus::Accel_cmd_100)},
  { 802, 818, -1, sizeof(::apollo::canbus::Parking_brake_rpt_224)},
  { 828, 839, -1, sizeof(::apollo::canbus::Brake_cmd_104)},
  { 844, 860, -1, sizeof(::apollo::canbus::Media_controls_rpt_220)},
  { 870, 884, -1, sizeof(::apollo::canbus::Steering_aux_rpt_32c)},
  { 892, 905, -1, sizeof(::apollo::canbus::Lat_lon_heading_rpt_40e)},
  { 912, 919, -1, sizeof(::apollo::canbus::Yaw_rate_rpt_40d)},
  { 920, 932, -1, sizeof(::apollo::canbus::Date_time_rpt_40f)},
  { 938, 947, -1, sizeof(::apollo::canbus::Vin_rpt_414)},
  { 950, 968, -1, sizeof(::apollo::canbus::Occupancy_rpt_415)},
  { 980, 994, -1, sizeof(::apollo::canbus::Interior_lights_rpt_416)},
  { 1002, 1013, -1, sizeof(::apollo::canbus::Turn_cmd_130)},
  { 1018, 1026, -1, sizeof(::apollo::canbus::Detected_object_rpt_411)},
  { 1028, 1036, -1, sizeof(::apollo::canbus::Veh_specific_rpt_1_412)},
  { 1038, 1045, -1, sizeof(::apollo::canbus::Veh_dynamics_rpt_413)},
  { 1046, 1056, -1, sizeof(::apollo::canbus::Rear_lights_rpt_418)},
  { 1060, 1122, -1, sizeof(::apollo::canbus::Lexus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_Hazard_lights_rpt_214_default_instance_._instance,
  &::apollo::canbus::_Steering_cmd_12c_default_instance_._instance,
  &::apollo::canbus::_Dash_controls_right_rpt_210_default_instance_._instance,
  &::apollo::canbus::_Dash_controls_left_cmd_10c_default_instance_._instance,
  &::apollo::canbus::_Steering_rpt_22c_default_instance_._instance,
  &::apollo::canbus::_Turn_aux_rpt_330_default_instance_._instance,
  &::apollo::canbus::_Headlight_rpt_218_default_instance_._instance,
  &::apollo::canbus::_Hazard_lights_cmd_114_default_instance_._instance,
  &::apollo::canbus::_Dash_controls_left_rpt_20c_default_instance_._instance,
  &::apollo::canbus::_Headlight_aux_rpt_318_default_instance_._instance,
  &::apollo::canbus::_Dash_controls_right_cmd_110_default_instance_._instance,
  &::apollo::canbus::_Wiper_cmd_134_default_instance_._instance,
  &::apollo::canbus::_Wiper_rpt_234_default_instance_._instance,
  &::apollo::canbus::_Turn_rpt_230_default_instance_._instance,
  &::apollo::canbus::_Headlight_cmd_118_default_instance_._instance,
  &::apollo::canbus::_Door_rpt_417_default_instance_._instance,
  &::apollo::canbus::_Component_rpt_20_default_instance_._instance,
  &::apollo::canbus::_Wheel_speed_rpt_407_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_3_406_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_2_405_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_1_404_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_3_403_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_2_402_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_1_401_default_instance_._instance,
  &::apollo::canbus::_Wiper_aux_rpt_334_default_instance_._instance,
  &::apollo::canbus::_Shift_aux_rpt_328_default_instance_._instance,
  &::apollo::canbus::_Accel_rpt_200_default_instance_._instance,
  &::apollo::canbus::_Brake_rpt_204_default_instance_._instance,
  &::apollo::canbus::_Horn_cmd_11c_default_instance_._instance,
  &::apollo::canbus::_Global_rpt_10_default_instance_._instance,
  &::apollo::canbus::_Accel_aux_rpt_300_default_instance_._instance,
  &::apollo::canbus::_Cruise_control_buttons_rpt_208_default_instance_._instance,
  &::apollo::canbus::_Vehicle_speed_rpt_400_default_instance_._instance,
  &::apollo::canbus::_Brake_aux_rpt_304_default_instance_._instance,
  &::apollo::canbus::_Media_controls_cmd_120_default_instance_._instance,
  &::apollo::canbus::_Cruise_control_buttons_cmd_108_default_instance_._instance,
  &::apollo::canbus::_Parking_brake_cmd_124_default_instance_._instance,
  &::apollo::canbus::_Horn_rpt_21c_default_instance_._instance,
  &::apollo::canbus::_Shift_rpt_228_default_instance_._instance,
  &::apollo::canbus::_Shift_cmd_128_default_instance_._instance,
  &::apollo::canbus::_Accel_cmd_100_default_instance_._instance,
  &::apollo::canbus::_Parking_brake_rpt_224_default_instance_._instance,
  &::apollo::canbus::_Brake_cmd_104_default_instance_._instance,
  &::apollo::canbus::_Media_controls_rpt_220_default_instance_._instance,
  &::apollo::canbus::_Steering_aux_rpt_32c_default_instance_._instance,
  &::apollo::canbus::_Lat_lon_heading_rpt_40e_default_instance_._instance,
  &::apollo::canbus::_Yaw_rate_rpt_40d_default_instance_._instance,
  &::apollo::canbus::_Date_time_rpt_40f_default_instance_._instance,
  &::apollo::canbus::_Vin_rpt_414_default_instance_._instance,
  &::apollo::canbus::_Occupancy_rpt_415_default_instance_._instance,
  &::apollo::canbus::_Interior_lights_rpt_416_default_instance_._instance,
  &::apollo::canbus::_Turn_cmd_130_default_instance_._instance,
  &::apollo::canbus::_Detected_object_rpt_411_default_instance_._instance,
  &::apollo::canbus::_Veh_specific_rpt_1_412_default_instance_._instance,
  &::apollo::canbus::_Veh_dynamics_rpt_413_default_instance_._instance,
  &::apollo::canbus::_Rear_lights_rpt_418_default_instance_._instance,
  &::apollo::canbus::_Lexus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2flexus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/canbus/proto/lexus.proto\022\rapol"
  "lo.canbus\"\214\002\n\025Hazard_lights_rpt_214\022\024\n\014o"
  "utput_value\030\001 \001(\010\022\027\n\017commanded_value\030\002 \001"
  "(\010\022\024\n\014manual_input\030\003 \001(\010\022\025\n\rvehicle_faul"
  "t\030\004 \001(\010\022\024\n\014pacmod_fault\030\005 \001(\010\022\027\n\017overrid"
  "e_active\030\006 \001(\010\022\035\n\025output_reported_fault\030"
  "\007 \001(\010\022\032\n\022input_output_fault\030\010 \001(\010\022\017\n\007ena"
  "bled\030\t \001(\010\022\034\n\024command_output_fault\030\n \001(\010"
  "\"\223\001\n\020Steering_cmd_12c\022\030\n\020ignore_override"
  "s\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_overrid"
  "e\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\020\n\010positio"
  "n\030\005 \001(\001\022\025\n\rrotation_rate\030\006 \001(\001\"\237\t\n\033Dash_"
  "controls_right_rpt_210\022Q\n\014output_value\030\001"
  " \001(\0162;.apollo.canbus.Dash_controls_right"
  "_rpt_210.Output_valueType\022W\n\017commanded_v"
  "alue\030\002 \001(\0162>.apollo.canbus.Dash_controls"
  "_right_rpt_210.Commanded_valueType\022\025\n\rve"
  "hicle_fault\030\003 \001(\010\022\024\n\014pacmod_fault\030\004 \001(\010\022"
  "\027\n\017override_active\030\005 \001(\010\022\035\n\025output_repor"
  "ted_fault\030\006 \001(\010\022\032\n\022input_output_fault\030\007 "
  "\001(\010\022\017\n\007enabled\030\010 \001(\010\022\034\n\024command_output_f"
  "ault\030\t \001(\010\022Q\n\014manual_input\030\n \001(\0162;.apoll"
  "o.canbus.Dash_controls_right_rpt_210.Man"
  "ual_inputType\"\347\001\n\020Output_valueType\022\"\n\036OU"
  "TPUT_VALUE_DASH_CONTROL_NONE\020\000\022 \n\034OUTPUT"
  "_VALUE_DASH_CONTROL_OK\020\001\022\"\n\036OUTPUT_VALUE"
  "_DASH_CONTROL_LEFT\020\002\022#\n\037OUTPUT_VALUE_DAS"
  "H_CONTROL_RIGHT\020\003\022 \n\034OUTPUT_VALUE_DASH_C"
  "ONTROL_UP\020\004\022\"\n\036OUTPUT_VALUE_DASH_CONTROL"
  "_DOWN\020\005\"\374\001\n\023Commanded_valueType\022%\n!COMMA"
  "NDED_VALUE_DASH_CONTROL_NONE\020\000\022#\n\037COMMAN"
  "DED_VALUE_DASH_CONTROL_OK\020\001\022%\n!COMMANDED"
  "_VALUE_DASH_CONTROL_LEFT\020\002\022&\n\"COMMANDED_"
  "VALUE_DASH_CONTROL_RIGHT\020\003\022#\n\037COMMANDED_"
  "VALUE_DASH_CONTROL_UP\020\004\022%\n!COMMANDED_VAL"
  "UE_DASH_CONTROL_DOWN\020\005\"\347\001\n\020Manual_inputT"
  "ype\022\"\n\036MANUAL_INPUT_DASH_CONTROL_NONE\020\000\022"
  " \n\034MANUAL_INPUT_DASH_CONTROL_OK\020\001\022\"\n\036MAN"
  "UAL_INPUT_DASH_CONTROL_LEFT\020\002\022#\n\037MANUAL_"
  "INPUT_DASH_CONTROL_RIGHT\020\003\022 \n\034MANUAL_INP"
  "UT_DASH_CONTROL_UP\020\004\022\"\n\036MANUAL_INPUT_DAS"
  "H_CONTROL_DOWN\020\005\"\370\003\n\032Dash_controls_left_"
  "cmd_10c\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006ena"
  "ble\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022\024\n\014cle"
  "ar_faults\030\004 \001(\010\022`\n\024dash_controls_button\030"
  "\005 \001(\0162B.apollo.canbus.Dash_controls_left"
  "_cmd_10c.Dash_controls_buttonType\"\237\002\n\030Da"
  "sh_controls_buttonType\022*\n&DASH_CONTROLS_"
  "BUTTON_DASH_CONTROL_NONE\020\000\022(\n$DASH_CONTR"
  "OLS_BUTTON_DASH_CONTROL_OK\020\001\022*\n&DASH_CON"
  "TROLS_BUTTON_DASH_CONTROL_LEFT\020\002\022+\n\'DASH"
  "_CONTROLS_BUTTON_DASH_CONTROL_RIGHT\020\003\022(\n"
  "$DASH_CONTROLS_BUTTON_DASH_CONTROL_UP\020\004\022"
  "*\n&DASH_CONTROLS_BUTTON_DASH_CONTROL_DOW"
  "N\020\005\"\207\002\n\020Steering_rpt_22c\022\025\n\rvehicle_faul"
  "t\030\001 \001(\010\022\024\n\014pacmod_fault\030\002 \001(\010\022\027\n\017overrid"
  "e_active\030\003 \001(\010\022\035\n\025output_reported_fault\030"
  "\004 \001(\010\022\032\n\022input_output_fault\030\005 \001(\010\022\017\n\007ena"
  "bled\030\006 \001(\010\022\034\n\024command_output_fault\030\007 \001(\010"
  "\022\024\n\014manual_input\030\010 \001(\001\022\027\n\017commanded_valu"
  "e\030\t \001(\001\022\024\n\014output_value\030\n \001(\001\"\240\001\n\020Turn_a"
  "ux_rpt_330\022%\n\035pass_blinker_bulb_on_is_va"
  "lid\030\001 \001(\010\022\034\n\024pass_blinker_bulb_on\030\002 \001(\010\022"
  "\'\n\037driver_blinker_bulb_on_is_valid\030\003 \001(\010"
  "\022\036\n\026driver_blinker_bulb_on\030\004 \001(\010\"\372\005\n\021Hea"
  "dlight_rpt_218\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n"
  "\014pacmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003"
  " \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022i"
  "nput_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010"
  "\022\034\n\024command_output_fault\030\007 \001(\010\022G\n\014output"
  "_value\030\010 \001(\01621.apollo.canbus.Headlight_r"
  "pt_218.Output_valueType\022G\n\014manual_input\030"
  "\t \001(\01621.apollo.canbus.Headlight_rpt_218."
  "Manual_inputType\022M\n\017commanded_value\030\n \001("
  "\01624.apollo.canbus.Headlight_rpt_218.Comm"
  "anded_valueType\"l\n\020Output_valueType\022\037\n\033O"
  "UTPUT_VALUE_HEADLIGHTS_OFF\020\000\022\032\n\026OUTPUT_V"
  "ALUE_LOW_BEAMS\020\001\022\033\n\027OUTPUT_VALUE_HIGH_BE"
  "AMS\020\002\"l\n\020Manual_inputType\022\037\n\033MANUAL_INPU"
  "T_HEADLIGHTS_OFF\020\000\022\032\n\026MANUAL_INPUT_LOW_B"
  "EAMS\020\001\022\033\n\027MANUAL_INPUT_HIGH_BEAMS\020\002\"x\n\023C"
  "ommanded_valueType\022\"\n\036COMMANDED_VALUE_HE"
  "ADLIGHTS_OFF\020\000\022\035\n\031COMMANDED_VALUE_LOW_BE"
  "AMS\020\001\022\036\n\032COMMANDED_VALUE_HIGH_BEAMS\020\002\"\212\001"
  "\n\025Hazard_lights_cmd_114\022\031\n\021hazard_lights"
  "_cmd\030\001 \001(\010\022\030\n\020ignore_overrides\030\002 \001(\010\022\026\n\016"
  "clear_override\030\003 \001(\010\022\016\n\006enable\030\004 \001(\010\022\024\n\014"
  "clear_faults\030\005 \001(\010\"\233\t\n\032Dash_controls_lef"
  "t_rpt_20c\022P\n\014output_value\030\001 \001(\0162:.apollo"
  ".canbus.Dash_controls_left_rpt_20c.Outpu"
  "t_valueType\022V\n\017commanded_value\030\002 \001(\0162=.a"
  "pollo.canbus.Dash_controls_left_rpt_20c."
  "Commanded_valueType\022P\n\014manual_input\030\003 \001("
  "\0162:.apollo.canbus.Dash_controls_left_rpt"
  "_20c.Manual_inputType\022\025\n\rvehicle_fault\030\004"
  " \001(\010\022\024\n\014pacmod_fault\030\005 \001(\010\022\027\n\017override_a"
  "ctive\030\006 \001(\010\022\035\n\025output_reported_fault\030\007 \001"
  "(\010\022\032\n\022input_output_fault\030\010 \001(\010\022\017\n\007enable"
  "d\030\t \001(\010\022\034\n\024command_output_fault\030\n \001(\010\"\347\001"
  "\n\020Output_valueType\022\"\n\036OUTPUT_VALUE_DASH_"
  "CONTROL_NONE\020\000\022 \n\034OUTPUT_VALUE_DASH_CONT"
  "ROL_OK\020\001\022\"\n\036OUTPUT_VALUE_DASH_CONTROL_LE"
  "FT\020\002\022#\n\037OUTPUT_VALUE_DASH_CONTROL_RIGHT\020"
  "\003\022 \n\034OUTPUT_VALUE_DASH_CONTROL_UP\020\004\022\"\n\036O"
  "UTPUT_VALUE_DASH_CONTROL_DOWN\020\005\"\374\001\n\023Comm"
  "anded_valueType\022%\n!COMMANDED_VALUE_DASH_"
  "CONTROL_NONE\020\000\022#\n\037COMMANDED_VALUE_DASH_C"
  "ONTROL_OK\020\001\022%\n!COMMANDED_VALUE_DASH_CONT"
  "ROL_LEFT\020\002\022&\n\"COMMANDED_VALUE_DASH_CONTR"
  "OL_RIGHT\020\003\022#\n\037COMMANDED_VALUE_DASH_CONTR"
  "OL_UP\020\004\022%\n!COMMANDED_VALUE_DASH_CONTROL_"
  "DOWN\020\005\"\347\001\n\020Manual_inputType\022\"\n\036MANUAL_IN"
  "PUT_DASH_CONTROL_NONE\020\000\022 \n\034MANUAL_INPUT_"
  "DASH_CONTROL_OK\020\001\022\"\n\036MANUAL_INPUT_DASH_C"
  "ONTROL_LEFT\020\002\022#\n\037MANUAL_INPUT_DASH_CONTR"
  "OL_RIGHT\020\003\022 \n\034MANUAL_INPUT_DASH_CONTROL_"
  "UP\020\004\022\"\n\036MANUAL_INPUT_DASH_CONTROL_DOWN\020\005"
  "\"\200\004\n\025Headlight_aux_rpt_318\022 \n\030headlights"
  "_mode_is_valid\030\001 \001(\010\022Q\n\017headlights_mode\030"
  "\002 \001(\01628.apollo.canbus.Headlight_aux_rpt_"
  "318.Headlights_modeType\022\036\n\026fog_lights_on"
  "_is_valid\030\003 \001(\010\022\025\n\rfog_lights_on\030\004 \001(\010\022%"
  "\n\035headlights_on_bright_is_valid\030\005 \001(\010\022\034\n"
  "\024headlights_on_bright\030\006 \001(\010\022\036\n\026headlight"
  "s_on_is_valid\030\007 \001(\010\022\025\n\rheadlights_on\030\010 \001"
  "(\010\"\276\001\n\023Headlights_modeType\022\"\n\036HEADLIGHTS"
  "_MODE_HEADLIGHTS_OFF\020\000\022\'\n#HEADLIGHTS_MOD"
  "E_PARKING_LIGHTS_ONLY\020\001\022-\n)HEADLIGHTS_MO"
  "DE_HEADLIGHTS_ON_MANUAL_MODE\020\002\022+\n\'HEADLI"
  "GHTS_MODE_HEADLIGHTS_ON_AUTO_MODE\020\003\"\372\003\n\033"
  "Dash_controls_right_cmd_110\022\030\n\020ignore_ov"
  "errides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_o"
  "verride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022a\n\024d"
  "ash_controls_button\030\005 \001(\0162C.apollo.canbu"
  "s.Dash_controls_right_cmd_110.Dash_contr"
  "ols_buttonType\"\237\002\n\030Dash_controls_buttonT"
  "ype\022*\n&DASH_CONTROLS_BUTTON_DASH_CONTROL"
  "_NONE\020\000\022(\n$DASH_CONTROLS_BUTTON_DASH_CON"
  "TROL_OK\020\001\022*\n&DASH_CONTROLS_BUTTON_DASH_C"
  "ONTROL_LEFT\020\002\022+\n\'DASH_CONTROLS_BUTTON_DA"
  "SH_CONTROL_RIGHT\020\003\022(\n$DASH_CONTROLS_BUTT"
  "ON_DASH_CONTROL_UP\020\004\022*\n&DASH_CONTROLS_BU"
  "TTON_DASH_CONTROL_DOWN\020\005\"\217\003\n\rWiper_cmd_1"
  "34\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006enable\030\002"
  " \001(\010\022\026\n\016clear_override\030\003 \001(\010\022=\n\twiper_cm"
  "d\030\004 \001(\0162*.apollo.canbus.Wiper_cmd_134.Wi"
  "per_cmdType\022\024\n\014clear_faults\030\005 \001(\010\"\346\001\n\rWi"
  "per_cmdType\022\030\n\024WIPER_CMD_WIPERS_OFF\020\000\022\034\n"
  "\030WIPER_CMD_INTERMITTENT_1\020\001\022\034\n\030WIPER_CMD"
  "_INTERMITTENT_2\020\002\022\034\n\030WIPER_CMD_INTERMITT"
  "ENT_3\020\003\022\034\n\030WIPER_CMD_INTERMITTENT_4\020\004\022\034\n"
  "\030WIPER_CMD_INTERMITTENT_5\020\005\022\021\n\rWIPER_CMD"
  "_LOW\020\006\022\022\n\016WIPER_CMD_HIGH\020\007\"\273\t\n\rWiper_rpt"
  "_234\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014pacmod_fa"
  "ult\030\002 \001(\010\022\027\n\017override_active\030\003 \001(\010\022\035\n\025ou"
  "tput_reported_fault\030\004 \001(\010\022\032\n\022input_outpu"
  "t_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034\n\024comman"
  "d_output_fault\030\007 \001(\010\022C\n\014output_value\030\010 \001"
  "(\0162-.apollo.canbus.Wiper_rpt_234.Output_"
  "valueType\022I\n\017commanded_value\030\t \001(\01620.apo"
  "llo.canbus.Wiper_rpt_234.Commanded_value"
  "Type\022C\n\014manual_input\030\n \001(\0162-.apollo.canb"
  "us.Wiper_rpt_234.Manual_inputType\"\201\002\n\020Ou"
  "tput_valueType\022\033\n\027OUTPUT_VALUE_WIPERS_OF"
  "F\020\000\022\037\n\033OUTPUT_VALUE_INTERMITTENT_1\020\001\022\037\n\033"
  "OUTPUT_VALUE_INTERMITTENT_2\020\002\022\037\n\033OUTPUT_"
  "VALUE_INTERMITTENT_3\020\003\022\037\n\033OUTPUT_VALUE_I"
  "NTERMITTENT_4\020\004\022\037\n\033OUTPUT_VALUE_INTERMIT"
  "TENT_5\020\005\022\024\n\020OUTPUT_VALUE_LOW\020\006\022\025\n\021OUTPUT"
  "_VALUE_HIGH\020\007\"\234\002\n\023Commanded_valueType\022\036\n"
  "\032COMMANDED_VALUE_WIPERS_OFF\020\000\022\"\n\036COMMAND"
  "ED_VALUE_INTERMITTENT_1\020\001\022\"\n\036COMMANDED_V"
  "ALUE_INTERMITTENT_2\020\002\022\"\n\036COMMANDED_VALUE"
  "_INTERMITTENT_3\020\003\022\"\n\036COMMANDED_VALUE_INT"
  "ERMITTENT_4\020\004\022\"\n\036COMMANDED_VALUE_INTERMI"
  "TTENT_5\020\005\022\027\n\023COMMANDED_VALUE_LOW\020\006\022\030\n\024CO"
  "MMANDED_VALUE_HIGH\020\007\"\201\002\n\020Manual_inputTyp"
  "e\022\033\n\027MANUAL_INPUT_WIPERS_OFF\020\000\022\037\n\033MANUAL"
  "_INPUT_INTERMITTENT_1\020\001\022\037\n\033MANUAL_INPUT_"
  "INTERMITTENT_2\020\002\022\037\n\033MANUAL_INPUT_INTERMI"
  "TTENT_3\020\003\022\037\n\033MANUAL_INPUT_INTERMITTENT_4"
  "\020\004\022\037\n\033MANUAL_INPUT_INTERMITTENT_5\020\005\022\024\n\020M"
  "ANUAL_INPUT_LOW\020\006\022\025\n\021MANUAL_INPUT_HIGH\020\007"
  "\"\371\005\n\014Turn_rpt_230\022\025\n\rvehicle_fault\030\001 \001(\010"
  "\022\024\n\014pacmod_fault\030\002 \001(\010\022\027\n\017override_activ"
  "e\030\003 \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032"
  "\n\022input_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 "
  "\001(\010\022\034\n\024command_output_fault\030\007 \001(\010\022B\n\014man"
  "ual_input\030\010 \001(\0162,.apollo.canbus.Turn_rpt"
  "_230.Manual_inputType\022H\n\017commanded_value"
  "\030\t \001(\0162/.apollo.canbus.Turn_rpt_230.Comm"
  "anded_valueType\022B\n\014output_value\030\n \001(\0162,."
  "apollo.canbus.Turn_rpt_230.Output_valueT"
  "ype\"q\n\020Manual_inputType\022\026\n\022MANUAL_INPUT_"
  "RIGHT\020\000\022\025\n\021MANUAL_INPUT_NONE\020\001\022\025\n\021MANUAL"
  "_INPUT_LEFT\020\002\022\027\n\023MANUAL_INPUT_HAZARD\020\003\"\200"
  "\001\n\023Commanded_valueType\022\031\n\025COMMANDED_VALU"
  "E_RIGHT\020\000\022\030\n\024COMMANDED_VALUE_NONE\020\001\022\030\n\024C"
  "OMMANDED_VALUE_LEFT\020\002\022\032\n\026COMMANDED_VALUE"
  "_HAZARD\020\003\"q\n\020Output_valueType\022\026\n\022OUTPUT_"
  "VALUE_RIGHT\020\000\022\025\n\021OUTPUT_VALUE_NONE\020\001\022\025\n\021"
  "OUTPUT_VALUE_LEFT\020\002\022\027\n\023OUTPUT_VALUE_HAZA"
  "RD\020\003\"\250\002\n\021Headlight_cmd_118\022\030\n\020ignore_ove"
  "rrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_ov"
  "erride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022I\n\rhe"
  "adlight_cmd\030\005 \001(\01622.apollo.canbus.Headli"
  "ght_cmd_118.Headlight_cmdType\"p\n\021Headlig"
  "ht_cmdType\022 \n\034HEADLIGHT_CMD_HEADLIGHTS_O"
  "FF\020\000\022\033\n\027HEADLIGHT_CMD_LOW_BEAMS\020\001\022\034\n\030HEA"
  "DLIGHT_CMD_HIGH_BEAMS\020\002\"\247\003\n\014Door_rpt_417"
  "\022\037\n\027fuel_door_open_is_valid\030\001 \001(\010\022\033\n\023tru"
  "nk_open_is_valid\030\002 \001(\010\022\032\n\022hood_open_is_v"
  "alid\030\003 \001(\010\022$\n\034rear_pass_door_open_is_val"
  "id\030\004 \001(\010\022&\n\036rear_driver_door_open_is_val"
  "id\030\005 \001(\010\022\037\n\027pass_door_open_is_valid\030\006 \001("
  "\010\022!\n\031driver_door_open_is_valid\030\007 \001(\010\022\026\n\016"
  "fuel_door_open\030\010 \001(\010\022\022\n\ntrunk_open\030\t \001(\010"
  "\022\021\n\thood_open\030\n \001(\010\022\033\n\023rear_pass_door_op"
  "en\030\013 \001(\010\022\035\n\025rear_driver_door_open\030\014 \001(\010\022"
  "\026\n\016pass_door_open\030\r \001(\010\022\030\n\020driver_door_o"
  "pen\030\016 \001(\010\"\357\004\n\020Component_rpt_20\022J\n\016compon"
  "ent_type\030\001 \001(\01622.apollo.canbus.Component"
  "_rpt_20.Component_typeType\022J\n\016component_"
  "func\030\002 \001(\01622.apollo.canbus.Component_rpt"
  "_20.Component_funcType\022\017\n\007counter\030\003 \001(\005\022"
  "\022\n\ncomplement\030\004 \001(\005\022\024\n\014config_fault\030\005 \001("
  "\010\"h\n\022Component_typeType\022\031\n\025COMPONENT_TYP"
  "E_PACMOD\020\000\022\032\n\026COMPONENT_TYPE_PACMINI\020\001\022\033"
  "\n\027COMPONENT_TYPE_PACMICRO\020\002\"\235\002\n\022Componen"
  "t_funcType\022\031\n\025COMPONENT_FUNC_PACMOD\020\000\022/\n"
  "+COMPONENT_FUNC_STEERING_AND_STEERING_CO"
  "LUMN\020\001\022*\n&COMPONENT_FUNC_ACCELERATOR_AND"
  "_BRAKING\020\002\022\032\n\026COMPONENT_FUNC_BRAKING\020\003\022\033"
  "\n\027COMPONENT_FUNC_SHIFTING\020\004\022\033\n\027COMPONENT"
  "_FUNC_STEERING\020\005\022\034\n\030COMPONENT_FUNC_E_SHI"
  "FTER\020\006\022\033\n\027COMPONENT_FUNC_WATCHDOG\020\007\"\215\001\n\023"
  "Wheel_speed_rpt_407\022\034\n\024wheel_spd_rear_ri"
  "ght\030\001 \001(\001\022\033\n\023wheel_spd_rear_left\030\002 \001(\001\022\035"
  "\n\025wheel_spd_front_right\030\003 \001(\001\022\034\n\024wheel_s"
  "pd_front_left\030\004 \001(\001\"G\n\030Steering_motor_rp"
  "t_3_406\022\025\n\rtorque_output\030\001 \001(\001\022\024\n\014torque"
  "_input\030\002 \001(\001\"i\n\030Steering_motor_rpt_2_405"
  "\022\033\n\023encoder_temperature\030\001 \001(\005\022\031\n\021motor_t"
  "emperature\030\002 \001(\005\022\025\n\rangular_speed\030\003 \001(\001\""
  "I\n\030Steering_motor_rpt_1_404\022\025\n\rmotor_cur"
  "rent\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001\"D\n\025Br"
  "ake_motor_rpt_3_403\022\025\n\rtorque_output\030\001 \001"
  "(\001\022\024\n\014torque_input\030\002 \001(\001\"f\n\025Brake_motor_"
  "rpt_2_402\022\033\n\023encoder_temperature\030\001 \001(\005\022\031"
  "\n\021motor_temperature\030\002 \001(\005\022\025\n\rangular_spe"
  "ed\030\003 \001(\001\"F\n\025Brake_motor_rpt_1_401\022\025\n\rmot"
  "or_current\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001"
  "\"\333\002\n\021Wiper_aux_rpt_334\022\034\n\024spray_empty_is"
  "_valid\030\001 \001(\010\022\023\n\013spray_empty\030\002 \001(\010\022!\n\031spr"
  "ay_near_empty_is_valid\030\003 \001(\010\022\030\n\020spray_ne"
  "ar_empty\030\004 \001(\010\022\036\n\026rear_spraying_is_valid"
  "\030\005 \001(\010\022\025\n\rrear_spraying\030\006 \001(\010\022\034\n\024rear_wi"
  "ping_is_valid\030\007 \001(\010\022\023\n\013rear_wiping\030\010 \001(\010"
  "\022\037\n\027front_spraying_is_valid\030\t \001(\010\022\026\n\016fro"
  "nt_spraying\030\n \001(\010\022\035\n\025front_wiping_is_val"
  "id\030\013 \001(\010\022\024\n\014front_wiping\030\014 \001(\010\"\241\002\n\021Shift"
  "_aux_rpt_328\022\'\n\037speed_interlock_active_i"
  "s_valid\030\001 \001(\010\022\036\n\026speed_interlock_active\030"
  "\002 \001(\010\022\'\n\037brake_interlock_active_is_valid"
  "\030\003 \001(\010\022\036\n\026brake_interlock_active\030\004 \001(\010\022%"
  "\n\035stay_in_neutral_mode_is_valid\030\005 \001(\010\022\034\n"
  "\024stay_in_neutral_mode\030\006 \001(\010\022\036\n\026between_g"
  "ears_is_valid\030\007 \001(\010\022\025\n\rbetween_gears\030\010 \001"
  "(\010\"\204\002\n\rAccel_rpt_200\022\025\n\rvehicle_fault\030\001 "
  "\001(\010\022\024\n\014pacmod_fault\030\002 \001(\010\022\035\n\025output_repo"
  "rted_fault\030\003 \001(\010\022\032\n\022input_output_fault\030\004"
  " \001(\010\022\034\n\024command_output_fault\030\005 \001(\010\022\027\n\017ov"
  "erride_active\030\006 \001(\010\022\017\n\007enabled\030\007 \001(\010\022\024\n\014"
  "manual_input\030\010 \001(\001\022\027\n\017commanded_value\030\t "
  "\001(\001\022\024\n\014output_value\030\n \001(\001\"\204\002\n\rBrake_rpt_"
  "204\022\034\n\024command_output_fault\030\001 \001(\010\022\025\n\rveh"
  "icle_fault\030\002 \001(\010\022\024\n\014pacmod_fault\030\003 \001(\010\022\027"
  "\n\017override_active\030\004 \001(\010\022\035\n\025output_report"
  "ed_fault\030\005 \001(\010\022\032\n\022input_output_fault\030\006 \001"
  "(\010\022\017\n\007enabled\030\007 \001(\010\022\024\n\014manual_input\030\010 \001("
  "\001\022\027\n\017commanded_value\030\t \001(\001\022\024\n\014output_val"
  "ue\030\n \001(\001\"\325\001\n\014Horn_cmd_11c\022\030\n\020ignore_over"
  "rides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_ove"
  "rride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022:\n\010hor"
  "n_cmd\030\005 \001(\0162(.apollo.canbus.Horn_cmd_11c"
  ".Horn_cmdType\"1\n\014Horn_cmdType\022\020\n\014HORN_CM"
  "D_OFF\020\000\022\017\n\013HORN_CMD_ON\020\001\"\307\006\n\rGlobal_rpt_"
  "10\022\033\n\023config_fault_active\030\001 \001(\010\022 \n\030pacmo"
  "d_subsystem_timeout\030\002 \001(\010\022U\n\025pacmod_syst"
  "em_enabled\030\003 \001(\01626.apollo.canbus.Global_"
  "rpt_10.Pacmod_system_enabledType\022e\n\035pacm"
  "od_system_override_active\030\004 \001(\0162>.apollo"
  ".canbus.Global_rpt_10.Pacmod_system_over"
  "ride_activeType\022\"\n\032pacmod_system_fault_a"
  "ctive\030\005 \001(\010\022\027\n\017veh_can_timeout\030\006 \001(\010\022\027\n\017"
  "str_can_timeout\030\007 \001(\010\022I\n\017brk_can_timeout"
  "\030\010 \001(\01620.apollo.canbus.Global_rpt_10.Brk"
  "_can_timeoutType\022\027\n\017usr_can_timeout\030\t \001("
  "\010\022\033\n\023usr_can_read_errors\030\n \001(\005\"r\n\031Pacmod"
  "_system_enabledType\022*\n&PACMOD_SYSTEM_ENA"
  "BLED_CONTROL_DISABLED\020\000\022)\n%PACMOD_SYSTEM"
  "_ENABLED_CONTROL_ENABLED\020\001\"\203\001\n!Pacmod_sy"
  "stem_override_activeType\0220\n,PACMOD_SYSTE"
  "M_OVERRIDE_ACTIVE_NOT_OVERRIDDEN\020\000\022,\n(PA"
  "CMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN\020\001"
  "\"h\n\023Brk_can_timeoutType\022)\n%BRK_CAN_TIMEO"
  "UT_NO_ACTIVE_CAN_TIMEOUT\020\000\022&\n\"BRK_CAN_TI"
  "MEOUT_ACTIVE_CAN_TIMEOUT\020\001\"\302\001\n\021Accel_aux"
  "_rpt_300\022!\n\031user_interaction_is_valid\030\001 "
  "\001(\010\022\030\n\020user_interaction\030\002 \001(\010\022 \n\030raw_ped"
  "al_force_is_valid\030\003 \001(\010\022\027\n\017raw_pedal_for"
  "ce\030\004 \001(\001\022\036\n\026raw_pedal_pos_is_valid\030\005 \001(\010"
  "\022\025\n\rraw_pedal_pos\030\006 \001(\001\"\214\013\n\036Cruise_contr"
  "ol_buttons_rpt_208\022T\n\014output_value\030\001 \001(\016"
  "2>.apollo.canbus.Cruise_control_buttons_"
  "rpt_208.Output_valueType\022T\n\014manual_input"
  "\030\002 \001(\0162>.apollo.canbus.Cruise_control_bu"
  "ttons_rpt_208.Manual_inputType\022Z\n\017comman"
  "ded_value\030\003 \001(\0162A.apollo.canbus.Cruise_c"
  "ontrol_buttons_rpt_208.Commanded_valueTy"
  "pe\022\025\n\rvehicle_fault\030\004 \001(\010\022\024\n\014pacmod_faul"
  "t\030\005 \001(\010\022\027\n\017override_active\030\006 \001(\010\022\035\n\025outp"
  "ut_reported_fault\030\007 \001(\010\022\032\n\022input_output_"
  "fault\030\010 \001(\010\022\017\n\007enabled\030\t \001(\010\022\034\n\024command_"
  "output_fault\030\n \001(\010\"\261\002\n\020Output_valueType\022"
  "$\n OUTPUT_VALUE_CRUISE_CONTROL_NONE\020\000\022$\n"
  " OUTPUT_VALUE_CRUISE_CONTROL_CNCL\020\001\022+\n\'O"
  "UTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER\020\002"
  "\022*\n&OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOS"
  "ER\020\003\022\'\n#OUTPUT_VALUE_CRUISE_CONTROL_SET_"
  "DEC\020\004\022\'\n#OUTPUT_VALUE_CRUISE_CONTROL_RES"
  "_INC\020\005\022&\n\"OUTPUT_VALUE_CRUISE_CONTROL_ON"
  "_OFF\020\006\"\261\002\n\020Manual_inputType\022$\n MANUAL_IN"
  "PUT_CRUISE_CONTROL_NONE\020\000\022$\n MANUAL_INPU"
  "T_CRUISE_CONTROL_CNCL\020\001\022+\n\'MANUAL_INPUT_"
  "CRUISE_CONTROL_ACC_FURTHER\020\002\022*\n&MANUAL_I"
  "NPUT_CRUISE_CONTROL_ACC_CLOSER\020\003\022\'\n#MANU"
  "AL_INPUT_CRUISE_CONTROL_SET_DEC\020\004\022\'\n#MAN"
  "UAL_INPUT_CRUISE_CONTROL_RES_INC\020\005\022&\n\"MA"
  "NUAL_INPUT_CRUISE_CONTROL_ON_OFF\020\006\"\311\002\n\023C"
  "ommanded_valueType\022\'\n#COMMANDED_VALUE_CR"
  "UISE_CONTROL_NONE\020\000\022\'\n#COMMANDED_VALUE_C"
  "RUISE_CONTROL_CNCL\020\001\022.\n*COMMANDED_VALUE_"
  "CRUISE_CONTROL_ACC_FURTHER\020\002\022-\n)COMMANDE"
  "D_VALUE_CRUISE_CONTROL_ACC_CLOSER\020\003\022*\n&C"
  "OMMANDED_VALUE_CRUISE_CONTROL_SET_DEC\020\004\022"
  "*\n&COMMANDED_VALUE_CRUISE_CONTROL_RES_IN"
  "C\020\005\022)\n%COMMANDED_VALUE_CRUISE_CONTROL_ON"
  "_OFF\020\006\"\344\001\n\025Vehicle_speed_rpt_400\022\025\n\rvehi"
  "cle_speed\030\001 \001(\001\022Y\n\023vehicle_speed_valid\030\002"
  " \001(\0162<.apollo.canbus.Vehicle_speed_rpt_4"
  "00.Vehicle_speed_validType\"Y\n\027Vehicle_sp"
  "eed_validType\022\037\n\033VEHICLE_SPEED_VALID_INV"
  "ALID\020\000\022\035\n\031VEHICLE_SPEED_VALID_VALID\020\001\"\270\002"
  "\n\021Brake_aux_rpt_304\022\035\n\025brake_on_off_is_v"
  "alid\030\001 \001(\010\022\024\n\014brake_on_off\030\002 \001(\010\022!\n\031user"
  "_interaction_is_valid\030\003 \001(\010\022\030\n\020user_inte"
  "raction\030\004 \001(\010\022#\n\033raw_brake_pressure_is_v"
  "alid\030\005 \001(\010\022\032\n\022raw_brake_pressure\030\006 \001(\001\022 "
  "\n\030raw_pedal_force_is_valid\030\007 \001(\010\022\027\n\017raw_"
  "pedal_force\030\010 \001(\001\022\036\n\026raw_pedal_pos_is_va"
  "lid\030\t \001(\010\022\025\n\rraw_pedal_pos\030\n \001(\001\"\274\004\n\026Med"
  "ia_controls_cmd_120\022X\n\022media_controls_cm"
  "d\030\001 \001(\0162<.apollo.canbus.Media_controls_c"
  "md_120.Media_controls_cmdType\022\030\n\020ignore_"
  "overrides\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022"
  "\024\n\014clear_faults\030\004 \001(\010\022\016\n\006enable\030\005 \001(\010\"\357\002"
  "\n\026Media_controls_cmdType\022)\n%MEDIA_CONTRO"
  "LS_CMD_MEDIA_CONTROL_NONE\020\000\0222\n.MEDIA_CON"
  "TROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND\020\001\022"
  ")\n%MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE"
  "\020\002\0226\n2MEDIA_CONTROLS_CMD_MEDIA_CONTROL_P"
  "REV_TRACK_ANSWER\020\003\0227\n3MEDIA_CONTROLS_CMD"
  "_MEDIA_CONTROL_NEXT_TRACK_HANG_UP\020\004\022+\n\'M"
  "EDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP\020\005"
  "\022-\n)MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL"
  "_DOWN\020\006\"\334\004\n\036Cruise_control_buttons_cmd_1"
  "08\022f\n\025cruise_control_button\030\001 \001(\0162G.apol"
  "lo.canbus.Cruise_control_buttons_cmd_108"
  ".Cruise_control_buttonType\022\030\n\020ignore_ove"
  "rrides\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022\016\n\006"
  "enable\030\004 \001(\010\022\024\n\014clear_faults\030\005 \001(\010\"\371\002\n\031C"
  "ruise_control_buttonType\022-\n)CRUISE_CONTR"
  "OL_BUTTON_CRUISE_CONTROL_NONE\020\000\022-\n)CRUIS"
  "E_CONTROL_BUTTON_CRUISE_CONTROL_CNCL\020\001\0224"
  "\n0CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_A"
  "CC_FURTHER\020\002\0223\n/CRUISE_CONTROL_BUTTON_CR"
  "UISE_CONTROL_ACC_CLOSER\020\003\0220\n,CRUISE_CONT"
  "ROL_BUTTON_CRUISE_CONTROL_SET_DEC\020\004\0220\n,C"
  "RUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_"
  "INC\020\005\022/\n+CRUISE_CONTROL_BUTTON_CRUISE_CO"
  "NTROL_ON_OFF\020\006\"\212\001\n\025Parking_brake_cmd_124"
  "\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001"
  "(\010\022\026\n\016clear_override\030\003 \001(\010\022\031\n\021parking_br"
  "ake_cmd\030\004 \001(\010\022\024\n\014clear_faults\030\005 \001(\010\"\326\004\n\014"
  "Horn_rpt_21c\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014p"
  "acmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003 \001"
  "(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022inp"
  "ut_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034"
  "\n\024command_output_fault\030\007 \001(\010\022B\n\014output_v"
  "alue\030\010 \001(\0162,.apollo.canbus.Horn_rpt_21c."
  "Output_valueType\022H\n\017commanded_value\030\t \001("
  "\0162/.apollo.canbus.Horn_rpt_21c.Commanded"
  "_valueType\022B\n\014manual_input\030\n \001(\0162,.apoll"
  "o.canbus.Horn_rpt_21c.Manual_inputType\"="
  "\n\020Output_valueType\022\024\n\020OUTPUT_VALUE_OFF\020\000"
  "\022\023\n\017OUTPUT_VALUE_ON\020\001\"F\n\023Commanded_value"
  "Type\022\027\n\023COMMANDED_VALUE_OFF\020\000\022\026\n\022COMMAND"
  "ED_VALUE_ON\020\001\"=\n\020Manual_inputType\022\024\n\020MAN"
  "UAL_INPUT_OFF\020\000\022\023\n\017MANUAL_INPUT_ON\020\001\"\235\010\n"
  "\rShift_rpt_228\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n"
  "\014pacmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003"
  " \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022i"
  "nput_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010"
  "\022\034\n\024command_output_fault\030\007 \001(\010\022C\n\014manual"
  "_input\030\010 \001(\0162-.apollo.canbus.Shift_rpt_2"
  "28.Manual_inputType\022I\n\017commanded_value\030\t"
  " \001(\01620.apollo.canbus.Shift_rpt_228.Comma"
  "nded_valueType\022C\n\014output_value\030\n \001(\0162-.a"
  "pollo.canbus.Shift_rpt_228.Output_valueT"
  "ype\"\341\001\n\020Manual_inputType\022\025\n\021MANUAL_INPUT"
  "_PARK\020\000\022\030\n\024MANUAL_INPUT_REVERSE\020\001\022\030\n\024MAN"
  "UAL_INPUT_NEUTRAL\020\002\022\035\n\031MANUAL_INPUT_FORW"
  "ARD_HIGH\020\003\022\024\n\020MANUAL_INPUT_LOW\020\004\022\036\n\032MANU"
  "AL_INPUT_BETWEEN_GEARS\020\005\022\026\n\022MANUAL_INPUT"
  "_ERROR\020\006\022\025\n\021MANUAL_INPUT_NONE\020\007\"\276\001\n\023Comm"
  "anded_valueType\022\030\n\024COMMANDED_VALUE_PARK\020"
  "\000\022\033\n\027COMMANDED_VALUE_REVERSE\020\001\022\033\n\027COMMAN"
  "DED_VALUE_NEUTRAL\020\002\022 \n\034COMMANDED_VALUE_F"
  "ORWARD_HIGH\020\003\022\027\n\023COMMANDED_VALUE_LOW\020\004\022\030"
  "\n\024COMMANDED_VALUE_NONE\020\007\"\341\001\n\020Output_valu"
  "eType\022\025\n\021OUTPUT_VALUE_PARK\020\000\022\030\n\024OUTPUT_V"
  "ALUE_REVERSE\020\001\022\030\n\024OUTPUT_VALUE_NEUTRAL\020\002"
  "\022\035\n\031OUTPUT_VALUE_FORWARD_HIGH\020\003\022\024\n\020OUTPU"
  "T_VALUE_LOW\020\004\022\036\n\032OUTPUT_VALUE_BETWEEN_GE"
  "ARS\020\005\022\026\n\022OUTPUT_VALUE_ERROR\020\006\022\025\n\021OUTPUT_"
  "VALUE_NONE\020\007\"\275\002\n\rShift_cmd_128\022\030\n\020ignore"
  "_overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clea"
  "r_override\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022="
  "\n\tshift_cmd\030\005 \001(\0162*.apollo.canbus.Shift_"
  "cmd_128.Shift_cmdType\"\224\001\n\rShift_cmdType\022"
  "\022\n\016SHIFT_CMD_PARK\020\000\022\025\n\021SHIFT_CMD_REVERSE"
  "\020\001\022\025\n\021SHIFT_CMD_NEUTRAL\020\002\022\032\n\026SHIFT_CMD_F"
  "ORWARD_HIGH\020\003\022\021\n\rSHIFT_CMD_LOW\020\004\022\022\n\016SHIF"
  "T_CMD_NONE\020\007\"z\n\rAccel_cmd_100\022\030\n\020ignore_"
  "overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear"
  "_override\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\021\n"
  "\taccel_cmd\030\005 \001(\001\"\214\002\n\025Parking_brake_rpt_2"
  "24\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014pacmod_faul"
  "t\030\002 \001(\010\022\027\n\017override_active\030\003 \001(\010\022\035\n\025outp"
  "ut_reported_fault\030\004 \001(\010\022\032\n\022input_output_"
  "fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034\n\024command_"
  "output_fault\030\007 \001(\010\022\024\n\014output_value\030\010 \001(\010"
  "\022\027\n\017commanded_value\030\t \001(\010\022\024\n\014manual_inpu"
  "t\030\n \001(\010\"z\n\rBrake_cmd_104\022\030\n\020ignore_overr"
  "ides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_over"
  "ride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\021\n\tbrak"
  "e_cmd\030\005 \001(\001\"\226\013\n\026Media_controls_rpt_220\022L"
  "\n\014output_value\030\001 \001(\01626.apollo.canbus.Med"
  "ia_controls_rpt_220.Output_valueType\022R\n\017"
  "commanded_value\030\002 \001(\01629.apollo.canbus.Me"
  "dia_controls_rpt_220.Commanded_valueType"
  "\022L\n\014manual_input\030\003 \001(\01626.apollo.canbus.M"
  "edia_controls_rpt_220.Manual_inputType\022\025"
  "\n\rvehicle_fault\030\004 \001(\010\022\024\n\014pacmod_fault\030\005 "
  "\001(\010\022\027\n\017override_active\030\006 \001(\010\022\035\n\025output_r"
  "eported_fault\030\007 \001(\010\022\032\n\022input_output_faul"
  "t\030\010 \001(\010\022\017\n\007enabled\030\t \001(\010\022\034\n\024command_outp"
  "ut_fault\030\n \001(\010\"\277\002\n\020Output_valueType\022#\n\037O"
  "UTPUT_VALUE_MEDIA_CONTROL_NONE\020\000\022,\n(OUTP"
  "UT_VALUE_MEDIA_CONTROL_VOICE_COMMAND\020\001\022#"
  "\n\037OUTPUT_VALUE_MEDIA_CONTROL_MUTE\020\002\0220\n,O"
  "UTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANS"
  "WER\020\003\0221\n-OUTPUT_VALUE_MEDIA_CONTROL_NEXT"
  "_TRACK_HANG_UP\020\004\022%\n!OUTPUT_VALUE_MEDIA_C"
  "ONTROL_VOL_UP\020\005\022\'\n#OUTPUT_VALUE_MEDIA_CO"
  "NTROL_VOL_DOWN\020\006\"\327\002\n\023Commanded_valueType"
  "\022&\n\"COMMANDED_VALUE_MEDIA_CONTROL_NONE\020\000"
  "\022/\n+COMMANDED_VALUE_MEDIA_CONTROL_VOICE_"
  "COMMAND\020\001\022&\n\"COMMANDED_VALUE_MEDIA_CONTR"
  "OL_MUTE\020\002\0223\n/COMMANDED_VALUE_MEDIA_CONTR"
  "OL_PREV_TRACK_ANSWER\020\003\0224\n0COMMANDED_VALU"
  "E_MEDIA_CONTROL_NEXT_TRACK_HANG_UP\020\004\022(\n$"
  "COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP\020\005\022*"
  "\n&COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN"
  "\020\006\"\277\002\n\020Manual_inputType\022#\n\037MANUAL_INPUT_"
  "MEDIA_CONTROL_NONE\020\000\022,\n(MANUAL_INPUT_MED"
  "IA_CONTROL_VOICE_COMMAND\020\001\022#\n\037MANUAL_INP"
  "UT_MEDIA_CONTROL_MUTE\020\002\0220\n,MANUAL_INPUT_"
  "MEDIA_CONTROL_PREV_TRACK_ANSWER\020\003\0221\n-MAN"
  "UAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_"
  "UP\020\004\022%\n!MANUAL_INPUT_MEDIA_CONTROL_VOL_U"
  "P\020\005\022\'\n#MANUAL_INPUT_MEDIA_CONTROL_VOL_DO"
  "WN\020\006\"\360\001\n\024Steering_aux_rpt_32c\022!\n\031user_in"
  "teraction_is_valid\030\001 \001(\010\022\030\n\020user_interac"
  "tion\030\002 \001(\010\022\036\n\026rotation_rate_is_valid\030\003 \001"
  "(\010\022\025\n\rrotation_rate\030\004 \001(\001\022\033\n\023raw_torque_"
  "is_valid\030\005 \001(\010\022\022\n\nraw_torque\030\006 \001(\001\022\035\n\025ra"
  "w_position_is_valid\030\007 \001(\010\022\024\n\014raw_positio"
  "n\030\010 \001(\001\"\311\001\n\027Lat_lon_heading_rpt_40e\022\017\n\007h"
  "eading\030\001 \001(\001\022\031\n\021longitude_seconds\030\002 \001(\005\022"
  "\031\n\021longitude_minutes\030\003 \001(\005\022\031\n\021longitude_"
  "degrees\030\004 \001(\005\022\030\n\020latitude_seconds\030\005 \001(\005\022"
  "\030\n\020latitude_minutes\030\006 \001(\005\022\030\n\020latitude_de"
  "grees\030\007 \001(\005\"$\n\020Yaw_rate_rpt_40d\022\020\n\010yaw_r"
  "ate\030\001 \001(\001\"\211\001\n\021Date_time_rpt_40f\022\023\n\013time_"
  "second\030\001 \001(\005\022\023\n\013time_minute\030\002 \001(\005\022\021\n\ttim"
  "e_hour\030\003 \001(\005\022\020\n\010date_day\030\004 \001(\005\022\022\n\ndate_m"
  "onth\030\005 \001(\005\022\021\n\tdate_year\030\006 \001(\005\"L\n\013Vin_rpt"
  "_414\022\022\n\nveh_serial\030\001 \001(\005\022\023\n\013veh_my_code\030"
  "\002 \001(\005\022\024\n\014veh_mfg_code\030\003 \001(\005\"\263\003\n\021Occupanc"
  "y_rpt_415\022&\n\036rear_seatbelt_buckled_is_va"
  "lid\030\001 \001(\010\022&\n\036pass_seatbelt_buckled_is_va"
  "lid\030\002 \001(\010\022(\n driver_seatbelt_buckled_is_"
  "valid\030\003 \001(\010\022#\n\033rear_seat_occupied_is_val"
  "id\030\004 \001(\010\022#\n\033pass_seat_occupied_is_valid\030"
  "\005 \001(\010\022%\n\035driver_seat_occupied_is_valid\030\006"
  " \001(\010\022\035\n\025rear_seatbelt_buckled\030\007 \001(\010\022\035\n\025p"
  "ass_seatbelt_buckled\030\010 \001(\010\022\037\n\027driver_sea"
  "tbelt_buckled\030\t \001(\010\022\032\n\022rear_seat_occupie"
  "d\030\n \001(\010\022\032\n\022pass_seat_occupied\030\013 \001(\010\022\034\n\024d"
  "river_seat_occupied\030\014 \001(\010\"\266\005\n\027Interior_l"
  "ights_rpt_416\022\032\n\022dim_level_is_valid\030\001 \001("
  "\010\022\037\n\027mood_lights_on_is_valid\030\002 \001(\010\022$\n\034re"
  "ar_dome_lights_on_is_valid\030\003 \001(\010\022%\n\035fron"
  "t_dome_lights_on_is_valid\030\004 \001(\010\022G\n\tdim_l"
  "evel\030\005 \001(\01624.apollo.canbus.Interior_ligh"
  "ts_rpt_416.Dim_levelType\022\026\n\016mood_lights_"
  "on\030\006 \001(\010\022\033\n\023rear_dome_lights_on\030\007 \001(\010\022\034\n"
  "\024front_dome_lights_on\030\010 \001(\010\"\364\002\n\rDim_leve"
  "lType\022\033\n\027DIM_LEVEL_DIM_LEVEL_MIN\020\000\022\031\n\025DI"
  "M_LEVEL_DIM_LEVEL_1\020\001\022\031\n\025DIM_LEVEL_DIM_L"
  "EVEL_2\020\002\022\031\n\025DIM_LEVEL_DIM_LEVEL_3\020\003\022\031\n\025D"
  "IM_LEVEL_DIM_LEVEL_4\020\004\022\031\n\025DIM_LEVEL_DIM_"
  "LEVEL_5\020\005\022\031\n\025DIM_LEVEL_DIM_LEVEL_6\020\006\022\031\n\025"
  "DIM_LEVEL_DIM_LEVEL_7\020\007\022\031\n\025DIM_LEVEL_DIM"
  "_LEVEL_8\020\010\022\031\n\025DIM_LEVEL_DIM_LEVEL_9\020\t\022\032\n"
  "\026DIM_LEVEL_DIM_LEVEL_10\020\n\022\032\n\026DIM_LEVEL_D"
  "IM_LEVEL_11\020\013\022\033\n\027DIM_LEVEL_DIM_LEVEL_MAX"
  "\020\014\"\263\002\n\014Turn_cmd_130\022\030\n\020ignore_overrides\030"
  "\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_override\030"
  "\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022H\n\017turn_sign"
  "al_cmd\030\005 \001(\0162/.apollo.canbus.Turn_cmd_13"
  "0.Turn_signal_cmdType\"\200\001\n\023Turn_signal_cm"
  "dType\022\031\n\025TURN_SIGNAL_CMD_RIGHT\020\000\022\030\n\024TURN"
  "_SIGNAL_CMD_NONE\020\001\022\030\n\024TURN_SIGNAL_CMD_LE"
  "FT\020\002\022\032\n\026TURN_SIGNAL_CMD_HAZARD\020\003\"h\n\027Dete"
  "cted_object_rpt_411\022&\n\036front_object_dist"
  "ance_high_res\030\001 \001(\001\022%\n\035front_object_dist"
  "ance_low_res\030\002 \001(\001\"B\n\026Veh_specific_rpt_1"
  "_412\022\023\n\013shift_pos_2\030\001 \001(\005\022\023\n\013shift_pos_1"
  "\030\002 \001(\005\",\n\024Veh_dynamics_rpt_413\022\024\n\014veh_g_"
  "forces\030\001 \001(\001\"\217\001\n\023Rear_lights_rpt_418\022\"\n\032"
  "reverse_lights_on_is_valid\030\001 \001(\010\022 \n\030brak"
  "e_lights_on_is_valid\030\002 \001(\010\022\031\n\021reverse_li"
  "ghts_on\030\003 \001(\010\022\027\n\017brake_lights_on\030\004 \001(\010\"\227"
  "\034\n\005Lexus\022C\n\025hazard_lights_rpt_214\030\001 \001(\0132"
  "$.apollo.canbus.Hazard_lights_rpt_214\0229\n"
  "\020steering_cmd_12c\030\002 \001(\0132\037.apollo.canbus."
  "Steering_cmd_12c\022O\n\033dash_controls_right_"
  "rpt_210\030\003 \001(\0132*.apollo.canbus.Dash_contr"
  "ols_right_rpt_210\022M\n\032dash_controls_left_"
  "cmd_10c\030\004 \001(\0132).apollo.canbus.Dash_contr"
  "ols_left_cmd_10c\0229\n\020steering_rpt_22c\030\005 \001"
  "(\0132\037.apollo.canbus.Steering_rpt_22c\0229\n\020t"
  "urn_aux_rpt_330\030\006 \001(\0132\037.apollo.canbus.Tu"
  "rn_aux_rpt_330\022;\n\021headlight_rpt_218\030\007 \001("
  "\0132 .apollo.canbus.Headlight_rpt_218\022C\n\025h"
  "azard_lights_cmd_114\030\010 \001(\0132$.apollo.canb"
  "us.Hazard_lights_cmd_114\022M\n\032dash_control"
  "s_left_rpt_20c\030\t \001(\0132).apollo.canbus.Das"
  "h_controls_left_rpt_20c\022C\n\025headlight_aux"
  "_rpt_318\030\n \001(\0132$.apollo.canbus.Headlight"
  "_aux_rpt_318\022O\n\033dash_controls_right_cmd_"
  "110\030\013 \001(\0132*.apollo.canbus.Dash_controls_"
  "right_cmd_110\0223\n\rwiper_cmd_134\030\014 \001(\0132\034.a"
  "pollo.canbus.Wiper_cmd_134\0223\n\rwiper_rpt_"
  "234\030\r \001(\0132\034.apollo.canbus.Wiper_rpt_234\022"
  "1\n\014turn_rpt_230\030\016 \001(\0132\033.apollo.canbus.Tu"
  "rn_rpt_230\022;\n\021headlight_cmd_118\030\017 \001(\0132 ."
  "apollo.canbus.Headlight_cmd_118\0221\n\014door_"
  "rpt_417\030\020 \001(\0132\033.apollo.canbus.Door_rpt_4"
  "17\0229\n\020component_rpt_20\030\021 \001(\0132\037.apollo.ca"
  "nbus.Component_rpt_20\022\?\n\023wheel_speed_rpt"
  "_407\030\022 \001(\0132\".apollo.canbus.Wheel_speed_r"
  "pt_407\022I\n\030steering_motor_rpt_3_406\030\023 \001(\013"
  "2\'.apollo.canbus.Steering_motor_rpt_3_40"
  "6\022I\n\030steering_motor_rpt_2_405\030\024 \001(\0132\'.ap"
  "ollo.canbus.Steering_motor_rpt_2_405\022I\n\030"
  "steering_motor_rpt_1_404\030\025 \001(\0132\'.apollo."
  "canbus.Steering_motor_rpt_1_404\022C\n\025brake"
  "_motor_rpt_3_403\030\026 \001(\0132$.apollo.canbus.B"
  "rake_motor_rpt_3_403\022C\n\025brake_motor_rpt_"
  "2_402\030\027 \001(\0132$.apollo.canbus.Brake_motor_"
  "rpt_2_402\022C\n\025brake_motor_rpt_1_401\030\030 \001(\013"
  "2$.apollo.canbus.Brake_motor_rpt_1_401\022;"
  "\n\021wiper_aux_rpt_334\030\031 \001(\0132 .apollo.canbu"
  "s.Wiper_aux_rpt_334\022;\n\021shift_aux_rpt_328"
  "\030\032 \001(\0132 .apollo.canbus.Shift_aux_rpt_328"
  "\0223\n\raccel_rpt_200\030\033 \001(\0132\034.apollo.canbus."
  "Accel_rpt_200\0223\n\rbrake_rpt_204\030\034 \001(\0132\034.a"
  "pollo.canbus.Brake_rpt_204\0221\n\014horn_cmd_1"
  "1c\030\035 \001(\0132\033.apollo.canbus.Horn_cmd_11c\0223\n"
  "\rglobal_rpt_10\030\036 \001(\0132\034.apollo.canbus.Glo"
  "bal_rpt_10\022;\n\021accel_aux_rpt_300\030\037 \001(\0132 ."
  "apollo.canbus.Accel_aux_rpt_300\022U\n\036cruis"
  "e_control_buttons_rpt_208\030  \001(\0132-.apollo"
  ".canbus.Cruise_control_buttons_rpt_208\022C"
  "\n\025vehicle_speed_rpt_400\030! \001(\0132$.apollo.c"
  "anbus.Vehicle_speed_rpt_400\022;\n\021brake_aux"
  "_rpt_304\030\" \001(\0132 .apollo.canbus.Brake_aux"
  "_rpt_304\022E\n\026media_controls_cmd_120\030# \001(\013"
  "2%.apollo.canbus.Media_controls_cmd_120\022"
  "U\n\036cruise_control_buttons_cmd_108\030$ \001(\0132"
  "-.apollo.canbus.Cruise_control_buttons_c"
  "md_108\022C\n\025parking_brake_cmd_124\030% \001(\0132$."
  "apollo.canbus.Parking_brake_cmd_124\0221\n\014h"
  "orn_rpt_21c\030& \001(\0132\033.apollo.canbus.Horn_r"
  "pt_21c\0223\n\rshift_rpt_228\030\' \001(\0132\034.apollo.c"
  "anbus.Shift_rpt_228\0223\n\rshift_cmd_128\030( \001"
  "(\0132\034.apollo.canbus.Shift_cmd_128\0223\n\racce"
  "l_cmd_100\030) \001(\0132\034.apollo.canbus.Accel_cm"
  "d_100\022C\n\025parking_brake_rpt_224\030* \001(\0132$.a"
  "pollo.canbus.Parking_brake_rpt_224\0223\n\rbr"
  "ake_cmd_104\030+ \001(\0132\034.apollo.canbus.Brake_"
  "cmd_104\022E\n\026media_controls_rpt_220\030, \001(\0132"
  "%.apollo.canbus.Media_controls_rpt_220\022A"
  "\n\024steering_aux_rpt_32c\030- \001(\0132#.apollo.ca"
  "nbus.Steering_aux_rpt_32c\022G\n\027lat_lon_hea"
  "ding_rpt_40e\030. \001(\0132&.apollo.canbus.Lat_l"
  "on_heading_rpt_40e\0229\n\020yaw_rate_rpt_40d\030/"
  " \001(\0132\037.apollo.canbus.Yaw_rate_rpt_40d\022;\n"
  "\021date_time_rpt_40f\0300 \001(\0132 .apollo.canbus"
  ".Date_time_rpt_40f\022/\n\013vin_rpt_414\0301 \001(\0132"
  "\032.apollo.canbus.Vin_rpt_414\022;\n\021occupancy"
  "_rpt_415\0302 \001(\0132 .apollo.canbus.Occupancy"
  "_rpt_415\022G\n\027interior_lights_rpt_416\0303 \001("
  "\0132&.apollo.canbus.Interior_lights_rpt_41"
  "6\0221\n\014turn_cmd_130\0304 \001(\0132\033.apollo.canbus."
  "Turn_cmd_130\022G\n\027detected_object_rpt_411\030"
  "5 \001(\0132&.apollo.canbus.Detected_object_rp"
  "t_411\022E\n\026veh_specific_rpt_1_412\0306 \001(\0132%."
  "apollo.canbus.Veh_specific_rpt_1_412\022A\n\024"
  "veh_dynamics_rpt_413\0307 \001(\0132#.apollo.canb"
  "us.Veh_dynamics_rpt_413\022\?\n\023rear_lights_r"
  "pt_418\0308 \001(\0132\".apollo.canbus.Rear_lights"
  "_rpt_418"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto = {
    false, false, 25848, descriptor_table_protodef_modules_2fcanbus_2fproto_2flexus_2eproto,
    "modules/canbus/proto/lexus.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once, nullptr, 0, 57,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2flexus_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[0];
}
bool Dash_controls_right_rpt_210_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::Output_valueType_MIN;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::Output_valueType_MAX;
constexpr int Dash_controls_right_rpt_210::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[1];
}
bool Dash_controls_right_rpt_210_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::Commanded_valueType_MIN;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::Commanded_valueType_MAX;
constexpr int Dash_controls_right_rpt_210::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[2];
}
bool Dash_controls_right_rpt_210_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::Manual_inputType_MIN;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::Manual_inputType_MAX;
constexpr int Dash_controls_right_rpt_210::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[3];
}
bool Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::Dash_controls_buttonType_MIN;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::Dash_controls_buttonType_MAX;
constexpr int Dash_controls_left_cmd_10c::Dash_controls_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[4];
}
bool Headlight_rpt_218_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::Output_valueType_MIN;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::Output_valueType_MAX;
constexpr int Headlight_rpt_218::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[5];
}
bool Headlight_rpt_218_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_LOW_BEAMS;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_HIGH_BEAMS;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::Manual_inputType_MIN;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::Manual_inputType_MAX;
constexpr int Headlight_rpt_218::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[6];
}
bool Headlight_rpt_218_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::Commanded_valueType_MIN;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::Commanded_valueType_MAX;
constexpr int Headlight_rpt_218::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[7];
}
bool Dash_controls_left_rpt_20c_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::Output_valueType_MIN;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::Output_valueType_MAX;
constexpr int Dash_controls_left_rpt_20c::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[8];
}
bool Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::Commanded_valueType_MIN;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::Commanded_valueType_MAX;
constexpr int Dash_controls_left_rpt_20c::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[9];
}
bool Dash_controls_left_rpt_20c_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::Manual_inputType_MIN;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::Manual_inputType_MAX;
constexpr int Dash_controls_left_rpt_20c::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_aux_rpt_318_Headlights_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[10];
}
bool Headlight_aux_rpt_318_Headlights_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_OFF;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::Headlights_modeType_MIN;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::Headlights_modeType_MAX;
constexpr int Headlight_aux_rpt_318::Headlights_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[11];
}
bool Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::Dash_controls_buttonType_MIN;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::Dash_controls_buttonType_MAX;
constexpr int Dash_controls_right_cmd_110::Dash_controls_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_cmd_134_Wiper_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[12];
}
bool Wiper_cmd_134_Wiper_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_WIPERS_OFF;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_1;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_2;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_3;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_4;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_5;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_LOW;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_HIGH;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::Wiper_cmdType_MIN;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::Wiper_cmdType_MAX;
constexpr int Wiper_cmd_134::Wiper_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[13];
}
bool Wiper_rpt_234_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_LOW;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_HIGH;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::Output_valueType_MIN;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::Output_valueType_MAX;
constexpr int Wiper_rpt_234::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[14];
}
bool Wiper_rpt_234_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_LOW;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_HIGH;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::Commanded_valueType_MIN;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::Commanded_valueType_MAX;
constexpr int Wiper_rpt_234::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[15];
}
bool Wiper_rpt_234_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_WIPERS_OFF;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_1;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_2;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_3;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_4;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_5;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_LOW;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_HIGH;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::Manual_inputType_MIN;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::Manual_inputType_MAX;
constexpr int Wiper_rpt_234::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[16];
}
bool Turn_rpt_230_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_RIGHT;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_NONE;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_LEFT;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_HAZARD;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::Manual_inputType_MIN;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::Manual_inputType_MAX;
constexpr int Turn_rpt_230::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[17];
}
bool Turn_rpt_230_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_RIGHT;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_NONE;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_LEFT;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_HAZARD;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::Commanded_valueType_MIN;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::Commanded_valueType_MAX;
constexpr int Turn_rpt_230::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[18];
}
bool Turn_rpt_230_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_RIGHT;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_NONE;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_LEFT;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_HAZARD;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::Output_valueType_MIN;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::Output_valueType_MAX;
constexpr int Turn_rpt_230::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_cmd_118_Headlight_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[19];
}
bool Headlight_cmd_118_Headlight_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_HEADLIGHTS_OFF;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_LOW_BEAMS;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_HIGH_BEAMS;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::Headlight_cmdType_MIN;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::Headlight_cmdType_MAX;
constexpr int Headlight_cmd_118::Headlight_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_typeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[20];
}
bool Component_rpt_20_Component_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMOD;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMINI;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMICRO;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::Component_typeType_MIN;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::Component_typeType_MAX;
constexpr int Component_rpt_20::Component_typeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_funcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[21];
}
bool Component_rpt_20_Component_funcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_PACMOD;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_ACCELERATOR_AND_BRAKING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_BRAKING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_SHIFTING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_STEERING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_E_SHIFTER;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_WATCHDOG;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::Component_funcType_MIN;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::Component_funcType_MAX;
constexpr int Component_rpt_20::Component_funcType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_cmd_11c_Horn_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[22];
}
bool Horn_cmd_11c_Horn_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::HORN_CMD_OFF;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::HORN_CMD_ON;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::Horn_cmdType_MIN;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::Horn_cmdType_MAX;
constexpr int Horn_cmd_11c::Horn_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_enabledType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[23];
}
bool Global_rpt_10_Pacmod_system_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::Pacmod_system_enabledType_MIN;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::Pacmod_system_enabledType_MAX;
constexpr int Global_rpt_10::Pacmod_system_enabledType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_override_activeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[24];
}
bool Global_rpt_10_Pacmod_system_override_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::Pacmod_system_override_activeType_MIN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::Pacmod_system_override_activeType_MAX;
constexpr int Global_rpt_10::Pacmod_system_override_activeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Brk_can_timeoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[25];
}
bool Global_rpt_10_Brk_can_timeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::Brk_can_timeoutType_MIN;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::Brk_can_timeoutType_MAX;
constexpr int Global_rpt_10::Brk_can_timeoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[26];
}
bool Cruise_control_buttons_rpt_208_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::Output_valueType_MIN;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::Output_valueType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[27];
}
bool Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::Manual_inputType_MIN;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::Manual_inputType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[28];
}
bool Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::Commanded_valueType_MIN;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::Commanded_valueType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[29];
}
bool Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::VEHICLE_SPEED_VALID_INVALID;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::VEHICLE_SPEED_VALID_VALID;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::Vehicle_speed_validType_MIN;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::Vehicle_speed_validType_MAX;
constexpr int Vehicle_speed_rpt_400::Vehicle_speed_validType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_cmd_120_Media_controls_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[30];
}
bool Media_controls_cmd_120_Media_controls_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::Media_controls_cmdType_MIN;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::Media_controls_cmdType_MAX;
constexpr int Media_controls_cmd_120::Media_controls_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[31];
}
bool Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::Cruise_control_buttonType_MIN;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::Cruise_control_buttonType_MAX;
constexpr int Cruise_control_buttons_cmd_108::Cruise_control_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[32];
}
bool Horn_rpt_21c_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::OUTPUT_VALUE_OFF;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::OUTPUT_VALUE_ON;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::Output_valueType_MIN;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::Output_valueType_MAX;
constexpr int Horn_rpt_21c::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[33];
}
bool Horn_rpt_21c_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::COMMANDED_VALUE_OFF;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::COMMANDED_VALUE_ON;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::Commanded_valueType_MIN;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::Commanded_valueType_MAX;
constexpr int Horn_rpt_21c::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[34];
}
bool Horn_rpt_21c_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::MANUAL_INPUT_OFF;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::MANUAL_INPUT_ON;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::Manual_inputType_MIN;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::Manual_inputType_MAX;
constexpr int Horn_rpt_21c::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[35];
}
bool Shift_rpt_228_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_PARK;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_REVERSE;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_NEUTRAL;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_FORWARD_HIGH;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_LOW;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_BETWEEN_GEARS;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_ERROR;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_NONE;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::Manual_inputType_MIN;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::Manual_inputType_MAX;
constexpr int Shift_rpt_228::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[36];
}
bool Shift_rpt_228_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_PARK;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_REVERSE;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_NEUTRAL;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_FORWARD_HIGH;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_LOW;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_NONE;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::Commanded_valueType_MIN;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::Commanded_valueType_MAX;
constexpr int Shift_rpt_228::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[37];
}
bool Shift_rpt_228_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_PARK;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_REVERSE;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_NEUTRAL;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_FORWARD_HIGH;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_LOW;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_BETWEEN_GEARS;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_ERROR;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_NONE;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::Output_valueType_MIN;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::Output_valueType_MAX;
constexpr int Shift_rpt_228::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_cmd_128_Shift_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[38];
}
bool Shift_cmd_128_Shift_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_PARK;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_REVERSE;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_NEUTRAL;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_FORWARD_HIGH;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_LOW;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_NONE;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::Shift_cmdType_MIN;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::Shift_cmdType_MAX;
constexpr int Shift_cmd_128::Shift_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[39];
}
bool Media_controls_rpt_220_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::Output_valueType_MIN;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::Output_valueType_MAX;
constexpr int Media_controls_rpt_220::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[40];
}
bool Media_controls_rpt_220_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::Commanded_valueType_MIN;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::Commanded_valueType_MAX;
constexpr int Media_controls_rpt_220::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[41];
}
bool Media_controls_rpt_220_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::Manual_inputType_MIN;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::Manual_inputType_MAX;
constexpr int Media_controls_rpt_220::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interior_lights_rpt_416_Dim_levelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[42];
}
bool Interior_lights_rpt_416_Dim_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_MIN;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_1;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_2;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_3;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_4;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_5;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_6;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_7;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_8;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_9;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_10;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_11;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_MAX;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::Dim_levelType_MIN;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::Dim_levelType_MAX;
constexpr int Interior_lights_rpt_416::Dim_levelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_cmd_130_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[43];
}
bool Turn_cmd_130_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_RIGHT;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_NONE;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_LEFT;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_HAZARD;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::Turn_signal_cmdType_MIN;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::Turn_signal_cmdType_MAX;
constexpr int Turn_cmd_130::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Hazard_lights_rpt_214::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard_lights_rpt_214>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Hazard_lights_rpt_214::Hazard_lights_rpt_214(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Hazard_lights_rpt_214)
}
Hazard_lights_rpt_214::Hazard_lights_rpt_214(const Hazard_lights_rpt_214& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_output_fault_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Hazard_lights_rpt_214)
}

inline void Hazard_lights_rpt_214::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){false}
    , decltype(_impl_.commanded_value_){false}
    , decltype(_impl_.manual_input_){false}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
  };
}

Hazard_lights_rpt_214::~Hazard_lights_rpt_214() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Hazard_lights_rpt_214)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hazard_lights_rpt_214::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Hazard_lights_rpt_214::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hazard_lights_rpt_214::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Hazard_lights_rpt_214)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_output_fault_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.command_output_fault_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.command_output_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hazard_lights_rpt_214::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hazard_lights_rpt_214::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Hazard_lights_rpt_214)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_output_value(), target);
  }

  // optional bool commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_commanded_value(), target);
  }

  // optional bool manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Hazard_lights_rpt_214)
  return target;
}

size_t Hazard_lights_rpt_214::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Hazard_lights_rpt_214)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hazard_lights_rpt_214::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hazard_lights_rpt_214::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hazard_lights_rpt_214::GetClassData() const { return &_class_data_; }

void Hazard_lights_rpt_214::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hazard_lights_rpt_214 *>(to)->MergeFrom(
      static_cast<const Hazard_lights_rpt_214 &>(from));
}


void Hazard_lights_rpt_214::MergeFrom(const Hazard_lights_rpt_214& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Hazard_lights_rpt_214)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard_lights_rpt_214::CopyFrom(const Hazard_lights_rpt_214& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Hazard_lights_rpt_214)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard_lights_rpt_214::IsInitialized() const {
  return true;
}

void Hazard_lights_rpt_214::InternalSwap(Hazard_lights_rpt_214* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard_lights_rpt_214, _impl_.command_output_fault_)
      + sizeof(Hazard_lights_rpt_214::_impl_.command_output_fault_)
      - PROTOBUF_FIELD_OFFSET(Hazard_lights_rpt_214, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hazard_lights_rpt_214::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[0]);
}

// ===================================================================

class Steering_cmd_12c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_cmd_12c>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_cmd_12c::Steering_cmd_12c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_cmd_12c)
}
Steering_cmd_12c::Steering_cmd_12c(const Steering_cmd_12c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){}
    , decltype(_impl_.rotation_rate_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_cmd_12c)
}

inline void Steering_cmd_12c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.rotation_rate_){0}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Steering_cmd_12c::~Steering_cmd_12c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_cmd_12c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_cmd_12c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_cmd_12c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_cmd_12c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_cmd_12c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_cmd_12c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_position(&has_bits);
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rotation_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_rotation_rate(&has_bits);
          _impl_.rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_cmd_12c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_cmd_12c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_position(), target);
  }

  // optional double rotation_rate = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_rotation_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_cmd_12c)
  return target;
}

size_t Steering_cmd_12c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_cmd_12c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rotation_rate = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_cmd_12c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_cmd_12c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_cmd_12c::GetClassData() const { return &_class_data_; }

void Steering_cmd_12c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_cmd_12c *>(to)->MergeFrom(
      static_cast<const Steering_cmd_12c &>(from));
}


void Steering_cmd_12c::MergeFrom(const Steering_cmd_12c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_cmd_12c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.position_ = from._impl_.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rotation_rate_ = from._impl_.rotation_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_cmd_12c::CopyFrom(const Steering_cmd_12c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_cmd_12c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_cmd_12c::IsInitialized() const {
  return true;
}

void Steering_cmd_12c::InternalSwap(Steering_cmd_12c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_cmd_12c, _impl_.clear_faults_)
      + sizeof(Steering_cmd_12c::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Steering_cmd_12c, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_cmd_12c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[1]);
}

// ===================================================================

class Dash_controls_right_rpt_210::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_right_rpt_210>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Dash_controls_right_rpt_210::Dash_controls_right_rpt_210(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Dash_controls_right_rpt_210)
}
Dash_controls_right_rpt_210::Dash_controls_right_rpt_210(const Dash_controls_right_rpt_210& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_right_rpt_210)
}

inline void Dash_controls_right_rpt_210::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.manual_input_){0}
  };
}

Dash_controls_right_rpt_210::~Dash_controls_right_rpt_210() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_right_rpt_210)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dash_controls_right_rpt_210::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dash_controls_right_rpt_210::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dash_controls_right_rpt_210::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_right_rpt_210)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.enabled_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.command_output_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.command_output_fault_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dash_controls_right_rpt_210::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dash_controls_right_rpt_210::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_right_rpt_210)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional bool vehicle_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_right_rpt_210)
  return target;
}

size_t Dash_controls_right_rpt_210::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_right_rpt_210)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional bool vehicle_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool command_output_fault = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dash_controls_right_rpt_210::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dash_controls_right_rpt_210::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dash_controls_right_rpt_210::GetClassData() const { return &_class_data_; }

void Dash_controls_right_rpt_210::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dash_controls_right_rpt_210 *>(to)->MergeFrom(
      static_cast<const Dash_controls_right_rpt_210 &>(from));
}


void Dash_controls_right_rpt_210::MergeFrom(const Dash_controls_right_rpt_210& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dash_controls_right_rpt_210::CopyFrom(const Dash_controls_right_rpt_210& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_right_rpt_210::IsInitialized() const {
  return true;
}

void Dash_controls_right_rpt_210::InternalSwap(Dash_controls_right_rpt_210* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dash_controls_right_rpt_210, _impl_.manual_input_)
      + sizeof(Dash_controls_right_rpt_210::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Dash_controls_right_rpt_210, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_right_rpt_210::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[2]);
}

// ===================================================================

class Dash_controls_left_cmd_10c::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_left_cmd_10c>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dash_controls_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Dash_controls_left_cmd_10c::Dash_controls_left_cmd_10c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Dash_controls_left_cmd_10c)
}
Dash_controls_left_cmd_10c::Dash_controls_left_cmd_10c(const Dash_controls_left_cmd_10c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.dash_controls_button_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dash_controls_button_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.dash_controls_button_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_left_cmd_10c)
}

inline void Dash_controls_left_cmd_10c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.dash_controls_button_){0}
  };
}

Dash_controls_left_cmd_10c::~Dash_controls_left_cmd_10c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_left_cmd_10c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dash_controls_left_cmd_10c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dash_controls_left_cmd_10c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dash_controls_left_cmd_10c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_left_cmd_10c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dash_controls_button_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.dash_controls_button_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dash_controls_left_cmd_10c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(val))) {
            _internal_set_dash_controls_button(static_cast<::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dash_controls_left_cmd_10c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_left_cmd_10c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dash_controls_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_left_cmd_10c)
  return target;
}

size_t Dash_controls_left_cmd_10c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_left_cmd_10c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dash_controls_button());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dash_controls_left_cmd_10c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dash_controls_left_cmd_10c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dash_controls_left_cmd_10c::GetClassData() const { return &_class_data_; }

void Dash_controls_left_cmd_10c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dash_controls_left_cmd_10c *>(to)->MergeFrom(
      static_cast<const Dash_controls_left_cmd_10c &>(from));
}


void Dash_controls_left_cmd_10c::MergeFrom(const Dash_controls_left_cmd_10c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dash_controls_button_ = from._impl_.dash_controls_button_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dash_controls_left_cmd_10c::CopyFrom(const Dash_controls_left_cmd_10c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_left_cmd_10c::IsInitialized() const {
  return true;
}

void Dash_controls_left_cmd_10c::InternalSwap(Dash_controls_left_cmd_10c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dash_controls_left_cmd_10c, _impl_.dash_controls_button_)
      + sizeof(Dash_controls_left_cmd_10c::_impl_.dash_controls_button_)
      - PROTOBUF_FIELD_OFFSET(Dash_controls_left_cmd_10c, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_left_cmd_10c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[3]);
}

// ===================================================================

class Steering_rpt_22c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_rpt_22c>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Steering_rpt_22c::Steering_rpt_22c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_rpt_22c)
}
Steering_rpt_22c::Steering_rpt_22c(const Steering_rpt_22c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_rpt_22c)
}

inline void Steering_rpt_22c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Steering_rpt_22c::~Steering_rpt_22c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_rpt_22c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_rpt_22c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_rpt_22c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_rpt_22c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_rpt_22c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_rpt_22c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_rpt_22c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_rpt_22c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_rpt_22c)
  return target;
}

size_t Steering_rpt_22c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_rpt_22c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_rpt_22c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_rpt_22c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_rpt_22c::GetClassData() const { return &_class_data_; }

void Steering_rpt_22c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_rpt_22c *>(to)->MergeFrom(
      static_cast<const Steering_rpt_22c &>(from));
}


void Steering_rpt_22c::MergeFrom(const Steering_rpt_22c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_rpt_22c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_rpt_22c::CopyFrom(const Steering_rpt_22c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_rpt_22c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_rpt_22c::IsInitialized() const {
  return true;
}

void Steering_rpt_22c::InternalSwap(Steering_rpt_22c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_rpt_22c, _impl_.output_value_)
      + sizeof(Steering_rpt_22c::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Steering_rpt_22c, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_rpt_22c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[4]);
}

// ===================================================================

class Turn_aux_rpt_330::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_aux_rpt_330>()._impl_._has_bits_);
  static void set_has_pass_blinker_bulb_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_blinker_bulb_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driver_blinker_bulb_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver_blinker_bulb_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Turn_aux_rpt_330::Turn_aux_rpt_330(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turn_aux_rpt_330)
}
Turn_aux_rpt_330::Turn_aux_rpt_330(const Turn_aux_rpt_330& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_blinker_bulb_on_is_valid_){}
    , decltype(_impl_.pass_blinker_bulb_on_){}
    , decltype(_impl_.driver_blinker_bulb_on_is_valid_){}
    , decltype(_impl_.driver_blinker_bulb_on_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pass_blinker_bulb_on_is_valid_, &from._impl_.pass_blinker_bulb_on_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.driver_blinker_bulb_on_) -
    reinterpret_cast<char*>(&_impl_.pass_blinker_bulb_on_is_valid_)) + sizeof(_impl_.driver_blinker_bulb_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_aux_rpt_330)
}

inline void Turn_aux_rpt_330::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_blinker_bulb_on_is_valid_){false}
    , decltype(_impl_.pass_blinker_bulb_on_){false}
    , decltype(_impl_.driver_blinker_bulb_on_is_valid_){false}
    , decltype(_impl_.driver_blinker_bulb_on_){false}
  };
}

Turn_aux_rpt_330::~Turn_aux_rpt_330() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_aux_rpt_330)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turn_aux_rpt_330::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turn_aux_rpt_330::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turn_aux_rpt_330::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_aux_rpt_330)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pass_blinker_bulb_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.driver_blinker_bulb_on_) -
      reinterpret_cast<char*>(&_impl_.pass_blinker_bulb_on_is_valid_)) + sizeof(_impl_.driver_blinker_bulb_on_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turn_aux_rpt_330::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool pass_blinker_bulb_on_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pass_blinker_bulb_on_is_valid(&has_bits);
          _impl_.pass_blinker_bulb_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_blinker_bulb_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pass_blinker_bulb_on(&has_bits);
          _impl_.pass_blinker_bulb_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_blinker_bulb_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_driver_blinker_bulb_on_is_valid(&has_bits);
          _impl_.driver_blinker_bulb_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_blinker_bulb_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_driver_blinker_bulb_on(&has_bits);
          _impl_.driver_blinker_bulb_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turn_aux_rpt_330::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_aux_rpt_330)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool pass_blinker_bulb_on_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_pass_blinker_bulb_on_is_valid(), target);
  }

  // optional bool pass_blinker_bulb_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pass_blinker_bulb_on(), target);
  }

  // optional bool driver_blinker_bulb_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_blinker_bulb_on_is_valid(), target);
  }

  // optional bool driver_blinker_bulb_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_driver_blinker_bulb_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_aux_rpt_330)
  return target;
}

size_t Turn_aux_rpt_330::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_aux_rpt_330)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool pass_blinker_bulb_on_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pass_blinker_bulb_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_blinker_bulb_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool driver_blinker_bulb_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turn_aux_rpt_330::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turn_aux_rpt_330::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turn_aux_rpt_330::GetClassData() const { return &_class_data_; }

void Turn_aux_rpt_330::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turn_aux_rpt_330 *>(to)->MergeFrom(
      static_cast<const Turn_aux_rpt_330 &>(from));
}


void Turn_aux_rpt_330::MergeFrom(const Turn_aux_rpt_330& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_aux_rpt_330)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pass_blinker_bulb_on_is_valid_ = from._impl_.pass_blinker_bulb_on_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pass_blinker_bulb_on_ = from._impl_.pass_blinker_bulb_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.driver_blinker_bulb_on_is_valid_ = from._impl_.driver_blinker_bulb_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.driver_blinker_bulb_on_ = from._impl_.driver_blinker_bulb_on_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turn_aux_rpt_330::CopyFrom(const Turn_aux_rpt_330& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_aux_rpt_330)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_aux_rpt_330::IsInitialized() const {
  return true;
}

void Turn_aux_rpt_330::InternalSwap(Turn_aux_rpt_330* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Turn_aux_rpt_330, _impl_.driver_blinker_bulb_on_)
      + sizeof(Turn_aux_rpt_330::_impl_.driver_blinker_bulb_on_)
      - PROTOBUF_FIELD_OFFSET(Turn_aux_rpt_330, _impl_.pass_blinker_bulb_on_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.pass_blinker_bulb_on_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.pass_blinker_bulb_on_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_aux_rpt_330::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[5]);
}

// ===================================================================

class Headlight_rpt_218::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_rpt_218>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Headlight_rpt_218::Headlight_rpt_218(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Headlight_rpt_218)
}
Headlight_rpt_218::Headlight_rpt_218(const Headlight_rpt_218& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commanded_value_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.commanded_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_rpt_218)
}

inline void Headlight_rpt_218::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
  };
}

Headlight_rpt_218::~Headlight_rpt_218() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_rpt_218)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Headlight_rpt_218::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headlight_rpt_218::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Headlight_rpt_218::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_rpt_218)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.commanded_value_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.commanded_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headlight_rpt_218::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Headlight_rpt_218_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Headlight_rpt_218_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Headlight_rpt_218_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Headlight_rpt_218::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_rpt_218)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_commanded_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_rpt_218)
  return target;
}

size_t Headlight_rpt_218::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_rpt_218)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headlight_rpt_218::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headlight_rpt_218::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headlight_rpt_218::GetClassData() const { return &_class_data_; }

void Headlight_rpt_218::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headlight_rpt_218 *>(to)->MergeFrom(
      static_cast<const Headlight_rpt_218 &>(from));
}


void Headlight_rpt_218::MergeFrom(const Headlight_rpt_218& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_rpt_218)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headlight_rpt_218::CopyFrom(const Headlight_rpt_218& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_rpt_218)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_rpt_218::IsInitialized() const {
  return true;
}

void Headlight_rpt_218::InternalSwap(Headlight_rpt_218* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Headlight_rpt_218, _impl_.commanded_value_)
      + sizeof(Headlight_rpt_218::_impl_.commanded_value_)
      - PROTOBUF_FIELD_OFFSET(Headlight_rpt_218, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_rpt_218::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[6]);
}

// ===================================================================

class Hazard_lights_cmd_114::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard_lights_cmd_114>()._impl_._has_bits_);
  static void set_has_hazard_lights_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Hazard_lights_cmd_114::Hazard_lights_cmd_114(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Hazard_lights_cmd_114)
}
Hazard_lights_cmd_114::Hazard_lights_cmd_114(const Hazard_lights_cmd_114& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hazard_lights_cmd_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hazard_lights_cmd_, &from._impl_.hazard_lights_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.hazard_lights_cmd_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Hazard_lights_cmd_114)
}

inline void Hazard_lights_cmd_114::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hazard_lights_cmd_){false}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Hazard_lights_cmd_114::~Hazard_lights_cmd_114() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Hazard_lights_cmd_114)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hazard_lights_cmd_114::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Hazard_lights_cmd_114::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hazard_lights_cmd_114::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Hazard_lights_cmd_114)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.hazard_lights_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.hazard_lights_cmd_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hazard_lights_cmd_114::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool hazard_lights_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hazard_lights_cmd(&has_bits);
          _impl_.hazard_lights_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hazard_lights_cmd_114::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Hazard_lights_cmd_114)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool hazard_lights_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_hazard_lights_cmd(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool enable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Hazard_lights_cmd_114)
  return target;
}

size_t Hazard_lights_cmd_114::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Hazard_lights_cmd_114)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool hazard_lights_cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hazard_lights_cmd_114::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hazard_lights_cmd_114::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hazard_lights_cmd_114::GetClassData() const { return &_class_data_; }

void Hazard_lights_cmd_114::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hazard_lights_cmd_114 *>(to)->MergeFrom(
      static_cast<const Hazard_lights_cmd_114 &>(from));
}


void Hazard_lights_cmd_114::MergeFrom(const Hazard_lights_cmd_114& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Hazard_lights_cmd_114)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hazard_lights_cmd_ = from._impl_.hazard_lights_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hazard_lights_cmd_114::CopyFrom(const Hazard_lights_cmd_114& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Hazard_lights_cmd_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard_lights_cmd_114::IsInitialized() const {
  return true;
}

void Hazard_lights_cmd_114::InternalSwap(Hazard_lights_cmd_114* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hazard_lights_cmd_114, _impl_.clear_faults_)
      + sizeof(Hazard_lights_cmd_114::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Hazard_lights_cmd_114, _impl_.hazard_lights_cmd_)>(
          reinterpret_cast<char*>(&_impl_.hazard_lights_cmd_),
          reinterpret_cast<char*>(&other->_impl_.hazard_lights_cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hazard_lights_cmd_114::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[7]);
}

// ===================================================================

class Dash_controls_left_rpt_20c::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_left_rpt_20c>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Dash_controls_left_rpt_20c::Dash_controls_left_rpt_20c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Dash_controls_left_rpt_20c)
}
Dash_controls_left_rpt_20c::Dash_controls_left_rpt_20c(const Dash_controls_left_rpt_20c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_output_fault_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_left_rpt_20c)
}

inline void Dash_controls_left_rpt_20c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
  };
}

Dash_controls_left_rpt_20c::~Dash_controls_left_rpt_20c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_left_rpt_20c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dash_controls_left_rpt_20c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dash_controls_left_rpt_20c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dash_controls_left_rpt_20c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_left_rpt_20c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_output_fault_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.command_output_fault_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.command_output_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dash_controls_left_rpt_20c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dash_controls_left_rpt_20c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_left_rpt_20c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_left_rpt_20c)
  return target;
}

size_t Dash_controls_left_rpt_20c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_left_rpt_20c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dash_controls_left_rpt_20c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dash_controls_left_rpt_20c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dash_controls_left_rpt_20c::GetClassData() const { return &_class_data_; }

void Dash_controls_left_rpt_20c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dash_controls_left_rpt_20c *>(to)->MergeFrom(
      static_cast<const Dash_controls_left_rpt_20c &>(from));
}


void Dash_controls_left_rpt_20c::MergeFrom(const Dash_controls_left_rpt_20c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dash_controls_left_rpt_20c::CopyFrom(const Dash_controls_left_rpt_20c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_left_rpt_20c::IsInitialized() const {
  return true;
}

void Dash_controls_left_rpt_20c::InternalSwap(Dash_controls_left_rpt_20c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dash_controls_left_rpt_20c, _impl_.command_output_fault_)
      + sizeof(Dash_controls_left_rpt_20c::_impl_.command_output_fault_)
      - PROTOBUF_FIELD_OFFSET(Dash_controls_left_rpt_20c, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_left_rpt_20c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[8]);
}

// ===================================================================

class Headlight_aux_rpt_318::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_aux_rpt_318>()._impl_._has_bits_);
  static void set_has_headlights_mode_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_headlights_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fog_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fog_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headlights_on_bright_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_headlights_on_bright(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_headlights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_headlights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Headlight_aux_rpt_318::Headlight_aux_rpt_318(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Headlight_aux_rpt_318)
}
Headlight_aux_rpt_318::Headlight_aux_rpt_318(const Headlight_aux_rpt_318& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headlights_mode_){}
    , decltype(_impl_.headlights_mode_is_valid_){}
    , decltype(_impl_.fog_lights_on_is_valid_){}
    , decltype(_impl_.fog_lights_on_){}
    , decltype(_impl_.headlights_on_bright_is_valid_){}
    , decltype(_impl_.headlights_on_bright_){}
    , decltype(_impl_.headlights_on_is_valid_){}
    , decltype(_impl_.headlights_on_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.headlights_mode_, &from._impl_.headlights_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.headlights_on_) -
    reinterpret_cast<char*>(&_impl_.headlights_mode_)) + sizeof(_impl_.headlights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_aux_rpt_318)
}

inline void Headlight_aux_rpt_318::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headlights_mode_){0}
    , decltype(_impl_.headlights_mode_is_valid_){false}
    , decltype(_impl_.fog_lights_on_is_valid_){false}
    , decltype(_impl_.fog_lights_on_){false}
    , decltype(_impl_.headlights_on_bright_is_valid_){false}
    , decltype(_impl_.headlights_on_bright_){false}
    , decltype(_impl_.headlights_on_is_valid_){false}
    , decltype(_impl_.headlights_on_){false}
  };
}

Headlight_aux_rpt_318::~Headlight_aux_rpt_318() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_aux_rpt_318)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Headlight_aux_rpt_318::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headlight_aux_rpt_318::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Headlight_aux_rpt_318::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_aux_rpt_318)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.headlights_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.headlights_on_) -
        reinterpret_cast<char*>(&_impl_.headlights_mode_)) + sizeof(_impl_.headlights_on_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headlight_aux_rpt_318::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool headlights_mode_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_headlights_mode_is_valid(&has_bits);
          _impl_.headlights_mode_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType_IsValid(val))) {
            _internal_set_headlights_mode(static_cast<::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool fog_lights_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fog_lights_on_is_valid(&has_bits);
          _impl_.fog_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fog_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fog_lights_on(&has_bits);
          _impl_.fog_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool headlights_on_bright_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_headlights_on_bright_is_valid(&has_bits);
          _impl_.headlights_on_bright_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool headlights_on_bright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_headlights_on_bright(&has_bits);
          _impl_.headlights_on_bright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool headlights_on_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_headlights_on_is_valid(&has_bits);
          _impl_.headlights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool headlights_on = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_headlights_on(&has_bits);
          _impl_.headlights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Headlight_aux_rpt_318::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_aux_rpt_318)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool headlights_mode_is_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_headlights_mode_is_valid(), target);
  }

  // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_headlights_mode(), target);
  }

  // optional bool fog_lights_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fog_lights_on_is_valid(), target);
  }

  // optional bool fog_lights_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fog_lights_on(), target);
  }

  // optional bool headlights_on_bright_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_headlights_on_bright_is_valid(), target);
  }

  // optional bool headlights_on_bright = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_headlights_on_bright(), target);
  }

  // optional bool headlights_on_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_headlights_on_is_valid(), target);
  }

  // optional bool headlights_on = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_headlights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_aux_rpt_318)
  return target;
}

size_t Headlight_aux_rpt_318::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_aux_rpt_318)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_headlights_mode());
    }

    // optional bool headlights_mode_is_valid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool fog_lights_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool fog_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_bright_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_bright = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headlight_aux_rpt_318::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headlight_aux_rpt_318::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headlight_aux_rpt_318::GetClassData() const { return &_class_data_; }

void Headlight_aux_rpt_318::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headlight_aux_rpt_318 *>(to)->MergeFrom(
      static_cast<const Headlight_aux_rpt_318 &>(from));
}


void Headlight_aux_rpt_318::MergeFrom(const Headlight_aux_rpt_318& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_aux_rpt_318)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.headlights_mode_ = from._impl_.headlights_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.headlights_mode_is_valid_ = from._impl_.headlights_mode_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fog_lights_on_is_valid_ = from._impl_.fog_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fog_lights_on_ = from._impl_.fog_lights_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.headlights_on_bright_is_valid_ = from._impl_.headlights_on_bright_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.headlights_on_bright_ = from._impl_.headlights_on_bright_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.headlights_on_is_valid_ = from._impl_.headlights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.headlights_on_ = from._impl_.headlights_on_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headlight_aux_rpt_318::CopyFrom(const Headlight_aux_rpt_318& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_aux_rpt_318)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_aux_rpt_318::IsInitialized() const {
  return true;
}

void Headlight_aux_rpt_318::InternalSwap(Headlight_aux_rpt_318* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Headlight_aux_rpt_318, _impl_.headlights_on_)
      + sizeof(Headlight_aux_rpt_318::_impl_.headlights_on_)
      - PROTOBUF_FIELD_OFFSET(Headlight_aux_rpt_318, _impl_.headlights_mode_)>(
          reinterpret_cast<char*>(&_impl_.headlights_mode_),
          reinterpret_cast<char*>(&other->_impl_.headlights_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_aux_rpt_318::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[9]);
}

// ===================================================================

class Dash_controls_right_cmd_110::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_right_cmd_110>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dash_controls_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Dash_controls_right_cmd_110::Dash_controls_right_cmd_110(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Dash_controls_right_cmd_110)
}
Dash_controls_right_cmd_110::Dash_controls_right_cmd_110(const Dash_controls_right_cmd_110& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.dash_controls_button_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dash_controls_button_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.dash_controls_button_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_right_cmd_110)
}

inline void Dash_controls_right_cmd_110::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.dash_controls_button_){0}
  };
}

Dash_controls_right_cmd_110::~Dash_controls_right_cmd_110() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_right_cmd_110)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dash_controls_right_cmd_110::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dash_controls_right_cmd_110::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dash_controls_right_cmd_110::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_right_cmd_110)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dash_controls_button_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.dash_controls_button_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dash_controls_right_cmd_110::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(val))) {
            _internal_set_dash_controls_button(static_cast<::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dash_controls_right_cmd_110::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_right_cmd_110)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dash_controls_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_right_cmd_110)
  return target;
}

size_t Dash_controls_right_cmd_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_right_cmd_110)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dash_controls_button());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dash_controls_right_cmd_110::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dash_controls_right_cmd_110::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dash_controls_right_cmd_110::GetClassData() const { return &_class_data_; }

void Dash_controls_right_cmd_110::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dash_controls_right_cmd_110 *>(to)->MergeFrom(
      static_cast<const Dash_controls_right_cmd_110 &>(from));
}


void Dash_controls_right_cmd_110::MergeFrom(const Dash_controls_right_cmd_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dash_controls_button_ = from._impl_.dash_controls_button_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dash_controls_right_cmd_110::CopyFrom(const Dash_controls_right_cmd_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_right_cmd_110::IsInitialized() const {
  return true;
}

void Dash_controls_right_cmd_110::InternalSwap(Dash_controls_right_cmd_110* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dash_controls_right_cmd_110, _impl_.dash_controls_button_)
      + sizeof(Dash_controls_right_cmd_110::_impl_.dash_controls_button_)
      - PROTOBUF_FIELD_OFFSET(Dash_controls_right_cmd_110, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_right_cmd_110::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[10]);
}

// ===================================================================

class Wiper_cmd_134::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_cmd_134>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wiper_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wiper_cmd_134::Wiper_cmd_134(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wiper_cmd_134)
}
Wiper_cmd_134::Wiper_cmd_134(const Wiper_cmd_134& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.wiper_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wiper_cmd_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.wiper_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_cmd_134)
}

inline void Wiper_cmd_134::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.wiper_cmd_){0}
  };
}

Wiper_cmd_134::~Wiper_cmd_134() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_cmd_134)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wiper_cmd_134::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wiper_cmd_134::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wiper_cmd_134::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_cmd_134)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wiper_cmd_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.wiper_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wiper_cmd_134::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType_IsValid(val))) {
            _internal_set_wiper_cmd(static_cast<::apollo::canbus::Wiper_cmd_134_Wiper_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wiper_cmd_134::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_cmd_134)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wiper_cmd(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_cmd_134)
  return target;
}

size_t Wiper_cmd_134::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_cmd_134)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wiper_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wiper_cmd_134::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wiper_cmd_134::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wiper_cmd_134::GetClassData() const { return &_class_data_; }

void Wiper_cmd_134::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wiper_cmd_134 *>(to)->MergeFrom(
      static_cast<const Wiper_cmd_134 &>(from));
}


void Wiper_cmd_134::MergeFrom(const Wiper_cmd_134& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_cmd_134)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.wiper_cmd_ = from._impl_.wiper_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wiper_cmd_134::CopyFrom(const Wiper_cmd_134& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_cmd_134)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_cmd_134::IsInitialized() const {
  return true;
}

void Wiper_cmd_134::InternalSwap(Wiper_cmd_134* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wiper_cmd_134, _impl_.wiper_cmd_)
      + sizeof(Wiper_cmd_134::_impl_.wiper_cmd_)
      - PROTOBUF_FIELD_OFFSET(Wiper_cmd_134, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_cmd_134::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[11]);
}

// ===================================================================

class Wiper_rpt_234::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_rpt_234>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Wiper_rpt_234::Wiper_rpt_234(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wiper_rpt_234)
}
Wiper_rpt_234::Wiper_rpt_234(const Wiper_rpt_234& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_rpt_234)
}

inline void Wiper_rpt_234::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
  };
}

Wiper_rpt_234::~Wiper_rpt_234() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_rpt_234)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wiper_rpt_234::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wiper_rpt_234::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wiper_rpt_234::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_rpt_234)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wiper_rpt_234::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Wiper_rpt_234_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Wiper_rpt_234_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Wiper_rpt_234_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wiper_rpt_234::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_rpt_234)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_rpt_234)
  return target;
}

size_t Wiper_rpt_234::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_rpt_234)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wiper_rpt_234::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wiper_rpt_234::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wiper_rpt_234::GetClassData() const { return &_class_data_; }

void Wiper_rpt_234::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wiper_rpt_234 *>(to)->MergeFrom(
      static_cast<const Wiper_rpt_234 &>(from));
}


void Wiper_rpt_234::MergeFrom(const Wiper_rpt_234& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_rpt_234)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wiper_rpt_234::CopyFrom(const Wiper_rpt_234& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_rpt_234)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_rpt_234::IsInitialized() const {
  return true;
}

void Wiper_rpt_234::InternalSwap(Wiper_rpt_234* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wiper_rpt_234, _impl_.manual_input_)
      + sizeof(Wiper_rpt_234::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Wiper_rpt_234, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_rpt_234::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[12]);
}

// ===================================================================

class Turn_rpt_230::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_rpt_230>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Turn_rpt_230::Turn_rpt_230(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turn_rpt_230)
}
Turn_rpt_230::Turn_rpt_230(const Turn_rpt_230& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_rpt_230)
}

inline void Turn_rpt_230::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Turn_rpt_230::~Turn_rpt_230() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_rpt_230)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turn_rpt_230::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turn_rpt_230::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turn_rpt_230::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_rpt_230)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turn_rpt_230::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Turn_rpt_230_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Turn_rpt_230_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Turn_rpt_230_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turn_rpt_230::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_rpt_230)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_rpt_230)
  return target;
}

size_t Turn_rpt_230::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_rpt_230)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turn_rpt_230::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turn_rpt_230::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turn_rpt_230::GetClassData() const { return &_class_data_; }

void Turn_rpt_230::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turn_rpt_230 *>(to)->MergeFrom(
      static_cast<const Turn_rpt_230 &>(from));
}


void Turn_rpt_230::MergeFrom(const Turn_rpt_230& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_rpt_230)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turn_rpt_230::CopyFrom(const Turn_rpt_230& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_rpt_230)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_rpt_230::IsInitialized() const {
  return true;
}

void Turn_rpt_230::InternalSwap(Turn_rpt_230* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Turn_rpt_230, _impl_.output_value_)
      + sizeof(Turn_rpt_230::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Turn_rpt_230, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_rpt_230::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[13]);
}

// ===================================================================

class Headlight_cmd_118::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_cmd_118>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headlight_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Headlight_cmd_118::Headlight_cmd_118(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Headlight_cmd_118)
}
Headlight_cmd_118::Headlight_cmd_118(const Headlight_cmd_118& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.headlight_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.headlight_cmd_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.headlight_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_cmd_118)
}

inline void Headlight_cmd_118::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.headlight_cmd_){0}
  };
}

Headlight_cmd_118::~Headlight_cmd_118() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_cmd_118)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Headlight_cmd_118::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headlight_cmd_118::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Headlight_cmd_118::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_cmd_118)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.headlight_cmd_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.headlight_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headlight_cmd_118::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType_IsValid(val))) {
            _internal_set_headlight_cmd(static_cast<::apollo::canbus::Headlight_cmd_118_Headlight_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Headlight_cmd_118::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_cmd_118)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_headlight_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_cmd_118)
  return target;
}

size_t Headlight_cmd_118::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_cmd_118)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_headlight_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headlight_cmd_118::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headlight_cmd_118::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headlight_cmd_118::GetClassData() const { return &_class_data_; }

void Headlight_cmd_118::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headlight_cmd_118 *>(to)->MergeFrom(
      static_cast<const Headlight_cmd_118 &>(from));
}


void Headlight_cmd_118::MergeFrom(const Headlight_cmd_118& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_cmd_118)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.headlight_cmd_ = from._impl_.headlight_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headlight_cmd_118::CopyFrom(const Headlight_cmd_118& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_cmd_118)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_cmd_118::IsInitialized() const {
  return true;
}

void Headlight_cmd_118::InternalSwap(Headlight_cmd_118* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Headlight_cmd_118, _impl_.headlight_cmd_)
      + sizeof(Headlight_cmd_118::_impl_.headlight_cmd_)
      - PROTOBUF_FIELD_OFFSET(Headlight_cmd_118, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_cmd_118::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[14]);
}

// ===================================================================

class Door_rpt_417::_Internal {
 public:
  using HasBits = decltype(std::declval<Door_rpt_417>()._impl_._has_bits_);
  static void set_has_fuel_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trunk_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hood_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rear_pass_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rear_driver_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pass_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_driver_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fuel_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trunk_open(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rear_pass_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rear_driver_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pass_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_driver_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Door_rpt_417::Door_rpt_417(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Door_rpt_417)
}
Door_rpt_417::Door_rpt_417(const Door_rpt_417& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fuel_door_open_is_valid_){}
    , decltype(_impl_.trunk_open_is_valid_){}
    , decltype(_impl_.hood_open_is_valid_){}
    , decltype(_impl_.rear_pass_door_open_is_valid_){}
    , decltype(_impl_.rear_driver_door_open_is_valid_){}
    , decltype(_impl_.pass_door_open_is_valid_){}
    , decltype(_impl_.driver_door_open_is_valid_){}
    , decltype(_impl_.fuel_door_open_){}
    , decltype(_impl_.trunk_open_){}
    , decltype(_impl_.hood_open_){}
    , decltype(_impl_.rear_pass_door_open_){}
    , decltype(_impl_.rear_driver_door_open_){}
    , decltype(_impl_.pass_door_open_){}
    , decltype(_impl_.driver_door_open_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fuel_door_open_is_valid_, &from._impl_.fuel_door_open_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.driver_door_open_) -
    reinterpret_cast<char*>(&_impl_.fuel_door_open_is_valid_)) + sizeof(_impl_.driver_door_open_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Door_rpt_417)
}

inline void Door_rpt_417::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fuel_door_open_is_valid_){false}
    , decltype(_impl_.trunk_open_is_valid_){false}
    , decltype(_impl_.hood_open_is_valid_){false}
    , decltype(_impl_.rear_pass_door_open_is_valid_){false}
    , decltype(_impl_.rear_driver_door_open_is_valid_){false}
    , decltype(_impl_.pass_door_open_is_valid_){false}
    , decltype(_impl_.driver_door_open_is_valid_){false}
    , decltype(_impl_.fuel_door_open_){false}
    , decltype(_impl_.trunk_open_){false}
    , decltype(_impl_.hood_open_){false}
    , decltype(_impl_.rear_pass_door_open_){false}
    , decltype(_impl_.rear_driver_door_open_){false}
    , decltype(_impl_.pass_door_open_){false}
    , decltype(_impl_.driver_door_open_){false}
  };
}

Door_rpt_417::~Door_rpt_417() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Door_rpt_417)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Door_rpt_417::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Door_rpt_417::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Door_rpt_417::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Door_rpt_417)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.fuel_door_open_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fuel_door_open_) -
        reinterpret_cast<char*>(&_impl_.fuel_door_open_is_valid_)) + sizeof(_impl_.fuel_door_open_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.trunk_open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.driver_door_open_) -
        reinterpret_cast<char*>(&_impl_.trunk_open_)) + sizeof(_impl_.driver_door_open_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Door_rpt_417::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool fuel_door_open_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fuel_door_open_is_valid(&has_bits);
          _impl_.fuel_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trunk_open_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trunk_open_is_valid(&has_bits);
          _impl_.trunk_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hood_open_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hood_open_is_valid(&has_bits);
          _impl_.hood_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_pass_door_open_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rear_pass_door_open_is_valid(&has_bits);
          _impl_.rear_pass_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_driver_door_open_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rear_driver_door_open_is_valid(&has_bits);
          _impl_.rear_driver_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_door_open_is_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pass_door_open_is_valid(&has_bits);
          _impl_.pass_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_door_open_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_driver_door_open_is_valid(&has_bits);
          _impl_.driver_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fuel_door_open = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fuel_door_open(&has_bits);
          _impl_.fuel_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trunk_open = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_trunk_open(&has_bits);
          _impl_.trunk_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hood_open = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_hood_open(&has_bits);
          _impl_.hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_pass_door_open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_rear_pass_door_open(&has_bits);
          _impl_.rear_pass_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_driver_door_open = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_rear_driver_door_open(&has_bits);
          _impl_.rear_driver_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_door_open = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_pass_door_open(&has_bits);
          _impl_.pass_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_door_open = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_driver_door_open(&has_bits);
          _impl_.driver_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Door_rpt_417::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Door_rpt_417)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool fuel_door_open_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_fuel_door_open_is_valid(), target);
  }

  // optional bool trunk_open_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_trunk_open_is_valid(), target);
  }

  // optional bool hood_open_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_hood_open_is_valid(), target);
  }

  // optional bool rear_pass_door_open_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_rear_pass_door_open_is_valid(), target);
  }

  // optional bool rear_driver_door_open_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_rear_driver_door_open_is_valid(), target);
  }

  // optional bool pass_door_open_is_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_pass_door_open_is_valid(), target);
  }

  // optional bool driver_door_open_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_driver_door_open_is_valid(), target);
  }

  // optional bool fuel_door_open = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_fuel_door_open(), target);
  }

  // optional bool trunk_open = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_trunk_open(), target);
  }

  // optional bool hood_open = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_hood_open(), target);
  }

  // optional bool rear_pass_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_rear_pass_door_open(), target);
  }

  // optional bool rear_driver_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_rear_driver_door_open(), target);
  }

  // optional bool pass_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_pass_door_open(), target);
  }

  // optional bool driver_door_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_driver_door_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Door_rpt_417)
  return target;
}

size_t Door_rpt_417::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Door_rpt_417)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool fuel_door_open_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool trunk_open_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool hood_open_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool rear_pass_door_open_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rear_driver_door_open_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pass_door_open_is_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool driver_door_open_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool fuel_door_open = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool trunk_open = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hood_open = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool rear_pass_door_open = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool rear_driver_door_open = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool pass_door_open = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_door_open = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Door_rpt_417::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Door_rpt_417::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Door_rpt_417::GetClassData() const { return &_class_data_; }

void Door_rpt_417::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Door_rpt_417 *>(to)->MergeFrom(
      static_cast<const Door_rpt_417 &>(from));
}


void Door_rpt_417::MergeFrom(const Door_rpt_417& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Door_rpt_417)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fuel_door_open_is_valid_ = from._impl_.fuel_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.trunk_open_is_valid_ = from._impl_.trunk_open_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hood_open_is_valid_ = from._impl_.hood_open_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rear_pass_door_open_is_valid_ = from._impl_.rear_pass_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rear_driver_door_open_is_valid_ = from._impl_.rear_driver_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pass_door_open_is_valid_ = from._impl_.pass_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.driver_door_open_is_valid_ = from._impl_.driver_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.fuel_door_open_ = from._impl_.fuel_door_open_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.trunk_open_ = from._impl_.trunk_open_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.hood_open_ = from._impl_.hood_open_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.rear_pass_door_open_ = from._impl_.rear_pass_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.rear_driver_door_open_ = from._impl_.rear_driver_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.pass_door_open_ = from._impl_.pass_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.driver_door_open_ = from._impl_.driver_door_open_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Door_rpt_417::CopyFrom(const Door_rpt_417& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Door_rpt_417)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Door_rpt_417::IsInitialized() const {
  return true;
}

void Door_rpt_417::InternalSwap(Door_rpt_417* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Door_rpt_417, _impl_.driver_door_open_)
      + sizeof(Door_rpt_417::_impl_.driver_door_open_)
      - PROTOBUF_FIELD_OFFSET(Door_rpt_417, _impl_.fuel_door_open_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.fuel_door_open_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.fuel_door_open_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Door_rpt_417::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[15]);
}

// ===================================================================

class Component_rpt_20::_Internal {
 public:
  using HasBits = decltype(std::declval<Component_rpt_20>()._impl_._has_bits_);
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_func(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_complement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_config_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Component_rpt_20::Component_rpt_20(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Component_rpt_20)
}
Component_rpt_20::Component_rpt_20(const Component_rpt_20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_func_){}
    , decltype(_impl_.counter_){}
    , decltype(_impl_.complement_){}
    , decltype(_impl_.config_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.component_type_, &from._impl_.component_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.config_fault_) -
    reinterpret_cast<char*>(&_impl_.component_type_)) + sizeof(_impl_.config_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Component_rpt_20)
}

inline void Component_rpt_20::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_type_){0}
    , decltype(_impl_.component_func_){0}
    , decltype(_impl_.counter_){0}
    , decltype(_impl_.complement_){0}
    , decltype(_impl_.config_fault_){false}
  };
}

Component_rpt_20::~Component_rpt_20() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Component_rpt_20)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Component_rpt_20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Component_rpt_20::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Component_rpt_20::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Component_rpt_20)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.component_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.config_fault_) -
        reinterpret_cast<char*>(&_impl_.component_type_)) + sizeof(_impl_.config_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component_rpt_20::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Component_rpt_20_Component_typeType_IsValid(val))) {
            _internal_set_component_type(static_cast<::apollo::canbus::Component_rpt_20_Component_typeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Component_rpt_20_Component_funcType_IsValid(val))) {
            _internal_set_component_func(static_cast<::apollo::canbus::Component_rpt_20_Component_funcType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_counter(&has_bits);
          _impl_.counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 complement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_complement(&has_bits);
          _impl_.complement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool config_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_config_fault(&has_bits);
          _impl_.config_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Component_rpt_20::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Component_rpt_20)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_component_type(), target);
  }

  // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_component_func(), target);
  }

  // optional int32 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_counter(), target);
  }

  // optional int32 complement = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_complement(), target);
  }

  // optional bool config_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_config_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Component_rpt_20)
  return target;
}

size_t Component_rpt_20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Component_rpt_20)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_component_type());
    }

    // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_component_func());
    }

    // optional int32 counter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counter());
    }

    // optional int32 complement = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_complement());
    }

    // optional bool config_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Component_rpt_20::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Component_rpt_20::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Component_rpt_20::GetClassData() const { return &_class_data_; }

void Component_rpt_20::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Component_rpt_20 *>(to)->MergeFrom(
      static_cast<const Component_rpt_20 &>(from));
}


void Component_rpt_20::MergeFrom(const Component_rpt_20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Component_rpt_20)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.component_type_ = from._impl_.component_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.component_func_ = from._impl_.component_func_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.counter_ = from._impl_.counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.complement_ = from._impl_.complement_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.config_fault_ = from._impl_.config_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Component_rpt_20::CopyFrom(const Component_rpt_20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Component_rpt_20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component_rpt_20::IsInitialized() const {
  return true;
}

void Component_rpt_20::InternalSwap(Component_rpt_20* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Component_rpt_20, _impl_.config_fault_)
      + sizeof(Component_rpt_20::_impl_.config_fault_)
      - PROTOBUF_FIELD_OFFSET(Component_rpt_20, _impl_.component_type_)>(
          reinterpret_cast<char*>(&_impl_.component_type_),
          reinterpret_cast<char*>(&other->_impl_.component_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Component_rpt_20::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[16]);
}

// ===================================================================

class Wheel_speed_rpt_407::_Internal {
 public:
  using HasBits = decltype(std::declval<Wheel_speed_rpt_407>()._impl_._has_bits_);
  static void set_has_wheel_spd_rear_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheel_spd_rear_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheel_spd_front_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheel_spd_front_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wheel_speed_rpt_407::Wheel_speed_rpt_407(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wheel_speed_rpt_407)
}
Wheel_speed_rpt_407::Wheel_speed_rpt_407(const Wheel_speed_rpt_407& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rear_right_){}
    , decltype(_impl_.wheel_spd_rear_left_){}
    , decltype(_impl_.wheel_spd_front_right_){}
    , decltype(_impl_.wheel_spd_front_left_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wheel_spd_rear_right_, &from._impl_.wheel_spd_rear_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wheel_spd_front_left_) -
    reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_)) + sizeof(_impl_.wheel_spd_front_left_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wheel_speed_rpt_407)
}

inline void Wheel_speed_rpt_407::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rear_right_){0}
    , decltype(_impl_.wheel_spd_rear_left_){0}
    , decltype(_impl_.wheel_spd_front_right_){0}
    , decltype(_impl_.wheel_spd_front_left_){0}
  };
}

Wheel_speed_rpt_407::~Wheel_speed_rpt_407() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wheel_speed_rpt_407)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wheel_speed_rpt_407::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wheel_speed_rpt_407::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wheel_speed_rpt_407::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wheel_speed_rpt_407)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.wheel_spd_rear_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wheel_spd_front_left_) -
        reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_)) + sizeof(_impl_.wheel_spd_front_left_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wheel_speed_rpt_407::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double wheel_spd_rear_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_wheel_spd_rear_right(&has_bits);
          _impl_.wheel_spd_rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_rear_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_wheel_spd_rear_left(&has_bits);
          _impl_.wheel_spd_rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_wheel_spd_front_right(&has_bits);
          _impl_.wheel_spd_front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_front_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_wheel_spd_front_left(&has_bits);
          _impl_.wheel_spd_front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wheel_speed_rpt_407::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wheel_speed_rpt_407)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_wheel_spd_rear_right(), target);
  }

  // optional double wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_wheel_spd_rear_left(), target);
  }

  // optional double wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_wheel_spd_front_right(), target);
  }

  // optional double wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_wheel_spd_front_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wheel_speed_rpt_407)
  return target;
}

size_t Wheel_speed_rpt_407::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wheel_speed_rpt_407)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double wheel_spd_rear_right = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rear_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_front_right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_front_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wheel_speed_rpt_407::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wheel_speed_rpt_407::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wheel_speed_rpt_407::GetClassData() const { return &_class_data_; }

void Wheel_speed_rpt_407::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wheel_speed_rpt_407 *>(to)->MergeFrom(
      static_cast<const Wheel_speed_rpt_407 &>(from));
}


void Wheel_speed_rpt_407::MergeFrom(const Wheel_speed_rpt_407& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wheel_speed_rpt_407)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.wheel_spd_rear_right_ = from._impl_.wheel_spd_rear_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wheel_spd_rear_left_ = from._impl_.wheel_spd_rear_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.wheel_spd_front_right_ = from._impl_.wheel_spd_front_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.wheel_spd_front_left_ = from._impl_.wheel_spd_front_left_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wheel_speed_rpt_407::CopyFrom(const Wheel_speed_rpt_407& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wheel_speed_rpt_407)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel_speed_rpt_407::IsInitialized() const {
  return true;
}

void Wheel_speed_rpt_407::InternalSwap(Wheel_speed_rpt_407* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wheel_speed_rpt_407, _impl_.wheel_spd_front_left_)
      + sizeof(Wheel_speed_rpt_407::_impl_.wheel_spd_front_left_)
      - PROTOBUF_FIELD_OFFSET(Wheel_speed_rpt_407, _impl_.wheel_spd_rear_right_)>(
          reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_),
          reinterpret_cast<char*>(&other->_impl_.wheel_spd_rear_right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wheel_speed_rpt_407::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[17]);
}

// ===================================================================

class Steering_motor_rpt_3_406::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_3_406>()._impl_._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_3_406::Steering_motor_rpt_3_406(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_3_406)
}
Steering_motor_rpt_3_406::Steering_motor_rpt_3_406(const Steering_motor_rpt_3_406& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){}
    , decltype(_impl_.torque_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.torque_output_, &from._impl_.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torque_input_) -
    reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_3_406)
}

inline void Steering_motor_rpt_3_406::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){0}
    , decltype(_impl_.torque_input_){0}
  };
}

Steering_motor_rpt_3_406::~Steering_motor_rpt_3_406() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_3_406)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_3_406::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_3_406::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_3_406::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_3_406)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.torque_input_) -
        reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_3_406::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          _impl_.torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          _impl_.torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_3_406::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_3_406)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_3_406)
  return target;
}

size_t Steering_motor_rpt_3_406::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_3_406)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_3_406::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_3_406::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_3_406::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_3_406::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_3_406 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_3_406 &>(from));
}


void Steering_motor_rpt_3_406::MergeFrom(const Steering_motor_rpt_3_406& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.torque_output_ = from._impl_.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.torque_input_ = from._impl_.torque_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_3_406::CopyFrom(const Steering_motor_rpt_3_406& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_3_406::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_3_406::InternalSwap(Steering_motor_rpt_3_406* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_3_406, _impl_.torque_input_)
      + sizeof(Steering_motor_rpt_3_406::_impl_.torque_input_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_3_406, _impl_.torque_output_)>(
          reinterpret_cast<char*>(&_impl_.torque_output_),
          reinterpret_cast<char*>(&other->_impl_.torque_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_3_406::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[18]);
}

// ===================================================================

class Steering_motor_rpt_2_405::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_2_405>()._impl_._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_motor_rpt_2_405::Steering_motor_rpt_2_405(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_2_405)
}
Steering_motor_rpt_2_405::Steering_motor_rpt_2_405(const Steering_motor_rpt_2_405& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){}
    , decltype(_impl_.motor_temperature_){}
    , decltype(_impl_.angular_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.encoder_temperature_, &from._impl_.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angular_speed_) -
    reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_2_405)
}

inline void Steering_motor_rpt_2_405::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){0}
    , decltype(_impl_.motor_temperature_){0}
    , decltype(_impl_.angular_speed_){0}
  };
}

Steering_motor_rpt_2_405::~Steering_motor_rpt_2_405() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_2_405)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_2_405::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_2_405::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_2_405::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_2_405)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angular_speed_) -
        reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_2_405::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          _impl_.encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          _impl_.motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          _impl_.angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_2_405::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_2_405)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_2_405)
  return target;
}

size_t Steering_motor_rpt_2_405::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_2_405)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_2_405::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_2_405::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_2_405::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_2_405::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_2_405 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_2_405 &>(from));
}


void Steering_motor_rpt_2_405::MergeFrom(const Steering_motor_rpt_2_405& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encoder_temperature_ = from._impl_.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motor_temperature_ = from._impl_.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.angular_speed_ = from._impl_.angular_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_2_405::CopyFrom(const Steering_motor_rpt_2_405& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_2_405::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_2_405::InternalSwap(Steering_motor_rpt_2_405* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_2_405, _impl_.angular_speed_)
      + sizeof(Steering_motor_rpt_2_405::_impl_.angular_speed_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_2_405, _impl_.encoder_temperature_)>(
          reinterpret_cast<char*>(&_impl_.encoder_temperature_),
          reinterpret_cast<char*>(&other->_impl_.encoder_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_2_405::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[19]);
}

// ===================================================================

class Steering_motor_rpt_1_404::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_1_404>()._impl_._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_1_404::Steering_motor_rpt_1_404(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_1_404)
}
Steering_motor_rpt_1_404::Steering_motor_rpt_1_404(const Steering_motor_rpt_1_404& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){}
    , decltype(_impl_.shaft_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.motor_current_, &from._impl_.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shaft_position_) -
    reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_1_404)
}

inline void Steering_motor_rpt_1_404::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){0}
    , decltype(_impl_.shaft_position_){0}
  };
}

Steering_motor_rpt_1_404::~Steering_motor_rpt_1_404() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_1_404)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_1_404::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_1_404::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_1_404::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_1_404)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shaft_position_) -
        reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_1_404::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          _impl_.motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          _impl_.shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_1_404::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_1_404)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_1_404)
  return target;
}

size_t Steering_motor_rpt_1_404::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_1_404)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_1_404::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_1_404::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_1_404::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_1_404::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_1_404 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_1_404 &>(from));
}


void Steering_motor_rpt_1_404::MergeFrom(const Steering_motor_rpt_1_404& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.motor_current_ = from._impl_.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shaft_position_ = from._impl_.shaft_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_1_404::CopyFrom(const Steering_motor_rpt_1_404& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_1_404::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_1_404::InternalSwap(Steering_motor_rpt_1_404* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_1_404, _impl_.shaft_position_)
      + sizeof(Steering_motor_rpt_1_404::_impl_.shaft_position_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_1_404, _impl_.motor_current_)>(
          reinterpret_cast<char*>(&_impl_.motor_current_),
          reinterpret_cast<char*>(&other->_impl_.motor_current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_1_404::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[20]);
}

// ===================================================================

class Brake_motor_rpt_3_403::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_3_403>()._impl_._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_3_403::Brake_motor_rpt_3_403(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_3_403)
}
Brake_motor_rpt_3_403::Brake_motor_rpt_3_403(const Brake_motor_rpt_3_403& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){}
    , decltype(_impl_.torque_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.torque_output_, &from._impl_.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torque_input_) -
    reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_3_403)
}

inline void Brake_motor_rpt_3_403::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){0}
    , decltype(_impl_.torque_input_){0}
  };
}

Brake_motor_rpt_3_403::~Brake_motor_rpt_3_403() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_3_403)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_3_403::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_3_403::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_3_403::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_3_403)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.torque_input_) -
        reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_3_403::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          _impl_.torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          _impl_.torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_3_403::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_3_403)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_3_403)
  return target;
}

size_t Brake_motor_rpt_3_403::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_3_403)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_3_403::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_3_403::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_3_403::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_3_403::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_3_403 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_3_403 &>(from));
}


void Brake_motor_rpt_3_403::MergeFrom(const Brake_motor_rpt_3_403& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.torque_output_ = from._impl_.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.torque_input_ = from._impl_.torque_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_3_403::CopyFrom(const Brake_motor_rpt_3_403& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_3_403::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_3_403::InternalSwap(Brake_motor_rpt_3_403* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_3_403, _impl_.torque_input_)
      + sizeof(Brake_motor_rpt_3_403::_impl_.torque_input_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_3_403, _impl_.torque_output_)>(
          reinterpret_cast<char*>(&_impl_.torque_output_),
          reinterpret_cast<char*>(&other->_impl_.torque_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_3_403::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[21]);
}

// ===================================================================

class Brake_motor_rpt_2_402::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_2_402>()._impl_._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Brake_motor_rpt_2_402::Brake_motor_rpt_2_402(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_2_402)
}
Brake_motor_rpt_2_402::Brake_motor_rpt_2_402(const Brake_motor_rpt_2_402& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){}
    , decltype(_impl_.motor_temperature_){}
    , decltype(_impl_.angular_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.encoder_temperature_, &from._impl_.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angular_speed_) -
    reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_2_402)
}

inline void Brake_motor_rpt_2_402::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){0}
    , decltype(_impl_.motor_temperature_){0}
    , decltype(_impl_.angular_speed_){0}
  };
}

Brake_motor_rpt_2_402::~Brake_motor_rpt_2_402() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_2_402)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_2_402::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_2_402::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_2_402::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_2_402)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angular_speed_) -
        reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_2_402::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          _impl_.encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          _impl_.motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          _impl_.angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_2_402::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_2_402)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_2_402)
  return target;
}

size_t Brake_motor_rpt_2_402::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_2_402)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_2_402::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_2_402::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_2_402::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_2_402::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_2_402 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_2_402 &>(from));
}


void Brake_motor_rpt_2_402::MergeFrom(const Brake_motor_rpt_2_402& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encoder_temperature_ = from._impl_.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motor_temperature_ = from._impl_.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.angular_speed_ = from._impl_.angular_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_2_402::CopyFrom(const Brake_motor_rpt_2_402& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_2_402::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_2_402::InternalSwap(Brake_motor_rpt_2_402* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_2_402, _impl_.angular_speed_)
      + sizeof(Brake_motor_rpt_2_402::_impl_.angular_speed_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_2_402, _impl_.encoder_temperature_)>(
          reinterpret_cast<char*>(&_impl_.encoder_temperature_),
          reinterpret_cast<char*>(&other->_impl_.encoder_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_2_402::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[22]);
}

// ===================================================================

class Brake_motor_rpt_1_401::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_1_401>()._impl_._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_1_401::Brake_motor_rpt_1_401(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_1_401)
}
Brake_motor_rpt_1_401::Brake_motor_rpt_1_401(const Brake_motor_rpt_1_401& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){}
    , decltype(_impl_.shaft_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.motor_current_, &from._impl_.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shaft_position_) -
    reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_1_401)
}

inline void Brake_motor_rpt_1_401::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){0}
    , decltype(_impl_.shaft_position_){0}
  };
}

Brake_motor_rpt_1_401::~Brake_motor_rpt_1_401() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_1_401)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_1_401::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_1_401::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_1_401::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_1_401)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shaft_position_) -
        reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_1_401::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          _impl_.motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          _impl_.shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_1_401::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_1_401)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_1_401)
  return target;
}

size_t Brake_motor_rpt_1_401::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_1_401)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_1_401::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_1_401::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_1_401::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_1_401::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_1_401 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_1_401 &>(from));
}


void Brake_motor_rpt_1_401::MergeFrom(const Brake_motor_rpt_1_401& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.motor_current_ = from._impl_.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shaft_position_ = from._impl_.shaft_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_1_401::CopyFrom(const Brake_motor_rpt_1_401& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_1_401::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_1_401::InternalSwap(Brake_motor_rpt_1_401* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_1_401, _impl_.shaft_position_)
      + sizeof(Brake_motor_rpt_1_401::_impl_.shaft_position_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_1_401, _impl_.motor_current_)>(
          reinterpret_cast<char*>(&_impl_.motor_current_),
          reinterpret_cast<char*>(&other->_impl_.motor_current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_1_401::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[23]);
}

// ===================================================================

class Wiper_aux_rpt_334::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_aux_rpt_334>()._impl_._has_bits_);
  static void set_has_spray_empty_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spray_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spray_near_empty_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spray_near_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rear_spraying_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rear_spraying(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_wiping_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rear_wiping(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_front_spraying_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_front_spraying(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_front_wiping_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_front_wiping(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Wiper_aux_rpt_334::Wiper_aux_rpt_334(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wiper_aux_rpt_334)
}
Wiper_aux_rpt_334::Wiper_aux_rpt_334(const Wiper_aux_rpt_334& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spray_empty_is_valid_){}
    , decltype(_impl_.spray_empty_){}
    , decltype(_impl_.spray_near_empty_is_valid_){}
    , decltype(_impl_.spray_near_empty_){}
    , decltype(_impl_.rear_spraying_is_valid_){}
    , decltype(_impl_.rear_spraying_){}
    , decltype(_impl_.rear_wiping_is_valid_){}
    , decltype(_impl_.rear_wiping_){}
    , decltype(_impl_.front_spraying_is_valid_){}
    , decltype(_impl_.front_spraying_){}
    , decltype(_impl_.front_wiping_is_valid_){}
    , decltype(_impl_.front_wiping_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.spray_empty_is_valid_, &from._impl_.spray_empty_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.front_wiping_) -
    reinterpret_cast<char*>(&_impl_.spray_empty_is_valid_)) + sizeof(_impl_.front_wiping_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_aux_rpt_334)
}

inline void Wiper_aux_rpt_334::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spray_empty_is_valid_){false}
    , decltype(_impl_.spray_empty_){false}
    , decltype(_impl_.spray_near_empty_is_valid_){false}
    , decltype(_impl_.spray_near_empty_){false}
    , decltype(_impl_.rear_spraying_is_valid_){false}
    , decltype(_impl_.rear_spraying_){false}
    , decltype(_impl_.rear_wiping_is_valid_){false}
    , decltype(_impl_.rear_wiping_){false}
    , decltype(_impl_.front_spraying_is_valid_){false}
    , decltype(_impl_.front_spraying_){false}
    , decltype(_impl_.front_wiping_is_valid_){false}
    , decltype(_impl_.front_wiping_){false}
  };
}

Wiper_aux_rpt_334::~Wiper_aux_rpt_334() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_aux_rpt_334)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wiper_aux_rpt_334::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wiper_aux_rpt_334::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wiper_aux_rpt_334::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_aux_rpt_334)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.spray_empty_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rear_wiping_) -
        reinterpret_cast<char*>(&_impl_.spray_empty_is_valid_)) + sizeof(_impl_.rear_wiping_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.front_spraying_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.front_wiping_) -
        reinterpret_cast<char*>(&_impl_.front_spraying_is_valid_)) + sizeof(_impl_.front_wiping_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wiper_aux_rpt_334::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool spray_empty_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spray_empty_is_valid(&has_bits);
          _impl_.spray_empty_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spray_empty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spray_empty(&has_bits);
          _impl_.spray_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spray_near_empty_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_spray_near_empty_is_valid(&has_bits);
          _impl_.spray_near_empty_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spray_near_empty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spray_near_empty(&has_bits);
          _impl_.spray_near_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_spraying_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rear_spraying_is_valid(&has_bits);
          _impl_.rear_spraying_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_spraying = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rear_spraying(&has_bits);
          _impl_.rear_spraying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_wiping_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rear_wiping_is_valid(&has_bits);
          _impl_.rear_wiping_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_wiping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rear_wiping(&has_bits);
          _impl_.rear_wiping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_spraying_is_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_front_spraying_is_valid(&has_bits);
          _impl_.front_spraying_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_spraying = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_front_spraying(&has_bits);
          _impl_.front_spraying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_wiping_is_valid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_front_wiping_is_valid(&has_bits);
          _impl_.front_wiping_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_wiping = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_front_wiping(&has_bits);
          _impl_.front_wiping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wiper_aux_rpt_334::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_aux_rpt_334)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool spray_empty_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_spray_empty_is_valid(), target);
  }

  // optional bool spray_empty = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_spray_empty(), target);
  }

  // optional bool spray_near_empty_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_spray_near_empty_is_valid(), target);
  }

  // optional bool spray_near_empty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_spray_near_empty(), target);
  }

  // optional bool rear_spraying_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_rear_spraying_is_valid(), target);
  }

  // optional bool rear_spraying = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_rear_spraying(), target);
  }

  // optional bool rear_wiping_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_wiping_is_valid(), target);
  }

  // optional bool rear_wiping = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_rear_wiping(), target);
  }

  // optional bool front_spraying_is_valid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_front_spraying_is_valid(), target);
  }

  // optional bool front_spraying = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_front_spraying(), target);
  }

  // optional bool front_wiping_is_valid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_front_wiping_is_valid(), target);
  }

  // optional bool front_wiping = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_front_wiping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_aux_rpt_334)
  return target;
}

size_t Wiper_aux_rpt_334::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_aux_rpt_334)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool spray_empty_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool spray_empty = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool spray_near_empty_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool spray_near_empty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rear_spraying_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool rear_spraying = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_wiping_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool rear_wiping = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool front_spraying_is_valid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool front_spraying = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool front_wiping_is_valid = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool front_wiping = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wiper_aux_rpt_334::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wiper_aux_rpt_334::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wiper_aux_rpt_334::GetClassData() const { return &_class_data_; }

void Wiper_aux_rpt_334::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wiper_aux_rpt_334 *>(to)->MergeFrom(
      static_cast<const Wiper_aux_rpt_334 &>(from));
}


void Wiper_aux_rpt_334::MergeFrom(const Wiper_aux_rpt_334& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_aux_rpt_334)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.spray_empty_is_valid_ = from._impl_.spray_empty_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.spray_empty_ = from._impl_.spray_empty_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.spray_near_empty_is_valid_ = from._impl_.spray_near_empty_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.spray_near_empty_ = from._impl_.spray_near_empty_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rear_spraying_is_valid_ = from._impl_.rear_spraying_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.rear_spraying_ = from._impl_.rear_spraying_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rear_wiping_is_valid_ = from._impl_.rear_wiping_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.rear_wiping_ = from._impl_.rear_wiping_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.front_spraying_is_valid_ = from._impl_.front_spraying_is_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.front_spraying_ = from._impl_.front_spraying_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.front_wiping_is_valid_ = from._impl_.front_wiping_is_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.front_wiping_ = from._impl_.front_wiping_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wiper_aux_rpt_334::CopyFrom(const Wiper_aux_rpt_334& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_aux_rpt_334)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_aux_rpt_334::IsInitialized() const {
  return true;
}

void Wiper_aux_rpt_334::InternalSwap(Wiper_aux_rpt_334* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wiper_aux_rpt_334, _impl_.front_wiping_)
      + sizeof(Wiper_aux_rpt_334::_impl_.front_wiping_)
      - PROTOBUF_FIELD_OFFSET(Wiper_aux_rpt_334, _impl_.spray_empty_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.spray_empty_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.spray_empty_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_aux_rpt_334::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[24]);
}

// ===================================================================

class Shift_aux_rpt_328::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_aux_rpt_328>()._impl_._has_bits_);
  static void set_has_speed_interlock_active_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_interlock_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brake_interlock_active_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_interlock_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stay_in_neutral_mode_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stay_in_neutral_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_between_gears_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_between_gears(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Shift_aux_rpt_328::Shift_aux_rpt_328(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Shift_aux_rpt_328)
}
Shift_aux_rpt_328::Shift_aux_rpt_328(const Shift_aux_rpt_328& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_interlock_active_is_valid_){}
    , decltype(_impl_.speed_interlock_active_){}
    , decltype(_impl_.brake_interlock_active_is_valid_){}
    , decltype(_impl_.brake_interlock_active_){}
    , decltype(_impl_.stay_in_neutral_mode_is_valid_){}
    , decltype(_impl_.stay_in_neutral_mode_){}
    , decltype(_impl_.between_gears_is_valid_){}
    , decltype(_impl_.between_gears_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speed_interlock_active_is_valid_, &from._impl_.speed_interlock_active_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.between_gears_) -
    reinterpret_cast<char*>(&_impl_.speed_interlock_active_is_valid_)) + sizeof(_impl_.between_gears_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_aux_rpt_328)
}

inline void Shift_aux_rpt_328::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_interlock_active_is_valid_){false}
    , decltype(_impl_.speed_interlock_active_){false}
    , decltype(_impl_.brake_interlock_active_is_valid_){false}
    , decltype(_impl_.brake_interlock_active_){false}
    , decltype(_impl_.stay_in_neutral_mode_is_valid_){false}
    , decltype(_impl_.stay_in_neutral_mode_){false}
    , decltype(_impl_.between_gears_is_valid_){false}
    , decltype(_impl_.between_gears_){false}
  };
}

Shift_aux_rpt_328::~Shift_aux_rpt_328() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_aux_rpt_328)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shift_aux_rpt_328::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shift_aux_rpt_328::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shift_aux_rpt_328::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_aux_rpt_328)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.speed_interlock_active_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.between_gears_) -
        reinterpret_cast<char*>(&_impl_.speed_interlock_active_is_valid_)) + sizeof(_impl_.between_gears_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shift_aux_rpt_328::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool speed_interlock_active_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_speed_interlock_active_is_valid(&has_bits);
          _impl_.speed_interlock_active_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool speed_interlock_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_speed_interlock_active(&has_bits);
          _impl_.speed_interlock_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_interlock_active_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_brake_interlock_active_is_valid(&has_bits);
          _impl_.brake_interlock_active_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_interlock_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_brake_interlock_active(&has_bits);
          _impl_.brake_interlock_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stay_in_neutral_mode_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stay_in_neutral_mode_is_valid(&has_bits);
          _impl_.stay_in_neutral_mode_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stay_in_neutral_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_stay_in_neutral_mode(&has_bits);
          _impl_.stay_in_neutral_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool between_gears_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_between_gears_is_valid(&has_bits);
          _impl_.between_gears_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool between_gears = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_between_gears(&has_bits);
          _impl_.between_gears_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shift_aux_rpt_328::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_aux_rpt_328)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool speed_interlock_active_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_speed_interlock_active_is_valid(), target);
  }

  // optional bool speed_interlock_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_speed_interlock_active(), target);
  }

  // optional bool brake_interlock_active_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_brake_interlock_active_is_valid(), target);
  }

  // optional bool brake_interlock_active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_brake_interlock_active(), target);
  }

  // optional bool stay_in_neutral_mode_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_stay_in_neutral_mode_is_valid(), target);
  }

  // optional bool stay_in_neutral_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_stay_in_neutral_mode(), target);
  }

  // optional bool between_gears_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_between_gears_is_valid(), target);
  }

  // optional bool between_gears = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_between_gears(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_aux_rpt_328)
  return target;
}

size_t Shift_aux_rpt_328::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_aux_rpt_328)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool speed_interlock_active_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool speed_interlock_active = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool brake_interlock_active_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool brake_interlock_active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool stay_in_neutral_mode_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool stay_in_neutral_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool between_gears_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool between_gears = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shift_aux_rpt_328::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shift_aux_rpt_328::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shift_aux_rpt_328::GetClassData() const { return &_class_data_; }

void Shift_aux_rpt_328::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shift_aux_rpt_328 *>(to)->MergeFrom(
      static_cast<const Shift_aux_rpt_328 &>(from));
}


void Shift_aux_rpt_328::MergeFrom(const Shift_aux_rpt_328& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_aux_rpt_328)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.speed_interlock_active_is_valid_ = from._impl_.speed_interlock_active_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.speed_interlock_active_ = from._impl_.speed_interlock_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.brake_interlock_active_is_valid_ = from._impl_.brake_interlock_active_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.brake_interlock_active_ = from._impl_.brake_interlock_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.stay_in_neutral_mode_is_valid_ = from._impl_.stay_in_neutral_mode_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.stay_in_neutral_mode_ = from._impl_.stay_in_neutral_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.between_gears_is_valid_ = from._impl_.between_gears_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.between_gears_ = from._impl_.between_gears_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shift_aux_rpt_328::CopyFrom(const Shift_aux_rpt_328& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_aux_rpt_328)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_aux_rpt_328::IsInitialized() const {
  return true;
}

void Shift_aux_rpt_328::InternalSwap(Shift_aux_rpt_328* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shift_aux_rpt_328, _impl_.between_gears_)
      + sizeof(Shift_aux_rpt_328::_impl_.between_gears_)
      - PROTOBUF_FIELD_OFFSET(Shift_aux_rpt_328, _impl_.speed_interlock_active_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.speed_interlock_active_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.speed_interlock_active_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_aux_rpt_328::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[25]);
}

// ===================================================================

class Accel_rpt_200::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_rpt_200>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Accel_rpt_200::Accel_rpt_200(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Accel_rpt_200)
}
Accel_rpt_200::Accel_rpt_200(const Accel_rpt_200& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_rpt_200)
}

inline void Accel_rpt_200::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Accel_rpt_200::~Accel_rpt_200() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_rpt_200)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accel_rpt_200::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Accel_rpt_200::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accel_rpt_200::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_rpt_200)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel_rpt_200::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accel_rpt_200::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_rpt_200)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool output_reported_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_input_output_fault(), target);
  }

  // optional bool command_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_command_output_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enabled(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_rpt_200)
  return target;
}

size_t Accel_rpt_200::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_rpt_200)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accel_rpt_200::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accel_rpt_200::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accel_rpt_200::GetClassData() const { return &_class_data_; }

void Accel_rpt_200::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accel_rpt_200 *>(to)->MergeFrom(
      static_cast<const Accel_rpt_200 &>(from));
}


void Accel_rpt_200::MergeFrom(const Accel_rpt_200& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_rpt_200)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accel_rpt_200::CopyFrom(const Accel_rpt_200& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_rpt_200)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_rpt_200::IsInitialized() const {
  return true;
}

void Accel_rpt_200::InternalSwap(Accel_rpt_200* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel_rpt_200, _impl_.output_value_)
      + sizeof(Accel_rpt_200::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Accel_rpt_200, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_rpt_200::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[26]);
}

// ===================================================================

class Brake_rpt_204::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_rpt_204>()._impl_._has_bits_);
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Brake_rpt_204::Brake_rpt_204(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_rpt_204)
}
Brake_rpt_204::Brake_rpt_204(const Brake_rpt_204& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.command_output_fault_, &from._impl_.command_output_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.command_output_fault_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_rpt_204)
}

inline void Brake_rpt_204::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Brake_rpt_204::~Brake_rpt_204() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_rpt_204)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_rpt_204::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_rpt_204::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_rpt_204::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_rpt_204)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.command_output_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.command_output_fault_)) + sizeof(_impl_.manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_rpt_204::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool command_output_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_rpt_204::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_rpt_204)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool command_output_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_command_output_fault(), target);
  }

  // optional bool vehicle_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enabled(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_rpt_204)
  return target;
}

size_t Brake_rpt_204::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_rpt_204)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool command_output_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool vehicle_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_rpt_204::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_rpt_204::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_rpt_204::GetClassData() const { return &_class_data_; }

void Brake_rpt_204::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_rpt_204 *>(to)->MergeFrom(
      static_cast<const Brake_rpt_204 &>(from));
}


void Brake_rpt_204::MergeFrom(const Brake_rpt_204& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_rpt_204)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_rpt_204::CopyFrom(const Brake_rpt_204& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_rpt_204)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_rpt_204::IsInitialized() const {
  return true;
}

void Brake_rpt_204::InternalSwap(Brake_rpt_204* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_rpt_204, _impl_.output_value_)
      + sizeof(Brake_rpt_204::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Brake_rpt_204, _impl_.command_output_fault_)>(
          reinterpret_cast<char*>(&_impl_.command_output_fault_),
          reinterpret_cast<char*>(&other->_impl_.command_output_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_rpt_204::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[27]);
}

// ===================================================================

class Horn_cmd_11c::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_cmd_11c>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_horn_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Horn_cmd_11c::Horn_cmd_11c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Horn_cmd_11c)
}
Horn_cmd_11c::Horn_cmd_11c(const Horn_cmd_11c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.horn_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.horn_cmd_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.horn_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_cmd_11c)
}

inline void Horn_cmd_11c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.horn_cmd_){0}
  };
}

Horn_cmd_11c::~Horn_cmd_11c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_cmd_11c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Horn_cmd_11c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Horn_cmd_11c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Horn_cmd_11c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_cmd_11c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.horn_cmd_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.horn_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Horn_cmd_11c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_cmd_11c_Horn_cmdType_IsValid(val))) {
            _internal_set_horn_cmd(static_cast<::apollo::canbus::Horn_cmd_11c_Horn_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Horn_cmd_11c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_cmd_11c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_horn_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_cmd_11c)
  return target;
}

size_t Horn_cmd_11c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_cmd_11c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_horn_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Horn_cmd_11c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Horn_cmd_11c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Horn_cmd_11c::GetClassData() const { return &_class_data_; }

void Horn_cmd_11c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Horn_cmd_11c *>(to)->MergeFrom(
      static_cast<const Horn_cmd_11c &>(from));
}


void Horn_cmd_11c::MergeFrom(const Horn_cmd_11c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_cmd_11c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.horn_cmd_ = from._impl_.horn_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Horn_cmd_11c::CopyFrom(const Horn_cmd_11c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_cmd_11c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_cmd_11c::IsInitialized() const {
  return true;
}

void Horn_cmd_11c::InternalSwap(Horn_cmd_11c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Horn_cmd_11c, _impl_.horn_cmd_)
      + sizeof(Horn_cmd_11c::_impl_.horn_cmd_)
      - PROTOBUF_FIELD_OFFSET(Horn_cmd_11c, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_cmd_11c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[28]);
}

// ===================================================================

class Global_rpt_10::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_rpt_10>()._impl_._has_bits_);
  static void set_has_config_fault_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pacmod_subsystem_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pacmod_system_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_system_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pacmod_system_fault_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_veh_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_str_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_brk_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usr_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_usr_can_read_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Global_rpt_10::Global_rpt_10(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Global_rpt_10)
}
Global_rpt_10::Global_rpt_10(const Global_rpt_10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_system_enabled_){}
    , decltype(_impl_.config_fault_active_){}
    , decltype(_impl_.pacmod_subsystem_timeout_){}
    , decltype(_impl_.pacmod_system_fault_active_){}
    , decltype(_impl_.veh_can_timeout_){}
    , decltype(_impl_.pacmod_system_override_active_){}
    , decltype(_impl_.brk_can_timeout_){}
    , decltype(_impl_.str_can_timeout_){}
    , decltype(_impl_.usr_can_timeout_){}
    , decltype(_impl_.usr_can_read_errors_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pacmod_system_enabled_, &from._impl_.pacmod_system_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usr_can_read_errors_) -
    reinterpret_cast<char*>(&_impl_.pacmod_system_enabled_)) + sizeof(_impl_.usr_can_read_errors_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_rpt_10)
}

inline void Global_rpt_10::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_system_enabled_){0}
    , decltype(_impl_.config_fault_active_){false}
    , decltype(_impl_.pacmod_subsystem_timeout_){false}
    , decltype(_impl_.pacmod_system_fault_active_){false}
    , decltype(_impl_.veh_can_timeout_){false}
    , decltype(_impl_.pacmod_system_override_active_){0}
    , decltype(_impl_.brk_can_timeout_){0}
    , decltype(_impl_.str_can_timeout_){false}
    , decltype(_impl_.usr_can_timeout_){false}
    , decltype(_impl_.usr_can_read_errors_){0}
  };
}

Global_rpt_10::~Global_rpt_10() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_rpt_10)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Global_rpt_10::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Global_rpt_10::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Global_rpt_10::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_rpt_10)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.pacmod_system_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.str_can_timeout_) -
        reinterpret_cast<char*>(&_impl_.pacmod_system_enabled_)) + sizeof(_impl_.str_can_timeout_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.usr_can_timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usr_can_read_errors_) -
        reinterpret_cast<char*>(&_impl_.usr_can_timeout_)) + sizeof(_impl_.usr_can_read_errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Global_rpt_10::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool config_fault_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_config_fault_active(&has_bits);
          _impl_.config_fault_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_subsystem_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_subsystem_timeout(&has_bits);
          _impl_.pacmod_subsystem_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType_IsValid(val))) {
            _internal_set_pacmod_system_enabled(static_cast<::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType_IsValid(val))) {
            _internal_set_pacmod_system_override_active(static_cast<::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_system_fault_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pacmod_system_fault_active(&has_bits);
          _impl_.pacmod_system_fault_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool veh_can_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_veh_can_timeout(&has_bits);
          _impl_.veh_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool str_can_timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_str_can_timeout(&has_bits);
          _impl_.str_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType_IsValid(val))) {
            _internal_set_brk_can_timeout(static_cast<::apollo::canbus::Global_rpt_10_Brk_can_timeoutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool usr_can_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_usr_can_timeout(&has_bits);
          _impl_.usr_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 usr_can_read_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_usr_can_read_errors(&has_bits);
          _impl_.usr_can_read_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Global_rpt_10::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_rpt_10)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool config_fault_active = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_config_fault_active(), target);
  }

  // optional bool pacmod_subsystem_timeout = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_subsystem_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pacmod_system_enabled(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pacmod_system_override_active(), target);
  }

  // optional bool pacmod_system_fault_active = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_system_fault_active(), target);
  }

  // optional bool veh_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_veh_can_timeout(), target);
  }

  // optional bool str_can_timeout = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_str_can_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_brk_can_timeout(), target);
  }

  // optional bool usr_can_timeout = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_usr_can_timeout(), target);
  }

  // optional int32 usr_can_read_errors = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_usr_can_read_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_rpt_10)
  return target;
}

size_t Global_rpt_10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_rpt_10)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pacmod_system_enabled());
    }

    // optional bool config_fault_active = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_subsystem_timeout = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_system_fault_active = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool veh_can_timeout = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pacmod_system_override_active());
    }

    // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brk_can_timeout());
    }

    // optional bool str_can_timeout = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool usr_can_timeout = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 usr_can_read_errors = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usr_can_read_errors());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Global_rpt_10::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Global_rpt_10::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Global_rpt_10::GetClassData() const { return &_class_data_; }

void Global_rpt_10::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Global_rpt_10 *>(to)->MergeFrom(
      static_cast<const Global_rpt_10 &>(from));
}


void Global_rpt_10::MergeFrom(const Global_rpt_10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_rpt_10)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pacmod_system_enabled_ = from._impl_.pacmod_system_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.config_fault_active_ = from._impl_.config_fault_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pacmod_subsystem_timeout_ = from._impl_.pacmod_subsystem_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pacmod_system_fault_active_ = from._impl_.pacmod_system_fault_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.veh_can_timeout_ = from._impl_.veh_can_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pacmod_system_override_active_ = from._impl_.pacmod_system_override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.brk_can_timeout_ = from._impl_.brk_can_timeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.str_can_timeout_ = from._impl_.str_can_timeout_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.usr_can_timeout_ = from._impl_.usr_can_timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.usr_can_read_errors_ = from._impl_.usr_can_read_errors_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Global_rpt_10::CopyFrom(const Global_rpt_10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_rpt_10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_rpt_10::IsInitialized() const {
  return true;
}

void Global_rpt_10::InternalSwap(Global_rpt_10* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Global_rpt_10, _impl_.usr_can_read_errors_)
      + sizeof(Global_rpt_10::_impl_.usr_can_read_errors_)
      - PROTOBUF_FIELD_OFFSET(Global_rpt_10, _impl_.pacmod_system_enabled_)>(
          reinterpret_cast<char*>(&_impl_.pacmod_system_enabled_),
          reinterpret_cast<char*>(&other->_impl_.pacmod_system_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_rpt_10::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[29]);
}

// ===================================================================

class Accel_aux_rpt_300::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_aux_rpt_300>()._impl_._has_bits_);
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_pedal_force_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_pedal_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raw_pedal_pos_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_pedal_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Accel_aux_rpt_300::Accel_aux_rpt_300(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Accel_aux_rpt_300)
}
Accel_aux_rpt_300::Accel_aux_rpt_300(const Accel_aux_rpt_300& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_pedal_force_){}
    , decltype(_impl_.raw_pedal_pos_){}
    , decltype(_impl_.user_interaction_is_valid_){}
    , decltype(_impl_.user_interaction_){}
    , decltype(_impl_.raw_pedal_force_is_valid_){}
    , decltype(_impl_.raw_pedal_pos_is_valid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.raw_pedal_force_, &from._impl_.raw_pedal_force_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.raw_pedal_pos_is_valid_) -
    reinterpret_cast<char*>(&_impl_.raw_pedal_force_)) + sizeof(_impl_.raw_pedal_pos_is_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_aux_rpt_300)
}

inline void Accel_aux_rpt_300::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_pedal_force_){0}
    , decltype(_impl_.raw_pedal_pos_){0}
    , decltype(_impl_.user_interaction_is_valid_){false}
    , decltype(_impl_.user_interaction_){false}
    , decltype(_impl_.raw_pedal_force_is_valid_){false}
    , decltype(_impl_.raw_pedal_pos_is_valid_){false}
  };
}

Accel_aux_rpt_300::~Accel_aux_rpt_300() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_aux_rpt_300)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accel_aux_rpt_300::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Accel_aux_rpt_300::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accel_aux_rpt_300::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_aux_rpt_300)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.raw_pedal_force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_pedal_pos_is_valid_) -
        reinterpret_cast<char*>(&_impl_.raw_pedal_force_)) + sizeof(_impl_.raw_pedal_pos_is_valid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel_aux_rpt_300::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool user_interaction_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          _impl_.user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_interaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_interaction(&has_bits);
          _impl_.user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_pedal_force_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_raw_pedal_force_is_valid(&has_bits);
          _impl_.raw_pedal_force_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_pedal_force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_raw_pedal_force(&has_bits);
          _impl_.raw_pedal_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_pedal_pos_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_raw_pedal_pos_is_valid(&has_bits);
          _impl_.raw_pedal_pos_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_pedal_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_raw_pedal_pos(&has_bits);
          _impl_.raw_pedal_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accel_aux_rpt_300::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_aux_rpt_300)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool user_interaction_is_valid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_user_interaction(), target);
  }

  // optional bool raw_pedal_force_is_valid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_raw_pedal_force_is_valid(), target);
  }

  // optional double raw_pedal_force = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_raw_pedal_force(), target);
  }

  // optional bool raw_pedal_pos_is_valid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_pedal_pos_is_valid(), target);
  }

  // optional double raw_pedal_pos = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_pedal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_aux_rpt_300)
  return target;
}

size_t Accel_aux_rpt_300::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_aux_rpt_300)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double raw_pedal_force = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double raw_pedal_pos = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool user_interaction_is_valid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_force_is_valid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_pos_is_valid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accel_aux_rpt_300::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accel_aux_rpt_300::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accel_aux_rpt_300::GetClassData() const { return &_class_data_; }

void Accel_aux_rpt_300::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accel_aux_rpt_300 *>(to)->MergeFrom(
      static_cast<const Accel_aux_rpt_300 &>(from));
}


void Accel_aux_rpt_300::MergeFrom(const Accel_aux_rpt_300& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_aux_rpt_300)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.raw_pedal_force_ = from._impl_.raw_pedal_force_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.raw_pedal_pos_ = from._impl_.raw_pedal_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_interaction_is_valid_ = from._impl_.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.user_interaction_ = from._impl_.user_interaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.raw_pedal_force_is_valid_ = from._impl_.raw_pedal_force_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.raw_pedal_pos_is_valid_ = from._impl_.raw_pedal_pos_is_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accel_aux_rpt_300::CopyFrom(const Accel_aux_rpt_300& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_aux_rpt_300)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_aux_rpt_300::IsInitialized() const {
  return true;
}

void Accel_aux_rpt_300::InternalSwap(Accel_aux_rpt_300* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel_aux_rpt_300, _impl_.raw_pedal_pos_is_valid_)
      + sizeof(Accel_aux_rpt_300::_impl_.raw_pedal_pos_is_valid_)
      - PROTOBUF_FIELD_OFFSET(Accel_aux_rpt_300, _impl_.raw_pedal_force_)>(
          reinterpret_cast<char*>(&_impl_.raw_pedal_force_),
          reinterpret_cast<char*>(&other->_impl_.raw_pedal_force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_aux_rpt_300::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[30]);
}

// ===================================================================

class Cruise_control_buttons_rpt_208::_Internal {
 public:
  using HasBits = decltype(std::declval<Cruise_control_buttons_rpt_208>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Cruise_control_buttons_rpt_208::Cruise_control_buttons_rpt_208(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Cruise_control_buttons_rpt_208)
}
Cruise_control_buttons_rpt_208::Cruise_control_buttons_rpt_208(const Cruise_control_buttons_rpt_208& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_output_fault_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Cruise_control_buttons_rpt_208)
}

inline void Cruise_control_buttons_rpt_208::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
  };
}

Cruise_control_buttons_rpt_208::~Cruise_control_buttons_rpt_208() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Cruise_control_buttons_rpt_208)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cruise_control_buttons_rpt_208::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cruise_control_buttons_rpt_208::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cruise_control_buttons_rpt_208::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_output_fault_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.command_output_fault_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.command_output_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cruise_control_buttons_rpt_208::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cruise_control_buttons_rpt_208::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_commanded_value(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Cruise_control_buttons_rpt_208)
  return target;
}

size_t Cruise_control_buttons_rpt_208::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cruise_control_buttons_rpt_208::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cruise_control_buttons_rpt_208::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cruise_control_buttons_rpt_208::GetClassData() const { return &_class_data_; }

void Cruise_control_buttons_rpt_208::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cruise_control_buttons_rpt_208 *>(to)->MergeFrom(
      static_cast<const Cruise_control_buttons_rpt_208 &>(from));
}


void Cruise_control_buttons_rpt_208::MergeFrom(const Cruise_control_buttons_rpt_208& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cruise_control_buttons_rpt_208::CopyFrom(const Cruise_control_buttons_rpt_208& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cruise_control_buttons_rpt_208::IsInitialized() const {
  return true;
}

void Cruise_control_buttons_rpt_208::InternalSwap(Cruise_control_buttons_rpt_208* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cruise_control_buttons_rpt_208, _impl_.command_output_fault_)
      + sizeof(Cruise_control_buttons_rpt_208::_impl_.command_output_fault_)
      - PROTOBUF_FIELD_OFFSET(Cruise_control_buttons_rpt_208, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cruise_control_buttons_rpt_208::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[31]);
}

// ===================================================================

class Vehicle_speed_rpt_400::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_speed_rpt_400>()._impl_._has_bits_);
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vehicle_speed_rpt_400::Vehicle_speed_rpt_400(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vehicle_speed_rpt_400)
}
Vehicle_speed_rpt_400::Vehicle_speed_rpt_400(const Vehicle_speed_rpt_400& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_speed_){}
    , decltype(_impl_.vehicle_speed_valid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_speed_, &from._impl_.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vehicle_speed_valid_) -
    reinterpret_cast<char*>(&_impl_.vehicle_speed_)) + sizeof(_impl_.vehicle_speed_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_speed_rpt_400)
}

inline void Vehicle_speed_rpt_400::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_speed_){0}
    , decltype(_impl_.vehicle_speed_valid_){0}
  };
}

Vehicle_speed_rpt_400::~Vehicle_speed_rpt_400() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_speed_rpt_400)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vehicle_speed_rpt_400::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vehicle_speed_rpt_400::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vehicle_speed_rpt_400::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_speed_rpt_400)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.vehicle_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vehicle_speed_valid_) -
        reinterpret_cast<char*>(&_impl_.vehicle_speed_)) + sizeof(_impl_.vehicle_speed_valid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_speed_rpt_400::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double vehicle_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          _impl_.vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(val))) {
            _internal_set_vehicle_speed_valid(static_cast<::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vehicle_speed_rpt_400::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_speed_rpt_400)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_vehicle_speed(), target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vehicle_speed_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_speed_rpt_400)
  return target;
}

size_t Vehicle_speed_rpt_400::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_speed_rpt_400)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double vehicle_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicle_speed_valid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vehicle_speed_rpt_400::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vehicle_speed_rpt_400::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vehicle_speed_rpt_400::GetClassData() const { return &_class_data_; }

void Vehicle_speed_rpt_400::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vehicle_speed_rpt_400 *>(to)->MergeFrom(
      static_cast<const Vehicle_speed_rpt_400 &>(from));
}


void Vehicle_speed_rpt_400::MergeFrom(const Vehicle_speed_rpt_400& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_speed_ = from._impl_.vehicle_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vehicle_speed_valid_ = from._impl_.vehicle_speed_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle_speed_rpt_400::CopyFrom(const Vehicle_speed_rpt_400& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_speed_rpt_400::IsInitialized() const {
  return true;
}

void Vehicle_speed_rpt_400::InternalSwap(Vehicle_speed_rpt_400* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_speed_rpt_400, _impl_.vehicle_speed_valid_)
      + sizeof(Vehicle_speed_rpt_400::_impl_.vehicle_speed_valid_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_speed_rpt_400, _impl_.vehicle_speed_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_speed_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_speed_rpt_400::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[32]);
}

// ===================================================================

class Brake_aux_rpt_304::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_aux_rpt_304>()._impl_._has_bits_);
  static void set_has_brake_on_off_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_brake_pressure_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_brake_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_raw_pedal_force_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_pedal_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raw_pedal_pos_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_pedal_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Brake_aux_rpt_304::Brake_aux_rpt_304(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_aux_rpt_304)
}
Brake_aux_rpt_304::Brake_aux_rpt_304(const Brake_aux_rpt_304& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_on_off_is_valid_){}
    , decltype(_impl_.brake_on_off_){}
    , decltype(_impl_.user_interaction_is_valid_){}
    , decltype(_impl_.user_interaction_){}
    , decltype(_impl_.raw_brake_pressure_is_valid_){}
    , decltype(_impl_.raw_pedal_force_is_valid_){}
    , decltype(_impl_.raw_pedal_pos_is_valid_){}
    , decltype(_impl_.raw_brake_pressure_){}
    , decltype(_impl_.raw_pedal_force_){}
    , decltype(_impl_.raw_pedal_pos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_on_off_is_valid_, &from._impl_.brake_on_off_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.raw_pedal_pos_) -
    reinterpret_cast<char*>(&_impl_.brake_on_off_is_valid_)) + sizeof(_impl_.raw_pedal_pos_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_aux_rpt_304)
}

inline void Brake_aux_rpt_304::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_on_off_is_valid_){false}
    , decltype(_impl_.brake_on_off_){false}
    , decltype(_impl_.user_interaction_is_valid_){false}
    , decltype(_impl_.user_interaction_){false}
    , decltype(_impl_.raw_brake_pressure_is_valid_){false}
    , decltype(_impl_.raw_pedal_force_is_valid_){false}
    , decltype(_impl_.raw_pedal_pos_is_valid_){false}
    , decltype(_impl_.raw_brake_pressure_){0}
    , decltype(_impl_.raw_pedal_force_){0}
    , decltype(_impl_.raw_pedal_pos_){0}
  };
}

Brake_aux_rpt_304::~Brake_aux_rpt_304() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_aux_rpt_304)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_aux_rpt_304::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_aux_rpt_304::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_aux_rpt_304::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_aux_rpt_304)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.brake_on_off_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_brake_pressure_) -
        reinterpret_cast<char*>(&_impl_.brake_on_off_is_valid_)) + sizeof(_impl_.raw_brake_pressure_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.raw_pedal_force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_pedal_pos_) -
        reinterpret_cast<char*>(&_impl_.raw_pedal_force_)) + sizeof(_impl_.raw_pedal_pos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_aux_rpt_304::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool brake_on_off_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_brake_on_off_is_valid(&has_bits);
          _impl_.brake_on_off_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_on_off = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_brake_on_off(&has_bits);
          _impl_.brake_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_interaction_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          _impl_.user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_interaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_interaction(&has_bits);
          _impl_.user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_brake_pressure_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_raw_brake_pressure_is_valid(&has_bits);
          _impl_.raw_brake_pressure_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_brake_pressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_raw_brake_pressure(&has_bits);
          _impl_.raw_brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_pedal_force_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_raw_pedal_force_is_valid(&has_bits);
          _impl_.raw_pedal_force_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_pedal_force = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_raw_pedal_force(&has_bits);
          _impl_.raw_pedal_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_pedal_pos_is_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_raw_pedal_pos_is_valid(&has_bits);
          _impl_.raw_pedal_pos_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_pedal_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_raw_pedal_pos(&has_bits);
          _impl_.raw_pedal_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_aux_rpt_304::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_aux_rpt_304)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool brake_on_off_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_brake_on_off_is_valid(), target);
  }

  // optional bool brake_on_off = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_brake_on_off(), target);
  }

  // optional bool user_interaction_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_user_interaction(), target);
  }

  // optional bool raw_brake_pressure_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_brake_pressure_is_valid(), target);
  }

  // optional double raw_brake_pressure = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_brake_pressure(), target);
  }

  // optional bool raw_pedal_force_is_valid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_pedal_force_is_valid(), target);
  }

  // optional double raw_pedal_force = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_raw_pedal_force(), target);
  }

  // optional bool raw_pedal_pos_is_valid = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_raw_pedal_pos_is_valid(), target);
  }

  // optional double raw_pedal_pos = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_raw_pedal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_aux_rpt_304)
  return target;
}

size_t Brake_aux_rpt_304::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_aux_rpt_304)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool brake_on_off_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool brake_on_off = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_brake_pressure_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_force_is_valid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_pos_is_valid = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double raw_brake_pressure = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double raw_pedal_force = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double raw_pedal_pos = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_aux_rpt_304::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_aux_rpt_304::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_aux_rpt_304::GetClassData() const { return &_class_data_; }

void Brake_aux_rpt_304::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_aux_rpt_304 *>(to)->MergeFrom(
      static_cast<const Brake_aux_rpt_304 &>(from));
}


void Brake_aux_rpt_304::MergeFrom(const Brake_aux_rpt_304& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_aux_rpt_304)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_on_off_is_valid_ = from._impl_.brake_on_off_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brake_on_off_ = from._impl_.brake_on_off_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_interaction_is_valid_ = from._impl_.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.user_interaction_ = from._impl_.user_interaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.raw_brake_pressure_is_valid_ = from._impl_.raw_brake_pressure_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.raw_pedal_force_is_valid_ = from._impl_.raw_pedal_force_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.raw_pedal_pos_is_valid_ = from._impl_.raw_pedal_pos_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.raw_brake_pressure_ = from._impl_.raw_brake_pressure_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.raw_pedal_force_ = from._impl_.raw_pedal_force_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.raw_pedal_pos_ = from._impl_.raw_pedal_pos_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_aux_rpt_304::CopyFrom(const Brake_aux_rpt_304& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_aux_rpt_304)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_aux_rpt_304::IsInitialized() const {
  return true;
}

void Brake_aux_rpt_304::InternalSwap(Brake_aux_rpt_304* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_aux_rpt_304, _impl_.raw_pedal_pos_)
      + sizeof(Brake_aux_rpt_304::_impl_.raw_pedal_pos_)
      - PROTOBUF_FIELD_OFFSET(Brake_aux_rpt_304, _impl_.brake_on_off_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.brake_on_off_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.brake_on_off_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_aux_rpt_304::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[33]);
}

// ===================================================================

class Media_controls_cmd_120::_Internal {
 public:
  using HasBits = decltype(std::declval<Media_controls_cmd_120>()._impl_._has_bits_);
  static void set_has_media_controls_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Media_controls_cmd_120::Media_controls_cmd_120(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Media_controls_cmd_120)
}
Media_controls_cmd_120::Media_controls_cmd_120(const Media_controls_cmd_120& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_controls_cmd_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.media_controls_cmd_, &from._impl_.media_controls_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_) -
    reinterpret_cast<char*>(&_impl_.media_controls_cmd_)) + sizeof(_impl_.enable_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Media_controls_cmd_120)
}

inline void Media_controls_cmd_120::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_controls_cmd_){0}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.enable_){false}
  };
}

Media_controls_cmd_120::~Media_controls_cmd_120() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Media_controls_cmd_120)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media_controls_cmd_120::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Media_controls_cmd_120::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Media_controls_cmd_120::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Media_controls_cmd_120)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.media_controls_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_) -
        reinterpret_cast<char*>(&_impl_.media_controls_cmd_)) + sizeof(_impl_.enable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Media_controls_cmd_120::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType_IsValid(val))) {
            _internal_set_media_controls_cmd(static_cast<::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media_controls_cmd_120::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Media_controls_cmd_120)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_media_controls_cmd(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional bool enable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Media_controls_cmd_120)
  return target;
}

size_t Media_controls_cmd_120::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Media_controls_cmd_120)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_media_controls_cmd());
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Media_controls_cmd_120::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Media_controls_cmd_120::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Media_controls_cmd_120::GetClassData() const { return &_class_data_; }

void Media_controls_cmd_120::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Media_controls_cmd_120 *>(to)->MergeFrom(
      static_cast<const Media_controls_cmd_120 &>(from));
}


void Media_controls_cmd_120::MergeFrom(const Media_controls_cmd_120& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Media_controls_cmd_120)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.media_controls_cmd_ = from._impl_.media_controls_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Media_controls_cmd_120::CopyFrom(const Media_controls_cmd_120& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Media_controls_cmd_120)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_controls_cmd_120::IsInitialized() const {
  return true;
}

void Media_controls_cmd_120::InternalSwap(Media_controls_cmd_120* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Media_controls_cmd_120, _impl_.enable_)
      + sizeof(Media_controls_cmd_120::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(Media_controls_cmd_120, _impl_.media_controls_cmd_)>(
          reinterpret_cast<char*>(&_impl_.media_controls_cmd_),
          reinterpret_cast<char*>(&other->_impl_.media_controls_cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Media_controls_cmd_120::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[34]);
}

// ===================================================================

class Cruise_control_buttons_cmd_108::_Internal {
 public:
  using HasBits = decltype(std::declval<Cruise_control_buttons_cmd_108>()._impl_._has_bits_);
  static void set_has_cruise_control_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Cruise_control_buttons_cmd_108::Cruise_control_buttons_cmd_108(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Cruise_control_buttons_cmd_108)
}
Cruise_control_buttons_cmd_108::Cruise_control_buttons_cmd_108(const Cruise_control_buttons_cmd_108& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cruise_control_button_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cruise_control_button_, &from._impl_.cruise_control_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.cruise_control_button_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Cruise_control_buttons_cmd_108)
}

inline void Cruise_control_buttons_cmd_108::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cruise_control_button_){0}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Cruise_control_buttons_cmd_108::~Cruise_control_buttons_cmd_108() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Cruise_control_buttons_cmd_108)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cruise_control_buttons_cmd_108::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cruise_control_buttons_cmd_108::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cruise_control_buttons_cmd_108::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.cruise_control_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.cruise_control_button_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cruise_control_buttons_cmd_108::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(val))) {
            _internal_set_cruise_control_button(static_cast<::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cruise_control_buttons_cmd_108::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cruise_control_button(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool enable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Cruise_control_buttons_cmd_108)
  return target;
}

size_t Cruise_control_buttons_cmd_108::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cruise_control_button());
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cruise_control_buttons_cmd_108::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cruise_control_buttons_cmd_108::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cruise_control_buttons_cmd_108::GetClassData() const { return &_class_data_; }

void Cruise_control_buttons_cmd_108::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cruise_control_buttons_cmd_108 *>(to)->MergeFrom(
      static_cast<const Cruise_control_buttons_cmd_108 &>(from));
}


void Cruise_control_buttons_cmd_108::MergeFrom(const Cruise_control_buttons_cmd_108& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cruise_control_button_ = from._impl_.cruise_control_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cruise_control_buttons_cmd_108::CopyFrom(const Cruise_control_buttons_cmd_108& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cruise_control_buttons_cmd_108::IsInitialized() const {
  return true;
}

void Cruise_control_buttons_cmd_108::InternalSwap(Cruise_control_buttons_cmd_108* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cruise_control_buttons_cmd_108, _impl_.clear_faults_)
      + sizeof(Cruise_control_buttons_cmd_108::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Cruise_control_buttons_cmd_108, _impl_.cruise_control_button_)>(
          reinterpret_cast<char*>(&_impl_.cruise_control_button_),
          reinterpret_cast<char*>(&other->_impl_.cruise_control_button_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cruise_control_buttons_cmd_108::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[35]);
}

// ===================================================================

class Parking_brake_cmd_124::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_cmd_124>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Parking_brake_cmd_124::Parking_brake_cmd_124(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Parking_brake_cmd_124)
}
Parking_brake_cmd_124::Parking_brake_cmd_124(const Parking_brake_cmd_124& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.parking_brake_cmd_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_cmd_124)
}

inline void Parking_brake_cmd_124::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.parking_brake_cmd_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Parking_brake_cmd_124::~Parking_brake_cmd_124() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_cmd_124)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parking_brake_cmd_124::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parking_brake_cmd_124::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parking_brake_cmd_124::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_cmd_124)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parking_brake_cmd_124::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_brake_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_parking_brake_cmd(&has_bits);
          _impl_.parking_brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parking_brake_cmd_124::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_cmd_124)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool parking_brake_cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_parking_brake_cmd(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_cmd_124)
  return target;
}

size_t Parking_brake_cmd_124::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_cmd_124)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake_cmd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parking_brake_cmd_124::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parking_brake_cmd_124::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parking_brake_cmd_124::GetClassData() const { return &_class_data_; }

void Parking_brake_cmd_124::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parking_brake_cmd_124 *>(to)->MergeFrom(
      static_cast<const Parking_brake_cmd_124 &>(from));
}


void Parking_brake_cmd_124::MergeFrom(const Parking_brake_cmd_124& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_cmd_124)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parking_brake_cmd_ = from._impl_.parking_brake_cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parking_brake_cmd_124::CopyFrom(const Parking_brake_cmd_124& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_cmd_124)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_cmd_124::IsInitialized() const {
  return true;
}

void Parking_brake_cmd_124::InternalSwap(Parking_brake_cmd_124* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parking_brake_cmd_124, _impl_.clear_faults_)
      + sizeof(Parking_brake_cmd_124::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Parking_brake_cmd_124, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_cmd_124::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[36]);
}

// ===================================================================

class Horn_rpt_21c::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_rpt_21c>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Horn_rpt_21c::Horn_rpt_21c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Horn_rpt_21c)
}
Horn_rpt_21c::Horn_rpt_21c(const Horn_rpt_21c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_rpt_21c)
}

inline void Horn_rpt_21c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
  };
}

Horn_rpt_21c::~Horn_rpt_21c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_rpt_21c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Horn_rpt_21c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Horn_rpt_21c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Horn_rpt_21c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_rpt_21c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Horn_rpt_21c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Horn_rpt_21c_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Horn_rpt_21c_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Horn_rpt_21c_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Horn_rpt_21c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_rpt_21c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_rpt_21c)
  return target;
}

size_t Horn_rpt_21c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_rpt_21c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Horn_rpt_21c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Horn_rpt_21c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Horn_rpt_21c::GetClassData() const { return &_class_data_; }

void Horn_rpt_21c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Horn_rpt_21c *>(to)->MergeFrom(
      static_cast<const Horn_rpt_21c &>(from));
}


void Horn_rpt_21c::MergeFrom(const Horn_rpt_21c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_rpt_21c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Horn_rpt_21c::CopyFrom(const Horn_rpt_21c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_rpt_21c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_rpt_21c::IsInitialized() const {
  return true;
}

void Horn_rpt_21c::InternalSwap(Horn_rpt_21c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Horn_rpt_21c, _impl_.manual_input_)
      + sizeof(Horn_rpt_21c::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Horn_rpt_21c, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_rpt_21c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[37]);
}

// ===================================================================

class Shift_rpt_228::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_rpt_228>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Shift_rpt_228::Shift_rpt_228(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Shift_rpt_228)
}
Shift_rpt_228::Shift_rpt_228(const Shift_rpt_228& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_rpt_228)
}

inline void Shift_rpt_228::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Shift_rpt_228::~Shift_rpt_228() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_rpt_228)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shift_rpt_228::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shift_rpt_228::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shift_rpt_228::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_rpt_228)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shift_rpt_228::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Shift_rpt_228_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Shift_rpt_228_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Shift_rpt_228_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shift_rpt_228::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_rpt_228)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_rpt_228)
  return target;
}

size_t Shift_rpt_228::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_rpt_228)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shift_rpt_228::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shift_rpt_228::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shift_rpt_228::GetClassData() const { return &_class_data_; }

void Shift_rpt_228::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shift_rpt_228 *>(to)->MergeFrom(
      static_cast<const Shift_rpt_228 &>(from));
}


void Shift_rpt_228::MergeFrom(const Shift_rpt_228& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_rpt_228)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shift_rpt_228::CopyFrom(const Shift_rpt_228& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_rpt_228)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_rpt_228::IsInitialized() const {
  return true;
}

void Shift_rpt_228::InternalSwap(Shift_rpt_228* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shift_rpt_228, _impl_.output_value_)
      + sizeof(Shift_rpt_228::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Shift_rpt_228, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_rpt_228::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[38]);
}

// ===================================================================

class Shift_cmd_128::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_cmd_128>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shift_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Shift_cmd_128::Shift_cmd_128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Shift_cmd_128)
}
Shift_cmd_128::Shift_cmd_128(const Shift_cmd_128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.shift_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shift_cmd_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.shift_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_cmd_128)
}

inline void Shift_cmd_128::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.shift_cmd_){0}
  };
}

Shift_cmd_128::~Shift_cmd_128() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_cmd_128)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shift_cmd_128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shift_cmd_128::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shift_cmd_128::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_cmd_128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shift_cmd_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.shift_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shift_cmd_128::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_cmd_128_Shift_cmdType_IsValid(val))) {
            _internal_set_shift_cmd(static_cast<::apollo::canbus::Shift_cmd_128_Shift_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shift_cmd_128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_cmd_128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_shift_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_cmd_128)
  return target;
}

size_t Shift_cmd_128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_cmd_128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_shift_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shift_cmd_128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shift_cmd_128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shift_cmd_128::GetClassData() const { return &_class_data_; }

void Shift_cmd_128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shift_cmd_128 *>(to)->MergeFrom(
      static_cast<const Shift_cmd_128 &>(from));
}


void Shift_cmd_128::MergeFrom(const Shift_cmd_128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_cmd_128)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.shift_cmd_ = from._impl_.shift_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shift_cmd_128::CopyFrom(const Shift_cmd_128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_cmd_128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_cmd_128::IsInitialized() const {
  return true;
}

void Shift_cmd_128::InternalSwap(Shift_cmd_128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shift_cmd_128, _impl_.shift_cmd_)
      + sizeof(Shift_cmd_128::_impl_.shift_cmd_)
      - PROTOBUF_FIELD_OFFSET(Shift_cmd_128, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_cmd_128::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[39]);
}

// ===================================================================

class Accel_cmd_100::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_cmd_100>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accel_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Accel_cmd_100::Accel_cmd_100(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Accel_cmd_100)
}
Accel_cmd_100::Accel_cmd_100(const Accel_cmd_100& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_cmd_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accel_cmd_, &from._impl_.accel_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.accel_cmd_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_cmd_100)
}

inline void Accel_cmd_100::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_cmd_){0}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Accel_cmd_100::~Accel_cmd_100() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_cmd_100)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accel_cmd_100::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Accel_cmd_100::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accel_cmd_100::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_cmd_100)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.accel_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.accel_cmd_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel_cmd_100::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_accel_cmd(&has_bits);
          _impl_.accel_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accel_cmd_100::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_cmd_100)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double accel_cmd = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_accel_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_cmd_100)
  return target;
}

size_t Accel_cmd_100::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_cmd_100)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double accel_cmd = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accel_cmd_100::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accel_cmd_100::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accel_cmd_100::GetClassData() const { return &_class_data_; }

void Accel_cmd_100::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accel_cmd_100 *>(to)->MergeFrom(
      static_cast<const Accel_cmd_100 &>(from));
}


void Accel_cmd_100::MergeFrom(const Accel_cmd_100& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_cmd_100)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accel_cmd_ = from._impl_.accel_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accel_cmd_100::CopyFrom(const Accel_cmd_100& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_cmd_100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_cmd_100::IsInitialized() const {
  return true;
}

void Accel_cmd_100::InternalSwap(Accel_cmd_100* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel_cmd_100, _impl_.clear_faults_)
      + sizeof(Accel_cmd_100::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Accel_cmd_100, _impl_.accel_cmd_)>(
          reinterpret_cast<char*>(&_impl_.accel_cmd_),
          reinterpret_cast<char*>(&other->_impl_.accel_cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_cmd_100::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[40]);
}

// ===================================================================

class Parking_brake_rpt_224::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_rpt_224>()._impl_._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Parking_brake_rpt_224::Parking_brake_rpt_224(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Parking_brake_rpt_224)
}
Parking_brake_rpt_224::Parking_brake_rpt_224(const Parking_brake_rpt_224& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_fault_, &from._impl_.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_rpt_224)
}

inline void Parking_brake_rpt_224::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
    , decltype(_impl_.output_value_){false}
    , decltype(_impl_.commanded_value_){false}
    , decltype(_impl_.manual_input_){false}
  };
}

Parking_brake_rpt_224::~Parking_brake_rpt_224() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_rpt_224)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parking_brake_rpt_224::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parking_brake_rpt_224::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parking_brake_rpt_224::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_rpt_224)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.vehicle_fault_)) + sizeof(_impl_.output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.commanded_value_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parking_brake_rpt_224::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parking_brake_rpt_224::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_rpt_224)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional bool output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_output_value(), target);
  }

  // optional bool commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_commanded_value(), target);
  }

  // optional bool manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_rpt_224)
  return target;
}

size_t Parking_brake_rpt_224::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_rpt_224)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parking_brake_rpt_224::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parking_brake_rpt_224::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parking_brake_rpt_224::GetClassData() const { return &_class_data_; }

void Parking_brake_rpt_224::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parking_brake_rpt_224 *>(to)->MergeFrom(
      static_cast<const Parking_brake_rpt_224 &>(from));
}


void Parking_brake_rpt_224::MergeFrom(const Parking_brake_rpt_224& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_rpt_224)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parking_brake_rpt_224::CopyFrom(const Parking_brake_rpt_224& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_rpt_224)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_rpt_224::IsInitialized() const {
  return true;
}

void Parking_brake_rpt_224::InternalSwap(Parking_brake_rpt_224* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parking_brake_rpt_224, _impl_.manual_input_)
      + sizeof(Parking_brake_rpt_224::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Parking_brake_rpt_224, _impl_.vehicle_fault_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_fault_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_rpt_224::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[41]);
}

// ===================================================================

class Brake_cmd_104::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_cmd_104>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Brake_cmd_104::Brake_cmd_104(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_cmd_104)
}
Brake_cmd_104::Brake_cmd_104(const Brake_cmd_104& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_cmd_){}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_cmd_, &from._impl_.brake_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_faults_) -
    reinterpret_cast<char*>(&_impl_.brake_cmd_)) + sizeof(_impl_.clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_cmd_104)
}

inline void Brake_cmd_104::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_cmd_){0}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
  };
}

Brake_cmd_104::~Brake_cmd_104() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_cmd_104)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_cmd_104::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_cmd_104::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_cmd_104::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_cmd_104)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.brake_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_faults_) -
        reinterpret_cast<char*>(&_impl_.brake_cmd_)) + sizeof(_impl_.clear_faults_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_cmd_104::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_brake_cmd(&has_bits);
          _impl_.brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_cmd_104::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_cmd_104)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double brake_cmd = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_cmd_104)
  return target;
}

size_t Brake_cmd_104::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_cmd_104)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double brake_cmd = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_cmd_104::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_cmd_104::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_cmd_104::GetClassData() const { return &_class_data_; }

void Brake_cmd_104::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_cmd_104 *>(to)->MergeFrom(
      static_cast<const Brake_cmd_104 &>(from));
}


void Brake_cmd_104::MergeFrom(const Brake_cmd_104& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_cmd_104)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_cmd_ = from._impl_.brake_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_cmd_104::CopyFrom(const Brake_cmd_104& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_cmd_104)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_cmd_104::IsInitialized() const {
  return true;
}

void Brake_cmd_104::InternalSwap(Brake_cmd_104* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_cmd_104, _impl_.clear_faults_)
      + sizeof(Brake_cmd_104::_impl_.clear_faults_)
      - PROTOBUF_FIELD_OFFSET(Brake_cmd_104, _impl_.brake_cmd_)>(
          reinterpret_cast<char*>(&_impl_.brake_cmd_),
          reinterpret_cast<char*>(&other->_impl_.brake_cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_cmd_104::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[42]);
}

// ===================================================================

class Media_controls_rpt_220::_Internal {
 public:
  using HasBits = decltype(std::declval<Media_controls_rpt_220>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Media_controls_rpt_220::Media_controls_rpt_220(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Media_controls_rpt_220)
}
Media_controls_rpt_220::Media_controls_rpt_220(const Media_controls_rpt_220& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.vehicle_fault_){}
    , decltype(_impl_.pacmod_fault_){}
    , decltype(_impl_.override_active_){}
    , decltype(_impl_.output_reported_fault_){}
    , decltype(_impl_.input_output_fault_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.command_output_fault_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_output_fault_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Media_controls_rpt_220)
}

inline void Media_controls_rpt_220::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.vehicle_fault_){false}
    , decltype(_impl_.pacmod_fault_){false}
    , decltype(_impl_.override_active_){false}
    , decltype(_impl_.output_reported_fault_){false}
    , decltype(_impl_.input_output_fault_){false}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.command_output_fault_){false}
  };
}

Media_controls_rpt_220::~Media_controls_rpt_220() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Media_controls_rpt_220)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media_controls_rpt_220::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Media_controls_rpt_220::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Media_controls_rpt_220::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Media_controls_rpt_220)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.input_output_fault_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.command_output_fault_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.command_output_fault_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Media_controls_rpt_220::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Media_controls_rpt_220_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Media_controls_rpt_220_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Media_controls_rpt_220_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          _impl_.vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          _impl_.pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          _impl_.override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          _impl_.output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          _impl_.input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          _impl_.command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media_controls_rpt_220::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Media_controls_rpt_220)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Media_controls_rpt_220)
  return target;
}

size_t Media_controls_rpt_220::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Media_controls_rpt_220)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Media_controls_rpt_220::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Media_controls_rpt_220::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Media_controls_rpt_220::GetClassData() const { return &_class_data_; }

void Media_controls_rpt_220::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Media_controls_rpt_220 *>(to)->MergeFrom(
      static_cast<const Media_controls_rpt_220 &>(from));
}


void Media_controls_rpt_220::MergeFrom(const Media_controls_rpt_220& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Media_controls_rpt_220)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vehicle_fault_ = from._impl_.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pacmod_fault_ = from._impl_.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.override_active_ = from._impl_.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.output_reported_fault_ = from._impl_.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.input_output_fault_ = from._impl_.input_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.command_output_fault_ = from._impl_.command_output_fault_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Media_controls_rpt_220::CopyFrom(const Media_controls_rpt_220& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Media_controls_rpt_220)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_controls_rpt_220::IsInitialized() const {
  return true;
}

void Media_controls_rpt_220::InternalSwap(Media_controls_rpt_220* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Media_controls_rpt_220, _impl_.command_output_fault_)
      + sizeof(Media_controls_rpt_220::_impl_.command_output_fault_)
      - PROTOBUF_FIELD_OFFSET(Media_controls_rpt_220, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Media_controls_rpt_220::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[43]);
}

// ===================================================================

class Steering_aux_rpt_32c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_aux_rpt_32c>()._impl_._has_bits_);
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_rate_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_torque_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_position_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Steering_aux_rpt_32c::Steering_aux_rpt_32c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_aux_rpt_32c)
}
Steering_aux_rpt_32c::Steering_aux_rpt_32c(const Steering_aux_rpt_32c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_interaction_is_valid_){}
    , decltype(_impl_.user_interaction_){}
    , decltype(_impl_.rotation_rate_is_valid_){}
    , decltype(_impl_.raw_torque_is_valid_){}
    , decltype(_impl_.raw_position_is_valid_){}
    , decltype(_impl_.rotation_rate_){}
    , decltype(_impl_.raw_torque_){}
    , decltype(_impl_.raw_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_interaction_is_valid_, &from._impl_.user_interaction_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.raw_position_) -
    reinterpret_cast<char*>(&_impl_.user_interaction_is_valid_)) + sizeof(_impl_.raw_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_aux_rpt_32c)
}

inline void Steering_aux_rpt_32c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_interaction_is_valid_){false}
    , decltype(_impl_.user_interaction_){false}
    , decltype(_impl_.rotation_rate_is_valid_){false}
    , decltype(_impl_.raw_torque_is_valid_){false}
    , decltype(_impl_.raw_position_is_valid_){false}
    , decltype(_impl_.rotation_rate_){0}
    , decltype(_impl_.raw_torque_){0}
    , decltype(_impl_.raw_position_){0}
  };
}

Steering_aux_rpt_32c::~Steering_aux_rpt_32c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_aux_rpt_32c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_aux_rpt_32c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_aux_rpt_32c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_aux_rpt_32c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_aux_rpt_32c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.user_interaction_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_position_) -
        reinterpret_cast<char*>(&_impl_.user_interaction_is_valid_)) + sizeof(_impl_.raw_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_aux_rpt_32c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool user_interaction_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          _impl_.user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_interaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_interaction(&has_bits);
          _impl_.user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rotation_rate_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rotation_rate_is_valid(&has_bits);
          _impl_.rotation_rate_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rotation_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_rotation_rate(&has_bits);
          _impl_.rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_torque_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_raw_torque_is_valid(&has_bits);
          _impl_.raw_torque_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_torque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_raw_torque(&has_bits);
          _impl_.raw_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_position_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_raw_position_is_valid(&has_bits);
          _impl_.raw_position_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double raw_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_raw_position(&has_bits);
          _impl_.raw_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_aux_rpt_32c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_aux_rpt_32c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool user_interaction_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_user_interaction(), target);
  }

  // optional bool rotation_rate_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_rotation_rate_is_valid(), target);
  }

  // optional double rotation_rate = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rotation_rate(), target);
  }

  // optional bool raw_torque_is_valid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_torque_is_valid(), target);
  }

  // optional double raw_torque = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_torque(), target);
  }

  // optional bool raw_position_is_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_position_is_valid(), target);
  }

  // optional double raw_position = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_raw_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_aux_rpt_32c)
  return target;
}

size_t Steering_aux_rpt_32c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_aux_rpt_32c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool user_interaction_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool rotation_rate_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool raw_torque_is_valid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_position_is_valid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double rotation_rate = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double raw_torque = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double raw_position = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_aux_rpt_32c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_aux_rpt_32c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_aux_rpt_32c::GetClassData() const { return &_class_data_; }

void Steering_aux_rpt_32c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_aux_rpt_32c *>(to)->MergeFrom(
      static_cast<const Steering_aux_rpt_32c &>(from));
}


void Steering_aux_rpt_32c::MergeFrom(const Steering_aux_rpt_32c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_aux_rpt_32c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_interaction_is_valid_ = from._impl_.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_interaction_ = from._impl_.user_interaction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rotation_rate_is_valid_ = from._impl_.rotation_rate_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.raw_torque_is_valid_ = from._impl_.raw_torque_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.raw_position_is_valid_ = from._impl_.raw_position_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.rotation_rate_ = from._impl_.rotation_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.raw_torque_ = from._impl_.raw_torque_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.raw_position_ = from._impl_.raw_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_aux_rpt_32c::CopyFrom(const Steering_aux_rpt_32c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_aux_rpt_32c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_aux_rpt_32c::IsInitialized() const {
  return true;
}

void Steering_aux_rpt_32c::InternalSwap(Steering_aux_rpt_32c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_aux_rpt_32c, _impl_.raw_position_)
      + sizeof(Steering_aux_rpt_32c::_impl_.raw_position_)
      - PROTOBUF_FIELD_OFFSET(Steering_aux_rpt_32c, _impl_.user_interaction_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.user_interaction_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.user_interaction_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_aux_rpt_32c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[44]);
}

// ===================================================================

class Lat_lon_heading_rpt_40e::_Internal {
 public:
  using HasBits = decltype(std::declval<Lat_lon_heading_rpt_40e>()._impl_._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Lat_lon_heading_rpt_40e::Lat_lon_heading_rpt_40e(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Lat_lon_heading_rpt_40e)
}
Lat_lon_heading_rpt_40e::Lat_lon_heading_rpt_40e(const Lat_lon_heading_rpt_40e& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.longitude_seconds_){}
    , decltype(_impl_.longitude_minutes_){}
    , decltype(_impl_.longitude_degrees_){}
    , decltype(_impl_.latitude_seconds_){}
    , decltype(_impl_.latitude_minutes_){}
    , decltype(_impl_.latitude_degrees_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heading_, &from._impl_.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_degrees_) -
    reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.latitude_degrees_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lat_lon_heading_rpt_40e)
}

inline void Lat_lon_heading_rpt_40e::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.longitude_seconds_){0}
    , decltype(_impl_.longitude_minutes_){0}
    , decltype(_impl_.longitude_degrees_){0}
    , decltype(_impl_.latitude_seconds_){0}
    , decltype(_impl_.latitude_minutes_){0}
    , decltype(_impl_.latitude_degrees_){0}
  };
}

Lat_lon_heading_rpt_40e::~Lat_lon_heading_rpt_40e() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lat_lon_heading_rpt_40e)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lat_lon_heading_rpt_40e::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lat_lon_heading_rpt_40e::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lat_lon_heading_rpt_40e::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latitude_degrees_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.latitude_degrees_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lat_lon_heading_rpt_40e::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_longitude_seconds(&has_bits);
          _impl_.longitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_longitude_minutes(&has_bits);
          _impl_.longitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_longitude_degrees(&has_bits);
          _impl_.longitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_latitude_seconds(&has_bits);
          _impl_.latitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_minutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_latitude_minutes(&has_bits);
          _impl_.latitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_latitude_degrees(&has_bits);
          _impl_.latitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lat_lon_heading_rpt_40e::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude_seconds(), target);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_longitude_minutes(), target);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_longitude_degrees(), target);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_latitude_seconds(), target);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_latitude_minutes(), target);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_latitude_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lat_lon_heading_rpt_40e)
  return target;
}

size_t Lat_lon_heading_rpt_40e::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 longitude_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_seconds());
    }

    // optional int32 longitude_minutes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_minutes());
    }

    // optional int32 longitude_degrees = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_degrees());
    }

    // optional int32 latitude_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_seconds());
    }

    // optional int32 latitude_minutes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_minutes());
    }

    // optional int32 latitude_degrees = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_degrees());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lat_lon_heading_rpt_40e::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lat_lon_heading_rpt_40e::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lat_lon_heading_rpt_40e::GetClassData() const { return &_class_data_; }

void Lat_lon_heading_rpt_40e::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lat_lon_heading_rpt_40e *>(to)->MergeFrom(
      static_cast<const Lat_lon_heading_rpt_40e &>(from));
}


void Lat_lon_heading_rpt_40e::MergeFrom(const Lat_lon_heading_rpt_40e& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitude_seconds_ = from._impl_.longitude_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.longitude_minutes_ = from._impl_.longitude_minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.longitude_degrees_ = from._impl_.longitude_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.latitude_seconds_ = from._impl_.latitude_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.latitude_minutes_ = from._impl_.latitude_minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.latitude_degrees_ = from._impl_.latitude_degrees_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lat_lon_heading_rpt_40e::CopyFrom(const Lat_lon_heading_rpt_40e& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_lon_heading_rpt_40e::IsInitialized() const {
  return true;
}

void Lat_lon_heading_rpt_40e::InternalSwap(Lat_lon_heading_rpt_40e* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lat_lon_heading_rpt_40e, _impl_.latitude_degrees_)
      + sizeof(Lat_lon_heading_rpt_40e::_impl_.latitude_degrees_)
      - PROTOBUF_FIELD_OFFSET(Lat_lon_heading_rpt_40e, _impl_.heading_)>(
          reinterpret_cast<char*>(&_impl_.heading_),
          reinterpret_cast<char*>(&other->_impl_.heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lat_lon_heading_rpt_40e::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[45]);
}

// ===================================================================

class Yaw_rate_rpt_40d::_Internal {
 public:
  using HasBits = decltype(std::declval<Yaw_rate_rpt_40d>()._impl_._has_bits_);
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Yaw_rate_rpt_40d::Yaw_rate_rpt_40d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Yaw_rate_rpt_40d)
}
Yaw_rate_rpt_40d::Yaw_rate_rpt_40d(const Yaw_rate_rpt_40d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.yaw_rate_ = from._impl_.yaw_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Yaw_rate_rpt_40d)
}

inline void Yaw_rate_rpt_40d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_rate_){0}
  };
}

Yaw_rate_rpt_40d::~Yaw_rate_rpt_40d() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Yaw_rate_rpt_40d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Yaw_rate_rpt_40d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Yaw_rate_rpt_40d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Yaw_rate_rpt_40d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Yaw_rate_rpt_40d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yaw_rate_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Yaw_rate_rpt_40d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double yaw_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_yaw_rate(&has_bits);
          _impl_.yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Yaw_rate_rpt_40d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Yaw_rate_rpt_40d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Yaw_rate_rpt_40d)
  return target;
}

size_t Yaw_rate_rpt_40d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Yaw_rate_rpt_40d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double yaw_rate = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Yaw_rate_rpt_40d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Yaw_rate_rpt_40d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Yaw_rate_rpt_40d::GetClassData() const { return &_class_data_; }

void Yaw_rate_rpt_40d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Yaw_rate_rpt_40d *>(to)->MergeFrom(
      static_cast<const Yaw_rate_rpt_40d &>(from));
}


void Yaw_rate_rpt_40d::MergeFrom(const Yaw_rate_rpt_40d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_yaw_rate()) {
    _internal_set_yaw_rate(from._internal_yaw_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Yaw_rate_rpt_40d::CopyFrom(const Yaw_rate_rpt_40d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw_rate_rpt_40d::IsInitialized() const {
  return true;
}

void Yaw_rate_rpt_40d::InternalSwap(Yaw_rate_rpt_40d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.yaw_rate_, other->_impl_.yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Yaw_rate_rpt_40d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[46]);
}

// ===================================================================

class Date_time_rpt_40f::_Internal {
 public:
  using HasBits = decltype(std::declval<Date_time_rpt_40f>()._impl_._has_bits_);
  static void set_has_time_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_date_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Date_time_rpt_40f::Date_time_rpt_40f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Date_time_rpt_40f)
}
Date_time_rpt_40f::Date_time_rpt_40f(const Date_time_rpt_40f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_second_){}
    , decltype(_impl_.time_minute_){}
    , decltype(_impl_.time_hour_){}
    , decltype(_impl_.date_day_){}
    , decltype(_impl_.date_month_){}
    , decltype(_impl_.date_year_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_second_, &from._impl_.time_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_year_) -
    reinterpret_cast<char*>(&_impl_.time_second_)) + sizeof(_impl_.date_year_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Date_time_rpt_40f)
}

inline void Date_time_rpt_40f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_second_){0}
    , decltype(_impl_.time_minute_){0}
    , decltype(_impl_.time_hour_){0}
    , decltype(_impl_.date_day_){0}
    , decltype(_impl_.date_month_){0}
    , decltype(_impl_.date_year_){0}
  };
}

Date_time_rpt_40f::~Date_time_rpt_40f() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Date_time_rpt_40f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Date_time_rpt_40f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Date_time_rpt_40f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Date_time_rpt_40f::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Date_time_rpt_40f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.time_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_year_) -
        reinterpret_cast<char*>(&_impl_.time_second_)) + sizeof(_impl_.date_year_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date_time_rpt_40f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 time_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_second(&has_bits);
          _impl_.time_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_minute(&has_bits);
          _impl_.time_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_hour(&has_bits);
          _impl_.time_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_date_day(&has_bits);
          _impl_.date_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_date_month(&has_bits);
          _impl_.date_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_date_year(&has_bits);
          _impl_.date_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Date_time_rpt_40f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Date_time_rpt_40f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_second(), target);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_minute(), target);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_hour(), target);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_date_day(), target);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_date_month(), target);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_date_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Date_time_rpt_40f)
  return target;
}

size_t Date_time_rpt_40f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Date_time_rpt_40f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 time_second = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_second());
    }

    // optional int32 time_minute = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_minute());
    }

    // optional int32 time_hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_hour());
    }

    // optional int32 date_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_day());
    }

    // optional int32 date_month = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_month());
    }

    // optional int32 date_year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_year());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Date_time_rpt_40f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Date_time_rpt_40f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Date_time_rpt_40f::GetClassData() const { return &_class_data_; }

void Date_time_rpt_40f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Date_time_rpt_40f *>(to)->MergeFrom(
      static_cast<const Date_time_rpt_40f &>(from));
}


void Date_time_rpt_40f::MergeFrom(const Date_time_rpt_40f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Date_time_rpt_40f)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.time_second_ = from._impl_.time_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_minute_ = from._impl_.time_minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.time_hour_ = from._impl_.time_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.date_day_ = from._impl_.date_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.date_month_ = from._impl_.date_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.date_year_ = from._impl_.date_year_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Date_time_rpt_40f::CopyFrom(const Date_time_rpt_40f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Date_time_rpt_40f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date_time_rpt_40f::IsInitialized() const {
  return true;
}

void Date_time_rpt_40f::InternalSwap(Date_time_rpt_40f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date_time_rpt_40f, _impl_.date_year_)
      + sizeof(Date_time_rpt_40f::_impl_.date_year_)
      - PROTOBUF_FIELD_OFFSET(Date_time_rpt_40f, _impl_.time_second_)>(
          reinterpret_cast<char*>(&_impl_.time_second_),
          reinterpret_cast<char*>(&other->_impl_.time_second_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date_time_rpt_40f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[47]);
}

// ===================================================================

class Vin_rpt_414::_Internal {
 public:
  using HasBits = decltype(std::declval<Vin_rpt_414>()._impl_._has_bits_);
  static void set_has_veh_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_veh_my_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_veh_mfg_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vin_rpt_414::Vin_rpt_414(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vin_rpt_414)
}
Vin_rpt_414::Vin_rpt_414(const Vin_rpt_414& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.veh_serial_){}
    , decltype(_impl_.veh_my_code_){}
    , decltype(_impl_.veh_mfg_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.veh_serial_, &from._impl_.veh_serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.veh_mfg_code_) -
    reinterpret_cast<char*>(&_impl_.veh_serial_)) + sizeof(_impl_.veh_mfg_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vin_rpt_414)
}

inline void Vin_rpt_414::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.veh_serial_){0}
    , decltype(_impl_.veh_my_code_){0}
    , decltype(_impl_.veh_mfg_code_){0}
  };
}

Vin_rpt_414::~Vin_rpt_414() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vin_rpt_414)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vin_rpt_414::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vin_rpt_414::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vin_rpt_414::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vin_rpt_414)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.veh_serial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.veh_mfg_code_) -
        reinterpret_cast<char*>(&_impl_.veh_serial_)) + sizeof(_impl_.veh_mfg_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vin_rpt_414::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 veh_serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_veh_serial(&has_bits);
          _impl_.veh_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 veh_my_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_veh_my_code(&has_bits);
          _impl_.veh_my_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 veh_mfg_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_veh_mfg_code(&has_bits);
          _impl_.veh_mfg_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vin_rpt_414::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vin_rpt_414)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 veh_serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_veh_serial(), target);
  }

  // optional int32 veh_my_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_veh_my_code(), target);
  }

  // optional int32 veh_mfg_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_veh_mfg_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vin_rpt_414)
  return target;
}

size_t Vin_rpt_414::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vin_rpt_414)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 veh_serial = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_veh_serial());
    }

    // optional int32 veh_my_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_veh_my_code());
    }

    // optional int32 veh_mfg_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_veh_mfg_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vin_rpt_414::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vin_rpt_414::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vin_rpt_414::GetClassData() const { return &_class_data_; }

void Vin_rpt_414::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vin_rpt_414 *>(to)->MergeFrom(
      static_cast<const Vin_rpt_414 &>(from));
}


void Vin_rpt_414::MergeFrom(const Vin_rpt_414& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vin_rpt_414)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.veh_serial_ = from._impl_.veh_serial_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.veh_my_code_ = from._impl_.veh_my_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.veh_mfg_code_ = from._impl_.veh_mfg_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vin_rpt_414::CopyFrom(const Vin_rpt_414& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vin_rpt_414)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vin_rpt_414::IsInitialized() const {
  return true;
}

void Vin_rpt_414::InternalSwap(Vin_rpt_414* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vin_rpt_414, _impl_.veh_mfg_code_)
      + sizeof(Vin_rpt_414::_impl_.veh_mfg_code_)
      - PROTOBUF_FIELD_OFFSET(Vin_rpt_414, _impl_.veh_serial_)>(
          reinterpret_cast<char*>(&_impl_.veh_serial_),
          reinterpret_cast<char*>(&other->_impl_.veh_serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vin_rpt_414::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[48]);
}

// ===================================================================

class Occupancy_rpt_415::_Internal {
 public:
  using HasBits = decltype(std::declval<Occupancy_rpt_415>()._impl_._has_bits_);
  static void set_has_rear_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driver_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rear_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pass_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_driver_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pass_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_driver_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rear_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pass_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_driver_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Occupancy_rpt_415::Occupancy_rpt_415(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Occupancy_rpt_415)
}
Occupancy_rpt_415::Occupancy_rpt_415(const Occupancy_rpt_415& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rear_seatbelt_buckled_is_valid_){}
    , decltype(_impl_.pass_seatbelt_buckled_is_valid_){}
    , decltype(_impl_.driver_seatbelt_buckled_is_valid_){}
    , decltype(_impl_.rear_seat_occupied_is_valid_){}
    , decltype(_impl_.pass_seat_occupied_is_valid_){}
    , decltype(_impl_.driver_seat_occupied_is_valid_){}
    , decltype(_impl_.rear_seatbelt_buckled_){}
    , decltype(_impl_.pass_seatbelt_buckled_){}
    , decltype(_impl_.driver_seatbelt_buckled_){}
    , decltype(_impl_.rear_seat_occupied_){}
    , decltype(_impl_.pass_seat_occupied_){}
    , decltype(_impl_.driver_seat_occupied_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rear_seatbelt_buckled_is_valid_, &from._impl_.rear_seatbelt_buckled_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.driver_seat_occupied_) -
    reinterpret_cast<char*>(&_impl_.rear_seatbelt_buckled_is_valid_)) + sizeof(_impl_.driver_seat_occupied_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Occupancy_rpt_415)
}

inline void Occupancy_rpt_415::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rear_seatbelt_buckled_is_valid_){false}
    , decltype(_impl_.pass_seatbelt_buckled_is_valid_){false}
    , decltype(_impl_.driver_seatbelt_buckled_is_valid_){false}
    , decltype(_impl_.rear_seat_occupied_is_valid_){false}
    , decltype(_impl_.pass_seat_occupied_is_valid_){false}
    , decltype(_impl_.driver_seat_occupied_is_valid_){false}
    , decltype(_impl_.rear_seatbelt_buckled_){false}
    , decltype(_impl_.pass_seatbelt_buckled_){false}
    , decltype(_impl_.driver_seatbelt_buckled_){false}
    , decltype(_impl_.rear_seat_occupied_){false}
    , decltype(_impl_.pass_seat_occupied_){false}
    , decltype(_impl_.driver_seat_occupied_){false}
  };
}

Occupancy_rpt_415::~Occupancy_rpt_415() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Occupancy_rpt_415)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Occupancy_rpt_415::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Occupancy_rpt_415::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Occupancy_rpt_415::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Occupancy_rpt_415)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.rear_seatbelt_buckled_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pass_seatbelt_buckled_) -
        reinterpret_cast<char*>(&_impl_.rear_seatbelt_buckled_is_valid_)) + sizeof(_impl_.pass_seatbelt_buckled_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.driver_seatbelt_buckled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.driver_seat_occupied_) -
        reinterpret_cast<char*>(&_impl_.driver_seatbelt_buckled_)) + sizeof(_impl_.driver_seat_occupied_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Occupancy_rpt_415::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool rear_seatbelt_buckled_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rear_seatbelt_buckled_is_valid(&has_bits);
          _impl_.rear_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_seatbelt_buckled_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pass_seatbelt_buckled_is_valid(&has_bits);
          _impl_.pass_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_seatbelt_buckled_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_driver_seatbelt_buckled_is_valid(&has_bits);
          _impl_.driver_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_seat_occupied_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rear_seat_occupied_is_valid(&has_bits);
          _impl_.rear_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_seat_occupied_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pass_seat_occupied_is_valid(&has_bits);
          _impl_.pass_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_seat_occupied_is_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_driver_seat_occupied_is_valid(&has_bits);
          _impl_.driver_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_seatbelt_buckled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rear_seatbelt_buckled(&has_bits);
          _impl_.rear_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_seatbelt_buckled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pass_seatbelt_buckled(&has_bits);
          _impl_.pass_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_seatbelt_buckled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_driver_seatbelt_buckled(&has_bits);
          _impl_.driver_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_seat_occupied = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rear_seat_occupied(&has_bits);
          _impl_.rear_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pass_seat_occupied = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_pass_seat_occupied(&has_bits);
          _impl_.pass_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_seat_occupied = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_driver_seat_occupied(&has_bits);
          _impl_.driver_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Occupancy_rpt_415::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Occupancy_rpt_415)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool rear_seatbelt_buckled_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_rear_seatbelt_buckled_is_valid(), target);
  }

  // optional bool pass_seatbelt_buckled_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pass_seatbelt_buckled_is_valid(), target);
  }

  // optional bool driver_seatbelt_buckled_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_seatbelt_buckled_is_valid(), target);
  }

  // optional bool rear_seat_occupied_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_rear_seat_occupied_is_valid(), target);
  }

  // optional bool pass_seat_occupied_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pass_seat_occupied_is_valid(), target);
  }

  // optional bool driver_seat_occupied_is_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_driver_seat_occupied_is_valid(), target);
  }

  // optional bool rear_seatbelt_buckled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_seatbelt_buckled(), target);
  }

  // optional bool pass_seatbelt_buckled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_pass_seatbelt_buckled(), target);
  }

  // optional bool driver_seatbelt_buckled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_driver_seatbelt_buckled(), target);
  }

  // optional bool rear_seat_occupied = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_rear_seat_occupied(), target);
  }

  // optional bool pass_seat_occupied = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_pass_seat_occupied(), target);
  }

  // optional bool driver_seat_occupied = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_driver_seat_occupied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Occupancy_rpt_415)
  return target;
}

size_t Occupancy_rpt_415::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Occupancy_rpt_415)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool rear_seatbelt_buckled_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seatbelt_buckled_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seatbelt_buckled_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seat_occupied_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seat_occupied_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seat_occupied_is_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seatbelt_buckled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seatbelt_buckled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool driver_seatbelt_buckled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seat_occupied = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seat_occupied = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seat_occupied = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Occupancy_rpt_415::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Occupancy_rpt_415::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Occupancy_rpt_415::GetClassData() const { return &_class_data_; }

void Occupancy_rpt_415::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Occupancy_rpt_415 *>(to)->MergeFrom(
      static_cast<const Occupancy_rpt_415 &>(from));
}


void Occupancy_rpt_415::MergeFrom(const Occupancy_rpt_415& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Occupancy_rpt_415)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rear_seatbelt_buckled_is_valid_ = from._impl_.rear_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pass_seatbelt_buckled_is_valid_ = from._impl_.pass_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.driver_seatbelt_buckled_is_valid_ = from._impl_.driver_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rear_seat_occupied_is_valid_ = from._impl_.rear_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pass_seat_occupied_is_valid_ = from._impl_.pass_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.driver_seat_occupied_is_valid_ = from._impl_.driver_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rear_seatbelt_buckled_ = from._impl_.rear_seatbelt_buckled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pass_seatbelt_buckled_ = from._impl_.pass_seatbelt_buckled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.driver_seatbelt_buckled_ = from._impl_.driver_seatbelt_buckled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.rear_seat_occupied_ = from._impl_.rear_seat_occupied_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.pass_seat_occupied_ = from._impl_.pass_seat_occupied_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.driver_seat_occupied_ = from._impl_.driver_seat_occupied_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Occupancy_rpt_415::CopyFrom(const Occupancy_rpt_415& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Occupancy_rpt_415)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Occupancy_rpt_415::IsInitialized() const {
  return true;
}

void Occupancy_rpt_415::InternalSwap(Occupancy_rpt_415* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Occupancy_rpt_415, _impl_.driver_seat_occupied_)
      + sizeof(Occupancy_rpt_415::_impl_.driver_seat_occupied_)
      - PROTOBUF_FIELD_OFFSET(Occupancy_rpt_415, _impl_.rear_seatbelt_buckled_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.rear_seatbelt_buckled_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.rear_seatbelt_buckled_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Occupancy_rpt_415::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[49]);
}

// ===================================================================

class Interior_lights_rpt_416::_Internal {
 public:
  using HasBits = decltype(std::declval<Interior_lights_rpt_416>()._impl_._has_bits_);
  static void set_has_dim_level_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mood_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rear_dome_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_front_dome_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dim_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mood_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_dome_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_front_dome_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Interior_lights_rpt_416::Interior_lights_rpt_416(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Interior_lights_rpt_416)
}
Interior_lights_rpt_416::Interior_lights_rpt_416(const Interior_lights_rpt_416& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dim_level_is_valid_){}
    , decltype(_impl_.mood_lights_on_is_valid_){}
    , decltype(_impl_.rear_dome_lights_on_is_valid_){}
    , decltype(_impl_.front_dome_lights_on_is_valid_){}
    , decltype(_impl_.dim_level_){}
    , decltype(_impl_.mood_lights_on_){}
    , decltype(_impl_.rear_dome_lights_on_){}
    , decltype(_impl_.front_dome_lights_on_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dim_level_is_valid_, &from._impl_.dim_level_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.front_dome_lights_on_) -
    reinterpret_cast<char*>(&_impl_.dim_level_is_valid_)) + sizeof(_impl_.front_dome_lights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Interior_lights_rpt_416)
}

inline void Interior_lights_rpt_416::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dim_level_is_valid_){false}
    , decltype(_impl_.mood_lights_on_is_valid_){false}
    , decltype(_impl_.rear_dome_lights_on_is_valid_){false}
    , decltype(_impl_.front_dome_lights_on_is_valid_){false}
    , decltype(_impl_.dim_level_){0}
    , decltype(_impl_.mood_lights_on_){false}
    , decltype(_impl_.rear_dome_lights_on_){false}
    , decltype(_impl_.front_dome_lights_on_){false}
  };
}

Interior_lights_rpt_416::~Interior_lights_rpt_416() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Interior_lights_rpt_416)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Interior_lights_rpt_416::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interior_lights_rpt_416::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Interior_lights_rpt_416::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Interior_lights_rpt_416)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.dim_level_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.front_dome_lights_on_) -
        reinterpret_cast<char*>(&_impl_.dim_level_is_valid_)) + sizeof(_impl_.front_dome_lights_on_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interior_lights_rpt_416::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool dim_level_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dim_level_is_valid(&has_bits);
          _impl_.dim_level_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mood_lights_on_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mood_lights_on_is_valid(&has_bits);
          _impl_.mood_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_dome_lights_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rear_dome_lights_on_is_valid(&has_bits);
          _impl_.rear_dome_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_dome_lights_on_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_front_dome_lights_on_is_valid(&has_bits);
          _impl_.front_dome_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType_IsValid(val))) {
            _internal_set_dim_level(static_cast<::apollo::canbus::Interior_lights_rpt_416_Dim_levelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool mood_lights_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mood_lights_on(&has_bits);
          _impl_.mood_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rear_dome_lights_on = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rear_dome_lights_on(&has_bits);
          _impl_.rear_dome_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool front_dome_lights_on = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_front_dome_lights_on(&has_bits);
          _impl_.front_dome_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interior_lights_rpt_416::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Interior_lights_rpt_416)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool dim_level_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_dim_level_is_valid(), target);
  }

  // optional bool mood_lights_on_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mood_lights_on_is_valid(), target);
  }

  // optional bool rear_dome_lights_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_rear_dome_lights_on_is_valid(), target);
  }

  // optional bool front_dome_lights_on_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_front_dome_lights_on_is_valid(), target);
  }

  // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dim_level(), target);
  }

  // optional bool mood_lights_on = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_mood_lights_on(), target);
  }

  // optional bool rear_dome_lights_on = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_dome_lights_on(), target);
  }

  // optional bool front_dome_lights_on = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_front_dome_lights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Interior_lights_rpt_416)
  return target;
}

size_t Interior_lights_rpt_416::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Interior_lights_rpt_416)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool dim_level_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool mood_lights_on_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool rear_dome_lights_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool front_dome_lights_on_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dim_level());
    }

    // optional bool mood_lights_on = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_dome_lights_on = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool front_dome_lights_on = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interior_lights_rpt_416::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interior_lights_rpt_416::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interior_lights_rpt_416::GetClassData() const { return &_class_data_; }

void Interior_lights_rpt_416::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interior_lights_rpt_416 *>(to)->MergeFrom(
      static_cast<const Interior_lights_rpt_416 &>(from));
}


void Interior_lights_rpt_416::MergeFrom(const Interior_lights_rpt_416& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Interior_lights_rpt_416)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dim_level_is_valid_ = from._impl_.dim_level_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mood_lights_on_is_valid_ = from._impl_.mood_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rear_dome_lights_on_is_valid_ = from._impl_.rear_dome_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.front_dome_lights_on_is_valid_ = from._impl_.front_dome_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dim_level_ = from._impl_.dim_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mood_lights_on_ = from._impl_.mood_lights_on_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.rear_dome_lights_on_ = from._impl_.rear_dome_lights_on_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.front_dome_lights_on_ = from._impl_.front_dome_lights_on_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interior_lights_rpt_416::CopyFrom(const Interior_lights_rpt_416& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Interior_lights_rpt_416)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interior_lights_rpt_416::IsInitialized() const {
  return true;
}

void Interior_lights_rpt_416::InternalSwap(Interior_lights_rpt_416* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interior_lights_rpt_416, _impl_.front_dome_lights_on_)
      + sizeof(Interior_lights_rpt_416::_impl_.front_dome_lights_on_)
      - PROTOBUF_FIELD_OFFSET(Interior_lights_rpt_416, _impl_.dim_level_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.dim_level_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.dim_level_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interior_lights_rpt_416::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[50]);
}

// ===================================================================

class Turn_cmd_130::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_cmd_130>()._impl_._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Turn_cmd_130::Turn_cmd_130(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turn_cmd_130)
}
Turn_cmd_130::Turn_cmd_130(const Turn_cmd_130& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.clear_faults_){}
    , decltype(_impl_.turn_signal_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ignore_overrides_, &from._impl_.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turn_signal_cmd_) -
    reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.turn_signal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_cmd_130)
}

inline void Turn_cmd_130::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ignore_overrides_){false}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.clear_override_){false}
    , decltype(_impl_.clear_faults_){false}
    , decltype(_impl_.turn_signal_cmd_){0}
  };
}

Turn_cmd_130::~Turn_cmd_130() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_cmd_130)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turn_cmd_130::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turn_cmd_130::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turn_cmd_130::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_cmd_130)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.turn_signal_cmd_) -
        reinterpret_cast<char*>(&_impl_.ignore_overrides_)) + sizeof(_impl_.turn_signal_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turn_cmd_130::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          _impl_.ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          _impl_.clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          _impl_.clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turn_cmd_130::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_cmd_130)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_cmd_130)
  return target;
}

size_t Turn_cmd_130::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_cmd_130)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turn_cmd_130::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turn_cmd_130::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turn_cmd_130::GetClassData() const { return &_class_data_; }

void Turn_cmd_130::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turn_cmd_130 *>(to)->MergeFrom(
      static_cast<const Turn_cmd_130 &>(from));
}


void Turn_cmd_130::MergeFrom(const Turn_cmd_130& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_cmd_130)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ignore_overrides_ = from._impl_.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_ = from._impl_.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.clear_faults_ = from._impl_.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.turn_signal_cmd_ = from._impl_.turn_signal_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turn_cmd_130::CopyFrom(const Turn_cmd_130& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_cmd_130)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_cmd_130::IsInitialized() const {
  return true;
}

void Turn_cmd_130::InternalSwap(Turn_cmd_130* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Turn_cmd_130, _impl_.turn_signal_cmd_)
      + sizeof(Turn_cmd_130::_impl_.turn_signal_cmd_)
      - PROTOBUF_FIELD_OFFSET(Turn_cmd_130, _impl_.ignore_overrides_)>(
          reinterpret_cast<char*>(&_impl_.ignore_overrides_),
          reinterpret_cast<char*>(&other->_impl_.ignore_overrides_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_cmd_130::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[51]);
}

// ===================================================================

class Detected_object_rpt_411::_Internal {
 public:
  using HasBits = decltype(std::declval<Detected_object_rpt_411>()._impl_._has_bits_);
  static void set_has_front_object_distance_high_res(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_object_distance_low_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Detected_object_rpt_411::Detected_object_rpt_411(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Detected_object_rpt_411)
}
Detected_object_rpt_411::Detected_object_rpt_411(const Detected_object_rpt_411& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_object_distance_high_res_){}
    , decltype(_impl_.front_object_distance_low_res_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_object_distance_high_res_, &from._impl_.front_object_distance_high_res_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.front_object_distance_low_res_) -
    reinterpret_cast<char*>(&_impl_.front_object_distance_high_res_)) + sizeof(_impl_.front_object_distance_low_res_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Detected_object_rpt_411)
}

inline void Detected_object_rpt_411::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_object_distance_high_res_){0}
    , decltype(_impl_.front_object_distance_low_res_){0}
  };
}

Detected_object_rpt_411::~Detected_object_rpt_411() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Detected_object_rpt_411)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detected_object_rpt_411::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Detected_object_rpt_411::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Detected_object_rpt_411::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Detected_object_rpt_411)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.front_object_distance_high_res_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.front_object_distance_low_res_) -
        reinterpret_cast<char*>(&_impl_.front_object_distance_high_res_)) + sizeof(_impl_.front_object_distance_low_res_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detected_object_rpt_411::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double front_object_distance_high_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_front_object_distance_high_res(&has_bits);
          _impl_.front_object_distance_high_res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double front_object_distance_low_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_front_object_distance_low_res(&has_bits);
          _impl_.front_object_distance_low_res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detected_object_rpt_411::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Detected_object_rpt_411)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double front_object_distance_high_res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_object_distance_high_res(), target);
  }

  // optional double front_object_distance_low_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_object_distance_low_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Detected_object_rpt_411)
  return target;
}

size_t Detected_object_rpt_411::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Detected_object_rpt_411)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double front_object_distance_high_res = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double front_object_distance_low_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detected_object_rpt_411::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detected_object_rpt_411::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detected_object_rpt_411::GetClassData() const { return &_class_data_; }

void Detected_object_rpt_411::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detected_object_rpt_411 *>(to)->MergeFrom(
      static_cast<const Detected_object_rpt_411 &>(from));
}


void Detected_object_rpt_411::MergeFrom(const Detected_object_rpt_411& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Detected_object_rpt_411)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.front_object_distance_high_res_ = from._impl_.front_object_distance_high_res_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.front_object_distance_low_res_ = from._impl_.front_object_distance_low_res_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detected_object_rpt_411::CopyFrom(const Detected_object_rpt_411& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Detected_object_rpt_411)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detected_object_rpt_411::IsInitialized() const {
  return true;
}

void Detected_object_rpt_411::InternalSwap(Detected_object_rpt_411* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detected_object_rpt_411, _impl_.front_object_distance_low_res_)
      + sizeof(Detected_object_rpt_411::_impl_.front_object_distance_low_res_)
      - PROTOBUF_FIELD_OFFSET(Detected_object_rpt_411, _impl_.front_object_distance_high_res_)>(
          reinterpret_cast<char*>(&_impl_.front_object_distance_high_res_),
          reinterpret_cast<char*>(&other->_impl_.front_object_distance_high_res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detected_object_rpt_411::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[52]);
}

// ===================================================================

class Veh_specific_rpt_1_412::_Internal {
 public:
  using HasBits = decltype(std::declval<Veh_specific_rpt_1_412>()._impl_._has_bits_);
  static void set_has_shift_pos_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shift_pos_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Veh_specific_rpt_1_412::Veh_specific_rpt_1_412(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Veh_specific_rpt_1_412)
}
Veh_specific_rpt_1_412::Veh_specific_rpt_1_412(const Veh_specific_rpt_1_412& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_pos_2_){}
    , decltype(_impl_.shift_pos_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shift_pos_2_, &from._impl_.shift_pos_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shift_pos_1_) -
    reinterpret_cast<char*>(&_impl_.shift_pos_2_)) + sizeof(_impl_.shift_pos_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Veh_specific_rpt_1_412)
}

inline void Veh_specific_rpt_1_412::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_pos_2_){0}
    , decltype(_impl_.shift_pos_1_){0}
  };
}

Veh_specific_rpt_1_412::~Veh_specific_rpt_1_412() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Veh_specific_rpt_1_412)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Veh_specific_rpt_1_412::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Veh_specific_rpt_1_412::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Veh_specific_rpt_1_412::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Veh_specific_rpt_1_412)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.shift_pos_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shift_pos_1_) -
        reinterpret_cast<char*>(&_impl_.shift_pos_2_)) + sizeof(_impl_.shift_pos_1_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Veh_specific_rpt_1_412::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 shift_pos_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shift_pos_2(&has_bits);
          _impl_.shift_pos_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shift_pos_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shift_pos_1(&has_bits);
          _impl_.shift_pos_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Veh_specific_rpt_1_412::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Veh_specific_rpt_1_412)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 shift_pos_2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shift_pos_2(), target);
  }

  // optional int32 shift_pos_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shift_pos_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Veh_specific_rpt_1_412)
  return target;
}

size_t Veh_specific_rpt_1_412::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Veh_specific_rpt_1_412)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 shift_pos_2 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shift_pos_2());
    }

    // optional int32 shift_pos_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shift_pos_1());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Veh_specific_rpt_1_412::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Veh_specific_rpt_1_412::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Veh_specific_rpt_1_412::GetClassData() const { return &_class_data_; }

void Veh_specific_rpt_1_412::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Veh_specific_rpt_1_412 *>(to)->MergeFrom(
      static_cast<const Veh_specific_rpt_1_412 &>(from));
}


void Veh_specific_rpt_1_412::MergeFrom(const Veh_specific_rpt_1_412& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.shift_pos_2_ = from._impl_.shift_pos_2_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shift_pos_1_ = from._impl_.shift_pos_1_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Veh_specific_rpt_1_412::CopyFrom(const Veh_specific_rpt_1_412& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Veh_specific_rpt_1_412::IsInitialized() const {
  return true;
}

void Veh_specific_rpt_1_412::InternalSwap(Veh_specific_rpt_1_412* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Veh_specific_rpt_1_412, _impl_.shift_pos_1_)
      + sizeof(Veh_specific_rpt_1_412::_impl_.shift_pos_1_)
      - PROTOBUF_FIELD_OFFSET(Veh_specific_rpt_1_412, _impl_.shift_pos_2_)>(
          reinterpret_cast<char*>(&_impl_.shift_pos_2_),
          reinterpret_cast<char*>(&other->_impl_.shift_pos_2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Veh_specific_rpt_1_412::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[53]);
}

// ===================================================================

class Veh_dynamics_rpt_413::_Internal {
 public:
  using HasBits = decltype(std::declval<Veh_dynamics_rpt_413>()._impl_._has_bits_);
  static void set_has_veh_g_forces(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Veh_dynamics_rpt_413::Veh_dynamics_rpt_413(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Veh_dynamics_rpt_413)
}
Veh_dynamics_rpt_413::Veh_dynamics_rpt_413(const Veh_dynamics_rpt_413& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.veh_g_forces_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.veh_g_forces_ = from._impl_.veh_g_forces_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Veh_dynamics_rpt_413)
}

inline void Veh_dynamics_rpt_413::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.veh_g_forces_){0}
  };
}

Veh_dynamics_rpt_413::~Veh_dynamics_rpt_413() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Veh_dynamics_rpt_413)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Veh_dynamics_rpt_413::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Veh_dynamics_rpt_413::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Veh_dynamics_rpt_413::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Veh_dynamics_rpt_413)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.veh_g_forces_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Veh_dynamics_rpt_413::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double veh_g_forces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_veh_g_forces(&has_bits);
          _impl_.veh_g_forces_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Veh_dynamics_rpt_413::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Veh_dynamics_rpt_413)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double veh_g_forces = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_veh_g_forces(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Veh_dynamics_rpt_413)
  return target;
}

size_t Veh_dynamics_rpt_413::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Veh_dynamics_rpt_413)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double veh_g_forces = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Veh_dynamics_rpt_413::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Veh_dynamics_rpt_413::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Veh_dynamics_rpt_413::GetClassData() const { return &_class_data_; }

void Veh_dynamics_rpt_413::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Veh_dynamics_rpt_413 *>(to)->MergeFrom(
      static_cast<const Veh_dynamics_rpt_413 &>(from));
}


void Veh_dynamics_rpt_413::MergeFrom(const Veh_dynamics_rpt_413& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_veh_g_forces()) {
    _internal_set_veh_g_forces(from._internal_veh_g_forces());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Veh_dynamics_rpt_413::CopyFrom(const Veh_dynamics_rpt_413& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Veh_dynamics_rpt_413::IsInitialized() const {
  return true;
}

void Veh_dynamics_rpt_413::InternalSwap(Veh_dynamics_rpt_413* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.veh_g_forces_, other->_impl_.veh_g_forces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Veh_dynamics_rpt_413::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[54]);
}

// ===================================================================

class Rear_lights_rpt_418::_Internal {
 public:
  using HasBits = decltype(std::declval<Rear_lights_rpt_418>()._impl_._has_bits_);
  static void set_has_reverse_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reverse_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Rear_lights_rpt_418::Rear_lights_rpt_418(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Rear_lights_rpt_418)
}
Rear_lights_rpt_418::Rear_lights_rpt_418(const Rear_lights_rpt_418& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reverse_lights_on_is_valid_){}
    , decltype(_impl_.brake_lights_on_is_valid_){}
    , decltype(_impl_.reverse_lights_on_){}
    , decltype(_impl_.brake_lights_on_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reverse_lights_on_is_valid_, &from._impl_.reverse_lights_on_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brake_lights_on_) -
    reinterpret_cast<char*>(&_impl_.reverse_lights_on_is_valid_)) + sizeof(_impl_.brake_lights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Rear_lights_rpt_418)
}

inline void Rear_lights_rpt_418::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reverse_lights_on_is_valid_){false}
    , decltype(_impl_.brake_lights_on_is_valid_){false}
    , decltype(_impl_.reverse_lights_on_){false}
    , decltype(_impl_.brake_lights_on_){false}
  };
}

Rear_lights_rpt_418::~Rear_lights_rpt_418() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Rear_lights_rpt_418)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rear_lights_rpt_418::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rear_lights_rpt_418::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rear_lights_rpt_418::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Rear_lights_rpt_418)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.reverse_lights_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.brake_lights_on_) -
      reinterpret_cast<char*>(&_impl_.reverse_lights_on_is_valid_)) + sizeof(_impl_.brake_lights_on_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rear_lights_rpt_418::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool reverse_lights_on_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reverse_lights_on_is_valid(&has_bits);
          _impl_.reverse_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_lights_on_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_brake_lights_on_is_valid(&has_bits);
          _impl_.brake_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reverse_lights_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reverse_lights_on(&has_bits);
          _impl_.reverse_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_brake_lights_on(&has_bits);
          _impl_.brake_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rear_lights_rpt_418::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Rear_lights_rpt_418)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool reverse_lights_on_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_reverse_lights_on_is_valid(), target);
  }

  // optional bool brake_lights_on_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_brake_lights_on_is_valid(), target);
  }

  // optional bool reverse_lights_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_reverse_lights_on(), target);
  }

  // optional bool brake_lights_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_brake_lights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Rear_lights_rpt_418)
  return target;
}

size_t Rear_lights_rpt_418::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Rear_lights_rpt_418)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool reverse_lights_on_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool brake_lights_on_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool reverse_lights_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool brake_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rear_lights_rpt_418::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rear_lights_rpt_418::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rear_lights_rpt_418::GetClassData() const { return &_class_data_; }

void Rear_lights_rpt_418::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rear_lights_rpt_418 *>(to)->MergeFrom(
      static_cast<const Rear_lights_rpt_418 &>(from));
}


void Rear_lights_rpt_418::MergeFrom(const Rear_lights_rpt_418& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Rear_lights_rpt_418)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reverse_lights_on_is_valid_ = from._impl_.reverse_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brake_lights_on_is_valid_ = from._impl_.brake_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reverse_lights_on_ = from._impl_.reverse_lights_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.brake_lights_on_ = from._impl_.brake_lights_on_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rear_lights_rpt_418::CopyFrom(const Rear_lights_rpt_418& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Rear_lights_rpt_418)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rear_lights_rpt_418::IsInitialized() const {
  return true;
}

void Rear_lights_rpt_418::InternalSwap(Rear_lights_rpt_418* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rear_lights_rpt_418, _impl_.brake_lights_on_)
      + sizeof(Rear_lights_rpt_418::_impl_.brake_lights_on_)
      - PROTOBUF_FIELD_OFFSET(Rear_lights_rpt_418, _impl_.reverse_lights_on_is_valid_)>(
          reinterpret_cast<char*>(&_impl_.reverse_lights_on_is_valid_),
          reinterpret_cast<char*>(&other->_impl_.reverse_lights_on_is_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rear_lights_rpt_418::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[55]);
}

// ===================================================================

class Lexus::_Internal {
 public:
  using HasBits = decltype(std::declval<Lexus>()._impl_._has_bits_);
  static const ::apollo::canbus::Hazard_lights_rpt_214& hazard_lights_rpt_214(const Lexus* msg);
  static void set_has_hazard_lights_rpt_214(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Steering_cmd_12c& steering_cmd_12c(const Lexus* msg);
  static void set_has_steering_cmd_12c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Dash_controls_right_rpt_210& dash_controls_right_rpt_210(const Lexus* msg);
  static void set_has_dash_controls_right_rpt_210(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Dash_controls_left_cmd_10c& dash_controls_left_cmd_10c(const Lexus* msg);
  static void set_has_dash_controls_left_cmd_10c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Steering_rpt_22c& steering_rpt_22c(const Lexus* msg);
  static void set_has_steering_rpt_22c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Turn_aux_rpt_330& turn_aux_rpt_330(const Lexus* msg);
  static void set_has_turn_aux_rpt_330(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Headlight_rpt_218& headlight_rpt_218(const Lexus* msg);
  static void set_has_headlight_rpt_218(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Hazard_lights_cmd_114& hazard_lights_cmd_114(const Lexus* msg);
  static void set_has_hazard_lights_cmd_114(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Dash_controls_left_rpt_20c& dash_controls_left_rpt_20c(const Lexus* msg);
  static void set_has_dash_controls_left_rpt_20c(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Headlight_aux_rpt_318& headlight_aux_rpt_318(const Lexus* msg);
  static void set_has_headlight_aux_rpt_318(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Dash_controls_right_cmd_110& dash_controls_right_cmd_110(const Lexus* msg);
  static void set_has_dash_controls_right_cmd_110(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Wiper_cmd_134& wiper_cmd_134(const Lexus* msg);
  static void set_has_wiper_cmd_134(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Wiper_rpt_234& wiper_rpt_234(const Lexus* msg);
  static void set_has_wiper_rpt_234(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Turn_rpt_230& turn_rpt_230(const Lexus* msg);
  static void set_has_turn_rpt_230(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Headlight_cmd_118& headlight_cmd_118(const Lexus* msg);
  static void set_has_headlight_cmd_118(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Door_rpt_417& door_rpt_417(const Lexus* msg);
  static void set_has_door_rpt_417(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Component_rpt_20& component_rpt_20(const Lexus* msg);
  static void set_has_component_rpt_20(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Wheel_speed_rpt_407& wheel_speed_rpt_407(const Lexus* msg);
  static void set_has_wheel_speed_rpt_407(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_3_406& steering_motor_rpt_3_406(const Lexus* msg);
  static void set_has_steering_motor_rpt_3_406(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_2_405& steering_motor_rpt_2_405(const Lexus* msg);
  static void set_has_steering_motor_rpt_2_405(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_1_404& steering_motor_rpt_1_404(const Lexus* msg);
  static void set_has_steering_motor_rpt_1_404(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_3_403& brake_motor_rpt_3_403(const Lexus* msg);
  static void set_has_brake_motor_rpt_3_403(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_2_402& brake_motor_rpt_2_402(const Lexus* msg);
  static void set_has_brake_motor_rpt_2_402(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_1_401& brake_motor_rpt_1_401(const Lexus* msg);
  static void set_has_brake_motor_rpt_1_401(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::canbus::Wiper_aux_rpt_334& wiper_aux_rpt_334(const Lexus* msg);
  static void set_has_wiper_aux_rpt_334(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::canbus::Shift_aux_rpt_328& shift_aux_rpt_328(const Lexus* msg);
  static void set_has_shift_aux_rpt_328(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::canbus::Accel_rpt_200& accel_rpt_200(const Lexus* msg);
  static void set_has_accel_rpt_200(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::canbus::Brake_rpt_204& brake_rpt_204(const Lexus* msg);
  static void set_has_brake_rpt_204(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::canbus::Horn_cmd_11c& horn_cmd_11c(const Lexus* msg);
  static void set_has_horn_cmd_11c(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::canbus::Global_rpt_10& global_rpt_10(const Lexus* msg);
  static void set_has_global_rpt_10(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::canbus::Accel_aux_rpt_300& accel_aux_rpt_300(const Lexus* msg);
  static void set_has_accel_aux_rpt_300(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::canbus::Cruise_control_buttons_rpt_208& cruise_control_buttons_rpt_208(const Lexus* msg);
  static void set_has_cruise_control_buttons_rpt_208(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::apollo::canbus::Vehicle_speed_rpt_400& vehicle_speed_rpt_400(const Lexus* msg);
  static void set_has_vehicle_speed_rpt_400(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::canbus::Brake_aux_rpt_304& brake_aux_rpt_304(const Lexus* msg);
  static void set_has_brake_aux_rpt_304(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::apollo::canbus::Media_controls_cmd_120& media_controls_cmd_120(const Lexus* msg);
  static void set_has_media_controls_cmd_120(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::apollo::canbus::Cruise_control_buttons_cmd_108& cruise_control_buttons_cmd_108(const Lexus* msg);
  static void set_has_cruise_control_buttons_cmd_108(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::apollo::canbus::Parking_brake_cmd_124& parking_brake_cmd_124(const Lexus* msg);
  static void set_has_parking_brake_cmd_124(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::apollo::canbus::Horn_rpt_21c& horn_rpt_21c(const Lexus* msg);
  static void set_has_horn_rpt_21c(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::apollo::canbus::Shift_rpt_228& shift_rpt_228(const Lexus* msg);
  static void set_has_shift_rpt_228(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::apollo::canbus::Shift_cmd_128& shift_cmd_128(const Lexus* msg);
  static void set_has_shift_cmd_128(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::apollo::canbus::Accel_cmd_100& accel_cmd_100(const Lexus* msg);
  static void set_has_accel_cmd_100(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::apollo::canbus::Parking_brake_rpt_224& parking_brake_rpt_224(const Lexus* msg);
  static void set_has_parking_brake_rpt_224(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::apollo::canbus::Brake_cmd_104& brake_cmd_104(const Lexus* msg);
  static void set_has_brake_cmd_104(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::apollo::canbus::Media_controls_rpt_220& media_controls_rpt_220(const Lexus* msg);
  static void set_has_media_controls_rpt_220(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::apollo::canbus::Steering_aux_rpt_32c& steering_aux_rpt_32c(const Lexus* msg);
  static void set_has_steering_aux_rpt_32c(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::apollo::canbus::Lat_lon_heading_rpt_40e& lat_lon_heading_rpt_40e(const Lexus* msg);
  static void set_has_lat_lon_heading_rpt_40e(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::apollo::canbus::Yaw_rate_rpt_40d& yaw_rate_rpt_40d(const Lexus* msg);
  static void set_has_yaw_rate_rpt_40d(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::apollo::canbus::Date_time_rpt_40f& date_time_rpt_40f(const Lexus* msg);
  static void set_has_date_time_rpt_40f(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::apollo::canbus::Vin_rpt_414& vin_rpt_414(const Lexus* msg);
  static void set_has_vin_rpt_414(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::apollo::canbus::Occupancy_rpt_415& occupancy_rpt_415(const Lexus* msg);
  static void set_has_occupancy_rpt_415(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::apollo::canbus::Interior_lights_rpt_416& interior_lights_rpt_416(const Lexus* msg);
  static void set_has_interior_lights_rpt_416(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::apollo::canbus::Turn_cmd_130& turn_cmd_130(const Lexus* msg);
  static void set_has_turn_cmd_130(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::apollo::canbus::Detected_object_rpt_411& detected_object_rpt_411(const Lexus* msg);
  static void set_has_detected_object_rpt_411(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::apollo::canbus::Veh_specific_rpt_1_412& veh_specific_rpt_1_412(const Lexus* msg);
  static void set_has_veh_specific_rpt_1_412(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::apollo::canbus::Veh_dynamics_rpt_413& veh_dynamics_rpt_413(const Lexus* msg);
  static void set_has_veh_dynamics_rpt_413(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::apollo::canbus::Rear_lights_rpt_418& rear_lights_rpt_418(const Lexus* msg);
  static void set_has_rear_lights_rpt_418(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
};

const ::apollo::canbus::Hazard_lights_rpt_214&
Lexus::_Internal::hazard_lights_rpt_214(const Lexus* msg) {
  return *msg->_impl_.hazard_lights_rpt_214_;
}
const ::apollo::canbus::Steering_cmd_12c&
Lexus::_Internal::steering_cmd_12c(const Lexus* msg) {
  return *msg->_impl_.steering_cmd_12c_;
}
const ::apollo::canbus::Dash_controls_right_rpt_210&
Lexus::_Internal::dash_controls_right_rpt_210(const Lexus* msg) {
  return *msg->_impl_.dash_controls_right_rpt_210_;
}
const ::apollo::canbus::Dash_controls_left_cmd_10c&
Lexus::_Internal::dash_controls_left_cmd_10c(const Lexus* msg) {
  return *msg->_impl_.dash_controls_left_cmd_10c_;
}
const ::apollo::canbus::Steering_rpt_22c&
Lexus::_Internal::steering_rpt_22c(const Lexus* msg) {
  return *msg->_impl_.steering_rpt_22c_;
}
const ::apollo::canbus::Turn_aux_rpt_330&
Lexus::_Internal::turn_aux_rpt_330(const Lexus* msg) {
  return *msg->_impl_.turn_aux_rpt_330_;
}
const ::apollo::canbus::Headlight_rpt_218&
Lexus::_Internal::headlight_rpt_218(const Lexus* msg) {
  return *msg->_impl_.headlight_rpt_218_;
}
const ::apollo::canbus::Hazard_lights_cmd_114&
Lexus::_Internal::hazard_lights_cmd_114(const Lexus* msg) {
  return *msg->_impl_.hazard_lights_cmd_114_;
}
const ::apollo::canbus::Dash_controls_left_rpt_20c&
Lexus::_Internal::dash_controls_left_rpt_20c(const Lexus* msg) {
  return *msg->_impl_.dash_controls_left_rpt_20c_;
}
const ::apollo::canbus::Headlight_aux_rpt_318&
Lexus::_Internal::headlight_aux_rpt_318(const Lexus* msg) {
  return *msg->_impl_.headlight_aux_rpt_318_;
}
const ::apollo::canbus::Dash_controls_right_cmd_110&
Lexus::_Internal::dash_controls_right_cmd_110(const Lexus* msg) {
  return *msg->_impl_.dash_controls_right_cmd_110_;
}
const ::apollo::canbus::Wiper_cmd_134&
Lexus::_Internal::wiper_cmd_134(const Lexus* msg) {
  return *msg->_impl_.wiper_cmd_134_;
}
const ::apollo::canbus::Wiper_rpt_234&
Lexus::_Internal::wiper_rpt_234(const Lexus* msg) {
  return *msg->_impl_.wiper_rpt_234_;
}
const ::apollo::canbus::Turn_rpt_230&
Lexus::_Internal::turn_rpt_230(const Lexus* msg) {
  return *msg->_impl_.turn_rpt_230_;
}
const ::apollo::canbus::Headlight_cmd_118&
Lexus::_Internal::headlight_cmd_118(const Lexus* msg) {
  return *msg->_impl_.headlight_cmd_118_;
}
const ::apollo::canbus::Door_rpt_417&
Lexus::_Internal::door_rpt_417(const Lexus* msg) {
  return *msg->_impl_.door_rpt_417_;
}
const ::apollo::canbus::Component_rpt_20&
Lexus::_Internal::component_rpt_20(const Lexus* msg) {
  return *msg->_impl_.component_rpt_20_;
}
const ::apollo::canbus::Wheel_speed_rpt_407&
Lexus::_Internal::wheel_speed_rpt_407(const Lexus* msg) {
  return *msg->_impl_.wheel_speed_rpt_407_;
}
const ::apollo::canbus::Steering_motor_rpt_3_406&
Lexus::_Internal::steering_motor_rpt_3_406(const Lexus* msg) {
  return *msg->_impl_.steering_motor_rpt_3_406_;
}
const ::apollo::canbus::Steering_motor_rpt_2_405&
Lexus::_Internal::steering_motor_rpt_2_405(const Lexus* msg) {
  return *msg->_impl_.steering_motor_rpt_2_405_;
}
const ::apollo::canbus::Steering_motor_rpt_1_404&
Lexus::_Internal::steering_motor_rpt_1_404(const Lexus* msg) {
  return *msg->_impl_.steering_motor_rpt_1_404_;
}
const ::apollo::canbus::Brake_motor_rpt_3_403&
Lexus::_Internal::brake_motor_rpt_3_403(const Lexus* msg) {
  return *msg->_impl_.brake_motor_rpt_3_403_;
}
const ::apollo::canbus::Brake_motor_rpt_2_402&
Lexus::_Internal::brake_motor_rpt_2_402(const Lexus* msg) {
  return *msg->_impl_.brake_motor_rpt_2_402_;
}
const ::apollo::canbus::Brake_motor_rpt_1_401&
Lexus::_Internal::brake_motor_rpt_1_401(const Lexus* msg) {
  return *msg->_impl_.brake_motor_rpt_1_401_;
}
const ::apollo::canbus::Wiper_aux_rpt_334&
Lexus::_Internal::wiper_aux_rpt_334(const Lexus* msg) {
  return *msg->_impl_.wiper_aux_rpt_334_;
}
const ::apollo::canbus::Shift_aux_rpt_328&
Lexus::_Internal::shift_aux_rpt_328(const Lexus* msg) {
  return *msg->_impl_.shift_aux_rpt_328_;
}
const ::apollo::canbus::Accel_rpt_200&
Lexus::_Internal::accel_rpt_200(const Lexus* msg) {
  return *msg->_impl_.accel_rpt_200_;
}
const ::apollo::canbus::Brake_rpt_204&
Lexus::_Internal::brake_rpt_204(const Lexus* msg) {
  return *msg->_impl_.brake_rpt_204_;
}
const ::apollo::canbus::Horn_cmd_11c&
Lexus::_Internal::horn_cmd_11c(const Lexus* msg) {
  return *msg->_impl_.horn_cmd_11c_;
}
const ::apollo::canbus::Global_rpt_10&
Lexus::_Internal::global_rpt_10(const Lexus* msg) {
  return *msg->_impl_.global_rpt_10_;
}
const ::apollo::canbus::Accel_aux_rpt_300&
Lexus::_Internal::accel_aux_rpt_300(const Lexus* msg) {
  return *msg->_impl_.accel_aux_rpt_300_;
}
const ::apollo::canbus::Cruise_control_buttons_rpt_208&
Lexus::_Internal::cruise_control_buttons_rpt_208(const Lexus* msg) {
  return *msg->_impl_.cruise_control_buttons_rpt_208_;
}
const ::apollo::canbus::Vehicle_speed_rpt_400&
Lexus::_Internal::vehicle_speed_rpt_400(const Lexus* msg) {
  return *msg->_impl_.vehicle_speed_rpt_400_;
}
const ::apollo::canbus::Brake_aux_rpt_304&
Lexus::_Internal::brake_aux_rpt_304(const Lexus* msg) {
  return *msg->_impl_.brake_aux_rpt_304_;
}
const ::apollo::canbus::Media_controls_cmd_120&
Lexus::_Internal::media_controls_cmd_120(const Lexus* msg) {
  return *msg->_impl_.media_controls_cmd_120_;
}
const ::apollo::canbus::Cruise_control_buttons_cmd_108&
Lexus::_Internal::cruise_control_buttons_cmd_108(const Lexus* msg) {
  return *msg->_impl_.cruise_control_buttons_cmd_108_;
}
const ::apollo::canbus::Parking_brake_cmd_124&
Lexus::_Internal::parking_brake_cmd_124(const Lexus* msg) {
  return *msg->_impl_.parking_brake_cmd_124_;
}
const ::apollo::canbus::Horn_rpt_21c&
Lexus::_Internal::horn_rpt_21c(const Lexus* msg) {
  return *msg->_impl_.horn_rpt_21c_;
}
const ::apollo::canbus::Shift_rpt_228&
Lexus::_Internal::shift_rpt_228(const Lexus* msg) {
  return *msg->_impl_.shift_rpt_228_;
}
const ::apollo::canbus::Shift_cmd_128&
Lexus::_Internal::shift_cmd_128(const Lexus* msg) {
  return *msg->_impl_.shift_cmd_128_;
}
const ::apollo::canbus::Accel_cmd_100&
Lexus::_Internal::accel_cmd_100(const Lexus* msg) {
  return *msg->_impl_.accel_cmd_100_;
}
const ::apollo::canbus::Parking_brake_rpt_224&
Lexus::_Internal::parking_brake_rpt_224(const Lexus* msg) {
  return *msg->_impl_.parking_brake_rpt_224_;
}
const ::apollo::canbus::Brake_cmd_104&
Lexus::_Internal::brake_cmd_104(const Lexus* msg) {
  return *msg->_impl_.brake_cmd_104_;
}
const ::apollo::canbus::Media_controls_rpt_220&
Lexus::_Internal::media_controls_rpt_220(const Lexus* msg) {
  return *msg->_impl_.media_controls_rpt_220_;
}
const ::apollo::canbus::Steering_aux_rpt_32c&
Lexus::_Internal::steering_aux_rpt_32c(const Lexus* msg) {
  return *msg->_impl_.steering_aux_rpt_32c_;
}
const ::apollo::canbus::Lat_lon_heading_rpt_40e&
Lexus::_Internal::lat_lon_heading_rpt_40e(const Lexus* msg) {
  return *msg->_impl_.lat_lon_heading_rpt_40e_;
}
const ::apollo::canbus::Yaw_rate_rpt_40d&
Lexus::_Internal::yaw_rate_rpt_40d(const Lexus* msg) {
  return *msg->_impl_.yaw_rate_rpt_40d_;
}
const ::apollo::canbus::Date_time_rpt_40f&
Lexus::_Internal::date_time_rpt_40f(const Lexus* msg) {
  return *msg->_impl_.date_time_rpt_40f_;
}
const ::apollo::canbus::Vin_rpt_414&
Lexus::_Internal::vin_rpt_414(const Lexus* msg) {
  return *msg->_impl_.vin_rpt_414_;
}
const ::apollo::canbus::Occupancy_rpt_415&
Lexus::_Internal::occupancy_rpt_415(const Lexus* msg) {
  return *msg->_impl_.occupancy_rpt_415_;
}
const ::apollo::canbus::Interior_lights_rpt_416&
Lexus::_Internal::interior_lights_rpt_416(const Lexus* msg) {
  return *msg->_impl_.interior_lights_rpt_416_;
}
const ::apollo::canbus::Turn_cmd_130&
Lexus::_Internal::turn_cmd_130(const Lexus* msg) {
  return *msg->_impl_.turn_cmd_130_;
}
const ::apollo::canbus::Detected_object_rpt_411&
Lexus::_Internal::detected_object_rpt_411(const Lexus* msg) {
  return *msg->_impl_.detected_object_rpt_411_;
}
const ::apollo::canbus::Veh_specific_rpt_1_412&
Lexus::_Internal::veh_specific_rpt_1_412(const Lexus* msg) {
  return *msg->_impl_.veh_specific_rpt_1_412_;
}
const ::apollo::canbus::Veh_dynamics_rpt_413&
Lexus::_Internal::veh_dynamics_rpt_413(const Lexus* msg) {
  return *msg->_impl_.veh_dynamics_rpt_413_;
}
const ::apollo::canbus::Rear_lights_rpt_418&
Lexus::_Internal::rear_lights_rpt_418(const Lexus* msg) {
  return *msg->_impl_.rear_lights_rpt_418_;
}
Lexus::Lexus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Lexus)
}
Lexus::Lexus(const Lexus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hazard_lights_rpt_214_){nullptr}
    , decltype(_impl_.steering_cmd_12c_){nullptr}
    , decltype(_impl_.dash_controls_right_rpt_210_){nullptr}
    , decltype(_impl_.dash_controls_left_cmd_10c_){nullptr}
    , decltype(_impl_.steering_rpt_22c_){nullptr}
    , decltype(_impl_.turn_aux_rpt_330_){nullptr}
    , decltype(_impl_.headlight_rpt_218_){nullptr}
    , decltype(_impl_.hazard_lights_cmd_114_){nullptr}
    , decltype(_impl_.dash_controls_left_rpt_20c_){nullptr}
    , decltype(_impl_.headlight_aux_rpt_318_){nullptr}
    , decltype(_impl_.dash_controls_right_cmd_110_){nullptr}
    , decltype(_impl_.wiper_cmd_134_){nullptr}
    , decltype(_impl_.wiper_rpt_234_){nullptr}
    , decltype(_impl_.turn_rpt_230_){nullptr}
    , decltype(_impl_.headlight_cmd_118_){nullptr}
    , decltype(_impl_.door_rpt_417_){nullptr}
    , decltype(_impl_.component_rpt_20_){nullptr}
    , decltype(_impl_.wheel_speed_rpt_407_){nullptr}
    , decltype(_impl_.steering_motor_rpt_3_406_){nullptr}
    , decltype(_impl_.steering_motor_rpt_2_405_){nullptr}
    , decltype(_impl_.steering_motor_rpt_1_404_){nullptr}
    , decltype(_impl_.brake_motor_rpt_3_403_){nullptr}
    , decltype(_impl_.brake_motor_rpt_2_402_){nullptr}
    , decltype(_impl_.brake_motor_rpt_1_401_){nullptr}
    , decltype(_impl_.wiper_aux_rpt_334_){nullptr}
    , decltype(_impl_.shift_aux_rpt_328_){nullptr}
    , decltype(_impl_.accel_rpt_200_){nullptr}
    , decltype(_impl_.brake_rpt_204_){nullptr}
    , decltype(_impl_.horn_cmd_11c_){nullptr}
    , decltype(_impl_.global_rpt_10_){nullptr}
    , decltype(_impl_.accel_aux_rpt_300_){nullptr}
    , decltype(_impl_.cruise_control_buttons_rpt_208_){nullptr}
    , decltype(_impl_.vehicle_speed_rpt_400_){nullptr}
    , decltype(_impl_.brake_aux_rpt_304_){nullptr}
    , decltype(_impl_.media_controls_cmd_120_){nullptr}
    , decltype(_impl_.cruise_control_buttons_cmd_108_){nullptr}
    , decltype(_impl_.parking_brake_cmd_124_){nullptr}
    , decltype(_impl_.horn_rpt_21c_){nullptr}
    , decltype(_impl_.shift_rpt_228_){nullptr}
    , decltype(_impl_.shift_cmd_128_){nullptr}
    , decltype(_impl_.accel_cmd_100_){nullptr}
    , decltype(_impl_.parking_brake_rpt_224_){nullptr}
    , decltype(_impl_.brake_cmd_104_){nullptr}
    , decltype(_impl_.media_controls_rpt_220_){nullptr}
    , decltype(_impl_.steering_aux_rpt_32c_){nullptr}
    , decltype(_impl_.lat_lon_heading_rpt_40e_){nullptr}
    , decltype(_impl_.yaw_rate_rpt_40d_){nullptr}
    , decltype(_impl_.date_time_rpt_40f_){nullptr}
    , decltype(_impl_.vin_rpt_414_){nullptr}
    , decltype(_impl_.occupancy_rpt_415_){nullptr}
    , decltype(_impl_.interior_lights_rpt_416_){nullptr}
    , decltype(_impl_.turn_cmd_130_){nullptr}
    , decltype(_impl_.detected_object_rpt_411_){nullptr}
    , decltype(_impl_.veh_specific_rpt_1_412_){nullptr}
    , decltype(_impl_.veh_dynamics_rpt_413_){nullptr}
    , decltype(_impl_.rear_lights_rpt_418_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hazard_lights_rpt_214()) {
    _impl_.hazard_lights_rpt_214_ = new ::apollo::canbus::Hazard_lights_rpt_214(*from._impl_.hazard_lights_rpt_214_);
  }
  if (from._internal_has_steering_cmd_12c()) {
    _impl_.steering_cmd_12c_ = new ::apollo::canbus::Steering_cmd_12c(*from._impl_.steering_cmd_12c_);
  }
  if (from._internal_has_dash_controls_right_rpt_210()) {
    _impl_.dash_controls_right_rpt_210_ = new ::apollo::canbus::Dash_controls_right_rpt_210(*from._impl_.dash_controls_right_rpt_210_);
  }
  if (from._internal_has_dash_controls_left_cmd_10c()) {
    _impl_.dash_controls_left_cmd_10c_ = new ::apollo::canbus::Dash_controls_left_cmd_10c(*from._impl_.dash_controls_left_cmd_10c_);
  }
  if (from._internal_has_steering_rpt_22c()) {
    _impl_.steering_rpt_22c_ = new ::apollo::canbus::Steering_rpt_22c(*from._impl_.steering_rpt_22c_);
  }
  if (from._internal_has_turn_aux_rpt_330()) {
    _impl_.turn_aux_rpt_330_ = new ::apollo::canbus::Turn_aux_rpt_330(*from._impl_.turn_aux_rpt_330_);
  }
  if (from._internal_has_headlight_rpt_218()) {
    _impl_.headlight_rpt_218_ = new ::apollo::canbus::Headlight_rpt_218(*from._impl_.headlight_rpt_218_);
  }
  if (from._internal_has_hazard_lights_cmd_114()) {
    _impl_.hazard_lights_cmd_114_ = new ::apollo::canbus::Hazard_lights_cmd_114(*from._impl_.hazard_lights_cmd_114_);
  }
  if (from._internal_has_dash_controls_left_rpt_20c()) {
    _impl_.dash_controls_left_rpt_20c_ = new ::apollo::canbus::Dash_controls_left_rpt_20c(*from._impl_.dash_controls_left_rpt_20c_);
  }
  if (from._internal_has_headlight_aux_rpt_318()) {
    _impl_.headlight_aux_rpt_318_ = new ::apollo::canbus::Headlight_aux_rpt_318(*from._impl_.headlight_aux_rpt_318_);
  }
  if (from._internal_has_dash_controls_right_cmd_110()) {
    _impl_.dash_controls_right_cmd_110_ = new ::apollo::canbus::Dash_controls_right_cmd_110(*from._impl_.dash_controls_right_cmd_110_);
  }
  if (from._internal_has_wiper_cmd_134()) {
    _impl_.wiper_cmd_134_ = new ::apollo::canbus::Wiper_cmd_134(*from._impl_.wiper_cmd_134_);
  }
  if (from._internal_has_wiper_rpt_234()) {
    _impl_.wiper_rpt_234_ = new ::apollo::canbus::Wiper_rpt_234(*from._impl_.wiper_rpt_234_);
  }
  if (from._internal_has_turn_rpt_230()) {
    _impl_.turn_rpt_230_ = new ::apollo::canbus::Turn_rpt_230(*from._impl_.turn_rpt_230_);
  }
  if (from._internal_has_headlight_cmd_118()) {
    _impl_.headlight_cmd_118_ = new ::apollo::canbus::Headlight_cmd_118(*from._impl_.headlight_cmd_118_);
  }
  if (from._internal_has_door_rpt_417()) {
    _impl_.door_rpt_417_ = new ::apollo::canbus::Door_rpt_417(*from._impl_.door_rpt_417_);
  }
  if (from._internal_has_component_rpt_20()) {
    _impl_.component_rpt_20_ = new ::apollo::canbus::Component_rpt_20(*from._impl_.component_rpt_20_);
  }
  if (from._internal_has_wheel_speed_rpt_407()) {
    _impl_.wheel_speed_rpt_407_ = new ::apollo::canbus::Wheel_speed_rpt_407(*from._impl_.wheel_speed_rpt_407_);
  }
  if (from._internal_has_steering_motor_rpt_3_406()) {
    _impl_.steering_motor_rpt_3_406_ = new ::apollo::canbus::Steering_motor_rpt_3_406(*from._impl_.steering_motor_rpt_3_406_);
  }
  if (from._internal_has_steering_motor_rpt_2_405()) {
    _impl_.steering_motor_rpt_2_405_ = new ::apollo::canbus::Steering_motor_rpt_2_405(*from._impl_.steering_motor_rpt_2_405_);
  }
  if (from._internal_has_steering_motor_rpt_1_404()) {
    _impl_.steering_motor_rpt_1_404_ = new ::apollo::canbus::Steering_motor_rpt_1_404(*from._impl_.steering_motor_rpt_1_404_);
  }
  if (from._internal_has_brake_motor_rpt_3_403()) {
    _impl_.brake_motor_rpt_3_403_ = new ::apollo::canbus::Brake_motor_rpt_3_403(*from._impl_.brake_motor_rpt_3_403_);
  }
  if (from._internal_has_brake_motor_rpt_2_402()) {
    _impl_.brake_motor_rpt_2_402_ = new ::apollo::canbus::Brake_motor_rpt_2_402(*from._impl_.brake_motor_rpt_2_402_);
  }
  if (from._internal_has_brake_motor_rpt_1_401()) {
    _impl_.brake_motor_rpt_1_401_ = new ::apollo::canbus::Brake_motor_rpt_1_401(*from._impl_.brake_motor_rpt_1_401_);
  }
  if (from._internal_has_wiper_aux_rpt_334()) {
    _impl_.wiper_aux_rpt_334_ = new ::apollo::canbus::Wiper_aux_rpt_334(*from._impl_.wiper_aux_rpt_334_);
  }
  if (from._internal_has_shift_aux_rpt_328()) {
    _impl_.shift_aux_rpt_328_ = new ::apollo::canbus::Shift_aux_rpt_328(*from._impl_.shift_aux_rpt_328_);
  }
  if (from._internal_has_accel_rpt_200()) {
    _impl_.accel_rpt_200_ = new ::apollo::canbus::Accel_rpt_200(*from._impl_.accel_rpt_200_);
  }
  if (from._internal_has_brake_rpt_204()) {
    _impl_.brake_rpt_204_ = new ::apollo::canbus::Brake_rpt_204(*from._impl_.brake_rpt_204_);
  }
  if (from._internal_has_horn_cmd_11c()) {
    _impl_.horn_cmd_11c_ = new ::apollo::canbus::Horn_cmd_11c(*from._impl_.horn_cmd_11c_);
  }
  if (from._internal_has_global_rpt_10()) {
    _impl_.global_rpt_10_ = new ::apollo::canbus::Global_rpt_10(*from._impl_.global_rpt_10_);
  }
  if (from._internal_has_accel_aux_rpt_300()) {
    _impl_.accel_aux_rpt_300_ = new ::apollo::canbus::Accel_aux_rpt_300(*from._impl_.accel_aux_rpt_300_);
  }
  if (from._internal_has_cruise_control_buttons_rpt_208()) {
    _impl_.cruise_control_buttons_rpt_208_ = new ::apollo::canbus::Cruise_control_buttons_rpt_208(*from._impl_.cruise_control_buttons_rpt_208_);
  }
  if (from._internal_has_vehicle_speed_rpt_400()) {
    _impl_.vehicle_speed_rpt_400_ = new ::apollo::canbus::Vehicle_speed_rpt_400(*from._impl_.vehicle_speed_rpt_400_);
  }
  if (from._internal_has_brake_aux_rpt_304()) {
    _impl_.brake_aux_rpt_304_ = new ::apollo::canbus::Brake_aux_rpt_304(*from._impl_.brake_aux_rpt_304_);
  }
  if (from._internal_has_media_controls_cmd_120()) {
    _impl_.media_controls_cmd_120_ = new ::apollo::canbus::Media_controls_cmd_120(*from._impl_.media_controls_cmd_120_);
  }
  if (from._internal_has_cruise_control_buttons_cmd_108()) {
    _impl_.cruise_control_buttons_cmd_108_ = new ::apollo::canbus::Cruise_control_buttons_cmd_108(*from._impl_.cruise_control_buttons_cmd_108_);
  }
  if (from._internal_has_parking_brake_cmd_124()) {
    _impl_.parking_brake_cmd_124_ = new ::apollo::canbus::Parking_brake_cmd_124(*from._impl_.parking_brake_cmd_124_);
  }
  if (from._internal_has_horn_rpt_21c()) {
    _impl_.horn_rpt_21c_ = new ::apollo::canbus::Horn_rpt_21c(*from._impl_.horn_rpt_21c_);
  }
  if (from._internal_has_shift_rpt_228()) {
    _impl_.shift_rpt_228_ = new ::apollo::canbus::Shift_rpt_228(*from._impl_.shift_rpt_228_);
  }
  if (from._internal_has_shift_cmd_128()) {
    _impl_.shift_cmd_128_ = new ::apollo::canbus::Shift_cmd_128(*from._impl_.shift_cmd_128_);
  }
  if (from._internal_has_accel_cmd_100()) {
    _impl_.accel_cmd_100_ = new ::apollo::canbus::Accel_cmd_100(*from._impl_.accel_cmd_100_);
  }
  if (from._internal_has_parking_brake_rpt_224()) {
    _impl_.parking_brake_rpt_224_ = new ::apollo::canbus::Parking_brake_rpt_224(*from._impl_.parking_brake_rpt_224_);
  }
  if (from._internal_has_brake_cmd_104()) {
    _impl_.brake_cmd_104_ = new ::apollo::canbus::Brake_cmd_104(*from._impl_.brake_cmd_104_);
  }
  if (from._internal_has_media_controls_rpt_220()) {
    _impl_.media_controls_rpt_220_ = new ::apollo::canbus::Media_controls_rpt_220(*from._impl_.media_controls_rpt_220_);
  }
  if (from._internal_has_steering_aux_rpt_32c()) {
    _impl_.steering_aux_rpt_32c_ = new ::apollo::canbus::Steering_aux_rpt_32c(*from._impl_.steering_aux_rpt_32c_);
  }
  if (from._internal_has_lat_lon_heading_rpt_40e()) {
    _impl_.lat_lon_heading_rpt_40e_ = new ::apollo::canbus::Lat_lon_heading_rpt_40e(*from._impl_.lat_lon_heading_rpt_40e_);
  }
  if (from._internal_has_yaw_rate_rpt_40d()) {
    _impl_.yaw_rate_rpt_40d_ = new ::apollo::canbus::Yaw_rate_rpt_40d(*from._impl_.yaw_rate_rpt_40d_);
  }
  if (from._internal_has_date_time_rpt_40f()) {
    _impl_.date_time_rpt_40f_ = new ::apollo::canbus::Date_time_rpt_40f(*from._impl_.date_time_rpt_40f_);
  }
  if (from._internal_has_vin_rpt_414()) {
    _impl_.vin_rpt_414_ = new ::apollo::canbus::Vin_rpt_414(*from._impl_.vin_rpt_414_);
  }
  if (from._internal_has_occupancy_rpt_415()) {
    _impl_.occupancy_rpt_415_ = new ::apollo::canbus::Occupancy_rpt_415(*from._impl_.occupancy_rpt_415_);
  }
  if (from._internal_has_interior_lights_rpt_416()) {
    _impl_.interior_lights_rpt_416_ = new ::apollo::canbus::Interior_lights_rpt_416(*from._impl_.interior_lights_rpt_416_);
  }
  if (from._internal_has_turn_cmd_130()) {
    _impl_.turn_cmd_130_ = new ::apollo::canbus::Turn_cmd_130(*from._impl_.turn_cmd_130_);
  }
  if (from._internal_has_detected_object_rpt_411()) {
    _impl_.detected_object_rpt_411_ = new ::apollo::canbus::Detected_object_rpt_411(*from._impl_.detected_object_rpt_411_);
  }
  if (from._internal_has_veh_specific_rpt_1_412()) {
    _impl_.veh_specific_rpt_1_412_ = new ::apollo::canbus::Veh_specific_rpt_1_412(*from._impl_.veh_specific_rpt_1_412_);
  }
  if (from._internal_has_veh_dynamics_rpt_413()) {
    _impl_.veh_dynamics_rpt_413_ = new ::apollo::canbus::Veh_dynamics_rpt_413(*from._impl_.veh_dynamics_rpt_413_);
  }
  if (from._internal_has_rear_lights_rpt_418()) {
    _impl_.rear_lights_rpt_418_ = new ::apollo::canbus::Rear_lights_rpt_418(*from._impl_.rear_lights_rpt_418_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lexus)
}

inline void Lexus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hazard_lights_rpt_214_){nullptr}
    , decltype(_impl_.steering_cmd_12c_){nullptr}
    , decltype(_impl_.dash_controls_right_rpt_210_){nullptr}
    , decltype(_impl_.dash_controls_left_cmd_10c_){nullptr}
    , decltype(_impl_.steering_rpt_22c_){nullptr}
    , decltype(_impl_.turn_aux_rpt_330_){nullptr}
    , decltype(_impl_.headlight_rpt_218_){nullptr}
    , decltype(_impl_.hazard_lights_cmd_114_){nullptr}
    , decltype(_impl_.dash_controls_left_rpt_20c_){nullptr}
    , decltype(_impl_.headlight_aux_rpt_318_){nullptr}
    , decltype(_impl_.dash_controls_right_cmd_110_){nullptr}
    , decltype(_impl_.wiper_cmd_134_){nullptr}
    , decltype(_impl_.wiper_rpt_234_){nullptr}
    , decltype(_impl_.turn_rpt_230_){nullptr}
    , decltype(_impl_.headlight_cmd_118_){nullptr}
    , decltype(_impl_.door_rpt_417_){nullptr}
    , decltype(_impl_.component_rpt_20_){nullptr}
    , decltype(_impl_.wheel_speed_rpt_407_){nullptr}
    , decltype(_impl_.steering_motor_rpt_3_406_){nullptr}
    , decltype(_impl_.steering_motor_rpt_2_405_){nullptr}
    , decltype(_impl_.steering_motor_rpt_1_404_){nullptr}
    , decltype(_impl_.brake_motor_rpt_3_403_){nullptr}
    , decltype(_impl_.brake_motor_rpt_2_402_){nullptr}
    , decltype(_impl_.brake_motor_rpt_1_401_){nullptr}
    , decltype(_impl_.wiper_aux_rpt_334_){nullptr}
    , decltype(_impl_.shift_aux_rpt_328_){nullptr}
    , decltype(_impl_.accel_rpt_200_){nullptr}
    , decltype(_impl_.brake_rpt_204_){nullptr}
    , decltype(_impl_.horn_cmd_11c_){nullptr}
    , decltype(_impl_.global_rpt_10_){nullptr}
    , decltype(_impl_.accel_aux_rpt_300_){nullptr}
    , decltype(_impl_.cruise_control_buttons_rpt_208_){nullptr}
    , decltype(_impl_.vehicle_speed_rpt_400_){nullptr}
    , decltype(_impl_.brake_aux_rpt_304_){nullptr}
    , decltype(_impl_.media_controls_cmd_120_){nullptr}
    , decltype(_impl_.cruise_control_buttons_cmd_108_){nullptr}
    , decltype(_impl_.parking_brake_cmd_124_){nullptr}
    , decltype(_impl_.horn_rpt_21c_){nullptr}
    , decltype(_impl_.shift_rpt_228_){nullptr}
    , decltype(_impl_.shift_cmd_128_){nullptr}
    , decltype(_impl_.accel_cmd_100_){nullptr}
    , decltype(_impl_.parking_brake_rpt_224_){nullptr}
    , decltype(_impl_.brake_cmd_104_){nullptr}
    , decltype(_impl_.media_controls_rpt_220_){nullptr}
    , decltype(_impl_.steering_aux_rpt_32c_){nullptr}
    , decltype(_impl_.lat_lon_heading_rpt_40e_){nullptr}
    , decltype(_impl_.yaw_rate_rpt_40d_){nullptr}
    , decltype(_impl_.date_time_rpt_40f_){nullptr}
    , decltype(_impl_.vin_rpt_414_){nullptr}
    , decltype(_impl_.occupancy_rpt_415_){nullptr}
    , decltype(_impl_.interior_lights_rpt_416_){nullptr}
    , decltype(_impl_.turn_cmd_130_){nullptr}
    , decltype(_impl_.detected_object_rpt_411_){nullptr}
    , decltype(_impl_.veh_specific_rpt_1_412_){nullptr}
    , decltype(_impl_.veh_dynamics_rpt_413_){nullptr}
    , decltype(_impl_.rear_lights_rpt_418_){nullptr}
  };
}

Lexus::~Lexus() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lexus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lexus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hazard_lights_rpt_214_;
  if (this != internal_default_instance()) delete _impl_.steering_cmd_12c_;
  if (this != internal_default_instance()) delete _impl_.dash_controls_right_rpt_210_;
  if (this != internal_default_instance()) delete _impl_.dash_controls_left_cmd_10c_;
  if (this != internal_default_instance()) delete _impl_.steering_rpt_22c_;
  if (this != internal_default_instance()) delete _impl_.turn_aux_rpt_330_;
  if (this != internal_default_instance()) delete _impl_.headlight_rpt_218_;
  if (this != internal_default_instance()) delete _impl_.hazard_lights_cmd_114_;
  if (this != internal_default_instance()) delete _impl_.dash_controls_left_rpt_20c_;
  if (this != internal_default_instance()) delete _impl_.headlight_aux_rpt_318_;
  if (this != internal_default_instance()) delete _impl_.dash_controls_right_cmd_110_;
  if (this != internal_default_instance()) delete _impl_.wiper_cmd_134_;
  if (this != internal_default_instance()) delete _impl_.wiper_rpt_234_;
  if (this != internal_default_instance()) delete _impl_.turn_rpt_230_;
  if (this != internal_default_instance()) delete _impl_.headlight_cmd_118_;
  if (this != internal_default_instance()) delete _impl_.door_rpt_417_;
  if (this != internal_default_instance()) delete _impl_.component_rpt_20_;
  if (this != internal_default_instance()) delete _impl_.wheel_speed_rpt_407_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_3_406_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_2_405_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_1_404_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_3_403_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_2_402_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_1_401_;
  if (this != internal_default_instance()) delete _impl_.wiper_aux_rpt_334_;
  if (this != internal_default_instance()) delete _impl_.shift_aux_rpt_328_;
  if (this != internal_default_instance()) delete _impl_.accel_rpt_200_;
  if (this != internal_default_instance()) delete _impl_.brake_rpt_204_;
  if (this != internal_default_instance()) delete _impl_.horn_cmd_11c_;
  if (this != internal_default_instance()) delete _impl_.global_rpt_10_;
  if (this != internal_default_instance()) delete _impl_.accel_aux_rpt_300_;
  if (this != internal_default_instance()) delete _impl_.cruise_control_buttons_rpt_208_;
  if (this != internal_default_instance()) delete _impl_.vehicle_speed_rpt_400_;
  if (this != internal_default_instance()) delete _impl_.brake_aux_rpt_304_;
  if (this != internal_default_instance()) delete _impl_.media_controls_cmd_120_;
  if (this != internal_default_instance()) delete _impl_.cruise_control_buttons_cmd_108_;
  if (this != internal_default_instance()) delete _impl_.parking_brake_cmd_124_;
  if (this != internal_default_instance()) delete _impl_.horn_rpt_21c_;
  if (this != internal_default_instance()) delete _impl_.shift_rpt_228_;
  if (this != internal_default_instance()) delete _impl_.shift_cmd_128_;
  if (this != internal_default_instance()) delete _impl_.accel_cmd_100_;
  if (this != internal_default_instance()) delete _impl_.parking_brake_rpt_224_;
  if (this != internal_default_instance()) delete _impl_.brake_cmd_104_;
  if (this != internal_default_instance()) delete _impl_.media_controls_rpt_220_;
  if (this != internal_default_instance()) delete _impl_.steering_aux_rpt_32c_;
  if (this != internal_default_instance()) delete _impl_.lat_lon_heading_rpt_40e_;
  if (this != internal_default_instance()) delete _impl_.yaw_rate_rpt_40d_;
  if (this != internal_default_instance()) delete _impl_.date_time_rpt_40f_;
  if (this != internal_default_instance()) delete _impl_.vin_rpt_414_;
  if (this != internal_default_instance()) delete _impl_.occupancy_rpt_415_;
  if (this != internal_default_instance()) delete _impl_.interior_lights_rpt_416_;
  if (this != internal_default_instance()) delete _impl_.turn_cmd_130_;
  if (this != internal_default_instance()) delete _impl_.detected_object_rpt_411_;
  if (this != internal_default_instance()) delete _impl_.veh_specific_rpt_1_412_;
  if (this != internal_default_instance()) delete _impl_.veh_dynamics_rpt_413_;
  if (this != internal_default_instance()) delete _impl_.rear_lights_rpt_418_;
}

void Lexus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lexus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lexus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.hazard_lights_rpt_214_ != nullptr);
      _impl_.hazard_lights_rpt_214_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.steering_cmd_12c_ != nullptr);
      _impl_.steering_cmd_12c_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dash_controls_right_rpt_210_ != nullptr);
      _impl_.dash_controls_right_rpt_210_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dash_controls_left_cmd_10c_ != nullptr);
      _impl_.dash_controls_left_cmd_10c_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.steering_rpt_22c_ != nullptr);
      _impl_.steering_rpt_22c_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.turn_aux_rpt_330_ != nullptr);
      _impl_.turn_aux_rpt_330_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.headlight_rpt_218_ != nullptr);
      _impl_.headlight_rpt_218_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.hazard_lights_cmd_114_ != nullptr);
      _impl_.hazard_lights_cmd_114_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.dash_controls_left_rpt_20c_ != nullptr);
      _impl_.dash_controls_left_rpt_20c_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.headlight_aux_rpt_318_ != nullptr);
      _impl_.headlight_aux_rpt_318_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.dash_controls_right_cmd_110_ != nullptr);
      _impl_.dash_controls_right_cmd_110_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.wiper_cmd_134_ != nullptr);
      _impl_.wiper_cmd_134_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.wiper_rpt_234_ != nullptr);
      _impl_.wiper_rpt_234_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.turn_rpt_230_ != nullptr);
      _impl_.turn_rpt_230_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.headlight_cmd_118_ != nullptr);
      _impl_.headlight_cmd_118_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.door_rpt_417_ != nullptr);
      _impl_.door_rpt_417_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.component_rpt_20_ != nullptr);
      _impl_.component_rpt_20_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.wheel_speed_rpt_407_ != nullptr);
      _impl_.wheel_speed_rpt_407_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_3_406_ != nullptr);
      _impl_.steering_motor_rpt_3_406_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_2_405_ != nullptr);
      _impl_.steering_motor_rpt_2_405_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_1_404_ != nullptr);
      _impl_.steering_motor_rpt_1_404_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_3_403_ != nullptr);
      _impl_.brake_motor_rpt_3_403_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_2_402_ != nullptr);
      _impl_.brake_motor_rpt_2_402_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_1_401_ != nullptr);
      _impl_.brake_motor_rpt_1_401_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.wiper_aux_rpt_334_ != nullptr);
      _impl_.wiper_aux_rpt_334_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.shift_aux_rpt_328_ != nullptr);
      _impl_.shift_aux_rpt_328_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.accel_rpt_200_ != nullptr);
      _impl_.accel_rpt_200_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.brake_rpt_204_ != nullptr);
      _impl_.brake_rpt_204_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.horn_cmd_11c_ != nullptr);
      _impl_.horn_cmd_11c_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.global_rpt_10_ != nullptr);
      _impl_.global_rpt_10_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.accel_aux_rpt_300_ != nullptr);
      _impl_.accel_aux_rpt_300_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.cruise_control_buttons_rpt_208_ != nullptr);
      _impl_.cruise_control_buttons_rpt_208_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.vehicle_speed_rpt_400_ != nullptr);
      _impl_.vehicle_speed_rpt_400_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.brake_aux_rpt_304_ != nullptr);
      _impl_.brake_aux_rpt_304_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.media_controls_cmd_120_ != nullptr);
      _impl_.media_controls_cmd_120_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.cruise_control_buttons_cmd_108_ != nullptr);
      _impl_.cruise_control_buttons_cmd_108_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.parking_brake_cmd_124_ != nullptr);
      _impl_.parking_brake_cmd_124_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.horn_rpt_21c_ != nullptr);
      _impl_.horn_rpt_21c_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.shift_rpt_228_ != nullptr);
      _impl_.shift_rpt_228_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.shift_cmd_128_ != nullptr);
      _impl_.shift_cmd_128_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.accel_cmd_100_ != nullptr);
      _impl_.accel_cmd_100_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.parking_brake_rpt_224_ != nullptr);
      _impl_.parking_brake_rpt_224_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.brake_cmd_104_ != nullptr);
      _impl_.brake_cmd_104_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.media_controls_rpt_220_ != nullptr);
      _impl_.media_controls_rpt_220_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.steering_aux_rpt_32c_ != nullptr);
      _impl_.steering_aux_rpt_32c_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.lat_lon_heading_rpt_40e_ != nullptr);
      _impl_.lat_lon_heading_rpt_40e_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.yaw_rate_rpt_40d_ != nullptr);
      _impl_.yaw_rate_rpt_40d_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.date_time_rpt_40f_ != nullptr);
      _impl_.date_time_rpt_40f_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.vin_rpt_414_ != nullptr);
      _impl_.vin_rpt_414_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.occupancy_rpt_415_ != nullptr);
      _impl_.occupancy_rpt_415_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.interior_lights_rpt_416_ != nullptr);
      _impl_.interior_lights_rpt_416_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.turn_cmd_130_ != nullptr);
      _impl_.turn_cmd_130_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.detected_object_rpt_411_ != nullptr);
      _impl_.detected_object_rpt_411_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.veh_specific_rpt_1_412_ != nullptr);
      _impl_.veh_specific_rpt_1_412_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.veh_dynamics_rpt_413_ != nullptr);
      _impl_.veh_dynamics_rpt_413_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.rear_lights_rpt_418_ != nullptr);
      _impl_.rear_lights_rpt_418_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lexus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hazard_lights_rpt_214(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_cmd_12c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_right_rpt_210(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_left_cmd_10c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_rpt_22c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_aux_rpt_330(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_rpt_218(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hazard_lights_cmd_114(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_left_rpt_20c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_aux_rpt_318(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_right_cmd_110(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_cmd_134(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_rpt_234(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_rpt_230(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_cmd_118(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_door_rpt_417(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_rpt_20(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed_rpt_407(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_3_406(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_2_405(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_1_404(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_3_403(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_2_402(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_1_401(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_aux_rpt_334(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_aux_rpt_328(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_rpt_200(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_rpt_204(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_cmd_11c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_rpt_10(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_aux_rpt_300(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_control_buttons_rpt_208(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_speed_rpt_400(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_aux_rpt_304(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_controls_cmd_120(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_control_buttons_cmd_108(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_cmd_124(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_rpt_21c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_rpt_228(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_cmd_128(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_cmd_100(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_rpt_224(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_cmd_104(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_controls_rpt_220(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_aux_rpt_32c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_lon_heading_rpt_40e(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_yaw_rate_rpt_40d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time_rpt_40f(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vin_rpt_414(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupancy_rpt_415(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_lights_rpt_416(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_cmd_130(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_detected_object_rpt_411(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_specific_rpt_1_412(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_dynamics_rpt_413(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_lights_rpt_418(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lexus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lexus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hazard_lights_rpt_214(this),
        _Internal::hazard_lights_rpt_214(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::steering_cmd_12c(this),
        _Internal::steering_cmd_12c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dash_controls_right_rpt_210(this),
        _Internal::dash_controls_right_rpt_210(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dash_controls_left_cmd_10c(this),
        _Internal::dash_controls_left_cmd_10c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::steering_rpt_22c(this),
        _Internal::steering_rpt_22c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::turn_aux_rpt_330(this),
        _Internal::turn_aux_rpt_330(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::headlight_rpt_218(this),
        _Internal::headlight_rpt_218(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::hazard_lights_cmd_114(this),
        _Internal::hazard_lights_cmd_114(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dash_controls_left_rpt_20c(this),
        _Internal::dash_controls_left_rpt_20c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::headlight_aux_rpt_318(this),
        _Internal::headlight_aux_rpt_318(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::dash_controls_right_cmd_110(this),
        _Internal::dash_controls_right_cmd_110(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::wiper_cmd_134(this),
        _Internal::wiper_cmd_134(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::wiper_rpt_234(this),
        _Internal::wiper_rpt_234(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::turn_rpt_230(this),
        _Internal::turn_rpt_230(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::headlight_cmd_118(this),
        _Internal::headlight_cmd_118(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::door_rpt_417(this),
        _Internal::door_rpt_417(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::component_rpt_20(this),
        _Internal::component_rpt_20(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::wheel_speed_rpt_407(this),
        _Internal::wheel_speed_rpt_407(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::steering_motor_rpt_3_406(this),
        _Internal::steering_motor_rpt_3_406(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::steering_motor_rpt_2_405(this),
        _Internal::steering_motor_rpt_2_405(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::steering_motor_rpt_1_404(this),
        _Internal::steering_motor_rpt_1_404(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::brake_motor_rpt_3_403(this),
        _Internal::brake_motor_rpt_3_403(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::brake_motor_rpt_2_402(this),
        _Internal::brake_motor_rpt_2_402(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::brake_motor_rpt_1_401(this),
        _Internal::brake_motor_rpt_1_401(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::wiper_aux_rpt_334(this),
        _Internal::wiper_aux_rpt_334(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::shift_aux_rpt_328(this),
        _Internal::shift_aux_rpt_328(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::accel_rpt_200(this),
        _Internal::accel_rpt_200(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::brake_rpt_204(this),
        _Internal::brake_rpt_204(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::horn_cmd_11c(this),
        _Internal::horn_cmd_11c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::global_rpt_10(this),
        _Internal::global_rpt_10(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::accel_aux_rpt_300(this),
        _Internal::accel_aux_rpt_300(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::cruise_control_buttons_rpt_208(this),
        _Internal::cruise_control_buttons_rpt_208(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::vehicle_speed_rpt_400(this),
        _Internal::vehicle_speed_rpt_400(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::brake_aux_rpt_304(this),
        _Internal::brake_aux_rpt_304(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::media_controls_cmd_120(this),
        _Internal::media_controls_cmd_120(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::cruise_control_buttons_cmd_108(this),
        _Internal::cruise_control_buttons_cmd_108(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::parking_brake_cmd_124(this),
        _Internal::parking_brake_cmd_124(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::horn_rpt_21c(this),
        _Internal::horn_rpt_21c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::shift_rpt_228(this),
        _Internal::shift_rpt_228(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::shift_cmd_128(this),
        _Internal::shift_cmd_128(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::accel_cmd_100(this),
        _Internal::accel_cmd_100(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::parking_brake_rpt_224(this),
        _Internal::parking_brake_rpt_224(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::brake_cmd_104(this),
        _Internal::brake_cmd_104(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::media_controls_rpt_220(this),
        _Internal::media_controls_rpt_220(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::steering_aux_rpt_32c(this),
        _Internal::steering_aux_rpt_32c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::lat_lon_heading_rpt_40e(this),
        _Internal::lat_lon_heading_rpt_40e(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::yaw_rate_rpt_40d(this),
        _Internal::yaw_rate_rpt_40d(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::date_time_rpt_40f(this),
        _Internal::date_time_rpt_40f(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::vin_rpt_414(this),
        _Internal::vin_rpt_414(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::occupancy_rpt_415(this),
        _Internal::occupancy_rpt_415(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::interior_lights_rpt_416(this),
        _Internal::interior_lights_rpt_416(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::turn_cmd_130(this),
        _Internal::turn_cmd_130(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::detected_object_rpt_411(this),
        _Internal::detected_object_rpt_411(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::veh_specific_rpt_1_412(this),
        _Internal::veh_specific_rpt_1_412(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::veh_dynamics_rpt_413(this),
        _Internal::veh_dynamics_rpt_413(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::rear_lights_rpt_418(this),
        _Internal::rear_lights_rpt_418(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lexus)
  return target;
}

size_t Lexus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lexus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hazard_lights_rpt_214_);
    }

    // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_cmd_12c_);
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dash_controls_right_rpt_210_);
    }

    // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dash_controls_left_cmd_10c_);
    }

    // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_rpt_22c_);
    }

    // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turn_aux_rpt_330_);
    }

    // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headlight_rpt_218_);
    }

    // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hazard_lights_cmd_114_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dash_controls_left_rpt_20c_);
    }

    // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headlight_aux_rpt_318_);
    }

    // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dash_controls_right_cmd_110_);
    }

    // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wiper_cmd_134_);
    }

    // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wiper_rpt_234_);
    }

    // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turn_rpt_230_);
    }

    // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headlight_cmd_118_);
    }

    // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.door_rpt_417_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.component_rpt_20_);
    }

    // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wheel_speed_rpt_407_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_3_406_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_2_405_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_1_404_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_3_403_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_2_402_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_1_401_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wiper_aux_rpt_334_);
    }

    // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shift_aux_rpt_328_);
    }

    // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accel_rpt_200_);
    }

    // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_rpt_204_);
    }

    // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horn_cmd_11c_);
    }

    // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_rpt_10_);
    }

    // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accel_aux_rpt_300_);
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cruise_control_buttons_rpt_208_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_speed_rpt_400_);
    }

    // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_aux_rpt_304_);
    }

    // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_controls_cmd_120_);
    }

    // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cruise_control_buttons_cmd_108_);
    }

    // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parking_brake_cmd_124_);
    }

    // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horn_rpt_21c_);
    }

    // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shift_rpt_228_);
    }

    // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shift_cmd_128_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accel_cmd_100_);
    }

    // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parking_brake_rpt_224_);
    }

    // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_cmd_104_);
    }

    // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_controls_rpt_220_);
    }

    // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_aux_rpt_32c_);
    }

    // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lat_lon_heading_rpt_40e_);
    }

    // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yaw_rate_rpt_40d_);
    }

    // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_time_rpt_40f_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vin_rpt_414_);
    }

    // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.occupancy_rpt_415_);
    }

    // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interior_lights_rpt_416_);
    }

    // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turn_cmd_130_);
    }

    // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.detected_object_rpt_411_);
    }

    // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.veh_specific_rpt_1_412_);
    }

    // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.veh_dynamics_rpt_413_);
    }

    // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rear_lights_rpt_418_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lexus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lexus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lexus::GetClassData() const { return &_class_data_; }

void Lexus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lexus *>(to)->MergeFrom(
      static_cast<const Lexus &>(from));
}


void Lexus::MergeFrom(const Lexus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lexus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hazard_lights_rpt_214()->::apollo::canbus::Hazard_lights_rpt_214::MergeFrom(from._internal_hazard_lights_rpt_214());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_steering_cmd_12c()->::apollo::canbus::Steering_cmd_12c::MergeFrom(from._internal_steering_cmd_12c());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dash_controls_right_rpt_210()->::apollo::canbus::Dash_controls_right_rpt_210::MergeFrom(from._internal_dash_controls_right_rpt_210());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dash_controls_left_cmd_10c()->::apollo::canbus::Dash_controls_left_cmd_10c::MergeFrom(from._internal_dash_controls_left_cmd_10c());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_steering_rpt_22c()->::apollo::canbus::Steering_rpt_22c::MergeFrom(from._internal_steering_rpt_22c());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_turn_aux_rpt_330()->::apollo::canbus::Turn_aux_rpt_330::MergeFrom(from._internal_turn_aux_rpt_330());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_headlight_rpt_218()->::apollo::canbus::Headlight_rpt_218::MergeFrom(from._internal_headlight_rpt_218());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hazard_lights_cmd_114()->::apollo::canbus::Hazard_lights_cmd_114::MergeFrom(from._internal_hazard_lights_cmd_114());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_dash_controls_left_rpt_20c()->::apollo::canbus::Dash_controls_left_rpt_20c::MergeFrom(from._internal_dash_controls_left_rpt_20c());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_headlight_aux_rpt_318()->::apollo::canbus::Headlight_aux_rpt_318::MergeFrom(from._internal_headlight_aux_rpt_318());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_dash_controls_right_cmd_110()->::apollo::canbus::Dash_controls_right_cmd_110::MergeFrom(from._internal_dash_controls_right_cmd_110());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_wiper_cmd_134()->::apollo::canbus::Wiper_cmd_134::MergeFrom(from._internal_wiper_cmd_134());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_wiper_rpt_234()->::apollo::canbus::Wiper_rpt_234::MergeFrom(from._internal_wiper_rpt_234());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_turn_rpt_230()->::apollo::canbus::Turn_rpt_230::MergeFrom(from._internal_turn_rpt_230());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_headlight_cmd_118()->::apollo::canbus::Headlight_cmd_118::MergeFrom(from._internal_headlight_cmd_118());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_door_rpt_417()->::apollo::canbus::Door_rpt_417::MergeFrom(from._internal_door_rpt_417());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_component_rpt_20()->::apollo::canbus::Component_rpt_20::MergeFrom(from._internal_component_rpt_20());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_wheel_speed_rpt_407()->::apollo::canbus::Wheel_speed_rpt_407::MergeFrom(from._internal_wheel_speed_rpt_407());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_steering_motor_rpt_3_406()->::apollo::canbus::Steering_motor_rpt_3_406::MergeFrom(from._internal_steering_motor_rpt_3_406());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_steering_motor_rpt_2_405()->::apollo::canbus::Steering_motor_rpt_2_405::MergeFrom(from._internal_steering_motor_rpt_2_405());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_steering_motor_rpt_1_404()->::apollo::canbus::Steering_motor_rpt_1_404::MergeFrom(from._internal_steering_motor_rpt_1_404());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_brake_motor_rpt_3_403()->::apollo::canbus::Brake_motor_rpt_3_403::MergeFrom(from._internal_brake_motor_rpt_3_403());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_brake_motor_rpt_2_402()->::apollo::canbus::Brake_motor_rpt_2_402::MergeFrom(from._internal_brake_motor_rpt_2_402());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_brake_motor_rpt_1_401()->::apollo::canbus::Brake_motor_rpt_1_401::MergeFrom(from._internal_brake_motor_rpt_1_401());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_wiper_aux_rpt_334()->::apollo::canbus::Wiper_aux_rpt_334::MergeFrom(from._internal_wiper_aux_rpt_334());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_shift_aux_rpt_328()->::apollo::canbus::Shift_aux_rpt_328::MergeFrom(from._internal_shift_aux_rpt_328());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_accel_rpt_200()->::apollo::canbus::Accel_rpt_200::MergeFrom(from._internal_accel_rpt_200());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_brake_rpt_204()->::apollo::canbus::Brake_rpt_204::MergeFrom(from._internal_brake_rpt_204());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_horn_cmd_11c()->::apollo::canbus::Horn_cmd_11c::MergeFrom(from._internal_horn_cmd_11c());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_global_rpt_10()->::apollo::canbus::Global_rpt_10::MergeFrom(from._internal_global_rpt_10());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_accel_aux_rpt_300()->::apollo::canbus::Accel_aux_rpt_300::MergeFrom(from._internal_accel_aux_rpt_300());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_cruise_control_buttons_rpt_208()->::apollo::canbus::Cruise_control_buttons_rpt_208::MergeFrom(from._internal_cruise_control_buttons_rpt_208());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle_speed_rpt_400()->::apollo::canbus::Vehicle_speed_rpt_400::MergeFrom(from._internal_vehicle_speed_rpt_400());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_brake_aux_rpt_304()->::apollo::canbus::Brake_aux_rpt_304::MergeFrom(from._internal_brake_aux_rpt_304());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_media_controls_cmd_120()->::apollo::canbus::Media_controls_cmd_120::MergeFrom(from._internal_media_controls_cmd_120());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cruise_control_buttons_cmd_108()->::apollo::canbus::Cruise_control_buttons_cmd_108::MergeFrom(from._internal_cruise_control_buttons_cmd_108());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_parking_brake_cmd_124()->::apollo::canbus::Parking_brake_cmd_124::MergeFrom(from._internal_parking_brake_cmd_124());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_horn_rpt_21c()->::apollo::canbus::Horn_rpt_21c::MergeFrom(from._internal_horn_rpt_21c());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_shift_rpt_228()->::apollo::canbus::Shift_rpt_228::MergeFrom(from._internal_shift_rpt_228());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_shift_cmd_128()->::apollo::canbus::Shift_cmd_128::MergeFrom(from._internal_shift_cmd_128());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_accel_cmd_100()->::apollo::canbus::Accel_cmd_100::MergeFrom(from._internal_accel_cmd_100());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_parking_brake_rpt_224()->::apollo::canbus::Parking_brake_rpt_224::MergeFrom(from._internal_parking_brake_rpt_224());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_brake_cmd_104()->::apollo::canbus::Brake_cmd_104::MergeFrom(from._internal_brake_cmd_104());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_media_controls_rpt_220()->::apollo::canbus::Media_controls_rpt_220::MergeFrom(from._internal_media_controls_rpt_220());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_steering_aux_rpt_32c()->::apollo::canbus::Steering_aux_rpt_32c::MergeFrom(from._internal_steering_aux_rpt_32c());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_lat_lon_heading_rpt_40e()->::apollo::canbus::Lat_lon_heading_rpt_40e::MergeFrom(from._internal_lat_lon_heading_rpt_40e());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_yaw_rate_rpt_40d()->::apollo::canbus::Yaw_rate_rpt_40d::MergeFrom(from._internal_yaw_rate_rpt_40d());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_date_time_rpt_40f()->::apollo::canbus::Date_time_rpt_40f::MergeFrom(from._internal_date_time_rpt_40f());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_vin_rpt_414()->::apollo::canbus::Vin_rpt_414::MergeFrom(from._internal_vin_rpt_414());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_occupancy_rpt_415()->::apollo::canbus::Occupancy_rpt_415::MergeFrom(from._internal_occupancy_rpt_415());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_interior_lights_rpt_416()->::apollo::canbus::Interior_lights_rpt_416::MergeFrom(from._internal_interior_lights_rpt_416());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_turn_cmd_130()->::apollo::canbus::Turn_cmd_130::MergeFrom(from._internal_turn_cmd_130());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_detected_object_rpt_411()->::apollo::canbus::Detected_object_rpt_411::MergeFrom(from._internal_detected_object_rpt_411());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_veh_specific_rpt_1_412()->::apollo::canbus::Veh_specific_rpt_1_412::MergeFrom(from._internal_veh_specific_rpt_1_412());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_veh_dynamics_rpt_413()->::apollo::canbus::Veh_dynamics_rpt_413::MergeFrom(from._internal_veh_dynamics_rpt_413());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_rear_lights_rpt_418()->::apollo::canbus::Rear_lights_rpt_418::MergeFrom(from._internal_rear_lights_rpt_418());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lexus::CopyFrom(const Lexus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lexus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lexus::IsInitialized() const {
  return true;
}

void Lexus::InternalSwap(Lexus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lexus, _impl_.rear_lights_rpt_418_)
      + sizeof(Lexus::_impl_.rear_lights_rpt_418_)
      - PROTOBUF_FIELD_OFFSET(Lexus, _impl_.hazard_lights_rpt_214_)>(
          reinterpret_cast<char*>(&_impl_.hazard_lights_rpt_214_),
          reinterpret_cast<char*>(&other->_impl_.hazard_lights_rpt_214_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lexus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[56]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Hazard_lights_rpt_214*
Arena::CreateMaybeMessage< ::apollo::canbus::Hazard_lights_rpt_214 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Hazard_lights_rpt_214 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_cmd_12c*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_cmd_12c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_cmd_12c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_right_rpt_210*
Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_right_rpt_210 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Dash_controls_right_rpt_210 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_left_cmd_10c*
Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_left_cmd_10c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Dash_controls_left_cmd_10c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_rpt_22c*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_rpt_22c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_rpt_22c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_aux_rpt_330*
Arena::CreateMaybeMessage< ::apollo::canbus::Turn_aux_rpt_330 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turn_aux_rpt_330 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_rpt_218*
Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_rpt_218 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Headlight_rpt_218 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Hazard_lights_cmd_114*
Arena::CreateMaybeMessage< ::apollo::canbus::Hazard_lights_cmd_114 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Hazard_lights_cmd_114 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_left_rpt_20c*
Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_left_rpt_20c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Dash_controls_left_rpt_20c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_aux_rpt_318*
Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_aux_rpt_318 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Headlight_aux_rpt_318 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_right_cmd_110*
Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_right_cmd_110 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Dash_controls_right_cmd_110 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_cmd_134*
Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_cmd_134 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wiper_cmd_134 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_rpt_234*
Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_rpt_234 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wiper_rpt_234 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_rpt_230*
Arena::CreateMaybeMessage< ::apollo::canbus::Turn_rpt_230 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turn_rpt_230 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_cmd_118*
Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_cmd_118 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Headlight_cmd_118 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Door_rpt_417*
Arena::CreateMaybeMessage< ::apollo::canbus::Door_rpt_417 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Door_rpt_417 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Component_rpt_20*
Arena::CreateMaybeMessage< ::apollo::canbus::Component_rpt_20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Component_rpt_20 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wheel_speed_rpt_407*
Arena::CreateMaybeMessage< ::apollo::canbus::Wheel_speed_rpt_407 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wheel_speed_rpt_407 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_3_406*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_3_406 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_3_406 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_2_405*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_2_405 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_2_405 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_1_404*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_1_404 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_1_404 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_3_403*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_3_403 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_3_403 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_2_402*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_2_402 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_2_402 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_1_401*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_1_401 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_1_401 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_aux_rpt_334*
Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_aux_rpt_334 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wiper_aux_rpt_334 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_aux_rpt_328*
Arena::CreateMaybeMessage< ::apollo::canbus::Shift_aux_rpt_328 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Shift_aux_rpt_328 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_rpt_200*
Arena::CreateMaybeMessage< ::apollo::canbus::Accel_rpt_200 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Accel_rpt_200 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_rpt_204*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_rpt_204 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_rpt_204 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_cmd_11c*
Arena::CreateMaybeMessage< ::apollo::canbus::Horn_cmd_11c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Horn_cmd_11c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_rpt_10*
Arena::CreateMaybeMessage< ::apollo::canbus::Global_rpt_10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Global_rpt_10 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_aux_rpt_300*
Arena::CreateMaybeMessage< ::apollo::canbus::Accel_aux_rpt_300 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Accel_aux_rpt_300 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Cruise_control_buttons_rpt_208*
Arena::CreateMaybeMessage< ::apollo::canbus::Cruise_control_buttons_rpt_208 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Cruise_control_buttons_rpt_208 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_speed_rpt_400*
Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_speed_rpt_400 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vehicle_speed_rpt_400 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_aux_rpt_304*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_aux_rpt_304 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_aux_rpt_304 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Media_controls_cmd_120*
Arena::CreateMaybeMessage< ::apollo::canbus::Media_controls_cmd_120 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Media_controls_cmd_120 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Cruise_control_buttons_cmd_108*
Arena::CreateMaybeMessage< ::apollo::canbus::Cruise_control_buttons_cmd_108 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Cruise_control_buttons_cmd_108 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_cmd_124*
Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_cmd_124 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Parking_brake_cmd_124 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_rpt_21c*
Arena::CreateMaybeMessage< ::apollo::canbus::Horn_rpt_21c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Horn_rpt_21c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_rpt_228*
Arena::CreateMaybeMessage< ::apollo::canbus::Shift_rpt_228 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Shift_rpt_228 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_cmd_128*
Arena::CreateMaybeMessage< ::apollo::canbus::Shift_cmd_128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Shift_cmd_128 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_cmd_100*
Arena::CreateMaybeMessage< ::apollo::canbus::Accel_cmd_100 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Accel_cmd_100 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_rpt_224*
Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_rpt_224 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Parking_brake_rpt_224 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_cmd_104*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_cmd_104 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_cmd_104 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Media_controls_rpt_220*
Arena::CreateMaybeMessage< ::apollo::canbus::Media_controls_rpt_220 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Media_controls_rpt_220 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_aux_rpt_32c*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_aux_rpt_32c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_aux_rpt_32c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lat_lon_heading_rpt_40e*
Arena::CreateMaybeMessage< ::apollo::canbus::Lat_lon_heading_rpt_40e >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Lat_lon_heading_rpt_40e >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Yaw_rate_rpt_40d*
Arena::CreateMaybeMessage< ::apollo::canbus::Yaw_rate_rpt_40d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Yaw_rate_rpt_40d >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Date_time_rpt_40f*
Arena::CreateMaybeMessage< ::apollo::canbus::Date_time_rpt_40f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Date_time_rpt_40f >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vin_rpt_414*
Arena::CreateMaybeMessage< ::apollo::canbus::Vin_rpt_414 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vin_rpt_414 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Occupancy_rpt_415*
Arena::CreateMaybeMessage< ::apollo::canbus::Occupancy_rpt_415 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Occupancy_rpt_415 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Interior_lights_rpt_416*
Arena::CreateMaybeMessage< ::apollo::canbus::Interior_lights_rpt_416 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Interior_lights_rpt_416 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_cmd_130*
Arena::CreateMaybeMessage< ::apollo::canbus::Turn_cmd_130 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turn_cmd_130 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Detected_object_rpt_411*
Arena::CreateMaybeMessage< ::apollo::canbus::Detected_object_rpt_411 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Detected_object_rpt_411 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Veh_specific_rpt_1_412*
Arena::CreateMaybeMessage< ::apollo::canbus::Veh_specific_rpt_1_412 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Veh_specific_rpt_1_412 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Veh_dynamics_rpt_413*
Arena::CreateMaybeMessage< ::apollo::canbus::Veh_dynamics_rpt_413 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Veh_dynamics_rpt_413 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Rear_lights_rpt_418*
Arena::CreateMaybeMessage< ::apollo::canbus::Rear_lights_rpt_418 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Rear_lights_rpt_418 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lexus*
Arena::CreateMaybeMessage< ::apollo::canbus::Lexus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Lexus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
