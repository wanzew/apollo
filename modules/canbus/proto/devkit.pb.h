// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/devkit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fdevkit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fdevkit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fdevkit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fdevkit_2eproto;
namespace apollo {
namespace canbus {
class Bms_report_512;
struct Bms_report_512DefaultTypeInternal;
extern Bms_report_512DefaultTypeInternal _Bms_report_512_default_instance_;
class Brake_command_101;
struct Brake_command_101DefaultTypeInternal;
extern Brake_command_101DefaultTypeInternal _Brake_command_101_default_instance_;
class Brake_report_501;
struct Brake_report_501DefaultTypeInternal;
extern Brake_report_501DefaultTypeInternal _Brake_report_501_default_instance_;
class Devkit;
struct DevkitDefaultTypeInternal;
extern DevkitDefaultTypeInternal _Devkit_default_instance_;
class Gear_command_103;
struct Gear_command_103DefaultTypeInternal;
extern Gear_command_103DefaultTypeInternal _Gear_command_103_default_instance_;
class Gear_report_503;
struct Gear_report_503DefaultTypeInternal;
extern Gear_report_503DefaultTypeInternal _Gear_report_503_default_instance_;
class Park_command_104;
struct Park_command_104DefaultTypeInternal;
extern Park_command_104DefaultTypeInternal _Park_command_104_default_instance_;
class Park_report_504;
struct Park_report_504DefaultTypeInternal;
extern Park_report_504DefaultTypeInternal _Park_report_504_default_instance_;
class Steering_command_102;
struct Steering_command_102DefaultTypeInternal;
extern Steering_command_102DefaultTypeInternal _Steering_command_102_default_instance_;
class Steering_report_502;
struct Steering_report_502DefaultTypeInternal;
extern Steering_report_502DefaultTypeInternal _Steering_report_502_default_instance_;
class Throttle_command_100;
struct Throttle_command_100DefaultTypeInternal;
extern Throttle_command_100DefaultTypeInternal _Throttle_command_100_default_instance_;
class Throttle_report_500;
struct Throttle_report_500DefaultTypeInternal;
extern Throttle_report_500DefaultTypeInternal _Throttle_report_500_default_instance_;
class Ultr_sensor_1_507;
struct Ultr_sensor_1_507DefaultTypeInternal;
extern Ultr_sensor_1_507DefaultTypeInternal _Ultr_sensor_1_507_default_instance_;
class Ultr_sensor_2_508;
struct Ultr_sensor_2_508DefaultTypeInternal;
extern Ultr_sensor_2_508DefaultTypeInternal _Ultr_sensor_2_508_default_instance_;
class Ultr_sensor_3_509;
struct Ultr_sensor_3_509DefaultTypeInternal;
extern Ultr_sensor_3_509DefaultTypeInternal _Ultr_sensor_3_509_default_instance_;
class Ultr_sensor_4_510;
struct Ultr_sensor_4_510DefaultTypeInternal;
extern Ultr_sensor_4_510DefaultTypeInternal _Ultr_sensor_4_510_default_instance_;
class Ultr_sensor_5_511;
struct Ultr_sensor_5_511DefaultTypeInternal;
extern Ultr_sensor_5_511DefaultTypeInternal _Ultr_sensor_5_511_default_instance_;
class Vcu_report_505;
struct Vcu_report_505DefaultTypeInternal;
extern Vcu_report_505DefaultTypeInternal _Vcu_report_505_default_instance_;
class Wheelspeed_report_506;
struct Wheelspeed_report_506DefaultTypeInternal;
extern Wheelspeed_report_506DefaultTypeInternal _Wheelspeed_report_506_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Bms_report_512* Arena::CreateMaybeMessage<::apollo::canbus::Bms_report_512>(Arena*);
template<> ::apollo::canbus::Brake_command_101* Arena::CreateMaybeMessage<::apollo::canbus::Brake_command_101>(Arena*);
template<> ::apollo::canbus::Brake_report_501* Arena::CreateMaybeMessage<::apollo::canbus::Brake_report_501>(Arena*);
template<> ::apollo::canbus::Devkit* Arena::CreateMaybeMessage<::apollo::canbus::Devkit>(Arena*);
template<> ::apollo::canbus::Gear_command_103* Arena::CreateMaybeMessage<::apollo::canbus::Gear_command_103>(Arena*);
template<> ::apollo::canbus::Gear_report_503* Arena::CreateMaybeMessage<::apollo::canbus::Gear_report_503>(Arena*);
template<> ::apollo::canbus::Park_command_104* Arena::CreateMaybeMessage<::apollo::canbus::Park_command_104>(Arena*);
template<> ::apollo::canbus::Park_report_504* Arena::CreateMaybeMessage<::apollo::canbus::Park_report_504>(Arena*);
template<> ::apollo::canbus::Steering_command_102* Arena::CreateMaybeMessage<::apollo::canbus::Steering_command_102>(Arena*);
template<> ::apollo::canbus::Steering_report_502* Arena::CreateMaybeMessage<::apollo::canbus::Steering_report_502>(Arena*);
template<> ::apollo::canbus::Throttle_command_100* Arena::CreateMaybeMessage<::apollo::canbus::Throttle_command_100>(Arena*);
template<> ::apollo::canbus::Throttle_report_500* Arena::CreateMaybeMessage<::apollo::canbus::Throttle_report_500>(Arena*);
template<> ::apollo::canbus::Ultr_sensor_1_507* Arena::CreateMaybeMessage<::apollo::canbus::Ultr_sensor_1_507>(Arena*);
template<> ::apollo::canbus::Ultr_sensor_2_508* Arena::CreateMaybeMessage<::apollo::canbus::Ultr_sensor_2_508>(Arena*);
template<> ::apollo::canbus::Ultr_sensor_3_509* Arena::CreateMaybeMessage<::apollo::canbus::Ultr_sensor_3_509>(Arena*);
template<> ::apollo::canbus::Ultr_sensor_4_510* Arena::CreateMaybeMessage<::apollo::canbus::Ultr_sensor_4_510>(Arena*);
template<> ::apollo::canbus::Ultr_sensor_5_511* Arena::CreateMaybeMessage<::apollo::canbus::Ultr_sensor_5_511>(Arena*);
template<> ::apollo::canbus::Vcu_report_505* Arena::CreateMaybeMessage<::apollo::canbus::Vcu_report_505>(Arena*);
template<> ::apollo::canbus::Wheelspeed_report_506* Arena::CreateMaybeMessage<::apollo::canbus::Wheelspeed_report_506>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Throttle_command_100_Throttle_en_ctrlType : int {
  Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_DISABLE = 0,
  Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_ENABLE = 1
};
bool Throttle_command_100_Throttle_en_ctrlType_IsValid(int value);
constexpr Throttle_command_100_Throttle_en_ctrlType Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_MIN = Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_DISABLE;
constexpr Throttle_command_100_Throttle_en_ctrlType Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_MAX = Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_ENABLE;
constexpr int Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_ARRAYSIZE = Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_command_100_Throttle_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Throttle_command_100_Throttle_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_command_100_Throttle_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_command_100_Throttle_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_command_100_Throttle_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Throttle_command_100_Throttle_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_command_100_Throttle_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_command_100_Throttle_en_ctrlType>(
    Throttle_command_100_Throttle_en_ctrlType_descriptor(), name, value);
}
enum Brake_command_101_Aeb_en_ctrlType : int {
  Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_DISABLE_AEB = 0,
  Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_ENABLE_AEB = 1
};
bool Brake_command_101_Aeb_en_ctrlType_IsValid(int value);
constexpr Brake_command_101_Aeb_en_ctrlType Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_MIN = Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_DISABLE_AEB;
constexpr Brake_command_101_Aeb_en_ctrlType Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_MAX = Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_ENABLE_AEB;
constexpr int Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_ARRAYSIZE = Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_command_101_Aeb_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Brake_command_101_Aeb_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_command_101_Aeb_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_command_101_Aeb_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_command_101_Aeb_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Brake_command_101_Aeb_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_command_101_Aeb_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_command_101_Aeb_en_ctrlType>(
    Brake_command_101_Aeb_en_ctrlType_descriptor(), name, value);
}
enum Brake_command_101_Brake_en_ctrlType : int {
  Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_DISABLE = 0,
  Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_ENABLE = 1
};
bool Brake_command_101_Brake_en_ctrlType_IsValid(int value);
constexpr Brake_command_101_Brake_en_ctrlType Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_MIN = Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_DISABLE;
constexpr Brake_command_101_Brake_en_ctrlType Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_MAX = Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_ENABLE;
constexpr int Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_ARRAYSIZE = Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_command_101_Brake_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Brake_command_101_Brake_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_command_101_Brake_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_command_101_Brake_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_command_101_Brake_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Brake_command_101_Brake_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_command_101_Brake_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_command_101_Brake_en_ctrlType>(
    Brake_command_101_Brake_en_ctrlType_descriptor(), name, value);
}
enum Steering_command_102_Steer_en_ctrlType : int {
  Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_DISABLE = 0,
  Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_ENABLE = 1
};
bool Steering_command_102_Steer_en_ctrlType_IsValid(int value);
constexpr Steering_command_102_Steer_en_ctrlType Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_MIN = Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_DISABLE;
constexpr Steering_command_102_Steer_en_ctrlType Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_MAX = Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_ENABLE;
constexpr int Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_ARRAYSIZE = Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_command_102_Steer_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Steering_command_102_Steer_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steering_command_102_Steer_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steering_command_102_Steer_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steering_command_102_Steer_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Steering_command_102_Steer_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steering_command_102_Steer_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steering_command_102_Steer_en_ctrlType>(
    Steering_command_102_Steer_en_ctrlType_descriptor(), name, value);
}
enum Gear_command_103_Gear_targetType : int {
  Gear_command_103_Gear_targetType_GEAR_TARGET_INVALID = 0,
  Gear_command_103_Gear_targetType_GEAR_TARGET_PARK = 1,
  Gear_command_103_Gear_targetType_GEAR_TARGET_REVERSE = 2,
  Gear_command_103_Gear_targetType_GEAR_TARGET_NEUTRAL = 3,
  Gear_command_103_Gear_targetType_GEAR_TARGET_DRIVE = 4
};
bool Gear_command_103_Gear_targetType_IsValid(int value);
constexpr Gear_command_103_Gear_targetType Gear_command_103_Gear_targetType_Gear_targetType_MIN = Gear_command_103_Gear_targetType_GEAR_TARGET_INVALID;
constexpr Gear_command_103_Gear_targetType Gear_command_103_Gear_targetType_Gear_targetType_MAX = Gear_command_103_Gear_targetType_GEAR_TARGET_DRIVE;
constexpr int Gear_command_103_Gear_targetType_Gear_targetType_ARRAYSIZE = Gear_command_103_Gear_targetType_Gear_targetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_command_103_Gear_targetType_descriptor();
template<typename T>
inline const std::string& Gear_command_103_Gear_targetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_command_103_Gear_targetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_command_103_Gear_targetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_command_103_Gear_targetType_descriptor(), enum_t_value);
}
inline bool Gear_command_103_Gear_targetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_command_103_Gear_targetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_command_103_Gear_targetType>(
    Gear_command_103_Gear_targetType_descriptor(), name, value);
}
enum Gear_command_103_Gear_en_ctrlType : int {
  Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_DISABLE = 0,
  Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_ENABLE = 1
};
bool Gear_command_103_Gear_en_ctrlType_IsValid(int value);
constexpr Gear_command_103_Gear_en_ctrlType Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_MIN = Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_DISABLE;
constexpr Gear_command_103_Gear_en_ctrlType Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_MAX = Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_ENABLE;
constexpr int Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_ARRAYSIZE = Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_command_103_Gear_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Gear_command_103_Gear_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_command_103_Gear_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_command_103_Gear_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_command_103_Gear_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Gear_command_103_Gear_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_command_103_Gear_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_command_103_Gear_en_ctrlType>(
    Gear_command_103_Gear_en_ctrlType_descriptor(), name, value);
}
enum Park_command_104_Park_targetType : int {
  Park_command_104_Park_targetType_PARK_TARGET_RELEASE = 0,
  Park_command_104_Park_targetType_PARK_TARGET_PARKING_TRIGGER = 1
};
bool Park_command_104_Park_targetType_IsValid(int value);
constexpr Park_command_104_Park_targetType Park_command_104_Park_targetType_Park_targetType_MIN = Park_command_104_Park_targetType_PARK_TARGET_RELEASE;
constexpr Park_command_104_Park_targetType Park_command_104_Park_targetType_Park_targetType_MAX = Park_command_104_Park_targetType_PARK_TARGET_PARKING_TRIGGER;
constexpr int Park_command_104_Park_targetType_Park_targetType_ARRAYSIZE = Park_command_104_Park_targetType_Park_targetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Park_command_104_Park_targetType_descriptor();
template<typename T>
inline const std::string& Park_command_104_Park_targetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Park_command_104_Park_targetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Park_command_104_Park_targetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Park_command_104_Park_targetType_descriptor(), enum_t_value);
}
inline bool Park_command_104_Park_targetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Park_command_104_Park_targetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Park_command_104_Park_targetType>(
    Park_command_104_Park_targetType_descriptor(), name, value);
}
enum Park_command_104_Park_en_ctrlType : int {
  Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_DISABLE = 0,
  Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_ENABLE = 1
};
bool Park_command_104_Park_en_ctrlType_IsValid(int value);
constexpr Park_command_104_Park_en_ctrlType Park_command_104_Park_en_ctrlType_Park_en_ctrlType_MIN = Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_DISABLE;
constexpr Park_command_104_Park_en_ctrlType Park_command_104_Park_en_ctrlType_Park_en_ctrlType_MAX = Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_ENABLE;
constexpr int Park_command_104_Park_en_ctrlType_Park_en_ctrlType_ARRAYSIZE = Park_command_104_Park_en_ctrlType_Park_en_ctrlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Park_command_104_Park_en_ctrlType_descriptor();
template<typename T>
inline const std::string& Park_command_104_Park_en_ctrlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Park_command_104_Park_en_ctrlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Park_command_104_Park_en_ctrlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Park_command_104_Park_en_ctrlType_descriptor(), enum_t_value);
}
inline bool Park_command_104_Park_en_ctrlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Park_command_104_Park_en_ctrlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Park_command_104_Park_en_ctrlType>(
    Park_command_104_Park_en_ctrlType_descriptor(), name, value);
}
enum Throttle_report_500_Throttle_flt2Type : int {
  Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_NO_FAULT = 0,
  Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_DRIVE_SYSTEM_COMUNICATION_FAULT = 1
};
bool Throttle_report_500_Throttle_flt2Type_IsValid(int value);
constexpr Throttle_report_500_Throttle_flt2Type Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_MIN = Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_NO_FAULT;
constexpr Throttle_report_500_Throttle_flt2Type Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_MAX = Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_DRIVE_SYSTEM_COMUNICATION_FAULT;
constexpr int Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_ARRAYSIZE = Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_report_500_Throttle_flt2Type_descriptor();
template<typename T>
inline const std::string& Throttle_report_500_Throttle_flt2Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_report_500_Throttle_flt2Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_report_500_Throttle_flt2Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_report_500_Throttle_flt2Type_descriptor(), enum_t_value);
}
inline bool Throttle_report_500_Throttle_flt2Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_report_500_Throttle_flt2Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_report_500_Throttle_flt2Type>(
    Throttle_report_500_Throttle_flt2Type_descriptor(), name, value);
}
enum Throttle_report_500_Throttle_flt1Type : int {
  Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_NO_FAULT = 0,
  Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_DRIVE_SYSTEM_HARDWARE_FAULT = 1
};
bool Throttle_report_500_Throttle_flt1Type_IsValid(int value);
constexpr Throttle_report_500_Throttle_flt1Type Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_MIN = Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_NO_FAULT;
constexpr Throttle_report_500_Throttle_flt1Type Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_MAX = Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_DRIVE_SYSTEM_HARDWARE_FAULT;
constexpr int Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_ARRAYSIZE = Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_report_500_Throttle_flt1Type_descriptor();
template<typename T>
inline const std::string& Throttle_report_500_Throttle_flt1Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_report_500_Throttle_flt1Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_report_500_Throttle_flt1Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_report_500_Throttle_flt1Type_descriptor(), enum_t_value);
}
inline bool Throttle_report_500_Throttle_flt1Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_report_500_Throttle_flt1Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_report_500_Throttle_flt1Type>(
    Throttle_report_500_Throttle_flt1Type_descriptor(), name, value);
}
enum Throttle_report_500_Throttle_en_stateType : int {
  Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_MANUAL = 0,
  Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_AUTO = 1,
  Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_TAKEOVER = 2,
  Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_STANDBY = 3
};
bool Throttle_report_500_Throttle_en_stateType_IsValid(int value);
constexpr Throttle_report_500_Throttle_en_stateType Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_MIN = Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_MANUAL;
constexpr Throttle_report_500_Throttle_en_stateType Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_MAX = Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_STANDBY;
constexpr int Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_ARRAYSIZE = Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_report_500_Throttle_en_stateType_descriptor();
template<typename T>
inline const std::string& Throttle_report_500_Throttle_en_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Throttle_report_500_Throttle_en_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Throttle_report_500_Throttle_en_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Throttle_report_500_Throttle_en_stateType_descriptor(), enum_t_value);
}
inline bool Throttle_report_500_Throttle_en_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Throttle_report_500_Throttle_en_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Throttle_report_500_Throttle_en_stateType>(
    Throttle_report_500_Throttle_en_stateType_descriptor(), name, value);
}
enum Brake_report_501_Brake_flt2Type : int {
  Brake_report_501_Brake_flt2Type_BRAKE_FLT2_NO_FAULT = 0,
  Brake_report_501_Brake_flt2Type_BRAKE_FLT2_BRAKE_SYSTEM_COMUNICATION_FAULT = 1
};
bool Brake_report_501_Brake_flt2Type_IsValid(int value);
constexpr Brake_report_501_Brake_flt2Type Brake_report_501_Brake_flt2Type_Brake_flt2Type_MIN = Brake_report_501_Brake_flt2Type_BRAKE_FLT2_NO_FAULT;
constexpr Brake_report_501_Brake_flt2Type Brake_report_501_Brake_flt2Type_Brake_flt2Type_MAX = Brake_report_501_Brake_flt2Type_BRAKE_FLT2_BRAKE_SYSTEM_COMUNICATION_FAULT;
constexpr int Brake_report_501_Brake_flt2Type_Brake_flt2Type_ARRAYSIZE = Brake_report_501_Brake_flt2Type_Brake_flt2Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_report_501_Brake_flt2Type_descriptor();
template<typename T>
inline const std::string& Brake_report_501_Brake_flt2Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_report_501_Brake_flt2Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_report_501_Brake_flt2Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_report_501_Brake_flt2Type_descriptor(), enum_t_value);
}
inline bool Brake_report_501_Brake_flt2Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_report_501_Brake_flt2Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_report_501_Brake_flt2Type>(
    Brake_report_501_Brake_flt2Type_descriptor(), name, value);
}
enum Brake_report_501_Brake_flt1Type : int {
  Brake_report_501_Brake_flt1Type_BRAKE_FLT1_NO_FAULT = 0,
  Brake_report_501_Brake_flt1Type_BRAKE_FLT1_BRAKE_SYSTEM_HARDWARE_FAULT = 1
};
bool Brake_report_501_Brake_flt1Type_IsValid(int value);
constexpr Brake_report_501_Brake_flt1Type Brake_report_501_Brake_flt1Type_Brake_flt1Type_MIN = Brake_report_501_Brake_flt1Type_BRAKE_FLT1_NO_FAULT;
constexpr Brake_report_501_Brake_flt1Type Brake_report_501_Brake_flt1Type_Brake_flt1Type_MAX = Brake_report_501_Brake_flt1Type_BRAKE_FLT1_BRAKE_SYSTEM_HARDWARE_FAULT;
constexpr int Brake_report_501_Brake_flt1Type_Brake_flt1Type_ARRAYSIZE = Brake_report_501_Brake_flt1Type_Brake_flt1Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_report_501_Brake_flt1Type_descriptor();
template<typename T>
inline const std::string& Brake_report_501_Brake_flt1Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_report_501_Brake_flt1Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_report_501_Brake_flt1Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_report_501_Brake_flt1Type_descriptor(), enum_t_value);
}
inline bool Brake_report_501_Brake_flt1Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_report_501_Brake_flt1Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_report_501_Brake_flt1Type>(
    Brake_report_501_Brake_flt1Type_descriptor(), name, value);
}
enum Brake_report_501_Brake_en_stateType : int {
  Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_MANUAL = 0,
  Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_AUTO = 1,
  Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_TAKEOVER = 2,
  Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_STANDBY = 3
};
bool Brake_report_501_Brake_en_stateType_IsValid(int value);
constexpr Brake_report_501_Brake_en_stateType Brake_report_501_Brake_en_stateType_Brake_en_stateType_MIN = Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_MANUAL;
constexpr Brake_report_501_Brake_en_stateType Brake_report_501_Brake_en_stateType_Brake_en_stateType_MAX = Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_STANDBY;
constexpr int Brake_report_501_Brake_en_stateType_Brake_en_stateType_ARRAYSIZE = Brake_report_501_Brake_en_stateType_Brake_en_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_report_501_Brake_en_stateType_descriptor();
template<typename T>
inline const std::string& Brake_report_501_Brake_en_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brake_report_501_Brake_en_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brake_report_501_Brake_en_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brake_report_501_Brake_en_stateType_descriptor(), enum_t_value);
}
inline bool Brake_report_501_Brake_en_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brake_report_501_Brake_en_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brake_report_501_Brake_en_stateType>(
    Brake_report_501_Brake_en_stateType_descriptor(), name, value);
}
enum Steering_report_502_Steer_flt2Type : int {
  Steering_report_502_Steer_flt2Type_STEER_FLT2_NO_FAULT = 0,
  Steering_report_502_Steer_flt2Type_STEER_FLT2_STEER_SYSTEM_COMUNICATION_FAULT = 1
};
bool Steering_report_502_Steer_flt2Type_IsValid(int value);
constexpr Steering_report_502_Steer_flt2Type Steering_report_502_Steer_flt2Type_Steer_flt2Type_MIN = Steering_report_502_Steer_flt2Type_STEER_FLT2_NO_FAULT;
constexpr Steering_report_502_Steer_flt2Type Steering_report_502_Steer_flt2Type_Steer_flt2Type_MAX = Steering_report_502_Steer_flt2Type_STEER_FLT2_STEER_SYSTEM_COMUNICATION_FAULT;
constexpr int Steering_report_502_Steer_flt2Type_Steer_flt2Type_ARRAYSIZE = Steering_report_502_Steer_flt2Type_Steer_flt2Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_report_502_Steer_flt2Type_descriptor();
template<typename T>
inline const std::string& Steering_report_502_Steer_flt2Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steering_report_502_Steer_flt2Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steering_report_502_Steer_flt2Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steering_report_502_Steer_flt2Type_descriptor(), enum_t_value);
}
inline bool Steering_report_502_Steer_flt2Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steering_report_502_Steer_flt2Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steering_report_502_Steer_flt2Type>(
    Steering_report_502_Steer_flt2Type_descriptor(), name, value);
}
enum Steering_report_502_Steer_flt1Type : int {
  Steering_report_502_Steer_flt1Type_STEER_FLT1_NO_FAULT = 0,
  Steering_report_502_Steer_flt1Type_STEER_FLT1_STEER_SYSTEM_HARDWARE_FAULT = 1
};
bool Steering_report_502_Steer_flt1Type_IsValid(int value);
constexpr Steering_report_502_Steer_flt1Type Steering_report_502_Steer_flt1Type_Steer_flt1Type_MIN = Steering_report_502_Steer_flt1Type_STEER_FLT1_NO_FAULT;
constexpr Steering_report_502_Steer_flt1Type Steering_report_502_Steer_flt1Type_Steer_flt1Type_MAX = Steering_report_502_Steer_flt1Type_STEER_FLT1_STEER_SYSTEM_HARDWARE_FAULT;
constexpr int Steering_report_502_Steer_flt1Type_Steer_flt1Type_ARRAYSIZE = Steering_report_502_Steer_flt1Type_Steer_flt1Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_report_502_Steer_flt1Type_descriptor();
template<typename T>
inline const std::string& Steering_report_502_Steer_flt1Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steering_report_502_Steer_flt1Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steering_report_502_Steer_flt1Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steering_report_502_Steer_flt1Type_descriptor(), enum_t_value);
}
inline bool Steering_report_502_Steer_flt1Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steering_report_502_Steer_flt1Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steering_report_502_Steer_flt1Type>(
    Steering_report_502_Steer_flt1Type_descriptor(), name, value);
}
enum Steering_report_502_Steer_en_stateType : int {
  Steering_report_502_Steer_en_stateType_STEER_EN_STATE_MANUAL = 0,
  Steering_report_502_Steer_en_stateType_STEER_EN_STATE_AUTO = 1,
  Steering_report_502_Steer_en_stateType_STEER_EN_STATE_TAKEOVER = 2,
  Steering_report_502_Steer_en_stateType_STEER_EN_STATE_STANDBY = 3
};
bool Steering_report_502_Steer_en_stateType_IsValid(int value);
constexpr Steering_report_502_Steer_en_stateType Steering_report_502_Steer_en_stateType_Steer_en_stateType_MIN = Steering_report_502_Steer_en_stateType_STEER_EN_STATE_MANUAL;
constexpr Steering_report_502_Steer_en_stateType Steering_report_502_Steer_en_stateType_Steer_en_stateType_MAX = Steering_report_502_Steer_en_stateType_STEER_EN_STATE_STANDBY;
constexpr int Steering_report_502_Steer_en_stateType_Steer_en_stateType_ARRAYSIZE = Steering_report_502_Steer_en_stateType_Steer_en_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_report_502_Steer_en_stateType_descriptor();
template<typename T>
inline const std::string& Steering_report_502_Steer_en_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Steering_report_502_Steer_en_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Steering_report_502_Steer_en_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Steering_report_502_Steer_en_stateType_descriptor(), enum_t_value);
}
inline bool Steering_report_502_Steer_en_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Steering_report_502_Steer_en_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Steering_report_502_Steer_en_stateType>(
    Steering_report_502_Steer_en_stateType_descriptor(), name, value);
}
enum Gear_report_503_Gear_fltType : int {
  Gear_report_503_Gear_fltType_GEAR_FLT_NO_FAULT = 0,
  Gear_report_503_Gear_fltType_GEAR_FLT_FAULT = 1
};
bool Gear_report_503_Gear_fltType_IsValid(int value);
constexpr Gear_report_503_Gear_fltType Gear_report_503_Gear_fltType_Gear_fltType_MIN = Gear_report_503_Gear_fltType_GEAR_FLT_NO_FAULT;
constexpr Gear_report_503_Gear_fltType Gear_report_503_Gear_fltType_Gear_fltType_MAX = Gear_report_503_Gear_fltType_GEAR_FLT_FAULT;
constexpr int Gear_report_503_Gear_fltType_Gear_fltType_ARRAYSIZE = Gear_report_503_Gear_fltType_Gear_fltType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_report_503_Gear_fltType_descriptor();
template<typename T>
inline const std::string& Gear_report_503_Gear_fltType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_report_503_Gear_fltType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_report_503_Gear_fltType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_report_503_Gear_fltType_descriptor(), enum_t_value);
}
inline bool Gear_report_503_Gear_fltType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_report_503_Gear_fltType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_report_503_Gear_fltType>(
    Gear_report_503_Gear_fltType_descriptor(), name, value);
}
enum Gear_report_503_Gear_actualType : int {
  Gear_report_503_Gear_actualType_GEAR_ACTUAL_INVALID = 0,
  Gear_report_503_Gear_actualType_GEAR_ACTUAL_PARK = 1,
  Gear_report_503_Gear_actualType_GEAR_ACTUAL_REVERSE = 2,
  Gear_report_503_Gear_actualType_GEAR_ACTUAL_NEUTRAL = 3,
  Gear_report_503_Gear_actualType_GEAR_ACTUAL_DRIVE = 4
};
bool Gear_report_503_Gear_actualType_IsValid(int value);
constexpr Gear_report_503_Gear_actualType Gear_report_503_Gear_actualType_Gear_actualType_MIN = Gear_report_503_Gear_actualType_GEAR_ACTUAL_INVALID;
constexpr Gear_report_503_Gear_actualType Gear_report_503_Gear_actualType_Gear_actualType_MAX = Gear_report_503_Gear_actualType_GEAR_ACTUAL_DRIVE;
constexpr int Gear_report_503_Gear_actualType_Gear_actualType_ARRAYSIZE = Gear_report_503_Gear_actualType_Gear_actualType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_report_503_Gear_actualType_descriptor();
template<typename T>
inline const std::string& Gear_report_503_Gear_actualType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gear_report_503_Gear_actualType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gear_report_503_Gear_actualType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gear_report_503_Gear_actualType_descriptor(), enum_t_value);
}
inline bool Gear_report_503_Gear_actualType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear_report_503_Gear_actualType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gear_report_503_Gear_actualType>(
    Gear_report_503_Gear_actualType_descriptor(), name, value);
}
enum Park_report_504_Parking_actualType : int {
  Park_report_504_Parking_actualType_PARKING_ACTUAL_RELEASE = 0,
  Park_report_504_Parking_actualType_PARKING_ACTUAL_PARKING_TRIGGER = 1
};
bool Park_report_504_Parking_actualType_IsValid(int value);
constexpr Park_report_504_Parking_actualType Park_report_504_Parking_actualType_Parking_actualType_MIN = Park_report_504_Parking_actualType_PARKING_ACTUAL_RELEASE;
constexpr Park_report_504_Parking_actualType Park_report_504_Parking_actualType_Parking_actualType_MAX = Park_report_504_Parking_actualType_PARKING_ACTUAL_PARKING_TRIGGER;
constexpr int Park_report_504_Parking_actualType_Parking_actualType_ARRAYSIZE = Park_report_504_Parking_actualType_Parking_actualType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Park_report_504_Parking_actualType_descriptor();
template<typename T>
inline const std::string& Park_report_504_Parking_actualType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Park_report_504_Parking_actualType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Park_report_504_Parking_actualType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Park_report_504_Parking_actualType_descriptor(), enum_t_value);
}
inline bool Park_report_504_Parking_actualType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Park_report_504_Parking_actualType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Park_report_504_Parking_actualType>(
    Park_report_504_Parking_actualType_descriptor(), name, value);
}
enum Park_report_504_Park_fltType : int {
  Park_report_504_Park_fltType_PARK_FLT_NO_FAULT = 0,
  Park_report_504_Park_fltType_PARK_FLT_FAULT = 1
};
bool Park_report_504_Park_fltType_IsValid(int value);
constexpr Park_report_504_Park_fltType Park_report_504_Park_fltType_Park_fltType_MIN = Park_report_504_Park_fltType_PARK_FLT_NO_FAULT;
constexpr Park_report_504_Park_fltType Park_report_504_Park_fltType_Park_fltType_MAX = Park_report_504_Park_fltType_PARK_FLT_FAULT;
constexpr int Park_report_504_Park_fltType_Park_fltType_ARRAYSIZE = Park_report_504_Park_fltType_Park_fltType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Park_report_504_Park_fltType_descriptor();
template<typename T>
inline const std::string& Park_report_504_Park_fltType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Park_report_504_Park_fltType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Park_report_504_Park_fltType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Park_report_504_Park_fltType_descriptor(), enum_t_value);
}
inline bool Park_report_504_Park_fltType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Park_report_504_Park_fltType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Park_report_504_Park_fltType>(
    Park_report_504_Park_fltType_descriptor(), name, value);
}
enum Vcu_report_505_Vehicle_mode_stateType : int {
  Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_MANUAL_REMOTE_MODE = 0,
  Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_AUTO_MODE = 1,
  Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_EMERGENCY_MODE = 2,
  Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_STANDBY_MODE = 3
};
bool Vcu_report_505_Vehicle_mode_stateType_IsValid(int value);
constexpr Vcu_report_505_Vehicle_mode_stateType Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_MIN = Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_MANUAL_REMOTE_MODE;
constexpr Vcu_report_505_Vehicle_mode_stateType Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_MAX = Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_STANDBY_MODE;
constexpr int Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_ARRAYSIZE = Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_report_505_Vehicle_mode_stateType_descriptor();
template<typename T>
inline const std::string& Vcu_report_505_Vehicle_mode_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_report_505_Vehicle_mode_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_report_505_Vehicle_mode_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_report_505_Vehicle_mode_stateType_descriptor(), enum_t_value);
}
inline bool Vcu_report_505_Vehicle_mode_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_report_505_Vehicle_mode_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_report_505_Vehicle_mode_stateType>(
    Vcu_report_505_Vehicle_mode_stateType_descriptor(), name, value);
}
enum Vcu_report_505_Frontcrash_stateType : int {
  Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_NO_EVENT = 0,
  Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_CRASH_EVENT = 1
};
bool Vcu_report_505_Frontcrash_stateType_IsValid(int value);
constexpr Vcu_report_505_Frontcrash_stateType Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_MIN = Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_NO_EVENT;
constexpr Vcu_report_505_Frontcrash_stateType Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_MAX = Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_CRASH_EVENT;
constexpr int Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_ARRAYSIZE = Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_report_505_Frontcrash_stateType_descriptor();
template<typename T>
inline const std::string& Vcu_report_505_Frontcrash_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_report_505_Frontcrash_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_report_505_Frontcrash_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_report_505_Frontcrash_stateType_descriptor(), enum_t_value);
}
inline bool Vcu_report_505_Frontcrash_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_report_505_Frontcrash_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_report_505_Frontcrash_stateType>(
    Vcu_report_505_Frontcrash_stateType_descriptor(), name, value);
}
enum Vcu_report_505_Backcrash_stateType : int {
  Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_NO_EVENT = 0,
  Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_CRASH_EVENT = 1
};
bool Vcu_report_505_Backcrash_stateType_IsValid(int value);
constexpr Vcu_report_505_Backcrash_stateType Vcu_report_505_Backcrash_stateType_Backcrash_stateType_MIN = Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_NO_EVENT;
constexpr Vcu_report_505_Backcrash_stateType Vcu_report_505_Backcrash_stateType_Backcrash_stateType_MAX = Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_CRASH_EVENT;
constexpr int Vcu_report_505_Backcrash_stateType_Backcrash_stateType_ARRAYSIZE = Vcu_report_505_Backcrash_stateType_Backcrash_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_report_505_Backcrash_stateType_descriptor();
template<typename T>
inline const std::string& Vcu_report_505_Backcrash_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_report_505_Backcrash_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_report_505_Backcrash_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_report_505_Backcrash_stateType_descriptor(), enum_t_value);
}
inline bool Vcu_report_505_Backcrash_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_report_505_Backcrash_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_report_505_Backcrash_stateType>(
    Vcu_report_505_Backcrash_stateType_descriptor(), name, value);
}
enum Vcu_report_505_Aeb_stateType : int {
  Vcu_report_505_Aeb_stateType_AEB_STATE_INACTIVE = 0,
  Vcu_report_505_Aeb_stateType_AEB_STATE_ACTIVE = 1
};
bool Vcu_report_505_Aeb_stateType_IsValid(int value);
constexpr Vcu_report_505_Aeb_stateType Vcu_report_505_Aeb_stateType_Aeb_stateType_MIN = Vcu_report_505_Aeb_stateType_AEB_STATE_INACTIVE;
constexpr Vcu_report_505_Aeb_stateType Vcu_report_505_Aeb_stateType_Aeb_stateType_MAX = Vcu_report_505_Aeb_stateType_AEB_STATE_ACTIVE;
constexpr int Vcu_report_505_Aeb_stateType_Aeb_stateType_ARRAYSIZE = Vcu_report_505_Aeb_stateType_Aeb_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_report_505_Aeb_stateType_descriptor();
template<typename T>
inline const std::string& Vcu_report_505_Aeb_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcu_report_505_Aeb_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcu_report_505_Aeb_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcu_report_505_Aeb_stateType_descriptor(), enum_t_value);
}
inline bool Vcu_report_505_Aeb_stateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcu_report_505_Aeb_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcu_report_505_Aeb_stateType>(
    Vcu_report_505_Aeb_stateType_descriptor(), name, value);
}
// ===================================================================

class Throttle_command_100 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Throttle_command_100) */ {
 public:
  inline Throttle_command_100() : Throttle_command_100(nullptr) {}
  ~Throttle_command_100() override;
  explicit PROTOBUF_CONSTEXPR Throttle_command_100(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Throttle_command_100(const Throttle_command_100& from);
  Throttle_command_100(Throttle_command_100&& from) noexcept
    : Throttle_command_100() {
    *this = ::std::move(from);
  }

  inline Throttle_command_100& operator=(const Throttle_command_100& from) {
    CopyFrom(from);
    return *this;
  }
  inline Throttle_command_100& operator=(Throttle_command_100&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Throttle_command_100& default_instance() {
    return *internal_default_instance();
  }
  static inline const Throttle_command_100* internal_default_instance() {
    return reinterpret_cast<const Throttle_command_100*>(
               &_Throttle_command_100_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Throttle_command_100& a, Throttle_command_100& b) {
    a.Swap(&b);
  }
  inline void Swap(Throttle_command_100* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Throttle_command_100* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Throttle_command_100* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Throttle_command_100>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Throttle_command_100& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Throttle_command_100& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Throttle_command_100* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Throttle_command_100";
  }
  protected:
  explicit Throttle_command_100(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Throttle_command_100_Throttle_en_ctrlType Throttle_en_ctrlType;
  static constexpr Throttle_en_ctrlType THROTTLE_EN_CTRL_DISABLE =
    Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_DISABLE;
  static constexpr Throttle_en_ctrlType THROTTLE_EN_CTRL_ENABLE =
    Throttle_command_100_Throttle_en_ctrlType_THROTTLE_EN_CTRL_ENABLE;
  static inline bool Throttle_en_ctrlType_IsValid(int value) {
    return Throttle_command_100_Throttle_en_ctrlType_IsValid(value);
  }
  static constexpr Throttle_en_ctrlType Throttle_en_ctrlType_MIN =
    Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_MIN;
  static constexpr Throttle_en_ctrlType Throttle_en_ctrlType_MAX =
    Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_MAX;
  static constexpr int Throttle_en_ctrlType_ARRAYSIZE =
    Throttle_command_100_Throttle_en_ctrlType_Throttle_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_en_ctrlType_descriptor() {
    return Throttle_command_100_Throttle_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_en_ctrlType_Name.");
    return Throttle_command_100_Throttle_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Throttle_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_en_ctrlType* value) {
    return Throttle_command_100_Throttle_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThrottleAccFieldNumber = 1,
    kThrottlePedalTargetFieldNumber = 3,
    kChecksum100FieldNumber = 2,
    kThrottleEnCtrlFieldNumber = 4,
  };
  // optional double throttle_acc = 1;
  bool has_throttle_acc() const;
  private:
  bool _internal_has_throttle_acc() const;
  public:
  void clear_throttle_acc();
  double throttle_acc() const;
  void set_throttle_acc(double value);
  private:
  double _internal_throttle_acc() const;
  void _internal_set_throttle_acc(double value);
  public:

  // optional double throttle_pedal_target = 3;
  bool has_throttle_pedal_target() const;
  private:
  bool _internal_has_throttle_pedal_target() const;
  public:
  void clear_throttle_pedal_target();
  double throttle_pedal_target() const;
  void set_throttle_pedal_target(double value);
  private:
  double _internal_throttle_pedal_target() const;
  void _internal_set_throttle_pedal_target(double value);
  public:

  // optional int32 checksum_100 = 2;
  bool has_checksum_100() const;
  private:
  bool _internal_has_checksum_100() const;
  public:
  void clear_checksum_100();
  int32_t checksum_100() const;
  void set_checksum_100(int32_t value);
  private:
  int32_t _internal_checksum_100() const;
  void _internal_set_checksum_100(int32_t value);
  public:

  // optional .apollo.canbus.Throttle_command_100.Throttle_en_ctrlType throttle_en_ctrl = 4;
  bool has_throttle_en_ctrl() const;
  private:
  bool _internal_has_throttle_en_ctrl() const;
  public:
  void clear_throttle_en_ctrl();
  ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType throttle_en_ctrl() const;
  void set_throttle_en_ctrl(::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType value);
  private:
  ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType _internal_throttle_en_ctrl() const;
  void _internal_set_throttle_en_ctrl(::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Throttle_command_100)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double throttle_acc_;
    double throttle_pedal_target_;
    int32_t checksum_100_;
    int throttle_en_ctrl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Brake_command_101 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_command_101) */ {
 public:
  inline Brake_command_101() : Brake_command_101(nullptr) {}
  ~Brake_command_101() override;
  explicit PROTOBUF_CONSTEXPR Brake_command_101(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Brake_command_101(const Brake_command_101& from);
  Brake_command_101(Brake_command_101&& from) noexcept
    : Brake_command_101() {
    *this = ::std::move(from);
  }

  inline Brake_command_101& operator=(const Brake_command_101& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_command_101& operator=(Brake_command_101&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brake_command_101& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brake_command_101* internal_default_instance() {
    return reinterpret_cast<const Brake_command_101*>(
               &_Brake_command_101_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Brake_command_101& a, Brake_command_101& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_command_101* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brake_command_101* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brake_command_101* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brake_command_101>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Brake_command_101& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Brake_command_101& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_command_101* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_command_101";
  }
  protected:
  explicit Brake_command_101(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Brake_command_101_Aeb_en_ctrlType Aeb_en_ctrlType;
  static constexpr Aeb_en_ctrlType AEB_EN_CTRL_DISABLE_AEB =
    Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_DISABLE_AEB;
  static constexpr Aeb_en_ctrlType AEB_EN_CTRL_ENABLE_AEB =
    Brake_command_101_Aeb_en_ctrlType_AEB_EN_CTRL_ENABLE_AEB;
  static inline bool Aeb_en_ctrlType_IsValid(int value) {
    return Brake_command_101_Aeb_en_ctrlType_IsValid(value);
  }
  static constexpr Aeb_en_ctrlType Aeb_en_ctrlType_MIN =
    Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_MIN;
  static constexpr Aeb_en_ctrlType Aeb_en_ctrlType_MAX =
    Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_MAX;
  static constexpr int Aeb_en_ctrlType_ARRAYSIZE =
    Brake_command_101_Aeb_en_ctrlType_Aeb_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Aeb_en_ctrlType_descriptor() {
    return Brake_command_101_Aeb_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Aeb_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Aeb_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Aeb_en_ctrlType_Name.");
    return Brake_command_101_Aeb_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Aeb_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Aeb_en_ctrlType* value) {
    return Brake_command_101_Aeb_en_ctrlType_Parse(name, value);
  }

  typedef Brake_command_101_Brake_en_ctrlType Brake_en_ctrlType;
  static constexpr Brake_en_ctrlType BRAKE_EN_CTRL_DISABLE =
    Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_DISABLE;
  static constexpr Brake_en_ctrlType BRAKE_EN_CTRL_ENABLE =
    Brake_command_101_Brake_en_ctrlType_BRAKE_EN_CTRL_ENABLE;
  static inline bool Brake_en_ctrlType_IsValid(int value) {
    return Brake_command_101_Brake_en_ctrlType_IsValid(value);
  }
  static constexpr Brake_en_ctrlType Brake_en_ctrlType_MIN =
    Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_MIN;
  static constexpr Brake_en_ctrlType Brake_en_ctrlType_MAX =
    Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_MAX;
  static constexpr int Brake_en_ctrlType_ARRAYSIZE =
    Brake_command_101_Brake_en_ctrlType_Brake_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_en_ctrlType_descriptor() {
    return Brake_command_101_Brake_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_en_ctrlType_Name.");
    return Brake_command_101_Brake_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Brake_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_en_ctrlType* value) {
    return Brake_command_101_Brake_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrakeDecFieldNumber = 1,
    kBrakePedalTargetFieldNumber = 3,
    kChecksum101FieldNumber = 2,
    kBrakeEnCtrlFieldNumber = 4,
    kAebEnCtrlFieldNumber = 5,
  };
  // optional double brake_dec = 1;
  bool has_brake_dec() const;
  private:
  bool _internal_has_brake_dec() const;
  public:
  void clear_brake_dec();
  double brake_dec() const;
  void set_brake_dec(double value);
  private:
  double _internal_brake_dec() const;
  void _internal_set_brake_dec(double value);
  public:

  // optional double brake_pedal_target = 3;
  bool has_brake_pedal_target() const;
  private:
  bool _internal_has_brake_pedal_target() const;
  public:
  void clear_brake_pedal_target();
  double brake_pedal_target() const;
  void set_brake_pedal_target(double value);
  private:
  double _internal_brake_pedal_target() const;
  void _internal_set_brake_pedal_target(double value);
  public:

  // optional int32 checksum_101 = 2;
  bool has_checksum_101() const;
  private:
  bool _internal_has_checksum_101() const;
  public:
  void clear_checksum_101();
  int32_t checksum_101() const;
  void set_checksum_101(int32_t value);
  private:
  int32_t _internal_checksum_101() const;
  void _internal_set_checksum_101(int32_t value);
  public:

  // optional .apollo.canbus.Brake_command_101.Brake_en_ctrlType brake_en_ctrl = 4;
  bool has_brake_en_ctrl() const;
  private:
  bool _internal_has_brake_en_ctrl() const;
  public:
  void clear_brake_en_ctrl();
  ::apollo::canbus::Brake_command_101_Brake_en_ctrlType brake_en_ctrl() const;
  void set_brake_en_ctrl(::apollo::canbus::Brake_command_101_Brake_en_ctrlType value);
  private:
  ::apollo::canbus::Brake_command_101_Brake_en_ctrlType _internal_brake_en_ctrl() const;
  void _internal_set_brake_en_ctrl(::apollo::canbus::Brake_command_101_Brake_en_ctrlType value);
  public:

  // optional .apollo.canbus.Brake_command_101.Aeb_en_ctrlType aeb_en_ctrl = 5;
  bool has_aeb_en_ctrl() const;
  private:
  bool _internal_has_aeb_en_ctrl() const;
  public:
  void clear_aeb_en_ctrl();
  ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType aeb_en_ctrl() const;
  void set_aeb_en_ctrl(::apollo::canbus::Brake_command_101_Aeb_en_ctrlType value);
  private:
  ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType _internal_aeb_en_ctrl() const;
  void _internal_set_aeb_en_ctrl(::apollo::canbus::Brake_command_101_Aeb_en_ctrlType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_command_101)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double brake_dec_;
    double brake_pedal_target_;
    int32_t checksum_101_;
    int brake_en_ctrl_;
    int aeb_en_ctrl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Steering_command_102 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_command_102) */ {
 public:
  inline Steering_command_102() : Steering_command_102(nullptr) {}
  ~Steering_command_102() override;
  explicit PROTOBUF_CONSTEXPR Steering_command_102(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Steering_command_102(const Steering_command_102& from);
  Steering_command_102(Steering_command_102&& from) noexcept
    : Steering_command_102() {
    *this = ::std::move(from);
  }

  inline Steering_command_102& operator=(const Steering_command_102& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_command_102& operator=(Steering_command_102&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Steering_command_102& default_instance() {
    return *internal_default_instance();
  }
  static inline const Steering_command_102* internal_default_instance() {
    return reinterpret_cast<const Steering_command_102*>(
               &_Steering_command_102_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Steering_command_102& a, Steering_command_102& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_command_102* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Steering_command_102* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Steering_command_102* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Steering_command_102>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Steering_command_102& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Steering_command_102& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_command_102* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_command_102";
  }
  protected:
  explicit Steering_command_102(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Steering_command_102_Steer_en_ctrlType Steer_en_ctrlType;
  static constexpr Steer_en_ctrlType STEER_EN_CTRL_DISABLE =
    Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_DISABLE;
  static constexpr Steer_en_ctrlType STEER_EN_CTRL_ENABLE =
    Steering_command_102_Steer_en_ctrlType_STEER_EN_CTRL_ENABLE;
  static inline bool Steer_en_ctrlType_IsValid(int value) {
    return Steering_command_102_Steer_en_ctrlType_IsValid(value);
  }
  static constexpr Steer_en_ctrlType Steer_en_ctrlType_MIN =
    Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_MIN;
  static constexpr Steer_en_ctrlType Steer_en_ctrlType_MAX =
    Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_MAX;
  static constexpr int Steer_en_ctrlType_ARRAYSIZE =
    Steering_command_102_Steer_en_ctrlType_Steer_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_en_ctrlType_descriptor() {
    return Steering_command_102_Steer_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_en_ctrlType_Name.");
    return Steering_command_102_Steer_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Steer_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_en_ctrlType* value) {
    return Steering_command_102_Steer_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteerEnCtrlFieldNumber = 1,
    kSteerAngleTargetFieldNumber = 2,
    kSteerAngleSpdFieldNumber = 3,
    kChecksum102FieldNumber = 4,
  };
  // optional .apollo.canbus.Steering_command_102.Steer_en_ctrlType steer_en_ctrl = 1;
  bool has_steer_en_ctrl() const;
  private:
  bool _internal_has_steer_en_ctrl() const;
  public:
  void clear_steer_en_ctrl();
  ::apollo::canbus::Steering_command_102_Steer_en_ctrlType steer_en_ctrl() const;
  void set_steer_en_ctrl(::apollo::canbus::Steering_command_102_Steer_en_ctrlType value);
  private:
  ::apollo::canbus::Steering_command_102_Steer_en_ctrlType _internal_steer_en_ctrl() const;
  void _internal_set_steer_en_ctrl(::apollo::canbus::Steering_command_102_Steer_en_ctrlType value);
  public:

  // optional int32 steer_angle_target = 2;
  bool has_steer_angle_target() const;
  private:
  bool _internal_has_steer_angle_target() const;
  public:
  void clear_steer_angle_target();
  int32_t steer_angle_target() const;
  void set_steer_angle_target(int32_t value);
  private:
  int32_t _internal_steer_angle_target() const;
  void _internal_set_steer_angle_target(int32_t value);
  public:

  // optional int32 steer_angle_spd = 3;
  bool has_steer_angle_spd() const;
  private:
  bool _internal_has_steer_angle_spd() const;
  public:
  void clear_steer_angle_spd();
  int32_t steer_angle_spd() const;
  void set_steer_angle_spd(int32_t value);
  private:
  int32_t _internal_steer_angle_spd() const;
  void _internal_set_steer_angle_spd(int32_t value);
  public:

  // optional int32 checksum_102 = 4;
  bool has_checksum_102() const;
  private:
  bool _internal_has_checksum_102() const;
  public:
  void clear_checksum_102();
  int32_t checksum_102() const;
  void set_checksum_102(int32_t value);
  private:
  int32_t _internal_checksum_102() const;
  void _internal_set_checksum_102(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_command_102)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int steer_en_ctrl_;
    int32_t steer_angle_target_;
    int32_t steer_angle_spd_;
    int32_t checksum_102_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Gear_command_103 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Gear_command_103) */ {
 public:
  inline Gear_command_103() : Gear_command_103(nullptr) {}
  ~Gear_command_103() override;
  explicit PROTOBUF_CONSTEXPR Gear_command_103(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gear_command_103(const Gear_command_103& from);
  Gear_command_103(Gear_command_103&& from) noexcept
    : Gear_command_103() {
    *this = ::std::move(from);
  }

  inline Gear_command_103& operator=(const Gear_command_103& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gear_command_103& operator=(Gear_command_103&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gear_command_103& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gear_command_103* internal_default_instance() {
    return reinterpret_cast<const Gear_command_103*>(
               &_Gear_command_103_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gear_command_103& a, Gear_command_103& b) {
    a.Swap(&b);
  }
  inline void Swap(Gear_command_103* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gear_command_103* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gear_command_103* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gear_command_103>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gear_command_103& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gear_command_103& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gear_command_103* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Gear_command_103";
  }
  protected:
  explicit Gear_command_103(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gear_command_103_Gear_targetType Gear_targetType;
  static constexpr Gear_targetType GEAR_TARGET_INVALID =
    Gear_command_103_Gear_targetType_GEAR_TARGET_INVALID;
  static constexpr Gear_targetType GEAR_TARGET_PARK =
    Gear_command_103_Gear_targetType_GEAR_TARGET_PARK;
  static constexpr Gear_targetType GEAR_TARGET_REVERSE =
    Gear_command_103_Gear_targetType_GEAR_TARGET_REVERSE;
  static constexpr Gear_targetType GEAR_TARGET_NEUTRAL =
    Gear_command_103_Gear_targetType_GEAR_TARGET_NEUTRAL;
  static constexpr Gear_targetType GEAR_TARGET_DRIVE =
    Gear_command_103_Gear_targetType_GEAR_TARGET_DRIVE;
  static inline bool Gear_targetType_IsValid(int value) {
    return Gear_command_103_Gear_targetType_IsValid(value);
  }
  static constexpr Gear_targetType Gear_targetType_MIN =
    Gear_command_103_Gear_targetType_Gear_targetType_MIN;
  static constexpr Gear_targetType Gear_targetType_MAX =
    Gear_command_103_Gear_targetType_Gear_targetType_MAX;
  static constexpr int Gear_targetType_ARRAYSIZE =
    Gear_command_103_Gear_targetType_Gear_targetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_targetType_descriptor() {
    return Gear_command_103_Gear_targetType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_targetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_targetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_targetType_Name.");
    return Gear_command_103_Gear_targetType_Name(enum_t_value);
  }
  static inline bool Gear_targetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_targetType* value) {
    return Gear_command_103_Gear_targetType_Parse(name, value);
  }

  typedef Gear_command_103_Gear_en_ctrlType Gear_en_ctrlType;
  static constexpr Gear_en_ctrlType GEAR_EN_CTRL_DISABLE =
    Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_DISABLE;
  static constexpr Gear_en_ctrlType GEAR_EN_CTRL_ENABLE =
    Gear_command_103_Gear_en_ctrlType_GEAR_EN_CTRL_ENABLE;
  static inline bool Gear_en_ctrlType_IsValid(int value) {
    return Gear_command_103_Gear_en_ctrlType_IsValid(value);
  }
  static constexpr Gear_en_ctrlType Gear_en_ctrlType_MIN =
    Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_MIN;
  static constexpr Gear_en_ctrlType Gear_en_ctrlType_MAX =
    Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_MAX;
  static constexpr int Gear_en_ctrlType_ARRAYSIZE =
    Gear_command_103_Gear_en_ctrlType_Gear_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_en_ctrlType_descriptor() {
    return Gear_command_103_Gear_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_en_ctrlType_Name.");
    return Gear_command_103_Gear_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Gear_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_en_ctrlType* value) {
    return Gear_command_103_Gear_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGearTargetFieldNumber = 1,
    kGearEnCtrlFieldNumber = 2,
    kChecksum103FieldNumber = 3,
  };
  // optional .apollo.canbus.Gear_command_103.Gear_targetType gear_target = 1;
  bool has_gear_target() const;
  private:
  bool _internal_has_gear_target() const;
  public:
  void clear_gear_target();
  ::apollo::canbus::Gear_command_103_Gear_targetType gear_target() const;
  void set_gear_target(::apollo::canbus::Gear_command_103_Gear_targetType value);
  private:
  ::apollo::canbus::Gear_command_103_Gear_targetType _internal_gear_target() const;
  void _internal_set_gear_target(::apollo::canbus::Gear_command_103_Gear_targetType value);
  public:

  // optional .apollo.canbus.Gear_command_103.Gear_en_ctrlType gear_en_ctrl = 2;
  bool has_gear_en_ctrl() const;
  private:
  bool _internal_has_gear_en_ctrl() const;
  public:
  void clear_gear_en_ctrl();
  ::apollo::canbus::Gear_command_103_Gear_en_ctrlType gear_en_ctrl() const;
  void set_gear_en_ctrl(::apollo::canbus::Gear_command_103_Gear_en_ctrlType value);
  private:
  ::apollo::canbus::Gear_command_103_Gear_en_ctrlType _internal_gear_en_ctrl() const;
  void _internal_set_gear_en_ctrl(::apollo::canbus::Gear_command_103_Gear_en_ctrlType value);
  public:

  // optional int32 checksum_103 = 3;
  bool has_checksum_103() const;
  private:
  bool _internal_has_checksum_103() const;
  public:
  void clear_checksum_103();
  int32_t checksum_103() const;
  void set_checksum_103(int32_t value);
  private:
  int32_t _internal_checksum_103() const;
  void _internal_set_checksum_103(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Gear_command_103)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int gear_target_;
    int gear_en_ctrl_;
    int32_t checksum_103_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Park_command_104 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Park_command_104) */ {
 public:
  inline Park_command_104() : Park_command_104(nullptr) {}
  ~Park_command_104() override;
  explicit PROTOBUF_CONSTEXPR Park_command_104(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Park_command_104(const Park_command_104& from);
  Park_command_104(Park_command_104&& from) noexcept
    : Park_command_104() {
    *this = ::std::move(from);
  }

  inline Park_command_104& operator=(const Park_command_104& from) {
    CopyFrom(from);
    return *this;
  }
  inline Park_command_104& operator=(Park_command_104&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Park_command_104& default_instance() {
    return *internal_default_instance();
  }
  static inline const Park_command_104* internal_default_instance() {
    return reinterpret_cast<const Park_command_104*>(
               &_Park_command_104_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Park_command_104& a, Park_command_104& b) {
    a.Swap(&b);
  }
  inline void Swap(Park_command_104* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Park_command_104* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Park_command_104* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Park_command_104>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Park_command_104& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Park_command_104& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Park_command_104* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Park_command_104";
  }
  protected:
  explicit Park_command_104(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Park_command_104_Park_targetType Park_targetType;
  static constexpr Park_targetType PARK_TARGET_RELEASE =
    Park_command_104_Park_targetType_PARK_TARGET_RELEASE;
  static constexpr Park_targetType PARK_TARGET_PARKING_TRIGGER =
    Park_command_104_Park_targetType_PARK_TARGET_PARKING_TRIGGER;
  static inline bool Park_targetType_IsValid(int value) {
    return Park_command_104_Park_targetType_IsValid(value);
  }
  static constexpr Park_targetType Park_targetType_MIN =
    Park_command_104_Park_targetType_Park_targetType_MIN;
  static constexpr Park_targetType Park_targetType_MAX =
    Park_command_104_Park_targetType_Park_targetType_MAX;
  static constexpr int Park_targetType_ARRAYSIZE =
    Park_command_104_Park_targetType_Park_targetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Park_targetType_descriptor() {
    return Park_command_104_Park_targetType_descriptor();
  }
  template<typename T>
  static inline const std::string& Park_targetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Park_targetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Park_targetType_Name.");
    return Park_command_104_Park_targetType_Name(enum_t_value);
  }
  static inline bool Park_targetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Park_targetType* value) {
    return Park_command_104_Park_targetType_Parse(name, value);
  }

  typedef Park_command_104_Park_en_ctrlType Park_en_ctrlType;
  static constexpr Park_en_ctrlType PARK_EN_CTRL_DISABLE =
    Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_DISABLE;
  static constexpr Park_en_ctrlType PARK_EN_CTRL_ENABLE =
    Park_command_104_Park_en_ctrlType_PARK_EN_CTRL_ENABLE;
  static inline bool Park_en_ctrlType_IsValid(int value) {
    return Park_command_104_Park_en_ctrlType_IsValid(value);
  }
  static constexpr Park_en_ctrlType Park_en_ctrlType_MIN =
    Park_command_104_Park_en_ctrlType_Park_en_ctrlType_MIN;
  static constexpr Park_en_ctrlType Park_en_ctrlType_MAX =
    Park_command_104_Park_en_ctrlType_Park_en_ctrlType_MAX;
  static constexpr int Park_en_ctrlType_ARRAYSIZE =
    Park_command_104_Park_en_ctrlType_Park_en_ctrlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Park_en_ctrlType_descriptor() {
    return Park_command_104_Park_en_ctrlType_descriptor();
  }
  template<typename T>
  static inline const std::string& Park_en_ctrlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Park_en_ctrlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Park_en_ctrlType_Name.");
    return Park_command_104_Park_en_ctrlType_Name(enum_t_value);
  }
  static inline bool Park_en_ctrlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Park_en_ctrlType* value) {
    return Park_command_104_Park_en_ctrlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChecksum104FieldNumber = 1,
    kParkTargetFieldNumber = 2,
    kParkEnCtrlFieldNumber = 3,
  };
  // optional int32 checksum_104 = 1;
  bool has_checksum_104() const;
  private:
  bool _internal_has_checksum_104() const;
  public:
  void clear_checksum_104();
  int32_t checksum_104() const;
  void set_checksum_104(int32_t value);
  private:
  int32_t _internal_checksum_104() const;
  void _internal_set_checksum_104(int32_t value);
  public:

  // optional .apollo.canbus.Park_command_104.Park_targetType park_target = 2;
  bool has_park_target() const;
  private:
  bool _internal_has_park_target() const;
  public:
  void clear_park_target();
  ::apollo::canbus::Park_command_104_Park_targetType park_target() const;
  void set_park_target(::apollo::canbus::Park_command_104_Park_targetType value);
  private:
  ::apollo::canbus::Park_command_104_Park_targetType _internal_park_target() const;
  void _internal_set_park_target(::apollo::canbus::Park_command_104_Park_targetType value);
  public:

  // optional .apollo.canbus.Park_command_104.Park_en_ctrlType park_en_ctrl = 3;
  bool has_park_en_ctrl() const;
  private:
  bool _internal_has_park_en_ctrl() const;
  public:
  void clear_park_en_ctrl();
  ::apollo::canbus::Park_command_104_Park_en_ctrlType park_en_ctrl() const;
  void set_park_en_ctrl(::apollo::canbus::Park_command_104_Park_en_ctrlType value);
  private:
  ::apollo::canbus::Park_command_104_Park_en_ctrlType _internal_park_en_ctrl() const;
  void _internal_set_park_en_ctrl(::apollo::canbus::Park_command_104_Park_en_ctrlType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Park_command_104)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t checksum_104_;
    int park_target_;
    int park_en_ctrl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Throttle_report_500 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Throttle_report_500) */ {
 public:
  inline Throttle_report_500() : Throttle_report_500(nullptr) {}
  ~Throttle_report_500() override;
  explicit PROTOBUF_CONSTEXPR Throttle_report_500(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Throttle_report_500(const Throttle_report_500& from);
  Throttle_report_500(Throttle_report_500&& from) noexcept
    : Throttle_report_500() {
    *this = ::std::move(from);
  }

  inline Throttle_report_500& operator=(const Throttle_report_500& from) {
    CopyFrom(from);
    return *this;
  }
  inline Throttle_report_500& operator=(Throttle_report_500&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Throttle_report_500& default_instance() {
    return *internal_default_instance();
  }
  static inline const Throttle_report_500* internal_default_instance() {
    return reinterpret_cast<const Throttle_report_500*>(
               &_Throttle_report_500_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Throttle_report_500& a, Throttle_report_500& b) {
    a.Swap(&b);
  }
  inline void Swap(Throttle_report_500* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Throttle_report_500* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Throttle_report_500* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Throttle_report_500>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Throttle_report_500& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Throttle_report_500& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Throttle_report_500* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Throttle_report_500";
  }
  protected:
  explicit Throttle_report_500(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Throttle_report_500_Throttle_flt2Type Throttle_flt2Type;
  static constexpr Throttle_flt2Type THROTTLE_FLT2_NO_FAULT =
    Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_NO_FAULT;
  static constexpr Throttle_flt2Type THROTTLE_FLT2_DRIVE_SYSTEM_COMUNICATION_FAULT =
    Throttle_report_500_Throttle_flt2Type_THROTTLE_FLT2_DRIVE_SYSTEM_COMUNICATION_FAULT;
  static inline bool Throttle_flt2Type_IsValid(int value) {
    return Throttle_report_500_Throttle_flt2Type_IsValid(value);
  }
  static constexpr Throttle_flt2Type Throttle_flt2Type_MIN =
    Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_MIN;
  static constexpr Throttle_flt2Type Throttle_flt2Type_MAX =
    Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_MAX;
  static constexpr int Throttle_flt2Type_ARRAYSIZE =
    Throttle_report_500_Throttle_flt2Type_Throttle_flt2Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_flt2Type_descriptor() {
    return Throttle_report_500_Throttle_flt2Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_flt2Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_flt2Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_flt2Type_Name.");
    return Throttle_report_500_Throttle_flt2Type_Name(enum_t_value);
  }
  static inline bool Throttle_flt2Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_flt2Type* value) {
    return Throttle_report_500_Throttle_flt2Type_Parse(name, value);
  }

  typedef Throttle_report_500_Throttle_flt1Type Throttle_flt1Type;
  static constexpr Throttle_flt1Type THROTTLE_FLT1_NO_FAULT =
    Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_NO_FAULT;
  static constexpr Throttle_flt1Type THROTTLE_FLT1_DRIVE_SYSTEM_HARDWARE_FAULT =
    Throttle_report_500_Throttle_flt1Type_THROTTLE_FLT1_DRIVE_SYSTEM_HARDWARE_FAULT;
  static inline bool Throttle_flt1Type_IsValid(int value) {
    return Throttle_report_500_Throttle_flt1Type_IsValid(value);
  }
  static constexpr Throttle_flt1Type Throttle_flt1Type_MIN =
    Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_MIN;
  static constexpr Throttle_flt1Type Throttle_flt1Type_MAX =
    Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_MAX;
  static constexpr int Throttle_flt1Type_ARRAYSIZE =
    Throttle_report_500_Throttle_flt1Type_Throttle_flt1Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_flt1Type_descriptor() {
    return Throttle_report_500_Throttle_flt1Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_flt1Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_flt1Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_flt1Type_Name.");
    return Throttle_report_500_Throttle_flt1Type_Name(enum_t_value);
  }
  static inline bool Throttle_flt1Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_flt1Type* value) {
    return Throttle_report_500_Throttle_flt1Type_Parse(name, value);
  }

  typedef Throttle_report_500_Throttle_en_stateType Throttle_en_stateType;
  static constexpr Throttle_en_stateType THROTTLE_EN_STATE_MANUAL =
    Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_MANUAL;
  static constexpr Throttle_en_stateType THROTTLE_EN_STATE_AUTO =
    Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_AUTO;
  static constexpr Throttle_en_stateType THROTTLE_EN_STATE_TAKEOVER =
    Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_TAKEOVER;
  static constexpr Throttle_en_stateType THROTTLE_EN_STATE_STANDBY =
    Throttle_report_500_Throttle_en_stateType_THROTTLE_EN_STATE_STANDBY;
  static inline bool Throttle_en_stateType_IsValid(int value) {
    return Throttle_report_500_Throttle_en_stateType_IsValid(value);
  }
  static constexpr Throttle_en_stateType Throttle_en_stateType_MIN =
    Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_MIN;
  static constexpr Throttle_en_stateType Throttle_en_stateType_MAX =
    Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_MAX;
  static constexpr int Throttle_en_stateType_ARRAYSIZE =
    Throttle_report_500_Throttle_en_stateType_Throttle_en_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Throttle_en_stateType_descriptor() {
    return Throttle_report_500_Throttle_en_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Throttle_en_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Throttle_en_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Throttle_en_stateType_Name.");
    return Throttle_report_500_Throttle_en_stateType_Name(enum_t_value);
  }
  static inline bool Throttle_en_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Throttle_en_stateType* value) {
    return Throttle_report_500_Throttle_en_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThrottlePedalActualFieldNumber = 1,
    kThrottleFlt2FieldNumber = 2,
    kThrottleFlt1FieldNumber = 3,
    kThrottleEnStateFieldNumber = 4,
  };
  // optional double throttle_pedal_actual = 1;
  bool has_throttle_pedal_actual() const;
  private:
  bool _internal_has_throttle_pedal_actual() const;
  public:
  void clear_throttle_pedal_actual();
  double throttle_pedal_actual() const;
  void set_throttle_pedal_actual(double value);
  private:
  double _internal_throttle_pedal_actual() const;
  void _internal_set_throttle_pedal_actual(double value);
  public:

  // optional .apollo.canbus.Throttle_report_500.Throttle_flt2Type throttle_flt2 = 2;
  bool has_throttle_flt2() const;
  private:
  bool _internal_has_throttle_flt2() const;
  public:
  void clear_throttle_flt2();
  ::apollo::canbus::Throttle_report_500_Throttle_flt2Type throttle_flt2() const;
  void set_throttle_flt2(::apollo::canbus::Throttle_report_500_Throttle_flt2Type value);
  private:
  ::apollo::canbus::Throttle_report_500_Throttle_flt2Type _internal_throttle_flt2() const;
  void _internal_set_throttle_flt2(::apollo::canbus::Throttle_report_500_Throttle_flt2Type value);
  public:

  // optional .apollo.canbus.Throttle_report_500.Throttle_flt1Type throttle_flt1 = 3;
  bool has_throttle_flt1() const;
  private:
  bool _internal_has_throttle_flt1() const;
  public:
  void clear_throttle_flt1();
  ::apollo::canbus::Throttle_report_500_Throttle_flt1Type throttle_flt1() const;
  void set_throttle_flt1(::apollo::canbus::Throttle_report_500_Throttle_flt1Type value);
  private:
  ::apollo::canbus::Throttle_report_500_Throttle_flt1Type _internal_throttle_flt1() const;
  void _internal_set_throttle_flt1(::apollo::canbus::Throttle_report_500_Throttle_flt1Type value);
  public:

  // optional .apollo.canbus.Throttle_report_500.Throttle_en_stateType throttle_en_state = 4;
  bool has_throttle_en_state() const;
  private:
  bool _internal_has_throttle_en_state() const;
  public:
  void clear_throttle_en_state();
  ::apollo::canbus::Throttle_report_500_Throttle_en_stateType throttle_en_state() const;
  void set_throttle_en_state(::apollo::canbus::Throttle_report_500_Throttle_en_stateType value);
  private:
  ::apollo::canbus::Throttle_report_500_Throttle_en_stateType _internal_throttle_en_state() const;
  void _internal_set_throttle_en_state(::apollo::canbus::Throttle_report_500_Throttle_en_stateType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Throttle_report_500)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double throttle_pedal_actual_;
    int throttle_flt2_;
    int throttle_flt1_;
    int throttle_en_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Brake_report_501 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_report_501) */ {
 public:
  inline Brake_report_501() : Brake_report_501(nullptr) {}
  ~Brake_report_501() override;
  explicit PROTOBUF_CONSTEXPR Brake_report_501(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Brake_report_501(const Brake_report_501& from);
  Brake_report_501(Brake_report_501&& from) noexcept
    : Brake_report_501() {
    *this = ::std::move(from);
  }

  inline Brake_report_501& operator=(const Brake_report_501& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_report_501& operator=(Brake_report_501&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brake_report_501& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brake_report_501* internal_default_instance() {
    return reinterpret_cast<const Brake_report_501*>(
               &_Brake_report_501_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Brake_report_501& a, Brake_report_501& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_report_501* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brake_report_501* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brake_report_501* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brake_report_501>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Brake_report_501& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Brake_report_501& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_report_501* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_report_501";
  }
  protected:
  explicit Brake_report_501(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Brake_report_501_Brake_flt2Type Brake_flt2Type;
  static constexpr Brake_flt2Type BRAKE_FLT2_NO_FAULT =
    Brake_report_501_Brake_flt2Type_BRAKE_FLT2_NO_FAULT;
  static constexpr Brake_flt2Type BRAKE_FLT2_BRAKE_SYSTEM_COMUNICATION_FAULT =
    Brake_report_501_Brake_flt2Type_BRAKE_FLT2_BRAKE_SYSTEM_COMUNICATION_FAULT;
  static inline bool Brake_flt2Type_IsValid(int value) {
    return Brake_report_501_Brake_flt2Type_IsValid(value);
  }
  static constexpr Brake_flt2Type Brake_flt2Type_MIN =
    Brake_report_501_Brake_flt2Type_Brake_flt2Type_MIN;
  static constexpr Brake_flt2Type Brake_flt2Type_MAX =
    Brake_report_501_Brake_flt2Type_Brake_flt2Type_MAX;
  static constexpr int Brake_flt2Type_ARRAYSIZE =
    Brake_report_501_Brake_flt2Type_Brake_flt2Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_flt2Type_descriptor() {
    return Brake_report_501_Brake_flt2Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_flt2Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_flt2Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_flt2Type_Name.");
    return Brake_report_501_Brake_flt2Type_Name(enum_t_value);
  }
  static inline bool Brake_flt2Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_flt2Type* value) {
    return Brake_report_501_Brake_flt2Type_Parse(name, value);
  }

  typedef Brake_report_501_Brake_flt1Type Brake_flt1Type;
  static constexpr Brake_flt1Type BRAKE_FLT1_NO_FAULT =
    Brake_report_501_Brake_flt1Type_BRAKE_FLT1_NO_FAULT;
  static constexpr Brake_flt1Type BRAKE_FLT1_BRAKE_SYSTEM_HARDWARE_FAULT =
    Brake_report_501_Brake_flt1Type_BRAKE_FLT1_BRAKE_SYSTEM_HARDWARE_FAULT;
  static inline bool Brake_flt1Type_IsValid(int value) {
    return Brake_report_501_Brake_flt1Type_IsValid(value);
  }
  static constexpr Brake_flt1Type Brake_flt1Type_MIN =
    Brake_report_501_Brake_flt1Type_Brake_flt1Type_MIN;
  static constexpr Brake_flt1Type Brake_flt1Type_MAX =
    Brake_report_501_Brake_flt1Type_Brake_flt1Type_MAX;
  static constexpr int Brake_flt1Type_ARRAYSIZE =
    Brake_report_501_Brake_flt1Type_Brake_flt1Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_flt1Type_descriptor() {
    return Brake_report_501_Brake_flt1Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_flt1Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_flt1Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_flt1Type_Name.");
    return Brake_report_501_Brake_flt1Type_Name(enum_t_value);
  }
  static inline bool Brake_flt1Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_flt1Type* value) {
    return Brake_report_501_Brake_flt1Type_Parse(name, value);
  }

  typedef Brake_report_501_Brake_en_stateType Brake_en_stateType;
  static constexpr Brake_en_stateType BRAKE_EN_STATE_MANUAL =
    Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_MANUAL;
  static constexpr Brake_en_stateType BRAKE_EN_STATE_AUTO =
    Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_AUTO;
  static constexpr Brake_en_stateType BRAKE_EN_STATE_TAKEOVER =
    Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_TAKEOVER;
  static constexpr Brake_en_stateType BRAKE_EN_STATE_STANDBY =
    Brake_report_501_Brake_en_stateType_BRAKE_EN_STATE_STANDBY;
  static inline bool Brake_en_stateType_IsValid(int value) {
    return Brake_report_501_Brake_en_stateType_IsValid(value);
  }
  static constexpr Brake_en_stateType Brake_en_stateType_MIN =
    Brake_report_501_Brake_en_stateType_Brake_en_stateType_MIN;
  static constexpr Brake_en_stateType Brake_en_stateType_MAX =
    Brake_report_501_Brake_en_stateType_Brake_en_stateType_MAX;
  static constexpr int Brake_en_stateType_ARRAYSIZE =
    Brake_report_501_Brake_en_stateType_Brake_en_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brake_en_stateType_descriptor() {
    return Brake_report_501_Brake_en_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brake_en_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brake_en_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brake_en_stateType_Name.");
    return Brake_report_501_Brake_en_stateType_Name(enum_t_value);
  }
  static inline bool Brake_en_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Brake_en_stateType* value) {
    return Brake_report_501_Brake_en_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrakePedalActualFieldNumber = 1,
    kBrakeFlt2FieldNumber = 2,
    kBrakeFlt1FieldNumber = 3,
    kBrakeEnStateFieldNumber = 4,
  };
  // optional double brake_pedal_actual = 1;
  bool has_brake_pedal_actual() const;
  private:
  bool _internal_has_brake_pedal_actual() const;
  public:
  void clear_brake_pedal_actual();
  double brake_pedal_actual() const;
  void set_brake_pedal_actual(double value);
  private:
  double _internal_brake_pedal_actual() const;
  void _internal_set_brake_pedal_actual(double value);
  public:

  // optional .apollo.canbus.Brake_report_501.Brake_flt2Type brake_flt2 = 2;
  bool has_brake_flt2() const;
  private:
  bool _internal_has_brake_flt2() const;
  public:
  void clear_brake_flt2();
  ::apollo::canbus::Brake_report_501_Brake_flt2Type brake_flt2() const;
  void set_brake_flt2(::apollo::canbus::Brake_report_501_Brake_flt2Type value);
  private:
  ::apollo::canbus::Brake_report_501_Brake_flt2Type _internal_brake_flt2() const;
  void _internal_set_brake_flt2(::apollo::canbus::Brake_report_501_Brake_flt2Type value);
  public:

  // optional .apollo.canbus.Brake_report_501.Brake_flt1Type brake_flt1 = 3;
  bool has_brake_flt1() const;
  private:
  bool _internal_has_brake_flt1() const;
  public:
  void clear_brake_flt1();
  ::apollo::canbus::Brake_report_501_Brake_flt1Type brake_flt1() const;
  void set_brake_flt1(::apollo::canbus::Brake_report_501_Brake_flt1Type value);
  private:
  ::apollo::canbus::Brake_report_501_Brake_flt1Type _internal_brake_flt1() const;
  void _internal_set_brake_flt1(::apollo::canbus::Brake_report_501_Brake_flt1Type value);
  public:

  // optional .apollo.canbus.Brake_report_501.Brake_en_stateType brake_en_state = 4;
  bool has_brake_en_state() const;
  private:
  bool _internal_has_brake_en_state() const;
  public:
  void clear_brake_en_state();
  ::apollo::canbus::Brake_report_501_Brake_en_stateType brake_en_state() const;
  void set_brake_en_state(::apollo::canbus::Brake_report_501_Brake_en_stateType value);
  private:
  ::apollo::canbus::Brake_report_501_Brake_en_stateType _internal_brake_en_state() const;
  void _internal_set_brake_en_state(::apollo::canbus::Brake_report_501_Brake_en_stateType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_report_501)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double brake_pedal_actual_;
    int brake_flt2_;
    int brake_flt1_;
    int brake_en_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Steering_report_502 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_report_502) */ {
 public:
  inline Steering_report_502() : Steering_report_502(nullptr) {}
  ~Steering_report_502() override;
  explicit PROTOBUF_CONSTEXPR Steering_report_502(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Steering_report_502(const Steering_report_502& from);
  Steering_report_502(Steering_report_502&& from) noexcept
    : Steering_report_502() {
    *this = ::std::move(from);
  }

  inline Steering_report_502& operator=(const Steering_report_502& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_report_502& operator=(Steering_report_502&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Steering_report_502& default_instance() {
    return *internal_default_instance();
  }
  static inline const Steering_report_502* internal_default_instance() {
    return reinterpret_cast<const Steering_report_502*>(
               &_Steering_report_502_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Steering_report_502& a, Steering_report_502& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_report_502* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Steering_report_502* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Steering_report_502* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Steering_report_502>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Steering_report_502& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Steering_report_502& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_report_502* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_report_502";
  }
  protected:
  explicit Steering_report_502(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Steering_report_502_Steer_flt2Type Steer_flt2Type;
  static constexpr Steer_flt2Type STEER_FLT2_NO_FAULT =
    Steering_report_502_Steer_flt2Type_STEER_FLT2_NO_FAULT;
  static constexpr Steer_flt2Type STEER_FLT2_STEER_SYSTEM_COMUNICATION_FAULT =
    Steering_report_502_Steer_flt2Type_STEER_FLT2_STEER_SYSTEM_COMUNICATION_FAULT;
  static inline bool Steer_flt2Type_IsValid(int value) {
    return Steering_report_502_Steer_flt2Type_IsValid(value);
  }
  static constexpr Steer_flt2Type Steer_flt2Type_MIN =
    Steering_report_502_Steer_flt2Type_Steer_flt2Type_MIN;
  static constexpr Steer_flt2Type Steer_flt2Type_MAX =
    Steering_report_502_Steer_flt2Type_Steer_flt2Type_MAX;
  static constexpr int Steer_flt2Type_ARRAYSIZE =
    Steering_report_502_Steer_flt2Type_Steer_flt2Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_flt2Type_descriptor() {
    return Steering_report_502_Steer_flt2Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_flt2Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_flt2Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_flt2Type_Name.");
    return Steering_report_502_Steer_flt2Type_Name(enum_t_value);
  }
  static inline bool Steer_flt2Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_flt2Type* value) {
    return Steering_report_502_Steer_flt2Type_Parse(name, value);
  }

  typedef Steering_report_502_Steer_flt1Type Steer_flt1Type;
  static constexpr Steer_flt1Type STEER_FLT1_NO_FAULT =
    Steering_report_502_Steer_flt1Type_STEER_FLT1_NO_FAULT;
  static constexpr Steer_flt1Type STEER_FLT1_STEER_SYSTEM_HARDWARE_FAULT =
    Steering_report_502_Steer_flt1Type_STEER_FLT1_STEER_SYSTEM_HARDWARE_FAULT;
  static inline bool Steer_flt1Type_IsValid(int value) {
    return Steering_report_502_Steer_flt1Type_IsValid(value);
  }
  static constexpr Steer_flt1Type Steer_flt1Type_MIN =
    Steering_report_502_Steer_flt1Type_Steer_flt1Type_MIN;
  static constexpr Steer_flt1Type Steer_flt1Type_MAX =
    Steering_report_502_Steer_flt1Type_Steer_flt1Type_MAX;
  static constexpr int Steer_flt1Type_ARRAYSIZE =
    Steering_report_502_Steer_flt1Type_Steer_flt1Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_flt1Type_descriptor() {
    return Steering_report_502_Steer_flt1Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_flt1Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_flt1Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_flt1Type_Name.");
    return Steering_report_502_Steer_flt1Type_Name(enum_t_value);
  }
  static inline bool Steer_flt1Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_flt1Type* value) {
    return Steering_report_502_Steer_flt1Type_Parse(name, value);
  }

  typedef Steering_report_502_Steer_en_stateType Steer_en_stateType;
  static constexpr Steer_en_stateType STEER_EN_STATE_MANUAL =
    Steering_report_502_Steer_en_stateType_STEER_EN_STATE_MANUAL;
  static constexpr Steer_en_stateType STEER_EN_STATE_AUTO =
    Steering_report_502_Steer_en_stateType_STEER_EN_STATE_AUTO;
  static constexpr Steer_en_stateType STEER_EN_STATE_TAKEOVER =
    Steering_report_502_Steer_en_stateType_STEER_EN_STATE_TAKEOVER;
  static constexpr Steer_en_stateType STEER_EN_STATE_STANDBY =
    Steering_report_502_Steer_en_stateType_STEER_EN_STATE_STANDBY;
  static inline bool Steer_en_stateType_IsValid(int value) {
    return Steering_report_502_Steer_en_stateType_IsValid(value);
  }
  static constexpr Steer_en_stateType Steer_en_stateType_MIN =
    Steering_report_502_Steer_en_stateType_Steer_en_stateType_MIN;
  static constexpr Steer_en_stateType Steer_en_stateType_MAX =
    Steering_report_502_Steer_en_stateType_Steer_en_stateType_MAX;
  static constexpr int Steer_en_stateType_ARRAYSIZE =
    Steering_report_502_Steer_en_stateType_Steer_en_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Steer_en_stateType_descriptor() {
    return Steering_report_502_Steer_en_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Steer_en_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Steer_en_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Steer_en_stateType_Name.");
    return Steering_report_502_Steer_en_stateType_Name(enum_t_value);
  }
  static inline bool Steer_en_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Steer_en_stateType* value) {
    return Steering_report_502_Steer_en_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteerAngleSpdActualFieldNumber = 1,
    kSteerFlt2FieldNumber = 2,
    kSteerFlt1FieldNumber = 3,
    kSteerEnStateFieldNumber = 4,
    kSteerAngleActualFieldNumber = 5,
  };
  // optional int32 steer_angle_spd_actual = 1;
  bool has_steer_angle_spd_actual() const;
  private:
  bool _internal_has_steer_angle_spd_actual() const;
  public:
  void clear_steer_angle_spd_actual();
  int32_t steer_angle_spd_actual() const;
  void set_steer_angle_spd_actual(int32_t value);
  private:
  int32_t _internal_steer_angle_spd_actual() const;
  void _internal_set_steer_angle_spd_actual(int32_t value);
  public:

  // optional .apollo.canbus.Steering_report_502.Steer_flt2Type steer_flt2 = 2;
  bool has_steer_flt2() const;
  private:
  bool _internal_has_steer_flt2() const;
  public:
  void clear_steer_flt2();
  ::apollo::canbus::Steering_report_502_Steer_flt2Type steer_flt2() const;
  void set_steer_flt2(::apollo::canbus::Steering_report_502_Steer_flt2Type value);
  private:
  ::apollo::canbus::Steering_report_502_Steer_flt2Type _internal_steer_flt2() const;
  void _internal_set_steer_flt2(::apollo::canbus::Steering_report_502_Steer_flt2Type value);
  public:

  // optional .apollo.canbus.Steering_report_502.Steer_flt1Type steer_flt1 = 3;
  bool has_steer_flt1() const;
  private:
  bool _internal_has_steer_flt1() const;
  public:
  void clear_steer_flt1();
  ::apollo::canbus::Steering_report_502_Steer_flt1Type steer_flt1() const;
  void set_steer_flt1(::apollo::canbus::Steering_report_502_Steer_flt1Type value);
  private:
  ::apollo::canbus::Steering_report_502_Steer_flt1Type _internal_steer_flt1() const;
  void _internal_set_steer_flt1(::apollo::canbus::Steering_report_502_Steer_flt1Type value);
  public:

  // optional .apollo.canbus.Steering_report_502.Steer_en_stateType steer_en_state = 4;
  bool has_steer_en_state() const;
  private:
  bool _internal_has_steer_en_state() const;
  public:
  void clear_steer_en_state();
  ::apollo::canbus::Steering_report_502_Steer_en_stateType steer_en_state() const;
  void set_steer_en_state(::apollo::canbus::Steering_report_502_Steer_en_stateType value);
  private:
  ::apollo::canbus::Steering_report_502_Steer_en_stateType _internal_steer_en_state() const;
  void _internal_set_steer_en_state(::apollo::canbus::Steering_report_502_Steer_en_stateType value);
  public:

  // optional int32 steer_angle_actual = 5;
  bool has_steer_angle_actual() const;
  private:
  bool _internal_has_steer_angle_actual() const;
  public:
  void clear_steer_angle_actual();
  int32_t steer_angle_actual() const;
  void set_steer_angle_actual(int32_t value);
  private:
  int32_t _internal_steer_angle_actual() const;
  void _internal_set_steer_angle_actual(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_report_502)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t steer_angle_spd_actual_;
    int steer_flt2_;
    int steer_flt1_;
    int steer_en_state_;
    int32_t steer_angle_actual_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Gear_report_503 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Gear_report_503) */ {
 public:
  inline Gear_report_503() : Gear_report_503(nullptr) {}
  ~Gear_report_503() override;
  explicit PROTOBUF_CONSTEXPR Gear_report_503(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gear_report_503(const Gear_report_503& from);
  Gear_report_503(Gear_report_503&& from) noexcept
    : Gear_report_503() {
    *this = ::std::move(from);
  }

  inline Gear_report_503& operator=(const Gear_report_503& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gear_report_503& operator=(Gear_report_503&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gear_report_503& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gear_report_503* internal_default_instance() {
    return reinterpret_cast<const Gear_report_503*>(
               &_Gear_report_503_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Gear_report_503& a, Gear_report_503& b) {
    a.Swap(&b);
  }
  inline void Swap(Gear_report_503* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gear_report_503* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gear_report_503* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gear_report_503>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gear_report_503& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gear_report_503& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gear_report_503* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Gear_report_503";
  }
  protected:
  explicit Gear_report_503(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gear_report_503_Gear_fltType Gear_fltType;
  static constexpr Gear_fltType GEAR_FLT_NO_FAULT =
    Gear_report_503_Gear_fltType_GEAR_FLT_NO_FAULT;
  static constexpr Gear_fltType GEAR_FLT_FAULT =
    Gear_report_503_Gear_fltType_GEAR_FLT_FAULT;
  static inline bool Gear_fltType_IsValid(int value) {
    return Gear_report_503_Gear_fltType_IsValid(value);
  }
  static constexpr Gear_fltType Gear_fltType_MIN =
    Gear_report_503_Gear_fltType_Gear_fltType_MIN;
  static constexpr Gear_fltType Gear_fltType_MAX =
    Gear_report_503_Gear_fltType_Gear_fltType_MAX;
  static constexpr int Gear_fltType_ARRAYSIZE =
    Gear_report_503_Gear_fltType_Gear_fltType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_fltType_descriptor() {
    return Gear_report_503_Gear_fltType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_fltType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_fltType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_fltType_Name.");
    return Gear_report_503_Gear_fltType_Name(enum_t_value);
  }
  static inline bool Gear_fltType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_fltType* value) {
    return Gear_report_503_Gear_fltType_Parse(name, value);
  }

  typedef Gear_report_503_Gear_actualType Gear_actualType;
  static constexpr Gear_actualType GEAR_ACTUAL_INVALID =
    Gear_report_503_Gear_actualType_GEAR_ACTUAL_INVALID;
  static constexpr Gear_actualType GEAR_ACTUAL_PARK =
    Gear_report_503_Gear_actualType_GEAR_ACTUAL_PARK;
  static constexpr Gear_actualType GEAR_ACTUAL_REVERSE =
    Gear_report_503_Gear_actualType_GEAR_ACTUAL_REVERSE;
  static constexpr Gear_actualType GEAR_ACTUAL_NEUTRAL =
    Gear_report_503_Gear_actualType_GEAR_ACTUAL_NEUTRAL;
  static constexpr Gear_actualType GEAR_ACTUAL_DRIVE =
    Gear_report_503_Gear_actualType_GEAR_ACTUAL_DRIVE;
  static inline bool Gear_actualType_IsValid(int value) {
    return Gear_report_503_Gear_actualType_IsValid(value);
  }
  static constexpr Gear_actualType Gear_actualType_MIN =
    Gear_report_503_Gear_actualType_Gear_actualType_MIN;
  static constexpr Gear_actualType Gear_actualType_MAX =
    Gear_report_503_Gear_actualType_Gear_actualType_MAX;
  static constexpr int Gear_actualType_ARRAYSIZE =
    Gear_report_503_Gear_actualType_Gear_actualType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gear_actualType_descriptor() {
    return Gear_report_503_Gear_actualType_descriptor();
  }
  template<typename T>
  static inline const std::string& Gear_actualType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gear_actualType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gear_actualType_Name.");
    return Gear_report_503_Gear_actualType_Name(enum_t_value);
  }
  static inline bool Gear_actualType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gear_actualType* value) {
    return Gear_report_503_Gear_actualType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGearFltFieldNumber = 1,
    kGearActualFieldNumber = 2,
  };
  // optional .apollo.canbus.Gear_report_503.Gear_fltType gear_flt = 1;
  bool has_gear_flt() const;
  private:
  bool _internal_has_gear_flt() const;
  public:
  void clear_gear_flt();
  ::apollo::canbus::Gear_report_503_Gear_fltType gear_flt() const;
  void set_gear_flt(::apollo::canbus::Gear_report_503_Gear_fltType value);
  private:
  ::apollo::canbus::Gear_report_503_Gear_fltType _internal_gear_flt() const;
  void _internal_set_gear_flt(::apollo::canbus::Gear_report_503_Gear_fltType value);
  public:

  // optional .apollo.canbus.Gear_report_503.Gear_actualType gear_actual = 2;
  bool has_gear_actual() const;
  private:
  bool _internal_has_gear_actual() const;
  public:
  void clear_gear_actual();
  ::apollo::canbus::Gear_report_503_Gear_actualType gear_actual() const;
  void set_gear_actual(::apollo::canbus::Gear_report_503_Gear_actualType value);
  private:
  ::apollo::canbus::Gear_report_503_Gear_actualType _internal_gear_actual() const;
  void _internal_set_gear_actual(::apollo::canbus::Gear_report_503_Gear_actualType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Gear_report_503)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int gear_flt_;
    int gear_actual_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Park_report_504 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Park_report_504) */ {
 public:
  inline Park_report_504() : Park_report_504(nullptr) {}
  ~Park_report_504() override;
  explicit PROTOBUF_CONSTEXPR Park_report_504(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Park_report_504(const Park_report_504& from);
  Park_report_504(Park_report_504&& from) noexcept
    : Park_report_504() {
    *this = ::std::move(from);
  }

  inline Park_report_504& operator=(const Park_report_504& from) {
    CopyFrom(from);
    return *this;
  }
  inline Park_report_504& operator=(Park_report_504&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Park_report_504& default_instance() {
    return *internal_default_instance();
  }
  static inline const Park_report_504* internal_default_instance() {
    return reinterpret_cast<const Park_report_504*>(
               &_Park_report_504_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Park_report_504& a, Park_report_504& b) {
    a.Swap(&b);
  }
  inline void Swap(Park_report_504* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Park_report_504* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Park_report_504* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Park_report_504>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Park_report_504& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Park_report_504& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Park_report_504* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Park_report_504";
  }
  protected:
  explicit Park_report_504(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Park_report_504_Parking_actualType Parking_actualType;
  static constexpr Parking_actualType PARKING_ACTUAL_RELEASE =
    Park_report_504_Parking_actualType_PARKING_ACTUAL_RELEASE;
  static constexpr Parking_actualType PARKING_ACTUAL_PARKING_TRIGGER =
    Park_report_504_Parking_actualType_PARKING_ACTUAL_PARKING_TRIGGER;
  static inline bool Parking_actualType_IsValid(int value) {
    return Park_report_504_Parking_actualType_IsValid(value);
  }
  static constexpr Parking_actualType Parking_actualType_MIN =
    Park_report_504_Parking_actualType_Parking_actualType_MIN;
  static constexpr Parking_actualType Parking_actualType_MAX =
    Park_report_504_Parking_actualType_Parking_actualType_MAX;
  static constexpr int Parking_actualType_ARRAYSIZE =
    Park_report_504_Parking_actualType_Parking_actualType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Parking_actualType_descriptor() {
    return Park_report_504_Parking_actualType_descriptor();
  }
  template<typename T>
  static inline const std::string& Parking_actualType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Parking_actualType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Parking_actualType_Name.");
    return Park_report_504_Parking_actualType_Name(enum_t_value);
  }
  static inline bool Parking_actualType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Parking_actualType* value) {
    return Park_report_504_Parking_actualType_Parse(name, value);
  }

  typedef Park_report_504_Park_fltType Park_fltType;
  static constexpr Park_fltType PARK_FLT_NO_FAULT =
    Park_report_504_Park_fltType_PARK_FLT_NO_FAULT;
  static constexpr Park_fltType PARK_FLT_FAULT =
    Park_report_504_Park_fltType_PARK_FLT_FAULT;
  static inline bool Park_fltType_IsValid(int value) {
    return Park_report_504_Park_fltType_IsValid(value);
  }
  static constexpr Park_fltType Park_fltType_MIN =
    Park_report_504_Park_fltType_Park_fltType_MIN;
  static constexpr Park_fltType Park_fltType_MAX =
    Park_report_504_Park_fltType_Park_fltType_MAX;
  static constexpr int Park_fltType_ARRAYSIZE =
    Park_report_504_Park_fltType_Park_fltType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Park_fltType_descriptor() {
    return Park_report_504_Park_fltType_descriptor();
  }
  template<typename T>
  static inline const std::string& Park_fltType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Park_fltType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Park_fltType_Name.");
    return Park_report_504_Park_fltType_Name(enum_t_value);
  }
  static inline bool Park_fltType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Park_fltType* value) {
    return Park_report_504_Park_fltType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParkingActualFieldNumber = 1,
    kParkFltFieldNumber = 2,
  };
  // optional .apollo.canbus.Park_report_504.Parking_actualType parking_actual = 1;
  bool has_parking_actual() const;
  private:
  bool _internal_has_parking_actual() const;
  public:
  void clear_parking_actual();
  ::apollo::canbus::Park_report_504_Parking_actualType parking_actual() const;
  void set_parking_actual(::apollo::canbus::Park_report_504_Parking_actualType value);
  private:
  ::apollo::canbus::Park_report_504_Parking_actualType _internal_parking_actual() const;
  void _internal_set_parking_actual(::apollo::canbus::Park_report_504_Parking_actualType value);
  public:

  // optional .apollo.canbus.Park_report_504.Park_fltType park_flt = 2;
  bool has_park_flt() const;
  private:
  bool _internal_has_park_flt() const;
  public:
  void clear_park_flt();
  ::apollo::canbus::Park_report_504_Park_fltType park_flt() const;
  void set_park_flt(::apollo::canbus::Park_report_504_Park_fltType value);
  private:
  ::apollo::canbus::Park_report_504_Park_fltType _internal_park_flt() const;
  void _internal_set_park_flt(::apollo::canbus::Park_report_504_Park_fltType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Park_report_504)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int parking_actual_;
    int park_flt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Vcu_report_505 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcu_report_505) */ {
 public:
  inline Vcu_report_505() : Vcu_report_505(nullptr) {}
  ~Vcu_report_505() override;
  explicit PROTOBUF_CONSTEXPR Vcu_report_505(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vcu_report_505(const Vcu_report_505& from);
  Vcu_report_505(Vcu_report_505&& from) noexcept
    : Vcu_report_505() {
    *this = ::std::move(from);
  }

  inline Vcu_report_505& operator=(const Vcu_report_505& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcu_report_505& operator=(Vcu_report_505&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vcu_report_505& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vcu_report_505* internal_default_instance() {
    return reinterpret_cast<const Vcu_report_505*>(
               &_Vcu_report_505_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Vcu_report_505& a, Vcu_report_505& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcu_report_505* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcu_report_505* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vcu_report_505* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vcu_report_505>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vcu_report_505& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vcu_report_505& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcu_report_505* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcu_report_505";
  }
  protected:
  explicit Vcu_report_505(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vcu_report_505_Vehicle_mode_stateType Vehicle_mode_stateType;
  static constexpr Vehicle_mode_stateType VEHICLE_MODE_STATE_MANUAL_REMOTE_MODE =
    Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_MANUAL_REMOTE_MODE;
  static constexpr Vehicle_mode_stateType VEHICLE_MODE_STATE_AUTO_MODE =
    Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_AUTO_MODE;
  static constexpr Vehicle_mode_stateType VEHICLE_MODE_STATE_EMERGENCY_MODE =
    Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_EMERGENCY_MODE;
  static constexpr Vehicle_mode_stateType VEHICLE_MODE_STATE_STANDBY_MODE =
    Vcu_report_505_Vehicle_mode_stateType_VEHICLE_MODE_STATE_STANDBY_MODE;
  static inline bool Vehicle_mode_stateType_IsValid(int value) {
    return Vcu_report_505_Vehicle_mode_stateType_IsValid(value);
  }
  static constexpr Vehicle_mode_stateType Vehicle_mode_stateType_MIN =
    Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_MIN;
  static constexpr Vehicle_mode_stateType Vehicle_mode_stateType_MAX =
    Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_MAX;
  static constexpr int Vehicle_mode_stateType_ARRAYSIZE =
    Vcu_report_505_Vehicle_mode_stateType_Vehicle_mode_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Vehicle_mode_stateType_descriptor() {
    return Vcu_report_505_Vehicle_mode_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Vehicle_mode_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Vehicle_mode_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Vehicle_mode_stateType_Name.");
    return Vcu_report_505_Vehicle_mode_stateType_Name(enum_t_value);
  }
  static inline bool Vehicle_mode_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Vehicle_mode_stateType* value) {
    return Vcu_report_505_Vehicle_mode_stateType_Parse(name, value);
  }

  typedef Vcu_report_505_Frontcrash_stateType Frontcrash_stateType;
  static constexpr Frontcrash_stateType FRONTCRASH_STATE_NO_EVENT =
    Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_NO_EVENT;
  static constexpr Frontcrash_stateType FRONTCRASH_STATE_CRASH_EVENT =
    Vcu_report_505_Frontcrash_stateType_FRONTCRASH_STATE_CRASH_EVENT;
  static inline bool Frontcrash_stateType_IsValid(int value) {
    return Vcu_report_505_Frontcrash_stateType_IsValid(value);
  }
  static constexpr Frontcrash_stateType Frontcrash_stateType_MIN =
    Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_MIN;
  static constexpr Frontcrash_stateType Frontcrash_stateType_MAX =
    Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_MAX;
  static constexpr int Frontcrash_stateType_ARRAYSIZE =
    Vcu_report_505_Frontcrash_stateType_Frontcrash_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Frontcrash_stateType_descriptor() {
    return Vcu_report_505_Frontcrash_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Frontcrash_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Frontcrash_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Frontcrash_stateType_Name.");
    return Vcu_report_505_Frontcrash_stateType_Name(enum_t_value);
  }
  static inline bool Frontcrash_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Frontcrash_stateType* value) {
    return Vcu_report_505_Frontcrash_stateType_Parse(name, value);
  }

  typedef Vcu_report_505_Backcrash_stateType Backcrash_stateType;
  static constexpr Backcrash_stateType BACKCRASH_STATE_NO_EVENT =
    Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_NO_EVENT;
  static constexpr Backcrash_stateType BACKCRASH_STATE_CRASH_EVENT =
    Vcu_report_505_Backcrash_stateType_BACKCRASH_STATE_CRASH_EVENT;
  static inline bool Backcrash_stateType_IsValid(int value) {
    return Vcu_report_505_Backcrash_stateType_IsValid(value);
  }
  static constexpr Backcrash_stateType Backcrash_stateType_MIN =
    Vcu_report_505_Backcrash_stateType_Backcrash_stateType_MIN;
  static constexpr Backcrash_stateType Backcrash_stateType_MAX =
    Vcu_report_505_Backcrash_stateType_Backcrash_stateType_MAX;
  static constexpr int Backcrash_stateType_ARRAYSIZE =
    Vcu_report_505_Backcrash_stateType_Backcrash_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Backcrash_stateType_descriptor() {
    return Vcu_report_505_Backcrash_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Backcrash_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Backcrash_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Backcrash_stateType_Name.");
    return Vcu_report_505_Backcrash_stateType_Name(enum_t_value);
  }
  static inline bool Backcrash_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Backcrash_stateType* value) {
    return Vcu_report_505_Backcrash_stateType_Parse(name, value);
  }

  typedef Vcu_report_505_Aeb_stateType Aeb_stateType;
  static constexpr Aeb_stateType AEB_STATE_INACTIVE =
    Vcu_report_505_Aeb_stateType_AEB_STATE_INACTIVE;
  static constexpr Aeb_stateType AEB_STATE_ACTIVE =
    Vcu_report_505_Aeb_stateType_AEB_STATE_ACTIVE;
  static inline bool Aeb_stateType_IsValid(int value) {
    return Vcu_report_505_Aeb_stateType_IsValid(value);
  }
  static constexpr Aeb_stateType Aeb_stateType_MIN =
    Vcu_report_505_Aeb_stateType_Aeb_stateType_MIN;
  static constexpr Aeb_stateType Aeb_stateType_MAX =
    Vcu_report_505_Aeb_stateType_Aeb_stateType_MAX;
  static constexpr int Aeb_stateType_ARRAYSIZE =
    Vcu_report_505_Aeb_stateType_Aeb_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Aeb_stateType_descriptor() {
    return Vcu_report_505_Aeb_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Aeb_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Aeb_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Aeb_stateType_Name.");
    return Vcu_report_505_Aeb_stateType_Name(enum_t_value);
  }
  static inline bool Aeb_stateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Aeb_stateType* value) {
    return Vcu_report_505_Aeb_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleModeStateFieldNumber = 1,
    kFrontcrashStateFieldNumber = 2,
    kBackcrashStateFieldNumber = 3,
    kAebStateFieldNumber = 4,
    kAccFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // optional .apollo.canbus.Vcu_report_505.Vehicle_mode_stateType vehicle_mode_state = 1;
  bool has_vehicle_mode_state() const;
  private:
  bool _internal_has_vehicle_mode_state() const;
  public:
  void clear_vehicle_mode_state();
  ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType vehicle_mode_state() const;
  void set_vehicle_mode_state(::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType value);
  private:
  ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType _internal_vehicle_mode_state() const;
  void _internal_set_vehicle_mode_state(::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType value);
  public:

  // optional .apollo.canbus.Vcu_report_505.Frontcrash_stateType frontcrash_state = 2;
  bool has_frontcrash_state() const;
  private:
  bool _internal_has_frontcrash_state() const;
  public:
  void clear_frontcrash_state();
  ::apollo::canbus::Vcu_report_505_Frontcrash_stateType frontcrash_state() const;
  void set_frontcrash_state(::apollo::canbus::Vcu_report_505_Frontcrash_stateType value);
  private:
  ::apollo::canbus::Vcu_report_505_Frontcrash_stateType _internal_frontcrash_state() const;
  void _internal_set_frontcrash_state(::apollo::canbus::Vcu_report_505_Frontcrash_stateType value);
  public:

  // optional .apollo.canbus.Vcu_report_505.Backcrash_stateType backcrash_state = 3;
  bool has_backcrash_state() const;
  private:
  bool _internal_has_backcrash_state() const;
  public:
  void clear_backcrash_state();
  ::apollo::canbus::Vcu_report_505_Backcrash_stateType backcrash_state() const;
  void set_backcrash_state(::apollo::canbus::Vcu_report_505_Backcrash_stateType value);
  private:
  ::apollo::canbus::Vcu_report_505_Backcrash_stateType _internal_backcrash_state() const;
  void _internal_set_backcrash_state(::apollo::canbus::Vcu_report_505_Backcrash_stateType value);
  public:

  // optional .apollo.canbus.Vcu_report_505.Aeb_stateType aeb_state = 4;
  bool has_aeb_state() const;
  private:
  bool _internal_has_aeb_state() const;
  public:
  void clear_aeb_state();
  ::apollo::canbus::Vcu_report_505_Aeb_stateType aeb_state() const;
  void set_aeb_state(::apollo::canbus::Vcu_report_505_Aeb_stateType value);
  private:
  ::apollo::canbus::Vcu_report_505_Aeb_stateType _internal_aeb_state() const;
  void _internal_set_aeb_state(::apollo::canbus::Vcu_report_505_Aeb_stateType value);
  public:

  // optional double acc = 5;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // optional double speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcu_report_505)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int vehicle_mode_state_;
    int frontcrash_state_;
    int backcrash_state_;
    int aeb_state_;
    double acc_;
    double speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Wheelspeed_report_506 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Wheelspeed_report_506) */ {
 public:
  inline Wheelspeed_report_506() : Wheelspeed_report_506(nullptr) {}
  ~Wheelspeed_report_506() override;
  explicit PROTOBUF_CONSTEXPR Wheelspeed_report_506(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wheelspeed_report_506(const Wheelspeed_report_506& from);
  Wheelspeed_report_506(Wheelspeed_report_506&& from) noexcept
    : Wheelspeed_report_506() {
    *this = ::std::move(from);
  }

  inline Wheelspeed_report_506& operator=(const Wheelspeed_report_506& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wheelspeed_report_506& operator=(Wheelspeed_report_506&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Wheelspeed_report_506& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wheelspeed_report_506* internal_default_instance() {
    return reinterpret_cast<const Wheelspeed_report_506*>(
               &_Wheelspeed_report_506_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Wheelspeed_report_506& a, Wheelspeed_report_506& b) {
    a.Swap(&b);
  }
  inline void Swap(Wheelspeed_report_506* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wheelspeed_report_506* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Wheelspeed_report_506* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Wheelspeed_report_506>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Wheelspeed_report_506& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Wheelspeed_report_506& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wheelspeed_report_506* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Wheelspeed_report_506";
  }
  protected:
  explicit Wheelspeed_report_506(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRrFieldNumber = 1,
    kRlFieldNumber = 2,
    kFrFieldNumber = 3,
    kFlFieldNumber = 4,
  };
  // optional double rr = 1;
  bool has_rr() const;
  private:
  bool _internal_has_rr() const;
  public:
  void clear_rr();
  double rr() const;
  void set_rr(double value);
  private:
  double _internal_rr() const;
  void _internal_set_rr(double value);
  public:

  // optional double rl = 2;
  bool has_rl() const;
  private:
  bool _internal_has_rl() const;
  public:
  void clear_rl();
  double rl() const;
  void set_rl(double value);
  private:
  double _internal_rl() const;
  void _internal_set_rl(double value);
  public:

  // optional double fr = 3;
  bool has_fr() const;
  private:
  bool _internal_has_fr() const;
  public:
  void clear_fr();
  double fr() const;
  void set_fr(double value);
  private:
  double _internal_fr() const;
  void _internal_set_fr(double value);
  public:

  // optional double fl = 4;
  bool has_fl() const;
  private:
  bool _internal_has_fl() const;
  public:
  void clear_fl();
  double fl() const;
  void set_fl(double value);
  private:
  double _internal_fl() const;
  void _internal_set_fl(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Wheelspeed_report_506)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double rr_;
    double rl_;
    double fr_;
    double fl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Ultr_sensor_1_507 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ultr_sensor_1_507) */ {
 public:
  inline Ultr_sensor_1_507() : Ultr_sensor_1_507(nullptr) {}
  ~Ultr_sensor_1_507() override;
  explicit PROTOBUF_CONSTEXPR Ultr_sensor_1_507(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultr_sensor_1_507(const Ultr_sensor_1_507& from);
  Ultr_sensor_1_507(Ultr_sensor_1_507&& from) noexcept
    : Ultr_sensor_1_507() {
    *this = ::std::move(from);
  }

  inline Ultr_sensor_1_507& operator=(const Ultr_sensor_1_507& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultr_sensor_1_507& operator=(Ultr_sensor_1_507&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultr_sensor_1_507& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultr_sensor_1_507* internal_default_instance() {
    return reinterpret_cast<const Ultr_sensor_1_507*>(
               &_Ultr_sensor_1_507_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Ultr_sensor_1_507& a, Ultr_sensor_1_507& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultr_sensor_1_507* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultr_sensor_1_507* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ultr_sensor_1_507* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ultr_sensor_1_507>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ultr_sensor_1_507& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ultr_sensor_1_507& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultr_sensor_1_507* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ultr_sensor_1_507";
  }
  protected:
  explicit Ultr_sensor_1_507(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiuss9TofDirectFieldNumber = 1,
    kUiuss8TofDirectFieldNumber = 2,
    kUiuss11TofDirectFieldNumber = 3,
    kUiuss10TofDirectFieldNumber = 4,
  };
  // optional double uiuss9_tof_direct = 1;
  bool has_uiuss9_tof_direct() const;
  private:
  bool _internal_has_uiuss9_tof_direct() const;
  public:
  void clear_uiuss9_tof_direct();
  double uiuss9_tof_direct() const;
  void set_uiuss9_tof_direct(double value);
  private:
  double _internal_uiuss9_tof_direct() const;
  void _internal_set_uiuss9_tof_direct(double value);
  public:

  // optional double uiuss8_tof_direct = 2;
  bool has_uiuss8_tof_direct() const;
  private:
  bool _internal_has_uiuss8_tof_direct() const;
  public:
  void clear_uiuss8_tof_direct();
  double uiuss8_tof_direct() const;
  void set_uiuss8_tof_direct(double value);
  private:
  double _internal_uiuss8_tof_direct() const;
  void _internal_set_uiuss8_tof_direct(double value);
  public:

  // optional double uiuss11_tof_direct = 3;
  bool has_uiuss11_tof_direct() const;
  private:
  bool _internal_has_uiuss11_tof_direct() const;
  public:
  void clear_uiuss11_tof_direct();
  double uiuss11_tof_direct() const;
  void set_uiuss11_tof_direct(double value);
  private:
  double _internal_uiuss11_tof_direct() const;
  void _internal_set_uiuss11_tof_direct(double value);
  public:

  // optional double uiuss10_tof_direct = 4;
  bool has_uiuss10_tof_direct() const;
  private:
  bool _internal_has_uiuss10_tof_direct() const;
  public:
  void clear_uiuss10_tof_direct();
  double uiuss10_tof_direct() const;
  void set_uiuss10_tof_direct(double value);
  private:
  double _internal_uiuss10_tof_direct() const;
  void _internal_set_uiuss10_tof_direct(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ultr_sensor_1_507)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double uiuss9_tof_direct_;
    double uiuss8_tof_direct_;
    double uiuss11_tof_direct_;
    double uiuss10_tof_direct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Ultr_sensor_2_508 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ultr_sensor_2_508) */ {
 public:
  inline Ultr_sensor_2_508() : Ultr_sensor_2_508(nullptr) {}
  ~Ultr_sensor_2_508() override;
  explicit PROTOBUF_CONSTEXPR Ultr_sensor_2_508(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultr_sensor_2_508(const Ultr_sensor_2_508& from);
  Ultr_sensor_2_508(Ultr_sensor_2_508&& from) noexcept
    : Ultr_sensor_2_508() {
    *this = ::std::move(from);
  }

  inline Ultr_sensor_2_508& operator=(const Ultr_sensor_2_508& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultr_sensor_2_508& operator=(Ultr_sensor_2_508&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultr_sensor_2_508& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultr_sensor_2_508* internal_default_instance() {
    return reinterpret_cast<const Ultr_sensor_2_508*>(
               &_Ultr_sensor_2_508_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Ultr_sensor_2_508& a, Ultr_sensor_2_508& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultr_sensor_2_508* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultr_sensor_2_508* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ultr_sensor_2_508* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ultr_sensor_2_508>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ultr_sensor_2_508& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ultr_sensor_2_508& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultr_sensor_2_508* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ultr_sensor_2_508";
  }
  protected:
  explicit Ultr_sensor_2_508(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiuss9TofIndirectFieldNumber = 1,
    kUiuss8TofIndirectFieldNumber = 2,
    kUiuss11TofIndirectFieldNumber = 3,
    kUiuss10TofIndirectFieldNumber = 4,
  };
  // optional double uiuss9_tof_indirect = 1;
  bool has_uiuss9_tof_indirect() const;
  private:
  bool _internal_has_uiuss9_tof_indirect() const;
  public:
  void clear_uiuss9_tof_indirect();
  double uiuss9_tof_indirect() const;
  void set_uiuss9_tof_indirect(double value);
  private:
  double _internal_uiuss9_tof_indirect() const;
  void _internal_set_uiuss9_tof_indirect(double value);
  public:

  // optional double uiuss8_tof_indirect = 2;
  bool has_uiuss8_tof_indirect() const;
  private:
  bool _internal_has_uiuss8_tof_indirect() const;
  public:
  void clear_uiuss8_tof_indirect();
  double uiuss8_tof_indirect() const;
  void set_uiuss8_tof_indirect(double value);
  private:
  double _internal_uiuss8_tof_indirect() const;
  void _internal_set_uiuss8_tof_indirect(double value);
  public:

  // optional double uiuss11_tof_indirect = 3;
  bool has_uiuss11_tof_indirect() const;
  private:
  bool _internal_has_uiuss11_tof_indirect() const;
  public:
  void clear_uiuss11_tof_indirect();
  double uiuss11_tof_indirect() const;
  void set_uiuss11_tof_indirect(double value);
  private:
  double _internal_uiuss11_tof_indirect() const;
  void _internal_set_uiuss11_tof_indirect(double value);
  public:

  // optional double uiuss10_tof_indirect = 4;
  bool has_uiuss10_tof_indirect() const;
  private:
  bool _internal_has_uiuss10_tof_indirect() const;
  public:
  void clear_uiuss10_tof_indirect();
  double uiuss10_tof_indirect() const;
  void set_uiuss10_tof_indirect(double value);
  private:
  double _internal_uiuss10_tof_indirect() const;
  void _internal_set_uiuss10_tof_indirect(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ultr_sensor_2_508)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double uiuss9_tof_indirect_;
    double uiuss8_tof_indirect_;
    double uiuss11_tof_indirect_;
    double uiuss10_tof_indirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Ultr_sensor_3_509 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ultr_sensor_3_509) */ {
 public:
  inline Ultr_sensor_3_509() : Ultr_sensor_3_509(nullptr) {}
  ~Ultr_sensor_3_509() override;
  explicit PROTOBUF_CONSTEXPR Ultr_sensor_3_509(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultr_sensor_3_509(const Ultr_sensor_3_509& from);
  Ultr_sensor_3_509(Ultr_sensor_3_509&& from) noexcept
    : Ultr_sensor_3_509() {
    *this = ::std::move(from);
  }

  inline Ultr_sensor_3_509& operator=(const Ultr_sensor_3_509& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultr_sensor_3_509& operator=(Ultr_sensor_3_509&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultr_sensor_3_509& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultr_sensor_3_509* internal_default_instance() {
    return reinterpret_cast<const Ultr_sensor_3_509*>(
               &_Ultr_sensor_3_509_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Ultr_sensor_3_509& a, Ultr_sensor_3_509& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultr_sensor_3_509* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultr_sensor_3_509* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ultr_sensor_3_509* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ultr_sensor_3_509>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ultr_sensor_3_509& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ultr_sensor_3_509& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultr_sensor_3_509* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ultr_sensor_3_509";
  }
  protected:
  explicit Ultr_sensor_3_509(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiuss5TofDirectFieldNumber = 1,
    kUiuss4TofDirectFieldNumber = 2,
    kUiuss3TofDirectFieldNumber = 3,
    kUiuss2TofDirectFieldNumber = 4,
  };
  // optional double uiuss5_tof_direct = 1;
  bool has_uiuss5_tof_direct() const;
  private:
  bool _internal_has_uiuss5_tof_direct() const;
  public:
  void clear_uiuss5_tof_direct();
  double uiuss5_tof_direct() const;
  void set_uiuss5_tof_direct(double value);
  private:
  double _internal_uiuss5_tof_direct() const;
  void _internal_set_uiuss5_tof_direct(double value);
  public:

  // optional double uiuss4_tof_direct = 2;
  bool has_uiuss4_tof_direct() const;
  private:
  bool _internal_has_uiuss4_tof_direct() const;
  public:
  void clear_uiuss4_tof_direct();
  double uiuss4_tof_direct() const;
  void set_uiuss4_tof_direct(double value);
  private:
  double _internal_uiuss4_tof_direct() const;
  void _internal_set_uiuss4_tof_direct(double value);
  public:

  // optional double uiuss3_tof_direct = 3;
  bool has_uiuss3_tof_direct() const;
  private:
  bool _internal_has_uiuss3_tof_direct() const;
  public:
  void clear_uiuss3_tof_direct();
  double uiuss3_tof_direct() const;
  void set_uiuss3_tof_direct(double value);
  private:
  double _internal_uiuss3_tof_direct() const;
  void _internal_set_uiuss3_tof_direct(double value);
  public:

  // optional double uiuss2_tof_direct = 4;
  bool has_uiuss2_tof_direct() const;
  private:
  bool _internal_has_uiuss2_tof_direct() const;
  public:
  void clear_uiuss2_tof_direct();
  double uiuss2_tof_direct() const;
  void set_uiuss2_tof_direct(double value);
  private:
  double _internal_uiuss2_tof_direct() const;
  void _internal_set_uiuss2_tof_direct(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ultr_sensor_3_509)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double uiuss5_tof_direct_;
    double uiuss4_tof_direct_;
    double uiuss3_tof_direct_;
    double uiuss2_tof_direct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Ultr_sensor_4_510 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ultr_sensor_4_510) */ {
 public:
  inline Ultr_sensor_4_510() : Ultr_sensor_4_510(nullptr) {}
  ~Ultr_sensor_4_510() override;
  explicit PROTOBUF_CONSTEXPR Ultr_sensor_4_510(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultr_sensor_4_510(const Ultr_sensor_4_510& from);
  Ultr_sensor_4_510(Ultr_sensor_4_510&& from) noexcept
    : Ultr_sensor_4_510() {
    *this = ::std::move(from);
  }

  inline Ultr_sensor_4_510& operator=(const Ultr_sensor_4_510& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultr_sensor_4_510& operator=(Ultr_sensor_4_510&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultr_sensor_4_510& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultr_sensor_4_510* internal_default_instance() {
    return reinterpret_cast<const Ultr_sensor_4_510*>(
               &_Ultr_sensor_4_510_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Ultr_sensor_4_510& a, Ultr_sensor_4_510& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultr_sensor_4_510* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultr_sensor_4_510* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ultr_sensor_4_510* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ultr_sensor_4_510>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ultr_sensor_4_510& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ultr_sensor_4_510& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultr_sensor_4_510* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ultr_sensor_4_510";
  }
  protected:
  explicit Ultr_sensor_4_510(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiuss5TofIndirectFieldNumber = 1,
    kUiuss4TofIndirectFieldNumber = 2,
    kUiuss3TofIndirectFieldNumber = 3,
    kUiuss2TofIndirectFieldNumber = 4,
  };
  // optional double uiuss5_tof_indirect = 1;
  bool has_uiuss5_tof_indirect() const;
  private:
  bool _internal_has_uiuss5_tof_indirect() const;
  public:
  void clear_uiuss5_tof_indirect();
  double uiuss5_tof_indirect() const;
  void set_uiuss5_tof_indirect(double value);
  private:
  double _internal_uiuss5_tof_indirect() const;
  void _internal_set_uiuss5_tof_indirect(double value);
  public:

  // optional double uiuss4_tof_indirect = 2;
  bool has_uiuss4_tof_indirect() const;
  private:
  bool _internal_has_uiuss4_tof_indirect() const;
  public:
  void clear_uiuss4_tof_indirect();
  double uiuss4_tof_indirect() const;
  void set_uiuss4_tof_indirect(double value);
  private:
  double _internal_uiuss4_tof_indirect() const;
  void _internal_set_uiuss4_tof_indirect(double value);
  public:

  // optional double uiuss3_tof_indirect = 3;
  bool has_uiuss3_tof_indirect() const;
  private:
  bool _internal_has_uiuss3_tof_indirect() const;
  public:
  void clear_uiuss3_tof_indirect();
  double uiuss3_tof_indirect() const;
  void set_uiuss3_tof_indirect(double value);
  private:
  double _internal_uiuss3_tof_indirect() const;
  void _internal_set_uiuss3_tof_indirect(double value);
  public:

  // optional double uiuss2_tof_indirect = 4;
  bool has_uiuss2_tof_indirect() const;
  private:
  bool _internal_has_uiuss2_tof_indirect() const;
  public:
  void clear_uiuss2_tof_indirect();
  double uiuss2_tof_indirect() const;
  void set_uiuss2_tof_indirect(double value);
  private:
  double _internal_uiuss2_tof_indirect() const;
  void _internal_set_uiuss2_tof_indirect(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ultr_sensor_4_510)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double uiuss5_tof_indirect_;
    double uiuss4_tof_indirect_;
    double uiuss3_tof_indirect_;
    double uiuss2_tof_indirect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Ultr_sensor_5_511 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ultr_sensor_5_511) */ {
 public:
  inline Ultr_sensor_5_511() : Ultr_sensor_5_511(nullptr) {}
  ~Ultr_sensor_5_511() override;
  explicit PROTOBUF_CONSTEXPR Ultr_sensor_5_511(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultr_sensor_5_511(const Ultr_sensor_5_511& from);
  Ultr_sensor_5_511(Ultr_sensor_5_511&& from) noexcept
    : Ultr_sensor_5_511() {
    *this = ::std::move(from);
  }

  inline Ultr_sensor_5_511& operator=(const Ultr_sensor_5_511& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultr_sensor_5_511& operator=(Ultr_sensor_5_511&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultr_sensor_5_511& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultr_sensor_5_511* internal_default_instance() {
    return reinterpret_cast<const Ultr_sensor_5_511*>(
               &_Ultr_sensor_5_511_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Ultr_sensor_5_511& a, Ultr_sensor_5_511& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultr_sensor_5_511* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultr_sensor_5_511* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ultr_sensor_5_511* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ultr_sensor_5_511>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ultr_sensor_5_511& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ultr_sensor_5_511& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultr_sensor_5_511* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Ultr_sensor_5_511";
  }
  protected:
  explicit Ultr_sensor_5_511(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiuss7TofDirectFieldNumber = 1,
    kUiuss6TofDirectFieldNumber = 2,
    kUiuss1TofDirectFieldNumber = 3,
    kUiuss0TofDirectFieldNumber = 4,
  };
  // optional double uiuss7_tof_direct = 1;
  bool has_uiuss7_tof_direct() const;
  private:
  bool _internal_has_uiuss7_tof_direct() const;
  public:
  void clear_uiuss7_tof_direct();
  double uiuss7_tof_direct() const;
  void set_uiuss7_tof_direct(double value);
  private:
  double _internal_uiuss7_tof_direct() const;
  void _internal_set_uiuss7_tof_direct(double value);
  public:

  // optional double uiuss6_tof_direct = 2;
  bool has_uiuss6_tof_direct() const;
  private:
  bool _internal_has_uiuss6_tof_direct() const;
  public:
  void clear_uiuss6_tof_direct();
  double uiuss6_tof_direct() const;
  void set_uiuss6_tof_direct(double value);
  private:
  double _internal_uiuss6_tof_direct() const;
  void _internal_set_uiuss6_tof_direct(double value);
  public:

  // optional double uiuss1_tof_direct = 3;
  bool has_uiuss1_tof_direct() const;
  private:
  bool _internal_has_uiuss1_tof_direct() const;
  public:
  void clear_uiuss1_tof_direct();
  double uiuss1_tof_direct() const;
  void set_uiuss1_tof_direct(double value);
  private:
  double _internal_uiuss1_tof_direct() const;
  void _internal_set_uiuss1_tof_direct(double value);
  public:

  // optional double uiuss0_tof_direct = 4;
  bool has_uiuss0_tof_direct() const;
  private:
  bool _internal_has_uiuss0_tof_direct() const;
  public:
  void clear_uiuss0_tof_direct();
  double uiuss0_tof_direct() const;
  void set_uiuss0_tof_direct(double value);
  private:
  double _internal_uiuss0_tof_direct() const;
  void _internal_set_uiuss0_tof_direct(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ultr_sensor_5_511)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double uiuss7_tof_direct_;
    double uiuss6_tof_direct_;
    double uiuss1_tof_direct_;
    double uiuss0_tof_direct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Bms_report_512 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Bms_report_512) */ {
 public:
  inline Bms_report_512() : Bms_report_512(nullptr) {}
  ~Bms_report_512() override;
  explicit PROTOBUF_CONSTEXPR Bms_report_512(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bms_report_512(const Bms_report_512& from);
  Bms_report_512(Bms_report_512&& from) noexcept
    : Bms_report_512() {
    *this = ::std::move(from);
  }

  inline Bms_report_512& operator=(const Bms_report_512& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bms_report_512& operator=(Bms_report_512&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bms_report_512& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bms_report_512* internal_default_instance() {
    return reinterpret_cast<const Bms_report_512*>(
               &_Bms_report_512_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Bms_report_512& a, Bms_report_512& b) {
    a.Swap(&b);
  }
  inline void Swap(Bms_report_512* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bms_report_512* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bms_report_512* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bms_report_512>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bms_report_512& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bms_report_512& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bms_report_512* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Bms_report_512";
  }
  protected:
  explicit Bms_report_512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryCurrentFieldNumber = 1,
    kBatteryVoltageFieldNumber = 2,
    kBatterySocFieldNumber = 3,
  };
  // optional double battery_current = 1;
  bool has_battery_current() const;
  private:
  bool _internal_has_battery_current() const;
  public:
  void clear_battery_current();
  double battery_current() const;
  void set_battery_current(double value);
  private:
  double _internal_battery_current() const;
  void _internal_set_battery_current(double value);
  public:

  // optional double battery_voltage = 2;
  bool has_battery_voltage() const;
  private:
  bool _internal_has_battery_voltage() const;
  public:
  void clear_battery_voltage();
  double battery_voltage() const;
  void set_battery_voltage(double value);
  private:
  double _internal_battery_voltage() const;
  void _internal_set_battery_voltage(double value);
  public:

  // optional int32 battery_soc = 3;
  bool has_battery_soc() const;
  private:
  bool _internal_has_battery_soc() const;
  public:
  void clear_battery_soc();
  int32_t battery_soc() const;
  void set_battery_soc(int32_t value);
  private:
  int32_t _internal_battery_soc() const;
  void _internal_set_battery_soc(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Bms_report_512)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double battery_current_;
    double battery_voltage_;
    int32_t battery_soc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// -------------------------------------------------------------------

class Devkit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Devkit) */ {
 public:
  inline Devkit() : Devkit(nullptr) {}
  ~Devkit() override;
  explicit PROTOBUF_CONSTEXPR Devkit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Devkit(const Devkit& from);
  Devkit(Devkit&& from) noexcept
    : Devkit() {
    *this = ::std::move(from);
  }

  inline Devkit& operator=(const Devkit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Devkit& operator=(Devkit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Devkit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Devkit* internal_default_instance() {
    return reinterpret_cast<const Devkit*>(
               &_Devkit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Devkit& a, Devkit& b) {
    a.Swap(&b);
  }
  inline void Swap(Devkit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Devkit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Devkit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Devkit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Devkit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Devkit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Devkit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Devkit";
  }
  protected:
  explicit Devkit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThrottleCommand100FieldNumber = 1,
    kBrakeCommand101FieldNumber = 2,
    kSteeringCommand102FieldNumber = 3,
    kGearCommand103FieldNumber = 4,
    kParkCommand104FieldNumber = 5,
    kThrottleReport500FieldNumber = 6,
    kBrakeReport501FieldNumber = 7,
    kSteeringReport502FieldNumber = 8,
    kGearReport503FieldNumber = 9,
    kParkReport504FieldNumber = 10,
    kVcuReport505FieldNumber = 11,
    kWheelspeedReport506FieldNumber = 12,
    kUltrSensor1507FieldNumber = 13,
    kUltrSensor2508FieldNumber = 14,
    kUltrSensor3509FieldNumber = 15,
    kUltrSensor4510FieldNumber = 16,
    kUltrSensor5511FieldNumber = 17,
    kBmsReport512FieldNumber = 18,
  };
  // optional .apollo.canbus.Throttle_command_100 throttle_command_100 = 1;
  bool has_throttle_command_100() const;
  private:
  bool _internal_has_throttle_command_100() const;
  public:
  void clear_throttle_command_100();
  const ::apollo::canbus::Throttle_command_100& throttle_command_100() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Throttle_command_100* release_throttle_command_100();
  ::apollo::canbus::Throttle_command_100* mutable_throttle_command_100();
  void set_allocated_throttle_command_100(::apollo::canbus::Throttle_command_100* throttle_command_100);
  private:
  const ::apollo::canbus::Throttle_command_100& _internal_throttle_command_100() const;
  ::apollo::canbus::Throttle_command_100* _internal_mutable_throttle_command_100();
  public:
  void unsafe_arena_set_allocated_throttle_command_100(
      ::apollo::canbus::Throttle_command_100* throttle_command_100);
  ::apollo::canbus::Throttle_command_100* unsafe_arena_release_throttle_command_100();

  // optional .apollo.canbus.Brake_command_101 brake_command_101 = 2;
  bool has_brake_command_101() const;
  private:
  bool _internal_has_brake_command_101() const;
  public:
  void clear_brake_command_101();
  const ::apollo::canbus::Brake_command_101& brake_command_101() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Brake_command_101* release_brake_command_101();
  ::apollo::canbus::Brake_command_101* mutable_brake_command_101();
  void set_allocated_brake_command_101(::apollo::canbus::Brake_command_101* brake_command_101);
  private:
  const ::apollo::canbus::Brake_command_101& _internal_brake_command_101() const;
  ::apollo::canbus::Brake_command_101* _internal_mutable_brake_command_101();
  public:
  void unsafe_arena_set_allocated_brake_command_101(
      ::apollo::canbus::Brake_command_101* brake_command_101);
  ::apollo::canbus::Brake_command_101* unsafe_arena_release_brake_command_101();

  // optional .apollo.canbus.Steering_command_102 steering_command_102 = 3;
  bool has_steering_command_102() const;
  private:
  bool _internal_has_steering_command_102() const;
  public:
  void clear_steering_command_102();
  const ::apollo::canbus::Steering_command_102& steering_command_102() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Steering_command_102* release_steering_command_102();
  ::apollo::canbus::Steering_command_102* mutable_steering_command_102();
  void set_allocated_steering_command_102(::apollo::canbus::Steering_command_102* steering_command_102);
  private:
  const ::apollo::canbus::Steering_command_102& _internal_steering_command_102() const;
  ::apollo::canbus::Steering_command_102* _internal_mutable_steering_command_102();
  public:
  void unsafe_arena_set_allocated_steering_command_102(
      ::apollo::canbus::Steering_command_102* steering_command_102);
  ::apollo::canbus::Steering_command_102* unsafe_arena_release_steering_command_102();

  // optional .apollo.canbus.Gear_command_103 gear_command_103 = 4;
  bool has_gear_command_103() const;
  private:
  bool _internal_has_gear_command_103() const;
  public:
  void clear_gear_command_103();
  const ::apollo::canbus::Gear_command_103& gear_command_103() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Gear_command_103* release_gear_command_103();
  ::apollo::canbus::Gear_command_103* mutable_gear_command_103();
  void set_allocated_gear_command_103(::apollo::canbus::Gear_command_103* gear_command_103);
  private:
  const ::apollo::canbus::Gear_command_103& _internal_gear_command_103() const;
  ::apollo::canbus::Gear_command_103* _internal_mutable_gear_command_103();
  public:
  void unsafe_arena_set_allocated_gear_command_103(
      ::apollo::canbus::Gear_command_103* gear_command_103);
  ::apollo::canbus::Gear_command_103* unsafe_arena_release_gear_command_103();

  // optional .apollo.canbus.Park_command_104 park_command_104 = 5;
  bool has_park_command_104() const;
  private:
  bool _internal_has_park_command_104() const;
  public:
  void clear_park_command_104();
  const ::apollo::canbus::Park_command_104& park_command_104() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Park_command_104* release_park_command_104();
  ::apollo::canbus::Park_command_104* mutable_park_command_104();
  void set_allocated_park_command_104(::apollo::canbus::Park_command_104* park_command_104);
  private:
  const ::apollo::canbus::Park_command_104& _internal_park_command_104() const;
  ::apollo::canbus::Park_command_104* _internal_mutable_park_command_104();
  public:
  void unsafe_arena_set_allocated_park_command_104(
      ::apollo::canbus::Park_command_104* park_command_104);
  ::apollo::canbus::Park_command_104* unsafe_arena_release_park_command_104();

  // optional .apollo.canbus.Throttle_report_500 throttle_report_500 = 6;
  bool has_throttle_report_500() const;
  private:
  bool _internal_has_throttle_report_500() const;
  public:
  void clear_throttle_report_500();
  const ::apollo::canbus::Throttle_report_500& throttle_report_500() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Throttle_report_500* release_throttle_report_500();
  ::apollo::canbus::Throttle_report_500* mutable_throttle_report_500();
  void set_allocated_throttle_report_500(::apollo::canbus::Throttle_report_500* throttle_report_500);
  private:
  const ::apollo::canbus::Throttle_report_500& _internal_throttle_report_500() const;
  ::apollo::canbus::Throttle_report_500* _internal_mutable_throttle_report_500();
  public:
  void unsafe_arena_set_allocated_throttle_report_500(
      ::apollo::canbus::Throttle_report_500* throttle_report_500);
  ::apollo::canbus::Throttle_report_500* unsafe_arena_release_throttle_report_500();

  // optional .apollo.canbus.Brake_report_501 brake_report_501 = 7;
  bool has_brake_report_501() const;
  private:
  bool _internal_has_brake_report_501() const;
  public:
  void clear_brake_report_501();
  const ::apollo::canbus::Brake_report_501& brake_report_501() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Brake_report_501* release_brake_report_501();
  ::apollo::canbus::Brake_report_501* mutable_brake_report_501();
  void set_allocated_brake_report_501(::apollo::canbus::Brake_report_501* brake_report_501);
  private:
  const ::apollo::canbus::Brake_report_501& _internal_brake_report_501() const;
  ::apollo::canbus::Brake_report_501* _internal_mutable_brake_report_501();
  public:
  void unsafe_arena_set_allocated_brake_report_501(
      ::apollo::canbus::Brake_report_501* brake_report_501);
  ::apollo::canbus::Brake_report_501* unsafe_arena_release_brake_report_501();

  // optional .apollo.canbus.Steering_report_502 steering_report_502 = 8;
  bool has_steering_report_502() const;
  private:
  bool _internal_has_steering_report_502() const;
  public:
  void clear_steering_report_502();
  const ::apollo::canbus::Steering_report_502& steering_report_502() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Steering_report_502* release_steering_report_502();
  ::apollo::canbus::Steering_report_502* mutable_steering_report_502();
  void set_allocated_steering_report_502(::apollo::canbus::Steering_report_502* steering_report_502);
  private:
  const ::apollo::canbus::Steering_report_502& _internal_steering_report_502() const;
  ::apollo::canbus::Steering_report_502* _internal_mutable_steering_report_502();
  public:
  void unsafe_arena_set_allocated_steering_report_502(
      ::apollo::canbus::Steering_report_502* steering_report_502);
  ::apollo::canbus::Steering_report_502* unsafe_arena_release_steering_report_502();

  // optional .apollo.canbus.Gear_report_503 gear_report_503 = 9;
  bool has_gear_report_503() const;
  private:
  bool _internal_has_gear_report_503() const;
  public:
  void clear_gear_report_503();
  const ::apollo::canbus::Gear_report_503& gear_report_503() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Gear_report_503* release_gear_report_503();
  ::apollo::canbus::Gear_report_503* mutable_gear_report_503();
  void set_allocated_gear_report_503(::apollo::canbus::Gear_report_503* gear_report_503);
  private:
  const ::apollo::canbus::Gear_report_503& _internal_gear_report_503() const;
  ::apollo::canbus::Gear_report_503* _internal_mutable_gear_report_503();
  public:
  void unsafe_arena_set_allocated_gear_report_503(
      ::apollo::canbus::Gear_report_503* gear_report_503);
  ::apollo::canbus::Gear_report_503* unsafe_arena_release_gear_report_503();

  // optional .apollo.canbus.Park_report_504 park_report_504 = 10;
  bool has_park_report_504() const;
  private:
  bool _internal_has_park_report_504() const;
  public:
  void clear_park_report_504();
  const ::apollo::canbus::Park_report_504& park_report_504() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Park_report_504* release_park_report_504();
  ::apollo::canbus::Park_report_504* mutable_park_report_504();
  void set_allocated_park_report_504(::apollo::canbus::Park_report_504* park_report_504);
  private:
  const ::apollo::canbus::Park_report_504& _internal_park_report_504() const;
  ::apollo::canbus::Park_report_504* _internal_mutable_park_report_504();
  public:
  void unsafe_arena_set_allocated_park_report_504(
      ::apollo::canbus::Park_report_504* park_report_504);
  ::apollo::canbus::Park_report_504* unsafe_arena_release_park_report_504();

  // optional .apollo.canbus.Vcu_report_505 vcu_report_505 = 11;
  bool has_vcu_report_505() const;
  private:
  bool _internal_has_vcu_report_505() const;
  public:
  void clear_vcu_report_505();
  const ::apollo::canbus::Vcu_report_505& vcu_report_505() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Vcu_report_505* release_vcu_report_505();
  ::apollo::canbus::Vcu_report_505* mutable_vcu_report_505();
  void set_allocated_vcu_report_505(::apollo::canbus::Vcu_report_505* vcu_report_505);
  private:
  const ::apollo::canbus::Vcu_report_505& _internal_vcu_report_505() const;
  ::apollo::canbus::Vcu_report_505* _internal_mutable_vcu_report_505();
  public:
  void unsafe_arena_set_allocated_vcu_report_505(
      ::apollo::canbus::Vcu_report_505* vcu_report_505);
  ::apollo::canbus::Vcu_report_505* unsafe_arena_release_vcu_report_505();

  // optional .apollo.canbus.Wheelspeed_report_506 wheelspeed_report_506 = 12;
  bool has_wheelspeed_report_506() const;
  private:
  bool _internal_has_wheelspeed_report_506() const;
  public:
  void clear_wheelspeed_report_506();
  const ::apollo::canbus::Wheelspeed_report_506& wheelspeed_report_506() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Wheelspeed_report_506* release_wheelspeed_report_506();
  ::apollo::canbus::Wheelspeed_report_506* mutable_wheelspeed_report_506();
  void set_allocated_wheelspeed_report_506(::apollo::canbus::Wheelspeed_report_506* wheelspeed_report_506);
  private:
  const ::apollo::canbus::Wheelspeed_report_506& _internal_wheelspeed_report_506() const;
  ::apollo::canbus::Wheelspeed_report_506* _internal_mutable_wheelspeed_report_506();
  public:
  void unsafe_arena_set_allocated_wheelspeed_report_506(
      ::apollo::canbus::Wheelspeed_report_506* wheelspeed_report_506);
  ::apollo::canbus::Wheelspeed_report_506* unsafe_arena_release_wheelspeed_report_506();

  // optional .apollo.canbus.Ultr_sensor_1_507 ultr_sensor_1_507 = 13;
  bool has_ultr_sensor_1_507() const;
  private:
  bool _internal_has_ultr_sensor_1_507() const;
  public:
  void clear_ultr_sensor_1_507();
  const ::apollo::canbus::Ultr_sensor_1_507& ultr_sensor_1_507() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ultr_sensor_1_507* release_ultr_sensor_1_507();
  ::apollo::canbus::Ultr_sensor_1_507* mutable_ultr_sensor_1_507();
  void set_allocated_ultr_sensor_1_507(::apollo::canbus::Ultr_sensor_1_507* ultr_sensor_1_507);
  private:
  const ::apollo::canbus::Ultr_sensor_1_507& _internal_ultr_sensor_1_507() const;
  ::apollo::canbus::Ultr_sensor_1_507* _internal_mutable_ultr_sensor_1_507();
  public:
  void unsafe_arena_set_allocated_ultr_sensor_1_507(
      ::apollo::canbus::Ultr_sensor_1_507* ultr_sensor_1_507);
  ::apollo::canbus::Ultr_sensor_1_507* unsafe_arena_release_ultr_sensor_1_507();

  // optional .apollo.canbus.Ultr_sensor_2_508 ultr_sensor_2_508 = 14;
  bool has_ultr_sensor_2_508() const;
  private:
  bool _internal_has_ultr_sensor_2_508() const;
  public:
  void clear_ultr_sensor_2_508();
  const ::apollo::canbus::Ultr_sensor_2_508& ultr_sensor_2_508() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ultr_sensor_2_508* release_ultr_sensor_2_508();
  ::apollo::canbus::Ultr_sensor_2_508* mutable_ultr_sensor_2_508();
  void set_allocated_ultr_sensor_2_508(::apollo::canbus::Ultr_sensor_2_508* ultr_sensor_2_508);
  private:
  const ::apollo::canbus::Ultr_sensor_2_508& _internal_ultr_sensor_2_508() const;
  ::apollo::canbus::Ultr_sensor_2_508* _internal_mutable_ultr_sensor_2_508();
  public:
  void unsafe_arena_set_allocated_ultr_sensor_2_508(
      ::apollo::canbus::Ultr_sensor_2_508* ultr_sensor_2_508);
  ::apollo::canbus::Ultr_sensor_2_508* unsafe_arena_release_ultr_sensor_2_508();

  // optional .apollo.canbus.Ultr_sensor_3_509 ultr_sensor_3_509 = 15;
  bool has_ultr_sensor_3_509() const;
  private:
  bool _internal_has_ultr_sensor_3_509() const;
  public:
  void clear_ultr_sensor_3_509();
  const ::apollo::canbus::Ultr_sensor_3_509& ultr_sensor_3_509() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ultr_sensor_3_509* release_ultr_sensor_3_509();
  ::apollo::canbus::Ultr_sensor_3_509* mutable_ultr_sensor_3_509();
  void set_allocated_ultr_sensor_3_509(::apollo::canbus::Ultr_sensor_3_509* ultr_sensor_3_509);
  private:
  const ::apollo::canbus::Ultr_sensor_3_509& _internal_ultr_sensor_3_509() const;
  ::apollo::canbus::Ultr_sensor_3_509* _internal_mutable_ultr_sensor_3_509();
  public:
  void unsafe_arena_set_allocated_ultr_sensor_3_509(
      ::apollo::canbus::Ultr_sensor_3_509* ultr_sensor_3_509);
  ::apollo::canbus::Ultr_sensor_3_509* unsafe_arena_release_ultr_sensor_3_509();

  // optional .apollo.canbus.Ultr_sensor_4_510 ultr_sensor_4_510 = 16;
  bool has_ultr_sensor_4_510() const;
  private:
  bool _internal_has_ultr_sensor_4_510() const;
  public:
  void clear_ultr_sensor_4_510();
  const ::apollo::canbus::Ultr_sensor_4_510& ultr_sensor_4_510() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ultr_sensor_4_510* release_ultr_sensor_4_510();
  ::apollo::canbus::Ultr_sensor_4_510* mutable_ultr_sensor_4_510();
  void set_allocated_ultr_sensor_4_510(::apollo::canbus::Ultr_sensor_4_510* ultr_sensor_4_510);
  private:
  const ::apollo::canbus::Ultr_sensor_4_510& _internal_ultr_sensor_4_510() const;
  ::apollo::canbus::Ultr_sensor_4_510* _internal_mutable_ultr_sensor_4_510();
  public:
  void unsafe_arena_set_allocated_ultr_sensor_4_510(
      ::apollo::canbus::Ultr_sensor_4_510* ultr_sensor_4_510);
  ::apollo::canbus::Ultr_sensor_4_510* unsafe_arena_release_ultr_sensor_4_510();

  // optional .apollo.canbus.Ultr_sensor_5_511 ultr_sensor_5_511 = 17;
  bool has_ultr_sensor_5_511() const;
  private:
  bool _internal_has_ultr_sensor_5_511() const;
  public:
  void clear_ultr_sensor_5_511();
  const ::apollo::canbus::Ultr_sensor_5_511& ultr_sensor_5_511() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Ultr_sensor_5_511* release_ultr_sensor_5_511();
  ::apollo::canbus::Ultr_sensor_5_511* mutable_ultr_sensor_5_511();
  void set_allocated_ultr_sensor_5_511(::apollo::canbus::Ultr_sensor_5_511* ultr_sensor_5_511);
  private:
  const ::apollo::canbus::Ultr_sensor_5_511& _internal_ultr_sensor_5_511() const;
  ::apollo::canbus::Ultr_sensor_5_511* _internal_mutable_ultr_sensor_5_511();
  public:
  void unsafe_arena_set_allocated_ultr_sensor_5_511(
      ::apollo::canbus::Ultr_sensor_5_511* ultr_sensor_5_511);
  ::apollo::canbus::Ultr_sensor_5_511* unsafe_arena_release_ultr_sensor_5_511();

  // optional .apollo.canbus.Bms_report_512 bms_report_512 = 18;
  bool has_bms_report_512() const;
  private:
  bool _internal_has_bms_report_512() const;
  public:
  void clear_bms_report_512();
  const ::apollo::canbus::Bms_report_512& bms_report_512() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Bms_report_512* release_bms_report_512();
  ::apollo::canbus::Bms_report_512* mutable_bms_report_512();
  void set_allocated_bms_report_512(::apollo::canbus::Bms_report_512* bms_report_512);
  private:
  const ::apollo::canbus::Bms_report_512& _internal_bms_report_512() const;
  ::apollo::canbus::Bms_report_512* _internal_mutable_bms_report_512();
  public:
  void unsafe_arena_set_allocated_bms_report_512(
      ::apollo::canbus::Bms_report_512* bms_report_512);
  ::apollo::canbus::Bms_report_512* unsafe_arena_release_bms_report_512();

  // @@protoc_insertion_point(class_scope:apollo.canbus.Devkit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::canbus::Throttle_command_100* throttle_command_100_;
    ::apollo::canbus::Brake_command_101* brake_command_101_;
    ::apollo::canbus::Steering_command_102* steering_command_102_;
    ::apollo::canbus::Gear_command_103* gear_command_103_;
    ::apollo::canbus::Park_command_104* park_command_104_;
    ::apollo::canbus::Throttle_report_500* throttle_report_500_;
    ::apollo::canbus::Brake_report_501* brake_report_501_;
    ::apollo::canbus::Steering_report_502* steering_report_502_;
    ::apollo::canbus::Gear_report_503* gear_report_503_;
    ::apollo::canbus::Park_report_504* park_report_504_;
    ::apollo::canbus::Vcu_report_505* vcu_report_505_;
    ::apollo::canbus::Wheelspeed_report_506* wheelspeed_report_506_;
    ::apollo::canbus::Ultr_sensor_1_507* ultr_sensor_1_507_;
    ::apollo::canbus::Ultr_sensor_2_508* ultr_sensor_2_508_;
    ::apollo::canbus::Ultr_sensor_3_509* ultr_sensor_3_509_;
    ::apollo::canbus::Ultr_sensor_4_510* ultr_sensor_4_510_;
    ::apollo::canbus::Ultr_sensor_5_511* ultr_sensor_5_511_;
    ::apollo::canbus::Bms_report_512* bms_report_512_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fdevkit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Throttle_command_100

// optional double throttle_acc = 1;
inline bool Throttle_command_100::_internal_has_throttle_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Throttle_command_100::has_throttle_acc() const {
  return _internal_has_throttle_acc();
}
inline void Throttle_command_100::clear_throttle_acc() {
  _impl_.throttle_acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Throttle_command_100::_internal_throttle_acc() const {
  return _impl_.throttle_acc_;
}
inline double Throttle_command_100::throttle_acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_100.throttle_acc)
  return _internal_throttle_acc();
}
inline void Throttle_command_100::_internal_set_throttle_acc(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.throttle_acc_ = value;
}
inline void Throttle_command_100::set_throttle_acc(double value) {
  _internal_set_throttle_acc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_100.throttle_acc)
}

// optional int32 checksum_100 = 2;
inline bool Throttle_command_100::_internal_has_checksum_100() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Throttle_command_100::has_checksum_100() const {
  return _internal_has_checksum_100();
}
inline void Throttle_command_100::clear_checksum_100() {
  _impl_.checksum_100_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Throttle_command_100::_internal_checksum_100() const {
  return _impl_.checksum_100_;
}
inline int32_t Throttle_command_100::checksum_100() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_100.checksum_100)
  return _internal_checksum_100();
}
inline void Throttle_command_100::_internal_set_checksum_100(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.checksum_100_ = value;
}
inline void Throttle_command_100::set_checksum_100(int32_t value) {
  _internal_set_checksum_100(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_100.checksum_100)
}

// optional double throttle_pedal_target = 3;
inline bool Throttle_command_100::_internal_has_throttle_pedal_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Throttle_command_100::has_throttle_pedal_target() const {
  return _internal_has_throttle_pedal_target();
}
inline void Throttle_command_100::clear_throttle_pedal_target() {
  _impl_.throttle_pedal_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Throttle_command_100::_internal_throttle_pedal_target() const {
  return _impl_.throttle_pedal_target_;
}
inline double Throttle_command_100::throttle_pedal_target() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_100.throttle_pedal_target)
  return _internal_throttle_pedal_target();
}
inline void Throttle_command_100::_internal_set_throttle_pedal_target(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_pedal_target_ = value;
}
inline void Throttle_command_100::set_throttle_pedal_target(double value) {
  _internal_set_throttle_pedal_target(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_100.throttle_pedal_target)
}

// optional .apollo.canbus.Throttle_command_100.Throttle_en_ctrlType throttle_en_ctrl = 4;
inline bool Throttle_command_100::_internal_has_throttle_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Throttle_command_100::has_throttle_en_ctrl() const {
  return _internal_has_throttle_en_ctrl();
}
inline void Throttle_command_100::clear_throttle_en_ctrl() {
  _impl_.throttle_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType Throttle_command_100::_internal_throttle_en_ctrl() const {
  return static_cast< ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType >(_impl_.throttle_en_ctrl_);
}
inline ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType Throttle_command_100::throttle_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_command_100.throttle_en_ctrl)
  return _internal_throttle_en_ctrl();
}
inline void Throttle_command_100::_internal_set_throttle_en_ctrl(::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType value) {
  assert(::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.throttle_en_ctrl_ = value;
}
inline void Throttle_command_100::set_throttle_en_ctrl(::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType value) {
  _internal_set_throttle_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_command_100.throttle_en_ctrl)
}

// -------------------------------------------------------------------

// Brake_command_101

// optional double brake_dec = 1;
inline bool Brake_command_101::_internal_has_brake_dec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_command_101::has_brake_dec() const {
  return _internal_has_brake_dec();
}
inline void Brake_command_101::clear_brake_dec() {
  _impl_.brake_dec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Brake_command_101::_internal_brake_dec() const {
  return _impl_.brake_dec_;
}
inline double Brake_command_101::brake_dec() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_101.brake_dec)
  return _internal_brake_dec();
}
inline void Brake_command_101::_internal_set_brake_dec(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brake_dec_ = value;
}
inline void Brake_command_101::set_brake_dec(double value) {
  _internal_set_brake_dec(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_101.brake_dec)
}

// optional int32 checksum_101 = 2;
inline bool Brake_command_101::_internal_has_checksum_101() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_command_101::has_checksum_101() const {
  return _internal_has_checksum_101();
}
inline void Brake_command_101::clear_checksum_101() {
  _impl_.checksum_101_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Brake_command_101::_internal_checksum_101() const {
  return _impl_.checksum_101_;
}
inline int32_t Brake_command_101::checksum_101() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_101.checksum_101)
  return _internal_checksum_101();
}
inline void Brake_command_101::_internal_set_checksum_101(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.checksum_101_ = value;
}
inline void Brake_command_101::set_checksum_101(int32_t value) {
  _internal_set_checksum_101(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_101.checksum_101)
}

// optional double brake_pedal_target = 3;
inline bool Brake_command_101::_internal_has_brake_pedal_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_command_101::has_brake_pedal_target() const {
  return _internal_has_brake_pedal_target();
}
inline void Brake_command_101::clear_brake_pedal_target() {
  _impl_.brake_pedal_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Brake_command_101::_internal_brake_pedal_target() const {
  return _impl_.brake_pedal_target_;
}
inline double Brake_command_101::brake_pedal_target() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_101.brake_pedal_target)
  return _internal_brake_pedal_target();
}
inline void Brake_command_101::_internal_set_brake_pedal_target(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brake_pedal_target_ = value;
}
inline void Brake_command_101::set_brake_pedal_target(double value) {
  _internal_set_brake_pedal_target(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_101.brake_pedal_target)
}

// optional .apollo.canbus.Brake_command_101.Brake_en_ctrlType brake_en_ctrl = 4;
inline bool Brake_command_101::_internal_has_brake_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_command_101::has_brake_en_ctrl() const {
  return _internal_has_brake_en_ctrl();
}
inline void Brake_command_101::clear_brake_en_ctrl() {
  _impl_.brake_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Brake_command_101_Brake_en_ctrlType Brake_command_101::_internal_brake_en_ctrl() const {
  return static_cast< ::apollo::canbus::Brake_command_101_Brake_en_ctrlType >(_impl_.brake_en_ctrl_);
}
inline ::apollo::canbus::Brake_command_101_Brake_en_ctrlType Brake_command_101::brake_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_101.brake_en_ctrl)
  return _internal_brake_en_ctrl();
}
inline void Brake_command_101::_internal_set_brake_en_ctrl(::apollo::canbus::Brake_command_101_Brake_en_ctrlType value) {
  assert(::apollo::canbus::Brake_command_101_Brake_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.brake_en_ctrl_ = value;
}
inline void Brake_command_101::set_brake_en_ctrl(::apollo::canbus::Brake_command_101_Brake_en_ctrlType value) {
  _internal_set_brake_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_101.brake_en_ctrl)
}

// optional .apollo.canbus.Brake_command_101.Aeb_en_ctrlType aeb_en_ctrl = 5;
inline bool Brake_command_101::_internal_has_aeb_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brake_command_101::has_aeb_en_ctrl() const {
  return _internal_has_aeb_en_ctrl();
}
inline void Brake_command_101::clear_aeb_en_ctrl() {
  _impl_.aeb_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType Brake_command_101::_internal_aeb_en_ctrl() const {
  return static_cast< ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType >(_impl_.aeb_en_ctrl_);
}
inline ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType Brake_command_101::aeb_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_command_101.aeb_en_ctrl)
  return _internal_aeb_en_ctrl();
}
inline void Brake_command_101::_internal_set_aeb_en_ctrl(::apollo::canbus::Brake_command_101_Aeb_en_ctrlType value) {
  assert(::apollo::canbus::Brake_command_101_Aeb_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.aeb_en_ctrl_ = value;
}
inline void Brake_command_101::set_aeb_en_ctrl(::apollo::canbus::Brake_command_101_Aeb_en_ctrlType value) {
  _internal_set_aeb_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_command_101.aeb_en_ctrl)
}

// -------------------------------------------------------------------

// Steering_command_102

// optional .apollo.canbus.Steering_command_102.Steer_en_ctrlType steer_en_ctrl = 1;
inline bool Steering_command_102::_internal_has_steer_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_command_102::has_steer_en_ctrl() const {
  return _internal_has_steer_en_ctrl();
}
inline void Steering_command_102::clear_steer_en_ctrl() {
  _impl_.steer_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Steering_command_102_Steer_en_ctrlType Steering_command_102::_internal_steer_en_ctrl() const {
  return static_cast< ::apollo::canbus::Steering_command_102_Steer_en_ctrlType >(_impl_.steer_en_ctrl_);
}
inline ::apollo::canbus::Steering_command_102_Steer_en_ctrlType Steering_command_102::steer_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_command_102.steer_en_ctrl)
  return _internal_steer_en_ctrl();
}
inline void Steering_command_102::_internal_set_steer_en_ctrl(::apollo::canbus::Steering_command_102_Steer_en_ctrlType value) {
  assert(::apollo::canbus::Steering_command_102_Steer_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steer_en_ctrl_ = value;
}
inline void Steering_command_102::set_steer_en_ctrl(::apollo::canbus::Steering_command_102_Steer_en_ctrlType value) {
  _internal_set_steer_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_command_102.steer_en_ctrl)
}

// optional int32 steer_angle_target = 2;
inline bool Steering_command_102::_internal_has_steer_angle_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_command_102::has_steer_angle_target() const {
  return _internal_has_steer_angle_target();
}
inline void Steering_command_102::clear_steer_angle_target() {
  _impl_.steer_angle_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Steering_command_102::_internal_steer_angle_target() const {
  return _impl_.steer_angle_target_;
}
inline int32_t Steering_command_102::steer_angle_target() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_command_102.steer_angle_target)
  return _internal_steer_angle_target();
}
inline void Steering_command_102::_internal_set_steer_angle_target(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steer_angle_target_ = value;
}
inline void Steering_command_102::set_steer_angle_target(int32_t value) {
  _internal_set_steer_angle_target(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_command_102.steer_angle_target)
}

// optional int32 steer_angle_spd = 3;
inline bool Steering_command_102::_internal_has_steer_angle_spd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_command_102::has_steer_angle_spd() const {
  return _internal_has_steer_angle_spd();
}
inline void Steering_command_102::clear_steer_angle_spd() {
  _impl_.steer_angle_spd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Steering_command_102::_internal_steer_angle_spd() const {
  return _impl_.steer_angle_spd_;
}
inline int32_t Steering_command_102::steer_angle_spd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_command_102.steer_angle_spd)
  return _internal_steer_angle_spd();
}
inline void Steering_command_102::_internal_set_steer_angle_spd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steer_angle_spd_ = value;
}
inline void Steering_command_102::set_steer_angle_spd(int32_t value) {
  _internal_set_steer_angle_spd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_command_102.steer_angle_spd)
}

// optional int32 checksum_102 = 4;
inline bool Steering_command_102::_internal_has_checksum_102() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steering_command_102::has_checksum_102() const {
  return _internal_has_checksum_102();
}
inline void Steering_command_102::clear_checksum_102() {
  _impl_.checksum_102_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Steering_command_102::_internal_checksum_102() const {
  return _impl_.checksum_102_;
}
inline int32_t Steering_command_102::checksum_102() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_command_102.checksum_102)
  return _internal_checksum_102();
}
inline void Steering_command_102::_internal_set_checksum_102(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.checksum_102_ = value;
}
inline void Steering_command_102::set_checksum_102(int32_t value) {
  _internal_set_checksum_102(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_command_102.checksum_102)
}

// -------------------------------------------------------------------

// Gear_command_103

// optional .apollo.canbus.Gear_command_103.Gear_targetType gear_target = 1;
inline bool Gear_command_103::_internal_has_gear_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gear_command_103::has_gear_target() const {
  return _internal_has_gear_target();
}
inline void Gear_command_103::clear_gear_target() {
  _impl_.gear_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Gear_command_103_Gear_targetType Gear_command_103::_internal_gear_target() const {
  return static_cast< ::apollo::canbus::Gear_command_103_Gear_targetType >(_impl_.gear_target_);
}
inline ::apollo::canbus::Gear_command_103_Gear_targetType Gear_command_103::gear_target() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_command_103.gear_target)
  return _internal_gear_target();
}
inline void Gear_command_103::_internal_set_gear_target(::apollo::canbus::Gear_command_103_Gear_targetType value) {
  assert(::apollo::canbus::Gear_command_103_Gear_targetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gear_target_ = value;
}
inline void Gear_command_103::set_gear_target(::apollo::canbus::Gear_command_103_Gear_targetType value) {
  _internal_set_gear_target(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_command_103.gear_target)
}

// optional .apollo.canbus.Gear_command_103.Gear_en_ctrlType gear_en_ctrl = 2;
inline bool Gear_command_103::_internal_has_gear_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Gear_command_103::has_gear_en_ctrl() const {
  return _internal_has_gear_en_ctrl();
}
inline void Gear_command_103::clear_gear_en_ctrl() {
  _impl_.gear_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Gear_command_103_Gear_en_ctrlType Gear_command_103::_internal_gear_en_ctrl() const {
  return static_cast< ::apollo::canbus::Gear_command_103_Gear_en_ctrlType >(_impl_.gear_en_ctrl_);
}
inline ::apollo::canbus::Gear_command_103_Gear_en_ctrlType Gear_command_103::gear_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_command_103.gear_en_ctrl)
  return _internal_gear_en_ctrl();
}
inline void Gear_command_103::_internal_set_gear_en_ctrl(::apollo::canbus::Gear_command_103_Gear_en_ctrlType value) {
  assert(::apollo::canbus::Gear_command_103_Gear_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gear_en_ctrl_ = value;
}
inline void Gear_command_103::set_gear_en_ctrl(::apollo::canbus::Gear_command_103_Gear_en_ctrlType value) {
  _internal_set_gear_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_command_103.gear_en_ctrl)
}

// optional int32 checksum_103 = 3;
inline bool Gear_command_103::_internal_has_checksum_103() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Gear_command_103::has_checksum_103() const {
  return _internal_has_checksum_103();
}
inline void Gear_command_103::clear_checksum_103() {
  _impl_.checksum_103_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Gear_command_103::_internal_checksum_103() const {
  return _impl_.checksum_103_;
}
inline int32_t Gear_command_103::checksum_103() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_command_103.checksum_103)
  return _internal_checksum_103();
}
inline void Gear_command_103::_internal_set_checksum_103(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.checksum_103_ = value;
}
inline void Gear_command_103::set_checksum_103(int32_t value) {
  _internal_set_checksum_103(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_command_103.checksum_103)
}

// -------------------------------------------------------------------

// Park_command_104

// optional int32 checksum_104 = 1;
inline bool Park_command_104::_internal_has_checksum_104() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Park_command_104::has_checksum_104() const {
  return _internal_has_checksum_104();
}
inline void Park_command_104::clear_checksum_104() {
  _impl_.checksum_104_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Park_command_104::_internal_checksum_104() const {
  return _impl_.checksum_104_;
}
inline int32_t Park_command_104::checksum_104() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Park_command_104.checksum_104)
  return _internal_checksum_104();
}
inline void Park_command_104::_internal_set_checksum_104(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.checksum_104_ = value;
}
inline void Park_command_104::set_checksum_104(int32_t value) {
  _internal_set_checksum_104(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Park_command_104.checksum_104)
}

// optional .apollo.canbus.Park_command_104.Park_targetType park_target = 2;
inline bool Park_command_104::_internal_has_park_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Park_command_104::has_park_target() const {
  return _internal_has_park_target();
}
inline void Park_command_104::clear_park_target() {
  _impl_.park_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Park_command_104_Park_targetType Park_command_104::_internal_park_target() const {
  return static_cast< ::apollo::canbus::Park_command_104_Park_targetType >(_impl_.park_target_);
}
inline ::apollo::canbus::Park_command_104_Park_targetType Park_command_104::park_target() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Park_command_104.park_target)
  return _internal_park_target();
}
inline void Park_command_104::_internal_set_park_target(::apollo::canbus::Park_command_104_Park_targetType value) {
  assert(::apollo::canbus::Park_command_104_Park_targetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.park_target_ = value;
}
inline void Park_command_104::set_park_target(::apollo::canbus::Park_command_104_Park_targetType value) {
  _internal_set_park_target(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Park_command_104.park_target)
}

// optional .apollo.canbus.Park_command_104.Park_en_ctrlType park_en_ctrl = 3;
inline bool Park_command_104::_internal_has_park_en_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Park_command_104::has_park_en_ctrl() const {
  return _internal_has_park_en_ctrl();
}
inline void Park_command_104::clear_park_en_ctrl() {
  _impl_.park_en_ctrl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Park_command_104_Park_en_ctrlType Park_command_104::_internal_park_en_ctrl() const {
  return static_cast< ::apollo::canbus::Park_command_104_Park_en_ctrlType >(_impl_.park_en_ctrl_);
}
inline ::apollo::canbus::Park_command_104_Park_en_ctrlType Park_command_104::park_en_ctrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Park_command_104.park_en_ctrl)
  return _internal_park_en_ctrl();
}
inline void Park_command_104::_internal_set_park_en_ctrl(::apollo::canbus::Park_command_104_Park_en_ctrlType value) {
  assert(::apollo::canbus::Park_command_104_Park_en_ctrlType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.park_en_ctrl_ = value;
}
inline void Park_command_104::set_park_en_ctrl(::apollo::canbus::Park_command_104_Park_en_ctrlType value) {
  _internal_set_park_en_ctrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Park_command_104.park_en_ctrl)
}

// -------------------------------------------------------------------

// Throttle_report_500

// optional double throttle_pedal_actual = 1;
inline bool Throttle_report_500::_internal_has_throttle_pedal_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Throttle_report_500::has_throttle_pedal_actual() const {
  return _internal_has_throttle_pedal_actual();
}
inline void Throttle_report_500::clear_throttle_pedal_actual() {
  _impl_.throttle_pedal_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Throttle_report_500::_internal_throttle_pedal_actual() const {
  return _impl_.throttle_pedal_actual_;
}
inline double Throttle_report_500::throttle_pedal_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_report_500.throttle_pedal_actual)
  return _internal_throttle_pedal_actual();
}
inline void Throttle_report_500::_internal_set_throttle_pedal_actual(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.throttle_pedal_actual_ = value;
}
inline void Throttle_report_500::set_throttle_pedal_actual(double value) {
  _internal_set_throttle_pedal_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_report_500.throttle_pedal_actual)
}

// optional .apollo.canbus.Throttle_report_500.Throttle_flt2Type throttle_flt2 = 2;
inline bool Throttle_report_500::_internal_has_throttle_flt2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Throttle_report_500::has_throttle_flt2() const {
  return _internal_has_throttle_flt2();
}
inline void Throttle_report_500::clear_throttle_flt2() {
  _impl_.throttle_flt2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Throttle_report_500_Throttle_flt2Type Throttle_report_500::_internal_throttle_flt2() const {
  return static_cast< ::apollo::canbus::Throttle_report_500_Throttle_flt2Type >(_impl_.throttle_flt2_);
}
inline ::apollo::canbus::Throttle_report_500_Throttle_flt2Type Throttle_report_500::throttle_flt2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_report_500.throttle_flt2)
  return _internal_throttle_flt2();
}
inline void Throttle_report_500::_internal_set_throttle_flt2(::apollo::canbus::Throttle_report_500_Throttle_flt2Type value) {
  assert(::apollo::canbus::Throttle_report_500_Throttle_flt2Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_flt2_ = value;
}
inline void Throttle_report_500::set_throttle_flt2(::apollo::canbus::Throttle_report_500_Throttle_flt2Type value) {
  _internal_set_throttle_flt2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_report_500.throttle_flt2)
}

// optional .apollo.canbus.Throttle_report_500.Throttle_flt1Type throttle_flt1 = 3;
inline bool Throttle_report_500::_internal_has_throttle_flt1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Throttle_report_500::has_throttle_flt1() const {
  return _internal_has_throttle_flt1();
}
inline void Throttle_report_500::clear_throttle_flt1() {
  _impl_.throttle_flt1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Throttle_report_500_Throttle_flt1Type Throttle_report_500::_internal_throttle_flt1() const {
  return static_cast< ::apollo::canbus::Throttle_report_500_Throttle_flt1Type >(_impl_.throttle_flt1_);
}
inline ::apollo::canbus::Throttle_report_500_Throttle_flt1Type Throttle_report_500::throttle_flt1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_report_500.throttle_flt1)
  return _internal_throttle_flt1();
}
inline void Throttle_report_500::_internal_set_throttle_flt1(::apollo::canbus::Throttle_report_500_Throttle_flt1Type value) {
  assert(::apollo::canbus::Throttle_report_500_Throttle_flt1Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.throttle_flt1_ = value;
}
inline void Throttle_report_500::set_throttle_flt1(::apollo::canbus::Throttle_report_500_Throttle_flt1Type value) {
  _internal_set_throttle_flt1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_report_500.throttle_flt1)
}

// optional .apollo.canbus.Throttle_report_500.Throttle_en_stateType throttle_en_state = 4;
inline bool Throttle_report_500::_internal_has_throttle_en_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Throttle_report_500::has_throttle_en_state() const {
  return _internal_has_throttle_en_state();
}
inline void Throttle_report_500::clear_throttle_en_state() {
  _impl_.throttle_en_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Throttle_report_500_Throttle_en_stateType Throttle_report_500::_internal_throttle_en_state() const {
  return static_cast< ::apollo::canbus::Throttle_report_500_Throttle_en_stateType >(_impl_.throttle_en_state_);
}
inline ::apollo::canbus::Throttle_report_500_Throttle_en_stateType Throttle_report_500::throttle_en_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Throttle_report_500.throttle_en_state)
  return _internal_throttle_en_state();
}
inline void Throttle_report_500::_internal_set_throttle_en_state(::apollo::canbus::Throttle_report_500_Throttle_en_stateType value) {
  assert(::apollo::canbus::Throttle_report_500_Throttle_en_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.throttle_en_state_ = value;
}
inline void Throttle_report_500::set_throttle_en_state(::apollo::canbus::Throttle_report_500_Throttle_en_stateType value) {
  _internal_set_throttle_en_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Throttle_report_500.throttle_en_state)
}

// -------------------------------------------------------------------

// Brake_report_501

// optional double brake_pedal_actual = 1;
inline bool Brake_report_501::_internal_has_brake_pedal_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_report_501::has_brake_pedal_actual() const {
  return _internal_has_brake_pedal_actual();
}
inline void Brake_report_501::clear_brake_pedal_actual() {
  _impl_.brake_pedal_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Brake_report_501::_internal_brake_pedal_actual() const {
  return _impl_.brake_pedal_actual_;
}
inline double Brake_report_501::brake_pedal_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_report_501.brake_pedal_actual)
  return _internal_brake_pedal_actual();
}
inline void Brake_report_501::_internal_set_brake_pedal_actual(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brake_pedal_actual_ = value;
}
inline void Brake_report_501::set_brake_pedal_actual(double value) {
  _internal_set_brake_pedal_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_report_501.brake_pedal_actual)
}

// optional .apollo.canbus.Brake_report_501.Brake_flt2Type brake_flt2 = 2;
inline bool Brake_report_501::_internal_has_brake_flt2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_report_501::has_brake_flt2() const {
  return _internal_has_brake_flt2();
}
inline void Brake_report_501::clear_brake_flt2() {
  _impl_.brake_flt2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Brake_report_501_Brake_flt2Type Brake_report_501::_internal_brake_flt2() const {
  return static_cast< ::apollo::canbus::Brake_report_501_Brake_flt2Type >(_impl_.brake_flt2_);
}
inline ::apollo::canbus::Brake_report_501_Brake_flt2Type Brake_report_501::brake_flt2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_report_501.brake_flt2)
  return _internal_brake_flt2();
}
inline void Brake_report_501::_internal_set_brake_flt2(::apollo::canbus::Brake_report_501_Brake_flt2Type value) {
  assert(::apollo::canbus::Brake_report_501_Brake_flt2Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brake_flt2_ = value;
}
inline void Brake_report_501::set_brake_flt2(::apollo::canbus::Brake_report_501_Brake_flt2Type value) {
  _internal_set_brake_flt2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_report_501.brake_flt2)
}

// optional .apollo.canbus.Brake_report_501.Brake_flt1Type brake_flt1 = 3;
inline bool Brake_report_501::_internal_has_brake_flt1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_report_501::has_brake_flt1() const {
  return _internal_has_brake_flt1();
}
inline void Brake_report_501::clear_brake_flt1() {
  _impl_.brake_flt1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Brake_report_501_Brake_flt1Type Brake_report_501::_internal_brake_flt1() const {
  return static_cast< ::apollo::canbus::Brake_report_501_Brake_flt1Type >(_impl_.brake_flt1_);
}
inline ::apollo::canbus::Brake_report_501_Brake_flt1Type Brake_report_501::brake_flt1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_report_501.brake_flt1)
  return _internal_brake_flt1();
}
inline void Brake_report_501::_internal_set_brake_flt1(::apollo::canbus::Brake_report_501_Brake_flt1Type value) {
  assert(::apollo::canbus::Brake_report_501_Brake_flt1Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.brake_flt1_ = value;
}
inline void Brake_report_501::set_brake_flt1(::apollo::canbus::Brake_report_501_Brake_flt1Type value) {
  _internal_set_brake_flt1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_report_501.brake_flt1)
}

// optional .apollo.canbus.Brake_report_501.Brake_en_stateType brake_en_state = 4;
inline bool Brake_report_501::_internal_has_brake_en_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_report_501::has_brake_en_state() const {
  return _internal_has_brake_en_state();
}
inline void Brake_report_501::clear_brake_en_state() {
  _impl_.brake_en_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Brake_report_501_Brake_en_stateType Brake_report_501::_internal_brake_en_state() const {
  return static_cast< ::apollo::canbus::Brake_report_501_Brake_en_stateType >(_impl_.brake_en_state_);
}
inline ::apollo::canbus::Brake_report_501_Brake_en_stateType Brake_report_501::brake_en_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_report_501.brake_en_state)
  return _internal_brake_en_state();
}
inline void Brake_report_501::_internal_set_brake_en_state(::apollo::canbus::Brake_report_501_Brake_en_stateType value) {
  assert(::apollo::canbus::Brake_report_501_Brake_en_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.brake_en_state_ = value;
}
inline void Brake_report_501::set_brake_en_state(::apollo::canbus::Brake_report_501_Brake_en_stateType value) {
  _internal_set_brake_en_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_report_501.brake_en_state)
}

// -------------------------------------------------------------------

// Steering_report_502

// optional int32 steer_angle_spd_actual = 1;
inline bool Steering_report_502::_internal_has_steer_angle_spd_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_report_502::has_steer_angle_spd_actual() const {
  return _internal_has_steer_angle_spd_actual();
}
inline void Steering_report_502::clear_steer_angle_spd_actual() {
  _impl_.steer_angle_spd_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Steering_report_502::_internal_steer_angle_spd_actual() const {
  return _impl_.steer_angle_spd_actual_;
}
inline int32_t Steering_report_502::steer_angle_spd_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_report_502.steer_angle_spd_actual)
  return _internal_steer_angle_spd_actual();
}
inline void Steering_report_502::_internal_set_steer_angle_spd_actual(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steer_angle_spd_actual_ = value;
}
inline void Steering_report_502::set_steer_angle_spd_actual(int32_t value) {
  _internal_set_steer_angle_spd_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_report_502.steer_angle_spd_actual)
}

// optional .apollo.canbus.Steering_report_502.Steer_flt2Type steer_flt2 = 2;
inline bool Steering_report_502::_internal_has_steer_flt2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_report_502::has_steer_flt2() const {
  return _internal_has_steer_flt2();
}
inline void Steering_report_502::clear_steer_flt2() {
  _impl_.steer_flt2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Steering_report_502_Steer_flt2Type Steering_report_502::_internal_steer_flt2() const {
  return static_cast< ::apollo::canbus::Steering_report_502_Steer_flt2Type >(_impl_.steer_flt2_);
}
inline ::apollo::canbus::Steering_report_502_Steer_flt2Type Steering_report_502::steer_flt2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_report_502.steer_flt2)
  return _internal_steer_flt2();
}
inline void Steering_report_502::_internal_set_steer_flt2(::apollo::canbus::Steering_report_502_Steer_flt2Type value) {
  assert(::apollo::canbus::Steering_report_502_Steer_flt2Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steer_flt2_ = value;
}
inline void Steering_report_502::set_steer_flt2(::apollo::canbus::Steering_report_502_Steer_flt2Type value) {
  _internal_set_steer_flt2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_report_502.steer_flt2)
}

// optional .apollo.canbus.Steering_report_502.Steer_flt1Type steer_flt1 = 3;
inline bool Steering_report_502::_internal_has_steer_flt1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_report_502::has_steer_flt1() const {
  return _internal_has_steer_flt1();
}
inline void Steering_report_502::clear_steer_flt1() {
  _impl_.steer_flt1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Steering_report_502_Steer_flt1Type Steering_report_502::_internal_steer_flt1() const {
  return static_cast< ::apollo::canbus::Steering_report_502_Steer_flt1Type >(_impl_.steer_flt1_);
}
inline ::apollo::canbus::Steering_report_502_Steer_flt1Type Steering_report_502::steer_flt1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_report_502.steer_flt1)
  return _internal_steer_flt1();
}
inline void Steering_report_502::_internal_set_steer_flt1(::apollo::canbus::Steering_report_502_Steer_flt1Type value) {
  assert(::apollo::canbus::Steering_report_502_Steer_flt1Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steer_flt1_ = value;
}
inline void Steering_report_502::set_steer_flt1(::apollo::canbus::Steering_report_502_Steer_flt1Type value) {
  _internal_set_steer_flt1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_report_502.steer_flt1)
}

// optional .apollo.canbus.Steering_report_502.Steer_en_stateType steer_en_state = 4;
inline bool Steering_report_502::_internal_has_steer_en_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steering_report_502::has_steer_en_state() const {
  return _internal_has_steer_en_state();
}
inline void Steering_report_502::clear_steer_en_state() {
  _impl_.steer_en_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Steering_report_502_Steer_en_stateType Steering_report_502::_internal_steer_en_state() const {
  return static_cast< ::apollo::canbus::Steering_report_502_Steer_en_stateType >(_impl_.steer_en_state_);
}
inline ::apollo::canbus::Steering_report_502_Steer_en_stateType Steering_report_502::steer_en_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_report_502.steer_en_state)
  return _internal_steer_en_state();
}
inline void Steering_report_502::_internal_set_steer_en_state(::apollo::canbus::Steering_report_502_Steer_en_stateType value) {
  assert(::apollo::canbus::Steering_report_502_Steer_en_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.steer_en_state_ = value;
}
inline void Steering_report_502::set_steer_en_state(::apollo::canbus::Steering_report_502_Steer_en_stateType value) {
  _internal_set_steer_en_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_report_502.steer_en_state)
}

// optional int32 steer_angle_actual = 5;
inline bool Steering_report_502::_internal_has_steer_angle_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Steering_report_502::has_steer_angle_actual() const {
  return _internal_has_steer_angle_actual();
}
inline void Steering_report_502::clear_steer_angle_actual() {
  _impl_.steer_angle_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Steering_report_502::_internal_steer_angle_actual() const {
  return _impl_.steer_angle_actual_;
}
inline int32_t Steering_report_502::steer_angle_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_report_502.steer_angle_actual)
  return _internal_steer_angle_actual();
}
inline void Steering_report_502::_internal_set_steer_angle_actual(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.steer_angle_actual_ = value;
}
inline void Steering_report_502::set_steer_angle_actual(int32_t value) {
  _internal_set_steer_angle_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_report_502.steer_angle_actual)
}

// -------------------------------------------------------------------

// Gear_report_503

// optional .apollo.canbus.Gear_report_503.Gear_fltType gear_flt = 1;
inline bool Gear_report_503::_internal_has_gear_flt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gear_report_503::has_gear_flt() const {
  return _internal_has_gear_flt();
}
inline void Gear_report_503::clear_gear_flt() {
  _impl_.gear_flt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Gear_report_503_Gear_fltType Gear_report_503::_internal_gear_flt() const {
  return static_cast< ::apollo::canbus::Gear_report_503_Gear_fltType >(_impl_.gear_flt_);
}
inline ::apollo::canbus::Gear_report_503_Gear_fltType Gear_report_503::gear_flt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_report_503.gear_flt)
  return _internal_gear_flt();
}
inline void Gear_report_503::_internal_set_gear_flt(::apollo::canbus::Gear_report_503_Gear_fltType value) {
  assert(::apollo::canbus::Gear_report_503_Gear_fltType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gear_flt_ = value;
}
inline void Gear_report_503::set_gear_flt(::apollo::canbus::Gear_report_503_Gear_fltType value) {
  _internal_set_gear_flt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_report_503.gear_flt)
}

// optional .apollo.canbus.Gear_report_503.Gear_actualType gear_actual = 2;
inline bool Gear_report_503::_internal_has_gear_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Gear_report_503::has_gear_actual() const {
  return _internal_has_gear_actual();
}
inline void Gear_report_503::clear_gear_actual() {
  _impl_.gear_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Gear_report_503_Gear_actualType Gear_report_503::_internal_gear_actual() const {
  return static_cast< ::apollo::canbus::Gear_report_503_Gear_actualType >(_impl_.gear_actual_);
}
inline ::apollo::canbus::Gear_report_503_Gear_actualType Gear_report_503::gear_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Gear_report_503.gear_actual)
  return _internal_gear_actual();
}
inline void Gear_report_503::_internal_set_gear_actual(::apollo::canbus::Gear_report_503_Gear_actualType value) {
  assert(::apollo::canbus::Gear_report_503_Gear_actualType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gear_actual_ = value;
}
inline void Gear_report_503::set_gear_actual(::apollo::canbus::Gear_report_503_Gear_actualType value) {
  _internal_set_gear_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Gear_report_503.gear_actual)
}

// -------------------------------------------------------------------

// Park_report_504

// optional .apollo.canbus.Park_report_504.Parking_actualType parking_actual = 1;
inline bool Park_report_504::_internal_has_parking_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Park_report_504::has_parking_actual() const {
  return _internal_has_parking_actual();
}
inline void Park_report_504::clear_parking_actual() {
  _impl_.parking_actual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Park_report_504_Parking_actualType Park_report_504::_internal_parking_actual() const {
  return static_cast< ::apollo::canbus::Park_report_504_Parking_actualType >(_impl_.parking_actual_);
}
inline ::apollo::canbus::Park_report_504_Parking_actualType Park_report_504::parking_actual() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Park_report_504.parking_actual)
  return _internal_parking_actual();
}
inline void Park_report_504::_internal_set_parking_actual(::apollo::canbus::Park_report_504_Parking_actualType value) {
  assert(::apollo::canbus::Park_report_504_Parking_actualType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parking_actual_ = value;
}
inline void Park_report_504::set_parking_actual(::apollo::canbus::Park_report_504_Parking_actualType value) {
  _internal_set_parking_actual(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Park_report_504.parking_actual)
}

// optional .apollo.canbus.Park_report_504.Park_fltType park_flt = 2;
inline bool Park_report_504::_internal_has_park_flt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Park_report_504::has_park_flt() const {
  return _internal_has_park_flt();
}
inline void Park_report_504::clear_park_flt() {
  _impl_.park_flt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Park_report_504_Park_fltType Park_report_504::_internal_park_flt() const {
  return static_cast< ::apollo::canbus::Park_report_504_Park_fltType >(_impl_.park_flt_);
}
inline ::apollo::canbus::Park_report_504_Park_fltType Park_report_504::park_flt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Park_report_504.park_flt)
  return _internal_park_flt();
}
inline void Park_report_504::_internal_set_park_flt(::apollo::canbus::Park_report_504_Park_fltType value) {
  assert(::apollo::canbus::Park_report_504_Park_fltType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.park_flt_ = value;
}
inline void Park_report_504::set_park_flt(::apollo::canbus::Park_report_504_Park_fltType value) {
  _internal_set_park_flt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Park_report_504.park_flt)
}

// -------------------------------------------------------------------

// Vcu_report_505

// optional .apollo.canbus.Vcu_report_505.Vehicle_mode_stateType vehicle_mode_state = 1;
inline bool Vcu_report_505::_internal_has_vehicle_mode_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcu_report_505::has_vehicle_mode_state() const {
  return _internal_has_vehicle_mode_state();
}
inline void Vcu_report_505::clear_vehicle_mode_state() {
  _impl_.vehicle_mode_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType Vcu_report_505::_internal_vehicle_mode_state() const {
  return static_cast< ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType >(_impl_.vehicle_mode_state_);
}
inline ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType Vcu_report_505::vehicle_mode_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.vehicle_mode_state)
  return _internal_vehicle_mode_state();
}
inline void Vcu_report_505::_internal_set_vehicle_mode_state(::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType value) {
  assert(::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vehicle_mode_state_ = value;
}
inline void Vcu_report_505::set_vehicle_mode_state(::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType value) {
  _internal_set_vehicle_mode_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.vehicle_mode_state)
}

// optional .apollo.canbus.Vcu_report_505.Frontcrash_stateType frontcrash_state = 2;
inline bool Vcu_report_505::_internal_has_frontcrash_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcu_report_505::has_frontcrash_state() const {
  return _internal_has_frontcrash_state();
}
inline void Vcu_report_505::clear_frontcrash_state() {
  _impl_.frontcrash_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Vcu_report_505_Frontcrash_stateType Vcu_report_505::_internal_frontcrash_state() const {
  return static_cast< ::apollo::canbus::Vcu_report_505_Frontcrash_stateType >(_impl_.frontcrash_state_);
}
inline ::apollo::canbus::Vcu_report_505_Frontcrash_stateType Vcu_report_505::frontcrash_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.frontcrash_state)
  return _internal_frontcrash_state();
}
inline void Vcu_report_505::_internal_set_frontcrash_state(::apollo::canbus::Vcu_report_505_Frontcrash_stateType value) {
  assert(::apollo::canbus::Vcu_report_505_Frontcrash_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frontcrash_state_ = value;
}
inline void Vcu_report_505::set_frontcrash_state(::apollo::canbus::Vcu_report_505_Frontcrash_stateType value) {
  _internal_set_frontcrash_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.frontcrash_state)
}

// optional .apollo.canbus.Vcu_report_505.Backcrash_stateType backcrash_state = 3;
inline bool Vcu_report_505::_internal_has_backcrash_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcu_report_505::has_backcrash_state() const {
  return _internal_has_backcrash_state();
}
inline void Vcu_report_505::clear_backcrash_state() {
  _impl_.backcrash_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Vcu_report_505_Backcrash_stateType Vcu_report_505::_internal_backcrash_state() const {
  return static_cast< ::apollo::canbus::Vcu_report_505_Backcrash_stateType >(_impl_.backcrash_state_);
}
inline ::apollo::canbus::Vcu_report_505_Backcrash_stateType Vcu_report_505::backcrash_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.backcrash_state)
  return _internal_backcrash_state();
}
inline void Vcu_report_505::_internal_set_backcrash_state(::apollo::canbus::Vcu_report_505_Backcrash_stateType value) {
  assert(::apollo::canbus::Vcu_report_505_Backcrash_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backcrash_state_ = value;
}
inline void Vcu_report_505::set_backcrash_state(::apollo::canbus::Vcu_report_505_Backcrash_stateType value) {
  _internal_set_backcrash_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.backcrash_state)
}

// optional .apollo.canbus.Vcu_report_505.Aeb_stateType aeb_state = 4;
inline bool Vcu_report_505::_internal_has_aeb_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcu_report_505::has_aeb_state() const {
  return _internal_has_aeb_state();
}
inline void Vcu_report_505::clear_aeb_state() {
  _impl_.aeb_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Vcu_report_505_Aeb_stateType Vcu_report_505::_internal_aeb_state() const {
  return static_cast< ::apollo::canbus::Vcu_report_505_Aeb_stateType >(_impl_.aeb_state_);
}
inline ::apollo::canbus::Vcu_report_505_Aeb_stateType Vcu_report_505::aeb_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.aeb_state)
  return _internal_aeb_state();
}
inline void Vcu_report_505::_internal_set_aeb_state(::apollo::canbus::Vcu_report_505_Aeb_stateType value) {
  assert(::apollo::canbus::Vcu_report_505_Aeb_stateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aeb_state_ = value;
}
inline void Vcu_report_505::set_aeb_state(::apollo::canbus::Vcu_report_505_Aeb_stateType value) {
  _internal_set_aeb_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.aeb_state)
}

// optional double acc = 5;
inline bool Vcu_report_505::_internal_has_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcu_report_505::has_acc() const {
  return _internal_has_acc();
}
inline void Vcu_report_505::clear_acc() {
  _impl_.acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Vcu_report_505::_internal_acc() const {
  return _impl_.acc_;
}
inline double Vcu_report_505::acc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.acc)
  return _internal_acc();
}
inline void Vcu_report_505::_internal_set_acc(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.acc_ = value;
}
inline void Vcu_report_505::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.acc)
}

// optional double speed = 6;
inline bool Vcu_report_505::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcu_report_505::has_speed() const {
  return _internal_has_speed();
}
inline void Vcu_report_505::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Vcu_report_505::_internal_speed() const {
  return _impl_.speed_;
}
inline double Vcu_report_505::speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcu_report_505.speed)
  return _internal_speed();
}
inline void Vcu_report_505::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.speed_ = value;
}
inline void Vcu_report_505::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcu_report_505.speed)
}

// -------------------------------------------------------------------

// Wheelspeed_report_506

// optional double rr = 1;
inline bool Wheelspeed_report_506::_internal_has_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wheelspeed_report_506::has_rr() const {
  return _internal_has_rr();
}
inline void Wheelspeed_report_506::clear_rr() {
  _impl_.rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Wheelspeed_report_506::_internal_rr() const {
  return _impl_.rr_;
}
inline double Wheelspeed_report_506::rr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheelspeed_report_506.rr)
  return _internal_rr();
}
inline void Wheelspeed_report_506::_internal_set_rr(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rr_ = value;
}
inline void Wheelspeed_report_506::set_rr(double value) {
  _internal_set_rr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheelspeed_report_506.rr)
}

// optional double rl = 2;
inline bool Wheelspeed_report_506::_internal_has_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wheelspeed_report_506::has_rl() const {
  return _internal_has_rl();
}
inline void Wheelspeed_report_506::clear_rl() {
  _impl_.rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Wheelspeed_report_506::_internal_rl() const {
  return _impl_.rl_;
}
inline double Wheelspeed_report_506::rl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheelspeed_report_506.rl)
  return _internal_rl();
}
inline void Wheelspeed_report_506::_internal_set_rl(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rl_ = value;
}
inline void Wheelspeed_report_506::set_rl(double value) {
  _internal_set_rl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheelspeed_report_506.rl)
}

// optional double fr = 3;
inline bool Wheelspeed_report_506::_internal_has_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Wheelspeed_report_506::has_fr() const {
  return _internal_has_fr();
}
inline void Wheelspeed_report_506::clear_fr() {
  _impl_.fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Wheelspeed_report_506::_internal_fr() const {
  return _impl_.fr_;
}
inline double Wheelspeed_report_506::fr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheelspeed_report_506.fr)
  return _internal_fr();
}
inline void Wheelspeed_report_506::_internal_set_fr(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fr_ = value;
}
inline void Wheelspeed_report_506::set_fr(double value) {
  _internal_set_fr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheelspeed_report_506.fr)
}

// optional double fl = 4;
inline bool Wheelspeed_report_506::_internal_has_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Wheelspeed_report_506::has_fl() const {
  return _internal_has_fl();
}
inline void Wheelspeed_report_506::clear_fl() {
  _impl_.fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Wheelspeed_report_506::_internal_fl() const {
  return _impl_.fl_;
}
inline double Wheelspeed_report_506::fl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheelspeed_report_506.fl)
  return _internal_fl();
}
inline void Wheelspeed_report_506::_internal_set_fl(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fl_ = value;
}
inline void Wheelspeed_report_506::set_fl(double value) {
  _internal_set_fl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheelspeed_report_506.fl)
}

// -------------------------------------------------------------------

// Ultr_sensor_1_507

// optional double uiuss9_tof_direct = 1;
inline bool Ultr_sensor_1_507::_internal_has_uiuss9_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultr_sensor_1_507::has_uiuss9_tof_direct() const {
  return _internal_has_uiuss9_tof_direct();
}
inline void Ultr_sensor_1_507::clear_uiuss9_tof_direct() {
  _impl_.uiuss9_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ultr_sensor_1_507::_internal_uiuss9_tof_direct() const {
  return _impl_.uiuss9_tof_direct_;
}
inline double Ultr_sensor_1_507::uiuss9_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_1_507.uiuss9_tof_direct)
  return _internal_uiuss9_tof_direct();
}
inline void Ultr_sensor_1_507::_internal_set_uiuss9_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uiuss9_tof_direct_ = value;
}
inline void Ultr_sensor_1_507::set_uiuss9_tof_direct(double value) {
  _internal_set_uiuss9_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_1_507.uiuss9_tof_direct)
}

// optional double uiuss8_tof_direct = 2;
inline bool Ultr_sensor_1_507::_internal_has_uiuss8_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultr_sensor_1_507::has_uiuss8_tof_direct() const {
  return _internal_has_uiuss8_tof_direct();
}
inline void Ultr_sensor_1_507::clear_uiuss8_tof_direct() {
  _impl_.uiuss8_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ultr_sensor_1_507::_internal_uiuss8_tof_direct() const {
  return _impl_.uiuss8_tof_direct_;
}
inline double Ultr_sensor_1_507::uiuss8_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_1_507.uiuss8_tof_direct)
  return _internal_uiuss8_tof_direct();
}
inline void Ultr_sensor_1_507::_internal_set_uiuss8_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uiuss8_tof_direct_ = value;
}
inline void Ultr_sensor_1_507::set_uiuss8_tof_direct(double value) {
  _internal_set_uiuss8_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_1_507.uiuss8_tof_direct)
}

// optional double uiuss11_tof_direct = 3;
inline bool Ultr_sensor_1_507::_internal_has_uiuss11_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultr_sensor_1_507::has_uiuss11_tof_direct() const {
  return _internal_has_uiuss11_tof_direct();
}
inline void Ultr_sensor_1_507::clear_uiuss11_tof_direct() {
  _impl_.uiuss11_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ultr_sensor_1_507::_internal_uiuss11_tof_direct() const {
  return _impl_.uiuss11_tof_direct_;
}
inline double Ultr_sensor_1_507::uiuss11_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_1_507.uiuss11_tof_direct)
  return _internal_uiuss11_tof_direct();
}
inline void Ultr_sensor_1_507::_internal_set_uiuss11_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiuss11_tof_direct_ = value;
}
inline void Ultr_sensor_1_507::set_uiuss11_tof_direct(double value) {
  _internal_set_uiuss11_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_1_507.uiuss11_tof_direct)
}

// optional double uiuss10_tof_direct = 4;
inline bool Ultr_sensor_1_507::_internal_has_uiuss10_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultr_sensor_1_507::has_uiuss10_tof_direct() const {
  return _internal_has_uiuss10_tof_direct();
}
inline void Ultr_sensor_1_507::clear_uiuss10_tof_direct() {
  _impl_.uiuss10_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ultr_sensor_1_507::_internal_uiuss10_tof_direct() const {
  return _impl_.uiuss10_tof_direct_;
}
inline double Ultr_sensor_1_507::uiuss10_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_1_507.uiuss10_tof_direct)
  return _internal_uiuss10_tof_direct();
}
inline void Ultr_sensor_1_507::_internal_set_uiuss10_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiuss10_tof_direct_ = value;
}
inline void Ultr_sensor_1_507::set_uiuss10_tof_direct(double value) {
  _internal_set_uiuss10_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_1_507.uiuss10_tof_direct)
}

// -------------------------------------------------------------------

// Ultr_sensor_2_508

// optional double uiuss9_tof_indirect = 1;
inline bool Ultr_sensor_2_508::_internal_has_uiuss9_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultr_sensor_2_508::has_uiuss9_tof_indirect() const {
  return _internal_has_uiuss9_tof_indirect();
}
inline void Ultr_sensor_2_508::clear_uiuss9_tof_indirect() {
  _impl_.uiuss9_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ultr_sensor_2_508::_internal_uiuss9_tof_indirect() const {
  return _impl_.uiuss9_tof_indirect_;
}
inline double Ultr_sensor_2_508::uiuss9_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_2_508.uiuss9_tof_indirect)
  return _internal_uiuss9_tof_indirect();
}
inline void Ultr_sensor_2_508::_internal_set_uiuss9_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uiuss9_tof_indirect_ = value;
}
inline void Ultr_sensor_2_508::set_uiuss9_tof_indirect(double value) {
  _internal_set_uiuss9_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_2_508.uiuss9_tof_indirect)
}

// optional double uiuss8_tof_indirect = 2;
inline bool Ultr_sensor_2_508::_internal_has_uiuss8_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultr_sensor_2_508::has_uiuss8_tof_indirect() const {
  return _internal_has_uiuss8_tof_indirect();
}
inline void Ultr_sensor_2_508::clear_uiuss8_tof_indirect() {
  _impl_.uiuss8_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ultr_sensor_2_508::_internal_uiuss8_tof_indirect() const {
  return _impl_.uiuss8_tof_indirect_;
}
inline double Ultr_sensor_2_508::uiuss8_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_2_508.uiuss8_tof_indirect)
  return _internal_uiuss8_tof_indirect();
}
inline void Ultr_sensor_2_508::_internal_set_uiuss8_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uiuss8_tof_indirect_ = value;
}
inline void Ultr_sensor_2_508::set_uiuss8_tof_indirect(double value) {
  _internal_set_uiuss8_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_2_508.uiuss8_tof_indirect)
}

// optional double uiuss11_tof_indirect = 3;
inline bool Ultr_sensor_2_508::_internal_has_uiuss11_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultr_sensor_2_508::has_uiuss11_tof_indirect() const {
  return _internal_has_uiuss11_tof_indirect();
}
inline void Ultr_sensor_2_508::clear_uiuss11_tof_indirect() {
  _impl_.uiuss11_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ultr_sensor_2_508::_internal_uiuss11_tof_indirect() const {
  return _impl_.uiuss11_tof_indirect_;
}
inline double Ultr_sensor_2_508::uiuss11_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_2_508.uiuss11_tof_indirect)
  return _internal_uiuss11_tof_indirect();
}
inline void Ultr_sensor_2_508::_internal_set_uiuss11_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiuss11_tof_indirect_ = value;
}
inline void Ultr_sensor_2_508::set_uiuss11_tof_indirect(double value) {
  _internal_set_uiuss11_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_2_508.uiuss11_tof_indirect)
}

// optional double uiuss10_tof_indirect = 4;
inline bool Ultr_sensor_2_508::_internal_has_uiuss10_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultr_sensor_2_508::has_uiuss10_tof_indirect() const {
  return _internal_has_uiuss10_tof_indirect();
}
inline void Ultr_sensor_2_508::clear_uiuss10_tof_indirect() {
  _impl_.uiuss10_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ultr_sensor_2_508::_internal_uiuss10_tof_indirect() const {
  return _impl_.uiuss10_tof_indirect_;
}
inline double Ultr_sensor_2_508::uiuss10_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_2_508.uiuss10_tof_indirect)
  return _internal_uiuss10_tof_indirect();
}
inline void Ultr_sensor_2_508::_internal_set_uiuss10_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiuss10_tof_indirect_ = value;
}
inline void Ultr_sensor_2_508::set_uiuss10_tof_indirect(double value) {
  _internal_set_uiuss10_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_2_508.uiuss10_tof_indirect)
}

// -------------------------------------------------------------------

// Ultr_sensor_3_509

// optional double uiuss5_tof_direct = 1;
inline bool Ultr_sensor_3_509::_internal_has_uiuss5_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultr_sensor_3_509::has_uiuss5_tof_direct() const {
  return _internal_has_uiuss5_tof_direct();
}
inline void Ultr_sensor_3_509::clear_uiuss5_tof_direct() {
  _impl_.uiuss5_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ultr_sensor_3_509::_internal_uiuss5_tof_direct() const {
  return _impl_.uiuss5_tof_direct_;
}
inline double Ultr_sensor_3_509::uiuss5_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_3_509.uiuss5_tof_direct)
  return _internal_uiuss5_tof_direct();
}
inline void Ultr_sensor_3_509::_internal_set_uiuss5_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uiuss5_tof_direct_ = value;
}
inline void Ultr_sensor_3_509::set_uiuss5_tof_direct(double value) {
  _internal_set_uiuss5_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_3_509.uiuss5_tof_direct)
}

// optional double uiuss4_tof_direct = 2;
inline bool Ultr_sensor_3_509::_internal_has_uiuss4_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultr_sensor_3_509::has_uiuss4_tof_direct() const {
  return _internal_has_uiuss4_tof_direct();
}
inline void Ultr_sensor_3_509::clear_uiuss4_tof_direct() {
  _impl_.uiuss4_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ultr_sensor_3_509::_internal_uiuss4_tof_direct() const {
  return _impl_.uiuss4_tof_direct_;
}
inline double Ultr_sensor_3_509::uiuss4_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_3_509.uiuss4_tof_direct)
  return _internal_uiuss4_tof_direct();
}
inline void Ultr_sensor_3_509::_internal_set_uiuss4_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uiuss4_tof_direct_ = value;
}
inline void Ultr_sensor_3_509::set_uiuss4_tof_direct(double value) {
  _internal_set_uiuss4_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_3_509.uiuss4_tof_direct)
}

// optional double uiuss3_tof_direct = 3;
inline bool Ultr_sensor_3_509::_internal_has_uiuss3_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultr_sensor_3_509::has_uiuss3_tof_direct() const {
  return _internal_has_uiuss3_tof_direct();
}
inline void Ultr_sensor_3_509::clear_uiuss3_tof_direct() {
  _impl_.uiuss3_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ultr_sensor_3_509::_internal_uiuss3_tof_direct() const {
  return _impl_.uiuss3_tof_direct_;
}
inline double Ultr_sensor_3_509::uiuss3_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_3_509.uiuss3_tof_direct)
  return _internal_uiuss3_tof_direct();
}
inline void Ultr_sensor_3_509::_internal_set_uiuss3_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiuss3_tof_direct_ = value;
}
inline void Ultr_sensor_3_509::set_uiuss3_tof_direct(double value) {
  _internal_set_uiuss3_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_3_509.uiuss3_tof_direct)
}

// optional double uiuss2_tof_direct = 4;
inline bool Ultr_sensor_3_509::_internal_has_uiuss2_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultr_sensor_3_509::has_uiuss2_tof_direct() const {
  return _internal_has_uiuss2_tof_direct();
}
inline void Ultr_sensor_3_509::clear_uiuss2_tof_direct() {
  _impl_.uiuss2_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ultr_sensor_3_509::_internal_uiuss2_tof_direct() const {
  return _impl_.uiuss2_tof_direct_;
}
inline double Ultr_sensor_3_509::uiuss2_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_3_509.uiuss2_tof_direct)
  return _internal_uiuss2_tof_direct();
}
inline void Ultr_sensor_3_509::_internal_set_uiuss2_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiuss2_tof_direct_ = value;
}
inline void Ultr_sensor_3_509::set_uiuss2_tof_direct(double value) {
  _internal_set_uiuss2_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_3_509.uiuss2_tof_direct)
}

// -------------------------------------------------------------------

// Ultr_sensor_4_510

// optional double uiuss5_tof_indirect = 1;
inline bool Ultr_sensor_4_510::_internal_has_uiuss5_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultr_sensor_4_510::has_uiuss5_tof_indirect() const {
  return _internal_has_uiuss5_tof_indirect();
}
inline void Ultr_sensor_4_510::clear_uiuss5_tof_indirect() {
  _impl_.uiuss5_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ultr_sensor_4_510::_internal_uiuss5_tof_indirect() const {
  return _impl_.uiuss5_tof_indirect_;
}
inline double Ultr_sensor_4_510::uiuss5_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_4_510.uiuss5_tof_indirect)
  return _internal_uiuss5_tof_indirect();
}
inline void Ultr_sensor_4_510::_internal_set_uiuss5_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uiuss5_tof_indirect_ = value;
}
inline void Ultr_sensor_4_510::set_uiuss5_tof_indirect(double value) {
  _internal_set_uiuss5_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_4_510.uiuss5_tof_indirect)
}

// optional double uiuss4_tof_indirect = 2;
inline bool Ultr_sensor_4_510::_internal_has_uiuss4_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultr_sensor_4_510::has_uiuss4_tof_indirect() const {
  return _internal_has_uiuss4_tof_indirect();
}
inline void Ultr_sensor_4_510::clear_uiuss4_tof_indirect() {
  _impl_.uiuss4_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ultr_sensor_4_510::_internal_uiuss4_tof_indirect() const {
  return _impl_.uiuss4_tof_indirect_;
}
inline double Ultr_sensor_4_510::uiuss4_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_4_510.uiuss4_tof_indirect)
  return _internal_uiuss4_tof_indirect();
}
inline void Ultr_sensor_4_510::_internal_set_uiuss4_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uiuss4_tof_indirect_ = value;
}
inline void Ultr_sensor_4_510::set_uiuss4_tof_indirect(double value) {
  _internal_set_uiuss4_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_4_510.uiuss4_tof_indirect)
}

// optional double uiuss3_tof_indirect = 3;
inline bool Ultr_sensor_4_510::_internal_has_uiuss3_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultr_sensor_4_510::has_uiuss3_tof_indirect() const {
  return _internal_has_uiuss3_tof_indirect();
}
inline void Ultr_sensor_4_510::clear_uiuss3_tof_indirect() {
  _impl_.uiuss3_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ultr_sensor_4_510::_internal_uiuss3_tof_indirect() const {
  return _impl_.uiuss3_tof_indirect_;
}
inline double Ultr_sensor_4_510::uiuss3_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_4_510.uiuss3_tof_indirect)
  return _internal_uiuss3_tof_indirect();
}
inline void Ultr_sensor_4_510::_internal_set_uiuss3_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiuss3_tof_indirect_ = value;
}
inline void Ultr_sensor_4_510::set_uiuss3_tof_indirect(double value) {
  _internal_set_uiuss3_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_4_510.uiuss3_tof_indirect)
}

// optional double uiuss2_tof_indirect = 4;
inline bool Ultr_sensor_4_510::_internal_has_uiuss2_tof_indirect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultr_sensor_4_510::has_uiuss2_tof_indirect() const {
  return _internal_has_uiuss2_tof_indirect();
}
inline void Ultr_sensor_4_510::clear_uiuss2_tof_indirect() {
  _impl_.uiuss2_tof_indirect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ultr_sensor_4_510::_internal_uiuss2_tof_indirect() const {
  return _impl_.uiuss2_tof_indirect_;
}
inline double Ultr_sensor_4_510::uiuss2_tof_indirect() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_4_510.uiuss2_tof_indirect)
  return _internal_uiuss2_tof_indirect();
}
inline void Ultr_sensor_4_510::_internal_set_uiuss2_tof_indirect(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiuss2_tof_indirect_ = value;
}
inline void Ultr_sensor_4_510::set_uiuss2_tof_indirect(double value) {
  _internal_set_uiuss2_tof_indirect(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_4_510.uiuss2_tof_indirect)
}

// -------------------------------------------------------------------

// Ultr_sensor_5_511

// optional double uiuss7_tof_direct = 1;
inline bool Ultr_sensor_5_511::_internal_has_uiuss7_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultr_sensor_5_511::has_uiuss7_tof_direct() const {
  return _internal_has_uiuss7_tof_direct();
}
inline void Ultr_sensor_5_511::clear_uiuss7_tof_direct() {
  _impl_.uiuss7_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Ultr_sensor_5_511::_internal_uiuss7_tof_direct() const {
  return _impl_.uiuss7_tof_direct_;
}
inline double Ultr_sensor_5_511::uiuss7_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_5_511.uiuss7_tof_direct)
  return _internal_uiuss7_tof_direct();
}
inline void Ultr_sensor_5_511::_internal_set_uiuss7_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uiuss7_tof_direct_ = value;
}
inline void Ultr_sensor_5_511::set_uiuss7_tof_direct(double value) {
  _internal_set_uiuss7_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_5_511.uiuss7_tof_direct)
}

// optional double uiuss6_tof_direct = 2;
inline bool Ultr_sensor_5_511::_internal_has_uiuss6_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultr_sensor_5_511::has_uiuss6_tof_direct() const {
  return _internal_has_uiuss6_tof_direct();
}
inline void Ultr_sensor_5_511::clear_uiuss6_tof_direct() {
  _impl_.uiuss6_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Ultr_sensor_5_511::_internal_uiuss6_tof_direct() const {
  return _impl_.uiuss6_tof_direct_;
}
inline double Ultr_sensor_5_511::uiuss6_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_5_511.uiuss6_tof_direct)
  return _internal_uiuss6_tof_direct();
}
inline void Ultr_sensor_5_511::_internal_set_uiuss6_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uiuss6_tof_direct_ = value;
}
inline void Ultr_sensor_5_511::set_uiuss6_tof_direct(double value) {
  _internal_set_uiuss6_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_5_511.uiuss6_tof_direct)
}

// optional double uiuss1_tof_direct = 3;
inline bool Ultr_sensor_5_511::_internal_has_uiuss1_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultr_sensor_5_511::has_uiuss1_tof_direct() const {
  return _internal_has_uiuss1_tof_direct();
}
inline void Ultr_sensor_5_511::clear_uiuss1_tof_direct() {
  _impl_.uiuss1_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Ultr_sensor_5_511::_internal_uiuss1_tof_direct() const {
  return _impl_.uiuss1_tof_direct_;
}
inline double Ultr_sensor_5_511::uiuss1_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_5_511.uiuss1_tof_direct)
  return _internal_uiuss1_tof_direct();
}
inline void Ultr_sensor_5_511::_internal_set_uiuss1_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiuss1_tof_direct_ = value;
}
inline void Ultr_sensor_5_511::set_uiuss1_tof_direct(double value) {
  _internal_set_uiuss1_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_5_511.uiuss1_tof_direct)
}

// optional double uiuss0_tof_direct = 4;
inline bool Ultr_sensor_5_511::_internal_has_uiuss0_tof_direct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultr_sensor_5_511::has_uiuss0_tof_direct() const {
  return _internal_has_uiuss0_tof_direct();
}
inline void Ultr_sensor_5_511::clear_uiuss0_tof_direct() {
  _impl_.uiuss0_tof_direct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Ultr_sensor_5_511::_internal_uiuss0_tof_direct() const {
  return _impl_.uiuss0_tof_direct_;
}
inline double Ultr_sensor_5_511::uiuss0_tof_direct() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Ultr_sensor_5_511.uiuss0_tof_direct)
  return _internal_uiuss0_tof_direct();
}
inline void Ultr_sensor_5_511::_internal_set_uiuss0_tof_direct(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiuss0_tof_direct_ = value;
}
inline void Ultr_sensor_5_511::set_uiuss0_tof_direct(double value) {
  _internal_set_uiuss0_tof_direct(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Ultr_sensor_5_511.uiuss0_tof_direct)
}

// -------------------------------------------------------------------

// Bms_report_512

// optional double battery_current = 1;
inline bool Bms_report_512::_internal_has_battery_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bms_report_512::has_battery_current() const {
  return _internal_has_battery_current();
}
inline void Bms_report_512::clear_battery_current() {
  _impl_.battery_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Bms_report_512::_internal_battery_current() const {
  return _impl_.battery_current_;
}
inline double Bms_report_512::battery_current() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bms_report_512.battery_current)
  return _internal_battery_current();
}
inline void Bms_report_512::_internal_set_battery_current(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.battery_current_ = value;
}
inline void Bms_report_512::set_battery_current(double value) {
  _internal_set_battery_current(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bms_report_512.battery_current)
}

// optional double battery_voltage = 2;
inline bool Bms_report_512::_internal_has_battery_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bms_report_512::has_battery_voltage() const {
  return _internal_has_battery_voltage();
}
inline void Bms_report_512::clear_battery_voltage() {
  _impl_.battery_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Bms_report_512::_internal_battery_voltage() const {
  return _impl_.battery_voltage_;
}
inline double Bms_report_512::battery_voltage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bms_report_512.battery_voltage)
  return _internal_battery_voltage();
}
inline void Bms_report_512::_internal_set_battery_voltage(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.battery_voltage_ = value;
}
inline void Bms_report_512::set_battery_voltage(double value) {
  _internal_set_battery_voltage(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bms_report_512.battery_voltage)
}

// optional int32 battery_soc = 3;
inline bool Bms_report_512::_internal_has_battery_soc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bms_report_512::has_battery_soc() const {
  return _internal_has_battery_soc();
}
inline void Bms_report_512::clear_battery_soc() {
  _impl_.battery_soc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Bms_report_512::_internal_battery_soc() const {
  return _impl_.battery_soc_;
}
inline int32_t Bms_report_512::battery_soc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bms_report_512.battery_soc)
  return _internal_battery_soc();
}
inline void Bms_report_512::_internal_set_battery_soc(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.battery_soc_ = value;
}
inline void Bms_report_512::set_battery_soc(int32_t value) {
  _internal_set_battery_soc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bms_report_512.battery_soc)
}

// -------------------------------------------------------------------

// Devkit

// optional .apollo.canbus.Throttle_command_100 throttle_command_100 = 1;
inline bool Devkit::_internal_has_throttle_command_100() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.throttle_command_100_ != nullptr);
  return value;
}
inline bool Devkit::has_throttle_command_100() const {
  return _internal_has_throttle_command_100();
}
inline void Devkit::clear_throttle_command_100() {
  if (_impl_.throttle_command_100_ != nullptr) _impl_.throttle_command_100_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Throttle_command_100& Devkit::_internal_throttle_command_100() const {
  const ::apollo::canbus::Throttle_command_100* p = _impl_.throttle_command_100_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Throttle_command_100&>(
      ::apollo::canbus::_Throttle_command_100_default_instance_);
}
inline const ::apollo::canbus::Throttle_command_100& Devkit::throttle_command_100() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.throttle_command_100)
  return _internal_throttle_command_100();
}
inline void Devkit::unsafe_arena_set_allocated_throttle_command_100(
    ::apollo::canbus::Throttle_command_100* throttle_command_100) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_command_100_);
  }
  _impl_.throttle_command_100_ = throttle_command_100;
  if (throttle_command_100) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.throttle_command_100)
}
inline ::apollo::canbus::Throttle_command_100* Devkit::release_throttle_command_100() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Throttle_command_100* temp = _impl_.throttle_command_100_;
  _impl_.throttle_command_100_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Throttle_command_100* Devkit::unsafe_arena_release_throttle_command_100() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.throttle_command_100)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Throttle_command_100* temp = _impl_.throttle_command_100_;
  _impl_.throttle_command_100_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Throttle_command_100* Devkit::_internal_mutable_throttle_command_100() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.throttle_command_100_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Throttle_command_100>(GetArenaForAllocation());
    _impl_.throttle_command_100_ = p;
  }
  return _impl_.throttle_command_100_;
}
inline ::apollo::canbus::Throttle_command_100* Devkit::mutable_throttle_command_100() {
  ::apollo::canbus::Throttle_command_100* _msg = _internal_mutable_throttle_command_100();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.throttle_command_100)
  return _msg;
}
inline void Devkit::set_allocated_throttle_command_100(::apollo::canbus::Throttle_command_100* throttle_command_100) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.throttle_command_100_;
  }
  if (throttle_command_100) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_command_100);
    if (message_arena != submessage_arena) {
      throttle_command_100 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_command_100, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.throttle_command_100_ = throttle_command_100;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.throttle_command_100)
}

// optional .apollo.canbus.Brake_command_101 brake_command_101 = 2;
inline bool Devkit::_internal_has_brake_command_101() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_command_101_ != nullptr);
  return value;
}
inline bool Devkit::has_brake_command_101() const {
  return _internal_has_brake_command_101();
}
inline void Devkit::clear_brake_command_101() {
  if (_impl_.brake_command_101_ != nullptr) _impl_.brake_command_101_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Brake_command_101& Devkit::_internal_brake_command_101() const {
  const ::apollo::canbus::Brake_command_101* p = _impl_.brake_command_101_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Brake_command_101&>(
      ::apollo::canbus::_Brake_command_101_default_instance_);
}
inline const ::apollo::canbus::Brake_command_101& Devkit::brake_command_101() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.brake_command_101)
  return _internal_brake_command_101();
}
inline void Devkit::unsafe_arena_set_allocated_brake_command_101(
    ::apollo::canbus::Brake_command_101* brake_command_101) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_command_101_);
  }
  _impl_.brake_command_101_ = brake_command_101;
  if (brake_command_101) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.brake_command_101)
}
inline ::apollo::canbus::Brake_command_101* Devkit::release_brake_command_101() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Brake_command_101* temp = _impl_.brake_command_101_;
  _impl_.brake_command_101_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Brake_command_101* Devkit::unsafe_arena_release_brake_command_101() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.brake_command_101)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Brake_command_101* temp = _impl_.brake_command_101_;
  _impl_.brake_command_101_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_command_101* Devkit::_internal_mutable_brake_command_101() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.brake_command_101_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_command_101>(GetArenaForAllocation());
    _impl_.brake_command_101_ = p;
  }
  return _impl_.brake_command_101_;
}
inline ::apollo::canbus::Brake_command_101* Devkit::mutable_brake_command_101() {
  ::apollo::canbus::Brake_command_101* _msg = _internal_mutable_brake_command_101();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.brake_command_101)
  return _msg;
}
inline void Devkit::set_allocated_brake_command_101(::apollo::canbus::Brake_command_101* brake_command_101) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.brake_command_101_;
  }
  if (brake_command_101) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(brake_command_101);
    if (message_arena != submessage_arena) {
      brake_command_101 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_command_101, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.brake_command_101_ = brake_command_101;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.brake_command_101)
}

// optional .apollo.canbus.Steering_command_102 steering_command_102 = 3;
inline bool Devkit::_internal_has_steering_command_102() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steering_command_102_ != nullptr);
  return value;
}
inline bool Devkit::has_steering_command_102() const {
  return _internal_has_steering_command_102();
}
inline void Devkit::clear_steering_command_102() {
  if (_impl_.steering_command_102_ != nullptr) _impl_.steering_command_102_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Steering_command_102& Devkit::_internal_steering_command_102() const {
  const ::apollo::canbus::Steering_command_102* p = _impl_.steering_command_102_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Steering_command_102&>(
      ::apollo::canbus::_Steering_command_102_default_instance_);
}
inline const ::apollo::canbus::Steering_command_102& Devkit::steering_command_102() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.steering_command_102)
  return _internal_steering_command_102();
}
inline void Devkit::unsafe_arena_set_allocated_steering_command_102(
    ::apollo::canbus::Steering_command_102* steering_command_102) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steering_command_102_);
  }
  _impl_.steering_command_102_ = steering_command_102;
  if (steering_command_102) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.steering_command_102)
}
inline ::apollo::canbus::Steering_command_102* Devkit::release_steering_command_102() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Steering_command_102* temp = _impl_.steering_command_102_;
  _impl_.steering_command_102_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Steering_command_102* Devkit::unsafe_arena_release_steering_command_102() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.steering_command_102)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Steering_command_102* temp = _impl_.steering_command_102_;
  _impl_.steering_command_102_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_command_102* Devkit::_internal_mutable_steering_command_102() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.steering_command_102_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_command_102>(GetArenaForAllocation());
    _impl_.steering_command_102_ = p;
  }
  return _impl_.steering_command_102_;
}
inline ::apollo::canbus::Steering_command_102* Devkit::mutable_steering_command_102() {
  ::apollo::canbus::Steering_command_102* _msg = _internal_mutable_steering_command_102();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.steering_command_102)
  return _msg;
}
inline void Devkit::set_allocated_steering_command_102(::apollo::canbus::Steering_command_102* steering_command_102) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.steering_command_102_;
  }
  if (steering_command_102) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(steering_command_102);
    if (message_arena != submessage_arena) {
      steering_command_102 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_command_102, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.steering_command_102_ = steering_command_102;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.steering_command_102)
}

// optional .apollo.canbus.Gear_command_103 gear_command_103 = 4;
inline bool Devkit::_internal_has_gear_command_103() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gear_command_103_ != nullptr);
  return value;
}
inline bool Devkit::has_gear_command_103() const {
  return _internal_has_gear_command_103();
}
inline void Devkit::clear_gear_command_103() {
  if (_impl_.gear_command_103_ != nullptr) _impl_.gear_command_103_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Gear_command_103& Devkit::_internal_gear_command_103() const {
  const ::apollo::canbus::Gear_command_103* p = _impl_.gear_command_103_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Gear_command_103&>(
      ::apollo::canbus::_Gear_command_103_default_instance_);
}
inline const ::apollo::canbus::Gear_command_103& Devkit::gear_command_103() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.gear_command_103)
  return _internal_gear_command_103();
}
inline void Devkit::unsafe_arena_set_allocated_gear_command_103(
    ::apollo::canbus::Gear_command_103* gear_command_103) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_command_103_);
  }
  _impl_.gear_command_103_ = gear_command_103;
  if (gear_command_103) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.gear_command_103)
}
inline ::apollo::canbus::Gear_command_103* Devkit::release_gear_command_103() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Gear_command_103* temp = _impl_.gear_command_103_;
  _impl_.gear_command_103_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Gear_command_103* Devkit::unsafe_arena_release_gear_command_103() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.gear_command_103)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Gear_command_103* temp = _impl_.gear_command_103_;
  _impl_.gear_command_103_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Gear_command_103* Devkit::_internal_mutable_gear_command_103() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.gear_command_103_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Gear_command_103>(GetArenaForAllocation());
    _impl_.gear_command_103_ = p;
  }
  return _impl_.gear_command_103_;
}
inline ::apollo::canbus::Gear_command_103* Devkit::mutable_gear_command_103() {
  ::apollo::canbus::Gear_command_103* _msg = _internal_mutable_gear_command_103();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.gear_command_103)
  return _msg;
}
inline void Devkit::set_allocated_gear_command_103(::apollo::canbus::Gear_command_103* gear_command_103) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gear_command_103_;
  }
  if (gear_command_103) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gear_command_103);
    if (message_arena != submessage_arena) {
      gear_command_103 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear_command_103, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.gear_command_103_ = gear_command_103;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.gear_command_103)
}

// optional .apollo.canbus.Park_command_104 park_command_104 = 5;
inline bool Devkit::_internal_has_park_command_104() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.park_command_104_ != nullptr);
  return value;
}
inline bool Devkit::has_park_command_104() const {
  return _internal_has_park_command_104();
}
inline void Devkit::clear_park_command_104() {
  if (_impl_.park_command_104_ != nullptr) _impl_.park_command_104_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Park_command_104& Devkit::_internal_park_command_104() const {
  const ::apollo::canbus::Park_command_104* p = _impl_.park_command_104_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Park_command_104&>(
      ::apollo::canbus::_Park_command_104_default_instance_);
}
inline const ::apollo::canbus::Park_command_104& Devkit::park_command_104() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.park_command_104)
  return _internal_park_command_104();
}
inline void Devkit::unsafe_arena_set_allocated_park_command_104(
    ::apollo::canbus::Park_command_104* park_command_104) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_command_104_);
  }
  _impl_.park_command_104_ = park_command_104;
  if (park_command_104) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.park_command_104)
}
inline ::apollo::canbus::Park_command_104* Devkit::release_park_command_104() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Park_command_104* temp = _impl_.park_command_104_;
  _impl_.park_command_104_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Park_command_104* Devkit::unsafe_arena_release_park_command_104() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.park_command_104)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Park_command_104* temp = _impl_.park_command_104_;
  _impl_.park_command_104_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Park_command_104* Devkit::_internal_mutable_park_command_104() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.park_command_104_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Park_command_104>(GetArenaForAllocation());
    _impl_.park_command_104_ = p;
  }
  return _impl_.park_command_104_;
}
inline ::apollo::canbus::Park_command_104* Devkit::mutable_park_command_104() {
  ::apollo::canbus::Park_command_104* _msg = _internal_mutable_park_command_104();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.park_command_104)
  return _msg;
}
inline void Devkit::set_allocated_park_command_104(::apollo::canbus::Park_command_104* park_command_104) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.park_command_104_;
  }
  if (park_command_104) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(park_command_104);
    if (message_arena != submessage_arena) {
      park_command_104 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park_command_104, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.park_command_104_ = park_command_104;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.park_command_104)
}

// optional .apollo.canbus.Throttle_report_500 throttle_report_500 = 6;
inline bool Devkit::_internal_has_throttle_report_500() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.throttle_report_500_ != nullptr);
  return value;
}
inline bool Devkit::has_throttle_report_500() const {
  return _internal_has_throttle_report_500();
}
inline void Devkit::clear_throttle_report_500() {
  if (_impl_.throttle_report_500_ != nullptr) _impl_.throttle_report_500_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Throttle_report_500& Devkit::_internal_throttle_report_500() const {
  const ::apollo::canbus::Throttle_report_500* p = _impl_.throttle_report_500_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Throttle_report_500&>(
      ::apollo::canbus::_Throttle_report_500_default_instance_);
}
inline const ::apollo::canbus::Throttle_report_500& Devkit::throttle_report_500() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.throttle_report_500)
  return _internal_throttle_report_500();
}
inline void Devkit::unsafe_arena_set_allocated_throttle_report_500(
    ::apollo::canbus::Throttle_report_500* throttle_report_500) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.throttle_report_500_);
  }
  _impl_.throttle_report_500_ = throttle_report_500;
  if (throttle_report_500) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.throttle_report_500)
}
inline ::apollo::canbus::Throttle_report_500* Devkit::release_throttle_report_500() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Throttle_report_500* temp = _impl_.throttle_report_500_;
  _impl_.throttle_report_500_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Throttle_report_500* Devkit::unsafe_arena_release_throttle_report_500() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.throttle_report_500)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Throttle_report_500* temp = _impl_.throttle_report_500_;
  _impl_.throttle_report_500_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Throttle_report_500* Devkit::_internal_mutable_throttle_report_500() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.throttle_report_500_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Throttle_report_500>(GetArenaForAllocation());
    _impl_.throttle_report_500_ = p;
  }
  return _impl_.throttle_report_500_;
}
inline ::apollo::canbus::Throttle_report_500* Devkit::mutable_throttle_report_500() {
  ::apollo::canbus::Throttle_report_500* _msg = _internal_mutable_throttle_report_500();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.throttle_report_500)
  return _msg;
}
inline void Devkit::set_allocated_throttle_report_500(::apollo::canbus::Throttle_report_500* throttle_report_500) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.throttle_report_500_;
  }
  if (throttle_report_500) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(throttle_report_500);
    if (message_arena != submessage_arena) {
      throttle_report_500 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_report_500, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.throttle_report_500_ = throttle_report_500;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.throttle_report_500)
}

// optional .apollo.canbus.Brake_report_501 brake_report_501 = 7;
inline bool Devkit::_internal_has_brake_report_501() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.brake_report_501_ != nullptr);
  return value;
}
inline bool Devkit::has_brake_report_501() const {
  return _internal_has_brake_report_501();
}
inline void Devkit::clear_brake_report_501() {
  if (_impl_.brake_report_501_ != nullptr) _impl_.brake_report_501_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Brake_report_501& Devkit::_internal_brake_report_501() const {
  const ::apollo::canbus::Brake_report_501* p = _impl_.brake_report_501_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Brake_report_501&>(
      ::apollo::canbus::_Brake_report_501_default_instance_);
}
inline const ::apollo::canbus::Brake_report_501& Devkit::brake_report_501() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.brake_report_501)
  return _internal_brake_report_501();
}
inline void Devkit::unsafe_arena_set_allocated_brake_report_501(
    ::apollo::canbus::Brake_report_501* brake_report_501) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brake_report_501_);
  }
  _impl_.brake_report_501_ = brake_report_501;
  if (brake_report_501) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.brake_report_501)
}
inline ::apollo::canbus::Brake_report_501* Devkit::release_brake_report_501() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Brake_report_501* temp = _impl_.brake_report_501_;
  _impl_.brake_report_501_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Brake_report_501* Devkit::unsafe_arena_release_brake_report_501() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.brake_report_501)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Brake_report_501* temp = _impl_.brake_report_501_;
  _impl_.brake_report_501_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_report_501* Devkit::_internal_mutable_brake_report_501() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.brake_report_501_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_report_501>(GetArenaForAllocation());
    _impl_.brake_report_501_ = p;
  }
  return _impl_.brake_report_501_;
}
inline ::apollo::canbus::Brake_report_501* Devkit::mutable_brake_report_501() {
  ::apollo::canbus::Brake_report_501* _msg = _internal_mutable_brake_report_501();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.brake_report_501)
  return _msg;
}
inline void Devkit::set_allocated_brake_report_501(::apollo::canbus::Brake_report_501* brake_report_501) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.brake_report_501_;
  }
  if (brake_report_501) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(brake_report_501);
    if (message_arena != submessage_arena) {
      brake_report_501 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_report_501, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.brake_report_501_ = brake_report_501;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.brake_report_501)
}

// optional .apollo.canbus.Steering_report_502 steering_report_502 = 8;
inline bool Devkit::_internal_has_steering_report_502() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steering_report_502_ != nullptr);
  return value;
}
inline bool Devkit::has_steering_report_502() const {
  return _internal_has_steering_report_502();
}
inline void Devkit::clear_steering_report_502() {
  if (_impl_.steering_report_502_ != nullptr) _impl_.steering_report_502_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Steering_report_502& Devkit::_internal_steering_report_502() const {
  const ::apollo::canbus::Steering_report_502* p = _impl_.steering_report_502_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Steering_report_502&>(
      ::apollo::canbus::_Steering_report_502_default_instance_);
}
inline const ::apollo::canbus::Steering_report_502& Devkit::steering_report_502() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.steering_report_502)
  return _internal_steering_report_502();
}
inline void Devkit::unsafe_arena_set_allocated_steering_report_502(
    ::apollo::canbus::Steering_report_502* steering_report_502) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steering_report_502_);
  }
  _impl_.steering_report_502_ = steering_report_502;
  if (steering_report_502) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.steering_report_502)
}
inline ::apollo::canbus::Steering_report_502* Devkit::release_steering_report_502() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Steering_report_502* temp = _impl_.steering_report_502_;
  _impl_.steering_report_502_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Steering_report_502* Devkit::unsafe_arena_release_steering_report_502() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.steering_report_502)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Steering_report_502* temp = _impl_.steering_report_502_;
  _impl_.steering_report_502_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_report_502* Devkit::_internal_mutable_steering_report_502() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.steering_report_502_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_report_502>(GetArenaForAllocation());
    _impl_.steering_report_502_ = p;
  }
  return _impl_.steering_report_502_;
}
inline ::apollo::canbus::Steering_report_502* Devkit::mutable_steering_report_502() {
  ::apollo::canbus::Steering_report_502* _msg = _internal_mutable_steering_report_502();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.steering_report_502)
  return _msg;
}
inline void Devkit::set_allocated_steering_report_502(::apollo::canbus::Steering_report_502* steering_report_502) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.steering_report_502_;
  }
  if (steering_report_502) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(steering_report_502);
    if (message_arena != submessage_arena) {
      steering_report_502 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_report_502, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.steering_report_502_ = steering_report_502;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.steering_report_502)
}

// optional .apollo.canbus.Gear_report_503 gear_report_503 = 9;
inline bool Devkit::_internal_has_gear_report_503() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gear_report_503_ != nullptr);
  return value;
}
inline bool Devkit::has_gear_report_503() const {
  return _internal_has_gear_report_503();
}
inline void Devkit::clear_gear_report_503() {
  if (_impl_.gear_report_503_ != nullptr) _impl_.gear_report_503_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Gear_report_503& Devkit::_internal_gear_report_503() const {
  const ::apollo::canbus::Gear_report_503* p = _impl_.gear_report_503_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Gear_report_503&>(
      ::apollo::canbus::_Gear_report_503_default_instance_);
}
inline const ::apollo::canbus::Gear_report_503& Devkit::gear_report_503() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.gear_report_503)
  return _internal_gear_report_503();
}
inline void Devkit::unsafe_arena_set_allocated_gear_report_503(
    ::apollo::canbus::Gear_report_503* gear_report_503) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gear_report_503_);
  }
  _impl_.gear_report_503_ = gear_report_503;
  if (gear_report_503) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.gear_report_503)
}
inline ::apollo::canbus::Gear_report_503* Devkit::release_gear_report_503() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Gear_report_503* temp = _impl_.gear_report_503_;
  _impl_.gear_report_503_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Gear_report_503* Devkit::unsafe_arena_release_gear_report_503() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.gear_report_503)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Gear_report_503* temp = _impl_.gear_report_503_;
  _impl_.gear_report_503_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Gear_report_503* Devkit::_internal_mutable_gear_report_503() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.gear_report_503_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Gear_report_503>(GetArenaForAllocation());
    _impl_.gear_report_503_ = p;
  }
  return _impl_.gear_report_503_;
}
inline ::apollo::canbus::Gear_report_503* Devkit::mutable_gear_report_503() {
  ::apollo::canbus::Gear_report_503* _msg = _internal_mutable_gear_report_503();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.gear_report_503)
  return _msg;
}
inline void Devkit::set_allocated_gear_report_503(::apollo::canbus::Gear_report_503* gear_report_503) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gear_report_503_;
  }
  if (gear_report_503) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gear_report_503);
    if (message_arena != submessage_arena) {
      gear_report_503 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gear_report_503, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.gear_report_503_ = gear_report_503;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.gear_report_503)
}

// optional .apollo.canbus.Park_report_504 park_report_504 = 10;
inline bool Devkit::_internal_has_park_report_504() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.park_report_504_ != nullptr);
  return value;
}
inline bool Devkit::has_park_report_504() const {
  return _internal_has_park_report_504();
}
inline void Devkit::clear_park_report_504() {
  if (_impl_.park_report_504_ != nullptr) _impl_.park_report_504_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Park_report_504& Devkit::_internal_park_report_504() const {
  const ::apollo::canbus::Park_report_504* p = _impl_.park_report_504_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Park_report_504&>(
      ::apollo::canbus::_Park_report_504_default_instance_);
}
inline const ::apollo::canbus::Park_report_504& Devkit::park_report_504() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.park_report_504)
  return _internal_park_report_504();
}
inline void Devkit::unsafe_arena_set_allocated_park_report_504(
    ::apollo::canbus::Park_report_504* park_report_504) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.park_report_504_);
  }
  _impl_.park_report_504_ = park_report_504;
  if (park_report_504) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.park_report_504)
}
inline ::apollo::canbus::Park_report_504* Devkit::release_park_report_504() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Park_report_504* temp = _impl_.park_report_504_;
  _impl_.park_report_504_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Park_report_504* Devkit::unsafe_arena_release_park_report_504() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.park_report_504)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Park_report_504* temp = _impl_.park_report_504_;
  _impl_.park_report_504_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Park_report_504* Devkit::_internal_mutable_park_report_504() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.park_report_504_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Park_report_504>(GetArenaForAllocation());
    _impl_.park_report_504_ = p;
  }
  return _impl_.park_report_504_;
}
inline ::apollo::canbus::Park_report_504* Devkit::mutable_park_report_504() {
  ::apollo::canbus::Park_report_504* _msg = _internal_mutable_park_report_504();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.park_report_504)
  return _msg;
}
inline void Devkit::set_allocated_park_report_504(::apollo::canbus::Park_report_504* park_report_504) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.park_report_504_;
  }
  if (park_report_504) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(park_report_504);
    if (message_arena != submessage_arena) {
      park_report_504 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park_report_504, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.park_report_504_ = park_report_504;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.park_report_504)
}

// optional .apollo.canbus.Vcu_report_505 vcu_report_505 = 11;
inline bool Devkit::_internal_has_vcu_report_505() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vcu_report_505_ != nullptr);
  return value;
}
inline bool Devkit::has_vcu_report_505() const {
  return _internal_has_vcu_report_505();
}
inline void Devkit::clear_vcu_report_505() {
  if (_impl_.vcu_report_505_ != nullptr) _impl_.vcu_report_505_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Vcu_report_505& Devkit::_internal_vcu_report_505() const {
  const ::apollo::canbus::Vcu_report_505* p = _impl_.vcu_report_505_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcu_report_505&>(
      ::apollo::canbus::_Vcu_report_505_default_instance_);
}
inline const ::apollo::canbus::Vcu_report_505& Devkit::vcu_report_505() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.vcu_report_505)
  return _internal_vcu_report_505();
}
inline void Devkit::unsafe_arena_set_allocated_vcu_report_505(
    ::apollo::canbus::Vcu_report_505* vcu_report_505) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vcu_report_505_);
  }
  _impl_.vcu_report_505_ = vcu_report_505;
  if (vcu_report_505) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.vcu_report_505)
}
inline ::apollo::canbus::Vcu_report_505* Devkit::release_vcu_report_505() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Vcu_report_505* temp = _impl_.vcu_report_505_;
  _impl_.vcu_report_505_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Vcu_report_505* Devkit::unsafe_arena_release_vcu_report_505() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.vcu_report_505)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Vcu_report_505* temp = _impl_.vcu_report_505_;
  _impl_.vcu_report_505_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcu_report_505* Devkit::_internal_mutable_vcu_report_505() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.vcu_report_505_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcu_report_505>(GetArenaForAllocation());
    _impl_.vcu_report_505_ = p;
  }
  return _impl_.vcu_report_505_;
}
inline ::apollo::canbus::Vcu_report_505* Devkit::mutable_vcu_report_505() {
  ::apollo::canbus::Vcu_report_505* _msg = _internal_mutable_vcu_report_505();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.vcu_report_505)
  return _msg;
}
inline void Devkit::set_allocated_vcu_report_505(::apollo::canbus::Vcu_report_505* vcu_report_505) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vcu_report_505_;
  }
  if (vcu_report_505) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vcu_report_505);
    if (message_arena != submessage_arena) {
      vcu_report_505 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcu_report_505, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.vcu_report_505_ = vcu_report_505;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.vcu_report_505)
}

// optional .apollo.canbus.Wheelspeed_report_506 wheelspeed_report_506 = 12;
inline bool Devkit::_internal_has_wheelspeed_report_506() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wheelspeed_report_506_ != nullptr);
  return value;
}
inline bool Devkit::has_wheelspeed_report_506() const {
  return _internal_has_wheelspeed_report_506();
}
inline void Devkit::clear_wheelspeed_report_506() {
  if (_impl_.wheelspeed_report_506_ != nullptr) _impl_.wheelspeed_report_506_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Wheelspeed_report_506& Devkit::_internal_wheelspeed_report_506() const {
  const ::apollo::canbus::Wheelspeed_report_506* p = _impl_.wheelspeed_report_506_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Wheelspeed_report_506&>(
      ::apollo::canbus::_Wheelspeed_report_506_default_instance_);
}
inline const ::apollo::canbus::Wheelspeed_report_506& Devkit::wheelspeed_report_506() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.wheelspeed_report_506)
  return _internal_wheelspeed_report_506();
}
inline void Devkit::unsafe_arena_set_allocated_wheelspeed_report_506(
    ::apollo::canbus::Wheelspeed_report_506* wheelspeed_report_506) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wheelspeed_report_506_);
  }
  _impl_.wheelspeed_report_506_ = wheelspeed_report_506;
  if (wheelspeed_report_506) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.wheelspeed_report_506)
}
inline ::apollo::canbus::Wheelspeed_report_506* Devkit::release_wheelspeed_report_506() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Wheelspeed_report_506* temp = _impl_.wheelspeed_report_506_;
  _impl_.wheelspeed_report_506_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Wheelspeed_report_506* Devkit::unsafe_arena_release_wheelspeed_report_506() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.wheelspeed_report_506)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Wheelspeed_report_506* temp = _impl_.wheelspeed_report_506_;
  _impl_.wheelspeed_report_506_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Wheelspeed_report_506* Devkit::_internal_mutable_wheelspeed_report_506() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.wheelspeed_report_506_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Wheelspeed_report_506>(GetArenaForAllocation());
    _impl_.wheelspeed_report_506_ = p;
  }
  return _impl_.wheelspeed_report_506_;
}
inline ::apollo::canbus::Wheelspeed_report_506* Devkit::mutable_wheelspeed_report_506() {
  ::apollo::canbus::Wheelspeed_report_506* _msg = _internal_mutable_wheelspeed_report_506();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.wheelspeed_report_506)
  return _msg;
}
inline void Devkit::set_allocated_wheelspeed_report_506(::apollo::canbus::Wheelspeed_report_506* wheelspeed_report_506) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wheelspeed_report_506_;
  }
  if (wheelspeed_report_506) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wheelspeed_report_506);
    if (message_arena != submessage_arena) {
      wheelspeed_report_506 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheelspeed_report_506, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.wheelspeed_report_506_ = wheelspeed_report_506;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.wheelspeed_report_506)
}

// optional .apollo.canbus.Ultr_sensor_1_507 ultr_sensor_1_507 = 13;
inline bool Devkit::_internal_has_ultr_sensor_1_507() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ultr_sensor_1_507_ != nullptr);
  return value;
}
inline bool Devkit::has_ultr_sensor_1_507() const {
  return _internal_has_ultr_sensor_1_507();
}
inline void Devkit::clear_ultr_sensor_1_507() {
  if (_impl_.ultr_sensor_1_507_ != nullptr) _impl_.ultr_sensor_1_507_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::canbus::Ultr_sensor_1_507& Devkit::_internal_ultr_sensor_1_507() const {
  const ::apollo::canbus::Ultr_sensor_1_507* p = _impl_.ultr_sensor_1_507_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ultr_sensor_1_507&>(
      ::apollo::canbus::_Ultr_sensor_1_507_default_instance_);
}
inline const ::apollo::canbus::Ultr_sensor_1_507& Devkit::ultr_sensor_1_507() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.ultr_sensor_1_507)
  return _internal_ultr_sensor_1_507();
}
inline void Devkit::unsafe_arena_set_allocated_ultr_sensor_1_507(
    ::apollo::canbus::Ultr_sensor_1_507* ultr_sensor_1_507) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ultr_sensor_1_507_);
  }
  _impl_.ultr_sensor_1_507_ = ultr_sensor_1_507;
  if (ultr_sensor_1_507) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.ultr_sensor_1_507)
}
inline ::apollo::canbus::Ultr_sensor_1_507* Devkit::release_ultr_sensor_1_507() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Ultr_sensor_1_507* temp = _impl_.ultr_sensor_1_507_;
  _impl_.ultr_sensor_1_507_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_1_507* Devkit::unsafe_arena_release_ultr_sensor_1_507() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.ultr_sensor_1_507)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Ultr_sensor_1_507* temp = _impl_.ultr_sensor_1_507_;
  _impl_.ultr_sensor_1_507_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_1_507* Devkit::_internal_mutable_ultr_sensor_1_507() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.ultr_sensor_1_507_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ultr_sensor_1_507>(GetArenaForAllocation());
    _impl_.ultr_sensor_1_507_ = p;
  }
  return _impl_.ultr_sensor_1_507_;
}
inline ::apollo::canbus::Ultr_sensor_1_507* Devkit::mutable_ultr_sensor_1_507() {
  ::apollo::canbus::Ultr_sensor_1_507* _msg = _internal_mutable_ultr_sensor_1_507();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.ultr_sensor_1_507)
  return _msg;
}
inline void Devkit::set_allocated_ultr_sensor_1_507(::apollo::canbus::Ultr_sensor_1_507* ultr_sensor_1_507) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ultr_sensor_1_507_;
  }
  if (ultr_sensor_1_507) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ultr_sensor_1_507);
    if (message_arena != submessage_arena) {
      ultr_sensor_1_507 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultr_sensor_1_507, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.ultr_sensor_1_507_ = ultr_sensor_1_507;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.ultr_sensor_1_507)
}

// optional .apollo.canbus.Ultr_sensor_2_508 ultr_sensor_2_508 = 14;
inline bool Devkit::_internal_has_ultr_sensor_2_508() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ultr_sensor_2_508_ != nullptr);
  return value;
}
inline bool Devkit::has_ultr_sensor_2_508() const {
  return _internal_has_ultr_sensor_2_508();
}
inline void Devkit::clear_ultr_sensor_2_508() {
  if (_impl_.ultr_sensor_2_508_ != nullptr) _impl_.ultr_sensor_2_508_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::canbus::Ultr_sensor_2_508& Devkit::_internal_ultr_sensor_2_508() const {
  const ::apollo::canbus::Ultr_sensor_2_508* p = _impl_.ultr_sensor_2_508_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ultr_sensor_2_508&>(
      ::apollo::canbus::_Ultr_sensor_2_508_default_instance_);
}
inline const ::apollo::canbus::Ultr_sensor_2_508& Devkit::ultr_sensor_2_508() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.ultr_sensor_2_508)
  return _internal_ultr_sensor_2_508();
}
inline void Devkit::unsafe_arena_set_allocated_ultr_sensor_2_508(
    ::apollo::canbus::Ultr_sensor_2_508* ultr_sensor_2_508) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ultr_sensor_2_508_);
  }
  _impl_.ultr_sensor_2_508_ = ultr_sensor_2_508;
  if (ultr_sensor_2_508) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.ultr_sensor_2_508)
}
inline ::apollo::canbus::Ultr_sensor_2_508* Devkit::release_ultr_sensor_2_508() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Ultr_sensor_2_508* temp = _impl_.ultr_sensor_2_508_;
  _impl_.ultr_sensor_2_508_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_2_508* Devkit::unsafe_arena_release_ultr_sensor_2_508() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.ultr_sensor_2_508)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Ultr_sensor_2_508* temp = _impl_.ultr_sensor_2_508_;
  _impl_.ultr_sensor_2_508_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_2_508* Devkit::_internal_mutable_ultr_sensor_2_508() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.ultr_sensor_2_508_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ultr_sensor_2_508>(GetArenaForAllocation());
    _impl_.ultr_sensor_2_508_ = p;
  }
  return _impl_.ultr_sensor_2_508_;
}
inline ::apollo::canbus::Ultr_sensor_2_508* Devkit::mutable_ultr_sensor_2_508() {
  ::apollo::canbus::Ultr_sensor_2_508* _msg = _internal_mutable_ultr_sensor_2_508();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.ultr_sensor_2_508)
  return _msg;
}
inline void Devkit::set_allocated_ultr_sensor_2_508(::apollo::canbus::Ultr_sensor_2_508* ultr_sensor_2_508) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ultr_sensor_2_508_;
  }
  if (ultr_sensor_2_508) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ultr_sensor_2_508);
    if (message_arena != submessage_arena) {
      ultr_sensor_2_508 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultr_sensor_2_508, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.ultr_sensor_2_508_ = ultr_sensor_2_508;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.ultr_sensor_2_508)
}

// optional .apollo.canbus.Ultr_sensor_3_509 ultr_sensor_3_509 = 15;
inline bool Devkit::_internal_has_ultr_sensor_3_509() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ultr_sensor_3_509_ != nullptr);
  return value;
}
inline bool Devkit::has_ultr_sensor_3_509() const {
  return _internal_has_ultr_sensor_3_509();
}
inline void Devkit::clear_ultr_sensor_3_509() {
  if (_impl_.ultr_sensor_3_509_ != nullptr) _impl_.ultr_sensor_3_509_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::canbus::Ultr_sensor_3_509& Devkit::_internal_ultr_sensor_3_509() const {
  const ::apollo::canbus::Ultr_sensor_3_509* p = _impl_.ultr_sensor_3_509_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ultr_sensor_3_509&>(
      ::apollo::canbus::_Ultr_sensor_3_509_default_instance_);
}
inline const ::apollo::canbus::Ultr_sensor_3_509& Devkit::ultr_sensor_3_509() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.ultr_sensor_3_509)
  return _internal_ultr_sensor_3_509();
}
inline void Devkit::unsafe_arena_set_allocated_ultr_sensor_3_509(
    ::apollo::canbus::Ultr_sensor_3_509* ultr_sensor_3_509) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ultr_sensor_3_509_);
  }
  _impl_.ultr_sensor_3_509_ = ultr_sensor_3_509;
  if (ultr_sensor_3_509) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.ultr_sensor_3_509)
}
inline ::apollo::canbus::Ultr_sensor_3_509* Devkit::release_ultr_sensor_3_509() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Ultr_sensor_3_509* temp = _impl_.ultr_sensor_3_509_;
  _impl_.ultr_sensor_3_509_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_3_509* Devkit::unsafe_arena_release_ultr_sensor_3_509() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.ultr_sensor_3_509)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Ultr_sensor_3_509* temp = _impl_.ultr_sensor_3_509_;
  _impl_.ultr_sensor_3_509_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_3_509* Devkit::_internal_mutable_ultr_sensor_3_509() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.ultr_sensor_3_509_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ultr_sensor_3_509>(GetArenaForAllocation());
    _impl_.ultr_sensor_3_509_ = p;
  }
  return _impl_.ultr_sensor_3_509_;
}
inline ::apollo::canbus::Ultr_sensor_3_509* Devkit::mutable_ultr_sensor_3_509() {
  ::apollo::canbus::Ultr_sensor_3_509* _msg = _internal_mutable_ultr_sensor_3_509();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.ultr_sensor_3_509)
  return _msg;
}
inline void Devkit::set_allocated_ultr_sensor_3_509(::apollo::canbus::Ultr_sensor_3_509* ultr_sensor_3_509) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ultr_sensor_3_509_;
  }
  if (ultr_sensor_3_509) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ultr_sensor_3_509);
    if (message_arena != submessage_arena) {
      ultr_sensor_3_509 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultr_sensor_3_509, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.ultr_sensor_3_509_ = ultr_sensor_3_509;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.ultr_sensor_3_509)
}

// optional .apollo.canbus.Ultr_sensor_4_510 ultr_sensor_4_510 = 16;
inline bool Devkit::_internal_has_ultr_sensor_4_510() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ultr_sensor_4_510_ != nullptr);
  return value;
}
inline bool Devkit::has_ultr_sensor_4_510() const {
  return _internal_has_ultr_sensor_4_510();
}
inline void Devkit::clear_ultr_sensor_4_510() {
  if (_impl_.ultr_sensor_4_510_ != nullptr) _impl_.ultr_sensor_4_510_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::canbus::Ultr_sensor_4_510& Devkit::_internal_ultr_sensor_4_510() const {
  const ::apollo::canbus::Ultr_sensor_4_510* p = _impl_.ultr_sensor_4_510_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ultr_sensor_4_510&>(
      ::apollo::canbus::_Ultr_sensor_4_510_default_instance_);
}
inline const ::apollo::canbus::Ultr_sensor_4_510& Devkit::ultr_sensor_4_510() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.ultr_sensor_4_510)
  return _internal_ultr_sensor_4_510();
}
inline void Devkit::unsafe_arena_set_allocated_ultr_sensor_4_510(
    ::apollo::canbus::Ultr_sensor_4_510* ultr_sensor_4_510) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ultr_sensor_4_510_);
  }
  _impl_.ultr_sensor_4_510_ = ultr_sensor_4_510;
  if (ultr_sensor_4_510) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.ultr_sensor_4_510)
}
inline ::apollo::canbus::Ultr_sensor_4_510* Devkit::release_ultr_sensor_4_510() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Ultr_sensor_4_510* temp = _impl_.ultr_sensor_4_510_;
  _impl_.ultr_sensor_4_510_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_4_510* Devkit::unsafe_arena_release_ultr_sensor_4_510() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.ultr_sensor_4_510)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Ultr_sensor_4_510* temp = _impl_.ultr_sensor_4_510_;
  _impl_.ultr_sensor_4_510_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_4_510* Devkit::_internal_mutable_ultr_sensor_4_510() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.ultr_sensor_4_510_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ultr_sensor_4_510>(GetArenaForAllocation());
    _impl_.ultr_sensor_4_510_ = p;
  }
  return _impl_.ultr_sensor_4_510_;
}
inline ::apollo::canbus::Ultr_sensor_4_510* Devkit::mutable_ultr_sensor_4_510() {
  ::apollo::canbus::Ultr_sensor_4_510* _msg = _internal_mutable_ultr_sensor_4_510();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.ultr_sensor_4_510)
  return _msg;
}
inline void Devkit::set_allocated_ultr_sensor_4_510(::apollo::canbus::Ultr_sensor_4_510* ultr_sensor_4_510) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ultr_sensor_4_510_;
  }
  if (ultr_sensor_4_510) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ultr_sensor_4_510);
    if (message_arena != submessage_arena) {
      ultr_sensor_4_510 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultr_sensor_4_510, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.ultr_sensor_4_510_ = ultr_sensor_4_510;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.ultr_sensor_4_510)
}

// optional .apollo.canbus.Ultr_sensor_5_511 ultr_sensor_5_511 = 17;
inline bool Devkit::_internal_has_ultr_sensor_5_511() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ultr_sensor_5_511_ != nullptr);
  return value;
}
inline bool Devkit::has_ultr_sensor_5_511() const {
  return _internal_has_ultr_sensor_5_511();
}
inline void Devkit::clear_ultr_sensor_5_511() {
  if (_impl_.ultr_sensor_5_511_ != nullptr) _impl_.ultr_sensor_5_511_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::canbus::Ultr_sensor_5_511& Devkit::_internal_ultr_sensor_5_511() const {
  const ::apollo::canbus::Ultr_sensor_5_511* p = _impl_.ultr_sensor_5_511_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Ultr_sensor_5_511&>(
      ::apollo::canbus::_Ultr_sensor_5_511_default_instance_);
}
inline const ::apollo::canbus::Ultr_sensor_5_511& Devkit::ultr_sensor_5_511() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.ultr_sensor_5_511)
  return _internal_ultr_sensor_5_511();
}
inline void Devkit::unsafe_arena_set_allocated_ultr_sensor_5_511(
    ::apollo::canbus::Ultr_sensor_5_511* ultr_sensor_5_511) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ultr_sensor_5_511_);
  }
  _impl_.ultr_sensor_5_511_ = ultr_sensor_5_511;
  if (ultr_sensor_5_511) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.ultr_sensor_5_511)
}
inline ::apollo::canbus::Ultr_sensor_5_511* Devkit::release_ultr_sensor_5_511() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Ultr_sensor_5_511* temp = _impl_.ultr_sensor_5_511_;
  _impl_.ultr_sensor_5_511_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_5_511* Devkit::unsafe_arena_release_ultr_sensor_5_511() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.ultr_sensor_5_511)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Ultr_sensor_5_511* temp = _impl_.ultr_sensor_5_511_;
  _impl_.ultr_sensor_5_511_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Ultr_sensor_5_511* Devkit::_internal_mutable_ultr_sensor_5_511() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.ultr_sensor_5_511_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Ultr_sensor_5_511>(GetArenaForAllocation());
    _impl_.ultr_sensor_5_511_ = p;
  }
  return _impl_.ultr_sensor_5_511_;
}
inline ::apollo::canbus::Ultr_sensor_5_511* Devkit::mutable_ultr_sensor_5_511() {
  ::apollo::canbus::Ultr_sensor_5_511* _msg = _internal_mutable_ultr_sensor_5_511();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.ultr_sensor_5_511)
  return _msg;
}
inline void Devkit::set_allocated_ultr_sensor_5_511(::apollo::canbus::Ultr_sensor_5_511* ultr_sensor_5_511) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ultr_sensor_5_511_;
  }
  if (ultr_sensor_5_511) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ultr_sensor_5_511);
    if (message_arena != submessage_arena) {
      ultr_sensor_5_511 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultr_sensor_5_511, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.ultr_sensor_5_511_ = ultr_sensor_5_511;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.ultr_sensor_5_511)
}

// optional .apollo.canbus.Bms_report_512 bms_report_512 = 18;
inline bool Devkit::_internal_has_bms_report_512() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bms_report_512_ != nullptr);
  return value;
}
inline bool Devkit::has_bms_report_512() const {
  return _internal_has_bms_report_512();
}
inline void Devkit::clear_bms_report_512() {
  if (_impl_.bms_report_512_ != nullptr) _impl_.bms_report_512_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::canbus::Bms_report_512& Devkit::_internal_bms_report_512() const {
  const ::apollo::canbus::Bms_report_512* p = _impl_.bms_report_512_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Bms_report_512&>(
      ::apollo::canbus::_Bms_report_512_default_instance_);
}
inline const ::apollo::canbus::Bms_report_512& Devkit::bms_report_512() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Devkit.bms_report_512)
  return _internal_bms_report_512();
}
inline void Devkit::unsafe_arena_set_allocated_bms_report_512(
    ::apollo::canbus::Bms_report_512* bms_report_512) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bms_report_512_);
  }
  _impl_.bms_report_512_ = bms_report_512;
  if (bms_report_512) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Devkit.bms_report_512)
}
inline ::apollo::canbus::Bms_report_512* Devkit::release_bms_report_512() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Bms_report_512* temp = _impl_.bms_report_512_;
  _impl_.bms_report_512_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Bms_report_512* Devkit::unsafe_arena_release_bms_report_512() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Devkit.bms_report_512)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Bms_report_512* temp = _impl_.bms_report_512_;
  _impl_.bms_report_512_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Bms_report_512* Devkit::_internal_mutable_bms_report_512() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.bms_report_512_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Bms_report_512>(GetArenaForAllocation());
    _impl_.bms_report_512_ = p;
  }
  return _impl_.bms_report_512_;
}
inline ::apollo::canbus::Bms_report_512* Devkit::mutable_bms_report_512() {
  ::apollo::canbus::Bms_report_512* _msg = _internal_mutable_bms_report_512();
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Devkit.bms_report_512)
  return _msg;
}
inline void Devkit::set_allocated_bms_report_512(::apollo::canbus::Bms_report_512* bms_report_512) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bms_report_512_;
  }
  if (bms_report_512) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bms_report_512);
    if (message_arena != submessage_arena) {
      bms_report_512 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bms_report_512, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.bms_report_512_ = bms_report_512;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Devkit.bms_report_512)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType>() {
  return ::apollo::canbus::Throttle_command_100_Throttle_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType>() {
  return ::apollo::canbus::Brake_command_101_Aeb_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_command_101_Brake_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_command_101_Brake_en_ctrlType>() {
  return ::apollo::canbus::Brake_command_101_Brake_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steering_command_102_Steer_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steering_command_102_Steer_en_ctrlType>() {
  return ::apollo::canbus::Steering_command_102_Steer_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_command_103_Gear_targetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_command_103_Gear_targetType>() {
  return ::apollo::canbus::Gear_command_103_Gear_targetType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_command_103_Gear_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_command_103_Gear_en_ctrlType>() {
  return ::apollo::canbus::Gear_command_103_Gear_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Park_command_104_Park_targetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Park_command_104_Park_targetType>() {
  return ::apollo::canbus::Park_command_104_Park_targetType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Park_command_104_Park_en_ctrlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Park_command_104_Park_en_ctrlType>() {
  return ::apollo::canbus::Park_command_104_Park_en_ctrlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_report_500_Throttle_flt2Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_report_500_Throttle_flt2Type>() {
  return ::apollo::canbus::Throttle_report_500_Throttle_flt2Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_report_500_Throttle_flt1Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_report_500_Throttle_flt1Type>() {
  return ::apollo::canbus::Throttle_report_500_Throttle_flt1Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Throttle_report_500_Throttle_en_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Throttle_report_500_Throttle_en_stateType>() {
  return ::apollo::canbus::Throttle_report_500_Throttle_en_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_report_501_Brake_flt2Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_report_501_Brake_flt2Type>() {
  return ::apollo::canbus::Brake_report_501_Brake_flt2Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_report_501_Brake_flt1Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_report_501_Brake_flt1Type>() {
  return ::apollo::canbus::Brake_report_501_Brake_flt1Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brake_report_501_Brake_en_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brake_report_501_Brake_en_stateType>() {
  return ::apollo::canbus::Brake_report_501_Brake_en_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steering_report_502_Steer_flt2Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steering_report_502_Steer_flt2Type>() {
  return ::apollo::canbus::Steering_report_502_Steer_flt2Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steering_report_502_Steer_flt1Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steering_report_502_Steer_flt1Type>() {
  return ::apollo::canbus::Steering_report_502_Steer_flt1Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Steering_report_502_Steer_en_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Steering_report_502_Steer_en_stateType>() {
  return ::apollo::canbus::Steering_report_502_Steer_en_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_report_503_Gear_fltType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_report_503_Gear_fltType>() {
  return ::apollo::canbus::Gear_report_503_Gear_fltType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Gear_report_503_Gear_actualType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Gear_report_503_Gear_actualType>() {
  return ::apollo::canbus::Gear_report_503_Gear_actualType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Park_report_504_Parking_actualType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Park_report_504_Parking_actualType>() {
  return ::apollo::canbus::Park_report_504_Parking_actualType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Park_report_504_Park_fltType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Park_report_504_Park_fltType>() {
  return ::apollo::canbus::Park_report_504_Park_fltType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType>() {
  return ::apollo::canbus::Vcu_report_505_Vehicle_mode_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_report_505_Frontcrash_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_report_505_Frontcrash_stateType>() {
  return ::apollo::canbus::Vcu_report_505_Frontcrash_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_report_505_Backcrash_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_report_505_Backcrash_stateType>() {
  return ::apollo::canbus::Vcu_report_505_Backcrash_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcu_report_505_Aeb_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcu_report_505_Aeb_stateType>() {
  return ::apollo::canbus::Vcu_report_505_Aeb_stateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fdevkit_2eproto
