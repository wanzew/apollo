// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ch.proto

#include "modules/canbus/proto/ch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR Control_command_115::Control_command_115(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ctrl_cmd_)*/0} {}
struct Control_command_115DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Control_command_115DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Control_command_115DefaultTypeInternal() {}
  union {
    Control_command_115 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Control_command_115DefaultTypeInternal _Control_command_115_default_instance_;
PROTOBUF_CONSTEXPR Gear_command_114::Gear_command_114(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gear_cmd_)*/1} {}
struct Gear_command_114DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Gear_command_114DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Gear_command_114DefaultTypeInternal() {}
  union {
    Gear_command_114 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Gear_command_114DefaultTypeInternal _Gear_command_114_default_instance_;
PROTOBUF_CONSTEXPR Brake_command_111::Brake_command_111(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_pedal_en_ctrl_)*/0
  , /*decltype(_impl_.brake_pedal_cmd_)*/0} {}
struct Brake_command_111DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_command_111DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_command_111DefaultTypeInternal() {}
  union {
    Brake_command_111 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_command_111DefaultTypeInternal _Brake_command_111_default_instance_;
PROTOBUF_CONSTEXPR Throttle_command_110::Throttle_command_110(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.throttle_pedal_en_ctrl_)*/0
  , /*decltype(_impl_.throttle_pedal_cmd_)*/0} {}
struct Throttle_command_110DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Throttle_command_110DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Throttle_command_110DefaultTypeInternal() {}
  union {
    Throttle_command_110 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Throttle_command_110DefaultTypeInternal _Throttle_command_110_default_instance_;
PROTOBUF_CONSTEXPR Turnsignal_command_113::Turnsignal_command_113(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.turn_signal_cmd_)*/0} {}
struct Turnsignal_command_113DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turnsignal_command_113DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turnsignal_command_113DefaultTypeInternal() {}
  union {
    Turnsignal_command_113 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turnsignal_command_113DefaultTypeInternal _Turnsignal_command_113_default_instance_;
PROTOBUF_CONSTEXPR Steer_command_112::Steer_command_112(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steer_angle_cmd_)*/0
  , /*decltype(_impl_.steer_angle_en_ctrl_)*/0} {}
struct Steer_command_112DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steer_command_112DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steer_command_112DefaultTypeInternal() {}
  union {
    Steer_command_112 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steer_command_112DefaultTypeInternal _Steer_command_112_default_instance_;
PROTOBUF_CONSTEXPR Brake_status__511::Brake_status__511(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_pedal_en_sts_)*/0
  , /*decltype(_impl_.brake_pedal_sts_)*/0
  , /*decltype(_impl_.brake_err_)*/0
  , /*decltype(_impl_.emergency_btn_env_)*/0
  , /*decltype(_impl_.front_bump_env_)*/0
  , /*decltype(_impl_.back_bump_env_)*/0
  , /*decltype(_impl_.overspd_env_)*/0} {}
struct Brake_status__511DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_status__511DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_status__511DefaultTypeInternal() {}
  union {
    Brake_status__511 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_status__511DefaultTypeInternal _Brake_status__511_default_instance_;
PROTOBUF_CONSTEXPR Throttle_status__510::Throttle_status__510(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.throttle_pedal_en_sts_)*/0
  , /*decltype(_impl_.throttle_pedal_sts_)*/0
  , /*decltype(_impl_.drive_motor_err_)*/0
  , /*decltype(_impl_.battery_bms_err_)*/0} {}
struct Throttle_status__510DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Throttle_status__510DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Throttle_status__510DefaultTypeInternal() {}
  union {
    Throttle_status__510 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Throttle_status__510DefaultTypeInternal _Throttle_status__510_default_instance_;
PROTOBUF_CONSTEXPR Turnsignal_status__513::Turnsignal_status__513(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.turn_signal_sts_)*/0} {}
struct Turnsignal_status__513DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turnsignal_status__513DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turnsignal_status__513DefaultTypeInternal() {}
  union {
    Turnsignal_status__513 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turnsignal_status__513DefaultTypeInternal _Turnsignal_status__513_default_instance_;
PROTOBUF_CONSTEXPR Steer_status__512::Steer_status__512(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steer_angle_sts_)*/0
  , /*decltype(_impl_.steer_angle_en_sts_)*/0
  , /*decltype(_impl_.steer_err_)*/0
  , /*decltype(_impl_.sensor_err_)*/0} {}
struct Steer_status__512DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steer_status__512DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steer_status__512DefaultTypeInternal() {}
  union {
    Steer_status__512 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steer_status__512DefaultTypeInternal _Steer_status__512_default_instance_;
PROTOBUF_CONSTEXPR Ecu_status_1_515::Ecu_status_1_515(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.acc_speed_)*/0
  , /*decltype(_impl_.ctrl_sts_)*/0
  , /*decltype(_impl_.chassis_sts_)*/0
  , /*decltype(_impl_.chassis_err_)*/0} {}
struct Ecu_status_1_515DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ecu_status_1_515DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ecu_status_1_515DefaultTypeInternal() {}
  union {
    Ecu_status_1_515 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ecu_status_1_515DefaultTypeInternal _Ecu_status_1_515_default_instance_;
PROTOBUF_CONSTEXPR Gear_status_514::Gear_status_514(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gear_sts_)*/1} {}
struct Gear_status_514DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Gear_status_514DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Gear_status_514DefaultTypeInternal() {}
  union {
    Gear_status_514 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Gear_status_514DefaultTypeInternal _Gear_status_514_default_instance_;
PROTOBUF_CONSTEXPR Ecu_status_3_517::Ecu_status_3_517(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ultrasound_dist_1_)*/0
  , /*decltype(_impl_.ultrasound_dist_2_)*/0
  , /*decltype(_impl_.ultrasound_dist_3_)*/0
  , /*decltype(_impl_.ultrasound_dist_4_)*/0
  , /*decltype(_impl_.ultrasound_dist_5_)*/0
  , /*decltype(_impl_.ultrasound_dist_6_)*/0
  , /*decltype(_impl_.ultrasound_dist_7_)*/0
  , /*decltype(_impl_.ultrasound_dist_8_)*/0} {}
struct Ecu_status_3_517DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ecu_status_3_517DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ecu_status_3_517DefaultTypeInternal() {}
  union {
    Ecu_status_3_517 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ecu_status_3_517DefaultTypeInternal _Ecu_status_3_517_default_instance_;
PROTOBUF_CONSTEXPR Ecu_status_2_516::Ecu_status_2_516(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.battery_voltage_)*/0
  , /*decltype(_impl_.battery_remaining_capacity_)*/0
  , /*decltype(_impl_.battery_temperature_)*/0
  , /*decltype(_impl_.battery_current_)*/0} {}
struct Ecu_status_2_516DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ecu_status_2_516DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ecu_status_2_516DefaultTypeInternal() {}
  union {
    Ecu_status_2_516 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ecu_status_2_516DefaultTypeInternal _Ecu_status_2_516_default_instance_;
PROTOBUF_CONSTEXPR Ch::Ch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.control_command_115_)*/nullptr
  , /*decltype(_impl_.gear_command_114_)*/nullptr
  , /*decltype(_impl_.brake_command_111_)*/nullptr
  , /*decltype(_impl_.throttle_command_110_)*/nullptr
  , /*decltype(_impl_.turnsignal_command_113_)*/nullptr
  , /*decltype(_impl_.steer_command_112_)*/nullptr
  , /*decltype(_impl_.brake_status__511_)*/nullptr
  , /*decltype(_impl_.throttle_status__510_)*/nullptr
  , /*decltype(_impl_.turnsignal_status__513_)*/nullptr
  , /*decltype(_impl_.steer_status__512_)*/nullptr
  , /*decltype(_impl_.ecu_status_1_515_)*/nullptr
  , /*decltype(_impl_.gear_status_514_)*/nullptr
  , /*decltype(_impl_.ecu_status_3_517_)*/nullptr
  , /*decltype(_impl_.ecu_status_2_516_)*/nullptr} {}
struct ChDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChDefaultTypeInternal() {}
  union {
    Ch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChDefaultTypeInternal _Ch_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[21];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fch_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2fch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, _impl_.ctrl_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, _impl_.gear_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _impl_.brake_pedal_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _impl_.brake_pedal_cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _impl_.throttle_pedal_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _impl_.throttle_pedal_cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, _impl_.turn_signal_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _impl_.steer_angle_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _impl_.steer_angle_cmd_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.brake_pedal_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.brake_pedal_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.brake_err_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.emergency_btn_env_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.front_bump_env_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.back_bump_env_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _impl_.overspd_env_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _impl_.throttle_pedal_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _impl_.throttle_pedal_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _impl_.drive_motor_err_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _impl_.battery_bms_err_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, _impl_.turn_signal_sts_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _impl_.steer_angle_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _impl_.steer_angle_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _impl_.steer_err_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _impl_.sensor_err_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_.acc_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_.ctrl_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_.chassis_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _impl_.chassis_err_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, _impl_.gear_sts_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_7_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _impl_.ultrasound_dist_8_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _impl_.battery_remaining_capacity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _impl_.battery_voltage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _impl_.battery_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _impl_.battery_temperature_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.control_command_115_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.gear_command_114_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.brake_command_111_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.throttle_command_110_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.turnsignal_command_113_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.steer_command_112_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.brake_status__511_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.throttle_status__510_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.turnsignal_status__513_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.steer_status__512_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.ecu_status_1_515_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.gear_status_514_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.ecu_status_3_517_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _impl_.ecu_status_2_516_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::canbus::Control_command_115)},
  { 8, 15, -1, sizeof(::apollo::canbus::Gear_command_114)},
  { 16, 24, -1, sizeof(::apollo::canbus::Brake_command_111)},
  { 26, 34, -1, sizeof(::apollo::canbus::Throttle_command_110)},
  { 36, 43, -1, sizeof(::apollo::canbus::Turnsignal_command_113)},
  { 44, 52, -1, sizeof(::apollo::canbus::Steer_command_112)},
  { 54, 67, -1, sizeof(::apollo::canbus::Brake_status__511)},
  { 74, 84, -1, sizeof(::apollo::canbus::Throttle_status__510)},
  { 88, 95, -1, sizeof(::apollo::canbus::Turnsignal_status__513)},
  { 96, 106, -1, sizeof(::apollo::canbus::Steer_status__512)},
  { 110, 121, -1, sizeof(::apollo::canbus::Ecu_status_1_515)},
  { 126, 133, -1, sizeof(::apollo::canbus::Gear_status_514)},
  { 134, 148, -1, sizeof(::apollo::canbus::Ecu_status_3_517)},
  { 156, 166, -1, sizeof(::apollo::canbus::Ecu_status_2_516)},
  { 170, 190, -1, sizeof(::apollo::canbus::Ch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_Control_command_115_default_instance_._instance,
  &::apollo::canbus::_Gear_command_114_default_instance_._instance,
  &::apollo::canbus::_Brake_command_111_default_instance_._instance,
  &::apollo::canbus::_Throttle_command_110_default_instance_._instance,
  &::apollo::canbus::_Turnsignal_command_113_default_instance_._instance,
  &::apollo::canbus::_Steer_command_112_default_instance_._instance,
  &::apollo::canbus::_Brake_status__511_default_instance_._instance,
  &::apollo::canbus::_Throttle_status__510_default_instance_._instance,
  &::apollo::canbus::_Turnsignal_status__513_default_instance_._instance,
  &::apollo::canbus::_Steer_status__512_default_instance_._instance,
  &::apollo::canbus::_Ecu_status_1_515_default_instance_._instance,
  &::apollo::canbus::_Gear_status_514_default_instance_._instance,
  &::apollo::canbus::_Ecu_status_3_517_default_instance_._instance,
  &::apollo::canbus::_Ecu_status_2_516_default_instance_._instance,
  &::apollo::canbus::_Ch_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035modules/canbus/proto/ch.proto\022\rapollo."
  "canbus\"\241\001\n\023Control_command_115\022A\n\010ctrl_c"
  "md\030\001 \001(\0162/.apollo.canbus.Control_command"
  "_115.Ctrl_cmdType\"G\n\014Ctrl_cmdType\022\033\n\027CTR"
  "L_CMD_OUT_OF_CONTROL\020\000\022\032\n\026CTRL_CMD_UNDER"
  "_CONTROL\020\001\"\265\001\n\020Gear_command_114\022>\n\010gear_"
  "cmd\030\001 \001(\0162,.apollo.canbus.Gear_command_1"
  "14.Gear_cmdType\"a\n\014Gear_cmdType\022\021\n\rGEAR_"
  "CMD_PARK\020\001\022\024\n\020GEAR_CMD_REVERSE\020\002\022\024\n\020GEAR"
  "_CMD_NEUTRAL\020\003\022\022\n\016GEAR_CMD_DRIVE\020\004\"\337\001\n\021B"
  "rake_command_111\022U\n\023brake_pedal_en_ctrl\030"
  "\001 \001(\01628.apollo.canbus.Brake_command_111."
  "Brake_pedal_en_ctrlType\022\027\n\017brake_pedal_c"
  "md\030\002 \001(\005\"Z\n\027Brake_pedal_en_ctrlType\022\037\n\033B"
  "RAKE_PEDAL_EN_CTRL_DISABLE\020\000\022\036\n\032BRAKE_PE"
  "DAL_EN_CTRL_ENABLE\020\001\"\367\001\n\024Throttle_comman"
  "d_110\022^\n\026throttle_pedal_en_ctrl\030\001 \001(\0162>."
  "apollo.canbus.Throttle_command_110.Throt"
  "tle_pedal_en_ctrlType\022\032\n\022throttle_pedal_"
  "cmd\030\002 \001(\005\"c\n\032Throttle_pedal_en_ctrlType\022"
  "\"\n\036THROTTLE_PEDAL_EN_CTRL_DISABLE\020\000\022!\n\035T"
  "HROTTLE_PEDAL_EN_CTRL_ENABLE\020\001\"\322\001\n\026Turns"
  "ignal_command_113\022R\n\017turn_signal_cmd\030\001 \001"
  "(\01629.apollo.canbus.Turnsignal_command_11"
  "3.Turn_signal_cmdType\"d\n\023Turn_signal_cmd"
  "Type\022\030\n\024TURN_SIGNAL_CMD_NONE\020\000\022\030\n\024TURN_S"
  "IGNAL_CMD_LEFT\020\001\022\031\n\025TURN_SIGNAL_CMD_RIGH"
  "T\020\002\"\337\001\n\021Steer_command_112\022U\n\023steer_angle"
  "_en_ctrl\030\001 \001(\01628.apollo.canbus.Steer_com"
  "mand_112.Steer_angle_en_ctrlType\022\027\n\017stee"
  "r_angle_cmd\030\002 \001(\001\"Z\n\027Steer_angle_en_ctrl"
  "Type\022\037\n\033STEER_ANGLE_EN_CTRL_DISABLE\020\000\022\036\n"
  "\032STEER_ANGLE_EN_CTRL_ENABLE\020\001\"\207\010\n\021Brake_"
  "status__511\022S\n\022brake_pedal_en_sts\030\001 \001(\0162"
  "7.apollo.canbus.Brake_status__511.Brake_"
  "pedal_en_stsType\022\027\n\017brake_pedal_sts\030\002 \001("
  "\005\022A\n\tbrake_err\030\003 \001(\0162..apollo.canbus.Bra"
  "ke_status__511.Brake_errType\022Q\n\021emergenc"
  "y_btn_env\030\004 \001(\01626.apollo.canbus.Brake_st"
  "atus__511.Emergency_btn_envType\022K\n\016front"
  "_bump_env\030\005 \001(\01623.apollo.canbus.Brake_st"
  "atus__511.Front_bump_envType\022I\n\rback_bum"
  "p_env\030\006 \001(\01622.apollo.canbus.Brake_status"
  "__511.Back_bump_envType\022E\n\013overspd_env\030\007"
  " \001(\01620.apollo.canbus.Brake_status__511.O"
  "verspd_envType\"x\n\026Brake_pedal_en_stsType"
  "\022\036\n\032BRAKE_PEDAL_EN_STS_DISABLE\020\000\022\035\n\031BRAK"
  "E_PEDAL_EN_STS_ENABLE\020\001\022\037\n\033BRAKE_PEDAL_E"
  "N_STS_TAKEOVER\020\002\"D\n\rBrake_errType\022\023\n\017BRA"
  "KE_ERR_NOERR\020\000\022\036\n\032BRAKE_ERR_BRAKE_SYSTEM"
  "_ERR\020\001\"`\n\025Emergency_btn_envType\022\033\n\027EMERG"
  "ENCY_BTN_ENV_NOENV\020\000\022*\n&EMERGENCY_BTN_EN"
  "V_EMERGENCY_BUTTON_ENV\020\001\"S\n\022Front_bump_e"
  "nvType\022\030\n\024FRONT_BUMP_ENV_NOENV\020\000\022#\n\037FRON"
  "T_BUMP_ENV_FRONT_BUMPER_ENV\020\001\"O\n\021Back_bu"
  "mp_envType\022\027\n\023BACK_BUMP_ENV_NOENV\020\000\022!\n\035B"
  "ACK_BUMP_ENV_BACK_BUMPER_ENV\020\001\"G\n\017Oversp"
  "d_envType\022\025\n\021OVERSPD_ENV_NOENV\020\000\022\035\n\031OVER"
  "SPD_ENV_OVERSPEED_ENV\020\001\"\343\004\n\024Throttle_sta"
  "tus__510\022\\\n\025throttle_pedal_en_sts\030\001 \001(\0162"
  "=.apollo.canbus.Throttle_status__510.Thr"
  "ottle_pedal_en_stsType\022\032\n\022throttle_pedal"
  "_sts\030\002 \001(\005\022P\n\017drive_motor_err\030\003 \001(\01627.ap"
  "ollo.canbus.Throttle_status__510.Drive_m"
  "otor_errType\022P\n\017battery_bms_err\030\004 \001(\01627."
  "apollo.canbus.Throttle_status__510.Batte"
  "ry_bms_errType\"\204\001\n\031Throttle_pedal_en_sts"
  "Type\022!\n\035THROTTLE_PEDAL_EN_STS_DISABLE\020\000\022"
  " \n\034THROTTLE_PEDAL_EN_STS_ENABLE\020\001\022\"\n\036THR"
  "OTTLE_PEDAL_EN_STS_TAKEOVER\020\002\"S\n\023Drive_m"
  "otor_errType\022\031\n\025DRIVE_MOTOR_ERR_NOERR\020\000\022"
  "!\n\035DRIVE_MOTOR_ERR_DRV_MOTOR_ERR\020\001\"Q\n\023Ba"
  "ttery_bms_errType\022\031\n\025BATTERY_BMS_ERR_NOE"
  "RR\020\000\022\037\n\033BATTERY_BMS_ERR_BATTERY_ERR\020\001\"\322\001"
  "\n\026Turnsignal_status__513\022R\n\017turn_signal_"
  "sts\030\001 \001(\01629.apollo.canbus.Turnsignal_sta"
  "tus__513.Turn_signal_stsType\"d\n\023Turn_sig"
  "nal_stsType\022\030\n\024TURN_SIGNAL_STS_NONE\020\000\022\030\n"
  "\024TURN_SIGNAL_STS_LEFT\020\001\022\031\n\025TURN_SIGNAL_S"
  "TS_RIGHT\020\002\"\221\004\n\021Steer_status__512\022S\n\022stee"
  "r_angle_en_sts\030\001 \001(\01627.apollo.canbus.Ste"
  "er_status__512.Steer_angle_en_stsType\022\027\n"
  "\017steer_angle_sts\030\002 \001(\001\022A\n\tsteer_err\030\003 \001("
  "\0162..apollo.canbus.Steer_status__512.Stee"
  "r_errType\022C\n\nsensor_err\030\004 \001(\0162/.apollo.c"
  "anbus.Steer_status__512.Sensor_errType\"x"
  "\n\026Steer_angle_en_stsType\022\036\n\032STEER_ANGLE_"
  "EN_STS_DISABLE\020\000\022\035\n\031STEER_ANGLE_EN_STS_E"
  "NABLE\020\001\022\037\n\033STEER_ANGLE_EN_STS_TAKEOVER\020\002"
  "\"C\n\rSteer_errType\022\023\n\017STEER_ERR_NOERR\020\000\022\035"
  "\n\031STEER_ERR_STEER_MOTOR_ERR\020\001\"G\n\016Sensor_"
  "errType\022\024\n\020SENSOR_ERR_NOERR\020\000\022\037\n\033SENSOR_"
  "ERR_STEER_SENSOR_ERR\020\001\"\347\001\n\020Ecu_status_1_"
  "515\022\r\n\005speed\030\001 \001(\001\022\021\n\tacc_speed\030\002 \001(\001\022>\n"
  "\010ctrl_sts\030\003 \001(\0162,.apollo.canbus.Ecu_stat"
  "us_1_515.Ctrl_stsType\022\023\n\013chassis_sts\030\004 \001"
  "(\005\022\023\n\013chassis_err\030\005 \001(\005\"G\n\014Ctrl_stsType\022"
  "\033\n\027CTRL_STS_OUT_OF_CONTROL\020\000\022\032\n\026CTRL_STS"
  "_UNDER_CONTROL\020\001\"\263\001\n\017Gear_status_514\022=\n\010"
  "gear_sts\030\001 \001(\0162+.apollo.canbus.Gear_stat"
  "us_514.Gear_stsType\"a\n\014Gear_stsType\022\021\n\rG"
  "EAR_STS_PARK\020\001\022\024\n\020GEAR_STS_REVERSE\020\002\022\024\n\020"
  "GEAR_STS_NEUTRAL\020\003\022\022\n\016GEAR_STS_DRIVE\020\004\"\352"
  "\001\n\020Ecu_status_3_517\022\031\n\021ultrasound_dist_1"
  "\030\001 \001(\005\022\031\n\021ultrasound_dist_2\030\002 \001(\005\022\031\n\021ult"
  "rasound_dist_3\030\003 \001(\005\022\031\n\021ultrasound_dist_"
  "4\030\004 \001(\005\022\031\n\021ultrasound_dist_5\030\005 \001(\005\022\031\n\021ul"
  "trasound_dist_6\030\006 \001(\005\022\031\n\021ultrasound_dist"
  "_7\030\007 \001(\005\022\031\n\021ultrasound_dist_8\030\010 \001(\005\"\205\001\n\020"
  "Ecu_status_2_516\022\"\n\032battery_remaining_ca"
  "pacity\030\001 \001(\005\022\027\n\017battery_voltage\030\002 \001(\001\022\027\n"
  "\017battery_current\030\003 \001(\001\022\033\n\023battery_temper"
  "ature\030\004 \001(\005\"\362\006\n\002Ch\022\?\n\023control_command_11"
  "5\030\001 \001(\0132\".apollo.canbus.Control_command_"
  "115\0229\n\020gear_command_114\030\002 \001(\0132\037.apollo.c"
  "anbus.Gear_command_114\022;\n\021brake_command_"
  "111\030\003 \001(\0132 .apollo.canbus.Brake_command_"
  "111\022A\n\024throttle_command_110\030\004 \001(\0132#.apol"
  "lo.canbus.Throttle_command_110\022E\n\026turnsi"
  "gnal_command_113\030\005 \001(\0132%.apollo.canbus.T"
  "urnsignal_command_113\022;\n\021steer_command_1"
  "12\030\006 \001(\0132 .apollo.canbus.Steer_command_1"
  "12\022;\n\021brake_status__511\030\007 \001(\0132 .apollo.c"
  "anbus.Brake_status__511\022A\n\024throttle_stat"
  "us__510\030\010 \001(\0132#.apollo.canbus.Throttle_s"
  "tatus__510\022E\n\026turnsignal_status__513\030\t \001"
  "(\0132%.apollo.canbus.Turnsignal_status__51"
  "3\022;\n\021steer_status__512\030\n \001(\0132 .apollo.ca"
  "nbus.Steer_status__512\0229\n\020ecu_status_1_5"
  "15\030\013 \001(\0132\037.apollo.canbus.Ecu_status_1_51"
  "5\0227\n\017gear_status_514\030\014 \001(\0132\036.apollo.canb"
  "us.Gear_status_514\0229\n\020ecu_status_3_517\030\r"
  " \001(\0132\037.apollo.canbus.Ecu_status_3_517\0229\n"
  "\020ecu_status_2_516\030\016 \001(\0132\037.apollo.canbus."
  "Ecu_status_2_516"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto = {
    false, false, 5376, descriptor_table_protodef_modules_2fcanbus_2fproto_2fch_2eproto,
    "modules/canbus/proto/ch.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fch_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2fch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fch_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_command_115_Ctrl_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[0];
}
bool Control_command_115_Ctrl_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_OUT_OF_CONTROL;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_UNDER_CONTROL;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MIN;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MAX;
constexpr int Control_command_115::Ctrl_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_command_114_Gear_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[1];
}
bool Gear_command_114_Gear_cmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_PARK;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_REVERSE;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_NEUTRAL;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_DRIVE;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MIN;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MAX;
constexpr int Gear_command_114::Gear_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_command_111_Brake_pedal_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[2];
}
bool Brake_command_111_Brake_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_DISABLE;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_ENABLE;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MIN;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MAX;
constexpr int Brake_command_111::Brake_pedal_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[3];
}
bool Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_DISABLE;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_ENABLE;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MIN;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MAX;
constexpr int Throttle_command_110::Throttle_pedal_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_command_113_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[4];
}
bool Turnsignal_command_113_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_NONE;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_LEFT;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_RIGHT;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MIN;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MAX;
constexpr int Turnsignal_command_113::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_command_112_Steer_angle_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[5];
}
bool Steer_command_112_Steer_angle_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_DISABLE;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_ENABLE;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MIN;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MAX;
constexpr int Steer_command_112::Steer_angle_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Brake_pedal_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[6];
}
bool Brake_status__511_Brake_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_DISABLE;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_ENABLE;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_TAKEOVER;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MIN;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MAX;
constexpr int Brake_status__511::Brake_pedal_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Brake_errType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[7];
}
bool Brake_status__511_Brake_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Brake_errType Brake_status__511::BRAKE_ERR_NOERR;
constexpr Brake_status__511_Brake_errType Brake_status__511::BRAKE_ERR_BRAKE_SYSTEM_ERR;
constexpr Brake_status__511_Brake_errType Brake_status__511::Brake_errType_MIN;
constexpr Brake_status__511_Brake_errType Brake_status__511::Brake_errType_MAX;
constexpr int Brake_status__511::Brake_errType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Emergency_btn_envType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[8];
}
bool Brake_status__511_Emergency_btn_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511::EMERGENCY_BTN_ENV_NOENV;
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511::EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV;
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511::Emergency_btn_envType_MIN;
constexpr Brake_status__511_Emergency_btn_envType Brake_status__511::Emergency_btn_envType_MAX;
constexpr int Brake_status__511::Emergency_btn_envType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Front_bump_envType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[9];
}
bool Brake_status__511_Front_bump_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Front_bump_envType Brake_status__511::FRONT_BUMP_ENV_NOENV;
constexpr Brake_status__511_Front_bump_envType Brake_status__511::FRONT_BUMP_ENV_FRONT_BUMPER_ENV;
constexpr Brake_status__511_Front_bump_envType Brake_status__511::Front_bump_envType_MIN;
constexpr Brake_status__511_Front_bump_envType Brake_status__511::Front_bump_envType_MAX;
constexpr int Brake_status__511::Front_bump_envType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Back_bump_envType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[10];
}
bool Brake_status__511_Back_bump_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Back_bump_envType Brake_status__511::BACK_BUMP_ENV_NOENV;
constexpr Brake_status__511_Back_bump_envType Brake_status__511::BACK_BUMP_ENV_BACK_BUMPER_ENV;
constexpr Brake_status__511_Back_bump_envType Brake_status__511::Back_bump_envType_MIN;
constexpr Brake_status__511_Back_bump_envType Brake_status__511::Back_bump_envType_MAX;
constexpr int Brake_status__511::Back_bump_envType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Overspd_envType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[11];
}
bool Brake_status__511_Overspd_envType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_status__511_Overspd_envType Brake_status__511::OVERSPD_ENV_NOENV;
constexpr Brake_status__511_Overspd_envType Brake_status__511::OVERSPD_ENV_OVERSPEED_ENV;
constexpr Brake_status__511_Overspd_envType Brake_status__511::Overspd_envType_MIN;
constexpr Brake_status__511_Overspd_envType Brake_status__511::Overspd_envType_MAX;
constexpr int Brake_status__511::Overspd_envType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Throttle_pedal_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[12];
}
bool Throttle_status__510_Throttle_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_DISABLE;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_ENABLE;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_TAKEOVER;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MIN;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MAX;
constexpr int Throttle_status__510::Throttle_pedal_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Drive_motor_errType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[13];
}
bool Throttle_status__510_Drive_motor_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510::DRIVE_MOTOR_ERR_NOERR;
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510::DRIVE_MOTOR_ERR_DRV_MOTOR_ERR;
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510::Drive_motor_errType_MIN;
constexpr Throttle_status__510_Drive_motor_errType Throttle_status__510::Drive_motor_errType_MAX;
constexpr int Throttle_status__510::Drive_motor_errType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Battery_bms_errType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[14];
}
bool Throttle_status__510_Battery_bms_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510::BATTERY_BMS_ERR_NOERR;
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510::BATTERY_BMS_ERR_BATTERY_ERR;
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510::Battery_bms_errType_MIN;
constexpr Throttle_status__510_Battery_bms_errType Throttle_status__510::Battery_bms_errType_MAX;
constexpr int Throttle_status__510::Battery_bms_errType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_status__513_Turn_signal_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[15];
}
bool Turnsignal_status__513_Turn_signal_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_NONE;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_LEFT;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_RIGHT;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MIN;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MAX;
constexpr int Turnsignal_status__513::Turn_signal_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Steer_angle_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[16];
}
bool Steer_status__512_Steer_angle_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_DISABLE;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_ENABLE;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_TAKEOVER;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MIN;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MAX;
constexpr int Steer_status__512::Steer_angle_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Steer_errType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[17];
}
bool Steer_status__512_Steer_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Steer_status__512_Steer_errType Steer_status__512::STEER_ERR_NOERR;
constexpr Steer_status__512_Steer_errType Steer_status__512::STEER_ERR_STEER_MOTOR_ERR;
constexpr Steer_status__512_Steer_errType Steer_status__512::Steer_errType_MIN;
constexpr Steer_status__512_Steer_errType Steer_status__512::Steer_errType_MAX;
constexpr int Steer_status__512::Steer_errType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Sensor_errType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[18];
}
bool Steer_status__512_Sensor_errType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Steer_status__512_Sensor_errType Steer_status__512::SENSOR_ERR_NOERR;
constexpr Steer_status__512_Sensor_errType Steer_status__512::SENSOR_ERR_STEER_SENSOR_ERR;
constexpr Steer_status__512_Sensor_errType Steer_status__512::Sensor_errType_MIN;
constexpr Steer_status__512_Sensor_errType Steer_status__512::Sensor_errType_MAX;
constexpr int Steer_status__512::Sensor_errType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ecu_status_1_515_Ctrl_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[19];
}
bool Ecu_status_1_515_Ctrl_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_OUT_OF_CONTROL;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_UNDER_CONTROL;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MIN;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MAX;
constexpr int Ecu_status_1_515::Ctrl_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_status_514_Gear_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[20];
}
bool Gear_status_514_Gear_stsType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_PARK;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_REVERSE;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_NEUTRAL;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_DRIVE;
constexpr Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MIN;
constexpr Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MAX;
constexpr int Gear_status_514::Gear_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Control_command_115::_Internal {
 public:
  using HasBits = decltype(std::declval<Control_command_115>()._impl_._has_bits_);
  static void set_has_ctrl_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Control_command_115::Control_command_115(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Control_command_115)
}
Control_command_115::Control_command_115(const Control_command_115& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctrl_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ctrl_cmd_ = from._impl_.ctrl_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Control_command_115)
}

inline void Control_command_115::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctrl_cmd_){0}
  };
}

Control_command_115::~Control_command_115() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Control_command_115)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Control_command_115::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_command_115::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Control_command_115::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Control_command_115)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ctrl_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_command_115::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Control_command_115_Ctrl_cmdType_IsValid(val))) {
            _internal_set_ctrl_cmd(static_cast<::apollo::canbus::Control_command_115_Ctrl_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Control_command_115::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Control_command_115)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ctrl_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Control_command_115)
  return target;
}

size_t Control_command_115::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Control_command_115)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ctrl_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_command_115::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_command_115::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_command_115::GetClassData() const { return &_class_data_; }

void Control_command_115::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Control_command_115 *>(to)->MergeFrom(
      static_cast<const Control_command_115 &>(from));
}


void Control_command_115::MergeFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Control_command_115)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ctrl_cmd()) {
    _internal_set_ctrl_cmd(from._internal_ctrl_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_command_115::CopyFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Control_command_115)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_command_115::IsInitialized() const {
  return true;
}

void Control_command_115::InternalSwap(Control_command_115* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ctrl_cmd_, other->_impl_.ctrl_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_command_115::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[0]);
}

// ===================================================================

class Gear_command_114::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_command_114>()._impl_._has_bits_);
  static void set_has_gear_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_command_114::Gear_command_114(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gear_command_114)
}
Gear_command_114::Gear_command_114(const Gear_command_114& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gear_cmd_ = from._impl_.gear_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_command_114)
}

inline void Gear_command_114::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_cmd_){1}
  };
}

Gear_command_114::~Gear_command_114() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_command_114)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gear_command_114::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gear_command_114::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gear_command_114::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_command_114)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gear_cmd_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gear_command_114::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_command_114_Gear_cmdType_IsValid(val))) {
            _internal_set_gear_cmd(static_cast<::apollo::canbus::Gear_command_114_Gear_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gear_command_114::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_command_114)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_command_114)
  return target;
}

size_t Gear_command_114::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_command_114)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gear_command_114::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gear_command_114::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gear_command_114::GetClassData() const { return &_class_data_; }

void Gear_command_114::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gear_command_114 *>(to)->MergeFrom(
      static_cast<const Gear_command_114 &>(from));
}


void Gear_command_114::MergeFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_command_114)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gear_cmd()) {
    _internal_set_gear_cmd(from._internal_gear_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gear_command_114::CopyFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_command_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_command_114::IsInitialized() const {
  return true;
}

void Gear_command_114::InternalSwap(Gear_command_114* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gear_cmd_, other->_impl_.gear_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_command_114::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[1]);
}

// ===================================================================

class Brake_command_111::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_command_111>()._impl_._has_bits_);
  static void set_has_brake_pedal_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_pedal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_command_111::Brake_command_111(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_command_111)
}
Brake_command_111::Brake_command_111(const Brake_command_111& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_en_ctrl_){}
    , decltype(_impl_.brake_pedal_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_pedal_en_ctrl_, &from._impl_.brake_pedal_en_ctrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brake_pedal_cmd_) -
    reinterpret_cast<char*>(&_impl_.brake_pedal_en_ctrl_)) + sizeof(_impl_.brake_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_command_111)
}

inline void Brake_command_111::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_en_ctrl_){0}
    , decltype(_impl_.brake_pedal_cmd_){0}
  };
}

Brake_command_111::~Brake_command_111() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_command_111)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_command_111::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_command_111::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_command_111::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_command_111)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.brake_pedal_en_ctrl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_pedal_cmd_) -
        reinterpret_cast<char*>(&_impl_.brake_pedal_en_ctrl_)) + sizeof(_impl_.brake_pedal_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_command_111::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(val))) {
            _internal_set_brake_pedal_en_ctrl(static_cast<::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 brake_pedal_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_brake_pedal_cmd(&has_bits);
          _impl_.brake_pedal_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_command_111::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_command_111)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_pedal_en_ctrl(), target);
  }

  // optional int32 brake_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_brake_pedal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_command_111)
  return target;
}

size_t Brake_command_111::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_command_111)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_pedal_en_ctrl());
    }

    // optional int32 brake_pedal_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_brake_pedal_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_command_111::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_command_111::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_command_111::GetClassData() const { return &_class_data_; }

void Brake_command_111::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_command_111 *>(to)->MergeFrom(
      static_cast<const Brake_command_111 &>(from));
}


void Brake_command_111::MergeFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_command_111)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_pedal_en_ctrl_ = from._impl_.brake_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brake_pedal_cmd_ = from._impl_.brake_pedal_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_command_111::CopyFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_command_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_command_111::IsInitialized() const {
  return true;
}

void Brake_command_111::InternalSwap(Brake_command_111* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_command_111, _impl_.brake_pedal_cmd_)
      + sizeof(Brake_command_111::_impl_.brake_pedal_cmd_)
      - PROTOBUF_FIELD_OFFSET(Brake_command_111, _impl_.brake_pedal_en_ctrl_)>(
          reinterpret_cast<char*>(&_impl_.brake_pedal_en_ctrl_),
          reinterpret_cast<char*>(&other->_impl_.brake_pedal_en_ctrl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_command_111::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[2]);
}

// ===================================================================

class Throttle_command_110::_Internal {
 public:
  using HasBits = decltype(std::declval<Throttle_command_110>()._impl_._has_bits_);
  static void set_has_throttle_pedal_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle_pedal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Throttle_command_110::Throttle_command_110(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Throttle_command_110)
}
Throttle_command_110::Throttle_command_110(const Throttle_command_110& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.throttle_pedal_en_ctrl_){}
    , decltype(_impl_.throttle_pedal_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.throttle_pedal_en_ctrl_, &from._impl_.throttle_pedal_en_ctrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.throttle_pedal_cmd_) -
    reinterpret_cast<char*>(&_impl_.throttle_pedal_en_ctrl_)) + sizeof(_impl_.throttle_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Throttle_command_110)
}

inline void Throttle_command_110::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.throttle_pedal_en_ctrl_){0}
    , decltype(_impl_.throttle_pedal_cmd_){0}
  };
}

Throttle_command_110::~Throttle_command_110() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Throttle_command_110)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Throttle_command_110::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Throttle_command_110::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Throttle_command_110::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Throttle_command_110)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.throttle_pedal_en_ctrl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.throttle_pedal_cmd_) -
        reinterpret_cast<char*>(&_impl_.throttle_pedal_en_ctrl_)) + sizeof(_impl_.throttle_pedal_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Throttle_command_110::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(val))) {
            _internal_set_throttle_pedal_en_ctrl(static_cast<::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 throttle_pedal_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_throttle_pedal_cmd(&has_bits);
          _impl_.throttle_pedal_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Throttle_command_110::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Throttle_command_110)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_throttle_pedal_en_ctrl(), target);
  }

  // optional int32 throttle_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_throttle_pedal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Throttle_command_110)
  return target;
}

size_t Throttle_command_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Throttle_command_110)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_throttle_pedal_en_ctrl());
    }

    // optional int32 throttle_pedal_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_throttle_pedal_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Throttle_command_110::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Throttle_command_110::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Throttle_command_110::GetClassData() const { return &_class_data_; }

void Throttle_command_110::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Throttle_command_110 *>(to)->MergeFrom(
      static_cast<const Throttle_command_110 &>(from));
}


void Throttle_command_110::MergeFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Throttle_command_110)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.throttle_pedal_en_ctrl_ = from._impl_.throttle_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.throttle_pedal_cmd_ = from._impl_.throttle_pedal_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Throttle_command_110::CopyFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Throttle_command_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_command_110::IsInitialized() const {
  return true;
}

void Throttle_command_110::InternalSwap(Throttle_command_110* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Throttle_command_110, _impl_.throttle_pedal_cmd_)
      + sizeof(Throttle_command_110::_impl_.throttle_pedal_cmd_)
      - PROTOBUF_FIELD_OFFSET(Throttle_command_110, _impl_.throttle_pedal_en_ctrl_)>(
          reinterpret_cast<char*>(&_impl_.throttle_pedal_en_ctrl_),
          reinterpret_cast<char*>(&other->_impl_.throttle_pedal_en_ctrl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Throttle_command_110::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[3]);
}

// ===================================================================

class Turnsignal_command_113::_Internal {
 public:
  using HasBits = decltype(std::declval<Turnsignal_command_113>()._impl_._has_bits_);
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turnsignal_command_113::Turnsignal_command_113(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turnsignal_command_113)
}
Turnsignal_command_113::Turnsignal_command_113(const Turnsignal_command_113& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.turn_signal_cmd_ = from._impl_.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turnsignal_command_113)
}

inline void Turnsignal_command_113::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_cmd_){0}
  };
}

Turnsignal_command_113::~Turnsignal_command_113() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turnsignal_command_113)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turnsignal_command_113::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turnsignal_command_113::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turnsignal_command_113::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turnsignal_command_113)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turn_signal_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turnsignal_command_113::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turnsignal_command_113::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turnsignal_command_113)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turnsignal_command_113)
  return target;
}

size_t Turnsignal_command_113::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turnsignal_command_113)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turnsignal_command_113::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turnsignal_command_113::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turnsignal_command_113::GetClassData() const { return &_class_data_; }

void Turnsignal_command_113::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turnsignal_command_113 *>(to)->MergeFrom(
      static_cast<const Turnsignal_command_113 &>(from));
}


void Turnsignal_command_113::MergeFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turnsignal_command_113)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_cmd()) {
    _internal_set_turn_signal_cmd(from._internal_turn_signal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turnsignal_command_113::CopyFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turnsignal_command_113)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_command_113::IsInitialized() const {
  return true;
}

void Turnsignal_command_113::InternalSwap(Turnsignal_command_113* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.turn_signal_cmd_, other->_impl_.turn_signal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turnsignal_command_113::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[4]);
}

// ===================================================================

class Steer_command_112::_Internal {
 public:
  using HasBits = decltype(std::declval<Steer_command_112>()._impl_._has_bits_);
  static void set_has_steer_angle_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_angle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Steer_command_112::Steer_command_112(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steer_command_112)
}
Steer_command_112::Steer_command_112(const Steer_command_112& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_cmd_){}
    , decltype(_impl_.steer_angle_en_ctrl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steer_angle_cmd_, &from._impl_.steer_angle_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steer_angle_en_ctrl_) -
    reinterpret_cast<char*>(&_impl_.steer_angle_cmd_)) + sizeof(_impl_.steer_angle_en_ctrl_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steer_command_112)
}

inline void Steer_command_112::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_cmd_){0}
    , decltype(_impl_.steer_angle_en_ctrl_){0}
  };
}

Steer_command_112::~Steer_command_112() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steer_command_112)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steer_command_112::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steer_command_112::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steer_command_112::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steer_command_112)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steer_angle_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steer_angle_en_ctrl_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_cmd_)) + sizeof(_impl_.steer_angle_en_ctrl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steer_command_112::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(val))) {
            _internal_set_steer_angle_en_ctrl(static_cast<::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steer_angle_cmd(&has_bits);
          _impl_.steer_angle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steer_command_112::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steer_command_112)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_steer_angle_en_ctrl(), target);
  }

  // optional double steer_angle_cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer_angle_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steer_command_112)
  return target;
}

size_t Steer_command_112::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steer_command_112)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double steer_angle_cmd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steer_angle_en_ctrl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steer_command_112::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steer_command_112::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steer_command_112::GetClassData() const { return &_class_data_; }

void Steer_command_112::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steer_command_112 *>(to)->MergeFrom(
      static_cast<const Steer_command_112 &>(from));
}


void Steer_command_112::MergeFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steer_command_112)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.steer_angle_cmd_ = from._impl_.steer_angle_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steer_angle_en_ctrl_ = from._impl_.steer_angle_en_ctrl_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steer_command_112::CopyFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steer_command_112)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_command_112::IsInitialized() const {
  return true;
}

void Steer_command_112::InternalSwap(Steer_command_112* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steer_command_112, _impl_.steer_angle_en_ctrl_)
      + sizeof(Steer_command_112::_impl_.steer_angle_en_ctrl_)
      - PROTOBUF_FIELD_OFFSET(Steer_command_112, _impl_.steer_angle_cmd_)>(
          reinterpret_cast<char*>(&_impl_.steer_angle_cmd_),
          reinterpret_cast<char*>(&other->_impl_.steer_angle_cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steer_command_112::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[5]);
}

// ===================================================================

class Brake_status__511::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_status__511>()._impl_._has_bits_);
  static void set_has_brake_pedal_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_pedal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brake_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_emergency_btn_env(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_front_bump_env(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_back_bump_env(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_overspd_env(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Brake_status__511::Brake_status__511(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_status__511)
}
Brake_status__511::Brake_status__511(const Brake_status__511& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_en_sts_){}
    , decltype(_impl_.brake_pedal_sts_){}
    , decltype(_impl_.brake_err_){}
    , decltype(_impl_.emergency_btn_env_){}
    , decltype(_impl_.front_bump_env_){}
    , decltype(_impl_.back_bump_env_){}
    , decltype(_impl_.overspd_env_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_pedal_en_sts_, &from._impl_.brake_pedal_en_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overspd_env_) -
    reinterpret_cast<char*>(&_impl_.brake_pedal_en_sts_)) + sizeof(_impl_.overspd_env_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_status__511)
}

inline void Brake_status__511::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_en_sts_){0}
    , decltype(_impl_.brake_pedal_sts_){0}
    , decltype(_impl_.brake_err_){0}
    , decltype(_impl_.emergency_btn_env_){0}
    , decltype(_impl_.front_bump_env_){0}
    , decltype(_impl_.back_bump_env_){0}
    , decltype(_impl_.overspd_env_){0}
  };
}

Brake_status__511::~Brake_status__511() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_status__511)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_status__511::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_status__511::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_status__511::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_status__511)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.brake_pedal_en_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.overspd_env_) -
        reinterpret_cast<char*>(&_impl_.brake_pedal_en_sts_)) + sizeof(_impl_.overspd_env_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_status__511::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(val))) {
            _internal_set_brake_pedal_en_sts(static_cast<::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 brake_pedal_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_brake_pedal_sts(&has_bits);
          _impl_.brake_pedal_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511.Brake_errType brake_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Brake_errType_IsValid(val))) {
            _internal_set_brake_err(static_cast<::apollo::canbus::Brake_status__511_Brake_errType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Emergency_btn_envType_IsValid(val))) {
            _internal_set_emergency_btn_env(static_cast<::apollo::canbus::Brake_status__511_Emergency_btn_envType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Front_bump_envType_IsValid(val))) {
            _internal_set_front_bump_env(static_cast<::apollo::canbus::Brake_status__511_Front_bump_envType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Back_bump_envType_IsValid(val))) {
            _internal_set_back_bump_env(static_cast<::apollo::canbus::Brake_status__511_Back_bump_envType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Overspd_envType_IsValid(val))) {
            _internal_set_overspd_env(static_cast<::apollo::canbus::Brake_status__511_Overspd_envType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_status__511::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_status__511)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_pedal_en_sts(), target);
  }

  // optional int32 brake_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_brake_pedal_sts(), target);
  }

  // optional .apollo.canbus.Brake_status__511.Brake_errType brake_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_brake_err(), target);
  }

  // optional .apollo.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_emergency_btn_env(), target);
  }

  // optional .apollo.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_front_bump_env(), target);
  }

  // optional .apollo.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_back_bump_env(), target);
  }

  // optional .apollo.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_overspd_env(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_status__511)
  return target;
}

size_t Brake_status__511::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_status__511)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_pedal_en_sts());
    }

    // optional int32 brake_pedal_sts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_brake_pedal_sts());
    }

    // optional .apollo.canbus.Brake_status__511.Brake_errType brake_err = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_err());
    }

    // optional .apollo.canbus.Brake_status__511.Emergency_btn_envType emergency_btn_env = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_emergency_btn_env());
    }

    // optional .apollo.canbus.Brake_status__511.Front_bump_envType front_bump_env = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_front_bump_env());
    }

    // optional .apollo.canbus.Brake_status__511.Back_bump_envType back_bump_env = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_back_bump_env());
    }

    // optional .apollo.canbus.Brake_status__511.Overspd_envType overspd_env = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_overspd_env());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_status__511::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_status__511::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_status__511::GetClassData() const { return &_class_data_; }

void Brake_status__511::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_status__511 *>(to)->MergeFrom(
      static_cast<const Brake_status__511 &>(from));
}


void Brake_status__511::MergeFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_status__511)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_pedal_en_sts_ = from._impl_.brake_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brake_pedal_sts_ = from._impl_.brake_pedal_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.brake_err_ = from._impl_.brake_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.emergency_btn_env_ = from._impl_.emergency_btn_env_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.front_bump_env_ = from._impl_.front_bump_env_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.back_bump_env_ = from._impl_.back_bump_env_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.overspd_env_ = from._impl_.overspd_env_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_status__511::CopyFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_status__511)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_status__511::IsInitialized() const {
  return true;
}

void Brake_status__511::InternalSwap(Brake_status__511* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_status__511, _impl_.overspd_env_)
      + sizeof(Brake_status__511::_impl_.overspd_env_)
      - PROTOBUF_FIELD_OFFSET(Brake_status__511, _impl_.brake_pedal_en_sts_)>(
          reinterpret_cast<char*>(&_impl_.brake_pedal_en_sts_),
          reinterpret_cast<char*>(&other->_impl_.brake_pedal_en_sts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_status__511::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[6]);
}

// ===================================================================

class Throttle_status__510::_Internal {
 public:
  using HasBits = decltype(std::declval<Throttle_status__510>()._impl_._has_bits_);
  static void set_has_throttle_pedal_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle_pedal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drive_motor_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battery_bms_err(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Throttle_status__510::Throttle_status__510(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Throttle_status__510)
}
Throttle_status__510::Throttle_status__510(const Throttle_status__510& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.throttle_pedal_en_sts_){}
    , decltype(_impl_.throttle_pedal_sts_){}
    , decltype(_impl_.drive_motor_err_){}
    , decltype(_impl_.battery_bms_err_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.throttle_pedal_en_sts_, &from._impl_.throttle_pedal_en_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_bms_err_) -
    reinterpret_cast<char*>(&_impl_.throttle_pedal_en_sts_)) + sizeof(_impl_.battery_bms_err_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Throttle_status__510)
}

inline void Throttle_status__510::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.throttle_pedal_en_sts_){0}
    , decltype(_impl_.throttle_pedal_sts_){0}
    , decltype(_impl_.drive_motor_err_){0}
    , decltype(_impl_.battery_bms_err_){0}
  };
}

Throttle_status__510::~Throttle_status__510() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Throttle_status__510)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Throttle_status__510::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Throttle_status__510::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Throttle_status__510::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Throttle_status__510)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.throttle_pedal_en_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.battery_bms_err_) -
        reinterpret_cast<char*>(&_impl_.throttle_pedal_en_sts_)) + sizeof(_impl_.battery_bms_err_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Throttle_status__510::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(val))) {
            _internal_set_throttle_pedal_en_sts(static_cast<::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 throttle_pedal_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_throttle_pedal_sts(&has_bits);
          _impl_.throttle_pedal_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_status__510_Drive_motor_errType_IsValid(val))) {
            _internal_set_drive_motor_err(static_cast<::apollo::canbus::Throttle_status__510_Drive_motor_errType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_status__510_Battery_bms_errType_IsValid(val))) {
            _internal_set_battery_bms_err(static_cast<::apollo::canbus::Throttle_status__510_Battery_bms_errType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Throttle_status__510::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Throttle_status__510)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_throttle_pedal_en_sts(), target);
  }

  // optional int32 throttle_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_throttle_pedal_sts(), target);
  }

  // optional .apollo.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_drive_motor_err(), target);
  }

  // optional .apollo.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_battery_bms_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Throttle_status__510)
  return target;
}

size_t Throttle_status__510::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Throttle_status__510)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_throttle_pedal_en_sts());
    }

    // optional int32 throttle_pedal_sts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_throttle_pedal_sts());
    }

    // optional .apollo.canbus.Throttle_status__510.Drive_motor_errType drive_motor_err = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_drive_motor_err());
    }

    // optional .apollo.canbus.Throttle_status__510.Battery_bms_errType battery_bms_err = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_battery_bms_err());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Throttle_status__510::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Throttle_status__510::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Throttle_status__510::GetClassData() const { return &_class_data_; }

void Throttle_status__510::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Throttle_status__510 *>(to)->MergeFrom(
      static_cast<const Throttle_status__510 &>(from));
}


void Throttle_status__510::MergeFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Throttle_status__510)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.throttle_pedal_en_sts_ = from._impl_.throttle_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.throttle_pedal_sts_ = from._impl_.throttle_pedal_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.drive_motor_err_ = from._impl_.drive_motor_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.battery_bms_err_ = from._impl_.battery_bms_err_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Throttle_status__510::CopyFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Throttle_status__510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_status__510::IsInitialized() const {
  return true;
}

void Throttle_status__510::InternalSwap(Throttle_status__510* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Throttle_status__510, _impl_.battery_bms_err_)
      + sizeof(Throttle_status__510::_impl_.battery_bms_err_)
      - PROTOBUF_FIELD_OFFSET(Throttle_status__510, _impl_.throttle_pedal_en_sts_)>(
          reinterpret_cast<char*>(&_impl_.throttle_pedal_en_sts_),
          reinterpret_cast<char*>(&other->_impl_.throttle_pedal_en_sts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Throttle_status__510::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[7]);
}

// ===================================================================

class Turnsignal_status__513::_Internal {
 public:
  using HasBits = decltype(std::declval<Turnsignal_status__513>()._impl_._has_bits_);
  static void set_has_turn_signal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turnsignal_status__513::Turnsignal_status__513(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turnsignal_status__513)
}
Turnsignal_status__513::Turnsignal_status__513(const Turnsignal_status__513& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_sts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.turn_signal_sts_ = from._impl_.turn_signal_sts_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turnsignal_status__513)
}

inline void Turnsignal_status__513::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_sts_){0}
  };
}

Turnsignal_status__513::~Turnsignal_status__513() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turnsignal_status__513)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turnsignal_status__513::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turnsignal_status__513::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turnsignal_status__513::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turnsignal_status__513)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turn_signal_sts_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turnsignal_status__513::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(val))) {
            _internal_set_turn_signal_sts(static_cast<::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turnsignal_status__513::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turnsignal_status__513)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turnsignal_status__513)
  return target;
}

size_t Turnsignal_status__513::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turnsignal_status__513)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_signal_sts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turnsignal_status__513::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turnsignal_status__513::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turnsignal_status__513::GetClassData() const { return &_class_data_; }

void Turnsignal_status__513::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turnsignal_status__513 *>(to)->MergeFrom(
      static_cast<const Turnsignal_status__513 &>(from));
}


void Turnsignal_status__513::MergeFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turnsignal_status__513)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_sts()) {
    _internal_set_turn_signal_sts(from._internal_turn_signal_sts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turnsignal_status__513::CopyFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turnsignal_status__513)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_status__513::IsInitialized() const {
  return true;
}

void Turnsignal_status__513::InternalSwap(Turnsignal_status__513* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.turn_signal_sts_, other->_impl_.turn_signal_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turnsignal_status__513::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[8]);
}

// ===================================================================

class Steer_status__512::_Internal {
 public:
  using HasBits = decltype(std::declval<Steer_status__512>()._impl_._has_bits_);
  static void set_has_steer_angle_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_angle_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steer_err(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sensor_err(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Steer_status__512::Steer_status__512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steer_status__512)
}
Steer_status__512::Steer_status__512(const Steer_status__512& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_sts_){}
    , decltype(_impl_.steer_angle_en_sts_){}
    , decltype(_impl_.steer_err_){}
    , decltype(_impl_.sensor_err_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steer_angle_sts_, &from._impl_.steer_angle_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sensor_err_) -
    reinterpret_cast<char*>(&_impl_.steer_angle_sts_)) + sizeof(_impl_.sensor_err_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steer_status__512)
}

inline void Steer_status__512::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_sts_){0}
    , decltype(_impl_.steer_angle_en_sts_){0}
    , decltype(_impl_.steer_err_){0}
    , decltype(_impl_.sensor_err_){0}
  };
}

Steer_status__512::~Steer_status__512() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steer_status__512)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steer_status__512::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steer_status__512::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steer_status__512::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steer_status__512)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steer_angle_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sensor_err_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_sts_)) + sizeof(_impl_.sensor_err_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steer_status__512::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(val))) {
            _internal_set_steer_angle_en_sts(static_cast<::apollo::canbus::Steer_status__512_Steer_angle_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steer_angle_sts(&has_bits);
          _impl_.steer_angle_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_status__512.Steer_errType steer_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_status__512_Steer_errType_IsValid(val))) {
            _internal_set_steer_err(static_cast<::apollo::canbus::Steer_status__512_Steer_errType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_status__512_Sensor_errType_IsValid(val))) {
            _internal_set_sensor_err(static_cast<::apollo::canbus::Steer_status__512_Sensor_errType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steer_status__512::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steer_status__512)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_steer_angle_en_sts(), target);
  }

  // optional double steer_angle_sts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer_angle_sts(), target);
  }

  // optional .apollo.canbus.Steer_status__512.Steer_errType steer_err = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_steer_err(), target);
  }

  // optional .apollo.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sensor_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steer_status__512)
  return target;
}

size_t Steer_status__512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steer_status__512)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double steer_angle_sts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steer_angle_en_sts());
    }

    // optional .apollo.canbus.Steer_status__512.Steer_errType steer_err = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steer_err());
    }

    // optional .apollo.canbus.Steer_status__512.Sensor_errType sensor_err = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sensor_err());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steer_status__512::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steer_status__512::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steer_status__512::GetClassData() const { return &_class_data_; }

void Steer_status__512::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steer_status__512 *>(to)->MergeFrom(
      static_cast<const Steer_status__512 &>(from));
}


void Steer_status__512::MergeFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steer_status__512)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.steer_angle_sts_ = from._impl_.steer_angle_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steer_angle_en_sts_ = from._impl_.steer_angle_en_sts_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.steer_err_ = from._impl_.steer_err_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sensor_err_ = from._impl_.sensor_err_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steer_status__512::CopyFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steer_status__512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_status__512::IsInitialized() const {
  return true;
}

void Steer_status__512::InternalSwap(Steer_status__512* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steer_status__512, _impl_.sensor_err_)
      + sizeof(Steer_status__512::_impl_.sensor_err_)
      - PROTOBUF_FIELD_OFFSET(Steer_status__512, _impl_.steer_angle_sts_)>(
          reinterpret_cast<char*>(&_impl_.steer_angle_sts_),
          reinterpret_cast<char*>(&other->_impl_.steer_angle_sts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steer_status__512::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[9]);
}

// ===================================================================

class Ecu_status_1_515::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_1_515>()._impl_._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctrl_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chassis_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chassis_err(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Ecu_status_1_515::Ecu_status_1_515(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ecu_status_1_515)
}
Ecu_status_1_515::Ecu_status_1_515(const Ecu_status_1_515& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.acc_speed_){}
    , decltype(_impl_.ctrl_sts_){}
    , decltype(_impl_.chassis_sts_){}
    , decltype(_impl_.chassis_err_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chassis_err_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.chassis_err_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_1_515)
}

inline void Ecu_status_1_515::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.acc_speed_){0}
    , decltype(_impl_.ctrl_sts_){0}
    , decltype(_impl_.chassis_sts_){0}
    , decltype(_impl_.chassis_err_){0}
  };
}

Ecu_status_1_515::~Ecu_status_1_515() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_1_515)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ecu_status_1_515::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ecu_status_1_515::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ecu_status_1_515::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_1_515)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chassis_err_) -
        reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.chassis_err_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ecu_status_1_515::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_acc_speed(&has_bits);
          _impl_.acc_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(val))) {
            _internal_set_ctrl_sts(static_cast<::apollo::canbus::Ecu_status_1_515_Ctrl_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 chassis_sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_chassis_sts(&has_bits);
          _impl_.chassis_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chassis_err = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_chassis_err(&has_bits);
          _impl_.chassis_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ecu_status_1_515::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_1_515)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional double acc_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_acc_speed(), target);
  }

  // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ctrl_sts(), target);
  }

  // optional int32 chassis_sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_chassis_sts(), target);
  }

  // optional int32 chassis_err = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_chassis_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_1_515)
  return target;
}

size_t Ecu_status_1_515::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_1_515)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double acc_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ctrl_sts());
    }

    // optional int32 chassis_sts = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chassis_sts());
    }

    // optional int32 chassis_err = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chassis_err());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ecu_status_1_515::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ecu_status_1_515::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ecu_status_1_515::GetClassData() const { return &_class_data_; }

void Ecu_status_1_515::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ecu_status_1_515 *>(to)->MergeFrom(
      static_cast<const Ecu_status_1_515 &>(from));
}


void Ecu_status_1_515::MergeFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_1_515)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.acc_speed_ = from._impl_.acc_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ctrl_sts_ = from._impl_.ctrl_sts_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.chassis_sts_ = from._impl_.chassis_sts_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.chassis_err_ = from._impl_.chassis_err_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ecu_status_1_515::CopyFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_1_515)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_1_515::IsInitialized() const {
  return true;
}

void Ecu_status_1_515::InternalSwap(Ecu_status_1_515* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ecu_status_1_515, _impl_.chassis_err_)
      + sizeof(Ecu_status_1_515::_impl_.chassis_err_)
      - PROTOBUF_FIELD_OFFSET(Ecu_status_1_515, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_1_515::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[10]);
}

// ===================================================================

class Gear_status_514::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_status_514>()._impl_._has_bits_);
  static void set_has_gear_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_status_514::Gear_status_514(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gear_status_514)
}
Gear_status_514::Gear_status_514(const Gear_status_514& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_sts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gear_sts_ = from._impl_.gear_sts_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_status_514)
}

inline void Gear_status_514::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_sts_){1}
  };
}

Gear_status_514::~Gear_status_514() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_status_514)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gear_status_514::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gear_status_514::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gear_status_514::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_status_514)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gear_sts_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gear_status_514::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_status_514_Gear_stsType_IsValid(val))) {
            _internal_set_gear_sts(static_cast<::apollo::canbus::Gear_status_514_Gear_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gear_status_514::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_status_514)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_status_514)
  return target;
}

size_t Gear_status_514::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_status_514)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_sts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gear_status_514::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gear_status_514::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gear_status_514::GetClassData() const { return &_class_data_; }

void Gear_status_514::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gear_status_514 *>(to)->MergeFrom(
      static_cast<const Gear_status_514 &>(from));
}


void Gear_status_514::MergeFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_status_514)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gear_sts()) {
    _internal_set_gear_sts(from._internal_gear_sts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gear_status_514::CopyFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_status_514)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_status_514::IsInitialized() const {
  return true;
}

void Gear_status_514::InternalSwap(Gear_status_514* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gear_sts_, other->_impl_.gear_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_status_514::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[11]);
}

// ===================================================================

class Ecu_status_3_517::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_3_517>()._impl_._has_bits_);
  static void set_has_ultrasound_dist_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ultrasound_dist_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ultrasound_dist_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ultrasound_dist_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ultrasound_dist_5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ultrasound_dist_6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ultrasound_dist_7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ultrasound_dist_8(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Ecu_status_3_517::Ecu_status_3_517(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ecu_status_3_517)
}
Ecu_status_3_517::Ecu_status_3_517(const Ecu_status_3_517& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ultrasound_dist_1_){}
    , decltype(_impl_.ultrasound_dist_2_){}
    , decltype(_impl_.ultrasound_dist_3_){}
    , decltype(_impl_.ultrasound_dist_4_){}
    , decltype(_impl_.ultrasound_dist_5_){}
    , decltype(_impl_.ultrasound_dist_6_){}
    , decltype(_impl_.ultrasound_dist_7_){}
    , decltype(_impl_.ultrasound_dist_8_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ultrasound_dist_1_, &from._impl_.ultrasound_dist_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ultrasound_dist_8_) -
    reinterpret_cast<char*>(&_impl_.ultrasound_dist_1_)) + sizeof(_impl_.ultrasound_dist_8_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_3_517)
}

inline void Ecu_status_3_517::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ultrasound_dist_1_){0}
    , decltype(_impl_.ultrasound_dist_2_){0}
    , decltype(_impl_.ultrasound_dist_3_){0}
    , decltype(_impl_.ultrasound_dist_4_){0}
    , decltype(_impl_.ultrasound_dist_5_){0}
    , decltype(_impl_.ultrasound_dist_6_){0}
    , decltype(_impl_.ultrasound_dist_7_){0}
    , decltype(_impl_.ultrasound_dist_8_){0}
  };
}

Ecu_status_3_517::~Ecu_status_3_517() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_3_517)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ecu_status_3_517::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ecu_status_3_517::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ecu_status_3_517::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_3_517)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.ultrasound_dist_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ultrasound_dist_8_) -
        reinterpret_cast<char*>(&_impl_.ultrasound_dist_1_)) + sizeof(_impl_.ultrasound_dist_8_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ecu_status_3_517::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ultrasound_dist_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ultrasound_dist_1(&has_bits);
          _impl_.ultrasound_dist_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ultrasound_dist_2(&has_bits);
          _impl_.ultrasound_dist_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ultrasound_dist_3(&has_bits);
          _impl_.ultrasound_dist_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ultrasound_dist_4(&has_bits);
          _impl_.ultrasound_dist_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ultrasound_dist_5(&has_bits);
          _impl_.ultrasound_dist_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ultrasound_dist_6(&has_bits);
          _impl_.ultrasound_dist_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ultrasound_dist_7(&has_bits);
          _impl_.ultrasound_dist_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ultrasound_dist_8(&has_bits);
          _impl_.ultrasound_dist_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ecu_status_3_517::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_3_517)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ultrasound_dist_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ultrasound_dist_1(), target);
  }

  // optional int32 ultrasound_dist_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ultrasound_dist_2(), target);
  }

  // optional int32 ultrasound_dist_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ultrasound_dist_3(), target);
  }

  // optional int32 ultrasound_dist_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ultrasound_dist_4(), target);
  }

  // optional int32 ultrasound_dist_5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ultrasound_dist_5(), target);
  }

  // optional int32 ultrasound_dist_6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ultrasound_dist_6(), target);
  }

  // optional int32 ultrasound_dist_7 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ultrasound_dist_7(), target);
  }

  // optional int32 ultrasound_dist_8 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_ultrasound_dist_8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_3_517)
  return target;
}

size_t Ecu_status_3_517::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_3_517)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 ultrasound_dist_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_1());
    }

    // optional int32 ultrasound_dist_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_2());
    }

    // optional int32 ultrasound_dist_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_3());
    }

    // optional int32 ultrasound_dist_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_4());
    }

    // optional int32 ultrasound_dist_5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_5());
    }

    // optional int32 ultrasound_dist_6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_6());
    }

    // optional int32 ultrasound_dist_7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_7());
    }

    // optional int32 ultrasound_dist_8 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ultrasound_dist_8());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ecu_status_3_517::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ecu_status_3_517::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ecu_status_3_517::GetClassData() const { return &_class_data_; }

void Ecu_status_3_517::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ecu_status_3_517 *>(to)->MergeFrom(
      static_cast<const Ecu_status_3_517 &>(from));
}


void Ecu_status_3_517::MergeFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_3_517)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ultrasound_dist_1_ = from._impl_.ultrasound_dist_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ultrasound_dist_2_ = from._impl_.ultrasound_dist_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ultrasound_dist_3_ = from._impl_.ultrasound_dist_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ultrasound_dist_4_ = from._impl_.ultrasound_dist_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ultrasound_dist_5_ = from._impl_.ultrasound_dist_5_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ultrasound_dist_6_ = from._impl_.ultrasound_dist_6_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.ultrasound_dist_7_ = from._impl_.ultrasound_dist_7_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ultrasound_dist_8_ = from._impl_.ultrasound_dist_8_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ecu_status_3_517::CopyFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_3_517)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_3_517::IsInitialized() const {
  return true;
}

void Ecu_status_3_517::InternalSwap(Ecu_status_3_517* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ecu_status_3_517, _impl_.ultrasound_dist_8_)
      + sizeof(Ecu_status_3_517::_impl_.ultrasound_dist_8_)
      - PROTOBUF_FIELD_OFFSET(Ecu_status_3_517, _impl_.ultrasound_dist_1_)>(
          reinterpret_cast<char*>(&_impl_.ultrasound_dist_1_),
          reinterpret_cast<char*>(&other->_impl_.ultrasound_dist_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_3_517::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[12]);
}

// ===================================================================

class Ecu_status_2_516::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_2_516>()._impl_._has_bits_);
  static void set_has_battery_remaining_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battery_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_battery_current(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_battery_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Ecu_status_2_516::Ecu_status_2_516(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ecu_status_2_516)
}
Ecu_status_2_516::Ecu_status_2_516(const Ecu_status_2_516& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_voltage_){}
    , decltype(_impl_.battery_remaining_capacity_){}
    , decltype(_impl_.battery_temperature_){}
    , decltype(_impl_.battery_current_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.battery_voltage_, &from._impl_.battery_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_current_) -
    reinterpret_cast<char*>(&_impl_.battery_voltage_)) + sizeof(_impl_.battery_current_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_2_516)
}

inline void Ecu_status_2_516::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_voltage_){0}
    , decltype(_impl_.battery_remaining_capacity_){0}
    , decltype(_impl_.battery_temperature_){0}
    , decltype(_impl_.battery_current_){0}
  };
}

Ecu_status_2_516::~Ecu_status_2_516() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_2_516)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ecu_status_2_516::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ecu_status_2_516::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ecu_status_2_516::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_2_516)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.battery_voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.battery_current_) -
        reinterpret_cast<char*>(&_impl_.battery_voltage_)) + sizeof(_impl_.battery_current_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ecu_status_2_516::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 battery_remaining_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_battery_remaining_capacity(&has_bits);
          _impl_.battery_remaining_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double battery_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_battery_voltage(&has_bits);
          _impl_.battery_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double battery_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_battery_current(&has_bits);
          _impl_.battery_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 battery_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_battery_temperature(&has_bits);
          _impl_.battery_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ecu_status_2_516::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_2_516)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 battery_remaining_capacity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_battery_remaining_capacity(), target);
  }

  // optional double battery_voltage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_battery_voltage(), target);
  }

  // optional double battery_current = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_battery_current(), target);
  }

  // optional int32 battery_temperature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_battery_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_2_516)
  return target;
}

size_t Ecu_status_2_516::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_2_516)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double battery_voltage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 battery_remaining_capacity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_battery_remaining_capacity());
    }

    // optional int32 battery_temperature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_battery_temperature());
    }

    // optional double battery_current = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ecu_status_2_516::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ecu_status_2_516::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ecu_status_2_516::GetClassData() const { return &_class_data_; }

void Ecu_status_2_516::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ecu_status_2_516 *>(to)->MergeFrom(
      static_cast<const Ecu_status_2_516 &>(from));
}


void Ecu_status_2_516::MergeFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_2_516)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.battery_voltage_ = from._impl_.battery_voltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.battery_remaining_capacity_ = from._impl_.battery_remaining_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.battery_temperature_ = from._impl_.battery_temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.battery_current_ = from._impl_.battery_current_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ecu_status_2_516::CopyFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_2_516)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_2_516::IsInitialized() const {
  return true;
}

void Ecu_status_2_516::InternalSwap(Ecu_status_2_516* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ecu_status_2_516, _impl_.battery_current_)
      + sizeof(Ecu_status_2_516::_impl_.battery_current_)
      - PROTOBUF_FIELD_OFFSET(Ecu_status_2_516, _impl_.battery_voltage_)>(
          reinterpret_cast<char*>(&_impl_.battery_voltage_),
          reinterpret_cast<char*>(&other->_impl_.battery_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_2_516::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[13]);
}

// ===================================================================

class Ch::_Internal {
 public:
  using HasBits = decltype(std::declval<Ch>()._impl_._has_bits_);
  static const ::apollo::canbus::Control_command_115& control_command_115(const Ch* msg);
  static void set_has_control_command_115(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Gear_command_114& gear_command_114(const Ch* msg);
  static void set_has_gear_command_114(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Brake_command_111& brake_command_111(const Ch* msg);
  static void set_has_brake_command_111(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Throttle_command_110& throttle_command_110(const Ch* msg);
  static void set_has_throttle_command_110(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Turnsignal_command_113& turnsignal_command_113(const Ch* msg);
  static void set_has_turnsignal_command_113(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Steer_command_112& steer_command_112(const Ch* msg);
  static void set_has_steer_command_112(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Brake_status__511& brake_status__511(const Ch* msg);
  static void set_has_brake_status__511(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Throttle_status__510& throttle_status__510(const Ch* msg);
  static void set_has_throttle_status__510(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Turnsignal_status__513& turnsignal_status__513(const Ch* msg);
  static void set_has_turnsignal_status__513(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Steer_status__512& steer_status__512(const Ch* msg);
  static void set_has_steer_status__512(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Ecu_status_1_515& ecu_status_1_515(const Ch* msg);
  static void set_has_ecu_status_1_515(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Gear_status_514& gear_status_514(const Ch* msg);
  static void set_has_gear_status_514(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Ecu_status_3_517& ecu_status_3_517(const Ch* msg);
  static void set_has_ecu_status_3_517(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Ecu_status_2_516& ecu_status_2_516(const Ch* msg);
  static void set_has_ecu_status_2_516(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::canbus::Control_command_115&
Ch::_Internal::control_command_115(const Ch* msg) {
  return *msg->_impl_.control_command_115_;
}
const ::apollo::canbus::Gear_command_114&
Ch::_Internal::gear_command_114(const Ch* msg) {
  return *msg->_impl_.gear_command_114_;
}
const ::apollo::canbus::Brake_command_111&
Ch::_Internal::brake_command_111(const Ch* msg) {
  return *msg->_impl_.brake_command_111_;
}
const ::apollo::canbus::Throttle_command_110&
Ch::_Internal::throttle_command_110(const Ch* msg) {
  return *msg->_impl_.throttle_command_110_;
}
const ::apollo::canbus::Turnsignal_command_113&
Ch::_Internal::turnsignal_command_113(const Ch* msg) {
  return *msg->_impl_.turnsignal_command_113_;
}
const ::apollo::canbus::Steer_command_112&
Ch::_Internal::steer_command_112(const Ch* msg) {
  return *msg->_impl_.steer_command_112_;
}
const ::apollo::canbus::Brake_status__511&
Ch::_Internal::brake_status__511(const Ch* msg) {
  return *msg->_impl_.brake_status__511_;
}
const ::apollo::canbus::Throttle_status__510&
Ch::_Internal::throttle_status__510(const Ch* msg) {
  return *msg->_impl_.throttle_status__510_;
}
const ::apollo::canbus::Turnsignal_status__513&
Ch::_Internal::turnsignal_status__513(const Ch* msg) {
  return *msg->_impl_.turnsignal_status__513_;
}
const ::apollo::canbus::Steer_status__512&
Ch::_Internal::steer_status__512(const Ch* msg) {
  return *msg->_impl_.steer_status__512_;
}
const ::apollo::canbus::Ecu_status_1_515&
Ch::_Internal::ecu_status_1_515(const Ch* msg) {
  return *msg->_impl_.ecu_status_1_515_;
}
const ::apollo::canbus::Gear_status_514&
Ch::_Internal::gear_status_514(const Ch* msg) {
  return *msg->_impl_.gear_status_514_;
}
const ::apollo::canbus::Ecu_status_3_517&
Ch::_Internal::ecu_status_3_517(const Ch* msg) {
  return *msg->_impl_.ecu_status_3_517_;
}
const ::apollo::canbus::Ecu_status_2_516&
Ch::_Internal::ecu_status_2_516(const Ch* msg) {
  return *msg->_impl_.ecu_status_2_516_;
}
Ch::Ch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ch)
}
Ch::Ch(const Ch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_command_115_){nullptr}
    , decltype(_impl_.gear_command_114_){nullptr}
    , decltype(_impl_.brake_command_111_){nullptr}
    , decltype(_impl_.throttle_command_110_){nullptr}
    , decltype(_impl_.turnsignal_command_113_){nullptr}
    , decltype(_impl_.steer_command_112_){nullptr}
    , decltype(_impl_.brake_status__511_){nullptr}
    , decltype(_impl_.throttle_status__510_){nullptr}
    , decltype(_impl_.turnsignal_status__513_){nullptr}
    , decltype(_impl_.steer_status__512_){nullptr}
    , decltype(_impl_.ecu_status_1_515_){nullptr}
    , decltype(_impl_.gear_status_514_){nullptr}
    , decltype(_impl_.ecu_status_3_517_){nullptr}
    , decltype(_impl_.ecu_status_2_516_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control_command_115()) {
    _impl_.control_command_115_ = new ::apollo::canbus::Control_command_115(*from._impl_.control_command_115_);
  }
  if (from._internal_has_gear_command_114()) {
    _impl_.gear_command_114_ = new ::apollo::canbus::Gear_command_114(*from._impl_.gear_command_114_);
  }
  if (from._internal_has_brake_command_111()) {
    _impl_.brake_command_111_ = new ::apollo::canbus::Brake_command_111(*from._impl_.brake_command_111_);
  }
  if (from._internal_has_throttle_command_110()) {
    _impl_.throttle_command_110_ = new ::apollo::canbus::Throttle_command_110(*from._impl_.throttle_command_110_);
  }
  if (from._internal_has_turnsignal_command_113()) {
    _impl_.turnsignal_command_113_ = new ::apollo::canbus::Turnsignal_command_113(*from._impl_.turnsignal_command_113_);
  }
  if (from._internal_has_steer_command_112()) {
    _impl_.steer_command_112_ = new ::apollo::canbus::Steer_command_112(*from._impl_.steer_command_112_);
  }
  if (from._internal_has_brake_status__511()) {
    _impl_.brake_status__511_ = new ::apollo::canbus::Brake_status__511(*from._impl_.brake_status__511_);
  }
  if (from._internal_has_throttle_status__510()) {
    _impl_.throttle_status__510_ = new ::apollo::canbus::Throttle_status__510(*from._impl_.throttle_status__510_);
  }
  if (from._internal_has_turnsignal_status__513()) {
    _impl_.turnsignal_status__513_ = new ::apollo::canbus::Turnsignal_status__513(*from._impl_.turnsignal_status__513_);
  }
  if (from._internal_has_steer_status__512()) {
    _impl_.steer_status__512_ = new ::apollo::canbus::Steer_status__512(*from._impl_.steer_status__512_);
  }
  if (from._internal_has_ecu_status_1_515()) {
    _impl_.ecu_status_1_515_ = new ::apollo::canbus::Ecu_status_1_515(*from._impl_.ecu_status_1_515_);
  }
  if (from._internal_has_gear_status_514()) {
    _impl_.gear_status_514_ = new ::apollo::canbus::Gear_status_514(*from._impl_.gear_status_514_);
  }
  if (from._internal_has_ecu_status_3_517()) {
    _impl_.ecu_status_3_517_ = new ::apollo::canbus::Ecu_status_3_517(*from._impl_.ecu_status_3_517_);
  }
  if (from._internal_has_ecu_status_2_516()) {
    _impl_.ecu_status_2_516_ = new ::apollo::canbus::Ecu_status_2_516(*from._impl_.ecu_status_2_516_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ch)
}

inline void Ch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_command_115_){nullptr}
    , decltype(_impl_.gear_command_114_){nullptr}
    , decltype(_impl_.brake_command_111_){nullptr}
    , decltype(_impl_.throttle_command_110_){nullptr}
    , decltype(_impl_.turnsignal_command_113_){nullptr}
    , decltype(_impl_.steer_command_112_){nullptr}
    , decltype(_impl_.brake_status__511_){nullptr}
    , decltype(_impl_.throttle_status__510_){nullptr}
    , decltype(_impl_.turnsignal_status__513_){nullptr}
    , decltype(_impl_.steer_status__512_){nullptr}
    , decltype(_impl_.ecu_status_1_515_){nullptr}
    , decltype(_impl_.gear_status_514_){nullptr}
    , decltype(_impl_.ecu_status_3_517_){nullptr}
    , decltype(_impl_.ecu_status_2_516_){nullptr}
  };
}

Ch::~Ch() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.control_command_115_;
  if (this != internal_default_instance()) delete _impl_.gear_command_114_;
  if (this != internal_default_instance()) delete _impl_.brake_command_111_;
  if (this != internal_default_instance()) delete _impl_.throttle_command_110_;
  if (this != internal_default_instance()) delete _impl_.turnsignal_command_113_;
  if (this != internal_default_instance()) delete _impl_.steer_command_112_;
  if (this != internal_default_instance()) delete _impl_.brake_status__511_;
  if (this != internal_default_instance()) delete _impl_.throttle_status__510_;
  if (this != internal_default_instance()) delete _impl_.turnsignal_status__513_;
  if (this != internal_default_instance()) delete _impl_.steer_status__512_;
  if (this != internal_default_instance()) delete _impl_.ecu_status_1_515_;
  if (this != internal_default_instance()) delete _impl_.gear_status_514_;
  if (this != internal_default_instance()) delete _impl_.ecu_status_3_517_;
  if (this != internal_default_instance()) delete _impl_.ecu_status_2_516_;
}

void Ch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ch::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.control_command_115_ != nullptr);
      _impl_.control_command_115_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gear_command_114_ != nullptr);
      _impl_.gear_command_114_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.brake_command_111_ != nullptr);
      _impl_.brake_command_111_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.throttle_command_110_ != nullptr);
      _impl_.throttle_command_110_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.turnsignal_command_113_ != nullptr);
      _impl_.turnsignal_command_113_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.steer_command_112_ != nullptr);
      _impl_.steer_command_112_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.brake_status__511_ != nullptr);
      _impl_.brake_status__511_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.throttle_status__510_ != nullptr);
      _impl_.throttle_status__510_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.turnsignal_status__513_ != nullptr);
      _impl_.turnsignal_status__513_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.steer_status__512_ != nullptr);
      _impl_.steer_status__512_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.ecu_status_1_515_ != nullptr);
      _impl_.ecu_status_1_515_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.gear_status_514_ != nullptr);
      _impl_.gear_status_514_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.ecu_status_3_517_ != nullptr);
      _impl_.ecu_status_3_517_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.ecu_status_2_516_ != nullptr);
      _impl_.ecu_status_2_516_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_command_115(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_command_114(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_command_111(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_command_110(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnsignal_command_113(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_command_112(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_status__511(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_status__510(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnsignal_status__513(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_status__512(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_1_515(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_status_514(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_3_517(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_2_516(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::control_command_115(this),
        _Internal::control_command_115(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gear_command_114(this),
        _Internal::gear_command_114(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::brake_command_111(this),
        _Internal::brake_command_111(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::throttle_command_110(this),
        _Internal::throttle_command_110(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::turnsignal_command_113(this),
        _Internal::turnsignal_command_113(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::steer_command_112(this),
        _Internal::steer_command_112(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::brake_status__511(this),
        _Internal::brake_status__511(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::throttle_status__510(this),
        _Internal::throttle_status__510(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::turnsignal_status__513(this),
        _Internal::turnsignal_status__513(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::steer_status__512(this),
        _Internal::steer_status__512(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ecu_status_1_515(this),
        _Internal::ecu_status_1_515(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gear_status_514(this),
        _Internal::gear_status_514(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ecu_status_3_517(this),
        _Internal::ecu_status_3_517(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ecu_status_2_516(this),
        _Internal::ecu_status_2_516(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ch)
  return target;
}

size_t Ch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_command_115_);
    }

    // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gear_command_114_);
    }

    // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_command_111_);
    }

    // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.throttle_command_110_);
    }

    // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turnsignal_command_113_);
    }

    // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steer_command_112_);
    }

    // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_status__511_);
    }

    // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.throttle_status__510_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turnsignal_status__513_);
    }

    // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steer_status__512_);
    }

    // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ecu_status_1_515_);
    }

    // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gear_status_514_);
    }

    // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ecu_status_3_517_);
    }

    // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ecu_status_2_516_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ch::GetClassData() const { return &_class_data_; }

void Ch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ch *>(to)->MergeFrom(
      static_cast<const Ch &>(from));
}


void Ch::MergeFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_control_command_115()->::apollo::canbus::Control_command_115::MergeFrom(from._internal_control_command_115());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gear_command_114()->::apollo::canbus::Gear_command_114::MergeFrom(from._internal_gear_command_114());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brake_command_111()->::apollo::canbus::Brake_command_111::MergeFrom(from._internal_brake_command_111());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_throttle_command_110()->::apollo::canbus::Throttle_command_110::MergeFrom(from._internal_throttle_command_110());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_turnsignal_command_113()->::apollo::canbus::Turnsignal_command_113::MergeFrom(from._internal_turnsignal_command_113());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_steer_command_112()->::apollo::canbus::Steer_command_112::MergeFrom(from._internal_steer_command_112());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_brake_status__511()->::apollo::canbus::Brake_status__511::MergeFrom(from._internal_brake_status__511());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_throttle_status__510()->::apollo::canbus::Throttle_status__510::MergeFrom(from._internal_throttle_status__510());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_turnsignal_status__513()->::apollo::canbus::Turnsignal_status__513::MergeFrom(from._internal_turnsignal_status__513());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_steer_status__512()->::apollo::canbus::Steer_status__512::MergeFrom(from._internal_steer_status__512());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ecu_status_1_515()->::apollo::canbus::Ecu_status_1_515::MergeFrom(from._internal_ecu_status_1_515());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_gear_status_514()->::apollo::canbus::Gear_status_514::MergeFrom(from._internal_gear_status_514());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ecu_status_3_517()->::apollo::canbus::Ecu_status_3_517::MergeFrom(from._internal_ecu_status_3_517());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_ecu_status_2_516()->::apollo::canbus::Ecu_status_2_516::MergeFrom(from._internal_ecu_status_2_516());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ch::CopyFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ch::IsInitialized() const {
  return true;
}

void Ch::InternalSwap(Ch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ch, _impl_.ecu_status_2_516_)
      + sizeof(Ch::_impl_.ecu_status_2_516_)
      - PROTOBUF_FIELD_OFFSET(Ch, _impl_.control_command_115_)>(
          reinterpret_cast<char*>(&_impl_.control_command_115_),
          reinterpret_cast<char*>(&other->_impl_.control_command_115_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Control_command_115*
Arena::CreateMaybeMessage< ::apollo::canbus::Control_command_115 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Control_command_115 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_command_114*
Arena::CreateMaybeMessage< ::apollo::canbus::Gear_command_114 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gear_command_114 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_command_111*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_command_111 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_command_111 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Throttle_command_110*
Arena::CreateMaybeMessage< ::apollo::canbus::Throttle_command_110 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Throttle_command_110 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turnsignal_command_113*
Arena::CreateMaybeMessage< ::apollo::canbus::Turnsignal_command_113 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turnsignal_command_113 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steer_command_112*
Arena::CreateMaybeMessage< ::apollo::canbus::Steer_command_112 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steer_command_112 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_status__511*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_status__511 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_status__511 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Throttle_status__510*
Arena::CreateMaybeMessage< ::apollo::canbus::Throttle_status__510 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Throttle_status__510 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turnsignal_status__513*
Arena::CreateMaybeMessage< ::apollo::canbus::Turnsignal_status__513 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turnsignal_status__513 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steer_status__512*
Arena::CreateMaybeMessage< ::apollo::canbus::Steer_status__512 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steer_status__512 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_1_515*
Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_1_515 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ecu_status_1_515 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_status_514*
Arena::CreateMaybeMessage< ::apollo::canbus::Gear_status_514 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gear_status_514 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_3_517*
Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_3_517 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ecu_status_3_517 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_2_516*
Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_2_516 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ecu_status_2_516 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ch*
Arena::CreateMaybeMessage< ::apollo::canbus::Ch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
