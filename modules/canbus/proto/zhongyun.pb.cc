// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/zhongyun.proto

#include "modules/canbus/proto/zhongyun.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR Gear_control_a1::Gear_control_a1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gear_enable_control_)*/0
  , /*decltype(_impl_.gear_state_target_)*/1} {}
struct Gear_control_a1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Gear_control_a1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Gear_control_a1DefaultTypeInternal() {}
  union {
    Gear_control_a1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Gear_control_a1DefaultTypeInternal _Gear_control_a1_default_instance_;
PROTOBUF_CONSTEXPR Torque_control_a3::Torque_control_a3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driven_torque_)*/0
  , /*decltype(_impl_.driven_enable_control_)*/0} {}
struct Torque_control_a3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Torque_control_a3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Torque_control_a3DefaultTypeInternal() {}
  union {
    Torque_control_a3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Torque_control_a3DefaultTypeInternal _Torque_control_a3_default_instance_;
PROTOBUF_CONSTEXPR Steering_control_a2::Steering_control_a2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steering_target_)*/0
  , /*decltype(_impl_.steering_enable_control_)*/0} {}
struct Steering_control_a2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_control_a2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_control_a2DefaultTypeInternal() {}
  union {
    Steering_control_a2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_control_a2DefaultTypeInternal _Steering_control_a2_default_instance_;
PROTOBUF_CONSTEXPR Parking_control_a5::Parking_control_a5(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parking_target_)*/0
  , /*decltype(_impl_.parking_enable_control_)*/0} {}
struct Parking_control_a5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Parking_control_a5DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Parking_control_a5DefaultTypeInternal() {}
  union {
    Parking_control_a5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Parking_control_a5DefaultTypeInternal _Parking_control_a5_default_instance_;
PROTOBUF_CONSTEXPR Brake_control_a4::Brake_control_a4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_torque_)*/0
  , /*decltype(_impl_.brake_enable_control_)*/0} {}
struct Brake_control_a4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_control_a4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_control_a4DefaultTypeInternal() {}
  union {
    Brake_control_a4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_control_a4DefaultTypeInternal _Brake_control_a4_default_instance_;
PROTOBUF_CONSTEXPR Enable_state_feedback_c3::Enable_state_feedback_c3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parking_enable_state_)*/0
  , /*decltype(_impl_.steering_enable_state_)*/0
  , /*decltype(_impl_.gear_enable_actual_)*/0
  , /*decltype(_impl_.driven_enable_state_)*/0
  , /*decltype(_impl_.brake_enable_state_)*/0} {}
struct Enable_state_feedback_c3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Enable_state_feedback_c3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Enable_state_feedback_c3DefaultTypeInternal() {}
  union {
    Enable_state_feedback_c3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Enable_state_feedback_c3DefaultTypeInternal _Enable_state_feedback_c3_default_instance_;
PROTOBUF_CONSTEXPR Vehicle_state_feedback_c1::Vehicle_state_feedback_c1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_torque_feedback_)*/0
  , /*decltype(_impl_.steering_actual_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.parking_actual_)*/0
  , /*decltype(_impl_.gear_state_actual_)*/1} {}
struct Vehicle_state_feedback_c1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vehicle_state_feedback_c1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vehicle_state_feedback_c1DefaultTypeInternal() {}
  union {
    Vehicle_state_feedback_c1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vehicle_state_feedback_c1DefaultTypeInternal _Vehicle_state_feedback_c1_default_instance_;
PROTOBUF_CONSTEXPR Error_state_e1::Error_state_e1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_error_code_)*/0
  , /*decltype(_impl_.driven_error_code_)*/0
  , /*decltype(_impl_.steering_error_code_)*/0
  , /*decltype(_impl_.parking_error_code_)*/0
  , /*decltype(_impl_.gear_error_msg_)*/0} {}
struct Error_state_e1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Error_state_e1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Error_state_e1DefaultTypeInternal() {}
  union {
    Error_state_e1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Error_state_e1DefaultTypeInternal _Error_state_e1_default_instance_;
PROTOBUF_CONSTEXPR Vehicle_state_feedback_2_c4::Vehicle_state_feedback_2_c4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driven_torque_feedback_)*/0
  , /*decltype(_impl_.motor_speed_)*/0} {}
struct Vehicle_state_feedback_2_c4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vehicle_state_feedback_2_c4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vehicle_state_feedback_2_c4DefaultTypeInternal() {}
  union {
    Vehicle_state_feedback_2_c4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vehicle_state_feedback_2_c4DefaultTypeInternal _Vehicle_state_feedback_2_c4_default_instance_;
PROTOBUF_CONSTEXPR Zhongyun::Zhongyun(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gear_control_a1_)*/nullptr
  , /*decltype(_impl_.torque_control_a3_)*/nullptr
  , /*decltype(_impl_.steering_control_a2_)*/nullptr
  , /*decltype(_impl_.parking_control_a5_)*/nullptr
  , /*decltype(_impl_.brake_control_a4_)*/nullptr
  , /*decltype(_impl_.enable_state_feedback_c3_)*/nullptr
  , /*decltype(_impl_.vehicle_state_feedback_c1_)*/nullptr
  , /*decltype(_impl_.error_state_e1_)*/nullptr
  , /*decltype(_impl_.vehicle_state_feedback_2_c4_)*/nullptr} {}
struct ZhongyunDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZhongyunDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZhongyunDefaultTypeInternal() {}
  union {
    Zhongyun _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZhongyunDefaultTypeInternal _Zhongyun_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[19];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2fzhongyun_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _impl_.gear_state_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _impl_.gear_enable_control_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _impl_.driven_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _impl_.driven_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _impl_.steering_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _impl_.steering_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _impl_.parking_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _impl_.parking_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _impl_.brake_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _impl_.brake_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_.parking_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_.steering_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_.gear_enable_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_.driven_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _impl_.brake_enable_state_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_.parking_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_.brake_torque_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_.gear_state_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_.steering_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _impl_.speed_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_.brake_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_.driven_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_.steering_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_.parking_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _impl_.gear_error_msg_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _impl_.motor_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _impl_.driven_torque_feedback_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.gear_control_a1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.torque_control_a3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.steering_control_a2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.parking_control_a5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.brake_control_a4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.enable_state_feedback_c3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.vehicle_state_feedback_c1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.error_state_e1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _impl_.vehicle_state_feedback_2_c4_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::canbus::Gear_control_a1)},
  { 10, 18, -1, sizeof(::apollo::canbus::Torque_control_a3)},
  { 20, 28, -1, sizeof(::apollo::canbus::Steering_control_a2)},
  { 30, 38, -1, sizeof(::apollo::canbus::Parking_control_a5)},
  { 40, 48, -1, sizeof(::apollo::canbus::Brake_control_a4)},
  { 50, 61, -1, sizeof(::apollo::canbus::Enable_state_feedback_c3)},
  { 66, 77, -1, sizeof(::apollo::canbus::Vehicle_state_feedback_c1)},
  { 82, 93, -1, sizeof(::apollo::canbus::Error_state_e1)},
  { 98, 106, -1, sizeof(::apollo::canbus::Vehicle_state_feedback_2_c4)},
  { 108, 123, -1, sizeof(::apollo::canbus::Zhongyun)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_Gear_control_a1_default_instance_._instance,
  &::apollo::canbus::_Torque_control_a3_default_instance_._instance,
  &::apollo::canbus::_Steering_control_a2_default_instance_._instance,
  &::apollo::canbus::_Parking_control_a5_default_instance_._instance,
  &::apollo::canbus::_Brake_control_a4_default_instance_._instance,
  &::apollo::canbus::_Enable_state_feedback_c3_default_instance_._instance,
  &::apollo::canbus::_Vehicle_state_feedback_c1_default_instance_._instance,
  &::apollo::canbus::_Error_state_e1_default_instance_._instance,
  &::apollo::canbus::_Vehicle_state_feedback_2_c4_default_instance_._instance,
  &::apollo::canbus::_Zhongyun_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fzhongyun_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#modules/canbus/proto/zhongyun.proto\022\ra"
  "pollo.canbus\"\305\003\n\017Gear_control_a1\022O\n\021gear"
  "_state_target\030\001 \001(\01624.apollo.canbus.Gear"
  "_control_a1.Gear_state_targetType\022S\n\023gea"
  "r_enable_control\030\002 \001(\01626.apollo.canbus.G"
  "ear_control_a1.Gear_enable_controlType\"\232"
  "\001\n\025Gear_state_targetType\022\027\n\023GEAR_STATE_T"
  "ARGET_P\020\001\022\027\n\023GEAR_STATE_TARGET_N\020\002\022\027\n\023GE"
  "AR_STATE_TARGET_D\020\003\022\027\n\023GEAR_STATE_TARGET"
  "_R\020\004\022\035\n\031GEAR_STATE_TARGET_INVALID\020\005\"o\n\027G"
  "ear_enable_controlType\022*\n&GEAR_ENABLE_CO"
  "NTROL_GEAR_MANUALCONTROL\020\000\022(\n$GEAR_ENABL"
  "E_CONTROL_GEAR_AUTOCONTROL\020\001\"\360\001\n\021Torque_"
  "control_a3\022\025\n\rdriven_torque\030\001 \001(\001\022Y\n\025dri"
  "ven_enable_control\030\002 \001(\0162:.apollo.canbus"
  ".Torque_control_a3.Driven_enable_control"
  "Type\"i\n\031Driven_enable_controlType\022&\n\"DRI"
  "VEN_ENABLE_CONTROL_DRIVE_MANUAL\020\000\022$\n DRI"
  "VEN_ENABLE_CONTROL_DRIVE_AUTO\020\001\"\225\002\n\023Stee"
  "ring_control_a2\022\027\n\017steering_target\030\001 \001(\001"
  "\022_\n\027steering_enable_control\030\002 \001(\0162>.apol"
  "lo.canbus.Steering_control_a2.Steering_e"
  "nable_controlType\"\203\001\n\033Steering_enable_co"
  "ntrolType\0222\n.STEERING_ENABLE_CONTROL_STE"
  "ERING_MANUALCONTROL\020\000\0220\n,STEERING_ENABLE"
  "_CONTROL_STEERING_AUTOCONTROL\020\001\"\226\003\n\022Park"
  "ing_control_a5\022L\n\016parking_target\030\001 \001(\01624"
  ".apollo.canbus.Parking_control_a5.Parkin"
  "g_targetType\022\\\n\026parking_enable_control\030\002"
  " \001(\0162<.apollo.canbus.Parking_control_a5."
  "Parking_enable_controlType\"T\n\022Parking_ta"
  "rgetType\022\032\n\026PARKING_TARGET_RELEASE\020\000\022\"\n\036"
  "PARKING_TARGET_PARKING_TRIGGER\020\001\"~\n\032Park"
  "ing_enable_controlType\0220\n,PARKING_ENABLE"
  "_CONTROL_PARKING_MANUALCONTROL\020\000\022.\n*PARK"
  "ING_ENABLE_CONTROL_PARKING_AUTOCONTROL\020\001"
  "\"\350\001\n\020Brake_control_a4\022\024\n\014brake_torque\030\001 "
  "\001(\001\022V\n\024brake_enable_control\030\002 \001(\01628.apol"
  "lo.canbus.Brake_control_a4.Brake_enable_"
  "controlType\"f\n\030Brake_enable_controlType\022"
  "%\n!BRAKE_ENABLE_CONTROL_BRAKE_MANUAL\020\000\022#"
  "\n\037BRAKE_ENABLE_CONTROL_BRAKE_AUTO\020\001\"\200\n\n\030"
  "Enable_state_feedback_c3\022^\n\024parking_enab"
  "le_state\030\001 \001(\0162@.apollo.canbus.Enable_st"
  "ate_feedback_c3.Parking_enable_stateType"
  "\022`\n\025steering_enable_state\030\002 \001(\0162A.apollo"
  ".canbus.Enable_state_feedback_c3.Steerin"
  "g_enable_stateType\022Z\n\022gear_enable_actual"
  "\030\003 \001(\0162>.apollo.canbus.Enable_state_feed"
  "back_c3.Gear_enable_actualType\022\\\n\023driven"
  "_enable_state\030\004 \001(\0162\?.apollo.canbus.Enab"
  "le_state_feedback_c3.Driven_enable_state"
  "Type\022Z\n\022brake_enable_state\030\005 \001(\0162>.apoll"
  "o.canbus.Enable_state_feedback_c3.Brake_"
  "enable_stateType\"\243\001\n\030Parking_enable_stat"
  "eType\022.\n*PARKING_ENABLE_STATE_PARKING_MA"
  "NUALCONTROL\020\000\022,\n(PARKING_ENABLE_STATE_PA"
  "RKING_AUTOCONTROL\020\001\022)\n%PARKING_ENABLE_ST"
  "ATE_PARKING_TAKEOVER\020\002\"\261\001\n\031Steering_enab"
  "le_stateType\0220\n,STEERING_ENABLE_STATE_ST"
  "EERING_MANUALCONTROL\020\000\022.\n*STEERING_ENABL"
  "E_STATE_STEERING_AUTOCONTROL\020\001\0222\n.STEERI"
  "NG_ENABLE_STATE_STEERING_MANUAL_TAKEOVER"
  "\020\002\"\231\001\n\026Gear_enable_actualType\022)\n%GEAR_EN"
  "ABLE_ACTUAL_GEAR_MANUALCONTROL\020\000\022\'\n#GEAR"
  "_ENABLE_ACTUAL_GEAR_AUTOCONTROL\020\001\022+\n\'GEA"
  "R_ENABLE_ACTUAL_GEAR_MANUAL_TAKEOVER\020\002\"\213"
  "\001\n\027Driven_enable_stateType\022$\n DRIVEN_ENA"
  "BLE_STATE_DRIVE_MANUAL\020\000\022\"\n\036DRIVEN_ENABL"
  "E_STATE_DRIVE_AUTO\020\001\022&\n\"DRIVEN_ENABLE_ST"
  "ATE_DRIVE_TAKEOVER\020\002\"\207\001\n\026Brake_enable_st"
  "ateType\022#\n\037BRAKE_ENABLE_STATE_BRAKE_MANU"
  "AL\020\000\022!\n\035BRAKE_ENABLE_STATE_BRAKE_AUTO\020\001\022"
  "%\n!BRAKE_ENABLE_STATE_BRAKE_TAKEOVER\020\002\"\205"
  "\004\n\031Vehicle_state_feedback_c1\022S\n\016parking_"
  "actual\030\001 \001(\0162;.apollo.canbus.Vehicle_sta"
  "te_feedback_c1.Parking_actualType\022\035\n\025bra"
  "ke_torque_feedback\030\002 \001(\001\022Y\n\021gear_state_a"
  "ctual\030\003 \001(\0162>.apollo.canbus.Vehicle_stat"
  "e_feedback_c1.Gear_state_actualType\022\027\n\017s"
  "teering_actual\030\004 \001(\001\022\r\n\005speed\030\005 \001(\001\"T\n\022P"
  "arking_actualType\022\032\n\026PARKING_ACTUAL_RELE"
  "ASE\020\000\022\"\n\036PARKING_ACTUAL_PARKING_TRIGGER\020"
  "\001\"\232\001\n\025Gear_state_actualType\022\027\n\023GEAR_STAT"
  "E_ACTUAL_P\020\001\022\027\n\023GEAR_STATE_ACTUAL_N\020\002\022\027\n"
  "\023GEAR_STATE_ACTUAL_D\020\003\022\027\n\023GEAR_STATE_ACT"
  "UAL_R\020\004\022\035\n\031GEAR_STATE_ACTUAL_INVALID\020\005\"\311"
  "\006\n\016Error_state_e1\022L\n\020brake_error_code\030\001 "
  "\001(\01622.apollo.canbus.Error_state_e1.Brake"
  "_error_codeType\022N\n\021driven_error_code\030\002 \001"
  "(\01623.apollo.canbus.Error_state_e1.Driven"
  "_error_codeType\022R\n\023steering_error_code\030\003"
  " \001(\01625.apollo.canbus.Error_state_e1.Stee"
  "ring_error_codeType\022P\n\022parking_error_cod"
  "e\030\004 \001(\01624.apollo.canbus.Error_state_e1.P"
  "arking_error_codeType\022H\n\016gear_error_msg\030"
  "\005 \001(\01620.apollo.canbus.Error_state_e1.Gea"
  "r_error_msgType\"Q\n\024Brake_error_codeType\022"
  "\035\n\031BRAKE_ERROR_CODE_NO_ERROR\020\000\022\032\n\026BRAKE_"
  "ERROR_CODE_ERROR\020\001\"T\n\025Driven_error_codeT"
  "ype\022\036\n\032DRIVEN_ERROR_CODE_NO_ERROR\020\000\022\033\n\027D"
  "RIVEN_ERROR_CODE_ERROR\020\001\"Z\n\027Steering_err"
  "or_codeType\022 \n\034STEERING_ERROR_CODE_NO_ER"
  "ROR\020\000\022\035\n\031STEERING_ERROR_CODE_ERROR\020\001\"W\n\026"
  "Parking_error_codeType\022\037\n\033PARKING_ERROR_"
  "CODE_NO_ERROR\020\000\022\034\n\030PARKING_ERROR_CODE_ER"
  "ROR\020\001\"K\n\022Gear_error_msgType\022\033\n\027GEAR_ERRO"
  "R_MSG_NO_ERROR\020\000\022\030\n\024GEAR_ERROR_MSG_ERROR"
  "\020\001\"R\n\033Vehicle_state_feedback_2_c4\022\023\n\013mot"
  "or_speed\030\001 \001(\005\022\036\n\026driven_torque_feedback"
  "\030\002 \001(\001\"\333\004\n\010Zhongyun\0227\n\017gear_control_a1\030\001"
  " \001(\0132\036.apollo.canbus.Gear_control_a1\022;\n\021"
  "torque_control_a3\030\002 \001(\0132 .apollo.canbus."
  "Torque_control_a3\022\?\n\023steering_control_a2"
  "\030\003 \001(\0132\".apollo.canbus.Steering_control_"
  "a2\022=\n\022parking_control_a5\030\004 \001(\0132!.apollo."
  "canbus.Parking_control_a5\0229\n\020brake_contr"
  "ol_a4\030\005 \001(\0132\037.apollo.canbus.Brake_contro"
  "l_a4\022I\n\030enable_state_feedback_c3\030\006 \001(\0132\'"
  ".apollo.canbus.Enable_state_feedback_c3\022"
  "K\n\031vehicle_state_feedback_c1\030\007 \001(\0132(.apo"
  "llo.canbus.Vehicle_state_feedback_c1\0225\n\016"
  "error_state_e1\030\010 \001(\0132\035.apollo.canbus.Err"
  "or_state_e1\022O\n\033vehicle_state_feedback_2_"
  "c4\030\t \001(\0132*.apollo.canbus.Vehicle_state_f"
  "eedback_2_c4"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto = {
    false, false, 5012, descriptor_table_protodef_modules_2fcanbus_2fproto_2fzhongyun_2eproto,
    "modules/canbus/proto/zhongyun.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fzhongyun_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fzhongyun_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_control_a1_Gear_state_targetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[0];
}
bool Gear_control_a1_Gear_state_targetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_P;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_N;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_D;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_R;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_INVALID;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::Gear_state_targetType_MIN;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::Gear_state_targetType_MAX;
constexpr int Gear_control_a1::Gear_state_targetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_control_a1_Gear_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[1];
}
bool Gear_control_a1_Gear_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::GEAR_ENABLE_CONTROL_GEAR_MANUALCONTROL;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::GEAR_ENABLE_CONTROL_GEAR_AUTOCONTROL;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::Gear_enable_controlType_MIN;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::Gear_enable_controlType_MAX;
constexpr int Gear_control_a1::Gear_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Torque_control_a3_Driven_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[2];
}
bool Torque_control_a3_Driven_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::DRIVEN_ENABLE_CONTROL_DRIVE_MANUAL;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::DRIVEN_ENABLE_CONTROL_DRIVE_AUTO;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::Driven_enable_controlType_MIN;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::Driven_enable_controlType_MAX;
constexpr int Torque_control_a3::Driven_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_control_a2_Steering_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[3];
}
bool Steering_control_a2_Steering_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::STEERING_ENABLE_CONTROL_STEERING_MANUALCONTROL;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::STEERING_ENABLE_CONTROL_STEERING_AUTOCONTROL;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::Steering_enable_controlType_MIN;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::Steering_enable_controlType_MAX;
constexpr int Steering_control_a2::Steering_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_control_a5_Parking_targetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[4];
}
bool Parking_control_a5_Parking_targetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::PARKING_TARGET_RELEASE;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::PARKING_TARGET_PARKING_TRIGGER;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::Parking_targetType_MIN;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::Parking_targetType_MAX;
constexpr int Parking_control_a5::Parking_targetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_control_a5_Parking_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[5];
}
bool Parking_control_a5_Parking_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::PARKING_ENABLE_CONTROL_PARKING_MANUALCONTROL;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::PARKING_ENABLE_CONTROL_PARKING_AUTOCONTROL;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::Parking_enable_controlType_MIN;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::Parking_enable_controlType_MAX;
constexpr int Parking_control_a5::Parking_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_control_a4_Brake_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[6];
}
bool Brake_control_a4_Brake_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::BRAKE_ENABLE_CONTROL_BRAKE_MANUAL;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::BRAKE_ENABLE_CONTROL_BRAKE_AUTO;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::Brake_enable_controlType_MIN;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::Brake_enable_controlType_MAX;
constexpr int Brake_control_a4::Brake_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Parking_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[7];
}
bool Enable_state_feedback_c3_Parking_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_TAKEOVER;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::Parking_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::Parking_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Parking_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Steering_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[8];
}
bool Enable_state_feedback_c3_Steering_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_MANUAL_TAKEOVER;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::Steering_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::Steering_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Steering_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Gear_enable_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[9];
}
bool Enable_state_feedback_c3_Gear_enable_actualType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_MANUAL_TAKEOVER;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::Gear_enable_actualType_MIN;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::Gear_enable_actualType_MAX;
constexpr int Enable_state_feedback_c3::Gear_enable_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Driven_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[10];
}
bool Enable_state_feedback_c3_Driven_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_MANUAL;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_AUTO;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_TAKEOVER;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::Driven_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::Driven_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Driven_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Brake_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[11];
}
bool Enable_state_feedback_c3_Brake_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_MANUAL;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_AUTO;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_TAKEOVER;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::Brake_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::Brake_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Brake_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_state_feedback_c1_Parking_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[12];
}
bool Vehicle_state_feedback_c1_Parking_actualType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::PARKING_ACTUAL_RELEASE;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::PARKING_ACTUAL_PARKING_TRIGGER;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::Parking_actualType_MIN;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::Parking_actualType_MAX;
constexpr int Vehicle_state_feedback_c1::Parking_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_state_feedback_c1_Gear_state_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[13];
}
bool Vehicle_state_feedback_c1_Gear_state_actualType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_P;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_N;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_D;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_R;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_INVALID;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::Gear_state_actualType_MIN;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::Gear_state_actualType_MAX;
constexpr int Vehicle_state_feedback_c1::Gear_state_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Brake_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[14];
}
bool Error_state_e1_Brake_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::BRAKE_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::BRAKE_ERROR_CODE_ERROR;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::Brake_error_codeType_MIN;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::Brake_error_codeType_MAX;
constexpr int Error_state_e1::Brake_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Driven_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[15];
}
bool Error_state_e1_Driven_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::DRIVEN_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::DRIVEN_ERROR_CODE_ERROR;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::Driven_error_codeType_MIN;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::Driven_error_codeType_MAX;
constexpr int Error_state_e1::Driven_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Steering_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[16];
}
bool Error_state_e1_Steering_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::STEERING_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::STEERING_ERROR_CODE_ERROR;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::Steering_error_codeType_MIN;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::Steering_error_codeType_MAX;
constexpr int Error_state_e1::Steering_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Parking_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[17];
}
bool Error_state_e1_Parking_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::PARKING_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::PARKING_ERROR_CODE_ERROR;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::Parking_error_codeType_MIN;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::Parking_error_codeType_MAX;
constexpr int Error_state_e1::Parking_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Gear_error_msgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[18];
}
bool Error_state_e1_Gear_error_msgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::GEAR_ERROR_MSG_NO_ERROR;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::GEAR_ERROR_MSG_ERROR;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::Gear_error_msgType_MIN;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::Gear_error_msgType_MAX;
constexpr int Error_state_e1::Gear_error_msgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Gear_control_a1::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_control_a1>()._impl_._has_bits_);
  static void set_has_gear_state_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_control_a1::Gear_control_a1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gear_control_a1)
}
Gear_control_a1::Gear_control_a1(const Gear_control_a1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_enable_control_){}
    , decltype(_impl_.gear_state_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gear_enable_control_, &from._impl_.gear_enable_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_state_target_) -
    reinterpret_cast<char*>(&_impl_.gear_enable_control_)) + sizeof(_impl_.gear_state_target_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_control_a1)
}

inline void Gear_control_a1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_enable_control_){0}
    , decltype(_impl_.gear_state_target_){1}
  };
}

Gear_control_a1::~Gear_control_a1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_control_a1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gear_control_a1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gear_control_a1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gear_control_a1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_control_a1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.gear_enable_control_ = 0;
    _impl_.gear_state_target_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gear_control_a1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_control_a1_Gear_state_targetType_IsValid(val))) {
            _internal_set_gear_state_target(static_cast<::apollo::canbus::Gear_control_a1_Gear_state_targetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_control_a1_Gear_enable_controlType_IsValid(val))) {
            _internal_set_gear_enable_control(static_cast<::apollo::canbus::Gear_control_a1_Gear_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gear_control_a1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_control_a1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_state_target(), target);
  }

  // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gear_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_control_a1)
  return target;
}

size_t Gear_control_a1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_control_a1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_enable_control());
    }

    // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_state_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gear_control_a1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gear_control_a1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gear_control_a1::GetClassData() const { return &_class_data_; }

void Gear_control_a1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gear_control_a1 *>(to)->MergeFrom(
      static_cast<const Gear_control_a1 &>(from));
}


void Gear_control_a1::MergeFrom(const Gear_control_a1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_control_a1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gear_enable_control_ = from._impl_.gear_enable_control_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gear_state_target_ = from._impl_.gear_state_target_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gear_control_a1::CopyFrom(const Gear_control_a1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_control_a1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_control_a1::IsInitialized() const {
  return true;
}

void Gear_control_a1::InternalSwap(Gear_control_a1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gear_enable_control_, other->_impl_.gear_enable_control_);
  swap(_impl_.gear_state_target_, other->_impl_.gear_state_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_control_a1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[0]);
}

// ===================================================================

class Torque_control_a3::_Internal {
 public:
  using HasBits = decltype(std::declval<Torque_control_a3>()._impl_._has_bits_);
  static void set_has_driven_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driven_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Torque_control_a3::Torque_control_a3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Torque_control_a3)
}
Torque_control_a3::Torque_control_a3(const Torque_control_a3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driven_torque_){}
    , decltype(_impl_.driven_enable_control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.driven_torque_, &from._impl_.driven_torque_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.driven_enable_control_) -
    reinterpret_cast<char*>(&_impl_.driven_torque_)) + sizeof(_impl_.driven_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Torque_control_a3)
}

inline void Torque_control_a3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driven_torque_){0}
    , decltype(_impl_.driven_enable_control_){0}
  };
}

Torque_control_a3::~Torque_control_a3() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Torque_control_a3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Torque_control_a3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Torque_control_a3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Torque_control_a3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Torque_control_a3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.driven_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.driven_enable_control_) -
        reinterpret_cast<char*>(&_impl_.driven_torque_)) + sizeof(_impl_.driven_enable_control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Torque_control_a3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double driven_torque = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_driven_torque(&has_bits);
          _impl_.driven_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Torque_control_a3_Driven_enable_controlType_IsValid(val))) {
            _internal_set_driven_enable_control(static_cast<::apollo::canbus::Torque_control_a3_Driven_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Torque_control_a3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Torque_control_a3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double driven_torque = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_driven_torque(), target);
  }

  // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_driven_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Torque_control_a3)
  return target;
}

size_t Torque_control_a3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Torque_control_a3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double driven_torque = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driven_enable_control());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Torque_control_a3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Torque_control_a3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Torque_control_a3::GetClassData() const { return &_class_data_; }

void Torque_control_a3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Torque_control_a3 *>(to)->MergeFrom(
      static_cast<const Torque_control_a3 &>(from));
}


void Torque_control_a3::MergeFrom(const Torque_control_a3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Torque_control_a3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driven_torque_ = from._impl_.driven_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.driven_enable_control_ = from._impl_.driven_enable_control_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Torque_control_a3::CopyFrom(const Torque_control_a3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Torque_control_a3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torque_control_a3::IsInitialized() const {
  return true;
}

void Torque_control_a3::InternalSwap(Torque_control_a3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Torque_control_a3, _impl_.driven_enable_control_)
      + sizeof(Torque_control_a3::_impl_.driven_enable_control_)
      - PROTOBUF_FIELD_OFFSET(Torque_control_a3, _impl_.driven_torque_)>(
          reinterpret_cast<char*>(&_impl_.driven_torque_),
          reinterpret_cast<char*>(&other->_impl_.driven_torque_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Torque_control_a3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[1]);
}

// ===================================================================

class Steering_control_a2::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_control_a2>()._impl_._has_bits_);
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_control_a2::Steering_control_a2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_control_a2)
}
Steering_control_a2::Steering_control_a2(const Steering_control_a2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steering_target_){}
    , decltype(_impl_.steering_enable_control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steering_target_, &from._impl_.steering_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steering_enable_control_) -
    reinterpret_cast<char*>(&_impl_.steering_target_)) + sizeof(_impl_.steering_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_control_a2)
}

inline void Steering_control_a2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steering_target_){0}
    , decltype(_impl_.steering_enable_control_){0}
  };
}

Steering_control_a2::~Steering_control_a2() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_control_a2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_control_a2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_control_a2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_control_a2::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_control_a2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steering_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steering_enable_control_) -
        reinterpret_cast<char*>(&_impl_.steering_target_)) + sizeof(_impl_.steering_enable_control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_control_a2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double steering_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steering_target(&has_bits);
          _impl_.steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steering_control_a2_Steering_enable_controlType_IsValid(val))) {
            _internal_set_steering_enable_control(static_cast<::apollo::canbus::Steering_control_a2_Steering_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_control_a2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_control_a2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double steering_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_steering_target(), target);
  }

  // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_steering_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_control_a2)
  return target;
}

size_t Steering_control_a2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_control_a2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double steering_target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steering_enable_control());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_control_a2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_control_a2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_control_a2::GetClassData() const { return &_class_data_; }

void Steering_control_a2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_control_a2 *>(to)->MergeFrom(
      static_cast<const Steering_control_a2 &>(from));
}


void Steering_control_a2::MergeFrom(const Steering_control_a2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_control_a2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.steering_target_ = from._impl_.steering_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steering_enable_control_ = from._impl_.steering_enable_control_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_control_a2::CopyFrom(const Steering_control_a2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_control_a2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_control_a2::IsInitialized() const {
  return true;
}

void Steering_control_a2::InternalSwap(Steering_control_a2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_control_a2, _impl_.steering_enable_control_)
      + sizeof(Steering_control_a2::_impl_.steering_enable_control_)
      - PROTOBUF_FIELD_OFFSET(Steering_control_a2, _impl_.steering_target_)>(
          reinterpret_cast<char*>(&_impl_.steering_target_),
          reinterpret_cast<char*>(&other->_impl_.steering_target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_control_a2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[2]);
}

// ===================================================================

class Parking_control_a5::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_control_a5>()._impl_._has_bits_);
  static void set_has_parking_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parking_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Parking_control_a5::Parking_control_a5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Parking_control_a5)
}
Parking_control_a5::Parking_control_a5(const Parking_control_a5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_target_){}
    , decltype(_impl_.parking_enable_control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parking_target_, &from._impl_.parking_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parking_enable_control_) -
    reinterpret_cast<char*>(&_impl_.parking_target_)) + sizeof(_impl_.parking_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_control_a5)
}

inline void Parking_control_a5::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_target_){0}
    , decltype(_impl_.parking_enable_control_){0}
  };
}

Parking_control_a5::~Parking_control_a5() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_control_a5)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parking_control_a5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parking_control_a5::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parking_control_a5::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_control_a5)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.parking_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parking_enable_control_) -
        reinterpret_cast<char*>(&_impl_.parking_target_)) + sizeof(_impl_.parking_enable_control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parking_control_a5::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_control_a5_Parking_targetType_IsValid(val))) {
            _internal_set_parking_target(static_cast<::apollo::canbus::Parking_control_a5_Parking_targetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_control_a5_Parking_enable_controlType_IsValid(val))) {
            _internal_set_parking_enable_control(static_cast<::apollo::canbus::Parking_control_a5_Parking_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parking_control_a5::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_control_a5)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_target(), target);
  }

  // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_parking_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_control_a5)
  return target;
}

size_t Parking_control_a5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_control_a5)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_target());
    }

    // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_enable_control());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parking_control_a5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parking_control_a5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parking_control_a5::GetClassData() const { return &_class_data_; }

void Parking_control_a5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parking_control_a5 *>(to)->MergeFrom(
      static_cast<const Parking_control_a5 &>(from));
}


void Parking_control_a5::MergeFrom(const Parking_control_a5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_control_a5)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parking_target_ = from._impl_.parking_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.parking_enable_control_ = from._impl_.parking_enable_control_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parking_control_a5::CopyFrom(const Parking_control_a5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_control_a5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_control_a5::IsInitialized() const {
  return true;
}

void Parking_control_a5::InternalSwap(Parking_control_a5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parking_control_a5, _impl_.parking_enable_control_)
      + sizeof(Parking_control_a5::_impl_.parking_enable_control_)
      - PROTOBUF_FIELD_OFFSET(Parking_control_a5, _impl_.parking_target_)>(
          reinterpret_cast<char*>(&_impl_.parking_target_),
          reinterpret_cast<char*>(&other->_impl_.parking_target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_control_a5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[3]);
}

// ===================================================================

class Brake_control_a4::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_control_a4>()._impl_._has_bits_);
  static void set_has_brake_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_control_a4::Brake_control_a4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_control_a4)
}
Brake_control_a4::Brake_control_a4(const Brake_control_a4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_torque_){}
    , decltype(_impl_.brake_enable_control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_torque_, &from._impl_.brake_torque_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brake_enable_control_) -
    reinterpret_cast<char*>(&_impl_.brake_torque_)) + sizeof(_impl_.brake_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_control_a4)
}

inline void Brake_control_a4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_torque_){0}
    , decltype(_impl_.brake_enable_control_){0}
  };
}

Brake_control_a4::~Brake_control_a4() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_control_a4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_control_a4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_control_a4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_control_a4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_control_a4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.brake_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_enable_control_) -
        reinterpret_cast<char*>(&_impl_.brake_torque_)) + sizeof(_impl_.brake_enable_control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_control_a4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double brake_torque = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_brake_torque(&has_bits);
          _impl_.brake_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_control_a4_Brake_enable_controlType_IsValid(val))) {
            _internal_set_brake_enable_control(static_cast<::apollo::canbus::Brake_control_a4_Brake_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_control_a4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_control_a4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double brake_torque = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_brake_torque(), target);
  }

  // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_brake_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_control_a4)
  return target;
}

size_t Brake_control_a4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_control_a4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double brake_torque = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_enable_control());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_control_a4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_control_a4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_control_a4::GetClassData() const { return &_class_data_; }

void Brake_control_a4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_control_a4 *>(to)->MergeFrom(
      static_cast<const Brake_control_a4 &>(from));
}


void Brake_control_a4::MergeFrom(const Brake_control_a4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_control_a4)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_torque_ = from._impl_.brake_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.brake_enable_control_ = from._impl_.brake_enable_control_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_control_a4::CopyFrom(const Brake_control_a4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_control_a4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_control_a4::IsInitialized() const {
  return true;
}

void Brake_control_a4::InternalSwap(Brake_control_a4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_control_a4, _impl_.brake_enable_control_)
      + sizeof(Brake_control_a4::_impl_.brake_enable_control_)
      - PROTOBUF_FIELD_OFFSET(Brake_control_a4, _impl_.brake_torque_)>(
          reinterpret_cast<char*>(&_impl_.brake_torque_),
          reinterpret_cast<char*>(&other->_impl_.brake_torque_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_control_a4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[4]);
}

// ===================================================================

class Enable_state_feedback_c3::_Internal {
 public:
  using HasBits = decltype(std::declval<Enable_state_feedback_c3>()._impl_._has_bits_);
  static void set_has_parking_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_enable_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driven_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Enable_state_feedback_c3::Enable_state_feedback_c3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Enable_state_feedback_c3)
}
Enable_state_feedback_c3::Enable_state_feedback_c3(const Enable_state_feedback_c3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_enable_state_){}
    , decltype(_impl_.steering_enable_state_){}
    , decltype(_impl_.gear_enable_actual_){}
    , decltype(_impl_.driven_enable_state_){}
    , decltype(_impl_.brake_enable_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parking_enable_state_, &from._impl_.parking_enable_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brake_enable_state_) -
    reinterpret_cast<char*>(&_impl_.parking_enable_state_)) + sizeof(_impl_.brake_enable_state_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Enable_state_feedback_c3)
}

inline void Enable_state_feedback_c3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_enable_state_){0}
    , decltype(_impl_.steering_enable_state_){0}
    , decltype(_impl_.gear_enable_actual_){0}
    , decltype(_impl_.driven_enable_state_){0}
    , decltype(_impl_.brake_enable_state_){0}
  };
}

Enable_state_feedback_c3::~Enable_state_feedback_c3() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Enable_state_feedback_c3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enable_state_feedback_c3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Enable_state_feedback_c3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enable_state_feedback_c3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Enable_state_feedback_c3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.parking_enable_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_enable_state_) -
        reinterpret_cast<char*>(&_impl_.parking_enable_state_)) + sizeof(_impl_.brake_enable_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enable_state_feedback_c3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Parking_enable_stateType_IsValid(val))) {
            _internal_set_parking_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Parking_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Steering_enable_stateType_IsValid(val))) {
            _internal_set_steering_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Steering_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Gear_enable_actualType_IsValid(val))) {
            _internal_set_gear_enable_actual(static_cast<::apollo::canbus::Enable_state_feedback_c3_Gear_enable_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Driven_enable_stateType_IsValid(val))) {
            _internal_set_driven_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Driven_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Brake_enable_stateType_IsValid(val))) {
            _internal_set_brake_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Brake_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Enable_state_feedback_c3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Enable_state_feedback_c3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_steering_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gear_enable_actual(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_driven_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_brake_enable_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Enable_state_feedback_c3)
  return target;
}

size_t Enable_state_feedback_c3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Enable_state_feedback_c3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steering_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_enable_actual());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driven_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_enable_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enable_state_feedback_c3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Enable_state_feedback_c3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enable_state_feedback_c3::GetClassData() const { return &_class_data_; }

void Enable_state_feedback_c3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Enable_state_feedback_c3 *>(to)->MergeFrom(
      static_cast<const Enable_state_feedback_c3 &>(from));
}


void Enable_state_feedback_c3::MergeFrom(const Enable_state_feedback_c3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Enable_state_feedback_c3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parking_enable_state_ = from._impl_.parking_enable_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steering_enable_state_ = from._impl_.steering_enable_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gear_enable_actual_ = from._impl_.gear_enable_actual_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.driven_enable_state_ = from._impl_.driven_enable_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.brake_enable_state_ = from._impl_.brake_enable_state_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enable_state_feedback_c3::CopyFrom(const Enable_state_feedback_c3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Enable_state_feedback_c3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enable_state_feedback_c3::IsInitialized() const {
  return true;
}

void Enable_state_feedback_c3::InternalSwap(Enable_state_feedback_c3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Enable_state_feedback_c3, _impl_.brake_enable_state_)
      + sizeof(Enable_state_feedback_c3::_impl_.brake_enable_state_)
      - PROTOBUF_FIELD_OFFSET(Enable_state_feedback_c3, _impl_.parking_enable_state_)>(
          reinterpret_cast<char*>(&_impl_.parking_enable_state_),
          reinterpret_cast<char*>(&other->_impl_.parking_enable_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Enable_state_feedback_c3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[5]);
}

// ===================================================================

class Vehicle_state_feedback_c1::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_state_feedback_c1>()._impl_._has_bits_);
  static void set_has_parking_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_torque_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gear_state_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steering_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vehicle_state_feedback_c1::Vehicle_state_feedback_c1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vehicle_state_feedback_c1)
}
Vehicle_state_feedback_c1::Vehicle_state_feedback_c1(const Vehicle_state_feedback_c1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_torque_feedback_){}
    , decltype(_impl_.steering_actual_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.parking_actual_){}
    , decltype(_impl_.gear_state_actual_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_torque_feedback_, &from._impl_.brake_torque_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_state_actual_) -
    reinterpret_cast<char*>(&_impl_.brake_torque_feedback_)) + sizeof(_impl_.gear_state_actual_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_state_feedback_c1)
}

inline void Vehicle_state_feedback_c1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_torque_feedback_){0}
    , decltype(_impl_.steering_actual_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.parking_actual_){0}
    , decltype(_impl_.gear_state_actual_){1}
  };
}

Vehicle_state_feedback_c1::~Vehicle_state_feedback_c1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_state_feedback_c1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vehicle_state_feedback_c1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vehicle_state_feedback_c1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vehicle_state_feedback_c1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_state_feedback_c1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.brake_torque_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parking_actual_) -
        reinterpret_cast<char*>(&_impl_.brake_torque_feedback_)) + sizeof(_impl_.parking_actual_));
    _impl_.gear_state_actual_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_state_feedback_c1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_state_feedback_c1_Parking_actualType_IsValid(val))) {
            _internal_set_parking_actual(static_cast<::apollo::canbus::Vehicle_state_feedback_c1_Parking_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double brake_torque_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_brake_torque_feedback(&has_bits);
          _impl_.brake_torque_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_state_feedback_c1_Gear_state_actualType_IsValid(val))) {
            _internal_set_gear_state_actual(static_cast<::apollo::canbus::Vehicle_state_feedback_c1_Gear_state_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double steering_actual = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steering_actual(&has_bits);
          _impl_.steering_actual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vehicle_state_feedback_c1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_state_feedback_c1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_actual(), target);
  }

  // optional double brake_torque_feedback = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_brake_torque_feedback(), target);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gear_state_actual(), target);
  }

  // optional double steering_actual = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_steering_actual(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_state_feedback_c1)
  return target;
}

size_t Vehicle_state_feedback_c1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_state_feedback_c1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double brake_torque_feedback = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double steering_actual = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_actual());
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_state_actual());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vehicle_state_feedback_c1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vehicle_state_feedback_c1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vehicle_state_feedback_c1::GetClassData() const { return &_class_data_; }

void Vehicle_state_feedback_c1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vehicle_state_feedback_c1 *>(to)->MergeFrom(
      static_cast<const Vehicle_state_feedback_c1 &>(from));
}


void Vehicle_state_feedback_c1::MergeFrom(const Vehicle_state_feedback_c1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_torque_feedback_ = from._impl_.brake_torque_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steering_actual_ = from._impl_.steering_actual_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parking_actual_ = from._impl_.parking_actual_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gear_state_actual_ = from._impl_.gear_state_actual_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle_state_feedback_c1::CopyFrom(const Vehicle_state_feedback_c1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_state_feedback_c1::IsInitialized() const {
  return true;
}

void Vehicle_state_feedback_c1::InternalSwap(Vehicle_state_feedback_c1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_state_feedback_c1, _impl_.parking_actual_)
      + sizeof(Vehicle_state_feedback_c1::_impl_.parking_actual_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_state_feedback_c1, _impl_.brake_torque_feedback_)>(
          reinterpret_cast<char*>(&_impl_.brake_torque_feedback_),
          reinterpret_cast<char*>(&other->_impl_.brake_torque_feedback_));
  swap(_impl_.gear_state_actual_, other->_impl_.gear_state_actual_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_state_feedback_c1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[6]);
}

// ===================================================================

class Error_state_e1::_Internal {
 public:
  using HasBits = decltype(std::declval<Error_state_e1>()._impl_._has_bits_);
  static void set_has_brake_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driven_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gear_error_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Error_state_e1::Error_state_e1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Error_state_e1)
}
Error_state_e1::Error_state_e1(const Error_state_e1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_error_code_){}
    , decltype(_impl_.driven_error_code_){}
    , decltype(_impl_.steering_error_code_){}
    , decltype(_impl_.parking_error_code_){}
    , decltype(_impl_.gear_error_msg_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_error_code_, &from._impl_.brake_error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_error_msg_) -
    reinterpret_cast<char*>(&_impl_.brake_error_code_)) + sizeof(_impl_.gear_error_msg_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Error_state_e1)
}

inline void Error_state_e1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_error_code_){0}
    , decltype(_impl_.driven_error_code_){0}
    , decltype(_impl_.steering_error_code_){0}
    , decltype(_impl_.parking_error_code_){0}
    , decltype(_impl_.gear_error_msg_){0}
  };
}

Error_state_e1::~Error_state_e1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Error_state_e1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Error_state_e1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Error_state_e1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Error_state_e1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Error_state_e1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.brake_error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_error_msg_) -
        reinterpret_cast<char*>(&_impl_.brake_error_code_)) + sizeof(_impl_.gear_error_msg_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error_state_e1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Brake_error_codeType_IsValid(val))) {
            _internal_set_brake_error_code(static_cast<::apollo::canbus::Error_state_e1_Brake_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Driven_error_codeType_IsValid(val))) {
            _internal_set_driven_error_code(static_cast<::apollo::canbus::Error_state_e1_Driven_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Steering_error_codeType_IsValid(val))) {
            _internal_set_steering_error_code(static_cast<::apollo::canbus::Error_state_e1_Steering_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Parking_error_codeType_IsValid(val))) {
            _internal_set_parking_error_code(static_cast<::apollo::canbus::Error_state_e1_Parking_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Gear_error_msgType_IsValid(val))) {
            _internal_set_gear_error_msg(static_cast<::apollo::canbus::Error_state_e1_Gear_error_msgType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error_state_e1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Error_state_e1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_driven_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_steering_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parking_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gear_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Error_state_e1)
  return target;
}

size_t Error_state_e1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Error_state_e1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driven_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steering_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_error_msg());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error_state_e1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error_state_e1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error_state_e1::GetClassData() const { return &_class_data_; }

void Error_state_e1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error_state_e1 *>(to)->MergeFrom(
      static_cast<const Error_state_e1 &>(from));
}


void Error_state_e1::MergeFrom(const Error_state_e1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Error_state_e1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_error_code_ = from._impl_.brake_error_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.driven_error_code_ = from._impl_.driven_error_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.steering_error_code_ = from._impl_.steering_error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parking_error_code_ = from._impl_.parking_error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gear_error_msg_ = from._impl_.gear_error_msg_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error_state_e1::CopyFrom(const Error_state_e1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Error_state_e1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_state_e1::IsInitialized() const {
  return true;
}

void Error_state_e1::InternalSwap(Error_state_e1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error_state_e1, _impl_.gear_error_msg_)
      + sizeof(Error_state_e1::_impl_.gear_error_msg_)
      - PROTOBUF_FIELD_OFFSET(Error_state_e1, _impl_.brake_error_code_)>(
          reinterpret_cast<char*>(&_impl_.brake_error_code_),
          reinterpret_cast<char*>(&other->_impl_.brake_error_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error_state_e1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[7]);
}

// ===================================================================

class Vehicle_state_feedback_2_c4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_state_feedback_2_c4>()._impl_._has_bits_);
  static void set_has_motor_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driven_torque_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Vehicle_state_feedback_2_c4::Vehicle_state_feedback_2_c4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vehicle_state_feedback_2_c4)
}
Vehicle_state_feedback_2_c4::Vehicle_state_feedback_2_c4(const Vehicle_state_feedback_2_c4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driven_torque_feedback_){}
    , decltype(_impl_.motor_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.driven_torque_feedback_, &from._impl_.driven_torque_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.motor_speed_) -
    reinterpret_cast<char*>(&_impl_.driven_torque_feedback_)) + sizeof(_impl_.motor_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_state_feedback_2_c4)
}

inline void Vehicle_state_feedback_2_c4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driven_torque_feedback_){0}
    , decltype(_impl_.motor_speed_){0}
  };
}

Vehicle_state_feedback_2_c4::~Vehicle_state_feedback_2_c4() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_state_feedback_2_c4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vehicle_state_feedback_2_c4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vehicle_state_feedback_2_c4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vehicle_state_feedback_2_c4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.driven_torque_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.motor_speed_) -
        reinterpret_cast<char*>(&_impl_.driven_torque_feedback_)) + sizeof(_impl_.motor_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_state_feedback_2_c4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 motor_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_motor_speed(&has_bits);
          _impl_.motor_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double driven_torque_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_driven_torque_feedback(&has_bits);
          _impl_.driven_torque_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vehicle_state_feedback_2_c4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 motor_speed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_motor_speed(), target);
  }

  // optional double driven_torque_feedback = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_driven_torque_feedback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_state_feedback_2_c4)
  return target;
}

size_t Vehicle_state_feedback_2_c4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double driven_torque_feedback = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 motor_speed = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_speed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vehicle_state_feedback_2_c4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vehicle_state_feedback_2_c4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vehicle_state_feedback_2_c4::GetClassData() const { return &_class_data_; }

void Vehicle_state_feedback_2_c4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vehicle_state_feedback_2_c4 *>(to)->MergeFrom(
      static_cast<const Vehicle_state_feedback_2_c4 &>(from));
}


void Vehicle_state_feedback_2_c4::MergeFrom(const Vehicle_state_feedback_2_c4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driven_torque_feedback_ = from._impl_.driven_torque_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motor_speed_ = from._impl_.motor_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle_state_feedback_2_c4::CopyFrom(const Vehicle_state_feedback_2_c4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_state_feedback_2_c4::IsInitialized() const {
  return true;
}

void Vehicle_state_feedback_2_c4::InternalSwap(Vehicle_state_feedback_2_c4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_state_feedback_2_c4, _impl_.motor_speed_)
      + sizeof(Vehicle_state_feedback_2_c4::_impl_.motor_speed_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_state_feedback_2_c4, _impl_.driven_torque_feedback_)>(
          reinterpret_cast<char*>(&_impl_.driven_torque_feedback_),
          reinterpret_cast<char*>(&other->_impl_.driven_torque_feedback_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_state_feedback_2_c4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[8]);
}

// ===================================================================

class Zhongyun::_Internal {
 public:
  using HasBits = decltype(std::declval<Zhongyun>()._impl_._has_bits_);
  static const ::apollo::canbus::Gear_control_a1& gear_control_a1(const Zhongyun* msg);
  static void set_has_gear_control_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Torque_control_a3& torque_control_a3(const Zhongyun* msg);
  static void set_has_torque_control_a3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Steering_control_a2& steering_control_a2(const Zhongyun* msg);
  static void set_has_steering_control_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Parking_control_a5& parking_control_a5(const Zhongyun* msg);
  static void set_has_parking_control_a5(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Brake_control_a4& brake_control_a4(const Zhongyun* msg);
  static void set_has_brake_control_a4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Enable_state_feedback_c3& enable_state_feedback_c3(const Zhongyun* msg);
  static void set_has_enable_state_feedback_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Vehicle_state_feedback_c1& vehicle_state_feedback_c1(const Zhongyun* msg);
  static void set_has_vehicle_state_feedback_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Error_state_e1& error_state_e1(const Zhongyun* msg);
  static void set_has_error_state_e1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Vehicle_state_feedback_2_c4& vehicle_state_feedback_2_c4(const Zhongyun* msg);
  static void set_has_vehicle_state_feedback_2_c4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::canbus::Gear_control_a1&
Zhongyun::_Internal::gear_control_a1(const Zhongyun* msg) {
  return *msg->_impl_.gear_control_a1_;
}
const ::apollo::canbus::Torque_control_a3&
Zhongyun::_Internal::torque_control_a3(const Zhongyun* msg) {
  return *msg->_impl_.torque_control_a3_;
}
const ::apollo::canbus::Steering_control_a2&
Zhongyun::_Internal::steering_control_a2(const Zhongyun* msg) {
  return *msg->_impl_.steering_control_a2_;
}
const ::apollo::canbus::Parking_control_a5&
Zhongyun::_Internal::parking_control_a5(const Zhongyun* msg) {
  return *msg->_impl_.parking_control_a5_;
}
const ::apollo::canbus::Brake_control_a4&
Zhongyun::_Internal::brake_control_a4(const Zhongyun* msg) {
  return *msg->_impl_.brake_control_a4_;
}
const ::apollo::canbus::Enable_state_feedback_c3&
Zhongyun::_Internal::enable_state_feedback_c3(const Zhongyun* msg) {
  return *msg->_impl_.enable_state_feedback_c3_;
}
const ::apollo::canbus::Vehicle_state_feedback_c1&
Zhongyun::_Internal::vehicle_state_feedback_c1(const Zhongyun* msg) {
  return *msg->_impl_.vehicle_state_feedback_c1_;
}
const ::apollo::canbus::Error_state_e1&
Zhongyun::_Internal::error_state_e1(const Zhongyun* msg) {
  return *msg->_impl_.error_state_e1_;
}
const ::apollo::canbus::Vehicle_state_feedback_2_c4&
Zhongyun::_Internal::vehicle_state_feedback_2_c4(const Zhongyun* msg) {
  return *msg->_impl_.vehicle_state_feedback_2_c4_;
}
Zhongyun::Zhongyun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Zhongyun)
}
Zhongyun::Zhongyun(const Zhongyun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_control_a1_){nullptr}
    , decltype(_impl_.torque_control_a3_){nullptr}
    , decltype(_impl_.steering_control_a2_){nullptr}
    , decltype(_impl_.parking_control_a5_){nullptr}
    , decltype(_impl_.brake_control_a4_){nullptr}
    , decltype(_impl_.enable_state_feedback_c3_){nullptr}
    , decltype(_impl_.vehicle_state_feedback_c1_){nullptr}
    , decltype(_impl_.error_state_e1_){nullptr}
    , decltype(_impl_.vehicle_state_feedback_2_c4_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gear_control_a1()) {
    _impl_.gear_control_a1_ = new ::apollo::canbus::Gear_control_a1(*from._impl_.gear_control_a1_);
  }
  if (from._internal_has_torque_control_a3()) {
    _impl_.torque_control_a3_ = new ::apollo::canbus::Torque_control_a3(*from._impl_.torque_control_a3_);
  }
  if (from._internal_has_steering_control_a2()) {
    _impl_.steering_control_a2_ = new ::apollo::canbus::Steering_control_a2(*from._impl_.steering_control_a2_);
  }
  if (from._internal_has_parking_control_a5()) {
    _impl_.parking_control_a5_ = new ::apollo::canbus::Parking_control_a5(*from._impl_.parking_control_a5_);
  }
  if (from._internal_has_brake_control_a4()) {
    _impl_.brake_control_a4_ = new ::apollo::canbus::Brake_control_a4(*from._impl_.brake_control_a4_);
  }
  if (from._internal_has_enable_state_feedback_c3()) {
    _impl_.enable_state_feedback_c3_ = new ::apollo::canbus::Enable_state_feedback_c3(*from._impl_.enable_state_feedback_c3_);
  }
  if (from._internal_has_vehicle_state_feedback_c1()) {
    _impl_.vehicle_state_feedback_c1_ = new ::apollo::canbus::Vehicle_state_feedback_c1(*from._impl_.vehicle_state_feedback_c1_);
  }
  if (from._internal_has_error_state_e1()) {
    _impl_.error_state_e1_ = new ::apollo::canbus::Error_state_e1(*from._impl_.error_state_e1_);
  }
  if (from._internal_has_vehicle_state_feedback_2_c4()) {
    _impl_.vehicle_state_feedback_2_c4_ = new ::apollo::canbus::Vehicle_state_feedback_2_c4(*from._impl_.vehicle_state_feedback_2_c4_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Zhongyun)
}

inline void Zhongyun::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_control_a1_){nullptr}
    , decltype(_impl_.torque_control_a3_){nullptr}
    , decltype(_impl_.steering_control_a2_){nullptr}
    , decltype(_impl_.parking_control_a5_){nullptr}
    , decltype(_impl_.brake_control_a4_){nullptr}
    , decltype(_impl_.enable_state_feedback_c3_){nullptr}
    , decltype(_impl_.vehicle_state_feedback_c1_){nullptr}
    , decltype(_impl_.error_state_e1_){nullptr}
    , decltype(_impl_.vehicle_state_feedback_2_c4_){nullptr}
  };
}

Zhongyun::~Zhongyun() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Zhongyun)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Zhongyun::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gear_control_a1_;
  if (this != internal_default_instance()) delete _impl_.torque_control_a3_;
  if (this != internal_default_instance()) delete _impl_.steering_control_a2_;
  if (this != internal_default_instance()) delete _impl_.parking_control_a5_;
  if (this != internal_default_instance()) delete _impl_.brake_control_a4_;
  if (this != internal_default_instance()) delete _impl_.enable_state_feedback_c3_;
  if (this != internal_default_instance()) delete _impl_.vehicle_state_feedback_c1_;
  if (this != internal_default_instance()) delete _impl_.error_state_e1_;
  if (this != internal_default_instance()) delete _impl_.vehicle_state_feedback_2_c4_;
}

void Zhongyun::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Zhongyun::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Zhongyun)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.gear_control_a1_ != nullptr);
      _impl_.gear_control_a1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.torque_control_a3_ != nullptr);
      _impl_.torque_control_a3_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.steering_control_a2_ != nullptr);
      _impl_.steering_control_a2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.parking_control_a5_ != nullptr);
      _impl_.parking_control_a5_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.brake_control_a4_ != nullptr);
      _impl_.brake_control_a4_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.enable_state_feedback_c3_ != nullptr);
      _impl_.enable_state_feedback_c3_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.vehicle_state_feedback_c1_ != nullptr);
      _impl_.vehicle_state_feedback_c1_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.error_state_e1_ != nullptr);
      _impl_.error_state_e1_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.vehicle_state_feedback_2_c4_ != nullptr);
    _impl_.vehicle_state_feedback_2_c4_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zhongyun::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_control_a1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque_control_a3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_control_a2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_control_a5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_control_a4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_state_feedback_c3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_state_feedback_c1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_state_e1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_state_feedback_2_c4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Zhongyun::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Zhongyun)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gear_control_a1(this),
        _Internal::gear_control_a1(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::torque_control_a3(this),
        _Internal::torque_control_a3(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::steering_control_a2(this),
        _Internal::steering_control_a2(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::parking_control_a5(this),
        _Internal::parking_control_a5(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::brake_control_a4(this),
        _Internal::brake_control_a4(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::enable_state_feedback_c3(this),
        _Internal::enable_state_feedback_c3(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vehicle_state_feedback_c1(this),
        _Internal::vehicle_state_feedback_c1(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::error_state_e1(this),
        _Internal::error_state_e1(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::vehicle_state_feedback_2_c4(this),
        _Internal::vehicle_state_feedback_2_c4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Zhongyun)
  return target;
}

size_t Zhongyun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Zhongyun)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gear_control_a1_);
    }

    // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.torque_control_a3_);
    }

    // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_control_a2_);
    }

    // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parking_control_a5_);
    }

    // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_control_a4_);
    }

    // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enable_state_feedback_c3_);
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_state_feedback_c1_);
    }

    // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_state_e1_);
    }

  }
  // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vehicle_state_feedback_2_c4_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Zhongyun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Zhongyun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Zhongyun::GetClassData() const { return &_class_data_; }

void Zhongyun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Zhongyun *>(to)->MergeFrom(
      static_cast<const Zhongyun &>(from));
}


void Zhongyun::MergeFrom(const Zhongyun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Zhongyun)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gear_control_a1()->::apollo::canbus::Gear_control_a1::MergeFrom(from._internal_gear_control_a1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_torque_control_a3()->::apollo::canbus::Torque_control_a3::MergeFrom(from._internal_torque_control_a3());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_steering_control_a2()->::apollo::canbus::Steering_control_a2::MergeFrom(from._internal_steering_control_a2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_parking_control_a5()->::apollo::canbus::Parking_control_a5::MergeFrom(from._internal_parking_control_a5());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_brake_control_a4()->::apollo::canbus::Brake_control_a4::MergeFrom(from._internal_brake_control_a4());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_enable_state_feedback_c3()->::apollo::canbus::Enable_state_feedback_c3::MergeFrom(from._internal_enable_state_feedback_c3());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_vehicle_state_feedback_c1()->::apollo::canbus::Vehicle_state_feedback_c1::MergeFrom(from._internal_vehicle_state_feedback_c1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_error_state_e1()->::apollo::canbus::Error_state_e1::MergeFrom(from._internal_error_state_e1());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_vehicle_state_feedback_2_c4()->::apollo::canbus::Vehicle_state_feedback_2_c4::MergeFrom(from._internal_vehicle_state_feedback_2_c4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Zhongyun::CopyFrom(const Zhongyun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Zhongyun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zhongyun::IsInitialized() const {
  return true;
}

void Zhongyun::InternalSwap(Zhongyun* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zhongyun, _impl_.vehicle_state_feedback_2_c4_)
      + sizeof(Zhongyun::_impl_.vehicle_state_feedback_2_c4_)
      - PROTOBUF_FIELD_OFFSET(Zhongyun, _impl_.gear_control_a1_)>(
          reinterpret_cast<char*>(&_impl_.gear_control_a1_),
          reinterpret_cast<char*>(&other->_impl_.gear_control_a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Zhongyun::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_control_a1*
Arena::CreateMaybeMessage< ::apollo::canbus::Gear_control_a1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gear_control_a1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Torque_control_a3*
Arena::CreateMaybeMessage< ::apollo::canbus::Torque_control_a3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Torque_control_a3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_control_a2*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_control_a2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_control_a2 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_control_a5*
Arena::CreateMaybeMessage< ::apollo::canbus::Parking_control_a5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Parking_control_a5 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_control_a4*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_control_a4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_control_a4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Enable_state_feedback_c3*
Arena::CreateMaybeMessage< ::apollo::canbus::Enable_state_feedback_c3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Enable_state_feedback_c3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_state_feedback_c1*
Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_state_feedback_c1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vehicle_state_feedback_c1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Error_state_e1*
Arena::CreateMaybeMessage< ::apollo::canbus::Error_state_e1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Error_state_e1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_state_feedback_2_c4*
Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_state_feedback_2_c4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vehicle_state_feedback_2_c4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Zhongyun*
Arena::CreateMaybeMessage< ::apollo::canbus::Zhongyun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Zhongyun >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
