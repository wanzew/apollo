// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis_detail.proto

#include "modules/canbus/proto/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace canbus {
PROTOBUF_CONSTEXPR ChassisDetail::ChassisDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_.safety_)*/nullptr
  , /*decltype(_impl_.gear_)*/nullptr
  , /*decltype(_impl_.ems_)*/nullptr
  , /*decltype(_impl_.esp_)*/nullptr
  , /*decltype(_impl_.gas_)*/nullptr
  , /*decltype(_impl_.epb_)*/nullptr
  , /*decltype(_impl_.brake_)*/nullptr
  , /*decltype(_impl_.deceleration_)*/nullptr
  , /*decltype(_impl_.vehicle_spd_)*/nullptr
  , /*decltype(_impl_.eps_)*/nullptr
  , /*decltype(_impl_.light_)*/nullptr
  , /*decltype(_impl_.battery_)*/nullptr
  , /*decltype(_impl_.check_response_)*/nullptr
  , /*decltype(_impl_.license_)*/nullptr
  , /*decltype(_impl_.surround_)*/nullptr
  , /*decltype(_impl_.gem_)*/nullptr
  , /*decltype(_impl_.ch_)*/nullptr
  , /*decltype(_impl_.car_type_)*/0} {}
struct ChassisDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisDetailDefaultTypeInternal() {}
  union {
    ChassisDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisDetailDefaultTypeInternal _ChassisDetail_default_instance_;
PROTOBUF_CONSTEXPR CheckResponseSignal::CheckResponseSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.is_eps_online_)*/false
  , /*decltype(_impl_.is_epb_online_)*/false
  , /*decltype(_impl_.is_esp_online_)*/false
  , /*decltype(_impl_.is_vtog_online_)*/false
  , /*decltype(_impl_.is_scu_online_)*/false
  , /*decltype(_impl_.is_switch_online_)*/false
  , /*decltype(_impl_.is_vcu_online_)*/false} {}
struct CheckResponseSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckResponseSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckResponseSignalDefaultTypeInternal() {}
  union {
    CheckResponseSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckResponseSignalDefaultTypeInternal _CheckResponseSignal_default_instance_;
PROTOBUF_CONSTEXPR Battery::Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.battery_percent_)*/0
  , /*decltype(_impl_.fuel_level_)*/0} {}
struct BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryDefaultTypeInternal _Battery_default_instance_;
PROTOBUF_CONSTEXPR Light::Light(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.turn_light_type_)*/0
  , /*decltype(_impl_.beam_lamp_type_)*/0
  , /*decltype(_impl_.is_brake_lamp_on_)*/false
  , /*decltype(_impl_.is_auto_light_)*/false
  , /*decltype(_impl_.is_horn_on_)*/false
  , /*decltype(_impl_.wiper_gear_)*/0
  , /*decltype(_impl_.lotion_gear_)*/0
  , /*decltype(_impl_.lincoln_lamp_type_)*/0
  , /*decltype(_impl_.lincoln_wiper_)*/0
  , /*decltype(_impl_.lincoln_ambient_)*/0} {}
struct LightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightDefaultTypeInternal() {}
  union {
    Light _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightDefaultTypeInternal _Light_default_instance_;
PROTOBUF_CONSTEXPR Eps::Eps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eps_driver_hand_torq_)*/0
  , /*decltype(_impl_.eps_control_state_)*/0
  , /*decltype(_impl_.is_eps_fail_)*/false
  , /*decltype(_impl_.is_steering_angle_valid_)*/false
  , /*decltype(_impl_.is_trimming_status_)*/false
  , /*decltype(_impl_.is_calibration_status_)*/false
  , /*decltype(_impl_.steering_angle_)*/0
  , /*decltype(_impl_.steering_angle_spd_)*/0
  , /*decltype(_impl_.allow_enter_autonomous_mode_)*/0
  , /*decltype(_impl_.current_driving_mode_)*/0
  , /*decltype(_impl_.steering_angle_cmd_)*/0
  , /*decltype(_impl_.vehicle_speed_)*/0
  , /*decltype(_impl_.epas_torque_)*/0
  , /*decltype(_impl_.is_failure_status_)*/false
  , /*decltype(_impl_.steering_enabled_)*/false
  , /*decltype(_impl_.driver_override_)*/false
  , /*decltype(_impl_.driver_activity_)*/false
  , /*decltype(_impl_.watchdog_fault_)*/false
  , /*decltype(_impl_.channel_1_fault_)*/false
  , /*decltype(_impl_.channel_2_fault_)*/false
  , /*decltype(_impl_.calibration_fault_)*/false
  , /*decltype(_impl_.timestamp_65_)*/0
  , /*decltype(_impl_.connector_fault_)*/false
  , /*decltype(_impl_.major_version_)*/0
  , /*decltype(_impl_.minor_version_)*/0
  , /*decltype(_impl_.build_number_)*/0} {}
struct EpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpsDefaultTypeInternal() {}
  union {
    Eps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpsDefaultTypeInternal _Eps_default_instance_;
PROTOBUF_CONSTEXPR VehicleSpd::VehicleSpd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_spd_)*/0
  , /*decltype(_impl_.is_vehicle_standstill_)*/false
  , /*decltype(_impl_.is_vehicle_spd_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_rr_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_rl_valid_)*/false
  , /*decltype(_impl_.wheel_direction_rr_)*/0
  , /*decltype(_impl_.wheel_spd_rr_)*/0
  , /*decltype(_impl_.wheel_spd_rl_)*/0
  , /*decltype(_impl_.wheel_direction_rl_)*/0
  , /*decltype(_impl_.wheel_direction_fr_)*/0
  , /*decltype(_impl_.wheel_spd_fr_)*/0
  , /*decltype(_impl_.wheel_direction_fl_)*/0
  , /*decltype(_impl_.is_wheel_spd_fr_valid_)*/false
  , /*decltype(_impl_.is_wheel_spd_fl_valid_)*/false
  , /*decltype(_impl_.is_yaw_rate_valid_)*/false
  , /*decltype(_impl_.is_ax_valid_)*/false
  , /*decltype(_impl_.wheel_spd_fl_)*/0
  , /*decltype(_impl_.yaw_rate_)*/0
  , /*decltype(_impl_.yaw_rate_offset_)*/0
  , /*decltype(_impl_.ax_)*/0
  , /*decltype(_impl_.ax_offset_)*/0
  , /*decltype(_impl_.ay_)*/0
  , /*decltype(_impl_.ay_offset_)*/0
  , /*decltype(_impl_.lat_acc_)*/0
  , /*decltype(_impl_.long_acc_)*/0
  , /*decltype(_impl_.vert_acc_)*/0
  , /*decltype(_impl_.roll_rate_)*/0
  , /*decltype(_impl_.acc_est_)*/0
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.is_ay_valid_)*/false} {}
struct VehicleSpdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleSpdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleSpdDefaultTypeInternal() {}
  union {
    VehicleSpd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleSpdDefaultTypeInternal _VehicleSpd_default_instance_;
PROTOBUF_CONSTEXPR Deceleration::Deceleration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deceleration_)*/0
  , /*decltype(_impl_.is_evb_fail_)*/0
  , /*decltype(_impl_.evb_pressure_)*/0
  , /*decltype(_impl_.brake_pressure_)*/0
  , /*decltype(_impl_.brake_pressure_spd_)*/0
  , /*decltype(_impl_.is_deceleration_available_)*/false
  , /*decltype(_impl_.is_deceleration_active_)*/false} {}
struct DecelerationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecelerationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecelerationDefaultTypeInternal() {}
  union {
    Deceleration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecelerationDefaultTypeInternal _Deceleration_default_instance_;
PROTOBUF_CONSTEXPR Brake::Brake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_pedal_position_)*/0
  , /*decltype(_impl_.is_brake_pedal_pressed_)*/false
  , /*decltype(_impl_.is_brake_force_exist_)*/false
  , /*decltype(_impl_.is_brake_over_heat_)*/false
  , /*decltype(_impl_.is_hand_brake_on_)*/false
  , /*decltype(_impl_.is_brake_valid_)*/false
  , /*decltype(_impl_.boo_input_)*/false
  , /*decltype(_impl_.boo_cmd_)*/false
  , /*decltype(_impl_.boo_output_)*/false
  , /*decltype(_impl_.brake_input_)*/0
  , /*decltype(_impl_.brake_cmd_)*/0
  , /*decltype(_impl_.brake_output_)*/0
  , /*decltype(_impl_.watchdog_source_)*/0
  , /*decltype(_impl_.watchdog_applying_brakes_)*/false
  , /*decltype(_impl_.brake_enabled_)*/false
  , /*decltype(_impl_.driver_override_)*/false
  , /*decltype(_impl_.driver_activity_)*/false
  , /*decltype(_impl_.watchdog_fault_)*/false
  , /*decltype(_impl_.channel_1_fault_)*/false
  , /*decltype(_impl_.channel_2_fault_)*/false
  , /*decltype(_impl_.boo_fault_)*/false
  , /*decltype(_impl_.connector_fault_)*/false
  , /*decltype(_impl_.brake_torque_req_)*/0
  , /*decltype(_impl_.brake_torque_act_)*/0
  , /*decltype(_impl_.hsa_status_)*/0
  , /*decltype(_impl_.hsa_mode_)*/0
  , /*decltype(_impl_.wheel_torque_act_)*/0
  , /*decltype(_impl_.major_version_)*/0
  , /*decltype(_impl_.minor_version_)*/0
  , /*decltype(_impl_.build_number_)*/0} {}
struct BrakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeDefaultTypeInternal() {}
  union {
    Brake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeDefaultTypeInternal _Brake_default_instance_;
PROTOBUF_CONSTEXPR Epb::Epb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.is_epb_error_)*/false
  , /*decltype(_impl_.is_epb_released_)*/false
  , /*decltype(_impl_.epb_status_)*/0
  , /*decltype(_impl_.parking_brake_status_)*/0} {}
struct EpbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpbDefaultTypeInternal() {}
  union {
    Epb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpbDefaultTypeInternal _Epb_default_instance_;
PROTOBUF_CONSTEXPR Gas::Gas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gas_pedal_position_)*/0
  , /*decltype(_impl_.is_gas_pedal_error_)*/false
  , /*decltype(_impl_.is_gas_pedal_pressed_more_)*/false
  , /*decltype(_impl_.is_gas_valid_)*/false
  , /*decltype(_impl_.throttle_enabled_)*/false
  , /*decltype(_impl_.watchdog_source_)*/0
  , /*decltype(_impl_.throttle_input_)*/0
  , /*decltype(_impl_.throttle_cmd_)*/0
  , /*decltype(_impl_.throttle_output_)*/0
  , /*decltype(_impl_.driver_override_)*/false
  , /*decltype(_impl_.driver_activity_)*/false
  , /*decltype(_impl_.watchdog_fault_)*/false
  , /*decltype(_impl_.channel_1_fault_)*/false
  , /*decltype(_impl_.channel_2_fault_)*/false
  , /*decltype(_impl_.connector_fault_)*/false
  , /*decltype(_impl_.accelerator_pedal_)*/0
  , /*decltype(_impl_.accelerator_pedal_rate_)*/0
  , /*decltype(_impl_.major_version_)*/0
  , /*decltype(_impl_.minor_version_)*/0
  , /*decltype(_impl_.build_number_)*/0} {}
struct GasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GasDefaultTypeInternal() {}
  union {
    Gas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GasDefaultTypeInternal _Gas_default_instance_;
PROTOBUF_CONSTEXPR Esp::Esp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.is_esp_acc_error_)*/false
  , /*decltype(_impl_.is_esp_on_)*/false
  , /*decltype(_impl_.is_esp_active_)*/false
  , /*decltype(_impl_.is_abs_error_)*/false
  , /*decltype(_impl_.is_abs_active_)*/false
  , /*decltype(_impl_.is_tcsvdc_fail_)*/false
  , /*decltype(_impl_.is_abs_enabled_)*/false
  , /*decltype(_impl_.is_stab_active_)*/false
  , /*decltype(_impl_.is_stab_enabled_)*/false
  , /*decltype(_impl_.is_trac_active_)*/false
  , /*decltype(_impl_.is_trac_enabled_)*/false} {}
struct EspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EspDefaultTypeInternal() {}
  union {
    Esp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EspDefaultTypeInternal _Esp_default_instance_;
PROTOBUF_CONSTEXPR Ems::Ems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_engine_torq_percent_)*/0
  , /*decltype(_impl_.engine_state_)*/0
  , /*decltype(_impl_.is_engine_acc_available_)*/false
  , /*decltype(_impl_.is_engine_acc_error_)*/false
  , /*decltype(_impl_.is_engine_speed_error_)*/false
  , /*decltype(_impl_.is_over_engine_torque_)*/false
  , /*decltype(_impl_.min_engine_torq_percent_)*/0
  , /*decltype(_impl_.base_engine_torq_constant_)*/0
  , /*decltype(_impl_.engine_torque_)*/0
  , /*decltype(_impl_.engine_speed_)*/0
  , /*decltype(_impl_.engine_rpm_)*/0} {}
struct EmsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmsDefaultTypeInternal() {}
  union {
    Ems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmsDefaultTypeInternal _Ems_default_instance_;
PROTOBUF_CONSTEXPR Gear::Gear(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gear_state_)*/0
  , /*decltype(_impl_.is_shift_position_valid_)*/false
  , /*decltype(_impl_.driver_override_)*/false
  , /*decltype(_impl_.canbus_fault_)*/false
  , /*decltype(_impl_.gear_cmd_)*/0} {}
struct GearDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GearDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GearDefaultTypeInternal() {}
  union {
    Gear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GearDefaultTypeInternal _Gear_default_instance_;
PROTOBUF_CONSTEXPR Safety::Safety(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emergency_button_)*/0
  , /*decltype(_impl_.is_driver_car_door_close_)*/false
  , /*decltype(_impl_.is_driver_buckled_)*/false
  , /*decltype(_impl_.has_error_)*/false
  , /*decltype(_impl_.is_motor_invertor_fault_)*/false
  , /*decltype(_impl_.is_system_fault_)*/false
  , /*decltype(_impl_.is_power_battery_fault_)*/false
  , /*decltype(_impl_.is_motor_invertor_over_temperature_)*/false
  , /*decltype(_impl_.is_small_battery_charge_discharge_fault_)*/false
  , /*decltype(_impl_.driving_mode_)*/0
  , /*decltype(_impl_.is_passenger_door_open_)*/false
  , /*decltype(_impl_.is_rearleft_door_open_)*/false
  , /*decltype(_impl_.is_rearright_door_open_)*/false
  , /*decltype(_impl_.is_hood_open_)*/false
  , /*decltype(_impl_.is_trunk_open_)*/false
  , /*decltype(_impl_.is_passenger_detected_)*/false
  , /*decltype(_impl_.is_passenger_airbag_enabled_)*/false
  , /*decltype(_impl_.is_passenger_buckled_)*/false
  , /*decltype(_impl_.front_left_tire_press_)*/0
  , /*decltype(_impl_.front_right_tire_press_)*/0
  , /*decltype(_impl_.rear_left_tire_press_)*/0
  , /*decltype(_impl_.rear_right_tire_press_)*/0
  , /*decltype(_impl_.car_driving_mode_)*/0} {}
struct SafetyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyDefaultTypeInternal() {}
  union {
    Safety _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyDefaultTypeInternal _Safety_default_instance_;
PROTOBUF_CONSTEXPR BasicInfo::BasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.power_state_)*/0
  , /*decltype(_impl_.is_auto_mode_)*/false
  , /*decltype(_impl_.is_air_bag_deployed_)*/false
  , /*decltype(_impl_.is_system_error_)*/false
  , /*decltype(_impl_.is_human_interrupt_)*/false
  , /*decltype(_impl_.odo_meter_)*/0
  , /*decltype(_impl_.drive_range_)*/0
  , /*decltype(_impl_.acc_on_button_)*/false
  , /*decltype(_impl_.acc_off_button_)*/false
  , /*decltype(_impl_.acc_res_button_)*/false
  , /*decltype(_impl_.acc_cancel_button_)*/false
  , /*decltype(_impl_.acc_on_off_button_)*/false
  , /*decltype(_impl_.acc_res_cancel_button_)*/false
  , /*decltype(_impl_.acc_inc_spd_button_)*/false
  , /*decltype(_impl_.acc_dec_spd_button_)*/false
  , /*decltype(_impl_.acc_inc_gap_button_)*/false
  , /*decltype(_impl_.acc_dec_gap_button_)*/false
  , /*decltype(_impl_.lka_button_)*/false
  , /*decltype(_impl_.canbus_fault_)*/false
  , /*decltype(_impl_.year_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.month_)*/0
  , /*decltype(_impl_.day_)*/0
  , /*decltype(_impl_.hours_)*/0
  , /*decltype(_impl_.minutes_)*/0
  , /*decltype(_impl_.seconds_)*/0
  , /*decltype(_impl_.gps_valid_)*/false
  , /*decltype(_impl_.is_gps_fault_)*/false
  , /*decltype(_impl_.is_inferred_)*/false
  , /*decltype(_impl_.compass_direction_)*/0
  , /*decltype(_impl_.pdop_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.hdop_)*/0
  , /*decltype(_impl_.vdop_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.num_satellites_)*/0
  , /*decltype(_impl_.gps_speed_)*/0} {}
struct BasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasicInfoDefaultTypeInternal() {}
  union {
    BasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasicInfoDefaultTypeInternal _BasicInfo_default_instance_;
PROTOBUF_CONSTEXPR Global_rpt_6a::Global_rpt_6a(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pacmod_status_)*/0
  , /*decltype(_impl_.override_status_)*/0
  , /*decltype(_impl_.veh_can_timeout_)*/false
  , /*decltype(_impl_.str_can_timeout_)*/false
  , /*decltype(_impl_.usr_can_timeout_)*/false
  , /*decltype(_impl_.brk_can_timeout_)*/0
  , /*decltype(_impl_.usr_can_read_errors_)*/0} {}
struct Global_rpt_6aDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Global_rpt_6aDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Global_rpt_6aDefaultTypeInternal() {}
  union {
    Global_rpt_6a _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Global_rpt_6aDefaultTypeInternal _Global_rpt_6a_default_instance_;
PROTOBUF_CONSTEXPR Brake_cmd_6b::Brake_cmd_6b(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.brake_cmd_)*/0} {}
struct Brake_cmd_6bDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_cmd_6bDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_cmd_6bDefaultTypeInternal() {}
  union {
    Brake_cmd_6b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_cmd_6bDefaultTypeInternal _Brake_cmd_6b_default_instance_;
PROTOBUF_CONSTEXPR Brake_rpt_6c::Brake_rpt_6c(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.brake_on_off_)*/0} {}
struct Brake_rpt_6cDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_rpt_6cDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_rpt_6cDefaultTypeInternal() {}
  union {
    Brake_rpt_6c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_rpt_6cDefaultTypeInternal _Brake_rpt_6c_default_instance_;
PROTOBUF_CONSTEXPR Steering_cmd_6d::Steering_cmd_6d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_value_)*/0
  , /*decltype(_impl_.speed_limit_)*/0} {}
struct Steering_cmd_6dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_cmd_6dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_cmd_6dDefaultTypeInternal() {}
  union {
    Steering_cmd_6d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_cmd_6dDefaultTypeInternal _Steering_cmd_6d_default_instance_;
PROTOBUF_CONSTEXPR Steering_rpt_1_6e::Steering_rpt_1_6e(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Steering_rpt_1_6eDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_rpt_1_6eDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_rpt_1_6eDefaultTypeInternal() {}
  union {
    Steering_rpt_1_6e _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_rpt_1_6eDefaultTypeInternal _Steering_rpt_1_6e_default_instance_;
PROTOBUF_CONSTEXPR Wheel_speed_rpt_7a::Wheel_speed_rpt_7a(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wheel_spd_rear_right_)*/0
  , /*decltype(_impl_.wheel_spd_rear_left_)*/0
  , /*decltype(_impl_.wheel_spd_front_right_)*/0
  , /*decltype(_impl_.wheel_spd_front_left_)*/0} {}
struct Wheel_speed_rpt_7aDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wheel_speed_rpt_7aDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wheel_speed_rpt_7aDefaultTypeInternal() {}
  union {
    Wheel_speed_rpt_7a _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wheel_speed_rpt_7aDefaultTypeInternal _Wheel_speed_rpt_7a_default_instance_;
PROTOBUF_CONSTEXPR Date_time_rpt_83::Date_time_rpt_83(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_second_)*/0
  , /*decltype(_impl_.time_minute_)*/0
  , /*decltype(_impl_.time_hour_)*/0
  , /*decltype(_impl_.date_day_)*/0
  , /*decltype(_impl_.date_month_)*/0
  , /*decltype(_impl_.date_year_)*/0} {}
struct Date_time_rpt_83DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Date_time_rpt_83DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Date_time_rpt_83DefaultTypeInternal() {}
  union {
    Date_time_rpt_83 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Date_time_rpt_83DefaultTypeInternal _Date_time_rpt_83_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_1_70::Brake_motor_rpt_1_70(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motor_current_)*/0
  , /*decltype(_impl_.shaft_position_)*/0} {}
struct Brake_motor_rpt_1_70DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_1_70DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_1_70DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_1_70 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_1_70DefaultTypeInternal _Brake_motor_rpt_1_70_default_instance_;
PROTOBUF_CONSTEXPR Headlight_rpt_77::Headlight_rpt_77(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0} {}
struct Headlight_rpt_77DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Headlight_rpt_77DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Headlight_rpt_77DefaultTypeInternal() {}
  union {
    Headlight_rpt_77 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Headlight_rpt_77DefaultTypeInternal _Headlight_rpt_77_default_instance_;
PROTOBUF_CONSTEXPR Accel_rpt_68::Accel_rpt_68(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Accel_rpt_68DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Accel_rpt_68DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Accel_rpt_68DefaultTypeInternal() {}
  union {
    Accel_rpt_68 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Accel_rpt_68DefaultTypeInternal _Accel_rpt_68_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_3_75::Steering_motor_rpt_3_75(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.torque_output_)*/0
  , /*decltype(_impl_.torque_input_)*/0} {}
struct Steering_motor_rpt_3_75DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_3_75DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_3_75DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_3_75 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_3_75DefaultTypeInternal _Steering_motor_rpt_3_75_default_instance_;
PROTOBUF_CONSTEXPR Turn_cmd_63::Turn_cmd_63(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.turn_signal_cmd_)*/0} {}
struct Turn_cmd_63DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turn_cmd_63DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turn_cmd_63DefaultTypeInternal() {}
  union {
    Turn_cmd_63 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turn_cmd_63DefaultTypeInternal _Turn_cmd_63_default_instance_;
PROTOBUF_CONSTEXPR Turn_rpt_64::Turn_rpt_64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Turn_rpt_64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Turn_rpt_64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Turn_rpt_64DefaultTypeInternal() {}
  union {
    Turn_rpt_64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Turn_rpt_64DefaultTypeInternal _Turn_rpt_64_default_instance_;
PROTOBUF_CONSTEXPR Shift_cmd_65::Shift_cmd_65(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shift_cmd_)*/0} {}
struct Shift_cmd_65DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Shift_cmd_65DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Shift_cmd_65DefaultTypeInternal() {}
  union {
    Shift_cmd_65 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Shift_cmd_65DefaultTypeInternal _Shift_cmd_65_default_instance_;
PROTOBUF_CONSTEXPR Shift_rpt_66::Shift_rpt_66(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manual_input_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.output_value_)*/0} {}
struct Shift_rpt_66DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Shift_rpt_66DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Shift_rpt_66DefaultTypeInternal() {}
  union {
    Shift_rpt_66 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Shift_rpt_66DefaultTypeInternal _Shift_rpt_66_default_instance_;
PROTOBUF_CONSTEXPR Accel_cmd_67::Accel_cmd_67(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accel_cmd_)*/0} {}
struct Accel_cmd_67DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Accel_cmd_67DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Accel_cmd_67DefaultTypeInternal() {}
  union {
    Accel_cmd_67 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Accel_cmd_67DefaultTypeInternal _Accel_cmd_67_default_instance_;
PROTOBUF_CONSTEXPR Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.longitude_seconds_)*/0
  , /*decltype(_impl_.longitude_minutes_)*/0
  , /*decltype(_impl_.longitude_degrees_)*/0
  , /*decltype(_impl_.latitude_seconds_)*/0
  , /*decltype(_impl_.latitude_minutes_)*/0
  , /*decltype(_impl_.latitude_degrees_)*/0} {}
struct Lat_lon_heading_rpt_82DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Lat_lon_heading_rpt_82DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Lat_lon_heading_rpt_82DefaultTypeInternal() {}
  union {
    Lat_lon_heading_rpt_82 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Lat_lon_heading_rpt_82DefaultTypeInternal _Lat_lon_heading_rpt_82_default_instance_;
PROTOBUF_CONSTEXPR Global_cmd_69::Global_cmd_69(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pacmod_enable_)*/0
  , /*decltype(_impl_.clear_override_)*/0
  , /*decltype(_impl_.ignore_override_)*/0} {}
struct Global_cmd_69DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Global_cmd_69DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Global_cmd_69DefaultTypeInternal() {}
  union {
    Global_cmd_69 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Global_cmd_69DefaultTypeInternal _Global_cmd_69_default_instance_;
PROTOBUF_CONSTEXPR Parking_brake_status_rpt_80::Parking_brake_status_rpt_80(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parking_brake_enabled_)*/0} {}
struct Parking_brake_status_rpt_80DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Parking_brake_status_rpt_80DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Parking_brake_status_rpt_80DefaultTypeInternal() {}
  union {
    Parking_brake_status_rpt_80 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Parking_brake_status_rpt_80DefaultTypeInternal _Parking_brake_status_rpt_80_default_instance_;
PROTOBUF_CONSTEXPR Yaw_rate_rpt_81::Yaw_rate_rpt_81(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.yaw_rate_)*/0} {}
struct Yaw_rate_rpt_81DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Yaw_rate_rpt_81DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Yaw_rate_rpt_81DefaultTypeInternal() {}
  union {
    Yaw_rate_rpt_81 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Yaw_rate_rpt_81DefaultTypeInternal _Yaw_rate_rpt_81_default_instance_;
PROTOBUF_CONSTEXPR Horn_rpt_79::Horn_rpt_79(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0} {}
struct Horn_rpt_79DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Horn_rpt_79DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Horn_rpt_79DefaultTypeInternal() {}
  union {
    Horn_rpt_79 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Horn_rpt_79DefaultTypeInternal _Horn_rpt_79_default_instance_;
PROTOBUF_CONSTEXPR Horn_cmd_78::Horn_cmd_78(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.horn_cmd_)*/0} {}
struct Horn_cmd_78DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Horn_cmd_78DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Horn_cmd_78DefaultTypeInternal() {}
  union {
    Horn_cmd_78 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Horn_cmd_78DefaultTypeInternal _Horn_cmd_78_default_instance_;
PROTOBUF_CONSTEXPR Wiper_rpt_91::Wiper_rpt_91(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_value_)*/0
  , /*decltype(_impl_.commanded_value_)*/0
  , /*decltype(_impl_.manual_input_)*/0} {}
struct Wiper_rpt_91DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wiper_rpt_91DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wiper_rpt_91DefaultTypeInternal() {}
  union {
    Wiper_rpt_91 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wiper_rpt_91DefaultTypeInternal _Wiper_rpt_91_default_instance_;
PROTOBUF_CONSTEXPR Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_speed_)*/0
  , /*decltype(_impl_.vehicle_speed_valid_)*/0} {}
struct Vehicle_speed_rpt_6fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vehicle_speed_rpt_6fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vehicle_speed_rpt_6fDefaultTypeInternal() {}
  union {
    Vehicle_speed_rpt_6f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vehicle_speed_rpt_6fDefaultTypeInternal _Vehicle_speed_rpt_6f_default_instance_;
PROTOBUF_CONSTEXPR Headlight_cmd_76::Headlight_cmd_76(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headlight_cmd_)*/0} {}
struct Headlight_cmd_76DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Headlight_cmd_76DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Headlight_cmd_76DefaultTypeInternal() {}
  union {
    Headlight_cmd_76 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Headlight_cmd_76DefaultTypeInternal _Headlight_cmd_76_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_2_74::Steering_motor_rpt_2_74(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encoder_temperature_)*/0
  , /*decltype(_impl_.motor_temperature_)*/0
  , /*decltype(_impl_.angular_speed_)*/0} {}
struct Steering_motor_rpt_2_74DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_2_74DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_2_74DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_2_74 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_2_74DefaultTypeInternal _Steering_motor_rpt_2_74_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_2_71::Brake_motor_rpt_2_71(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encoder_temperature_)*/0
  , /*decltype(_impl_.motor_temperature_)*/0
  , /*decltype(_impl_.angular_speed_)*/0} {}
struct Brake_motor_rpt_2_71DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_2_71DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_2_71DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_2_71 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_2_71DefaultTypeInternal _Brake_motor_rpt_2_71_default_instance_;
PROTOBUF_CONSTEXPR Steering_motor_rpt_1_73::Steering_motor_rpt_1_73(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motor_current_)*/0
  , /*decltype(_impl_.shaft_position_)*/0} {}
struct Steering_motor_rpt_1_73DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Steering_motor_rpt_1_73DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Steering_motor_rpt_1_73DefaultTypeInternal() {}
  union {
    Steering_motor_rpt_1_73 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Steering_motor_rpt_1_73DefaultTypeInternal _Steering_motor_rpt_1_73_default_instance_;
PROTOBUF_CONSTEXPR Wiper_cmd_90::Wiper_cmd_90(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wiper_cmd_)*/0} {}
struct Wiper_cmd_90DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wiper_cmd_90DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wiper_cmd_90DefaultTypeInternal() {}
  union {
    Wiper_cmd_90 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wiper_cmd_90DefaultTypeInternal _Wiper_cmd_90_default_instance_;
PROTOBUF_CONSTEXPR Brake_motor_rpt_3_72::Brake_motor_rpt_3_72(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.torque_output_)*/0
  , /*decltype(_impl_.torque_input_)*/0} {}
struct Brake_motor_rpt_3_72DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Brake_motor_rpt_3_72DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Brake_motor_rpt_3_72DefaultTypeInternal() {}
  union {
    Brake_motor_rpt_3_72 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Brake_motor_rpt_3_72DefaultTypeInternal _Brake_motor_rpt_3_72_default_instance_;
PROTOBUF_CONSTEXPR Gem::Gem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.global_rpt_6a_)*/nullptr
  , /*decltype(_impl_.brake_cmd_6b_)*/nullptr
  , /*decltype(_impl_.brake_rpt_6c_)*/nullptr
  , /*decltype(_impl_.steering_cmd_6d_)*/nullptr
  , /*decltype(_impl_.steering_rpt_1_6e_)*/nullptr
  , /*decltype(_impl_.wheel_speed_rpt_7a_)*/nullptr
  , /*decltype(_impl_.date_time_rpt_83_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_1_70_)*/nullptr
  , /*decltype(_impl_.headlight_rpt_77_)*/nullptr
  , /*decltype(_impl_.accel_rpt_68_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_3_75_)*/nullptr
  , /*decltype(_impl_.turn_cmd_63_)*/nullptr
  , /*decltype(_impl_.turn_rpt_64_)*/nullptr
  , /*decltype(_impl_.shift_cmd_65_)*/nullptr
  , /*decltype(_impl_.shift_rpt_66_)*/nullptr
  , /*decltype(_impl_.accel_cmd_67_)*/nullptr
  , /*decltype(_impl_.lat_lon_heading_rpt_82_)*/nullptr
  , /*decltype(_impl_.global_cmd_69_)*/nullptr
  , /*decltype(_impl_.parking_brake_status_rpt_80_)*/nullptr
  , /*decltype(_impl_.yaw_rate_rpt_81_)*/nullptr
  , /*decltype(_impl_.horn_rpt_79_)*/nullptr
  , /*decltype(_impl_.horn_cmd_78_)*/nullptr
  , /*decltype(_impl_.wiper_rpt_91_)*/nullptr
  , /*decltype(_impl_.vehicle_speed_rpt_6f_)*/nullptr
  , /*decltype(_impl_.headlight_cmd_76_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_2_74_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_2_71_)*/nullptr
  , /*decltype(_impl_.steering_motor_rpt_1_73_)*/nullptr
  , /*decltype(_impl_.wiper_cmd_90_)*/nullptr
  , /*decltype(_impl_.brake_motor_rpt_3_72_)*/nullptr} {}
struct GemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GemDefaultTypeInternal() {}
  union {
    Gem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GemDefaultTypeInternal _Gem_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[46];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[41];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.car_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.basic_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.safety_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.ems_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.esp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.epb_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.vehicle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.eps_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.light_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.battery_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.check_response_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.surround_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.gem_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _impl_.ch_),
  18,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_eps_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_epb_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_esp_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_vtog_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_scu_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_switch_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _impl_.is_vcu_online_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _impl_.battery_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _impl_.fuel_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.turn_light_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.beam_lamp_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.is_brake_lamp_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.is_auto_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.wiper_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.lotion_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.is_horn_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.lincoln_lamp_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.lincoln_wiper_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _impl_.lincoln_ambient_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.is_eps_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.eps_control_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.eps_driver_hand_torq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.is_steering_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.steering_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.steering_angle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.is_trimming_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.is_calibration_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.is_failure_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.allow_enter_autonomous_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.current_driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.steering_angle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.epas_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.steering_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.calibration_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.timestamp_65_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _impl_.build_number_),
  2,
  1,
  0,
  3,
  6,
  7,
  4,
  5,
  13,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_vehicle_standstill_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_vehicle_spd_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.vehicle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_wheel_spd_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_direction_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_spd_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_wheel_spd_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_direction_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_spd_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_wheel_spd_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_direction_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_spd_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_wheel_spd_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_direction_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.wheel_spd_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_yaw_rate_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.yaw_rate_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_ax_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.ax_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.ax_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.is_ay_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.ay_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.ay_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.lat_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.long_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.vert_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.roll_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.acc_est_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _impl_.timestamp_sec_),
  1,
  2,
  0,
  3,
  5,
  6,
  4,
  8,
  7,
  12,
  9,
  10,
  13,
  11,
  16,
  14,
  17,
  18,
  15,
  19,
  20,
  29,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.is_deceleration_available_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.is_deceleration_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.is_evb_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.evb_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _impl_.brake_pressure_spd_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.is_brake_pedal_pressed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.is_brake_force_exist_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.is_brake_over_heat_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.is_hand_brake_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_pedal_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.is_brake_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.boo_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.boo_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.boo_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.watchdog_applying_brakes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.watchdog_source_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.boo_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_torque_req_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.hsa_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.brake_torque_act_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.hsa_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.wheel_torque_act_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _impl_.build_number_),
  1,
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  11,
  6,
  7,
  8,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  24,
  23,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _impl_.is_epb_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _impl_.is_epb_released_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _impl_.epb_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _impl_.parking_brake_status_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.is_gas_pedal_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.is_gas_pedal_pressed_more_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.gas_pedal_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.is_gas_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.throttle_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.throttle_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.watchdog_source_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.throttle_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.accelerator_pedal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.accelerator_pedal_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _impl_.build_number_),
  1,
  2,
  0,
  3,
  6,
  7,
  8,
  5,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_esp_acc_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_esp_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_esp_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_abs_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_abs_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_tcsvdc_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_abs_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_stab_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_stab_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_trac_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _impl_.is_trac_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.is_engine_acc_available_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.is_engine_acc_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.engine_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.max_engine_torq_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.min_engine_torq_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.base_engine_torq_constant_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.is_engine_speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.engine_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.engine_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.is_over_engine_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _impl_.engine_rpm_),
  2,
  3,
  1,
  0,
  6,
  7,
  4,
  9,
  8,
  5,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_.is_shift_position_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_.gear_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_.driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_.gear_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _impl_.canbus_fault_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_driver_car_door_close_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_driver_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.emergency_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.has_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_motor_invertor_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_system_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_power_battery_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_motor_invertor_over_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_small_battery_charge_discharge_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_passenger_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_rearleft_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_rearright_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_hood_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_trunk_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_passenger_detected_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_passenger_airbag_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.is_passenger_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.front_left_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.front_right_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.rear_left_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.rear_right_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _impl_.car_driving_mode_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_auto_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.power_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_air_bag_deployed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.odo_meter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.drive_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_system_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_human_interrupt_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_on_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_off_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_res_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_cancel_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_on_off_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_res_cancel_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_inc_spd_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_dec_spd_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_inc_gap_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.acc_dec_gap_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.lka_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.canbus_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.gps_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.hours_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.compass_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.is_inferred_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.altitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.vdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.num_satellites_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _impl_.gps_speed_),
  1,
  0,
  2,
  5,
  6,
  3,
  4,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  20,
  21,
  27,
  19,
  22,
  23,
  24,
  25,
  26,
  30,
  31,
  28,
  29,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.pacmod_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.override_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.veh_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.str_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.brk_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.usr_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _impl_.usr_can_read_errors_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _impl_.brake_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _impl_.brake_on_off_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _impl_.position_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _impl_.speed_limit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _impl_.output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _impl_.wheel_spd_rear_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _impl_.wheel_spd_rear_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _impl_.wheel_spd_front_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _impl_.wheel_spd_front_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.time_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.time_minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.time_hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.date_day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.date_month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _impl_.date_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _impl_.motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _impl_.shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _impl_.commanded_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _impl_.output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _impl_.torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _impl_.torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _impl_.turn_signal_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _impl_.output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _impl_.shift_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _impl_.manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _impl_.output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _impl_.accel_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.longitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.longitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.longitude_degrees_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.latitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.latitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _impl_.latitude_degrees_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _impl_.pacmod_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _impl_.clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _impl_.ignore_override_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _impl_.parking_brake_enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _impl_.yaw_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _impl_.manual_input_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _impl_.horn_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _impl_.output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _impl_.commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _impl_.manual_input_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _impl_.vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _impl_.vehicle_speed_valid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _impl_.headlight_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _impl_.encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _impl_.motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _impl_.angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _impl_.encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _impl_.motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _impl_.angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _impl_.motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _impl_.shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _impl_.wiper_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _impl_.torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _impl_.torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.global_rpt_6a_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.brake_cmd_6b_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.brake_rpt_6c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.steering_cmd_6d_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.steering_rpt_1_6e_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.wheel_speed_rpt_7a_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.date_time_rpt_83_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.brake_motor_rpt_1_70_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.headlight_rpt_77_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.accel_rpt_68_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.steering_motor_rpt_3_75_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.turn_cmd_63_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.turn_rpt_64_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.shift_cmd_65_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.shift_rpt_66_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.accel_cmd_67_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.lat_lon_heading_rpt_82_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.global_cmd_69_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.parking_brake_status_rpt_80_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.yaw_rate_rpt_81_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.horn_rpt_79_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.horn_cmd_78_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.wiper_rpt_91_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.vehicle_speed_rpt_6f_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.headlight_cmd_76_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.steering_motor_rpt_2_74_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.brake_motor_rpt_2_71_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.steering_motor_rpt_1_73_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.wiper_cmd_90_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _impl_.brake_motor_rpt_3_72_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, -1, sizeof(::apollo::canbus::ChassisDetail)},
  { 44, 57, -1, sizeof(::apollo::canbus::CheckResponseSignal)},
  { 64, 72, -1, sizeof(::apollo::canbus::Battery)},
  { 74, 90, -1, sizeof(::apollo::canbus::Light)},
  { 100, 132, -1, sizeof(::apollo::canbus::Eps)},
  { 158, 194, -1, sizeof(::apollo::canbus::VehicleSpd)},
  { 224, 237, -1, sizeof(::apollo::canbus::Deceleration)},
  { 244, 280, -1, sizeof(::apollo::canbus::Brake)},
  { 310, 320, -1, sizeof(::apollo::canbus::Epb)},
  { 324, 350, -1, sizeof(::apollo::canbus::Gas)},
  { 370, 387, -1, sizeof(::apollo::canbus::Esp)},
  { 398, 415, -1, sizeof(::apollo::canbus::Ems)},
  { 426, 437, -1, sizeof(::apollo::canbus::Gear)},
  { 442, 471, -1, sizeof(::apollo::canbus::Safety)},
  { 494, 539, -1, sizeof(::apollo::canbus::BasicInfo)},
  { 578, 591, -1, sizeof(::apollo::canbus::Global_rpt_6a)},
  { 598, 605, -1, sizeof(::apollo::canbus::Brake_cmd_6b)},
  { 606, 616, -1, sizeof(::apollo::canbus::Brake_rpt_6c)},
  { 620, 628, -1, sizeof(::apollo::canbus::Steering_cmd_6d)},
  { 630, 639, -1, sizeof(::apollo::canbus::Steering_rpt_1_6e)},
  { 642, 652, -1, sizeof(::apollo::canbus::Wheel_speed_rpt_7a)},
  { 656, 668, -1, sizeof(::apollo::canbus::Date_time_rpt_83)},
  { 674, 682, -1, sizeof(::apollo::canbus::Brake_motor_rpt_1_70)},
  { 684, 693, -1, sizeof(::apollo::canbus::Headlight_rpt_77)},
  { 696, 705, -1, sizeof(::apollo::canbus::Accel_rpt_68)},
  { 708, 716, -1, sizeof(::apollo::canbus::Steering_motor_rpt_3_75)},
  { 718, 725, -1, sizeof(::apollo::canbus::Turn_cmd_63)},
  { 726, 735, -1, sizeof(::apollo::canbus::Turn_rpt_64)},
  { 738, 745, -1, sizeof(::apollo::canbus::Shift_cmd_65)},
  { 746, 755, -1, sizeof(::apollo::canbus::Shift_rpt_66)},
  { 758, 765, -1, sizeof(::apollo::canbus::Accel_cmd_67)},
  { 766, 779, -1, sizeof(::apollo::canbus::Lat_lon_heading_rpt_82)},
  { 786, 795, -1, sizeof(::apollo::canbus::Global_cmd_69)},
  { 798, 805, -1, sizeof(::apollo::canbus::Parking_brake_status_rpt_80)},
  { 806, 813, -1, sizeof(::apollo::canbus::Yaw_rate_rpt_81)},
  { 814, 823, -1, sizeof(::apollo::canbus::Horn_rpt_79)},
  { 826, 833, -1, sizeof(::apollo::canbus::Horn_cmd_78)},
  { 834, 843, -1, sizeof(::apollo::canbus::Wiper_rpt_91)},
  { 846, 854, -1, sizeof(::apollo::canbus::Vehicle_speed_rpt_6f)},
  { 856, 863, -1, sizeof(::apollo::canbus::Headlight_cmd_76)},
  { 864, 873, -1, sizeof(::apollo::canbus::Steering_motor_rpt_2_74)},
  { 876, 885, -1, sizeof(::apollo::canbus::Brake_motor_rpt_2_71)},
  { 888, 896, -1, sizeof(::apollo::canbus::Steering_motor_rpt_1_73)},
  { 898, 905, -1, sizeof(::apollo::canbus::Wiper_cmd_90)},
  { 906, 914, -1, sizeof(::apollo::canbus::Brake_motor_rpt_3_72)},
  { 916, 952, -1, sizeof(::apollo::canbus::Gem)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::canbus::_ChassisDetail_default_instance_._instance,
  &::apollo::canbus::_CheckResponseSignal_default_instance_._instance,
  &::apollo::canbus::_Battery_default_instance_._instance,
  &::apollo::canbus::_Light_default_instance_._instance,
  &::apollo::canbus::_Eps_default_instance_._instance,
  &::apollo::canbus::_VehicleSpd_default_instance_._instance,
  &::apollo::canbus::_Deceleration_default_instance_._instance,
  &::apollo::canbus::_Brake_default_instance_._instance,
  &::apollo::canbus::_Epb_default_instance_._instance,
  &::apollo::canbus::_Gas_default_instance_._instance,
  &::apollo::canbus::_Esp_default_instance_._instance,
  &::apollo::canbus::_Ems_default_instance_._instance,
  &::apollo::canbus::_Gear_default_instance_._instance,
  &::apollo::canbus::_Safety_default_instance_._instance,
  &::apollo::canbus::_BasicInfo_default_instance_._instance,
  &::apollo::canbus::_Global_rpt_6a_default_instance_._instance,
  &::apollo::canbus::_Brake_cmd_6b_default_instance_._instance,
  &::apollo::canbus::_Brake_rpt_6c_default_instance_._instance,
  &::apollo::canbus::_Steering_cmd_6d_default_instance_._instance,
  &::apollo::canbus::_Steering_rpt_1_6e_default_instance_._instance,
  &::apollo::canbus::_Wheel_speed_rpt_7a_default_instance_._instance,
  &::apollo::canbus::_Date_time_rpt_83_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_1_70_default_instance_._instance,
  &::apollo::canbus::_Headlight_rpt_77_default_instance_._instance,
  &::apollo::canbus::_Accel_rpt_68_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_3_75_default_instance_._instance,
  &::apollo::canbus::_Turn_cmd_63_default_instance_._instance,
  &::apollo::canbus::_Turn_rpt_64_default_instance_._instance,
  &::apollo::canbus::_Shift_cmd_65_default_instance_._instance,
  &::apollo::canbus::_Shift_rpt_66_default_instance_._instance,
  &::apollo::canbus::_Accel_cmd_67_default_instance_._instance,
  &::apollo::canbus::_Lat_lon_heading_rpt_82_default_instance_._instance,
  &::apollo::canbus::_Global_cmd_69_default_instance_._instance,
  &::apollo::canbus::_Parking_brake_status_rpt_80_default_instance_._instance,
  &::apollo::canbus::_Yaw_rate_rpt_81_default_instance_._instance,
  &::apollo::canbus::_Horn_rpt_79_default_instance_._instance,
  &::apollo::canbus::_Horn_cmd_78_default_instance_._instance,
  &::apollo::canbus::_Wiper_rpt_91_default_instance_._instance,
  &::apollo::canbus::_Vehicle_speed_rpt_6f_default_instance_._instance,
  &::apollo::canbus::_Headlight_cmd_76_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_2_74_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_2_71_default_instance_._instance,
  &::apollo::canbus::_Steering_motor_rpt_1_73_default_instance_._instance,
  &::apollo::canbus::_Wiper_cmd_90_default_instance_._instance,
  &::apollo::canbus::_Brake_motor_rpt_3_72_default_instance_._instance,
  &::apollo::canbus::_Gem_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/canbus/proto/chassis_detail.pr"
  "oto\022\rapollo.canbus\032\"modules/canbus/proto"
  "/chassis.proto\032\035modules/canbus/proto/ch."
  "proto\"\261\006\n\rChassisDetail\0223\n\010car_type\030\001 \001("
  "\0162!.apollo.canbus.ChassisDetail.Type\022\'\n\005"
  "basic\030\002 \001(\0132\030.apollo.canbus.BasicInfo\022%\n"
  "\006safety\030\003 \001(\0132\025.apollo.canbus.Safety\022!\n\004"
  "gear\030\004 \001(\0132\023.apollo.canbus.Gear\022\037\n\003ems\030\005"
  " \001(\0132\022.apollo.canbus.Ems\022\037\n\003esp\030\006 \001(\0132\022."
  "apollo.canbus.Esp\022\037\n\003gas\030\007 \001(\0132\022.apollo."
  "canbus.Gas\022\037\n\003epb\030\010 \001(\0132\022.apollo.canbus."
  "Epb\022#\n\005brake\030\t \001(\0132\024.apollo.canbus.Brake"
  "\0221\n\014deceleration\030\n \001(\0132\033.apollo.canbus.D"
  "eceleration\022.\n\013vehicle_spd\030\013 \001(\0132\031.apoll"
  "o.canbus.VehicleSpd\022\037\n\003eps\030\014 \001(\0132\022.apoll"
  "o.canbus.Eps\022#\n\005light\030\r \001(\0132\024.apollo.can"
  "bus.Light\022\'\n\007battery\030\016 \001(\0132\026.apollo.canb"
  "us.Battery\022:\n\016check_response\030\017 \001(\0132\".apo"
  "llo.canbus.CheckResponseSignal\022\'\n\007licens"
  "e\030\020 \001(\0132\026.apollo.canbus.License\022)\n\010surro"
  "und\030\021 \001(\0132\027.apollo.canbus.Surround\022\037\n\003ge"
  "m\030\022 \001(\0132\022.apollo.canbus.Gem\022\035\n\002ch\030\023 \001(\0132"
  "\021.apollo.canbus.Ch\"-\n\004Type\022\017\n\013QIRUI_EQ_1"
  "5\020\000\022\024\n\020CHANGAN_RUICHENG\020\001\"\353\001\n\023CheckRespo"
  "nseSignal\022\034\n\ris_eps_online\030\001 \001(\010:\005false\022"
  "\034\n\ris_epb_online\030\002 \001(\010:\005false\022\034\n\ris_esp_"
  "online\030\003 \001(\010:\005false\022\035\n\016is_vtog_online\030\004 "
  "\001(\010:\005false\022\034\n\ris_scu_online\030\005 \001(\010:\005false"
  "\022\037\n\020is_switch_online\030\006 \001(\010:\005false\022\034\n\ris_"
  "vcu_online\030\007 \001(\010:\005false\"6\n\007Battery\022\027\n\017ba"
  "ttery_percent\030\001 \001(\001\022\022\n\nfuel_level\030\002 \001(\001\""
  "\261\t\n\005Light\022;\n\017turn_light_type\030\001 \001(\0162\".apo"
  "llo.canbus.Light.TurnLightType\0229\n\016beam_l"
  "amp_type\030\002 \001(\0162!.apollo.canbus.Light.Bea"
  "mLampType\022\030\n\020is_brake_lamp_on\030\003 \001(\010\022\025\n\ri"
  "s_auto_light\030\004 \001(\010\022\022\n\nwiper_gear\030\005 \001(\005\022\023"
  "\n\013lotion_gear\030\006 \001(\005\022\022\n\nis_horn_on\030\007 \001(\010\022"
  "\?\n\021lincoln_lamp_type\030\010 \001(\0162$.apollo.canb"
  "us.Light.LincolnLampType\022<\n\rlincoln_wipe"
  "r\030\t \001(\0162%.apollo.canbus.Light.LincolnWip"
  "erType\022@\n\017lincoln_ambient\030\n \001(\0162\'.apollo"
  ".canbus.Light.LincolnAmbientType\"[\n\rTurn"
  "LightType\022\022\n\016TURN_LIGHT_OFF\020\000\022\020\n\014TURN_LE"
  "FT_ON\020\001\022\021\n\rTURN_RIGHT_ON\020\002\022\021\n\rTURN_LIGHT"
  "_ON\020\003\"\?\n\014BeamLampType\022\014\n\010BEAM_OFF\020\000\022\020\n\014H"
  "IGH_BEAM_ON\020\001\022\017\n\013LOW_BEAM_ON\020\002\"Y\n\017Lincol"
  "nLampType\022\r\n\tBEAM_NULL\020\000\022\026\n\022BEAM_FLASH_T"
  "O_PASS\020\001\022\r\n\tBEAM_HIGH\020\002\022\020\n\014BEAM_INVALID\020"
  "\003\"\334\002\n\020LincolnWiperType\022\r\n\tWIPER_OFF\020\000\022\022\n"
  "\016WIPER_AUTO_OFF\020\001\022\024\n\020WIPER_OFF_MOVING\020\002\022"
  "\024\n\020WIPER_MANUAL_OFF\020\003\022\023\n\017WIPER_MANUAL_ON"
  "\020\004\022\024\n\020WIPER_MANUAL_LOW\020\005\022\025\n\021WIPER_MANUAL"
  "_HIGH\020\006\022\024\n\020WIPER_MIST_FLICK\020\007\022\016\n\nWIPER_W"
  "ASH\020\010\022\022\n\016WIPER_AUTO_LOW\020\t\022\023\n\017WIPER_AUTO_"
  "HIGH\020\n\022\027\n\023WIPER_COURTESY_WIPE\020\013\022\025\n\021WIPER"
  "_AUTO_ADJUST\020\014\022\022\n\016WIPER_RESERVED\020\r\022\021\n\rWI"
  "PER_STALLED\020\016\022\021\n\rWIPER_NO_DATA\020\017\"\250\001\n\022Lin"
  "colnAmbientType\022\020\n\014AMBIENT_DARK\020\000\022\021\n\rAMB"
  "IENT_LIGHT\020\001\022\024\n\020AMBIENT_TWILIGHT\020\002\022\025\n\021AM"
  "BIENT_TUNNEL_ON\020\003\022\026\n\022AMBIENT_TUNNEL_OFF\020"
  "\004\022\023\n\017AMBIENT_INVALID\020\005\022\023\n\017AMBIENT_NO_DAT"
  "A\020\007\"\205\006\n\003Eps\022\023\n\013is_eps_fail\030\001 \001(\010\0222\n\021eps_"
  "control_state\030\002 \001(\0162\027.apollo.canbus.Eps."
  "Type\022\034\n\024eps_driver_hand_torq\030\003 \001(\001\022\037\n\027is"
  "_steering_angle_valid\030\004 \001(\010\022\026\n\016steering_"
  "angle\030\005 \001(\001\022\032\n\022steering_angle_spd\030\006 \001(\001\022"
  "\032\n\022is_trimming_status\030\007 \001(\010\022\035\n\025is_calibr"
  "ation_status\030\010 \001(\010\022\031\n\021is_failure_status\030"
  "\t \001(\010\022#\n\033allow_enter_autonomous_mode\030\n \001"
  "(\005\022\034\n\024current_driving_mode\030\013 \001(\005\022\032\n\022stee"
  "ring_angle_cmd\030\014 \001(\001\022\025\n\rvehicle_speed\030\r "
  "\001(\001\022\023\n\013epas_torque\030\016 \001(\001\022\030\n\020steering_ena"
  "bled\030\017 \001(\010\022\027\n\017driver_override\030\020 \001(\010\022\027\n\017d"
  "river_activity\030\021 \001(\010\022\026\n\016watchdog_fault\030\022"
  " \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027\n\017channel"
  "_2_fault\030\024 \001(\010\022\031\n\021calibration_fault\030\025 \001("
  "\010\022\027\n\017connector_fault\030\026 \001(\010\022\024\n\014timestamp_"
  "65\030\027 \001(\001\022\025\n\rmajor_version\030\030 \001(\005\022\025\n\rminor"
  "_version\030\031 \001(\005\022\024\n\014build_number\030\032 \001(\005\"=\n\004"
  "Type\022\021\n\rNOT_AVAILABLE\020\000\022\t\n\005READY\020\001\022\n\n\006AC"
  "TIVE\020\002\022\013\n\007INVALID\020\003\"\353\006\n\nVehicleSpd\022\035\n\025is"
  "_vehicle_standstill\030\001 \001(\010\022\034\n\024is_vehicle_"
  "spd_valid\030\002 \001(\010\022\026\n\013vehicle_spd\030\003 \001(\001:\0010\022"
  "\035\n\025is_wheel_spd_rr_valid\030\004 \001(\010\022D\n\022wheel_"
  "direction_rr\030\005 \001(\0162(.apollo.canbus.Wheel"
  "Speed.WheelSpeedType\022\024\n\014wheel_spd_rr\030\006 \001"
  "(\001\022\035\n\025is_wheel_spd_rl_valid\030\007 \001(\010\022D\n\022whe"
  "el_direction_rl\030\010 \001(\0162(.apollo.canbus.Wh"
  "eelSpeed.WheelSpeedType\022\024\n\014wheel_spd_rl\030"
  "\t \001(\001\022\035\n\025is_wheel_spd_fr_valid\030\n \001(\010\022D\n\022"
  "wheel_direction_fr\030\013 \001(\0162(.apollo.canbus"
  ".WheelSpeed.WheelSpeedType\022\024\n\014wheel_spd_"
  "fr\030\014 \001(\001\022\035\n\025is_wheel_spd_fl_valid\030\r \001(\010\022"
  "D\n\022wheel_direction_fl\030\016 \001(\0162(.apollo.can"
  "bus.WheelSpeed.WheelSpeedType\022\024\n\014wheel_s"
  "pd_fl\030\017 \001(\001\022\031\n\021is_yaw_rate_valid\030\020 \001(\010\022\020"
  "\n\010yaw_rate\030\021 \001(\001\022\027\n\017yaw_rate_offset\030\022 \001("
  "\001\022\023\n\013is_ax_valid\030\023 \001(\010\022\n\n\002ax\030\024 \001(\001\022\021\n\tax"
  "_offset\030\025 \001(\001\022\023\n\013is_ay_valid\030\026 \001(\010\022\n\n\002ay"
  "\030\027 \001(\001\022\021\n\tay_offset\030\030 \001(\001\022\017\n\007lat_acc\030\031 \001"
  "(\001\022\020\n\010long_acc\030\032 \001(\001\022\020\n\010vert_acc\030\033 \001(\001\022\021"
  "\n\troll_rate\030\034 \001(\001\022\017\n\007acc_est\030\035 \001(\001\022\025\n\rti"
  "mestamp_sec\030\036 \001(\001\"\322\001\n\014Deceleration\022!\n\031is"
  "_deceleration_available\030\001 \001(\010\022\036\n\026is_dece"
  "leration_active\030\002 \001(\010\022\027\n\014deceleration\030\003 "
  "\001(\001:\0010\022\023\n\013is_evb_fail\030\004 \001(\001\022\027\n\014evb_press"
  "ure\030\005 \001(\001:\0010\022\031\n\016brake_pressure\030\006 \001(\001:\0010\022"
  "\035\n\022brake_pressure_spd\030\007 \001(\001:\0010\"\266\010\n\005Brake"
  "\022%\n\026is_brake_pedal_pressed\030\001 \001(\010:\005false\022"
  "\034\n\024is_brake_force_exist\030\002 \001(\010\022\032\n\022is_brak"
  "e_over_heat\030\003 \001(\010\022\030\n\020is_hand_brake_on\030\004 "
  "\001(\010\022\034\n\024brake_pedal_position\030\005 \001(\001\022\026\n\016is_"
  "brake_valid\030\006 \001(\010\022\023\n\013brake_input\030\007 \001(\001\022\021"
  "\n\tbrake_cmd\030\010 \001(\001\022\024\n\014brake_output\030\t \001(\001\022"
  "\021\n\tboo_input\030\n \001(\010\022\017\n\007boo_cmd\030\013 \001(\010\022\022\n\nb"
  "oo_output\030\014 \001(\010\022 \n\030watchdog_applying_bra"
  "kes\030\r \001(\010\022\027\n\017watchdog_source\030\016 \001(\005\022\025\n\rbr"
  "ake_enabled\030\017 \001(\010\022\027\n\017driver_override\030\020 \001"
  "(\010\022\027\n\017driver_activity\030\021 \001(\010\022\026\n\016watchdog_"
  "fault\030\022 \001(\010\022\027\n\017channel_1_fault\030\023 \001(\010\022\027\n\017"
  "channel_2_fault\030\024 \001(\010\022\021\n\tboo_fault\030\025 \001(\010"
  "\022\027\n\017connector_fault\030\026 \001(\010\022\030\n\020brake_torqu"
  "e_req\030\027 \001(\001\0226\n\nhsa_status\030\030 \001(\0162\".apollo"
  ".canbus.Brake.HSAStatusType\022\030\n\020brake_tor"
  "que_act\030\031 \001(\001\0222\n\010hsa_mode\030\032 \001(\0162 .apollo"
  ".canbus.Brake.HSAModeType\022\030\n\020wheel_torqu"
  "e_act\030\033 \001(\001\022\025\n\rmajor_version\030\034 \001(\005\022\025\n\rmi"
  "nor_version\030\035 \001(\005\022\024\n\014build_number\030\036 \001(\005\""
  "\273\001\n\rHSAStatusType\022\020\n\014HSA_INACTIVE\020\000\022\030\n\024H"
  "SA_FINDING_GRADIENT\020\001\022\026\n\022HSA_ACTIVE_PRES"
  "SED\020\002\022\027\n\023HSA_ACTIVE_RELEASED\020\003\022\024\n\020HSA_FA"
  "ST_RELEASE\020\004\022\024\n\020HSA_SLOW_RELEASE\020\005\022\016\n\nHS"
  "A_FAILED\020\006\022\021\n\rHSA_UNDEFINED\020\007\"P\n\013HSAMode"
  "Type\022\013\n\007HSA_OFF\020\000\022\014\n\010HSA_AUTO\020\001\022\016\n\nHSA_M"
  "ANUAL\020\002\022\026\n\022HSA_MODE_UNDEFINED\020\003\"\333\001\n\003Epb\022"
  "\024\n\014is_epb_error\030\001 \001(\010\022\027\n\017is_epb_released"
  "\030\002 \001(\010\022\022\n\nepb_status\030\003 \001(\005\022;\n\024parking_br"
  "ake_status\030\004 \001(\0162\035.apollo.canbus.Epb.PBr"
  "akeType\"T\n\nPBrakeType\022\016\n\nPBRAKE_OFF\020\000\022\025\n"
  "\021PBRAKE_TRANSITION\020\001\022\r\n\tPBRAKE_ON\020\002\022\020\n\014P"
  "BRAKE_FAULT\020\003\"\216\004\n\003Gas\022\032\n\022is_gas_pedal_er"
  "ror\030\001 \001(\010\022!\n\031is_gas_pedal_pressed_more\030\002"
  " \001(\010\022\035\n\022gas_pedal_position\030\003 \001(\001:\0010\022\033\n\014i"
  "s_gas_valid\030\004 \001(\010:\005false\022\026\n\016throttle_inp"
  "ut\030\005 \001(\001\022\024\n\014throttle_cmd\030\006 \001(\001\022\027\n\017thrott"
  "le_output\030\007 \001(\001\022\027\n\017watchdog_source\030\010 \001(\005"
  "\022\030\n\020throttle_enabled\030\t \001(\010\022\027\n\017driver_ove"
  "rride\030\n \001(\010\022\027\n\017driver_activity\030\013 \001(\010\022\026\n\016"
  "watchdog_fault\030\014 \001(\010\022\027\n\017channel_1_fault\030"
  "\r \001(\010\022\027\n\017channel_2_fault\030\016 \001(\010\022\027\n\017connec"
  "tor_fault\030\017 \001(\010\022\031\n\021accelerator_pedal\030\020 \001"
  "(\001\022\036\n\026accelerator_pedal_rate\030\021 \001(\001\022\025\n\rma"
  "jor_version\030\022 \001(\005\022\025\n\rminor_version\030\023 \001(\005"
  "\022\024\n\014build_number\030\024 \001(\005\"\210\002\n\003Esp\022\030\n\020is_esp"
  "_acc_error\030\001 \001(\010\022\021\n\tis_esp_on\030\002 \001(\010\022\025\n\ri"
  "s_esp_active\030\003 \001(\010\022\024\n\014is_abs_error\030\004 \001(\010"
  "\022\025\n\ris_abs_active\030\005 \001(\010\022\026\n\016is_tcsvdc_fai"
  "l\030\006 \001(\010\022\026\n\016is_abs_enabled\030\007 \001(\010\022\026\n\016is_st"
  "ab_active\030\010 \001(\010\022\027\n\017is_stab_enabled\030\t \001(\010"
  "\022\026\n\016is_trac_active\030\n \001(\010\022\027\n\017is_trac_enab"
  "led\030\013 \001(\010\"\215\003\n\003Ems\022\037\n\027is_engine_acc_avail"
  "able\030\001 \001(\010\022\033\n\023is_engine_acc_error\030\002 \001(\010\022"
  "-\n\014engine_state\030\003 \001(\0162\027.apollo.canbus.Em"
  "s.Type\022\037\n\027max_engine_torq_percent\030\004 \001(\001\022"
  "\037\n\027min_engine_torq_percent\030\005 \001(\001\022!\n\031base"
  "_engine_torq_constant\030\006 \001(\005\022\035\n\025is_engine"
  "_speed_error\030\007 \001(\010\022\024\n\014engine_speed\030\010 \001(\001"
  "\022\025\n\rengine_torque\030\t \001(\005\022\035\n\025is_over_engin"
  "e_torque\030\n \001(\010\022\022\n\nengine_rpm\030\013 \001(\001\"5\n\004Ty"
  "pe\022\010\n\004STOP\020\000\022\t\n\005CRANK\020\001\022\013\n\007RUNNING\020\002\022\013\n\007"
  "INVALID\020\003\"\306\001\n\004Gear\022\037\n\027is_shift_position_"
  "valid\030\001 \001(\010\0227\n\ngear_state\030\002 \001(\0162#.apollo"
  ".canbus.Chassis.GearPosition\022\027\n\017driver_o"
  "verride\030\003 \001(\010\0225\n\010gear_cmd\030\004 \001(\0162#.apollo"
  ".canbus.Chassis.GearPosition\022\024\n\014canbus_f"
  "ault\030\005 \001(\010\"\356\005\n\006Safety\022 \n\030is_driver_car_d"
  "oor_close\030\001 \001(\010\022\031\n\021is_driver_buckled\030\002 \001"
  "(\010\022\030\n\020emergency_button\030\003 \001(\005\022\030\n\thas_erro"
  "r\030\004 \001(\010:\005false\022\037\n\027is_motor_invertor_faul"
  "t\030\005 \001(\010\022\027\n\017is_system_fault\030\006 \001(\010\022\036\n\026is_p"
  "ower_battery_fault\030\007 \001(\010\022*\n\"is_motor_inv"
  "ertor_over_temperature\030\010 \001(\010\022/\n\'is_small"
  "_battery_charge_discharge_fault\030\t \001(\010\022\024\n"
  "\014driving_mode\030\n \001(\005\022\036\n\026is_passenger_door"
  "_open\030\013 \001(\010\022\035\n\025is_rearleft_door_open\030\014 \001"
  "(\010\022\036\n\026is_rearright_door_open\030\r \001(\010\022\024\n\014is"
  "_hood_open\030\016 \001(\010\022\025\n\ris_trunk_open\030\017 \001(\010\022"
  "\035\n\025is_passenger_detected\030\020 \001(\010\022#\n\033is_pas"
  "senger_airbag_enabled\030\021 \001(\010\022\034\n\024is_passen"
  "ger_buckled\030\022 \001(\010\022\035\n\025front_left_tire_pre"
  "ss\030\023 \001(\005\022\036\n\026front_right_tire_press\030\024 \001(\005"
  "\022\034\n\024rear_left_tire_press\030\025 \001(\005\022\035\n\025rear_r"
  "ight_tire_press\030\026 \001(\005\022<\n\020car_driving_mod"
  "e\030\027 \001(\0162\".apollo.canbus.Chassis.DrivingM"
  "ode\"\274\007\n\tBasicInfo\022\024\n\014is_auto_mode\030\001 \001(\010\022"
  "2\n\013power_state\030\002 \001(\0162\035.apollo.canbus.Bas"
  "icInfo.Type\022\033\n\023is_air_bag_deployed\030\003 \001(\010"
  "\022\021\n\todo_meter\030\004 \001(\001\022\023\n\013drive_range\030\005 \001(\001"
  "\022\027\n\017is_system_error\030\006 \001(\010\022\032\n\022is_human_in"
  "terrupt\030\007 \001(\010\022\025\n\racc_on_button\030\010 \001(\010\022\026\n\016"
  "acc_off_button\030\t \001(\010\022\026\n\016acc_res_button\030\n"
  " \001(\010\022\031\n\021acc_cancel_button\030\013 \001(\010\022\031\n\021acc_o"
  "n_off_button\030\014 \001(\010\022\035\n\025acc_res_cancel_but"
  "ton\030\r \001(\010\022\032\n\022acc_inc_spd_button\030\016 \001(\010\022\032\n"
  "\022acc_dec_spd_button\030\017 \001(\010\022\032\n\022acc_inc_gap"
  "_button\030\020 \001(\010\022\032\n\022acc_dec_gap_button\030\021 \001("
  "\010\022\022\n\nlka_button\030\022 \001(\010\022\024\n\014canbus_fault\030\023 "
  "\001(\010\022\020\n\010latitude\030\024 \001(\001\022\021\n\tlongitude\030\025 \001(\001"
  "\022\021\n\tgps_valid\030\026 \001(\010\022\014\n\004year\030\027 \001(\005\022\r\n\005mon"
  "th\030\030 \001(\005\022\013\n\003day\030\031 \001(\005\022\r\n\005hours\030\032 \001(\005\022\017\n\007"
  "minutes\030\033 \001(\005\022\017\n\007seconds\030\034 \001(\005\022\031\n\021compas"
  "s_direction\030\035 \001(\001\022\014\n\004pdop\030\036 \001(\001\022\024\n\014is_gp"
  "s_fault\030\037 \001(\010\022\023\n\013is_inferred\030  \001(\010\022\020\n\010al"
  "titude\030! \001(\001\022\017\n\007heading\030\" \001(\001\022\014\n\004hdop\030# "
  "\001(\001\022\014\n\004vdop\030$ \001(\001\022*\n\007quality\030% \001(\0162\031.apo"
  "llo.canbus.GpsQuality\022\026\n\016num_satellites\030"
  "& \001(\005\022\021\n\tgps_speed\030\' \001(\001\"8\n\004Type\022\007\n\003OFF\020"
  "\000\022\007\n\003ACC\020\001\022\006\n\002ON\020\002\022\t\n\005START\020\003\022\013\n\007INVALID"
  "\020\004\"\365\004\n\rGlobal_rpt_6a\022E\n\rpacmod_status\030\001 "
  "\001(\0162..apollo.canbus.Global_rpt_6a.Pacmod"
  "_statusType\022I\n\017override_status\030\002 \001(\01620.a"
  "pollo.canbus.Global_rpt_6a.Override_stat"
  "usType\022\027\n\017veh_can_timeout\030\003 \001(\010\022\027\n\017str_c"
  "an_timeout\030\004 \001(\010\022I\n\017brk_can_timeout\030\005 \001("
  "\01620.apollo.canbus.Global_rpt_6a.Brk_can_"
  "timeoutType\022\027\n\017usr_can_timeout\030\006 \001(\010\022\033\n\023"
  "usr_can_read_errors\030\007 \001(\005\"Z\n\021Pacmod_stat"
  "usType\022\"\n\036PACMOD_STATUS_CONTROL_DISABLED"
  "\020\000\022!\n\035PACMOD_STATUS_CONTROL_ENABLED\020\001\"Y\n"
  "\023Override_statusType\022\"\n\036OVERRIDE_STATUS_"
  "NOT_OVERRIDDEN\020\000\022\036\n\032OVERRIDE_STATUS_OVER"
  "RIDDEN\020\001\"h\n\023Brk_can_timeoutType\022)\n%BRK_C"
  "AN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT\020\000\022&\n\"BR"
  "K_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT\020\001\"!\n\014Br"
  "ake_cmd_6b\022\021\n\tbrake_cmd\030\001 \001(\001\"\326\001\n\014Brake_"
  "rpt_6c\022\024\n\014manual_input\030\001 \001(\001\022\027\n\017commande"
  "d_value\030\002 \001(\001\022\024\n\014output_value\030\003 \001(\001\022B\n\014b"
  "rake_on_off\030\004 \001(\0162,.apollo.canbus.Brake_"
  "rpt_6c.Brake_on_offType\"=\n\020Brake_on_offT"
  "ype\022\024\n\020BRAKE_ON_OFF_OFF\020\000\022\023\n\017BRAKE_ON_OF"
  "F_ON\020\001\">\n\017Steering_cmd_6d\022\026\n\016position_va"
  "lue\030\001 \001(\001\022\023\n\013speed_limit\030\002 \001(\001\"X\n\021Steeri"
  "ng_rpt_1_6e\022\024\n\014manual_input\030\001 \001(\001\022\027\n\017com"
  "manded_value\030\002 \001(\001\022\024\n\014output_value\030\003 \001(\001"
  "\"\214\001\n\022Wheel_speed_rpt_7a\022\034\n\024wheel_spd_rea"
  "r_right\030\001 \001(\005\022\033\n\023wheel_spd_rear_left\030\002 \001"
  "(\005\022\035\n\025wheel_spd_front_right\030\003 \001(\005\022\034\n\024whe"
  "el_spd_front_left\030\004 \001(\005\"\210\001\n\020Date_time_rp"
  "t_83\022\023\n\013time_second\030\001 \001(\005\022\023\n\013time_minute"
  "\030\002 \001(\005\022\021\n\ttime_hour\030\003 \001(\005\022\020\n\010date_day\030\004 "
  "\001(\005\022\022\n\ndate_month\030\005 \001(\005\022\021\n\tdate_year\030\006 \001"
  "(\005\"E\n\024Brake_motor_rpt_1_70\022\025\n\rmotor_curr"
  "ent\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001\"\306\004\n\020He"
  "adlight_rpt_77\022F\n\014output_value\030\001 \001(\01620.a"
  "pollo.canbus.Headlight_rpt_77.Output_val"
  "ueType\022F\n\014manual_input\030\002 \001(\01620.apollo.ca"
  "nbus.Headlight_rpt_77.Manual_inputType\022L"
  "\n\017commanded_value\030\003 \001(\01623.apollo.canbus."
  "Headlight_rpt_77.Commanded_valueType\"l\n\020"
  "Output_valueType\022\037\n\033OUTPUT_VALUE_HEADLIG"
  "HTS_OFF\020\000\022\032\n\026OUTPUT_VALUE_LOW_BEAMS\020\001\022\033\n"
  "\027OUTPUT_VALUE_HIGH_BEAMS\020\002\"l\n\020Manual_inp"
  "utType\022\037\n\033MANUAL_INPUT_HEADLIGHTS_OFF\020\000\022"
  "\032\n\026MANUAL_INPUT_LOW_BEAMS\020\001\022\033\n\027MANUAL_IN"
  "PUT_HIGH_BEAMS\020\002\"x\n\023Commanded_valueType\022"
  "\"\n\036COMMANDED_VALUE_HEADLIGHTS_OFF\020\000\022\035\n\031C"
  "OMMANDED_VALUE_LOW_BEAMS\020\001\022\036\n\032COMMANDED_"
  "VALUE_HIGH_BEAMS\020\002\"S\n\014Accel_rpt_68\022\024\n\014ma"
  "nual_input\030\001 \001(\001\022\027\n\017commanded_value\030\002 \001("
  "\001\022\024\n\014output_value\030\003 \001(\001\"F\n\027Steering_moto"
  "r_rpt_3_75\022\025\n\rtorque_output\030\001 \001(\001\022\024\n\014tor"
  "que_input\030\002 \001(\001\"\331\001\n\013Turn_cmd_63\022G\n\017turn_"
  "signal_cmd\030\001 \001(\0162..apollo.canbus.Turn_cm"
  "d_63.Turn_signal_cmdType\"\200\001\n\023Turn_signal"
  "_cmdType\022\031\n\025TURN_SIGNAL_CMD_RIGHT\020\000\022\030\n\024T"
  "URN_SIGNAL_CMD_NONE\020\001\022\030\n\024TURN_SIGNAL_CMD"
  "_LEFT\020\002\022\032\n\026TURN_SIGNAL_CMD_HAZARD\020\003\"\305\004\n\013"
  "Turn_rpt_64\022A\n\014manual_input\030\001 \001(\0162+.apol"
  "lo.canbus.Turn_rpt_64.Manual_inputType\022G"
  "\n\017commanded_value\030\002 \001(\0162..apollo.canbus."
  "Turn_rpt_64.Commanded_valueType\022A\n\014outpu"
  "t_value\030\003 \001(\0162+.apollo.canbus.Turn_rpt_6"
  "4.Output_valueType\"q\n\020Manual_inputType\022\026"
  "\n\022MANUAL_INPUT_RIGHT\020\000\022\025\n\021MANUAL_INPUT_N"
  "ONE\020\001\022\025\n\021MANUAL_INPUT_LEFT\020\002\022\027\n\023MANUAL_I"
  "NPUT_HAZARD\020\003\"\200\001\n\023Commanded_valueType\022\031\n"
  "\025COMMANDED_VALUE_RIGHT\020\000\022\030\n\024COMMANDED_VA"
  "LUE_NONE\020\001\022\030\n\024COMMANDED_VALUE_LEFT\020\002\022\032\n\026"
  "COMMANDED_VALUE_HAZARD\020\003\"q\n\020Output_value"
  "Type\022\026\n\022OUTPUT_VALUE_RIGHT\020\000\022\025\n\021OUTPUT_V"
  "ALUE_NONE\020\001\022\025\n\021OUTPUT_VALUE_LEFT\020\002\022\027\n\023OU"
  "TPUT_VALUE_HAZARD\020\003\"\311\001\n\014Shift_cmd_65\022<\n\t"
  "shift_cmd\030\001 \001(\0162).apollo.canbus.Shift_cm"
  "d_65.Shift_cmdType\"{\n\rShift_cmdType\022\022\n\016S"
  "HIFT_CMD_PARK\020\000\022\025\n\021SHIFT_CMD_REVERSE\020\001\022\025"
  "\n\021SHIFT_CMD_NEUTRAL\020\002\022\025\n\021SHIFT_CMD_FORWA"
  "RD\020\003\022\021\n\rSHIFT_CMD_LOW\020\004\"\245\005\n\014Shift_rpt_66"
  "\022B\n\014manual_input\030\001 \001(\0162,.apollo.canbus.S"
  "hift_rpt_66.Manual_inputType\022H\n\017commande"
  "d_value\030\002 \001(\0162/.apollo.canbus.Shift_rpt_"
  "66.Commanded_valueType\022B\n\014output_value\030\003"
  " \001(\0162,.apollo.canbus.Shift_rpt_66.Output"
  "_valueType\"\216\001\n\020Manual_inputType\022\025\n\021MANUA"
  "L_INPUT_PARK\020\000\022\030\n\024MANUAL_INPUT_REVERSE\020\001"
  "\022\030\n\024MANUAL_INPUT_NEUTRAL\020\002\022\030\n\024MANUAL_INP"
  "UT_FORWARD\020\003\022\025\n\021MANUAL_INPUT_HIGH\020\004\"\240\001\n\023"
  "Commanded_valueType\022\030\n\024COMMANDED_VALUE_P"
  "ARK\020\000\022\033\n\027COMMANDED_VALUE_REVERSE\020\001\022\033\n\027CO"
  "MMANDED_VALUE_NEUTRAL\020\002\022\033\n\027COMMANDED_VAL"
  "UE_FORWARD\020\003\022\030\n\024COMMANDED_VALUE_HIGH\020\004\"\216"
  "\001\n\020Output_valueType\022\025\n\021OUTPUT_VALUE_PARK"
  "\020\000\022\030\n\024OUTPUT_VALUE_REVERSE\020\001\022\030\n\024OUTPUT_V"
  "ALUE_NEUTRAL\020\002\022\030\n\024OUTPUT_VALUE_FORWARD\020\003"
  "\022\025\n\021OUTPUT_VALUE_HIGH\020\004\"!\n\014Accel_cmd_67\022"
  "\021\n\taccel_cmd\030\001 \001(\001\"\310\001\n\026Lat_lon_heading_r"
  "pt_82\022\017\n\007heading\030\001 \001(\001\022\031\n\021longitude_seco"
  "nds\030\002 \001(\005\022\031\n\021longitude_minutes\030\003 \001(\005\022\031\n\021"
  "longitude_degrees\030\004 \001(\005\022\030\n\020latitude_seco"
  "nds\030\005 \001(\005\022\030\n\020latitude_minutes\030\006 \001(\005\022\030\n\020l"
  "atitude_degrees\030\007 \001(\005\"\253\004\n\rGlobal_cmd_69\022"
  "E\n\rpacmod_enable\030\001 \001(\0162..apollo.canbus.G"
  "lobal_cmd_69.Pacmod_enableType\022G\n\016clear_"
  "override\030\002 \001(\0162/.apollo.canbus.Global_cm"
  "d_69.Clear_overrideType\022I\n\017ignore_overri"
  "de\030\003 \001(\01620.apollo.canbus.Global_cmd_69.I"
  "gnore_overrideType\"Z\n\021Pacmod_enableType\022"
  "\"\n\036PACMOD_ENABLE_CONTROL_DISABLED\020\000\022!\n\035P"
  "ACMOD_ENABLE_CONTROL_ENABLED\020\001\"p\n\022Clear_"
  "overrideType\022/\n+CLEAR_OVERRIDE_DON_T_CLE"
  "AR_ACTIVE_OVERRIDES\020\000\022)\n%CLEAR_OVERRIDE_"
  "CLEAR_ACTIVE_OVERRIDES\020\001\"q\n\023Ignore_overr"
  "ideType\022/\n+IGNORE_OVERRIDE_DON_T_IGNORE_"
  "USER_OVERRIDES\020\000\022)\n%IGNORE_OVERRIDE_IGNO"
  "RE_USER_OVERRIDES\020\001\"\334\001\n\033Parking_brake_st"
  "atus_rpt_80\022c\n\025parking_brake_enabled\030\001 \001"
  "(\0162D.apollo.canbus.Parking_brake_status_"
  "rpt_80.Parking_brake_enabledType\"X\n\031Park"
  "ing_brake_enabledType\022\035\n\031PARKING_BRAKE_E"
  "NABLED_OFF\020\000\022\034\n\030PARKING_BRAKE_ENABLED_ON"
  "\020\001\"#\n\017Yaw_rate_rpt_81\022\020\n\010yaw_rate\030\001 \001(\001\""
  "\242\003\n\013Horn_rpt_79\022A\n\014output_value\030\001 \001(\0162+."
  "apollo.canbus.Horn_rpt_79.Output_valueTy"
  "pe\022G\n\017commanded_value\030\002 \001(\0162..apollo.can"
  "bus.Horn_rpt_79.Commanded_valueType\022A\n\014m"
  "anual_input\030\003 \001(\0162+.apollo.canbus.Horn_r"
  "pt_79.Manual_inputType\"=\n\020Output_valueTy"
  "pe\022\024\n\020OUTPUT_VALUE_OFF\020\000\022\023\n\017OUTPUT_VALUE"
  "_ON\020\001\"F\n\023Commanded_valueType\022\027\n\023COMMANDE"
  "D_VALUE_OFF\020\000\022\026\n\022COMMANDED_VALUE_ON\020\001\"=\n"
  "\020Manual_inputType\022\024\n\020MANUAL_INPUT_OFF\020\000\022"
  "\023\n\017MANUAL_INPUT_ON\020\001\"{\n\013Horn_cmd_78\0229\n\010h"
  "orn_cmd\030\001 \001(\0162\'.apollo.canbus.Horn_cmd_7"
  "8.Horn_cmdType\"1\n\014Horn_cmdType\022\020\n\014HORN_C"
  "MD_OFF\020\000\022\017\n\013HORN_CMD_ON\020\001\"\207\010\n\014Wiper_rpt_"
  "91\022B\n\014output_value\030\001 \001(\0162,.apollo.canbus"
  ".Wiper_rpt_91.Output_valueType\022H\n\017comman"
  "ded_value\030\002 \001(\0162/.apollo.canbus.Wiper_rp"
  "t_91.Commanded_valueType\022B\n\014manual_input"
  "\030\003 \001(\0162,.apollo.canbus.Wiper_rpt_91.Manu"
  "al_inputType\"\201\002\n\020Output_valueType\022\033\n\027OUT"
  "PUT_VALUE_WIPERS_OFF\020\000\022\037\n\033OUTPUT_VALUE_I"
  "NTERMITTENT_1\020\001\022\037\n\033OUTPUT_VALUE_INTERMIT"
  "TENT_2\020\002\022\037\n\033OUTPUT_VALUE_INTERMITTENT_3\020"
  "\003\022\037\n\033OUTPUT_VALUE_INTERMITTENT_4\020\004\022\037\n\033OU"
  "TPUT_VALUE_INTERMITTENT_5\020\005\022\024\n\020OUTPUT_VA"
  "LUE_LOW\020\006\022\025\n\021OUTPUT_VALUE_HIGH\020\007\"\234\002\n\023Com"
  "manded_valueType\022\036\n\032COMMANDED_VALUE_WIPE"
  "RS_OFF\020\000\022\"\n\036COMMANDED_VALUE_INTERMITTENT"
  "_1\020\001\022\"\n\036COMMANDED_VALUE_INTERMITTENT_2\020\002"
  "\022\"\n\036COMMANDED_VALUE_INTERMITTENT_3\020\003\022\"\n\036"
  "COMMANDED_VALUE_INTERMITTENT_4\020\004\022\"\n\036COMM"
  "ANDED_VALUE_INTERMITTENT_5\020\005\022\027\n\023COMMANDE"
  "D_VALUE_LOW\020\006\022\030\n\024COMMANDED_VALUE_HIGH\020\007\""
  "\201\002\n\020Manual_inputType\022\033\n\027MANUAL_INPUT_WIP"
  "ERS_OFF\020\000\022\037\n\033MANUAL_INPUT_INTERMITTENT_1"
  "\020\001\022\037\n\033MANUAL_INPUT_INTERMITTENT_2\020\002\022\037\n\033M"
  "ANUAL_INPUT_INTERMITTENT_3\020\003\022\037\n\033MANUAL_I"
  "NPUT_INTERMITTENT_4\020\004\022\037\n\033MANUAL_INPUT_IN"
  "TERMITTENT_5\020\005\022\024\n\020MANUAL_INPUT_LOW\020\006\022\025\n\021"
  "MANUAL_INPUT_HIGH\020\007\"\342\001\n\024Vehicle_speed_rp"
  "t_6f\022\025\n\rvehicle_speed\030\001 \001(\001\022X\n\023vehicle_s"
  "peed_valid\030\002 \001(\0162;.apollo.canbus.Vehicle"
  "_speed_rpt_6f.Vehicle_speed_validType\"Y\n"
  "\027Vehicle_speed_validType\022\037\n\033VEHICLE_SPEE"
  "D_VALID_INVALID\020\000\022\035\n\031VEHICLE_SPEED_VALID"
  "_VALID\020\001\"\316\001\n\020Headlight_cmd_76\022H\n\rheadlig"
  "ht_cmd\030\001 \001(\01621.apollo.canbus.Headlight_c"
  "md_76.Headlight_cmdType\"p\n\021Headlight_cmd"
  "Type\022 \n\034HEADLIGHT_CMD_HEADLIGHTS_OFF\020\000\022\033"
  "\n\027HEADLIGHT_CMD_LOW_BEAMS\020\001\022\034\n\030HEADLIGHT"
  "_CMD_HIGH_BEAMS\020\002\"h\n\027Steering_motor_rpt_"
  "2_74\022\033\n\023encoder_temperature\030\001 \001(\005\022\031\n\021mot"
  "or_temperature\030\002 \001(\005\022\025\n\rangular_speed\030\003 "
  "\001(\001\"e\n\024Brake_motor_rpt_2_71\022\033\n\023encoder_t"
  "emperature\030\001 \001(\005\022\031\n\021motor_temperature\030\002 "
  "\001(\005\022\025\n\rangular_speed\030\003 \001(\001\"H\n\027Steering_m"
  "otor_rpt_1_73\022\025\n\rmotor_current\030\001 \001(\001\022\026\n\016"
  "shaft_position\030\002 \001(\001\"\265\002\n\014Wiper_cmd_90\022<\n"
  "\twiper_cmd\030\001 \001(\0162).apollo.canbus.Wiper_c"
  "md_90.Wiper_cmdType\"\346\001\n\rWiper_cmdType\022\030\n"
  "\024WIPER_CMD_WIPERS_OFF\020\000\022\034\n\030WIPER_CMD_INT"
  "ERMITTENT_1\020\001\022\034\n\030WIPER_CMD_INTERMITTENT_"
  "2\020\002\022\034\n\030WIPER_CMD_INTERMITTENT_3\020\003\022\034\n\030WIP"
  "ER_CMD_INTERMITTENT_4\020\004\022\034\n\030WIPER_CMD_INT"
  "ERMITTENT_5\020\005\022\021\n\rWIPER_CMD_LOW\020\006\022\022\n\016WIPE"
  "R_CMD_HIGH\020\007\"C\n\024Brake_motor_rpt_3_72\022\025\n\r"
  "torque_output\030\001 \001(\001\022\024\n\014torque_input\030\002 \001("
  "\001\"\351\r\n\003Gem\0223\n\rglobal_rpt_6a\030\001 \001(\0132\034.apoll"
  "o.canbus.Global_rpt_6a\0221\n\014brake_cmd_6b\030\002"
  " \001(\0132\033.apollo.canbus.Brake_cmd_6b\0221\n\014bra"
  "ke_rpt_6c\030\003 \001(\0132\033.apollo.canbus.Brake_rp"
  "t_6c\0227\n\017steering_cmd_6d\030\004 \001(\0132\036.apollo.c"
  "anbus.Steering_cmd_6d\022;\n\021steering_rpt_1_"
  "6e\030\005 \001(\0132 .apollo.canbus.Steering_rpt_1_"
  "6e\022=\n\022wheel_speed_rpt_7a\030\006 \001(\0132!.apollo."
  "canbus.Wheel_speed_rpt_7a\0229\n\020date_time_r"
  "pt_83\030\007 \001(\0132\037.apollo.canbus.Date_time_rp"
  "t_83\022A\n\024brake_motor_rpt_1_70\030\010 \001(\0132#.apo"
  "llo.canbus.Brake_motor_rpt_1_70\0229\n\020headl"
  "ight_rpt_77\030\t \001(\0132\037.apollo.canbus.Headli"
  "ght_rpt_77\0221\n\014accel_rpt_68\030\n \001(\0132\033.apoll"
  "o.canbus.Accel_rpt_68\022G\n\027steering_motor_"
  "rpt_3_75\030\013 \001(\0132&.apollo.canbus.Steering_"
  "motor_rpt_3_75\022/\n\013turn_cmd_63\030\014 \001(\0132\032.ap"
  "ollo.canbus.Turn_cmd_63\022/\n\013turn_rpt_64\030\r"
  " \001(\0132\032.apollo.canbus.Turn_rpt_64\0221\n\014shif"
  "t_cmd_65\030\016 \001(\0132\033.apollo.canbus.Shift_cmd"
  "_65\0221\n\014shift_rpt_66\030\017 \001(\0132\033.apollo.canbu"
  "s.Shift_rpt_66\0221\n\014accel_cmd_67\030\020 \001(\0132\033.a"
  "pollo.canbus.Accel_cmd_67\022E\n\026lat_lon_hea"
  "ding_rpt_82\030\021 \001(\0132%.apollo.canbus.Lat_lo"
  "n_heading_rpt_82\0223\n\rglobal_cmd_69\030\022 \001(\0132"
  "\034.apollo.canbus.Global_cmd_69\022O\n\033parking"
  "_brake_status_rpt_80\030\023 \001(\0132*.apollo.canb"
  "us.Parking_brake_status_rpt_80\0227\n\017yaw_ra"
  "te_rpt_81\030\024 \001(\0132\036.apollo.canbus.Yaw_rate"
  "_rpt_81\022/\n\013horn_rpt_79\030\025 \001(\0132\032.apollo.ca"
  "nbus.Horn_rpt_79\022/\n\013horn_cmd_78\030\026 \001(\0132\032."
  "apollo.canbus.Horn_cmd_78\0221\n\014wiper_rpt_9"
  "1\030\027 \001(\0132\033.apollo.canbus.Wiper_rpt_91\022A\n\024"
  "vehicle_speed_rpt_6f\030\030 \001(\0132#.apollo.canb"
  "us.Vehicle_speed_rpt_6f\0229\n\020headlight_cmd"
  "_76\030\031 \001(\0132\037.apollo.canbus.Headlight_cmd_"
  "76\022G\n\027steering_motor_rpt_2_74\030\032 \001(\0132&.ap"
  "ollo.canbus.Steering_motor_rpt_2_74\022A\n\024b"
  "rake_motor_rpt_2_71\030\033 \001(\0132#.apollo.canbu"
  "s.Brake_motor_rpt_2_71\022G\n\027steering_motor"
  "_rpt_1_73\030\034 \001(\0132&.apollo.canbus.Steering"
  "_motor_rpt_1_73\0221\n\014wiper_cmd_90\030\035 \001(\0132\033."
  "apollo.canbus.Wiper_cmd_90\022A\n\024brake_moto"
  "r_rpt_3_72\030\036 \001(\0132#.apollo.canbus.Brake_m"
  "otor_rpt_3_72"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto = {
    false, false, 18053, descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto,
    "modules/canbus/proto/chassis_detail.proto",
    &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_deps, 2, 46,
    schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::offsets,
    file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto,
    file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisDetail_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[0];
}
bool ChassisDetail_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
constexpr ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
constexpr ChassisDetail_Type ChassisDetail::Type_MIN;
constexpr ChassisDetail_Type ChassisDetail::Type_MAX;
constexpr int ChassisDetail::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_TurnLightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[1];
}
bool Light_TurnLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Light_TurnLightType Light::TURN_LIGHT_OFF;
constexpr Light_TurnLightType Light::TURN_LEFT_ON;
constexpr Light_TurnLightType Light::TURN_RIGHT_ON;
constexpr Light_TurnLightType Light::TURN_LIGHT_ON;
constexpr Light_TurnLightType Light::TurnLightType_MIN;
constexpr Light_TurnLightType Light::TurnLightType_MAX;
constexpr int Light::TurnLightType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_BeamLampType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[2];
}
bool Light_BeamLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Light_BeamLampType Light::BEAM_OFF;
constexpr Light_BeamLampType Light::HIGH_BEAM_ON;
constexpr Light_BeamLampType Light::LOW_BEAM_ON;
constexpr Light_BeamLampType Light::BeamLampType_MIN;
constexpr Light_BeamLampType Light::BeamLampType_MAX;
constexpr int Light::BeamLampType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnLampType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[3];
}
bool Light_LincolnLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Light_LincolnLampType Light::BEAM_NULL;
constexpr Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
constexpr Light_LincolnLampType Light::BEAM_HIGH;
constexpr Light_LincolnLampType Light::BEAM_INVALID;
constexpr Light_LincolnLampType Light::LincolnLampType_MIN;
constexpr Light_LincolnLampType Light::LincolnLampType_MAX;
constexpr int Light::LincolnLampType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[4];
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Light_LincolnWiperType Light::WIPER_OFF;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_OFF;
constexpr Light_LincolnWiperType Light::WIPER_OFF_MOVING;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_ON;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
constexpr Light_LincolnWiperType Light::WIPER_MIST_FLICK;
constexpr Light_LincolnWiperType Light::WIPER_WASH;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_LOW;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
constexpr Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
constexpr Light_LincolnWiperType Light::WIPER_RESERVED;
constexpr Light_LincolnWiperType Light::WIPER_STALLED;
constexpr Light_LincolnWiperType Light::WIPER_NO_DATA;
constexpr Light_LincolnWiperType Light::LincolnWiperType_MIN;
constexpr Light_LincolnWiperType Light::LincolnWiperType_MAX;
constexpr int Light::LincolnWiperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[5];
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Light_LincolnAmbientType Light::AMBIENT_DARK;
constexpr Light_LincolnAmbientType Light::AMBIENT_LIGHT;
constexpr Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
constexpr Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
constexpr Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
constexpr Light_LincolnAmbientType Light::AMBIENT_INVALID;
constexpr Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
constexpr Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
constexpr Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
constexpr int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Eps_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[6];
}
bool Eps_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Eps_Type Eps::NOT_AVAILABLE;
constexpr Eps_Type Eps::READY;
constexpr Eps_Type Eps::ACTIVE;
constexpr Eps_Type Eps::INVALID;
constexpr Eps_Type Eps::Type_MIN;
constexpr Eps_Type Eps::Type_MAX;
constexpr int Eps::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[7];
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_HSAStatusType Brake::HSA_INACTIVE;
constexpr Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
constexpr Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
constexpr Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
constexpr Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
constexpr Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
constexpr Brake_HSAStatusType Brake::HSA_FAILED;
constexpr Brake_HSAStatusType Brake::HSA_UNDEFINED;
constexpr Brake_HSAStatusType Brake::HSAStatusType_MIN;
constexpr Brake_HSAStatusType Brake::HSAStatusType_MAX;
constexpr int Brake::HSAStatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_HSAModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[8];
}
bool Brake_HSAModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_HSAModeType Brake::HSA_OFF;
constexpr Brake_HSAModeType Brake::HSA_AUTO;
constexpr Brake_HSAModeType Brake::HSA_MANUAL;
constexpr Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
constexpr Brake_HSAModeType Brake::HSAModeType_MIN;
constexpr Brake_HSAModeType Brake::HSAModeType_MAX;
constexpr int Brake::HSAModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epb_PBrakeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[9];
}
bool Epb_PBrakeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Epb_PBrakeType Epb::PBRAKE_OFF;
constexpr Epb_PBrakeType Epb::PBRAKE_TRANSITION;
constexpr Epb_PBrakeType Epb::PBRAKE_ON;
constexpr Epb_PBrakeType Epb::PBRAKE_FAULT;
constexpr Epb_PBrakeType Epb::PBrakeType_MIN;
constexpr Epb_PBrakeType Epb::PBrakeType_MAX;
constexpr int Epb::PBrakeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ems_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[10];
}
bool Ems_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ems_Type Ems::STOP;
constexpr Ems_Type Ems::CRANK;
constexpr Ems_Type Ems::RUNNING;
constexpr Ems_Type Ems::INVALID;
constexpr Ems_Type Ems::Type_MIN;
constexpr Ems_Type Ems::Type_MAX;
constexpr int Ems::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[11];
}
bool BasicInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BasicInfo_Type BasicInfo::OFF;
constexpr BasicInfo_Type BasicInfo::ACC;
constexpr BasicInfo_Type BasicInfo::ON;
constexpr BasicInfo_Type BasicInfo::START;
constexpr BasicInfo_Type BasicInfo::INVALID;
constexpr BasicInfo_Type BasicInfo::Type_MIN;
constexpr BasicInfo_Type BasicInfo::Type_MAX;
constexpr int BasicInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Pacmod_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[12];
}
bool Global_rpt_6a_Pacmod_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_DISABLED;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_ENABLED;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MIN;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MAX;
constexpr int Global_rpt_6a::Pacmod_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Override_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[13];
}
bool Global_rpt_6a_Override_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_NOT_OVERRIDDEN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_OVERRIDDEN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MIN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MAX;
constexpr int Global_rpt_6a::Override_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Brk_can_timeoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[14];
}
bool Global_rpt_6a_Brk_can_timeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MIN;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MAX;
constexpr int Global_rpt_6a::Brk_can_timeoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_rpt_6c_Brake_on_offType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[15];
}
bool Brake_rpt_6c_Brake_on_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_OFF;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_ON;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MIN;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MAX;
constexpr int Brake_rpt_6c::Brake_on_offType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[16];
}
bool Headlight_rpt_77_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MIN;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MAX;
constexpr int Headlight_rpt_77::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[17];
}
bool Headlight_rpt_77_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_LOW_BEAMS;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HIGH_BEAMS;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MIN;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MAX;
constexpr int Headlight_rpt_77::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[18];
}
bool Headlight_rpt_77_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MIN;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MAX;
constexpr int Headlight_rpt_77::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_cmd_63_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[19];
}
bool Turn_cmd_63_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_RIGHT;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_NONE;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_LEFT;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_HAZARD;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MIN;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MAX;
constexpr int Turn_cmd_63::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[20];
}
bool Turn_rpt_64_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_RIGHT;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_NONE;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_LEFT;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_HAZARD;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MIN;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MAX;
constexpr int Turn_rpt_64::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[21];
}
bool Turn_rpt_64_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_RIGHT;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_NONE;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_LEFT;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_HAZARD;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MIN;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MAX;
constexpr int Turn_rpt_64::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[22];
}
bool Turn_rpt_64_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_RIGHT;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_NONE;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_LEFT;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_HAZARD;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MIN;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MAX;
constexpr int Turn_rpt_64::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_cmd_65_Shift_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[23];
}
bool Shift_cmd_65_Shift_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_PARK;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_REVERSE;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_NEUTRAL;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_FORWARD;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_LOW;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MIN;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MAX;
constexpr int Shift_cmd_65::Shift_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[24];
}
bool Shift_rpt_66_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_PARK;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_REVERSE;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_NEUTRAL;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_FORWARD;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_HIGH;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MIN;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MAX;
constexpr int Shift_rpt_66::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[25];
}
bool Shift_rpt_66_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_PARK;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_REVERSE;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_NEUTRAL;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_FORWARD;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_HIGH;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MIN;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MAX;
constexpr int Shift_rpt_66::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[26];
}
bool Shift_rpt_66_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_PARK;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_REVERSE;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_NEUTRAL;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_FORWARD;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_HIGH;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MIN;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MAX;
constexpr int Shift_rpt_66::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Pacmod_enableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[27];
}
bool Global_cmd_69_Pacmod_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_DISABLED;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_ENABLED;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MIN;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MAX;
constexpr int Global_cmd_69::Pacmod_enableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Clear_overrideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[28];
}
bool Global_cmd_69_Clear_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDES;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MIN;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MAX;
constexpr int Global_cmd_69::Clear_overrideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Ignore_overrideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[29];
}
bool Global_cmd_69_Ignore_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_DON_T_IGNORE_USER_OVERRIDES;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_IGNORE_USER_OVERRIDES;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MIN;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MAX;
constexpr int Global_cmd_69::Ignore_overrideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_brake_status_rpt_80_Parking_brake_enabledType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[30];
}
bool Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_OFF;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_ON;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MIN;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MAX;
constexpr int Parking_brake_status_rpt_80::Parking_brake_enabledType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[31];
}
bool Horn_rpt_79_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_OFF;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_ON;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MIN;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MAX;
constexpr int Horn_rpt_79::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[32];
}
bool Horn_rpt_79_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_OFF;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_ON;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MIN;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MAX;
constexpr int Horn_rpt_79::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[33];
}
bool Horn_rpt_79_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_OFF;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_ON;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MIN;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MAX;
constexpr int Horn_rpt_79::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_cmd_78_Horn_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[34];
}
bool Horn_cmd_78_Horn_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_OFF;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_ON;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MIN;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MAX;
constexpr int Horn_cmd_78::Horn_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[35];
}
bool Wiper_rpt_91_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_LOW;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_HIGH;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MIN;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MAX;
constexpr int Wiper_rpt_91::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[36];
}
bool Wiper_rpt_91_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_LOW;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_HIGH;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MIN;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MAX;
constexpr int Wiper_rpt_91::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[37];
}
bool Wiper_rpt_91_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_WIPERS_OFF;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_1;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_2;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_3;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_4;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_5;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_LOW;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_HIGH;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MIN;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MAX;
constexpr int Wiper_rpt_91::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_speed_rpt_6f_Vehicle_speed_validType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[38];
}
bool Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_INVALID;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_VALID;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MIN;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MAX;
constexpr int Vehicle_speed_rpt_6f::Vehicle_speed_validType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_cmd_76_Headlight_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[39];
}
bool Headlight_cmd_76_Headlight_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HEADLIGHTS_OFF;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_LOW_BEAMS;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HIGH_BEAMS;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MIN;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MAX;
constexpr int Headlight_cmd_76::Headlight_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_cmd_90_Wiper_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[40];
}
bool Wiper_cmd_90_Wiper_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_WIPERS_OFF;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_1;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_2;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_3;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_4;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_5;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_LOW;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_HIGH;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MIN;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MAX;
constexpr int Wiper_cmd_90::Wiper_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChassisDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisDetail>()._impl_._has_bits_);
  static void set_has_car_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::BasicInfo& basic(const ChassisDetail* msg);
  static void set_has_basic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Safety& safety(const ChassisDetail* msg);
  static void set_has_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Gear& gear(const ChassisDetail* msg);
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Ems& ems(const ChassisDetail* msg);
  static void set_has_ems(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Esp& esp(const ChassisDetail* msg);
  static void set_has_esp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Gas& gas(const ChassisDetail* msg);
  static void set_has_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Epb& epb(const ChassisDetail* msg);
  static void set_has_epb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Brake& brake(const ChassisDetail* msg);
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Deceleration& deceleration(const ChassisDetail* msg);
  static void set_has_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::VehicleSpd& vehicle_spd(const ChassisDetail* msg);
  static void set_has_vehicle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Eps& eps(const ChassisDetail* msg);
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Light& light(const ChassisDetail* msg);
  static void set_has_light(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Battery& battery(const ChassisDetail* msg);
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::CheckResponseSignal& check_response(const ChassisDetail* msg);
  static void set_has_check_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::License& license(const ChassisDetail* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Surround& surround(const ChassisDetail* msg);
  static void set_has_surround(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Gem& gem(const ChassisDetail* msg);
  static void set_has_gem(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Ch& ch(const ChassisDetail* msg);
  static void set_has_ch(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::apollo::canbus::BasicInfo&
ChassisDetail::_Internal::basic(const ChassisDetail* msg) {
  return *msg->_impl_.basic_;
}
const ::apollo::canbus::Safety&
ChassisDetail::_Internal::safety(const ChassisDetail* msg) {
  return *msg->_impl_.safety_;
}
const ::apollo::canbus::Gear&
ChassisDetail::_Internal::gear(const ChassisDetail* msg) {
  return *msg->_impl_.gear_;
}
const ::apollo::canbus::Ems&
ChassisDetail::_Internal::ems(const ChassisDetail* msg) {
  return *msg->_impl_.ems_;
}
const ::apollo::canbus::Esp&
ChassisDetail::_Internal::esp(const ChassisDetail* msg) {
  return *msg->_impl_.esp_;
}
const ::apollo::canbus::Gas&
ChassisDetail::_Internal::gas(const ChassisDetail* msg) {
  return *msg->_impl_.gas_;
}
const ::apollo::canbus::Epb&
ChassisDetail::_Internal::epb(const ChassisDetail* msg) {
  return *msg->_impl_.epb_;
}
const ::apollo::canbus::Brake&
ChassisDetail::_Internal::brake(const ChassisDetail* msg) {
  return *msg->_impl_.brake_;
}
const ::apollo::canbus::Deceleration&
ChassisDetail::_Internal::deceleration(const ChassisDetail* msg) {
  return *msg->_impl_.deceleration_;
}
const ::apollo::canbus::VehicleSpd&
ChassisDetail::_Internal::vehicle_spd(const ChassisDetail* msg) {
  return *msg->_impl_.vehicle_spd_;
}
const ::apollo::canbus::Eps&
ChassisDetail::_Internal::eps(const ChassisDetail* msg) {
  return *msg->_impl_.eps_;
}
const ::apollo::canbus::Light&
ChassisDetail::_Internal::light(const ChassisDetail* msg) {
  return *msg->_impl_.light_;
}
const ::apollo::canbus::Battery&
ChassisDetail::_Internal::battery(const ChassisDetail* msg) {
  return *msg->_impl_.battery_;
}
const ::apollo::canbus::CheckResponseSignal&
ChassisDetail::_Internal::check_response(const ChassisDetail* msg) {
  return *msg->_impl_.check_response_;
}
const ::apollo::canbus::License&
ChassisDetail::_Internal::license(const ChassisDetail* msg) {
  return *msg->_impl_.license_;
}
const ::apollo::canbus::Surround&
ChassisDetail::_Internal::surround(const ChassisDetail* msg) {
  return *msg->_impl_.surround_;
}
const ::apollo::canbus::Gem&
ChassisDetail::_Internal::gem(const ChassisDetail* msg) {
  return *msg->_impl_.gem_;
}
const ::apollo::canbus::Ch&
ChassisDetail::_Internal::ch(const ChassisDetail* msg) {
  return *msg->_impl_.ch_;
}
void ChassisDetail::clear_license() {
  if (_impl_.license_ != nullptr) _impl_.license_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChassisDetail::clear_surround() {
  if (_impl_.surround_ != nullptr) _impl_.surround_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChassisDetail::clear_ch() {
  if (_impl_.ch_ != nullptr) _impl_.ch_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
ChassisDetail::ChassisDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.ChassisDetail)
}
ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.safety_){nullptr}
    , decltype(_impl_.gear_){nullptr}
    , decltype(_impl_.ems_){nullptr}
    , decltype(_impl_.esp_){nullptr}
    , decltype(_impl_.gas_){nullptr}
    , decltype(_impl_.epb_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , decltype(_impl_.deceleration_){nullptr}
    , decltype(_impl_.vehicle_spd_){nullptr}
    , decltype(_impl_.eps_){nullptr}
    , decltype(_impl_.light_){nullptr}
    , decltype(_impl_.battery_){nullptr}
    , decltype(_impl_.check_response_){nullptr}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.surround_){nullptr}
    , decltype(_impl_.gem_){nullptr}
    , decltype(_impl_.ch_){nullptr}
    , decltype(_impl_.car_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    _impl_.basic_ = new ::apollo::canbus::BasicInfo(*from._impl_.basic_);
  }
  if (from._internal_has_safety()) {
    _impl_.safety_ = new ::apollo::canbus::Safety(*from._impl_.safety_);
  }
  if (from._internal_has_gear()) {
    _impl_.gear_ = new ::apollo::canbus::Gear(*from._impl_.gear_);
  }
  if (from._internal_has_ems()) {
    _impl_.ems_ = new ::apollo::canbus::Ems(*from._impl_.ems_);
  }
  if (from._internal_has_esp()) {
    _impl_.esp_ = new ::apollo::canbus::Esp(*from._impl_.esp_);
  }
  if (from._internal_has_gas()) {
    _impl_.gas_ = new ::apollo::canbus::Gas(*from._impl_.gas_);
  }
  if (from._internal_has_epb()) {
    _impl_.epb_ = new ::apollo::canbus::Epb(*from._impl_.epb_);
  }
  if (from._internal_has_brake()) {
    _impl_.brake_ = new ::apollo::canbus::Brake(*from._impl_.brake_);
  }
  if (from._internal_has_deceleration()) {
    _impl_.deceleration_ = new ::apollo::canbus::Deceleration(*from._impl_.deceleration_);
  }
  if (from._internal_has_vehicle_spd()) {
    _impl_.vehicle_spd_ = new ::apollo::canbus::VehicleSpd(*from._impl_.vehicle_spd_);
  }
  if (from._internal_has_eps()) {
    _impl_.eps_ = new ::apollo::canbus::Eps(*from._impl_.eps_);
  }
  if (from._internal_has_light()) {
    _impl_.light_ = new ::apollo::canbus::Light(*from._impl_.light_);
  }
  if (from._internal_has_battery()) {
    _impl_.battery_ = new ::apollo::canbus::Battery(*from._impl_.battery_);
  }
  if (from._internal_has_check_response()) {
    _impl_.check_response_ = new ::apollo::canbus::CheckResponseSignal(*from._impl_.check_response_);
  }
  if (from._internal_has_license()) {
    _impl_.license_ = new ::apollo::canbus::License(*from._impl_.license_);
  }
  if (from._internal_has_surround()) {
    _impl_.surround_ = new ::apollo::canbus::Surround(*from._impl_.surround_);
  }
  if (from._internal_has_gem()) {
    _impl_.gem_ = new ::apollo::canbus::Gem(*from._impl_.gem_);
  }
  if (from._internal_has_ch()) {
    _impl_.ch_ = new ::apollo::canbus::Ch(*from._impl_.ch_);
  }
  _impl_.car_type_ = from._impl_.car_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

inline void ChassisDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.safety_){nullptr}
    , decltype(_impl_.gear_){nullptr}
    , decltype(_impl_.ems_){nullptr}
    , decltype(_impl_.esp_){nullptr}
    , decltype(_impl_.gas_){nullptr}
    , decltype(_impl_.epb_){nullptr}
    , decltype(_impl_.brake_){nullptr}
    , decltype(_impl_.deceleration_){nullptr}
    , decltype(_impl_.vehicle_spd_){nullptr}
    , decltype(_impl_.eps_){nullptr}
    , decltype(_impl_.light_){nullptr}
    , decltype(_impl_.battery_){nullptr}
    , decltype(_impl_.check_response_){nullptr}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.surround_){nullptr}
    , decltype(_impl_.gem_){nullptr}
    , decltype(_impl_.ch_){nullptr}
    , decltype(_impl_.car_type_){0}
  };
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChassisDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.basic_;
  if (this != internal_default_instance()) delete _impl_.safety_;
  if (this != internal_default_instance()) delete _impl_.gear_;
  if (this != internal_default_instance()) delete _impl_.ems_;
  if (this != internal_default_instance()) delete _impl_.esp_;
  if (this != internal_default_instance()) delete _impl_.gas_;
  if (this != internal_default_instance()) delete _impl_.epb_;
  if (this != internal_default_instance()) delete _impl_.brake_;
  if (this != internal_default_instance()) delete _impl_.deceleration_;
  if (this != internal_default_instance()) delete _impl_.vehicle_spd_;
  if (this != internal_default_instance()) delete _impl_.eps_;
  if (this != internal_default_instance()) delete _impl_.light_;
  if (this != internal_default_instance()) delete _impl_.battery_;
  if (this != internal_default_instance()) delete _impl_.check_response_;
  if (this != internal_default_instance()) delete _impl_.license_;
  if (this != internal_default_instance()) delete _impl_.surround_;
  if (this != internal_default_instance()) delete _impl_.gem_;
  if (this != internal_default_instance()) delete _impl_.ch_;
}

void ChassisDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.basic_ != nullptr);
      _impl_.basic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.safety_ != nullptr);
      _impl_.safety_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.gear_ != nullptr);
      _impl_.gear_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.ems_ != nullptr);
      _impl_.ems_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.esp_ != nullptr);
      _impl_.esp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.gas_ != nullptr);
      _impl_.gas_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.epb_ != nullptr);
      _impl_.epb_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.brake_ != nullptr);
      _impl_.brake_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.deceleration_ != nullptr);
      _impl_.deceleration_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.vehicle_spd_ != nullptr);
      _impl_.vehicle_spd_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.eps_ != nullptr);
      _impl_.eps_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.light_ != nullptr);
      _impl_.light_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.battery_ != nullptr);
      _impl_.battery_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.check_response_ != nullptr);
      _impl_.check_response_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.license_ != nullptr);
      _impl_.license_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.surround_ != nullptr);
      _impl_.surround_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.gem_ != nullptr);
      _impl_.gem_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.ch_ != nullptr);
      _impl_.ch_->Clear();
    }
  }
  _impl_.car_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::ChassisDetail_Type_IsValid(val))) {
            _internal_set_car_type(static_cast<::apollo::canbus::ChassisDetail_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.BasicInfo basic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Safety safety = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_safety(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear gear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ems ems = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ems(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Esp esp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gas gas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Epb epb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_epb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake brake = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Deceleration deceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_spd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Eps eps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_eps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light light = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Battery battery = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Surround surround = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_surround(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gem gem = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_gem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ch ch = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChassisDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_type(), target);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::safety(this),
        _Internal::safety(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gear(this),
        _Internal::gear(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ems(this),
        _Internal::ems(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::esp(this),
        _Internal::esp(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::gas(this),
        _Internal::gas(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::epb(this),
        _Internal::epb(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::brake(this),
        _Internal::brake(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::deceleration(this),
        _Internal::deceleration(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::vehicle_spd(this),
        _Internal::vehicle_spd(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::eps(this),
        _Internal::eps(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::light(this),
        _Internal::light(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::battery(this),
        _Internal::battery(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::check_response(this),
        _Internal::check_response(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.License license = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::license(this),
        _Internal::license(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Surround surround = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::surround(this),
        _Internal::surround(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Gem gem = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::gem(this),
        _Internal::gem(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Ch ch = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::ch(this),
        _Internal::ch(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

size_t ChassisDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.BasicInfo basic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.basic_);
    }

    // optional .apollo.canbus.Safety safety = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.safety_);
    }

    // optional .apollo.canbus.Gear gear = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gear_);
    }

    // optional .apollo.canbus.Ems ems = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ems_);
    }

    // optional .apollo.canbus.Esp esp = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.esp_);
    }

    // optional .apollo.canbus.Gas gas = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gas_);
    }

    // optional .apollo.canbus.Epb epb = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.epb_);
    }

    // optional .apollo.canbus.Brake brake = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Deceleration deceleration = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deceleration_);
    }

    // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_spd_);
    }

    // optional .apollo.canbus.Eps eps = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.eps_);
    }

    // optional .apollo.canbus.Light light = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.light_);
    }

    // optional .apollo.canbus.Battery battery = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.battery_);
    }

    // optional .apollo.canbus.CheckResponseSignal check_response = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.check_response_);
    }

    // optional .apollo.canbus.License license = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.license_);
    }

    // optional .apollo.canbus.Surround surround = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.surround_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .apollo.canbus.Gem gem = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gem_);
    }

    // optional .apollo.canbus.Ch ch = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ch_);
    }

    // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_car_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChassisDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisDetail::GetClassData() const { return &_class_data_; }

void ChassisDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChassisDetail *>(to)->MergeFrom(
      static_cast<const ChassisDetail &>(from));
}


void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from._internal_basic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_safety()->::apollo::canbus::Safety::MergeFrom(from._internal_safety());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gear()->::apollo::canbus::Gear::MergeFrom(from._internal_gear());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ems()->::apollo::canbus::Ems::MergeFrom(from._internal_ems());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_esp()->::apollo::canbus::Esp::MergeFrom(from._internal_esp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_gas()->::apollo::canbus::Gas::MergeFrom(from._internal_gas());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_epb()->::apollo::canbus::Epb::MergeFrom(from._internal_epb());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_brake()->::apollo::canbus::Brake::MergeFrom(from._internal_brake());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from._internal_deceleration());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from._internal_vehicle_spd());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_eps()->::apollo::canbus::Eps::MergeFrom(from._internal_eps());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_light()->::apollo::canbus::Light::MergeFrom(from._internal_light());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_battery()->::apollo::canbus::Battery::MergeFrom(from._internal_battery());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from._internal_check_response());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_license()->::apollo::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_surround()->::apollo::canbus::Surround::MergeFrom(from._internal_surround());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_gem()->::apollo::canbus::Gem::MergeFrom(from._internal_gem());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_ch()->::apollo::canbus::Ch::MergeFrom(from._internal_ch());
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.car_type_ = from._impl_.car_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {
  return true;
}

void ChassisDetail::InternalSwap(ChassisDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisDetail, _impl_.car_type_)
      + sizeof(ChassisDetail::_impl_.car_type_)
      - PROTOBUF_FIELD_OFFSET(ChassisDetail, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[0]);
}

// ===================================================================

class CheckResponseSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckResponseSignal>()._impl_._has_bits_);
  static void set_has_is_eps_online(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_epb_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_esp_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_vtog_online(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_scu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_switch_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_vcu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CheckResponseSignal::CheckResponseSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.CheckResponseSignal)
}
CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_eps_online_){}
    , decltype(_impl_.is_epb_online_){}
    , decltype(_impl_.is_esp_online_){}
    , decltype(_impl_.is_vtog_online_){}
    , decltype(_impl_.is_scu_online_){}
    , decltype(_impl_.is_switch_online_){}
    , decltype(_impl_.is_vcu_online_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_eps_online_, &from._impl_.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_vcu_online_) -
    reinterpret_cast<char*>(&_impl_.is_eps_online_)) + sizeof(_impl_.is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

inline void CheckResponseSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_eps_online_){false}
    , decltype(_impl_.is_epb_online_){false}
    , decltype(_impl_.is_esp_online_){false}
    , decltype(_impl_.is_vtog_online_){false}
    , decltype(_impl_.is_scu_online_){false}
    , decltype(_impl_.is_switch_online_){false}
    , decltype(_impl_.is_vcu_online_){false}
  };
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckResponseSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckResponseSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.is_eps_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_vcu_online_) -
        reinterpret_cast<char*>(&_impl_.is_eps_online_)) + sizeof(_impl_.is_vcu_online_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckResponseSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_eps_online = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_eps_online(&has_bits);
          _impl_.is_eps_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_epb_online = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_epb_online(&has_bits);
          _impl_.is_epb_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_esp_online = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_esp_online(&has_bits);
          _impl_.is_esp_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_vtog_online = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_vtog_online(&has_bits);
          _impl_.is_vtog_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_scu_online = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_scu_online(&has_bits);
          _impl_.is_scu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_switch_online = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_switch_online(&has_bits);
          _impl_.is_switch_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_vcu_online = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_vcu_online(&has_bits);
          _impl_.is_vcu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckResponseSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_online(), target);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_online(), target);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_scu_online(), target);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vcu_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

size_t CheckResponseSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool is_eps_online = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_online = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_online = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_vtog_online = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_scu_online = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_online = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_vcu_online = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckResponseSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckResponseSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckResponseSignal::GetClassData() const { return &_class_data_; }

void CheckResponseSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckResponseSignal *>(to)->MergeFrom(
      static_cast<const CheckResponseSignal &>(from));
}


void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.is_eps_online_ = from._impl_.is_eps_online_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_epb_online_ = from._impl_.is_epb_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_esp_online_ = from._impl_.is_esp_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_vtog_online_ = from._impl_.is_vtog_online_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_scu_online_ = from._impl_.is_scu_online_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_switch_online_ = from._impl_.is_switch_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_vcu_online_ = from._impl_.is_vcu_online_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {
  return true;
}

void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckResponseSignal, _impl_.is_vcu_online_)
      + sizeof(CheckResponseSignal::_impl_.is_vcu_online_)
      - PROTOBUF_FIELD_OFFSET(CheckResponseSignal, _impl_.is_eps_online_)>(
          reinterpret_cast<char*>(&_impl_.is_eps_online_),
          reinterpret_cast<char*>(&other->_impl_.is_eps_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponseSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[1]);
}

// ===================================================================

class Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<Battery>()._impl_._has_bits_);
  static void set_has_battery_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fuel_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Battery::Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_percent_){}
    , decltype(_impl_.fuel_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.battery_percent_, &from._impl_.battery_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuel_level_) -
    reinterpret_cast<char*>(&_impl_.battery_percent_)) + sizeof(_impl_.fuel_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

inline void Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_percent_){0}
    , decltype(_impl_.fuel_level_){0}
  };
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.battery_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fuel_level_) -
        reinterpret_cast<char*>(&_impl_.battery_percent_)) + sizeof(_impl_.fuel_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double battery_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_battery_percent(&has_bits);
          _impl_.battery_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double fuel_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_fuel_level(&has_bits);
          _impl_.fuel_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_battery_percent(), target);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_fuel_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double battery_percent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double fuel_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Battery::GetClassData() const { return &_class_data_; }

void Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Battery *>(to)->MergeFrom(
      static_cast<const Battery &>(from));
}


void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.battery_percent_ = from._impl_.battery_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fuel_level_ = from._impl_.fuel_level_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, _impl_.fuel_level_)
      + sizeof(Battery::_impl_.fuel_level_)
      - PROTOBUF_FIELD_OFFSET(Battery, _impl_.battery_percent_)>(
          reinterpret_cast<char*>(&_impl_.battery_percent_),
          reinterpret_cast<char*>(&other->_impl_.battery_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[2]);
}

// ===================================================================

class Light::_Internal {
 public:
  using HasBits = decltype(std::declval<Light>()._impl_._has_bits_);
  static void set_has_turn_light_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_beam_lamp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_brake_lamp_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_auto_light(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wiper_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lotion_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_horn_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lincoln_lamp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lincoln_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lincoln_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Light::Light(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Light)
}
Light::Light(const Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_light_type_){}
    , decltype(_impl_.beam_lamp_type_){}
    , decltype(_impl_.is_brake_lamp_on_){}
    , decltype(_impl_.is_auto_light_){}
    , decltype(_impl_.is_horn_on_){}
    , decltype(_impl_.wiper_gear_){}
    , decltype(_impl_.lotion_gear_){}
    , decltype(_impl_.lincoln_lamp_type_){}
    , decltype(_impl_.lincoln_wiper_){}
    , decltype(_impl_.lincoln_ambient_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.turn_light_type_, &from._impl_.turn_light_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lincoln_ambient_) -
    reinterpret_cast<char*>(&_impl_.turn_light_type_)) + sizeof(_impl_.lincoln_ambient_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

inline void Light::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_light_type_){0}
    , decltype(_impl_.beam_lamp_type_){0}
    , decltype(_impl_.is_brake_lamp_on_){false}
    , decltype(_impl_.is_auto_light_){false}
    , decltype(_impl_.is_horn_on_){false}
    , decltype(_impl_.wiper_gear_){0}
    , decltype(_impl_.lotion_gear_){0}
    , decltype(_impl_.lincoln_lamp_type_){0}
    , decltype(_impl_.lincoln_wiper_){0}
    , decltype(_impl_.lincoln_ambient_){0}
  };
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Light::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Light::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.turn_light_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lincoln_lamp_type_) -
        reinterpret_cast<char*>(&_impl_.turn_light_type_)) + sizeof(_impl_.lincoln_lamp_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.lincoln_wiper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lincoln_ambient_) -
        reinterpret_cast<char*>(&_impl_.lincoln_wiper_)) + sizeof(_impl_.lincoln_ambient_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Light::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_TurnLightType_IsValid(val))) {
            _internal_set_turn_light_type(static_cast<::apollo::canbus::Light_TurnLightType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_BeamLampType_IsValid(val))) {
            _internal_set_beam_lamp_type(static_cast<::apollo::canbus::Light_BeamLampType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_brake_lamp_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_brake_lamp_on(&has_bits);
          _impl_.is_brake_lamp_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_auto_light = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_auto_light(&has_bits);
          _impl_.is_auto_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wiper_gear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_wiper_gear(&has_bits);
          _impl_.wiper_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lotion_gear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lotion_gear(&has_bits);
          _impl_.lotion_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_horn_on = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_horn_on(&has_bits);
          _impl_.is_horn_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnLampType_IsValid(val))) {
            _internal_set_lincoln_lamp_type(static_cast<::apollo::canbus::Light_LincolnLampType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnWiperType_IsValid(val))) {
            _internal_set_lincoln_wiper(static_cast<::apollo::canbus::Light_LincolnWiperType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnAmbientType_IsValid(val))) {
            _internal_set_lincoln_ambient(static_cast<::apollo::canbus::Light_LincolnAmbientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Light::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_light_type(), target);
  }

  // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_beam_lamp_type(), target);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_brake_lamp_on(), target);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_auto_light(), target);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_wiper_gear(), target);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_lotion_gear(), target);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_horn_on(), target);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_lincoln_lamp_type(), target);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_lincoln_wiper(), target);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_lincoln_ambient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_light_type());
    }

    // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_beam_lamp_type());
    }

    // optional bool is_brake_lamp_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_auto_light = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_horn_on = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 wiper_gear = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wiper_gear());
    }

    // optional int32 lotion_gear = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lotion_gear());
    }

    // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lincoln_lamp_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lincoln_wiper());
    }

    // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lincoln_ambient());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Light::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Light::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Light::GetClassData() const { return &_class_data_; }

void Light::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Light *>(to)->MergeFrom(
      static_cast<const Light &>(from));
}


void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.turn_light_type_ = from._impl_.turn_light_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.beam_lamp_type_ = from._impl_.beam_lamp_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_brake_lamp_on_ = from._impl_.is_brake_lamp_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_auto_light_ = from._impl_.is_auto_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_horn_on_ = from._impl_.is_horn_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.wiper_gear_ = from._impl_.wiper_gear_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lotion_gear_ = from._impl_.lotion_gear_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.lincoln_lamp_type_ = from._impl_.lincoln_lamp_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.lincoln_wiper_ = from._impl_.lincoln_wiper_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.lincoln_ambient_ = from._impl_.lincoln_ambient_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::InternalSwap(Light* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Light, _impl_.lincoln_ambient_)
      + sizeof(Light::_impl_.lincoln_ambient_)
      - PROTOBUF_FIELD_OFFSET(Light, _impl_.turn_light_type_)>(
          reinterpret_cast<char*>(&_impl_.turn_light_type_),
          reinterpret_cast<char*>(&other->_impl_.turn_light_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Light::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[3]);
}

// ===================================================================

class Eps::_Internal {
 public:
  using HasBits = decltype(std::declval<Eps>()._impl_._has_bits_);
  static void set_has_is_eps_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_control_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_driver_hand_torq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_steering_angle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steering_angle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_trimming_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_calibration_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_failure_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_enter_autonomous_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steering_angle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_epas_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steering_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_calibration_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_timestamp_65(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

Eps::Eps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Eps)
}
Eps::Eps(const Eps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_driver_hand_torq_){}
    , decltype(_impl_.eps_control_state_){}
    , decltype(_impl_.is_eps_fail_){}
    , decltype(_impl_.is_steering_angle_valid_){}
    , decltype(_impl_.is_trimming_status_){}
    , decltype(_impl_.is_calibration_status_){}
    , decltype(_impl_.steering_angle_){}
    , decltype(_impl_.steering_angle_spd_){}
    , decltype(_impl_.allow_enter_autonomous_mode_){}
    , decltype(_impl_.current_driving_mode_){}
    , decltype(_impl_.steering_angle_cmd_){}
    , decltype(_impl_.vehicle_speed_){}
    , decltype(_impl_.epas_torque_){}
    , decltype(_impl_.is_failure_status_){}
    , decltype(_impl_.steering_enabled_){}
    , decltype(_impl_.driver_override_){}
    , decltype(_impl_.driver_activity_){}
    , decltype(_impl_.watchdog_fault_){}
    , decltype(_impl_.channel_1_fault_){}
    , decltype(_impl_.channel_2_fault_){}
    , decltype(_impl_.calibration_fault_){}
    , decltype(_impl_.timestamp_65_){}
    , decltype(_impl_.connector_fault_){}
    , decltype(_impl_.major_version_){}
    , decltype(_impl_.minor_version_){}
    , decltype(_impl_.build_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eps_driver_hand_torq_, &from._impl_.eps_driver_hand_torq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.build_number_) -
    reinterpret_cast<char*>(&_impl_.eps_driver_hand_torq_)) + sizeof(_impl_.build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

inline void Eps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_driver_hand_torq_){0}
    , decltype(_impl_.eps_control_state_){0}
    , decltype(_impl_.is_eps_fail_){false}
    , decltype(_impl_.is_steering_angle_valid_){false}
    , decltype(_impl_.is_trimming_status_){false}
    , decltype(_impl_.is_calibration_status_){false}
    , decltype(_impl_.steering_angle_){0}
    , decltype(_impl_.steering_angle_spd_){0}
    , decltype(_impl_.allow_enter_autonomous_mode_){0}
    , decltype(_impl_.current_driving_mode_){0}
    , decltype(_impl_.steering_angle_cmd_){0}
    , decltype(_impl_.vehicle_speed_){0}
    , decltype(_impl_.epas_torque_){0}
    , decltype(_impl_.is_failure_status_){false}
    , decltype(_impl_.steering_enabled_){false}
    , decltype(_impl_.driver_override_){false}
    , decltype(_impl_.driver_activity_){false}
    , decltype(_impl_.watchdog_fault_){false}
    , decltype(_impl_.channel_1_fault_){false}
    , decltype(_impl_.channel_2_fault_){false}
    , decltype(_impl_.calibration_fault_){false}
    , decltype(_impl_.timestamp_65_){0}
    , decltype(_impl_.connector_fault_){false}
    , decltype(_impl_.major_version_){0}
    , decltype(_impl_.minor_version_){0}
    , decltype(_impl_.build_number_){0}
  };
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Eps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Eps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.eps_driver_hand_torq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steering_angle_spd_) -
        reinterpret_cast<char*>(&_impl_.eps_driver_hand_torq_)) + sizeof(_impl_.steering_angle_spd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.allow_enter_autonomous_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.driver_override_) -
        reinterpret_cast<char*>(&_impl_.allow_enter_autonomous_mode_)) + sizeof(_impl_.driver_override_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.major_version_) -
        reinterpret_cast<char*>(&_impl_.driver_activity_)) + sizeof(_impl_.major_version_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&_impl_.minor_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.build_number_) -
        reinterpret_cast<char*>(&_impl_.minor_version_)) + sizeof(_impl_.build_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Eps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_eps_fail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_eps_fail(&has_bits);
          _impl_.is_eps_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Eps_Type_IsValid(val))) {
            _internal_set_eps_control_state(static_cast<::apollo::canbus::Eps_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double eps_driver_hand_torq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_eps_driver_hand_torq(&has_bits);
          _impl_.eps_driver_hand_torq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steering_angle_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_steering_angle_valid(&has_bits);
          _impl_.is_steering_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_steering_angle(&has_bits);
          _impl_.steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_angle_spd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_steering_angle_spd(&has_bits);
          _impl_.steering_angle_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trimming_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_trimming_status(&has_bits);
          _impl_.is_trimming_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_calibration_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_calibration_status(&has_bits);
          _impl_.is_calibration_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_failure_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_failure_status(&has_bits);
          _impl_.is_failure_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 allow_enter_autonomous_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_enter_autonomous_mode(&has_bits);
          _impl_.allow_enter_autonomous_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_driving_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_current_driving_mode(&has_bits);
          _impl_.current_driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_angle_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_steering_angle_cmd(&has_bits);
          _impl_.steering_angle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicle_speed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          _impl_.vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double epas_torque = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_epas_torque(&has_bits);
          _impl_.epas_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool steering_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_steering_enabled(&has_bits);
          _impl_.steering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_override = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_driver_override(&has_bits);
          _impl_.driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_driver_activity(&has_bits);
          _impl_.driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          _impl_.watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          _impl_.channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          _impl_.channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool calibration_fault = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_calibration_fault(&has_bits);
          _impl_.calibration_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connector_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_connector_fault(&has_bits);
          _impl_.connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_65 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_timestamp_65(&has_bits);
          _impl_.timestamp_65_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_major_version(&has_bits);
          _impl_.major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor_version = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_minor_version(&has_bits);
          _impl_.minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 build_number = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_build_number(&has_bits);
          _impl_.build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Eps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_fail(), target);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eps_control_state(), target);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_driver_hand_torq(), target);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_steering_angle_valid(), target);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_steering_angle(), target);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_steering_angle_spd(), target);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_trimming_status(), target);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_calibration_status(), target);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_failure_status(), target);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_allow_enter_autonomous_mode(), target);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_current_driving_mode(), target);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_steering_angle_cmd(), target);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_vehicle_speed(), target);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_epas_torque(), target);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_steering_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_channel_2_fault(), target);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_calibration_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_connector_fault(), target);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_timestamp_65(), target);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

size_t Eps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double eps_driver_hand_torq = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Eps.Type eps_control_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_eps_control_state());
    }

    // optional bool is_eps_fail = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_steering_angle_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_trimming_status = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_calibration_status = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double steering_angle = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double steering_angle_spd = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 allow_enter_autonomous_mode = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_allow_enter_autonomous_mode());
    }

    // optional int32 current_driving_mode = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_driving_mode());
    }

    // optional double steering_angle_cmd = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_speed = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double epas_torque = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool is_failure_status = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool steering_enabled = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool driver_activity = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool calibration_fault = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional double timestamp_65 = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional bool connector_fault = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 major_version = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 minor_version = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Eps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Eps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Eps::GetClassData() const { return &_class_data_; }

void Eps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Eps *>(to)->MergeFrom(
      static_cast<const Eps &>(from));
}


void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.eps_driver_hand_torq_ = from._impl_.eps_driver_hand_torq_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.eps_control_state_ = from._impl_.eps_control_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_eps_fail_ = from._impl_.is_eps_fail_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_steering_angle_valid_ = from._impl_.is_steering_angle_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_trimming_status_ = from._impl_.is_trimming_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_calibration_status_ = from._impl_.is_calibration_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.steering_angle_ = from._impl_.steering_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.steering_angle_spd_ = from._impl_.steering_angle_spd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.allow_enter_autonomous_mode_ = from._impl_.allow_enter_autonomous_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.current_driving_mode_ = from._impl_.current_driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.steering_angle_cmd_ = from._impl_.steering_angle_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.vehicle_speed_ = from._impl_.vehicle_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.epas_torque_ = from._impl_.epas_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.is_failure_status_ = from._impl_.is_failure_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.steering_enabled_ = from._impl_.steering_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.driver_override_ = from._impl_.driver_override_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.driver_activity_ = from._impl_.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.watchdog_fault_ = from._impl_.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.channel_1_fault_ = from._impl_.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.channel_2_fault_ = from._impl_.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.calibration_fault_ = from._impl_.calibration_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.timestamp_65_ = from._impl_.timestamp_65_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.connector_fault_ = from._impl_.connector_fault_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.major_version_ = from._impl_.major_version_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.minor_version_ = from._impl_.minor_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.build_number_ = from._impl_.build_number_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {
  return true;
}

void Eps::InternalSwap(Eps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Eps, _impl_.build_number_)
      + sizeof(Eps::_impl_.build_number_)
      - PROTOBUF_FIELD_OFFSET(Eps, _impl_.eps_driver_hand_torq_)>(
          reinterpret_cast<char*>(&_impl_.eps_driver_hand_torq_),
          reinterpret_cast<char*>(&other->_impl_.eps_driver_hand_torq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Eps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[4]);
}

// ===================================================================

class VehicleSpd::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleSpd>()._impl_._has_bits_);
  static void set_has_is_vehicle_standstill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_vehicle_spd_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_wheel_spd_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wheel_direction_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wheel_spd_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_wheel_spd_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheel_direction_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wheel_spd_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_wheel_spd_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wheel_direction_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wheel_spd_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_wheel_spd_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_wheel_direction_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wheel_spd_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_yaw_rate_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw_rate_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_ax_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ax(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ax_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_ay_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ay(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ay_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_lat_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_long_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_vert_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_roll_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_acc_est(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

VehicleSpd::VehicleSpd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.VehicleSpd)
}
VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_spd_){}
    , decltype(_impl_.is_vehicle_standstill_){}
    , decltype(_impl_.is_vehicle_spd_valid_){}
    , decltype(_impl_.is_wheel_spd_rr_valid_){}
    , decltype(_impl_.is_wheel_spd_rl_valid_){}
    , decltype(_impl_.wheel_direction_rr_){}
    , decltype(_impl_.wheel_spd_rr_){}
    , decltype(_impl_.wheel_spd_rl_){}
    , decltype(_impl_.wheel_direction_rl_){}
    , decltype(_impl_.wheel_direction_fr_){}
    , decltype(_impl_.wheel_spd_fr_){}
    , decltype(_impl_.wheel_direction_fl_){}
    , decltype(_impl_.is_wheel_spd_fr_valid_){}
    , decltype(_impl_.is_wheel_spd_fl_valid_){}
    , decltype(_impl_.is_yaw_rate_valid_){}
    , decltype(_impl_.is_ax_valid_){}
    , decltype(_impl_.wheel_spd_fl_){}
    , decltype(_impl_.yaw_rate_){}
    , decltype(_impl_.yaw_rate_offset_){}
    , decltype(_impl_.ax_){}
    , decltype(_impl_.ax_offset_){}
    , decltype(_impl_.ay_){}
    , decltype(_impl_.ay_offset_){}
    , decltype(_impl_.lat_acc_){}
    , decltype(_impl_.long_acc_){}
    , decltype(_impl_.vert_acc_){}
    , decltype(_impl_.roll_rate_){}
    , decltype(_impl_.acc_est_){}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.is_ay_valid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_spd_, &from._impl_.vehicle_spd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_ay_valid_) -
    reinterpret_cast<char*>(&_impl_.vehicle_spd_)) + sizeof(_impl_.is_ay_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

inline void VehicleSpd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_spd_){0}
    , decltype(_impl_.is_vehicle_standstill_){false}
    , decltype(_impl_.is_vehicle_spd_valid_){false}
    , decltype(_impl_.is_wheel_spd_rr_valid_){false}
    , decltype(_impl_.is_wheel_spd_rl_valid_){false}
    , decltype(_impl_.wheel_direction_rr_){0}
    , decltype(_impl_.wheel_spd_rr_){0}
    , decltype(_impl_.wheel_spd_rl_){0}
    , decltype(_impl_.wheel_direction_rl_){0}
    , decltype(_impl_.wheel_direction_fr_){0}
    , decltype(_impl_.wheel_spd_fr_){0}
    , decltype(_impl_.wheel_direction_fl_){0}
    , decltype(_impl_.is_wheel_spd_fr_valid_){false}
    , decltype(_impl_.is_wheel_spd_fl_valid_){false}
    , decltype(_impl_.is_yaw_rate_valid_){false}
    , decltype(_impl_.is_ax_valid_){false}
    , decltype(_impl_.wheel_spd_fl_){0}
    , decltype(_impl_.yaw_rate_){0}
    , decltype(_impl_.yaw_rate_offset_){0}
    , decltype(_impl_.ax_){0}
    , decltype(_impl_.ax_offset_){0}
    , decltype(_impl_.ay_){0}
    , decltype(_impl_.ay_offset_){0}
    , decltype(_impl_.lat_acc_){0}
    , decltype(_impl_.long_acc_){0}
    , decltype(_impl_.vert_acc_){0}
    , decltype(_impl_.roll_rate_){0}
    , decltype(_impl_.acc_est_){0}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.is_ay_valid_){false}
  };
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleSpd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleSpd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vehicle_spd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wheel_spd_rl_) -
        reinterpret_cast<char*>(&_impl_.vehicle_spd_)) + sizeof(_impl_.wheel_spd_rl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.wheel_direction_rl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_ax_valid_) -
        reinterpret_cast<char*>(&_impl_.wheel_direction_rl_)) + sizeof(_impl_.is_ax_valid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.wheel_spd_fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lat_acc_) -
        reinterpret_cast<char*>(&_impl_.wheel_spd_fl_)) + sizeof(_impl_.lat_acc_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.long_acc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_ay_valid_) -
        reinterpret_cast<char*>(&_impl_.long_acc_)) + sizeof(_impl_.is_ay_valid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSpd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_vehicle_standstill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_vehicle_standstill(&has_bits);
          _impl_.is_vehicle_standstill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_vehicle_spd_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_vehicle_spd_valid(&has_bits);
          _impl_.is_vehicle_spd_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicle_spd = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_vehicle_spd(&has_bits);
          _impl_.vehicle_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rr_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_wheel_spd_rr_valid(&has_bits);
          _impl_.is_wheel_spd_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_rr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_wheel_spd_rr(&has_bits);
          _impl_.wheel_spd_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rl_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_wheel_spd_rl_valid(&has_bits);
          _impl_.is_wheel_spd_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_rl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_wheel_spd_rl(&has_bits);
          _impl_.wheel_spd_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fr_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_wheel_spd_fr_valid(&has_bits);
          _impl_.is_wheel_spd_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_fr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_wheel_spd_fr(&has_bits);
          _impl_.wheel_spd_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fl_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_wheel_spd_fl_valid(&has_bits);
          _impl_.is_wheel_spd_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_spd_fl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_wheel_spd_fl(&has_bits);
          _impl_.wheel_spd_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_yaw_rate_valid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_yaw_rate_valid(&has_bits);
          _impl_.is_yaw_rate_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double yaw_rate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_yaw_rate(&has_bits);
          _impl_.yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double yaw_rate_offset = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_yaw_rate_offset(&has_bits);
          _impl_.yaw_rate_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ax_valid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_ax_valid(&has_bits);
          _impl_.is_ax_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ax = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_ax(&has_bits);
          _impl_.ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ax_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_ax_offset(&has_bits);
          _impl_.ax_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ay_valid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_ay_valid(&has_bits);
          _impl_.is_ay_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_ay(&has_bits);
          _impl_.ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ay_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_ay_offset(&has_bits);
          _impl_.ay_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lat_acc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_lat_acc(&has_bits);
          _impl_.lat_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double long_acc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_long_acc(&has_bits);
          _impl_.long_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vert_acc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_vert_acc(&has_bits);
          _impl_.vert_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roll_rate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_roll_rate(&has_bits);
          _impl_.roll_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc_est = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_acc_est(&has_bits);
          _impl_.acc_est_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_sec = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleSpd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_vehicle_standstill(), target);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_vehicle_spd_valid(), target);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_vehicle_spd(), target);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_wheel_spd_fl(), target);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_yaw_rate_valid(), target);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_yaw_rate(), target);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_yaw_rate_offset(), target);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_ax_valid(), target);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_ax(), target);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_ax_offset(), target);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_ay_valid(), target);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_ay(), target);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_ay_offset(), target);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_lat_acc(), target);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_long_acc(), target);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_vert_acc(), target);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_roll_rate(), target);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_acc_est(), target);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_timestamp_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

size_t VehicleSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double vehicle_spd = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_vehicle_standstill = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_vehicle_spd_valid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rr_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_rr());
    }

    // optional double wheel_spd_rr = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_rl());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_fr());
    }

    // optional double wheel_spd_fr = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wheel_direction_fl());
    }

    // optional bool is_wheel_spd_fr_valid = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_yaw_rate_valid = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_ax_valid = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double wheel_spd_fl = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double yaw_rate = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double yaw_rate_offset = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double ax = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double ax_offset = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double ay = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double ay_offset = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double lat_acc = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional double long_acc = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double vert_acc = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double roll_rate = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double acc_est = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_ay_valid = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleSpd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleSpd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleSpd::GetClassData() const { return &_class_data_; }

void VehicleSpd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleSpd *>(to)->MergeFrom(
      static_cast<const VehicleSpd &>(from));
}


void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_spd_ = from._impl_.vehicle_spd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_vehicle_standstill_ = from._impl_.is_vehicle_standstill_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_vehicle_spd_valid_ = from._impl_.is_vehicle_spd_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_wheel_spd_rr_valid_ = from._impl_.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_wheel_spd_rl_valid_ = from._impl_.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.wheel_direction_rr_ = from._impl_.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.wheel_spd_rr_ = from._impl_.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.wheel_spd_rl_ = from._impl_.wheel_spd_rl_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.wheel_direction_rl_ = from._impl_.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.wheel_direction_fr_ = from._impl_.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.wheel_spd_fr_ = from._impl_.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.wheel_direction_fl_ = from._impl_.wheel_direction_fl_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.is_wheel_spd_fr_valid_ = from._impl_.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.is_wheel_spd_fl_valid_ = from._impl_.is_wheel_spd_fl_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.is_yaw_rate_valid_ = from._impl_.is_yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.is_ax_valid_ = from._impl_.is_ax_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.wheel_spd_fl_ = from._impl_.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.yaw_rate_ = from._impl_.yaw_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.yaw_rate_offset_ = from._impl_.yaw_rate_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.ax_ = from._impl_.ax_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.ax_offset_ = from._impl_.ax_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.ay_ = from._impl_.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.ay_offset_ = from._impl_.ay_offset_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.lat_acc_ = from._impl_.lat_acc_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.long_acc_ = from._impl_.long_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.vert_acc_ = from._impl_.vert_acc_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.roll_rate_ = from._impl_.roll_rate_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.acc_est_ = from._impl_.acc_est_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.is_ay_valid_ = from._impl_.is_ay_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {
  return true;
}

void VehicleSpd::InternalSwap(VehicleSpd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSpd, _impl_.is_ay_valid_)
      + sizeof(VehicleSpd::_impl_.is_ay_valid_)
      - PROTOBUF_FIELD_OFFSET(VehicleSpd, _impl_.vehicle_spd_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_spd_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_spd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSpd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[5]);
}

// ===================================================================

class Deceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<Deceleration>()._impl_._has_bits_);
  static void set_has_is_deceleration_available(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_deceleration_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_evb_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evb_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_pressure_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Deceleration::Deceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Deceleration)
}
Deceleration::Deceleration(const Deceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deceleration_){}
    , decltype(_impl_.is_evb_fail_){}
    , decltype(_impl_.evb_pressure_){}
    , decltype(_impl_.brake_pressure_){}
    , decltype(_impl_.brake_pressure_spd_){}
    , decltype(_impl_.is_deceleration_available_){}
    , decltype(_impl_.is_deceleration_active_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.deceleration_, &from._impl_.deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_deceleration_active_) -
    reinterpret_cast<char*>(&_impl_.deceleration_)) + sizeof(_impl_.is_deceleration_active_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

inline void Deceleration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deceleration_){0}
    , decltype(_impl_.is_evb_fail_){0}
    , decltype(_impl_.evb_pressure_){0}
    , decltype(_impl_.brake_pressure_){0}
    , decltype(_impl_.brake_pressure_spd_){0}
    , decltype(_impl_.is_deceleration_available_){false}
    , decltype(_impl_.is_deceleration_active_){false}
  };
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Deceleration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.deceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_deceleration_active_) -
        reinterpret_cast<char*>(&_impl_.deceleration_)) + sizeof(_impl_.is_deceleration_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deceleration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_deceleration_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_deceleration_available(&has_bits);
          _impl_.is_deceleration_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_deceleration_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_deceleration_active(&has_bits);
          _impl_.is_deceleration_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double deceleration = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_deceleration(&has_bits);
          _impl_.deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double is_evb_fail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_is_evb_fail(&has_bits);
          _impl_.is_evb_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double evb_pressure = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_evb_pressure(&has_bits);
          _impl_.evb_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_pressure = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_brake_pressure(&has_bits);
          _impl_.brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_pressure_spd = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_brake_pressure_spd(&has_bits);
          _impl_.brake_pressure_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Deceleration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_deceleration_available(), target);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_deceleration_active(), target);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_deceleration(), target);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_is_evb_fail(), target);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_evb_pressure(), target);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_brake_pressure(), target);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_brake_pressure_spd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

size_t Deceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double deceleration = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double is_evb_fail = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double evb_pressure = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure_spd = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_deceleration_available = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_deceleration_active = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deceleration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Deceleration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deceleration::GetClassData() const { return &_class_data_; }

void Deceleration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Deceleration *>(to)->MergeFrom(
      static_cast<const Deceleration &>(from));
}


void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deceleration_ = from._impl_.deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_evb_fail_ = from._impl_.is_evb_fail_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.evb_pressure_ = from._impl_.evb_pressure_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.brake_pressure_ = from._impl_.brake_pressure_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.brake_pressure_spd_ = from._impl_.brake_pressure_spd_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_deceleration_available_ = from._impl_.is_deceleration_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_deceleration_active_ = from._impl_.is_deceleration_active_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {
  return true;
}

void Deceleration::InternalSwap(Deceleration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deceleration, _impl_.is_deceleration_active_)
      + sizeof(Deceleration::_impl_.is_deceleration_active_)
      - PROTOBUF_FIELD_OFFSET(Deceleration, _impl_.deceleration_)>(
          reinterpret_cast<char*>(&_impl_.deceleration_),
          reinterpret_cast<char*>(&other->_impl_.deceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deceleration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[6]);
}

// ===================================================================

class Brake::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake>()._impl_._has_bits_);
  static void set_has_is_brake_pedal_pressed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_brake_force_exist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_brake_over_heat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_hand_brake_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_pedal_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_brake_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_brake_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_brake_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_boo_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_boo_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_boo_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_watchdog_applying_brakes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_watchdog_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_brake_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_boo_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_brake_torque_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_hsa_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_brake_torque_act(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hsa_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_wheel_torque_act(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

Brake::Brake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake)
}
Brake::Brake(const Brake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_position_){}
    , decltype(_impl_.is_brake_pedal_pressed_){}
    , decltype(_impl_.is_brake_force_exist_){}
    , decltype(_impl_.is_brake_over_heat_){}
    , decltype(_impl_.is_hand_brake_on_){}
    , decltype(_impl_.is_brake_valid_){}
    , decltype(_impl_.boo_input_){}
    , decltype(_impl_.boo_cmd_){}
    , decltype(_impl_.boo_output_){}
    , decltype(_impl_.brake_input_){}
    , decltype(_impl_.brake_cmd_){}
    , decltype(_impl_.brake_output_){}
    , decltype(_impl_.watchdog_source_){}
    , decltype(_impl_.watchdog_applying_brakes_){}
    , decltype(_impl_.brake_enabled_){}
    , decltype(_impl_.driver_override_){}
    , decltype(_impl_.driver_activity_){}
    , decltype(_impl_.watchdog_fault_){}
    , decltype(_impl_.channel_1_fault_){}
    , decltype(_impl_.channel_2_fault_){}
    , decltype(_impl_.boo_fault_){}
    , decltype(_impl_.connector_fault_){}
    , decltype(_impl_.brake_torque_req_){}
    , decltype(_impl_.brake_torque_act_){}
    , decltype(_impl_.hsa_status_){}
    , decltype(_impl_.hsa_mode_){}
    , decltype(_impl_.wheel_torque_act_){}
    , decltype(_impl_.major_version_){}
    , decltype(_impl_.minor_version_){}
    , decltype(_impl_.build_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brake_pedal_position_, &from._impl_.brake_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.build_number_) -
    reinterpret_cast<char*>(&_impl_.brake_pedal_position_)) + sizeof(_impl_.build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

inline void Brake::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_pedal_position_){0}
    , decltype(_impl_.is_brake_pedal_pressed_){false}
    , decltype(_impl_.is_brake_force_exist_){false}
    , decltype(_impl_.is_brake_over_heat_){false}
    , decltype(_impl_.is_hand_brake_on_){false}
    , decltype(_impl_.is_brake_valid_){false}
    , decltype(_impl_.boo_input_){false}
    , decltype(_impl_.boo_cmd_){false}
    , decltype(_impl_.boo_output_){false}
    , decltype(_impl_.brake_input_){0}
    , decltype(_impl_.brake_cmd_){0}
    , decltype(_impl_.brake_output_){0}
    , decltype(_impl_.watchdog_source_){0}
    , decltype(_impl_.watchdog_applying_brakes_){false}
    , decltype(_impl_.brake_enabled_){false}
    , decltype(_impl_.driver_override_){false}
    , decltype(_impl_.driver_activity_){false}
    , decltype(_impl_.watchdog_fault_){false}
    , decltype(_impl_.channel_1_fault_){false}
    , decltype(_impl_.channel_2_fault_){false}
    , decltype(_impl_.boo_fault_){false}
    , decltype(_impl_.connector_fault_){false}
    , decltype(_impl_.brake_torque_req_){0}
    , decltype(_impl_.brake_torque_act_){0}
    , decltype(_impl_.hsa_status_){0}
    , decltype(_impl_.hsa_mode_){0}
    , decltype(_impl_.wheel_torque_act_){0}
    , decltype(_impl_.major_version_){0}
    , decltype(_impl_.minor_version_){0}
    , decltype(_impl_.build_number_){0}
  };
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.brake_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.boo_cmd_) -
        reinterpret_cast<char*>(&_impl_.brake_pedal_position_)) + sizeof(_impl_.boo_cmd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.boo_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.driver_override_) -
        reinterpret_cast<char*>(&_impl_.boo_output_)) + sizeof(_impl_.driver_override_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_torque_act_) -
        reinterpret_cast<char*>(&_impl_.driver_activity_)) + sizeof(_impl_.brake_torque_act_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.hsa_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.build_number_) -
        reinterpret_cast<char*>(&_impl_.hsa_status_)) + sizeof(_impl_.build_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_brake_pedal_pressed = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_brake_pedal_pressed(&has_bits);
          _impl_.is_brake_pedal_pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_brake_force_exist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_brake_force_exist(&has_bits);
          _impl_.is_brake_force_exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_brake_over_heat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_brake_over_heat(&has_bits);
          _impl_.is_brake_over_heat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_hand_brake_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_hand_brake_on(&has_bits);
          _impl_.is_hand_brake_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_pedal_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_brake_pedal_position(&has_bits);
          _impl_.brake_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_brake_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_brake_valid(&has_bits);
          _impl_.is_brake_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_input = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_brake_input(&has_bits);
          _impl_.brake_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_brake_cmd(&has_bits);
          _impl_.brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_output = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_brake_output(&has_bits);
          _impl_.brake_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool boo_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_boo_input(&has_bits);
          _impl_.boo_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool boo_cmd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_boo_cmd(&has_bits);
          _impl_.boo_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool boo_output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_boo_output(&has_bits);
          _impl_.boo_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watchdog_applying_brakes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_watchdog_applying_brakes(&has_bits);
          _impl_.watchdog_applying_brakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 watchdog_source = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_watchdog_source(&has_bits);
          _impl_.watchdog_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool brake_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_brake_enabled(&has_bits);
          _impl_.brake_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_override = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_driver_override(&has_bits);
          _impl_.driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_driver_activity(&has_bits);
          _impl_.driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          _impl_.watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          _impl_.channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          _impl_.channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool boo_fault = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_boo_fault(&has_bits);
          _impl_.boo_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connector_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_connector_fault(&has_bits);
          _impl_.connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double brake_torque_req = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_brake_torque_req(&has_bits);
          _impl_.brake_torque_req_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_HSAStatusType_IsValid(val))) {
            _internal_set_hsa_status(static_cast<::apollo::canbus::Brake_HSAStatusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double brake_torque_act = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_brake_torque_act(&has_bits);
          _impl_.brake_torque_act_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_HSAModeType_IsValid(val))) {
            _internal_set_hsa_mode(static_cast<::apollo::canbus::Brake_HSAModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_torque_act = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_wheel_torque_act(&has_bits);
          _impl_.wheel_torque_act_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_version = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_major_version(&has_bits);
          _impl_.major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor_version = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_minor_version(&has_bits);
          _impl_.minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 build_number = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_build_number(&has_bits);
          _impl_.build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_brake_pedal_pressed(), target);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_brake_force_exist(), target);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_brake_over_heat(), target);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_hand_brake_on(), target);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_brake_pedal_position(), target);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_brake_valid(), target);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_brake_input(), target);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_brake_cmd(), target);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_brake_output(), target);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_boo_input(), target);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_boo_cmd(), target);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_boo_output(), target);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_watchdog_applying_brakes(), target);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_watchdog_source(), target);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_brake_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_channel_2_fault(), target);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_boo_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_connector_fault(), target);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_brake_torque_req(), target);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_hsa_status(), target);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_brake_torque_act(), target);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_hsa_mode(), target);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_wheel_torque_act(), target);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

size_t Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double brake_pedal_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_brake_pedal_pressed = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_force_exist = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_over_heat = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_hand_brake_on = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool boo_input = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool boo_cmd = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool boo_output = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional double brake_input = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double brake_cmd = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double brake_output = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 watchdog_source = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_watchdog_source());
    }

    // optional bool watchdog_applying_brakes = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool brake_enabled = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool driver_activity = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool boo_fault = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool connector_fault = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional double brake_torque_req = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double brake_torque_act = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hsa_status());
    }

    // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hsa_mode());
    }

    // optional double wheel_torque_act = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

    // optional int32 minor_version = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake::GetClassData() const { return &_class_data_; }

void Brake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake *>(to)->MergeFrom(
      static_cast<const Brake &>(from));
}


void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.brake_pedal_position_ = from._impl_.brake_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_brake_pedal_pressed_ = from._impl_.is_brake_pedal_pressed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_brake_force_exist_ = from._impl_.is_brake_force_exist_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_brake_over_heat_ = from._impl_.is_brake_over_heat_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_hand_brake_on_ = from._impl_.is_hand_brake_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_brake_valid_ = from._impl_.is_brake_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.boo_input_ = from._impl_.boo_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.boo_cmd_ = from._impl_.boo_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.boo_output_ = from._impl_.boo_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.brake_input_ = from._impl_.brake_input_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.brake_cmd_ = from._impl_.brake_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.brake_output_ = from._impl_.brake_output_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.watchdog_source_ = from._impl_.watchdog_source_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.watchdog_applying_brakes_ = from._impl_.watchdog_applying_brakes_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.brake_enabled_ = from._impl_.brake_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.driver_override_ = from._impl_.driver_override_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.driver_activity_ = from._impl_.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.watchdog_fault_ = from._impl_.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.channel_1_fault_ = from._impl_.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.channel_2_fault_ = from._impl_.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.boo_fault_ = from._impl_.boo_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.connector_fault_ = from._impl_.connector_fault_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.brake_torque_req_ = from._impl_.brake_torque_req_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.brake_torque_act_ = from._impl_.brake_torque_act_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.hsa_status_ = from._impl_.hsa_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.hsa_mode_ = from._impl_.hsa_mode_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.wheel_torque_act_ = from._impl_.wheel_torque_act_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.major_version_ = from._impl_.major_version_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.minor_version_ = from._impl_.minor_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.build_number_ = from._impl_.build_number_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {
  return true;
}

void Brake::InternalSwap(Brake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake, _impl_.build_number_)
      + sizeof(Brake::_impl_.build_number_)
      - PROTOBUF_FIELD_OFFSET(Brake, _impl_.brake_pedal_position_)>(
          reinterpret_cast<char*>(&_impl_.brake_pedal_position_),
          reinterpret_cast<char*>(&other->_impl_.brake_pedal_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[7]);
}

// ===================================================================

class Epb::_Internal {
 public:
  using HasBits = decltype(std::declval<Epb>()._impl_._has_bits_);
  static void set_has_is_epb_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_epb_released(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_epb_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_brake_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Epb::Epb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Epb)
}
Epb::Epb(const Epb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_epb_error_){}
    , decltype(_impl_.is_epb_released_){}
    , decltype(_impl_.epb_status_){}
    , decltype(_impl_.parking_brake_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_epb_error_, &from._impl_.is_epb_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parking_brake_status_) -
    reinterpret_cast<char*>(&_impl_.is_epb_error_)) + sizeof(_impl_.parking_brake_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

inline void Epb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_epb_error_){false}
    , decltype(_impl_.is_epb_released_){false}
    , decltype(_impl_.epb_status_){0}
    , decltype(_impl_.parking_brake_status_){0}
  };
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Epb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Epb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.is_epb_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parking_brake_status_) -
        reinterpret_cast<char*>(&_impl_.is_epb_error_)) + sizeof(_impl_.parking_brake_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Epb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_epb_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_epb_error(&has_bits);
          _impl_.is_epb_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_epb_released = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_epb_released(&has_bits);
          _impl_.is_epb_released_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 epb_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_epb_status(&has_bits);
          _impl_.epb_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Epb_PBrakeType_IsValid(val))) {
            _internal_set_parking_brake_status(static_cast<::apollo::canbus::Epb_PBrakeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Epb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_epb_error(), target);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_released(), target);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_epb_status(), target);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parking_brake_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

size_t Epb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_epb_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_released = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 epb_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_epb_status());
    }

    // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_brake_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Epb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Epb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Epb::GetClassData() const { return &_class_data_; }

void Epb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Epb *>(to)->MergeFrom(
      static_cast<const Epb &>(from));
}


void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.is_epb_error_ = from._impl_.is_epb_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_epb_released_ = from._impl_.is_epb_released_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.epb_status_ = from._impl_.epb_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parking_brake_status_ = from._impl_.parking_brake_status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {
  return true;
}

void Epb::InternalSwap(Epb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Epb, _impl_.parking_brake_status_)
      + sizeof(Epb::_impl_.parking_brake_status_)
      - PROTOBUF_FIELD_OFFSET(Epb, _impl_.is_epb_error_)>(
          reinterpret_cast<char*>(&_impl_.is_epb_error_),
          reinterpret_cast<char*>(&other->_impl_.is_epb_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Epb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[8]);
}

// ===================================================================

class Gas::_Internal {
 public:
  using HasBits = decltype(std::declval<Gas>()._impl_._has_bits_);
  static void set_has_is_gas_pedal_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_gas_pedal_pressed_more(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gas_pedal_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_gas_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttle_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_throttle_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_watchdog_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_throttle_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_accelerator_pedal(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_accelerator_pedal_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

Gas::Gas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gas)
}
Gas::Gas(const Gas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gas_pedal_position_){}
    , decltype(_impl_.is_gas_pedal_error_){}
    , decltype(_impl_.is_gas_pedal_pressed_more_){}
    , decltype(_impl_.is_gas_valid_){}
    , decltype(_impl_.throttle_enabled_){}
    , decltype(_impl_.watchdog_source_){}
    , decltype(_impl_.throttle_input_){}
    , decltype(_impl_.throttle_cmd_){}
    , decltype(_impl_.throttle_output_){}
    , decltype(_impl_.driver_override_){}
    , decltype(_impl_.driver_activity_){}
    , decltype(_impl_.watchdog_fault_){}
    , decltype(_impl_.channel_1_fault_){}
    , decltype(_impl_.channel_2_fault_){}
    , decltype(_impl_.connector_fault_){}
    , decltype(_impl_.accelerator_pedal_){}
    , decltype(_impl_.accelerator_pedal_rate_){}
    , decltype(_impl_.major_version_){}
    , decltype(_impl_.minor_version_){}
    , decltype(_impl_.build_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gas_pedal_position_, &from._impl_.gas_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.build_number_) -
    reinterpret_cast<char*>(&_impl_.gas_pedal_position_)) + sizeof(_impl_.build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

inline void Gas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gas_pedal_position_){0}
    , decltype(_impl_.is_gas_pedal_error_){false}
    , decltype(_impl_.is_gas_pedal_pressed_more_){false}
    , decltype(_impl_.is_gas_valid_){false}
    , decltype(_impl_.throttle_enabled_){false}
    , decltype(_impl_.watchdog_source_){0}
    , decltype(_impl_.throttle_input_){0}
    , decltype(_impl_.throttle_cmd_){0}
    , decltype(_impl_.throttle_output_){0}
    , decltype(_impl_.driver_override_){false}
    , decltype(_impl_.driver_activity_){false}
    , decltype(_impl_.watchdog_fault_){false}
    , decltype(_impl_.channel_1_fault_){false}
    , decltype(_impl_.channel_2_fault_){false}
    , decltype(_impl_.connector_fault_){false}
    , decltype(_impl_.accelerator_pedal_){0}
    , decltype(_impl_.accelerator_pedal_rate_){0}
    , decltype(_impl_.major_version_){0}
    , decltype(_impl_.minor_version_){0}
    , decltype(_impl_.build_number_){0}
  };
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.gas_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.throttle_cmd_) -
        reinterpret_cast<char*>(&_impl_.gas_pedal_position_)) + sizeof(_impl_.throttle_cmd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.throttle_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accelerator_pedal_) -
        reinterpret_cast<char*>(&_impl_.throttle_output_)) + sizeof(_impl_.accelerator_pedal_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.accelerator_pedal_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.build_number_) -
        reinterpret_cast<char*>(&_impl_.accelerator_pedal_rate_)) + sizeof(_impl_.build_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_gas_pedal_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_gas_pedal_error(&has_bits);
          _impl_.is_gas_pedal_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_gas_pedal_pressed_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_gas_pedal_pressed_more(&has_bits);
          _impl_.is_gas_pedal_pressed_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gas_pedal_position = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_gas_pedal_position(&has_bits);
          _impl_.gas_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_gas_valid = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_gas_valid(&has_bits);
          _impl_.is_gas_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_throttle_input(&has_bits);
          _impl_.throttle_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_throttle_cmd(&has_bits);
          _impl_.throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_throttle_output(&has_bits);
          _impl_.throttle_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 watchdog_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_watchdog_source(&has_bits);
          _impl_.watchdog_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool throttle_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_throttle_enabled(&has_bits);
          _impl_.throttle_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_override = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_driver_override(&has_bits);
          _impl_.driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_activity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_driver_activity(&has_bits);
          _impl_.driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          _impl_.watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          _impl_.channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          _impl_.channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connector_fault = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_connector_fault(&has_bits);
          _impl_.connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double accelerator_pedal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_accelerator_pedal(&has_bits);
          _impl_.accelerator_pedal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accelerator_pedal_rate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_accelerator_pedal_rate(&has_bits);
          _impl_.accelerator_pedal_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_major_version(&has_bits);
          _impl_.major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_minor_version(&has_bits);
          _impl_.minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 build_number = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_build_number(&has_bits);
          _impl_.build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_gas_pedal_error(), target);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_gas_pedal_pressed_more(), target);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_gas_pedal_position(), target);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_gas_valid(), target);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_throttle_input(), target);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_throttle_cmd(), target);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_throttle_output(), target);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_watchdog_source(), target);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_throttle_enabled(), target);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_channel_2_fault(), target);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_connector_fault(), target);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_accelerator_pedal(), target);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_accelerator_pedal_rate(), target);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

size_t Gas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double gas_pedal_position = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_gas_pedal_error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_pedal_pressed_more = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_valid = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool throttle_enabled = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 watchdog_source = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_watchdog_source());
    }

    // optional double throttle_input = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double throttle_output = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional bool driver_override = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool driver_activity = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool watchdog_fault = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool channel_1_fault = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool channel_2_fault = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool connector_fault = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional double accelerator_pedal = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double accelerator_pedal_rate = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

    // optional int32 minor_version = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gas::GetClassData() const { return &_class_data_; }

void Gas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gas *>(to)->MergeFrom(
      static_cast<const Gas &>(from));
}


void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gas_pedal_position_ = from._impl_.gas_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_gas_pedal_error_ = from._impl_.is_gas_pedal_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_gas_pedal_pressed_more_ = from._impl_.is_gas_pedal_pressed_more_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_gas_valid_ = from._impl_.is_gas_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.throttle_enabled_ = from._impl_.throttle_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.watchdog_source_ = from._impl_.watchdog_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.throttle_input_ = from._impl_.throttle_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.throttle_cmd_ = from._impl_.throttle_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.throttle_output_ = from._impl_.throttle_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.driver_override_ = from._impl_.driver_override_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.driver_activity_ = from._impl_.driver_activity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.watchdog_fault_ = from._impl_.watchdog_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.channel_1_fault_ = from._impl_.channel_1_fault_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.channel_2_fault_ = from._impl_.channel_2_fault_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.connector_fault_ = from._impl_.connector_fault_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.accelerator_pedal_ = from._impl_.accelerator_pedal_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.accelerator_pedal_rate_ = from._impl_.accelerator_pedal_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.major_version_ = from._impl_.major_version_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.minor_version_ = from._impl_.minor_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.build_number_ = from._impl_.build_number_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {
  return true;
}

void Gas::InternalSwap(Gas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gas, _impl_.build_number_)
      + sizeof(Gas::_impl_.build_number_)
      - PROTOBUF_FIELD_OFFSET(Gas, _impl_.gas_pedal_position_)>(
          reinterpret_cast<char*>(&_impl_.gas_pedal_position_),
          reinterpret_cast<char*>(&other->_impl_.gas_pedal_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[9]);
}

// ===================================================================

class Esp::_Internal {
 public:
  using HasBits = decltype(std::declval<Esp>()._impl_._has_bits_);
  static void set_has_is_esp_acc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_esp_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_esp_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_abs_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_abs_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_tcsvdc_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_abs_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_stab_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_stab_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_trac_active(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_trac_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Esp::Esp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Esp)
}
Esp::Esp(const Esp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_esp_acc_error_){}
    , decltype(_impl_.is_esp_on_){}
    , decltype(_impl_.is_esp_active_){}
    , decltype(_impl_.is_abs_error_){}
    , decltype(_impl_.is_abs_active_){}
    , decltype(_impl_.is_tcsvdc_fail_){}
    , decltype(_impl_.is_abs_enabled_){}
    , decltype(_impl_.is_stab_active_){}
    , decltype(_impl_.is_stab_enabled_){}
    , decltype(_impl_.is_trac_active_){}
    , decltype(_impl_.is_trac_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_esp_acc_error_, &from._impl_.is_esp_acc_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_trac_enabled_) -
    reinterpret_cast<char*>(&_impl_.is_esp_acc_error_)) + sizeof(_impl_.is_trac_enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

inline void Esp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.is_esp_acc_error_){false}
    , decltype(_impl_.is_esp_on_){false}
    , decltype(_impl_.is_esp_active_){false}
    , decltype(_impl_.is_abs_error_){false}
    , decltype(_impl_.is_abs_active_){false}
    , decltype(_impl_.is_tcsvdc_fail_){false}
    , decltype(_impl_.is_abs_enabled_){false}
    , decltype(_impl_.is_stab_active_){false}
    , decltype(_impl_.is_stab_enabled_){false}
    , decltype(_impl_.is_trac_active_){false}
    , decltype(_impl_.is_trac_enabled_){false}
  };
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Esp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Esp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.is_esp_acc_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_stab_active_) -
        reinterpret_cast<char*>(&_impl_.is_esp_acc_error_)) + sizeof(_impl_.is_stab_active_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.is_stab_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_trac_enabled_) -
        reinterpret_cast<char*>(&_impl_.is_stab_enabled_)) + sizeof(_impl_.is_trac_enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Esp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_esp_acc_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_esp_acc_error(&has_bits);
          _impl_.is_esp_acc_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_esp_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_esp_on(&has_bits);
          _impl_.is_esp_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_esp_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_esp_active(&has_bits);
          _impl_.is_esp_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_abs_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_abs_error(&has_bits);
          _impl_.is_abs_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_abs_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_abs_active(&has_bits);
          _impl_.is_abs_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_tcsvdc_fail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_tcsvdc_fail(&has_bits);
          _impl_.is_tcsvdc_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_abs_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_abs_enabled(&has_bits);
          _impl_.is_abs_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stab_active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_stab_active(&has_bits);
          _impl_.is_stab_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stab_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_stab_enabled(&has_bits);
          _impl_.is_stab_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trac_active = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_trac_active(&has_bits);
          _impl_.is_trac_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trac_enabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_trac_enabled(&has_bits);
          _impl_.is_trac_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Esp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_esp_acc_error(), target);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_esp_on(), target);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_active(), target);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_abs_error(), target);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_abs_active(), target);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_tcsvdc_fail(), target);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_abs_enabled(), target);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_stab_active(), target);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_stab_enabled(), target);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_trac_active(), target);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_trac_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

size_t Esp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_esp_acc_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_tcsvdc_fail = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_stab_active = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_stab_enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_active = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_enabled = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Esp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Esp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Esp::GetClassData() const { return &_class_data_; }

void Esp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Esp *>(to)->MergeFrom(
      static_cast<const Esp &>(from));
}


void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.is_esp_acc_error_ = from._impl_.is_esp_acc_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_esp_on_ = from._impl_.is_esp_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_esp_active_ = from._impl_.is_esp_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_abs_error_ = from._impl_.is_abs_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_abs_active_ = from._impl_.is_abs_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_tcsvdc_fail_ = from._impl_.is_tcsvdc_fail_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_abs_enabled_ = from._impl_.is_abs_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.is_stab_active_ = from._impl_.is_stab_active_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.is_stab_enabled_ = from._impl_.is_stab_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.is_trac_active_ = from._impl_.is_trac_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.is_trac_enabled_ = from._impl_.is_trac_enabled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {
  return true;
}

void Esp::InternalSwap(Esp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Esp, _impl_.is_trac_enabled_)
      + sizeof(Esp::_impl_.is_trac_enabled_)
      - PROTOBUF_FIELD_OFFSET(Esp, _impl_.is_esp_acc_error_)>(
          reinterpret_cast<char*>(&_impl_.is_esp_acc_error_),
          reinterpret_cast<char*>(&other->_impl_.is_esp_acc_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Esp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[10]);
}

// ===================================================================

class Ems::_Internal {
 public:
  using HasBits = decltype(std::declval<Ems>()._impl_._has_bits_);
  static void set_has_is_engine_acc_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_engine_acc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_engine_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_engine_torq_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_engine_torq_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_engine_torq_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_engine_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_engine_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_engine_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_over_engine_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_engine_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Ems::Ems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ems)
}
Ems::Ems(const Ems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_engine_torq_percent_){}
    , decltype(_impl_.engine_state_){}
    , decltype(_impl_.is_engine_acc_available_){}
    , decltype(_impl_.is_engine_acc_error_){}
    , decltype(_impl_.is_engine_speed_error_){}
    , decltype(_impl_.is_over_engine_torque_){}
    , decltype(_impl_.min_engine_torq_percent_){}
    , decltype(_impl_.base_engine_torq_constant_){}
    , decltype(_impl_.engine_torque_){}
    , decltype(_impl_.engine_speed_){}
    , decltype(_impl_.engine_rpm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_engine_torq_percent_, &from._impl_.max_engine_torq_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.engine_rpm_) -
    reinterpret_cast<char*>(&_impl_.max_engine_torq_percent_)) + sizeof(_impl_.engine_rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

inline void Ems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_engine_torq_percent_){0}
    , decltype(_impl_.engine_state_){0}
    , decltype(_impl_.is_engine_acc_available_){false}
    , decltype(_impl_.is_engine_acc_error_){false}
    , decltype(_impl_.is_engine_speed_error_){false}
    , decltype(_impl_.is_over_engine_torque_){false}
    , decltype(_impl_.min_engine_torq_percent_){0}
    , decltype(_impl_.base_engine_torq_constant_){0}
    , decltype(_impl_.engine_torque_){0}
    , decltype(_impl_.engine_speed_){0}
    , decltype(_impl_.engine_rpm_){0}
  };
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.max_engine_torq_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_engine_torq_constant_) -
        reinterpret_cast<char*>(&_impl_.max_engine_torq_percent_)) + sizeof(_impl_.base_engine_torq_constant_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.engine_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.engine_rpm_) -
        reinterpret_cast<char*>(&_impl_.engine_torque_)) + sizeof(_impl_.engine_rpm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_engine_acc_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_engine_acc_available(&has_bits);
          _impl_.is_engine_acc_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_engine_acc_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_engine_acc_error(&has_bits);
          _impl_.is_engine_acc_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ems.Type engine_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Ems_Type_IsValid(val))) {
            _internal_set_engine_state(static_cast<::apollo::canbus::Ems_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double max_engine_torq_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_engine_torq_percent(&has_bits);
          _impl_.max_engine_torq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_engine_torq_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_min_engine_torq_percent(&has_bits);
          _impl_.min_engine_torq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 base_engine_torq_constant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_base_engine_torq_constant(&has_bits);
          _impl_.base_engine_torq_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_engine_speed_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_engine_speed_error(&has_bits);
          _impl_.is_engine_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double engine_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_engine_speed(&has_bits);
          _impl_.engine_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 engine_torque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_engine_torque(&has_bits);
          _impl_.engine_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_over_engine_torque = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_over_engine_torque(&has_bits);
          _impl_.is_over_engine_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double engine_rpm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_engine_rpm(&has_bits);
          _impl_.engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_engine_acc_available(), target);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_engine_acc_error(), target);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_engine_state(), target);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_engine_torq_percent(), target);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_engine_torq_percent(), target);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_base_engine_torq_constant(), target);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_engine_speed_error(), target);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_engine_speed(), target);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_engine_torque(), target);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_over_engine_torque(), target);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_engine_rpm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

size_t Ems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_engine_torq_percent = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ems.Type engine_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_engine_state());
    }

    // optional bool is_engine_acc_available = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_acc_error = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_speed_error = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_over_engine_torque = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double min_engine_torq_percent = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 base_engine_torq_constant = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_base_engine_torq_constant());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 engine_torque = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_engine_torque());
    }

    // optional double engine_speed = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double engine_rpm = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ems::GetClassData() const { return &_class_data_; }

void Ems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ems *>(to)->MergeFrom(
      static_cast<const Ems &>(from));
}


void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_engine_torq_percent_ = from._impl_.max_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.engine_state_ = from._impl_.engine_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_engine_acc_available_ = from._impl_.is_engine_acc_available_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_engine_acc_error_ = from._impl_.is_engine_acc_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_engine_speed_error_ = from._impl_.is_engine_speed_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_over_engine_torque_ = from._impl_.is_over_engine_torque_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.min_engine_torq_percent_ = from._impl_.min_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.base_engine_torq_constant_ = from._impl_.base_engine_torq_constant_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.engine_torque_ = from._impl_.engine_torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.engine_speed_ = from._impl_.engine_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.engine_rpm_ = from._impl_.engine_rpm_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {
  return true;
}

void Ems::InternalSwap(Ems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ems, _impl_.engine_rpm_)
      + sizeof(Ems::_impl_.engine_rpm_)
      - PROTOBUF_FIELD_OFFSET(Ems, _impl_.max_engine_torq_percent_)>(
          reinterpret_cast<char*>(&_impl_.max_engine_torq_percent_),
          reinterpret_cast<char*>(&other->_impl_.max_engine_torq_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[11]);
}

// ===================================================================

class Gear::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear>()._impl_._has_bits_);
  static void set_has_is_shift_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_canbus_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Gear::Gear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gear)
}
Gear::Gear(const Gear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_state_){}
    , decltype(_impl_.is_shift_position_valid_){}
    , decltype(_impl_.driver_override_){}
    , decltype(_impl_.canbus_fault_){}
    , decltype(_impl_.gear_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gear_state_, &from._impl_.gear_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_cmd_) -
    reinterpret_cast<char*>(&_impl_.gear_state_)) + sizeof(_impl_.gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

inline void Gear::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gear_state_){0}
    , decltype(_impl_.is_shift_position_valid_){false}
    , decltype(_impl_.driver_override_){false}
    , decltype(_impl_.canbus_fault_){false}
    , decltype(_impl_.gear_cmd_){0}
  };
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gear::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.gear_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_cmd_) -
        reinterpret_cast<char*>(&_impl_.gear_state_)) + sizeof(_impl_.gear_cmd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gear::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_shift_position_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_shift_position_valid(&has_bits);
          _impl_.is_shift_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_state(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool driver_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_driver_override(&has_bits);
          _impl_.driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_cmd(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool canbus_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_canbus_fault(&has_bits);
          _impl_.canbus_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gear::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_shift_position_valid(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gear_state(), target);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_override(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gear_cmd(), target);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_canbus_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

size_t Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_state());
    }

    // optional bool is_shift_position_valid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool canbus_fault = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gear::GetClassData() const { return &_class_data_; }

void Gear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gear *>(to)->MergeFrom(
      static_cast<const Gear &>(from));
}


void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gear_state_ = from._impl_.gear_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_shift_position_valid_ = from._impl_.is_shift_position_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.driver_override_ = from._impl_.driver_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.canbus_fault_ = from._impl_.canbus_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gear_cmd_ = from._impl_.gear_cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  return true;
}

void Gear::InternalSwap(Gear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gear, _impl_.gear_cmd_)
      + sizeof(Gear::_impl_.gear_cmd_)
      - PROTOBUF_FIELD_OFFSET(Gear, _impl_.gear_state_)>(
          reinterpret_cast<char*>(&_impl_.gear_state_),
          reinterpret_cast<char*>(&other->_impl_.gear_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[12]);
}

// ===================================================================

class Safety::_Internal {
 public:
  using HasBits = decltype(std::declval<Safety>()._impl_._has_bits_);
  static void set_has_is_driver_car_door_close(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_driver_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_emergency_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_motor_invertor_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_system_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_power_battery_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_motor_invertor_over_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_small_battery_charge_discharge_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_passenger_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_rearleft_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_rearright_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_trunk_open(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_passenger_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_passenger_airbag_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_passenger_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_front_left_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_front_right_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rear_left_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rear_right_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_car_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

Safety::Safety(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Safety)
}
Safety::Safety(const Safety& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emergency_button_){}
    , decltype(_impl_.is_driver_car_door_close_){}
    , decltype(_impl_.is_driver_buckled_){}
    , decltype(_impl_.has_error_){}
    , decltype(_impl_.is_motor_invertor_fault_){}
    , decltype(_impl_.is_system_fault_){}
    , decltype(_impl_.is_power_battery_fault_){}
    , decltype(_impl_.is_motor_invertor_over_temperature_){}
    , decltype(_impl_.is_small_battery_charge_discharge_fault_){}
    , decltype(_impl_.driving_mode_){}
    , decltype(_impl_.is_passenger_door_open_){}
    , decltype(_impl_.is_rearleft_door_open_){}
    , decltype(_impl_.is_rearright_door_open_){}
    , decltype(_impl_.is_hood_open_){}
    , decltype(_impl_.is_trunk_open_){}
    , decltype(_impl_.is_passenger_detected_){}
    , decltype(_impl_.is_passenger_airbag_enabled_){}
    , decltype(_impl_.is_passenger_buckled_){}
    , decltype(_impl_.front_left_tire_press_){}
    , decltype(_impl_.front_right_tire_press_){}
    , decltype(_impl_.rear_left_tire_press_){}
    , decltype(_impl_.rear_right_tire_press_){}
    , decltype(_impl_.car_driving_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.emergency_button_, &from._impl_.emergency_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.car_driving_mode_) -
    reinterpret_cast<char*>(&_impl_.emergency_button_)) + sizeof(_impl_.car_driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

inline void Safety::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emergency_button_){0}
    , decltype(_impl_.is_driver_car_door_close_){false}
    , decltype(_impl_.is_driver_buckled_){false}
    , decltype(_impl_.has_error_){false}
    , decltype(_impl_.is_motor_invertor_fault_){false}
    , decltype(_impl_.is_system_fault_){false}
    , decltype(_impl_.is_power_battery_fault_){false}
    , decltype(_impl_.is_motor_invertor_over_temperature_){false}
    , decltype(_impl_.is_small_battery_charge_discharge_fault_){false}
    , decltype(_impl_.driving_mode_){0}
    , decltype(_impl_.is_passenger_door_open_){false}
    , decltype(_impl_.is_rearleft_door_open_){false}
    , decltype(_impl_.is_rearright_door_open_){false}
    , decltype(_impl_.is_hood_open_){false}
    , decltype(_impl_.is_trunk_open_){false}
    , decltype(_impl_.is_passenger_detected_){false}
    , decltype(_impl_.is_passenger_airbag_enabled_){false}
    , decltype(_impl_.is_passenger_buckled_){false}
    , decltype(_impl_.front_left_tire_press_){0}
    , decltype(_impl_.front_right_tire_press_){0}
    , decltype(_impl_.rear_left_tire_press_){0}
    , decltype(_impl_.rear_right_tire_press_){0}
    , decltype(_impl_.car_driving_mode_){0}
  };
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Safety::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Safety::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.emergency_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_motor_invertor_over_temperature_) -
        reinterpret_cast<char*>(&_impl_.emergency_button_)) + sizeof(_impl_.is_motor_invertor_over_temperature_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_small_battery_charge_discharge_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_passenger_detected_) -
        reinterpret_cast<char*>(&_impl_.is_small_battery_charge_discharge_fault_)) + sizeof(_impl_.is_passenger_detected_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.is_passenger_airbag_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.car_driving_mode_) -
        reinterpret_cast<char*>(&_impl_.is_passenger_airbag_enabled_)) + sizeof(_impl_.car_driving_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Safety::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_driver_car_door_close = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_driver_car_door_close(&has_bits);
          _impl_.is_driver_car_door_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_driver_buckled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_driver_buckled(&has_bits);
          _impl_.is_driver_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 emergency_button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_emergency_button(&has_bits);
          _impl_.emergency_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_error = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_error(&has_bits);
          _impl_.has_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_motor_invertor_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_motor_invertor_fault(&has_bits);
          _impl_.is_motor_invertor_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_system_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_system_fault(&has_bits);
          _impl_.is_system_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_power_battery_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_power_battery_fault(&has_bits);
          _impl_.is_power_battery_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_motor_invertor_over_temperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_motor_invertor_over_temperature(&has_bits);
          _impl_.is_motor_invertor_over_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_small_battery_charge_discharge_fault = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_small_battery_charge_discharge_fault(&has_bits);
          _impl_.is_small_battery_charge_discharge_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 driving_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_driving_mode(&has_bits);
          _impl_.driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_passenger_door_open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_passenger_door_open(&has_bits);
          _impl_.is_passenger_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rearleft_door_open = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_rearleft_door_open(&has_bits);
          _impl_.is_rearleft_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rearright_door_open = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_rearright_door_open(&has_bits);
          _impl_.is_rearright_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_hood_open = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_hood_open(&has_bits);
          _impl_.is_hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trunk_open = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_trunk_open(&has_bits);
          _impl_.is_trunk_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_passenger_detected = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_passenger_detected(&has_bits);
          _impl_.is_passenger_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_passenger_airbag_enabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_is_passenger_airbag_enabled(&has_bits);
          _impl_.is_passenger_airbag_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_passenger_buckled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_passenger_buckled(&has_bits);
          _impl_.is_passenger_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 front_left_tire_press = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_front_left_tire_press(&has_bits);
          _impl_.front_left_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 front_right_tire_press = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_front_right_tire_press(&has_bits);
          _impl_.front_right_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rear_left_tire_press = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_rear_left_tire_press(&has_bits);
          _impl_.rear_left_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rear_right_tire_press = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_rear_right_tire_press(&has_bits);
          _impl_.rear_right_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_car_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Safety::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_driver_car_door_close(), target);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_driver_buckled(), target);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_emergency_button(), target);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_error(), target);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_motor_invertor_fault(), target);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_system_fault(), target);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_power_battery_fault(), target);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_motor_invertor_over_temperature(), target);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_small_battery_charge_discharge_fault(), target);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_driving_mode(), target);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_passenger_door_open(), target);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_rearleft_door_open(), target);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_rearright_door_open(), target);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_hood_open(), target);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_trunk_open(), target);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_passenger_detected(), target);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_passenger_airbag_enabled(), target);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_passenger_buckled(), target);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_front_left_tire_press(), target);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_front_right_tire_press(), target);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_rear_left_tire_press(), target);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_rear_right_tire_press(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_car_driving_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

size_t Safety::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 emergency_button = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_emergency_button());
    }

    // optional bool is_driver_car_door_close = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_driver_buckled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool has_error = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_system_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_power_battery_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_over_temperature = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_small_battery_charge_discharge_fault = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 driving_mode = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_driving_mode());
    }

    // optional bool is_passenger_door_open = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_rearleft_door_open = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_rearright_door_open = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_hood_open = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_trunk_open = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_passenger_detected = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool is_passenger_airbag_enabled = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_passenger_buckled = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 front_left_tire_press = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_front_left_tire_press());
    }

    // optional int32 front_right_tire_press = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_front_right_tire_press());
    }

    // optional int32 rear_left_tire_press = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_rear_left_tire_press());
    }

    // optional int32 rear_right_tire_press = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_rear_right_tire_press());
    }

    // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_car_driving_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Safety::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Safety::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Safety::GetClassData() const { return &_class_data_; }

void Safety::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Safety *>(to)->MergeFrom(
      static_cast<const Safety &>(from));
}


void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.emergency_button_ = from._impl_.emergency_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_driver_car_door_close_ = from._impl_.is_driver_car_door_close_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_driver_buckled_ = from._impl_.is_driver_buckled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.has_error_ = from._impl_.has_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_motor_invertor_fault_ = from._impl_.is_motor_invertor_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_system_fault_ = from._impl_.is_system_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_power_battery_fault_ = from._impl_.is_power_battery_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.is_motor_invertor_over_temperature_ = from._impl_.is_motor_invertor_over_temperature_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.is_small_battery_charge_discharge_fault_ = from._impl_.is_small_battery_charge_discharge_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.driving_mode_ = from._impl_.driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.is_passenger_door_open_ = from._impl_.is_passenger_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.is_rearleft_door_open_ = from._impl_.is_rearleft_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.is_rearright_door_open_ = from._impl_.is_rearright_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.is_hood_open_ = from._impl_.is_hood_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.is_trunk_open_ = from._impl_.is_trunk_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.is_passenger_detected_ = from._impl_.is_passenger_detected_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.is_passenger_airbag_enabled_ = from._impl_.is_passenger_airbag_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.is_passenger_buckled_ = from._impl_.is_passenger_buckled_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.front_left_tire_press_ = from._impl_.front_left_tire_press_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.front_right_tire_press_ = from._impl_.front_right_tire_press_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.rear_left_tire_press_ = from._impl_.rear_left_tire_press_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.rear_right_tire_press_ = from._impl_.rear_right_tire_press_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.car_driving_mode_ = from._impl_.car_driving_mode_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {
  return true;
}

void Safety::InternalSwap(Safety* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Safety, _impl_.car_driving_mode_)
      + sizeof(Safety::_impl_.car_driving_mode_)
      - PROTOBUF_FIELD_OFFSET(Safety, _impl_.emergency_button_)>(
          reinterpret_cast<char*>(&_impl_.emergency_button_),
          reinterpret_cast<char*>(&other->_impl_.emergency_button_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Safety::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[13]);
}

// ===================================================================

class BasicInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicInfo>()._impl_._has_bits_);
  static void set_has_is_auto_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_power_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_air_bag_deployed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_odo_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_drive_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_system_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_human_interrupt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acc_on_button(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_acc_off_button(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_acc_res_button(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_acc_cancel_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acc_on_off_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acc_res_cancel_button(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acc_inc_spd_button(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acc_dec_spd_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_acc_inc_gap_button(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_acc_dec_gap_button(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lka_button(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_canbus_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gps_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_compass_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_is_gps_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_is_inferred(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_num_satellites(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
};

BasicInfo::BasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.BasicInfo)
}
BasicInfo::BasicInfo(const BasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.power_state_){}
    , decltype(_impl_.is_auto_mode_){}
    , decltype(_impl_.is_air_bag_deployed_){}
    , decltype(_impl_.is_system_error_){}
    , decltype(_impl_.is_human_interrupt_){}
    , decltype(_impl_.odo_meter_){}
    , decltype(_impl_.drive_range_){}
    , decltype(_impl_.acc_on_button_){}
    , decltype(_impl_.acc_off_button_){}
    , decltype(_impl_.acc_res_button_){}
    , decltype(_impl_.acc_cancel_button_){}
    , decltype(_impl_.acc_on_off_button_){}
    , decltype(_impl_.acc_res_cancel_button_){}
    , decltype(_impl_.acc_inc_spd_button_){}
    , decltype(_impl_.acc_dec_spd_button_){}
    , decltype(_impl_.acc_inc_gap_button_){}
    , decltype(_impl_.acc_dec_gap_button_){}
    , decltype(_impl_.lka_button_){}
    , decltype(_impl_.canbus_fault_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.hours_){}
    , decltype(_impl_.minutes_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.gps_valid_){}
    , decltype(_impl_.is_gps_fault_){}
    , decltype(_impl_.is_inferred_){}
    , decltype(_impl_.compass_direction_){}
    , decltype(_impl_.pdop_){}
    , decltype(_impl_.altitude_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.hdop_){}
    , decltype(_impl_.vdop_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.num_satellites_){}
    , decltype(_impl_.gps_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.power_state_, &from._impl_.power_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gps_speed_) -
    reinterpret_cast<char*>(&_impl_.power_state_)) + sizeof(_impl_.gps_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

inline void BasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.power_state_){0}
    , decltype(_impl_.is_auto_mode_){false}
    , decltype(_impl_.is_air_bag_deployed_){false}
    , decltype(_impl_.is_system_error_){false}
    , decltype(_impl_.is_human_interrupt_){false}
    , decltype(_impl_.odo_meter_){0}
    , decltype(_impl_.drive_range_){0}
    , decltype(_impl_.acc_on_button_){false}
    , decltype(_impl_.acc_off_button_){false}
    , decltype(_impl_.acc_res_button_){false}
    , decltype(_impl_.acc_cancel_button_){false}
    , decltype(_impl_.acc_on_off_button_){false}
    , decltype(_impl_.acc_res_cancel_button_){false}
    , decltype(_impl_.acc_inc_spd_button_){false}
    , decltype(_impl_.acc_dec_spd_button_){false}
    , decltype(_impl_.acc_inc_gap_button_){false}
    , decltype(_impl_.acc_dec_gap_button_){false}
    , decltype(_impl_.lka_button_){false}
    , decltype(_impl_.canbus_fault_){false}
    , decltype(_impl_.year_){0}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.month_){0}
    , decltype(_impl_.day_){0}
    , decltype(_impl_.hours_){0}
    , decltype(_impl_.minutes_){0}
    , decltype(_impl_.seconds_){0}
    , decltype(_impl_.gps_valid_){false}
    , decltype(_impl_.is_gps_fault_){false}
    , decltype(_impl_.is_inferred_){false}
    , decltype(_impl_.compass_direction_){0}
    , decltype(_impl_.pdop_){0}
    , decltype(_impl_.altitude_){0}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.hdop_){0}
    , decltype(_impl_.vdop_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.num_satellites_){0}
    , decltype(_impl_.gps_speed_){0}
  };
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.power_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.acc_on_button_) -
        reinterpret_cast<char*>(&_impl_.power_state_)) + sizeof(_impl_.acc_on_button_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.acc_off_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.acc_inc_gap_button_) -
        reinterpret_cast<char*>(&_impl_.acc_off_button_)) + sizeof(_impl_.acc_inc_gap_button_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.acc_dec_gap_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.day_) -
        reinterpret_cast<char*>(&_impl_.acc_dec_gap_button_)) + sizeof(_impl_.day_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pdop_) -
        reinterpret_cast<char*>(&_impl_.hours_)) + sizeof(_impl_.pdop_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gps_speed_) -
        reinterpret_cast<char*>(&_impl_.altitude_)) + sizeof(_impl_.gps_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_auto_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_auto_mode(&_impl_._has_bits_);
          _impl_.is_auto_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::BasicInfo_Type_IsValid(val))) {
            _internal_set_power_state(static_cast<::apollo::canbus::BasicInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_air_bag_deployed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_air_bag_deployed(&_impl_._has_bits_);
          _impl_.is_air_bag_deployed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double odo_meter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_odo_meter(&_impl_._has_bits_);
          _impl_.odo_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double drive_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_drive_range(&_impl_._has_bits_);
          _impl_.drive_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_system_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_system_error(&_impl_._has_bits_);
          _impl_.is_system_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_human_interrupt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_human_interrupt(&_impl_._has_bits_);
          _impl_.is_human_interrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_on_button = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_acc_on_button(&_impl_._has_bits_);
          _impl_.acc_on_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_off_button = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_acc_off_button(&_impl_._has_bits_);
          _impl_.acc_off_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_res_button = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_acc_res_button(&_impl_._has_bits_);
          _impl_.acc_res_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_cancel_button = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_acc_cancel_button(&_impl_._has_bits_);
          _impl_.acc_cancel_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_on_off_button = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_acc_on_off_button(&_impl_._has_bits_);
          _impl_.acc_on_off_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_res_cancel_button = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_acc_res_cancel_button(&_impl_._has_bits_);
          _impl_.acc_res_cancel_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_inc_spd_button = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_acc_inc_spd_button(&_impl_._has_bits_);
          _impl_.acc_inc_spd_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_dec_spd_button = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_acc_dec_spd_button(&_impl_._has_bits_);
          _impl_.acc_dec_spd_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_inc_gap_button = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_acc_inc_gap_button(&_impl_._has_bits_);
          _impl_.acc_inc_gap_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool acc_dec_gap_button = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_acc_dec_gap_button(&_impl_._has_bits_);
          _impl_.acc_dec_gap_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lka_button = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_lka_button(&_impl_._has_bits_);
          _impl_.lka_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool canbus_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_canbus_fault(&_impl_._has_bits_);
          _impl_.canbus_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double latitude = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_latitude(&_impl_._has_bits_);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_longitude(&_impl_._has_bits_);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool gps_valid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_gps_valid(&_impl_._has_bits_);
          _impl_.gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 year = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_year(&_impl_._has_bits_);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 month = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_month(&_impl_._has_bits_);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 day = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_day(&_impl_._has_bits_);
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hours = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_hours(&_impl_._has_bits_);
          _impl_.hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minutes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_minutes(&_impl_._has_bits_);
          _impl_.minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_seconds(&_impl_._has_bits_);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double compass_direction = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_compass_direction(&_impl_._has_bits_);
          _impl_.compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pdop = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_pdop(&_impl_._has_bits_);
          _impl_.pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_gps_fault = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_is_gps_fault(&_impl_._has_bits_);
          _impl_.is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inferred = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_is_inferred(&_impl_._has_bits_);
          _impl_.is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double altitude = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_altitude(&_impl_._has_bits_);
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_heading(&_impl_._has_bits_);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hdop = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_hdop(&_impl_._has_bits_);
          _impl_.hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vdop = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_vdop(&_impl_._has_bits_);
          _impl_.vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.GpsQuality quality = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::GpsQuality_IsValid(val))) {
            _internal_set_quality(static_cast<::apollo::canbus::GpsQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_satellites = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_satellites(&_impl_._has_bits_);
          _impl_.num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gps_speed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_gps_speed(&_impl_._has_bits_);
          _impl_.gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_auto_mode(), target);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_power_state(), target);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_air_bag_deployed(), target);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_odo_meter(), target);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_drive_range(), target);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_system_error(), target);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_human_interrupt(), target);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_acc_on_button(), target);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_acc_off_button(), target);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_acc_res_button(), target);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_acc_cancel_button(), target);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_acc_on_off_button(), target);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_acc_res_cancel_button(), target);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_acc_inc_spd_button(), target);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_acc_dec_spd_button(), target);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_acc_inc_gap_button(), target);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_acc_dec_gap_button(), target);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_lka_button(), target);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_canbus_fault(), target);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_latitude(), target);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_longitude(), target);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_gps_valid(), target);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_year(), target);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_month(), target);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_day(), target);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_hours(), target);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_minutes(), target);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_seconds(), target);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_compass_direction(), target);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_pdop(), target);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_is_gps_fault(), target);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_is_inferred(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_altitude(), target);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_heading(), target);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_hdop(), target);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      37, this->_internal_quality(), target);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_num_satellites(), target);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(39, this->_internal_gps_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

size_t BasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.BasicInfo.Type power_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_power_state());
    }

    // optional bool is_auto_mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_air_bag_deployed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_system_error = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_human_interrupt = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double odo_meter = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double drive_range = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool acc_on_button = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool acc_off_button = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_button = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool acc_cancel_button = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool acc_on_off_button = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_cancel_button = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_spd_button = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_dec_spd_button = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_gap_button = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool acc_dec_gap_button = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool lka_button = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool canbus_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 year = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_year());
    }

    // optional double latitude = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double longitude = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 month = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_month());
    }

    // optional int32 day = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_day());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 hours = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_hours());
    }

    // optional int32 minutes = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minutes());
    }

    // optional int32 seconds = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_seconds());
    }

    // optional bool gps_valid = 22;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_gps_fault = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_inferred = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional double compass_direction = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double pdop = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional double altitude = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double heading = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double hdop = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.GpsQuality quality = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
    }

    // optional int32 num_satellites = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_satellites());
    }

    // optional double gps_speed = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicInfo::GetClassData() const { return &_class_data_; }

void BasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicInfo *>(to)->MergeFrom(
      static_cast<const BasicInfo &>(from));
}


void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.power_state_ = from._impl_.power_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_auto_mode_ = from._impl_.is_auto_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_air_bag_deployed_ = from._impl_.is_air_bag_deployed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_system_error_ = from._impl_.is_system_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_human_interrupt_ = from._impl_.is_human_interrupt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.odo_meter_ = from._impl_.odo_meter_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.drive_range_ = from._impl_.drive_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.acc_on_button_ = from._impl_.acc_on_button_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.acc_off_button_ = from._impl_.acc_off_button_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.acc_res_button_ = from._impl_.acc_res_button_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.acc_cancel_button_ = from._impl_.acc_cancel_button_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.acc_on_off_button_ = from._impl_.acc_on_off_button_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.acc_res_cancel_button_ = from._impl_.acc_res_cancel_button_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.acc_inc_spd_button_ = from._impl_.acc_inc_spd_button_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.acc_dec_spd_button_ = from._impl_.acc_dec_spd_button_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.acc_inc_gap_button_ = from._impl_.acc_inc_gap_button_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.acc_dec_gap_button_ = from._impl_.acc_dec_gap_button_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.lka_button_ = from._impl_.lka_button_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.canbus_fault_ = from._impl_.canbus_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.longitude_ = from._impl_.longitude_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.day_ = from._impl_.day_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.hours_ = from._impl_.hours_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.minutes_ = from._impl_.minutes_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.gps_valid_ = from._impl_.gps_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.is_gps_fault_ = from._impl_.is_gps_fault_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.is_inferred_ = from._impl_.is_inferred_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.compass_direction_ = from._impl_.compass_direction_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.pdop_ = from._impl_.pdop_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.altitude_ = from._impl_.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hdop_ = from._impl_.hdop_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vdop_ = from._impl_.vdop_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.num_satellites_ = from._impl_.num_satellites_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.gps_speed_ = from._impl_.gps_speed_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  return true;
}

void BasicInfo::InternalSwap(BasicInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasicInfo, _impl_.gps_speed_)
      + sizeof(BasicInfo::_impl_.gps_speed_)
      - PROTOBUF_FIELD_OFFSET(BasicInfo, _impl_.power_state_)>(
          reinterpret_cast<char*>(&_impl_.power_state_),
          reinterpret_cast<char*>(&other->_impl_.power_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[14]);
}

// ===================================================================

class Global_rpt_6a::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_rpt_6a>()._impl_._has_bits_);
  static void set_has_pacmod_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_veh_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_str_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brk_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_usr_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_usr_can_read_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Global_rpt_6a::Global_rpt_6a(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Global_rpt_6a)
}
Global_rpt_6a::Global_rpt_6a(const Global_rpt_6a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_status_){}
    , decltype(_impl_.override_status_){}
    , decltype(_impl_.veh_can_timeout_){}
    , decltype(_impl_.str_can_timeout_){}
    , decltype(_impl_.usr_can_timeout_){}
    , decltype(_impl_.brk_can_timeout_){}
    , decltype(_impl_.usr_can_read_errors_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pacmod_status_, &from._impl_.pacmod_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usr_can_read_errors_) -
    reinterpret_cast<char*>(&_impl_.pacmod_status_)) + sizeof(_impl_.usr_can_read_errors_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_rpt_6a)
}

inline void Global_rpt_6a::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_status_){0}
    , decltype(_impl_.override_status_){0}
    , decltype(_impl_.veh_can_timeout_){false}
    , decltype(_impl_.str_can_timeout_){false}
    , decltype(_impl_.usr_can_timeout_){false}
    , decltype(_impl_.brk_can_timeout_){0}
    , decltype(_impl_.usr_can_read_errors_){0}
  };
}

Global_rpt_6a::~Global_rpt_6a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_rpt_6a)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Global_rpt_6a::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Global_rpt_6a::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Global_rpt_6a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_rpt_6a)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.pacmod_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usr_can_read_errors_) -
        reinterpret_cast<char*>(&_impl_.pacmod_status_)) + sizeof(_impl_.usr_can_read_errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Global_rpt_6a::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Pacmod_statusType_IsValid(val))) {
            _internal_set_pacmod_status(static_cast<::apollo::canbus::Global_rpt_6a_Pacmod_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Override_statusType_IsValid(val))) {
            _internal_set_override_status(static_cast<::apollo::canbus::Global_rpt_6a_Override_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool veh_can_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_veh_can_timeout(&has_bits);
          _impl_.veh_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool str_can_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_str_can_timeout(&has_bits);
          _impl_.str_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType_IsValid(val))) {
            _internal_set_brk_can_timeout(static_cast<::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool usr_can_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_usr_can_timeout(&has_bits);
          _impl_.usr_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 usr_can_read_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_usr_can_read_errors(&has_bits);
          _impl_.usr_can_read_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Global_rpt_6a::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_rpt_6a)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pacmod_status(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_override_status(), target);
  }

  // optional bool veh_can_timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_veh_can_timeout(), target);
  }

  // optional bool str_can_timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_str_can_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_brk_can_timeout(), target);
  }

  // optional bool usr_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_usr_can_timeout(), target);
  }

  // optional int32 usr_can_read_errors = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_usr_can_read_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_rpt_6a)
  return target;
}

size_t Global_rpt_6a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_rpt_6a)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pacmod_status());
    }

    // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_override_status());
    }

    // optional bool veh_can_timeout = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool str_can_timeout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool usr_can_timeout = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brk_can_timeout());
    }

    // optional int32 usr_can_read_errors = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usr_can_read_errors());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Global_rpt_6a::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Global_rpt_6a::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Global_rpt_6a::GetClassData() const { return &_class_data_; }

void Global_rpt_6a::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Global_rpt_6a *>(to)->MergeFrom(
      static_cast<const Global_rpt_6a &>(from));
}


void Global_rpt_6a::MergeFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_rpt_6a)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pacmod_status_ = from._impl_.pacmod_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.override_status_ = from._impl_.override_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.veh_can_timeout_ = from._impl_.veh_can_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.str_can_timeout_ = from._impl_.str_can_timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.usr_can_timeout_ = from._impl_.usr_can_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.brk_can_timeout_ = from._impl_.brk_can_timeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.usr_can_read_errors_ = from._impl_.usr_can_read_errors_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Global_rpt_6a::CopyFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_rpt_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_rpt_6a::IsInitialized() const {
  return true;
}

void Global_rpt_6a::InternalSwap(Global_rpt_6a* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Global_rpt_6a, _impl_.usr_can_read_errors_)
      + sizeof(Global_rpt_6a::_impl_.usr_can_read_errors_)
      - PROTOBUF_FIELD_OFFSET(Global_rpt_6a, _impl_.pacmod_status_)>(
          reinterpret_cast<char*>(&_impl_.pacmod_status_),
          reinterpret_cast<char*>(&other->_impl_.pacmod_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_rpt_6a::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[15]);
}

// ===================================================================

class Brake_cmd_6b::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_cmd_6b>()._impl_._has_bits_);
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Brake_cmd_6b::Brake_cmd_6b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_cmd_6b)
}
Brake_cmd_6b::Brake_cmd_6b(const Brake_cmd_6b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.brake_cmd_ = from._impl_.brake_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_cmd_6b)
}

inline void Brake_cmd_6b::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.brake_cmd_){0}
  };
}

Brake_cmd_6b::~Brake_cmd_6b() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_cmd_6b)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_cmd_6b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_cmd_6b::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_cmd_6b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_cmd_6b)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brake_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_cmd_6b::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double brake_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_brake_cmd(&has_bits);
          _impl_.brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_cmd_6b::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_cmd_6b)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double brake_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_cmd_6b)
  return target;
}

size_t Brake_cmd_6b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_cmd_6b)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double brake_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_cmd_6b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_cmd_6b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_cmd_6b::GetClassData() const { return &_class_data_; }

void Brake_cmd_6b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_cmd_6b *>(to)->MergeFrom(
      static_cast<const Brake_cmd_6b &>(from));
}


void Brake_cmd_6b::MergeFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_cmd_6b)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brake_cmd()) {
    _internal_set_brake_cmd(from._internal_brake_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_cmd_6b::CopyFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_cmd_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_cmd_6b::IsInitialized() const {
  return true;
}

void Brake_cmd_6b::InternalSwap(Brake_cmd_6b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.brake_cmd_, other->_impl_.brake_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_cmd_6b::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[16]);
}

// ===================================================================

class Brake_rpt_6c::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_rpt_6c>()._impl_._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Brake_rpt_6c::Brake_rpt_6c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_rpt_6c)
}
Brake_rpt_6c::Brake_rpt_6c(const Brake_rpt_6c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.brake_on_off_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_input_, &from._impl_.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brake_on_off_) -
    reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.brake_on_off_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_rpt_6c)
}

inline void Brake_rpt_6c::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.brake_on_off_){0}
  };
}

Brake_rpt_6c::~Brake_rpt_6c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_rpt_6c)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_rpt_6c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_rpt_6c::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_rpt_6c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_rpt_6c)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.brake_on_off_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.brake_on_off_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_rpt_6c::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_rpt_6c_Brake_on_offType_IsValid(val))) {
            _internal_set_brake_on_off(static_cast<::apollo::canbus::Brake_rpt_6c_Brake_on_offType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_rpt_6c::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_rpt_6c)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_brake_on_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_rpt_6c)
  return target;
}

size_t Brake_rpt_6c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_rpt_6c)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brake_on_off());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_rpt_6c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_rpt_6c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_rpt_6c::GetClassData() const { return &_class_data_; }

void Brake_rpt_6c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_rpt_6c *>(to)->MergeFrom(
      static_cast<const Brake_rpt_6c &>(from));
}


void Brake_rpt_6c::MergeFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_rpt_6c)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.brake_on_off_ = from._impl_.brake_on_off_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_rpt_6c::CopyFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_rpt_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_rpt_6c::IsInitialized() const {
  return true;
}

void Brake_rpt_6c::InternalSwap(Brake_rpt_6c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_rpt_6c, _impl_.brake_on_off_)
      + sizeof(Brake_rpt_6c::_impl_.brake_on_off_)
      - PROTOBUF_FIELD_OFFSET(Brake_rpt_6c, _impl_.manual_input_)>(
          reinterpret_cast<char*>(&_impl_.manual_input_),
          reinterpret_cast<char*>(&other->_impl_.manual_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_rpt_6c::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[17]);
}

// ===================================================================

class Steering_cmd_6d::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_cmd_6d>()._impl_._has_bits_);
  static void set_has_position_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_cmd_6d::Steering_cmd_6d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_cmd_6d)
}
Steering_cmd_6d::Steering_cmd_6d(const Steering_cmd_6d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_value_){}
    , decltype(_impl_.speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_value_, &from._impl_.position_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_limit_) -
    reinterpret_cast<char*>(&_impl_.position_value_)) + sizeof(_impl_.speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_cmd_6d)
}

inline void Steering_cmd_6d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_value_){0}
    , decltype(_impl_.speed_limit_){0}
  };
}

Steering_cmd_6d::~Steering_cmd_6d() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_cmd_6d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_cmd_6d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_cmd_6d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_cmd_6d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_cmd_6d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.position_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_) -
        reinterpret_cast<char*>(&_impl_.position_value_)) + sizeof(_impl_.speed_limit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_cmd_6d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double position_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_position_value(&has_bits);
          _impl_.position_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_cmd_6d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_cmd_6d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double position_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_position_value(), target);
  }

  // optional double speed_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_cmd_6d)
  return target;
}

size_t Steering_cmd_6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_cmd_6d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double position_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_cmd_6d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_cmd_6d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_cmd_6d::GetClassData() const { return &_class_data_; }

void Steering_cmd_6d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_cmd_6d *>(to)->MergeFrom(
      static_cast<const Steering_cmd_6d &>(from));
}


void Steering_cmd_6d::MergeFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_cmd_6d)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.position_value_ = from._impl_.position_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_cmd_6d::CopyFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_cmd_6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_cmd_6d::IsInitialized() const {
  return true;
}

void Steering_cmd_6d::InternalSwap(Steering_cmd_6d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_cmd_6d, _impl_.speed_limit_)
      + sizeof(Steering_cmd_6d::_impl_.speed_limit_)
      - PROTOBUF_FIELD_OFFSET(Steering_cmd_6d, _impl_.position_value_)>(
          reinterpret_cast<char*>(&_impl_.position_value_),
          reinterpret_cast<char*>(&other->_impl_.position_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_cmd_6d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[18]);
}

// ===================================================================

class Steering_rpt_1_6e::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_rpt_1_6e>()._impl_._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_rpt_1_6e::Steering_rpt_1_6e(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_rpt_1_6e)
}
Steering_rpt_1_6e::Steering_rpt_1_6e(const Steering_rpt_1_6e& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_input_, &from._impl_.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_rpt_1_6e)
}

inline void Steering_rpt_1_6e::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Steering_rpt_1_6e::~Steering_rpt_1_6e() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_rpt_1_6e)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_rpt_1_6e::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_rpt_1_6e::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_rpt_1_6e::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_rpt_1_6e)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_rpt_1_6e::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_rpt_1_6e::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_rpt_1_6e)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_rpt_1_6e)
  return target;
}

size_t Steering_rpt_1_6e::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_rpt_1_6e)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_rpt_1_6e::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_rpt_1_6e::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_rpt_1_6e::GetClassData() const { return &_class_data_; }

void Steering_rpt_1_6e::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_rpt_1_6e *>(to)->MergeFrom(
      static_cast<const Steering_rpt_1_6e &>(from));
}


void Steering_rpt_1_6e::MergeFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_rpt_1_6e)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_rpt_1_6e::CopyFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_rpt_1_6e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_rpt_1_6e::IsInitialized() const {
  return true;
}

void Steering_rpt_1_6e::InternalSwap(Steering_rpt_1_6e* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_rpt_1_6e, _impl_.output_value_)
      + sizeof(Steering_rpt_1_6e::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Steering_rpt_1_6e, _impl_.manual_input_)>(
          reinterpret_cast<char*>(&_impl_.manual_input_),
          reinterpret_cast<char*>(&other->_impl_.manual_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_rpt_1_6e::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[19]);
}

// ===================================================================

class Wheel_speed_rpt_7a::_Internal {
 public:
  using HasBits = decltype(std::declval<Wheel_speed_rpt_7a>()._impl_._has_bits_);
  static void set_has_wheel_spd_rear_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheel_spd_rear_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheel_spd_front_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheel_spd_front_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wheel_speed_rpt_7a::Wheel_speed_rpt_7a(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wheel_speed_rpt_7a)
}
Wheel_speed_rpt_7a::Wheel_speed_rpt_7a(const Wheel_speed_rpt_7a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rear_right_){}
    , decltype(_impl_.wheel_spd_rear_left_){}
    , decltype(_impl_.wheel_spd_front_right_){}
    , decltype(_impl_.wheel_spd_front_left_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wheel_spd_rear_right_, &from._impl_.wheel_spd_rear_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wheel_spd_front_left_) -
    reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_)) + sizeof(_impl_.wheel_spd_front_left_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wheel_speed_rpt_7a)
}

inline void Wheel_speed_rpt_7a::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wheel_spd_rear_right_){0}
    , decltype(_impl_.wheel_spd_rear_left_){0}
    , decltype(_impl_.wheel_spd_front_right_){0}
    , decltype(_impl_.wheel_spd_front_left_){0}
  };
}

Wheel_speed_rpt_7a::~Wheel_speed_rpt_7a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wheel_speed_rpt_7a)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wheel_speed_rpt_7a::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wheel_speed_rpt_7a::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wheel_speed_rpt_7a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wheel_speed_rpt_7a)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.wheel_spd_rear_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wheel_spd_front_left_) -
        reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_)) + sizeof(_impl_.wheel_spd_front_left_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wheel_speed_rpt_7a::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 wheel_spd_rear_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_wheel_spd_rear_right(&has_bits);
          _impl_.wheel_spd_rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wheel_spd_rear_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_wheel_spd_rear_left(&has_bits);
          _impl_.wheel_spd_rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wheel_spd_front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wheel_spd_front_right(&has_bits);
          _impl_.wheel_spd_front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wheel_spd_front_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_wheel_spd_front_left(&has_bits);
          _impl_.wheel_spd_front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wheel_speed_rpt_7a::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wheel_speed_rpt_7a)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_wheel_spd_rear_right(), target);
  }

  // optional int32 wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_wheel_spd_rear_left(), target);
  }

  // optional int32 wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_wheel_spd_front_right(), target);
  }

  // optional int32 wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_wheel_spd_front_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wheel_speed_rpt_7a)
  return target;
}

size_t Wheel_speed_rpt_7a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wheel_speed_rpt_7a)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 wheel_spd_rear_right = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheel_spd_rear_right());
    }

    // optional int32 wheel_spd_rear_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheel_spd_rear_left());
    }

    // optional int32 wheel_spd_front_right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheel_spd_front_right());
    }

    // optional int32 wheel_spd_front_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wheel_spd_front_left());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wheel_speed_rpt_7a::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wheel_speed_rpt_7a::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wheel_speed_rpt_7a::GetClassData() const { return &_class_data_; }

void Wheel_speed_rpt_7a::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wheel_speed_rpt_7a *>(to)->MergeFrom(
      static_cast<const Wheel_speed_rpt_7a &>(from));
}


void Wheel_speed_rpt_7a::MergeFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.wheel_spd_rear_right_ = from._impl_.wheel_spd_rear_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wheel_spd_rear_left_ = from._impl_.wheel_spd_rear_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.wheel_spd_front_right_ = from._impl_.wheel_spd_front_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.wheel_spd_front_left_ = from._impl_.wheel_spd_front_left_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wheel_speed_rpt_7a::CopyFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel_speed_rpt_7a::IsInitialized() const {
  return true;
}

void Wheel_speed_rpt_7a::InternalSwap(Wheel_speed_rpt_7a* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wheel_speed_rpt_7a, _impl_.wheel_spd_front_left_)
      + sizeof(Wheel_speed_rpt_7a::_impl_.wheel_spd_front_left_)
      - PROTOBUF_FIELD_OFFSET(Wheel_speed_rpt_7a, _impl_.wheel_spd_rear_right_)>(
          reinterpret_cast<char*>(&_impl_.wheel_spd_rear_right_),
          reinterpret_cast<char*>(&other->_impl_.wheel_spd_rear_right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wheel_speed_rpt_7a::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[20]);
}

// ===================================================================

class Date_time_rpt_83::_Internal {
 public:
  using HasBits = decltype(std::declval<Date_time_rpt_83>()._impl_._has_bits_);
  static void set_has_time_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_date_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Date_time_rpt_83::Date_time_rpt_83(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Date_time_rpt_83)
}
Date_time_rpt_83::Date_time_rpt_83(const Date_time_rpt_83& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_second_){}
    , decltype(_impl_.time_minute_){}
    , decltype(_impl_.time_hour_){}
    , decltype(_impl_.date_day_){}
    , decltype(_impl_.date_month_){}
    , decltype(_impl_.date_year_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_second_, &from._impl_.time_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_year_) -
    reinterpret_cast<char*>(&_impl_.time_second_)) + sizeof(_impl_.date_year_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Date_time_rpt_83)
}

inline void Date_time_rpt_83::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_second_){0}
    , decltype(_impl_.time_minute_){0}
    , decltype(_impl_.time_hour_){0}
    , decltype(_impl_.date_day_){0}
    , decltype(_impl_.date_month_){0}
    , decltype(_impl_.date_year_){0}
  };
}

Date_time_rpt_83::~Date_time_rpt_83() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Date_time_rpt_83)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Date_time_rpt_83::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Date_time_rpt_83::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Date_time_rpt_83::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Date_time_rpt_83)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.time_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_year_) -
        reinterpret_cast<char*>(&_impl_.time_second_)) + sizeof(_impl_.date_year_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date_time_rpt_83::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 time_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_second(&has_bits);
          _impl_.time_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_minute(&has_bits);
          _impl_.time_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_hour(&has_bits);
          _impl_.time_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_date_day(&has_bits);
          _impl_.date_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_date_month(&has_bits);
          _impl_.date_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 date_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_date_year(&has_bits);
          _impl_.date_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Date_time_rpt_83::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Date_time_rpt_83)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_second(), target);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_minute(), target);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_hour(), target);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_date_day(), target);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_date_month(), target);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_date_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Date_time_rpt_83)
  return target;
}

size_t Date_time_rpt_83::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Date_time_rpt_83)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 time_second = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_second());
    }

    // optional int32 time_minute = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_minute());
    }

    // optional int32 time_hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_hour());
    }

    // optional int32 date_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_day());
    }

    // optional int32 date_month = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_month());
    }

    // optional int32 date_year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_date_year());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Date_time_rpt_83::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Date_time_rpt_83::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Date_time_rpt_83::GetClassData() const { return &_class_data_; }

void Date_time_rpt_83::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Date_time_rpt_83 *>(to)->MergeFrom(
      static_cast<const Date_time_rpt_83 &>(from));
}


void Date_time_rpt_83::MergeFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Date_time_rpt_83)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.time_second_ = from._impl_.time_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_minute_ = from._impl_.time_minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.time_hour_ = from._impl_.time_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.date_day_ = from._impl_.date_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.date_month_ = from._impl_.date_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.date_year_ = from._impl_.date_year_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Date_time_rpt_83::CopyFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Date_time_rpt_83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date_time_rpt_83::IsInitialized() const {
  return true;
}

void Date_time_rpt_83::InternalSwap(Date_time_rpt_83* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date_time_rpt_83, _impl_.date_year_)
      + sizeof(Date_time_rpt_83::_impl_.date_year_)
      - PROTOBUF_FIELD_OFFSET(Date_time_rpt_83, _impl_.time_second_)>(
          reinterpret_cast<char*>(&_impl_.time_second_),
          reinterpret_cast<char*>(&other->_impl_.time_second_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date_time_rpt_83::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[21]);
}

// ===================================================================

class Brake_motor_rpt_1_70::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_1_70>()._impl_._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_1_70::Brake_motor_rpt_1_70(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_1_70)
}
Brake_motor_rpt_1_70::Brake_motor_rpt_1_70(const Brake_motor_rpt_1_70& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){}
    , decltype(_impl_.shaft_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.motor_current_, &from._impl_.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shaft_position_) -
    reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_1_70)
}

inline void Brake_motor_rpt_1_70::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){0}
    , decltype(_impl_.shaft_position_){0}
  };
}

Brake_motor_rpt_1_70::~Brake_motor_rpt_1_70() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_1_70)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_1_70::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_1_70::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_1_70::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_1_70)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shaft_position_) -
        reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_1_70::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          _impl_.motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          _impl_.shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_1_70::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_1_70)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_1_70)
  return target;
}

size_t Brake_motor_rpt_1_70::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_1_70)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_1_70::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_1_70::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_1_70::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_1_70::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_1_70 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_1_70 &>(from));
}


void Brake_motor_rpt_1_70::MergeFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.motor_current_ = from._impl_.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shaft_position_ = from._impl_.shaft_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_1_70::CopyFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_1_70::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_1_70::InternalSwap(Brake_motor_rpt_1_70* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_1_70, _impl_.shaft_position_)
      + sizeof(Brake_motor_rpt_1_70::_impl_.shaft_position_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_1_70, _impl_.motor_current_)>(
          reinterpret_cast<char*>(&_impl_.motor_current_),
          reinterpret_cast<char*>(&other->_impl_.motor_current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_1_70::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[22]);
}

// ===================================================================

class Headlight_rpt_77::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_rpt_77>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Headlight_rpt_77::Headlight_rpt_77(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Headlight_rpt_77)
}
Headlight_rpt_77::Headlight_rpt_77(const Headlight_rpt_77& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commanded_value_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.commanded_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_rpt_77)
}

inline void Headlight_rpt_77::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
  };
}

Headlight_rpt_77::~Headlight_rpt_77() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_rpt_77)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Headlight_rpt_77::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headlight_rpt_77::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Headlight_rpt_77::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_rpt_77)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.commanded_value_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.commanded_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headlight_rpt_77::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Headlight_rpt_77_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Headlight_rpt_77_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Headlight_rpt_77_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Headlight_rpt_77::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_rpt_77)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_commanded_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_rpt_77)
  return target;
}

size_t Headlight_rpt_77::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_rpt_77)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headlight_rpt_77::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headlight_rpt_77::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headlight_rpt_77::GetClassData() const { return &_class_data_; }

void Headlight_rpt_77::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headlight_rpt_77 *>(to)->MergeFrom(
      static_cast<const Headlight_rpt_77 &>(from));
}


void Headlight_rpt_77::MergeFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_rpt_77)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headlight_rpt_77::CopyFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_rpt_77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_rpt_77::IsInitialized() const {
  return true;
}

void Headlight_rpt_77::InternalSwap(Headlight_rpt_77* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Headlight_rpt_77, _impl_.commanded_value_)
      + sizeof(Headlight_rpt_77::_impl_.commanded_value_)
      - PROTOBUF_FIELD_OFFSET(Headlight_rpt_77, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_rpt_77::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[23]);
}

// ===================================================================

class Accel_rpt_68::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_rpt_68>()._impl_._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Accel_rpt_68::Accel_rpt_68(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Accel_rpt_68)
}
Accel_rpt_68::Accel_rpt_68(const Accel_rpt_68& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_input_, &from._impl_.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_rpt_68)
}

inline void Accel_rpt_68::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Accel_rpt_68::~Accel_rpt_68() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_rpt_68)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accel_rpt_68::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Accel_rpt_68::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accel_rpt_68::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_rpt_68)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel_rpt_68::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          _impl_.manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          _impl_.commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          _impl_.output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accel_rpt_68::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_rpt_68)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_rpt_68)
  return target;
}

size_t Accel_rpt_68::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_rpt_68)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accel_rpt_68::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accel_rpt_68::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accel_rpt_68::GetClassData() const { return &_class_data_; }

void Accel_rpt_68::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accel_rpt_68 *>(to)->MergeFrom(
      static_cast<const Accel_rpt_68 &>(from));
}


void Accel_rpt_68::MergeFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_rpt_68)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accel_rpt_68::CopyFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_rpt_68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_rpt_68::IsInitialized() const {
  return true;
}

void Accel_rpt_68::InternalSwap(Accel_rpt_68* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel_rpt_68, _impl_.output_value_)
      + sizeof(Accel_rpt_68::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Accel_rpt_68, _impl_.manual_input_)>(
          reinterpret_cast<char*>(&_impl_.manual_input_),
          reinterpret_cast<char*>(&other->_impl_.manual_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_rpt_68::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[24]);
}

// ===================================================================

class Steering_motor_rpt_3_75::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_3_75>()._impl_._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_3_75::Steering_motor_rpt_3_75(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_3_75)
}
Steering_motor_rpt_3_75::Steering_motor_rpt_3_75(const Steering_motor_rpt_3_75& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){}
    , decltype(_impl_.torque_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.torque_output_, &from._impl_.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torque_input_) -
    reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_3_75)
}

inline void Steering_motor_rpt_3_75::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){0}
    , decltype(_impl_.torque_input_){0}
  };
}

Steering_motor_rpt_3_75::~Steering_motor_rpt_3_75() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_3_75)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_3_75::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_3_75::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_3_75::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_3_75)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.torque_input_) -
        reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_3_75::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          _impl_.torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          _impl_.torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_3_75::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_3_75)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_3_75)
  return target;
}

size_t Steering_motor_rpt_3_75::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_3_75)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_3_75::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_3_75::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_3_75::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_3_75::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_3_75 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_3_75 &>(from));
}


void Steering_motor_rpt_3_75::MergeFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.torque_output_ = from._impl_.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.torque_input_ = from._impl_.torque_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_3_75::CopyFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_3_75::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_3_75::InternalSwap(Steering_motor_rpt_3_75* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_3_75, _impl_.torque_input_)
      + sizeof(Steering_motor_rpt_3_75::_impl_.torque_input_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_3_75, _impl_.torque_output_)>(
          reinterpret_cast<char*>(&_impl_.torque_output_),
          reinterpret_cast<char*>(&other->_impl_.torque_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_3_75::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[25]);
}

// ===================================================================

class Turn_cmd_63::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_cmd_63>()._impl_._has_bits_);
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turn_cmd_63::Turn_cmd_63(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turn_cmd_63)
}
Turn_cmd_63::Turn_cmd_63(const Turn_cmd_63& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.turn_signal_cmd_ = from._impl_.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_cmd_63)
}

inline void Turn_cmd_63::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.turn_signal_cmd_){0}
  };
}

Turn_cmd_63::~Turn_cmd_63() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_cmd_63)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turn_cmd_63::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turn_cmd_63::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turn_cmd_63::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_cmd_63)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.turn_signal_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turn_cmd_63::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turn_cmd_63::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_cmd_63)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_cmd_63)
  return target;
}

size_t Turn_cmd_63::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_cmd_63)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turn_cmd_63::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turn_cmd_63::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turn_cmd_63::GetClassData() const { return &_class_data_; }

void Turn_cmd_63::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turn_cmd_63 *>(to)->MergeFrom(
      static_cast<const Turn_cmd_63 &>(from));
}


void Turn_cmd_63::MergeFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_cmd_63)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_cmd()) {
    _internal_set_turn_signal_cmd(from._internal_turn_signal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turn_cmd_63::CopyFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_cmd_63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_cmd_63::IsInitialized() const {
  return true;
}

void Turn_cmd_63::InternalSwap(Turn_cmd_63* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.turn_signal_cmd_, other->_impl_.turn_signal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_cmd_63::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[26]);
}

// ===================================================================

class Turn_rpt_64::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_rpt_64>()._impl_._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Turn_rpt_64::Turn_rpt_64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Turn_rpt_64)
}
Turn_rpt_64::Turn_rpt_64(const Turn_rpt_64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_input_, &from._impl_.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_rpt_64)
}

inline void Turn_rpt_64::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Turn_rpt_64::~Turn_rpt_64() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_rpt_64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Turn_rpt_64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Turn_rpt_64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Turn_rpt_64::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_rpt_64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Turn_rpt_64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Turn_rpt_64_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Turn_rpt_64_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Turn_rpt_64_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Turn_rpt_64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_rpt_64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_rpt_64)
  return target;
}

size_t Turn_rpt_64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_rpt_64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Turn_rpt_64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Turn_rpt_64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Turn_rpt_64::GetClassData() const { return &_class_data_; }

void Turn_rpt_64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Turn_rpt_64 *>(to)->MergeFrom(
      static_cast<const Turn_rpt_64 &>(from));
}


void Turn_rpt_64::MergeFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_rpt_64)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Turn_rpt_64::CopyFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_rpt_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_rpt_64::IsInitialized() const {
  return true;
}

void Turn_rpt_64::InternalSwap(Turn_rpt_64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Turn_rpt_64, _impl_.output_value_)
      + sizeof(Turn_rpt_64::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Turn_rpt_64, _impl_.manual_input_)>(
          reinterpret_cast<char*>(&_impl_.manual_input_),
          reinterpret_cast<char*>(&other->_impl_.manual_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_rpt_64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[27]);
}

// ===================================================================

class Shift_cmd_65::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_cmd_65>()._impl_._has_bits_);
  static void set_has_shift_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Shift_cmd_65::Shift_cmd_65(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Shift_cmd_65)
}
Shift_cmd_65::Shift_cmd_65(const Shift_cmd_65& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shift_cmd_ = from._impl_.shift_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_cmd_65)
}

inline void Shift_cmd_65::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shift_cmd_){0}
  };
}

Shift_cmd_65::~Shift_cmd_65() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_cmd_65)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shift_cmd_65::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shift_cmd_65::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shift_cmd_65::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_cmd_65)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shift_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shift_cmd_65::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_cmd_65_Shift_cmdType_IsValid(val))) {
            _internal_set_shift_cmd(static_cast<::apollo::canbus::Shift_cmd_65_Shift_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shift_cmd_65::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_cmd_65)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shift_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_cmd_65)
  return target;
}

size_t Shift_cmd_65::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_cmd_65)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_shift_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shift_cmd_65::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shift_cmd_65::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shift_cmd_65::GetClassData() const { return &_class_data_; }

void Shift_cmd_65::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shift_cmd_65 *>(to)->MergeFrom(
      static_cast<const Shift_cmd_65 &>(from));
}


void Shift_cmd_65::MergeFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_cmd_65)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shift_cmd()) {
    _internal_set_shift_cmd(from._internal_shift_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shift_cmd_65::CopyFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_cmd_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_cmd_65::IsInitialized() const {
  return true;
}

void Shift_cmd_65::InternalSwap(Shift_cmd_65* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shift_cmd_, other->_impl_.shift_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_cmd_65::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[28]);
}

// ===================================================================

class Shift_rpt_66::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_rpt_66>()._impl_._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Shift_rpt_66::Shift_rpt_66(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Shift_rpt_66)
}
Shift_rpt_66::Shift_rpt_66(const Shift_rpt_66& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.output_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_input_, &from._impl_.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_value_) -
    reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_rpt_66)
}

inline void Shift_rpt_66::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manual_input_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.output_value_){0}
  };
}

Shift_rpt_66::~Shift_rpt_66() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_rpt_66)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shift_rpt_66::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Shift_rpt_66::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shift_rpt_66::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_rpt_66)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_value_) -
        reinterpret_cast<char*>(&_impl_.manual_input_)) + sizeof(_impl_.output_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shift_rpt_66::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Shift_rpt_66_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Shift_rpt_66_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Shift_rpt_66_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shift_rpt_66::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_rpt_66)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_rpt_66)
  return target;
}

size_t Shift_rpt_66::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_rpt_66)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shift_rpt_66::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Shift_rpt_66::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shift_rpt_66::GetClassData() const { return &_class_data_; }

void Shift_rpt_66::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Shift_rpt_66 *>(to)->MergeFrom(
      static_cast<const Shift_rpt_66 &>(from));
}


void Shift_rpt_66::MergeFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_rpt_66)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shift_rpt_66::CopyFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_rpt_66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_rpt_66::IsInitialized() const {
  return true;
}

void Shift_rpt_66::InternalSwap(Shift_rpt_66* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shift_rpt_66, _impl_.output_value_)
      + sizeof(Shift_rpt_66::_impl_.output_value_)
      - PROTOBUF_FIELD_OFFSET(Shift_rpt_66, _impl_.manual_input_)>(
          reinterpret_cast<char*>(&_impl_.manual_input_),
          reinterpret_cast<char*>(&other->_impl_.manual_input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_rpt_66::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[29]);
}

// ===================================================================

class Accel_cmd_67::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_cmd_67>()._impl_._has_bits_);
  static void set_has_accel_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Accel_cmd_67::Accel_cmd_67(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Accel_cmd_67)
}
Accel_cmd_67::Accel_cmd_67(const Accel_cmd_67& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accel_cmd_ = from._impl_.accel_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_cmd_67)
}

inline void Accel_cmd_67::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_cmd_){0}
  };
}

Accel_cmd_67::~Accel_cmd_67() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_cmd_67)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Accel_cmd_67::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Accel_cmd_67::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Accel_cmd_67::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_cmd_67)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accel_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel_cmd_67::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double accel_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_accel_cmd(&has_bits);
          _impl_.accel_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Accel_cmd_67::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_cmd_67)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double accel_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_accel_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_cmd_67)
  return target;
}

size_t Accel_cmd_67::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_cmd_67)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double accel_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Accel_cmd_67::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Accel_cmd_67::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Accel_cmd_67::GetClassData() const { return &_class_data_; }

void Accel_cmd_67::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Accel_cmd_67 *>(to)->MergeFrom(
      static_cast<const Accel_cmd_67 &>(from));
}


void Accel_cmd_67::MergeFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_cmd_67)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accel_cmd()) {
    _internal_set_accel_cmd(from._internal_accel_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Accel_cmd_67::CopyFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_cmd_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_cmd_67::IsInitialized() const {
  return true;
}

void Accel_cmd_67::InternalSwap(Accel_cmd_67* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accel_cmd_, other->_impl_.accel_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_cmd_67::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[30]);
}

// ===================================================================

class Lat_lon_heading_rpt_82::_Internal {
 public:
  using HasBits = decltype(std::declval<Lat_lon_heading_rpt_82>()._impl_._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}
Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82(const Lat_lon_heading_rpt_82& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.longitude_seconds_){}
    , decltype(_impl_.longitude_minutes_){}
    , decltype(_impl_.longitude_degrees_){}
    , decltype(_impl_.latitude_seconds_){}
    , decltype(_impl_.latitude_minutes_){}
    , decltype(_impl_.latitude_degrees_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.heading_, &from._impl_.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_degrees_) -
    reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.latitude_degrees_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}

inline void Lat_lon_heading_rpt_82::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.longitude_seconds_){0}
    , decltype(_impl_.longitude_minutes_){0}
    , decltype(_impl_.longitude_degrees_){0}
    , decltype(_impl_.latitude_seconds_){0}
    , decltype(_impl_.latitude_minutes_){0}
    , decltype(_impl_.latitude_degrees_){0}
  };
}

Lat_lon_heading_rpt_82::~Lat_lon_heading_rpt_82() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lat_lon_heading_rpt_82)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lat_lon_heading_rpt_82::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lat_lon_heading_rpt_82::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lat_lon_heading_rpt_82::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lat_lon_heading_rpt_82)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latitude_degrees_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.latitude_degrees_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lat_lon_heading_rpt_82::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_longitude_seconds(&has_bits);
          _impl_.longitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_longitude_minutes(&has_bits);
          _impl_.longitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 longitude_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_longitude_degrees(&has_bits);
          _impl_.longitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_latitude_seconds(&has_bits);
          _impl_.latitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_minutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_latitude_minutes(&has_bits);
          _impl_.latitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 latitude_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_latitude_degrees(&has_bits);
          _impl_.latitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lat_lon_heading_rpt_82::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lat_lon_heading_rpt_82)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude_seconds(), target);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_longitude_minutes(), target);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_longitude_degrees(), target);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_latitude_seconds(), target);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_latitude_minutes(), target);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_latitude_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lat_lon_heading_rpt_82)
  return target;
}

size_t Lat_lon_heading_rpt_82::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lat_lon_heading_rpt_82)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 longitude_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_seconds());
    }

    // optional int32 longitude_minutes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_minutes());
    }

    // optional int32 longitude_degrees = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude_degrees());
    }

    // optional int32 latitude_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_seconds());
    }

    // optional int32 latitude_minutes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_minutes());
    }

    // optional int32 latitude_degrees = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude_degrees());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lat_lon_heading_rpt_82::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lat_lon_heading_rpt_82::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lat_lon_heading_rpt_82::GetClassData() const { return &_class_data_; }

void Lat_lon_heading_rpt_82::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lat_lon_heading_rpt_82 *>(to)->MergeFrom(
      static_cast<const Lat_lon_heading_rpt_82 &>(from));
}


void Lat_lon_heading_rpt_82::MergeFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitude_seconds_ = from._impl_.longitude_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.longitude_minutes_ = from._impl_.longitude_minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.longitude_degrees_ = from._impl_.longitude_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.latitude_seconds_ = from._impl_.latitude_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.latitude_minutes_ = from._impl_.latitude_minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.latitude_degrees_ = from._impl_.latitude_degrees_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lat_lon_heading_rpt_82::CopyFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_lon_heading_rpt_82::IsInitialized() const {
  return true;
}

void Lat_lon_heading_rpt_82::InternalSwap(Lat_lon_heading_rpt_82* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lat_lon_heading_rpt_82, _impl_.latitude_degrees_)
      + sizeof(Lat_lon_heading_rpt_82::_impl_.latitude_degrees_)
      - PROTOBUF_FIELD_OFFSET(Lat_lon_heading_rpt_82, _impl_.heading_)>(
          reinterpret_cast<char*>(&_impl_.heading_),
          reinterpret_cast<char*>(&other->_impl_.heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lat_lon_heading_rpt_82::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[31]);
}

// ===================================================================

class Global_cmd_69::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_cmd_69>()._impl_._has_bits_);
  static void set_has_pacmod_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ignore_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Global_cmd_69::Global_cmd_69(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Global_cmd_69)
}
Global_cmd_69::Global_cmd_69(const Global_cmd_69& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_enable_){}
    , decltype(_impl_.clear_override_){}
    , decltype(_impl_.ignore_override_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pacmod_enable_, &from._impl_.pacmod_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ignore_override_) -
    reinterpret_cast<char*>(&_impl_.pacmod_enable_)) + sizeof(_impl_.ignore_override_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_cmd_69)
}

inline void Global_cmd_69::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pacmod_enable_){0}
    , decltype(_impl_.clear_override_){0}
    , decltype(_impl_.ignore_override_){0}
  };
}

Global_cmd_69::~Global_cmd_69() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_cmd_69)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Global_cmd_69::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Global_cmd_69::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Global_cmd_69::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_cmd_69)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pacmod_enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ignore_override_) -
        reinterpret_cast<char*>(&_impl_.pacmod_enable_)) + sizeof(_impl_.ignore_override_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Global_cmd_69::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Pacmod_enableType_IsValid(val))) {
            _internal_set_pacmod_enable(static_cast<::apollo::canbus::Global_cmd_69_Pacmod_enableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Clear_overrideType_IsValid(val))) {
            _internal_set_clear_override(static_cast<::apollo::canbus::Global_cmd_69_Clear_overrideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Ignore_overrideType_IsValid(val))) {
            _internal_set_ignore_override(static_cast<::apollo::canbus::Global_cmd_69_Ignore_overrideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Global_cmd_69::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_cmd_69)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pacmod_enable(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_clear_override(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ignore_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_cmd_69)
  return target;
}

size_t Global_cmd_69::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_cmd_69)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pacmod_enable());
    }

    // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_clear_override());
    }

    // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ignore_override());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Global_cmd_69::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Global_cmd_69::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Global_cmd_69::GetClassData() const { return &_class_data_; }

void Global_cmd_69::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Global_cmd_69 *>(to)->MergeFrom(
      static_cast<const Global_cmd_69 &>(from));
}


void Global_cmd_69::MergeFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_cmd_69)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pacmod_enable_ = from._impl_.pacmod_enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.clear_override_ = from._impl_.clear_override_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ignore_override_ = from._impl_.ignore_override_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Global_cmd_69::CopyFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_cmd_69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_cmd_69::IsInitialized() const {
  return true;
}

void Global_cmd_69::InternalSwap(Global_cmd_69* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Global_cmd_69, _impl_.ignore_override_)
      + sizeof(Global_cmd_69::_impl_.ignore_override_)
      - PROTOBUF_FIELD_OFFSET(Global_cmd_69, _impl_.pacmod_enable_)>(
          reinterpret_cast<char*>(&_impl_.pacmod_enable_),
          reinterpret_cast<char*>(&other->_impl_.pacmod_enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_cmd_69::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[32]);
}

// ===================================================================

class Parking_brake_status_rpt_80::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_status_rpt_80>()._impl_._has_bits_);
  static void set_has_parking_brake_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Parking_brake_status_rpt_80::Parking_brake_status_rpt_80(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Parking_brake_status_rpt_80)
}
Parking_brake_status_rpt_80::Parking_brake_status_rpt_80(const Parking_brake_status_rpt_80& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_brake_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parking_brake_enabled_ = from._impl_.parking_brake_enabled_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_status_rpt_80)
}

inline void Parking_brake_status_rpt_80::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_brake_enabled_){0}
  };
}

Parking_brake_status_rpt_80::~Parking_brake_status_rpt_80() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_status_rpt_80)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parking_brake_status_rpt_80::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parking_brake_status_rpt_80::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parking_brake_status_rpt_80::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_status_rpt_80)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parking_brake_enabled_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parking_brake_status_rpt_80::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(val))) {
            _internal_set_parking_brake_enabled(static_cast<::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parking_brake_status_rpt_80::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_status_rpt_80)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_brake_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_status_rpt_80)
  return target;
}

size_t Parking_brake_status_rpt_80::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_status_rpt_80)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_parking_brake_enabled());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parking_brake_status_rpt_80::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parking_brake_status_rpt_80::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parking_brake_status_rpt_80::GetClassData() const { return &_class_data_; }

void Parking_brake_status_rpt_80::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parking_brake_status_rpt_80 *>(to)->MergeFrom(
      static_cast<const Parking_brake_status_rpt_80 &>(from));
}


void Parking_brake_status_rpt_80::MergeFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parking_brake_enabled()) {
    _internal_set_parking_brake_enabled(from._internal_parking_brake_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parking_brake_status_rpt_80::CopyFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_status_rpt_80::IsInitialized() const {
  return true;
}

void Parking_brake_status_rpt_80::InternalSwap(Parking_brake_status_rpt_80* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.parking_brake_enabled_, other->_impl_.parking_brake_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_status_rpt_80::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[33]);
}

// ===================================================================

class Yaw_rate_rpt_81::_Internal {
 public:
  using HasBits = decltype(std::declval<Yaw_rate_rpt_81>()._impl_._has_bits_);
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Yaw_rate_rpt_81::Yaw_rate_rpt_81(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Yaw_rate_rpt_81)
}
Yaw_rate_rpt_81::Yaw_rate_rpt_81(const Yaw_rate_rpt_81& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.yaw_rate_ = from._impl_.yaw_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Yaw_rate_rpt_81)
}

inline void Yaw_rate_rpt_81::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_rate_){0}
  };
}

Yaw_rate_rpt_81::~Yaw_rate_rpt_81() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Yaw_rate_rpt_81)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Yaw_rate_rpt_81::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Yaw_rate_rpt_81::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Yaw_rate_rpt_81::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Yaw_rate_rpt_81)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yaw_rate_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Yaw_rate_rpt_81::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double yaw_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_yaw_rate(&has_bits);
          _impl_.yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Yaw_rate_rpt_81::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Yaw_rate_rpt_81)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Yaw_rate_rpt_81)
  return target;
}

size_t Yaw_rate_rpt_81::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Yaw_rate_rpt_81)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double yaw_rate = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Yaw_rate_rpt_81::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Yaw_rate_rpt_81::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Yaw_rate_rpt_81::GetClassData() const { return &_class_data_; }

void Yaw_rate_rpt_81::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Yaw_rate_rpt_81 *>(to)->MergeFrom(
      static_cast<const Yaw_rate_rpt_81 &>(from));
}


void Yaw_rate_rpt_81::MergeFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Yaw_rate_rpt_81)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_yaw_rate()) {
    _internal_set_yaw_rate(from._internal_yaw_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Yaw_rate_rpt_81::CopyFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Yaw_rate_rpt_81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw_rate_rpt_81::IsInitialized() const {
  return true;
}

void Yaw_rate_rpt_81::InternalSwap(Yaw_rate_rpt_81* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.yaw_rate_, other->_impl_.yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Yaw_rate_rpt_81::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[34]);
}

// ===================================================================

class Horn_rpt_79::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_rpt_79>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Horn_rpt_79::Horn_rpt_79(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Horn_rpt_79)
}
Horn_rpt_79::Horn_rpt_79(const Horn_rpt_79& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_rpt_79)
}

inline void Horn_rpt_79::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
  };
}

Horn_rpt_79::~Horn_rpt_79() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_rpt_79)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Horn_rpt_79::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Horn_rpt_79::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Horn_rpt_79::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_rpt_79)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Horn_rpt_79::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Horn_rpt_79_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Horn_rpt_79_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Horn_rpt_79_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Horn_rpt_79::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_rpt_79)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_rpt_79)
  return target;
}

size_t Horn_rpt_79::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_rpt_79)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Horn_rpt_79::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Horn_rpt_79::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Horn_rpt_79::GetClassData() const { return &_class_data_; }

void Horn_rpt_79::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Horn_rpt_79 *>(to)->MergeFrom(
      static_cast<const Horn_rpt_79 &>(from));
}


void Horn_rpt_79::MergeFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_rpt_79)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Horn_rpt_79::CopyFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_rpt_79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_rpt_79::IsInitialized() const {
  return true;
}

void Horn_rpt_79::InternalSwap(Horn_rpt_79* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Horn_rpt_79, _impl_.manual_input_)
      + sizeof(Horn_rpt_79::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Horn_rpt_79, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_rpt_79::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[35]);
}

// ===================================================================

class Horn_cmd_78::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_cmd_78>()._impl_._has_bits_);
  static void set_has_horn_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Horn_cmd_78::Horn_cmd_78(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Horn_cmd_78)
}
Horn_cmd_78::Horn_cmd_78(const Horn_cmd_78& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horn_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.horn_cmd_ = from._impl_.horn_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_cmd_78)
}

inline void Horn_cmd_78::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horn_cmd_){0}
  };
}

Horn_cmd_78::~Horn_cmd_78() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_cmd_78)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Horn_cmd_78::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Horn_cmd_78::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Horn_cmd_78::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_cmd_78)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.horn_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Horn_cmd_78::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_cmd_78_Horn_cmdType_IsValid(val))) {
            _internal_set_horn_cmd(static_cast<::apollo::canbus::Horn_cmd_78_Horn_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Horn_cmd_78::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_cmd_78)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_horn_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_cmd_78)
  return target;
}

size_t Horn_cmd_78::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_cmd_78)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_horn_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Horn_cmd_78::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Horn_cmd_78::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Horn_cmd_78::GetClassData() const { return &_class_data_; }

void Horn_cmd_78::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Horn_cmd_78 *>(to)->MergeFrom(
      static_cast<const Horn_cmd_78 &>(from));
}


void Horn_cmd_78::MergeFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_cmd_78)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_horn_cmd()) {
    _internal_set_horn_cmd(from._internal_horn_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Horn_cmd_78::CopyFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_cmd_78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_cmd_78::IsInitialized() const {
  return true;
}

void Horn_cmd_78::InternalSwap(Horn_cmd_78* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.horn_cmd_, other->_impl_.horn_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_cmd_78::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[36]);
}

// ===================================================================

class Wiper_rpt_91::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_rpt_91>()._impl_._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Wiper_rpt_91::Wiper_rpt_91(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wiper_rpt_91)
}
Wiper_rpt_91::Wiper_rpt_91(const Wiper_rpt_91& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){}
    , decltype(_impl_.commanded_value_){}
    , decltype(_impl_.manual_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.output_value_, &from._impl_.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manual_input_) -
    reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_rpt_91)
}

inline void Wiper_rpt_91::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_value_){0}
    , decltype(_impl_.commanded_value_){0}
    , decltype(_impl_.manual_input_){0}
  };
}

Wiper_rpt_91::~Wiper_rpt_91() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_rpt_91)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wiper_rpt_91::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wiper_rpt_91::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wiper_rpt_91::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_rpt_91)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manual_input_) -
        reinterpret_cast<char*>(&_impl_.output_value_)) + sizeof(_impl_.manual_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wiper_rpt_91::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Wiper_rpt_91_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Wiper_rpt_91_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Wiper_rpt_91_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wiper_rpt_91::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_rpt_91)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_rpt_91)
  return target;
}

size_t Wiper_rpt_91::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_rpt_91)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wiper_rpt_91::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wiper_rpt_91::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wiper_rpt_91::GetClassData() const { return &_class_data_; }

void Wiper_rpt_91::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wiper_rpt_91 *>(to)->MergeFrom(
      static_cast<const Wiper_rpt_91 &>(from));
}


void Wiper_rpt_91::MergeFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_rpt_91)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_value_ = from._impl_.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commanded_value_ = from._impl_.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.manual_input_ = from._impl_.manual_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wiper_rpt_91::CopyFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_rpt_91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_rpt_91::IsInitialized() const {
  return true;
}

void Wiper_rpt_91::InternalSwap(Wiper_rpt_91* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wiper_rpt_91, _impl_.manual_input_)
      + sizeof(Wiper_rpt_91::_impl_.manual_input_)
      - PROTOBUF_FIELD_OFFSET(Wiper_rpt_91, _impl_.output_value_)>(
          reinterpret_cast<char*>(&_impl_.output_value_),
          reinterpret_cast<char*>(&other->_impl_.output_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_rpt_91::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[37]);
}

// ===================================================================

class Vehicle_speed_rpt_6f::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_speed_rpt_6f>()._impl_._has_bits_);
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}
Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f(const Vehicle_speed_rpt_6f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_speed_){}
    , decltype(_impl_.vehicle_speed_valid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vehicle_speed_, &from._impl_.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vehicle_speed_valid_) -
    reinterpret_cast<char*>(&_impl_.vehicle_speed_)) + sizeof(_impl_.vehicle_speed_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}

inline void Vehicle_speed_rpt_6f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_speed_){0}
    , decltype(_impl_.vehicle_speed_valid_){0}
  };
}

Vehicle_speed_rpt_6f::~Vehicle_speed_rpt_6f() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_speed_rpt_6f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vehicle_speed_rpt_6f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vehicle_speed_rpt_6f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vehicle_speed_rpt_6f::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_speed_rpt_6f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.vehicle_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vehicle_speed_valid_) -
        reinterpret_cast<char*>(&_impl_.vehicle_speed_)) + sizeof(_impl_.vehicle_speed_valid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_speed_rpt_6f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double vehicle_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          _impl_.vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(val))) {
            _internal_set_vehicle_speed_valid(static_cast<::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vehicle_speed_rpt_6f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_speed_rpt_6f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_vehicle_speed(), target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vehicle_speed_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_speed_rpt_6f)
  return target;
}

size_t Vehicle_speed_rpt_6f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_speed_rpt_6f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double vehicle_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicle_speed_valid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vehicle_speed_rpt_6f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vehicle_speed_rpt_6f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vehicle_speed_rpt_6f::GetClassData() const { return &_class_data_; }

void Vehicle_speed_rpt_6f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vehicle_speed_rpt_6f *>(to)->MergeFrom(
      static_cast<const Vehicle_speed_rpt_6f &>(from));
}


void Vehicle_speed_rpt_6f::MergeFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.vehicle_speed_ = from._impl_.vehicle_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vehicle_speed_valid_ = from._impl_.vehicle_speed_valid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle_speed_rpt_6f::CopyFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_speed_rpt_6f::IsInitialized() const {
  return true;
}

void Vehicle_speed_rpt_6f::InternalSwap(Vehicle_speed_rpt_6f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_speed_rpt_6f, _impl_.vehicle_speed_valid_)
      + sizeof(Vehicle_speed_rpt_6f::_impl_.vehicle_speed_valid_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_speed_rpt_6f, _impl_.vehicle_speed_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_speed_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_speed_rpt_6f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[38]);
}

// ===================================================================

class Headlight_cmd_76::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_cmd_76>()._impl_._has_bits_);
  static void set_has_headlight_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Headlight_cmd_76::Headlight_cmd_76(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Headlight_cmd_76)
}
Headlight_cmd_76::Headlight_cmd_76(const Headlight_cmd_76& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headlight_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.headlight_cmd_ = from._impl_.headlight_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_cmd_76)
}

inline void Headlight_cmd_76::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headlight_cmd_){0}
  };
}

Headlight_cmd_76::~Headlight_cmd_76() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_cmd_76)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Headlight_cmd_76::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headlight_cmd_76::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Headlight_cmd_76::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_cmd_76)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headlight_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headlight_cmd_76::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_cmd_76_Headlight_cmdType_IsValid(val))) {
            _internal_set_headlight_cmd(static_cast<::apollo::canbus::Headlight_cmd_76_Headlight_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Headlight_cmd_76::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_cmd_76)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_headlight_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_cmd_76)
  return target;
}

size_t Headlight_cmd_76::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_cmd_76)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_headlight_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headlight_cmd_76::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headlight_cmd_76::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headlight_cmd_76::GetClassData() const { return &_class_data_; }

void Headlight_cmd_76::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headlight_cmd_76 *>(to)->MergeFrom(
      static_cast<const Headlight_cmd_76 &>(from));
}


void Headlight_cmd_76::MergeFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_cmd_76)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_headlight_cmd()) {
    _internal_set_headlight_cmd(from._internal_headlight_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headlight_cmd_76::CopyFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_cmd_76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_cmd_76::IsInitialized() const {
  return true;
}

void Headlight_cmd_76::InternalSwap(Headlight_cmd_76* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.headlight_cmd_, other->_impl_.headlight_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_cmd_76::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[39]);
}

// ===================================================================

class Steering_motor_rpt_2_74::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_2_74>()._impl_._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_motor_rpt_2_74::Steering_motor_rpt_2_74(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_2_74)
}
Steering_motor_rpt_2_74::Steering_motor_rpt_2_74(const Steering_motor_rpt_2_74& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){}
    , decltype(_impl_.motor_temperature_){}
    , decltype(_impl_.angular_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.encoder_temperature_, &from._impl_.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angular_speed_) -
    reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_2_74)
}

inline void Steering_motor_rpt_2_74::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){0}
    , decltype(_impl_.motor_temperature_){0}
    , decltype(_impl_.angular_speed_){0}
  };
}

Steering_motor_rpt_2_74::~Steering_motor_rpt_2_74() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_2_74)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_2_74::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_2_74::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_2_74::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_2_74)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angular_speed_) -
        reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_2_74::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          _impl_.encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          _impl_.motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          _impl_.angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_2_74::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_2_74)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_2_74)
  return target;
}

size_t Steering_motor_rpt_2_74::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_2_74)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_2_74::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_2_74::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_2_74::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_2_74::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_2_74 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_2_74 &>(from));
}


void Steering_motor_rpt_2_74::MergeFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encoder_temperature_ = from._impl_.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motor_temperature_ = from._impl_.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.angular_speed_ = from._impl_.angular_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_2_74::CopyFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_2_74::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_2_74::InternalSwap(Steering_motor_rpt_2_74* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_2_74, _impl_.angular_speed_)
      + sizeof(Steering_motor_rpt_2_74::_impl_.angular_speed_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_2_74, _impl_.encoder_temperature_)>(
          reinterpret_cast<char*>(&_impl_.encoder_temperature_),
          reinterpret_cast<char*>(&other->_impl_.encoder_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_2_74::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[40]);
}

// ===================================================================

class Brake_motor_rpt_2_71::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_2_71>()._impl_._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Brake_motor_rpt_2_71::Brake_motor_rpt_2_71(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_2_71)
}
Brake_motor_rpt_2_71::Brake_motor_rpt_2_71(const Brake_motor_rpt_2_71& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){}
    , decltype(_impl_.motor_temperature_){}
    , decltype(_impl_.angular_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.encoder_temperature_, &from._impl_.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angular_speed_) -
    reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_2_71)
}

inline void Brake_motor_rpt_2_71::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encoder_temperature_){0}
    , decltype(_impl_.motor_temperature_){0}
    , decltype(_impl_.angular_speed_){0}
  };
}

Brake_motor_rpt_2_71::~Brake_motor_rpt_2_71() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_2_71)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_2_71::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_2_71::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_2_71::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_2_71)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angular_speed_) -
        reinterpret_cast<char*>(&_impl_.encoder_temperature_)) + sizeof(_impl_.angular_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_2_71::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          _impl_.encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          _impl_.motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          _impl_.angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_2_71::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_2_71)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_2_71)
  return target;
}

size_t Brake_motor_rpt_2_71::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_2_71)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_2_71::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_2_71::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_2_71::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_2_71::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_2_71 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_2_71 &>(from));
}


void Brake_motor_rpt_2_71::MergeFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encoder_temperature_ = from._impl_.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.motor_temperature_ = from._impl_.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.angular_speed_ = from._impl_.angular_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_2_71::CopyFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_2_71::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_2_71::InternalSwap(Brake_motor_rpt_2_71* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_2_71, _impl_.angular_speed_)
      + sizeof(Brake_motor_rpt_2_71::_impl_.angular_speed_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_2_71, _impl_.encoder_temperature_)>(
          reinterpret_cast<char*>(&_impl_.encoder_temperature_),
          reinterpret_cast<char*>(&other->_impl_.encoder_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_2_71::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[41]);
}

// ===================================================================

class Steering_motor_rpt_1_73::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_1_73>()._impl_._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_1_73::Steering_motor_rpt_1_73(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Steering_motor_rpt_1_73)
}
Steering_motor_rpt_1_73::Steering_motor_rpt_1_73(const Steering_motor_rpt_1_73& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){}
    , decltype(_impl_.shaft_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.motor_current_, &from._impl_.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shaft_position_) -
    reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_1_73)
}

inline void Steering_motor_rpt_1_73::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_current_){0}
    , decltype(_impl_.shaft_position_){0}
  };
}

Steering_motor_rpt_1_73::~Steering_motor_rpt_1_73() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_1_73)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Steering_motor_rpt_1_73::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Steering_motor_rpt_1_73::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Steering_motor_rpt_1_73::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_1_73)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shaft_position_) -
        reinterpret_cast<char*>(&_impl_.motor_current_)) + sizeof(_impl_.shaft_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Steering_motor_rpt_1_73::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          _impl_.motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          _impl_.shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Steering_motor_rpt_1_73::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_1_73)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_1_73)
  return target;
}

size_t Steering_motor_rpt_1_73::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_1_73)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Steering_motor_rpt_1_73::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Steering_motor_rpt_1_73::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Steering_motor_rpt_1_73::GetClassData() const { return &_class_data_; }

void Steering_motor_rpt_1_73::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Steering_motor_rpt_1_73 *>(to)->MergeFrom(
      static_cast<const Steering_motor_rpt_1_73 &>(from));
}


void Steering_motor_rpt_1_73::MergeFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.motor_current_ = from._impl_.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.shaft_position_ = from._impl_.shaft_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Steering_motor_rpt_1_73::CopyFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_1_73::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_1_73::InternalSwap(Steering_motor_rpt_1_73* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_1_73, _impl_.shaft_position_)
      + sizeof(Steering_motor_rpt_1_73::_impl_.shaft_position_)
      - PROTOBUF_FIELD_OFFSET(Steering_motor_rpt_1_73, _impl_.motor_current_)>(
          reinterpret_cast<char*>(&_impl_.motor_current_),
          reinterpret_cast<char*>(&other->_impl_.motor_current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_1_73::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[42]);
}

// ===================================================================

class Wiper_cmd_90::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_cmd_90>()._impl_._has_bits_);
  static void set_has_wiper_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Wiper_cmd_90::Wiper_cmd_90(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Wiper_cmd_90)
}
Wiper_cmd_90::Wiper_cmd_90(const Wiper_cmd_90& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wiper_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.wiper_cmd_ = from._impl_.wiper_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_cmd_90)
}

inline void Wiper_cmd_90::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wiper_cmd_){0}
  };
}

Wiper_cmd_90::~Wiper_cmd_90() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_cmd_90)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wiper_cmd_90::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wiper_cmd_90::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wiper_cmd_90::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_cmd_90)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wiper_cmd_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wiper_cmd_90::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_cmd_90_Wiper_cmdType_IsValid(val))) {
            _internal_set_wiper_cmd(static_cast<::apollo::canbus::Wiper_cmd_90_Wiper_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wiper_cmd_90::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_cmd_90)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_wiper_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_cmd_90)
  return target;
}

size_t Wiper_cmd_90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_cmd_90)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wiper_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wiper_cmd_90::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wiper_cmd_90::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wiper_cmd_90::GetClassData() const { return &_class_data_; }

void Wiper_cmd_90::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wiper_cmd_90 *>(to)->MergeFrom(
      static_cast<const Wiper_cmd_90 &>(from));
}


void Wiper_cmd_90::MergeFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_cmd_90)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wiper_cmd()) {
    _internal_set_wiper_cmd(from._internal_wiper_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wiper_cmd_90::CopyFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_cmd_90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_cmd_90::IsInitialized() const {
  return true;
}

void Wiper_cmd_90::InternalSwap(Wiper_cmd_90* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.wiper_cmd_, other->_impl_.wiper_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_cmd_90::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[43]);
}

// ===================================================================

class Brake_motor_rpt_3_72::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_3_72>()._impl_._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_3_72::Brake_motor_rpt_3_72(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Brake_motor_rpt_3_72)
}
Brake_motor_rpt_3_72::Brake_motor_rpt_3_72(const Brake_motor_rpt_3_72& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){}
    , decltype(_impl_.torque_input_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.torque_output_, &from._impl_.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torque_input_) -
    reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_3_72)
}

inline void Brake_motor_rpt_3_72::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torque_output_){0}
    , decltype(_impl_.torque_input_){0}
  };
}

Brake_motor_rpt_3_72::~Brake_motor_rpt_3_72() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_3_72)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Brake_motor_rpt_3_72::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Brake_motor_rpt_3_72::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Brake_motor_rpt_3_72::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_3_72)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.torque_input_) -
        reinterpret_cast<char*>(&_impl_.torque_output_)) + sizeof(_impl_.torque_input_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Brake_motor_rpt_3_72::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          _impl_.torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          _impl_.torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Brake_motor_rpt_3_72::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_3_72)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_3_72)
  return target;
}

size_t Brake_motor_rpt_3_72::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_3_72)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Brake_motor_rpt_3_72::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Brake_motor_rpt_3_72::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Brake_motor_rpt_3_72::GetClassData() const { return &_class_data_; }

void Brake_motor_rpt_3_72::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Brake_motor_rpt_3_72 *>(to)->MergeFrom(
      static_cast<const Brake_motor_rpt_3_72 &>(from));
}


void Brake_motor_rpt_3_72::MergeFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.torque_output_ = from._impl_.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.torque_input_ = from._impl_.torque_input_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Brake_motor_rpt_3_72::CopyFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_3_72::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_3_72::InternalSwap(Brake_motor_rpt_3_72* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_3_72, _impl_.torque_input_)
      + sizeof(Brake_motor_rpt_3_72::_impl_.torque_input_)
      - PROTOBUF_FIELD_OFFSET(Brake_motor_rpt_3_72, _impl_.torque_output_)>(
          reinterpret_cast<char*>(&_impl_.torque_output_),
          reinterpret_cast<char*>(&other->_impl_.torque_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_3_72::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[44]);
}

// ===================================================================

class Gem::_Internal {
 public:
  using HasBits = decltype(std::declval<Gem>()._impl_._has_bits_);
  static const ::apollo::canbus::Global_rpt_6a& global_rpt_6a(const Gem* msg);
  static void set_has_global_rpt_6a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Brake_cmd_6b& brake_cmd_6b(const Gem* msg);
  static void set_has_brake_cmd_6b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Brake_rpt_6c& brake_rpt_6c(const Gem* msg);
  static void set_has_brake_rpt_6c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Steering_cmd_6d& steering_cmd_6d(const Gem* msg);
  static void set_has_steering_cmd_6d(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Steering_rpt_1_6e& steering_rpt_1_6e(const Gem* msg);
  static void set_has_steering_rpt_1_6e(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Wheel_speed_rpt_7a& wheel_speed_rpt_7a(const Gem* msg);
  static void set_has_wheel_speed_rpt_7a(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Date_time_rpt_83& date_time_rpt_83(const Gem* msg);
  static void set_has_date_time_rpt_83(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_1_70& brake_motor_rpt_1_70(const Gem* msg);
  static void set_has_brake_motor_rpt_1_70(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Headlight_rpt_77& headlight_rpt_77(const Gem* msg);
  static void set_has_headlight_rpt_77(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Accel_rpt_68& accel_rpt_68(const Gem* msg);
  static void set_has_accel_rpt_68(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_3_75& steering_motor_rpt_3_75(const Gem* msg);
  static void set_has_steering_motor_rpt_3_75(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Turn_cmd_63& turn_cmd_63(const Gem* msg);
  static void set_has_turn_cmd_63(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Turn_rpt_64& turn_rpt_64(const Gem* msg);
  static void set_has_turn_rpt_64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Shift_cmd_65& shift_cmd_65(const Gem* msg);
  static void set_has_shift_cmd_65(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Shift_rpt_66& shift_rpt_66(const Gem* msg);
  static void set_has_shift_rpt_66(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Accel_cmd_67& accel_cmd_67(const Gem* msg);
  static void set_has_accel_cmd_67(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Lat_lon_heading_rpt_82& lat_lon_heading_rpt_82(const Gem* msg);
  static void set_has_lat_lon_heading_rpt_82(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Global_cmd_69& global_cmd_69(const Gem* msg);
  static void set_has_global_cmd_69(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Parking_brake_status_rpt_80& parking_brake_status_rpt_80(const Gem* msg);
  static void set_has_parking_brake_status_rpt_80(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Yaw_rate_rpt_81& yaw_rate_rpt_81(const Gem* msg);
  static void set_has_yaw_rate_rpt_81(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Horn_rpt_79& horn_rpt_79(const Gem* msg);
  static void set_has_horn_rpt_79(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::canbus::Horn_cmd_78& horn_cmd_78(const Gem* msg);
  static void set_has_horn_cmd_78(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::canbus::Wiper_rpt_91& wiper_rpt_91(const Gem* msg);
  static void set_has_wiper_rpt_91(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::canbus::Vehicle_speed_rpt_6f& vehicle_speed_rpt_6f(const Gem* msg);
  static void set_has_vehicle_speed_rpt_6f(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::canbus::Headlight_cmd_76& headlight_cmd_76(const Gem* msg);
  static void set_has_headlight_cmd_76(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_2_74& steering_motor_rpt_2_74(const Gem* msg);
  static void set_has_steering_motor_rpt_2_74(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_2_71& brake_motor_rpt_2_71(const Gem* msg);
  static void set_has_brake_motor_rpt_2_71(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_1_73& steering_motor_rpt_1_73(const Gem* msg);
  static void set_has_steering_motor_rpt_1_73(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::canbus::Wiper_cmd_90& wiper_cmd_90(const Gem* msg);
  static void set_has_wiper_cmd_90(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_3_72& brake_motor_rpt_3_72(const Gem* msg);
  static void set_has_brake_motor_rpt_3_72(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::apollo::canbus::Global_rpt_6a&
Gem::_Internal::global_rpt_6a(const Gem* msg) {
  return *msg->_impl_.global_rpt_6a_;
}
const ::apollo::canbus::Brake_cmd_6b&
Gem::_Internal::brake_cmd_6b(const Gem* msg) {
  return *msg->_impl_.brake_cmd_6b_;
}
const ::apollo::canbus::Brake_rpt_6c&
Gem::_Internal::brake_rpt_6c(const Gem* msg) {
  return *msg->_impl_.brake_rpt_6c_;
}
const ::apollo::canbus::Steering_cmd_6d&
Gem::_Internal::steering_cmd_6d(const Gem* msg) {
  return *msg->_impl_.steering_cmd_6d_;
}
const ::apollo::canbus::Steering_rpt_1_6e&
Gem::_Internal::steering_rpt_1_6e(const Gem* msg) {
  return *msg->_impl_.steering_rpt_1_6e_;
}
const ::apollo::canbus::Wheel_speed_rpt_7a&
Gem::_Internal::wheel_speed_rpt_7a(const Gem* msg) {
  return *msg->_impl_.wheel_speed_rpt_7a_;
}
const ::apollo::canbus::Date_time_rpt_83&
Gem::_Internal::date_time_rpt_83(const Gem* msg) {
  return *msg->_impl_.date_time_rpt_83_;
}
const ::apollo::canbus::Brake_motor_rpt_1_70&
Gem::_Internal::brake_motor_rpt_1_70(const Gem* msg) {
  return *msg->_impl_.brake_motor_rpt_1_70_;
}
const ::apollo::canbus::Headlight_rpt_77&
Gem::_Internal::headlight_rpt_77(const Gem* msg) {
  return *msg->_impl_.headlight_rpt_77_;
}
const ::apollo::canbus::Accel_rpt_68&
Gem::_Internal::accel_rpt_68(const Gem* msg) {
  return *msg->_impl_.accel_rpt_68_;
}
const ::apollo::canbus::Steering_motor_rpt_3_75&
Gem::_Internal::steering_motor_rpt_3_75(const Gem* msg) {
  return *msg->_impl_.steering_motor_rpt_3_75_;
}
const ::apollo::canbus::Turn_cmd_63&
Gem::_Internal::turn_cmd_63(const Gem* msg) {
  return *msg->_impl_.turn_cmd_63_;
}
const ::apollo::canbus::Turn_rpt_64&
Gem::_Internal::turn_rpt_64(const Gem* msg) {
  return *msg->_impl_.turn_rpt_64_;
}
const ::apollo::canbus::Shift_cmd_65&
Gem::_Internal::shift_cmd_65(const Gem* msg) {
  return *msg->_impl_.shift_cmd_65_;
}
const ::apollo::canbus::Shift_rpt_66&
Gem::_Internal::shift_rpt_66(const Gem* msg) {
  return *msg->_impl_.shift_rpt_66_;
}
const ::apollo::canbus::Accel_cmd_67&
Gem::_Internal::accel_cmd_67(const Gem* msg) {
  return *msg->_impl_.accel_cmd_67_;
}
const ::apollo::canbus::Lat_lon_heading_rpt_82&
Gem::_Internal::lat_lon_heading_rpt_82(const Gem* msg) {
  return *msg->_impl_.lat_lon_heading_rpt_82_;
}
const ::apollo::canbus::Global_cmd_69&
Gem::_Internal::global_cmd_69(const Gem* msg) {
  return *msg->_impl_.global_cmd_69_;
}
const ::apollo::canbus::Parking_brake_status_rpt_80&
Gem::_Internal::parking_brake_status_rpt_80(const Gem* msg) {
  return *msg->_impl_.parking_brake_status_rpt_80_;
}
const ::apollo::canbus::Yaw_rate_rpt_81&
Gem::_Internal::yaw_rate_rpt_81(const Gem* msg) {
  return *msg->_impl_.yaw_rate_rpt_81_;
}
const ::apollo::canbus::Horn_rpt_79&
Gem::_Internal::horn_rpt_79(const Gem* msg) {
  return *msg->_impl_.horn_rpt_79_;
}
const ::apollo::canbus::Horn_cmd_78&
Gem::_Internal::horn_cmd_78(const Gem* msg) {
  return *msg->_impl_.horn_cmd_78_;
}
const ::apollo::canbus::Wiper_rpt_91&
Gem::_Internal::wiper_rpt_91(const Gem* msg) {
  return *msg->_impl_.wiper_rpt_91_;
}
const ::apollo::canbus::Vehicle_speed_rpt_6f&
Gem::_Internal::vehicle_speed_rpt_6f(const Gem* msg) {
  return *msg->_impl_.vehicle_speed_rpt_6f_;
}
const ::apollo::canbus::Headlight_cmd_76&
Gem::_Internal::headlight_cmd_76(const Gem* msg) {
  return *msg->_impl_.headlight_cmd_76_;
}
const ::apollo::canbus::Steering_motor_rpt_2_74&
Gem::_Internal::steering_motor_rpt_2_74(const Gem* msg) {
  return *msg->_impl_.steering_motor_rpt_2_74_;
}
const ::apollo::canbus::Brake_motor_rpt_2_71&
Gem::_Internal::brake_motor_rpt_2_71(const Gem* msg) {
  return *msg->_impl_.brake_motor_rpt_2_71_;
}
const ::apollo::canbus::Steering_motor_rpt_1_73&
Gem::_Internal::steering_motor_rpt_1_73(const Gem* msg) {
  return *msg->_impl_.steering_motor_rpt_1_73_;
}
const ::apollo::canbus::Wiper_cmd_90&
Gem::_Internal::wiper_cmd_90(const Gem* msg) {
  return *msg->_impl_.wiper_cmd_90_;
}
const ::apollo::canbus::Brake_motor_rpt_3_72&
Gem::_Internal::brake_motor_rpt_3_72(const Gem* msg) {
  return *msg->_impl_.brake_motor_rpt_3_72_;
}
Gem::Gem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Gem)
}
Gem::Gem(const Gem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.global_rpt_6a_){nullptr}
    , decltype(_impl_.brake_cmd_6b_){nullptr}
    , decltype(_impl_.brake_rpt_6c_){nullptr}
    , decltype(_impl_.steering_cmd_6d_){nullptr}
    , decltype(_impl_.steering_rpt_1_6e_){nullptr}
    , decltype(_impl_.wheel_speed_rpt_7a_){nullptr}
    , decltype(_impl_.date_time_rpt_83_){nullptr}
    , decltype(_impl_.brake_motor_rpt_1_70_){nullptr}
    , decltype(_impl_.headlight_rpt_77_){nullptr}
    , decltype(_impl_.accel_rpt_68_){nullptr}
    , decltype(_impl_.steering_motor_rpt_3_75_){nullptr}
    , decltype(_impl_.turn_cmd_63_){nullptr}
    , decltype(_impl_.turn_rpt_64_){nullptr}
    , decltype(_impl_.shift_cmd_65_){nullptr}
    , decltype(_impl_.shift_rpt_66_){nullptr}
    , decltype(_impl_.accel_cmd_67_){nullptr}
    , decltype(_impl_.lat_lon_heading_rpt_82_){nullptr}
    , decltype(_impl_.global_cmd_69_){nullptr}
    , decltype(_impl_.parking_brake_status_rpt_80_){nullptr}
    , decltype(_impl_.yaw_rate_rpt_81_){nullptr}
    , decltype(_impl_.horn_rpt_79_){nullptr}
    , decltype(_impl_.horn_cmd_78_){nullptr}
    , decltype(_impl_.wiper_rpt_91_){nullptr}
    , decltype(_impl_.vehicle_speed_rpt_6f_){nullptr}
    , decltype(_impl_.headlight_cmd_76_){nullptr}
    , decltype(_impl_.steering_motor_rpt_2_74_){nullptr}
    , decltype(_impl_.brake_motor_rpt_2_71_){nullptr}
    , decltype(_impl_.steering_motor_rpt_1_73_){nullptr}
    , decltype(_impl_.wiper_cmd_90_){nullptr}
    , decltype(_impl_.brake_motor_rpt_3_72_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global_rpt_6a()) {
    _impl_.global_rpt_6a_ = new ::apollo::canbus::Global_rpt_6a(*from._impl_.global_rpt_6a_);
  }
  if (from._internal_has_brake_cmd_6b()) {
    _impl_.brake_cmd_6b_ = new ::apollo::canbus::Brake_cmd_6b(*from._impl_.brake_cmd_6b_);
  }
  if (from._internal_has_brake_rpt_6c()) {
    _impl_.brake_rpt_6c_ = new ::apollo::canbus::Brake_rpt_6c(*from._impl_.brake_rpt_6c_);
  }
  if (from._internal_has_steering_cmd_6d()) {
    _impl_.steering_cmd_6d_ = new ::apollo::canbus::Steering_cmd_6d(*from._impl_.steering_cmd_6d_);
  }
  if (from._internal_has_steering_rpt_1_6e()) {
    _impl_.steering_rpt_1_6e_ = new ::apollo::canbus::Steering_rpt_1_6e(*from._impl_.steering_rpt_1_6e_);
  }
  if (from._internal_has_wheel_speed_rpt_7a()) {
    _impl_.wheel_speed_rpt_7a_ = new ::apollo::canbus::Wheel_speed_rpt_7a(*from._impl_.wheel_speed_rpt_7a_);
  }
  if (from._internal_has_date_time_rpt_83()) {
    _impl_.date_time_rpt_83_ = new ::apollo::canbus::Date_time_rpt_83(*from._impl_.date_time_rpt_83_);
  }
  if (from._internal_has_brake_motor_rpt_1_70()) {
    _impl_.brake_motor_rpt_1_70_ = new ::apollo::canbus::Brake_motor_rpt_1_70(*from._impl_.brake_motor_rpt_1_70_);
  }
  if (from._internal_has_headlight_rpt_77()) {
    _impl_.headlight_rpt_77_ = new ::apollo::canbus::Headlight_rpt_77(*from._impl_.headlight_rpt_77_);
  }
  if (from._internal_has_accel_rpt_68()) {
    _impl_.accel_rpt_68_ = new ::apollo::canbus::Accel_rpt_68(*from._impl_.accel_rpt_68_);
  }
  if (from._internal_has_steering_motor_rpt_3_75()) {
    _impl_.steering_motor_rpt_3_75_ = new ::apollo::canbus::Steering_motor_rpt_3_75(*from._impl_.steering_motor_rpt_3_75_);
  }
  if (from._internal_has_turn_cmd_63()) {
    _impl_.turn_cmd_63_ = new ::apollo::canbus::Turn_cmd_63(*from._impl_.turn_cmd_63_);
  }
  if (from._internal_has_turn_rpt_64()) {
    _impl_.turn_rpt_64_ = new ::apollo::canbus::Turn_rpt_64(*from._impl_.turn_rpt_64_);
  }
  if (from._internal_has_shift_cmd_65()) {
    _impl_.shift_cmd_65_ = new ::apollo::canbus::Shift_cmd_65(*from._impl_.shift_cmd_65_);
  }
  if (from._internal_has_shift_rpt_66()) {
    _impl_.shift_rpt_66_ = new ::apollo::canbus::Shift_rpt_66(*from._impl_.shift_rpt_66_);
  }
  if (from._internal_has_accel_cmd_67()) {
    _impl_.accel_cmd_67_ = new ::apollo::canbus::Accel_cmd_67(*from._impl_.accel_cmd_67_);
  }
  if (from._internal_has_lat_lon_heading_rpt_82()) {
    _impl_.lat_lon_heading_rpt_82_ = new ::apollo::canbus::Lat_lon_heading_rpt_82(*from._impl_.lat_lon_heading_rpt_82_);
  }
  if (from._internal_has_global_cmd_69()) {
    _impl_.global_cmd_69_ = new ::apollo::canbus::Global_cmd_69(*from._impl_.global_cmd_69_);
  }
  if (from._internal_has_parking_brake_status_rpt_80()) {
    _impl_.parking_brake_status_rpt_80_ = new ::apollo::canbus::Parking_brake_status_rpt_80(*from._impl_.parking_brake_status_rpt_80_);
  }
  if (from._internal_has_yaw_rate_rpt_81()) {
    _impl_.yaw_rate_rpt_81_ = new ::apollo::canbus::Yaw_rate_rpt_81(*from._impl_.yaw_rate_rpt_81_);
  }
  if (from._internal_has_horn_rpt_79()) {
    _impl_.horn_rpt_79_ = new ::apollo::canbus::Horn_rpt_79(*from._impl_.horn_rpt_79_);
  }
  if (from._internal_has_horn_cmd_78()) {
    _impl_.horn_cmd_78_ = new ::apollo::canbus::Horn_cmd_78(*from._impl_.horn_cmd_78_);
  }
  if (from._internal_has_wiper_rpt_91()) {
    _impl_.wiper_rpt_91_ = new ::apollo::canbus::Wiper_rpt_91(*from._impl_.wiper_rpt_91_);
  }
  if (from._internal_has_vehicle_speed_rpt_6f()) {
    _impl_.vehicle_speed_rpt_6f_ = new ::apollo::canbus::Vehicle_speed_rpt_6f(*from._impl_.vehicle_speed_rpt_6f_);
  }
  if (from._internal_has_headlight_cmd_76()) {
    _impl_.headlight_cmd_76_ = new ::apollo::canbus::Headlight_cmd_76(*from._impl_.headlight_cmd_76_);
  }
  if (from._internal_has_steering_motor_rpt_2_74()) {
    _impl_.steering_motor_rpt_2_74_ = new ::apollo::canbus::Steering_motor_rpt_2_74(*from._impl_.steering_motor_rpt_2_74_);
  }
  if (from._internal_has_brake_motor_rpt_2_71()) {
    _impl_.brake_motor_rpt_2_71_ = new ::apollo::canbus::Brake_motor_rpt_2_71(*from._impl_.brake_motor_rpt_2_71_);
  }
  if (from._internal_has_steering_motor_rpt_1_73()) {
    _impl_.steering_motor_rpt_1_73_ = new ::apollo::canbus::Steering_motor_rpt_1_73(*from._impl_.steering_motor_rpt_1_73_);
  }
  if (from._internal_has_wiper_cmd_90()) {
    _impl_.wiper_cmd_90_ = new ::apollo::canbus::Wiper_cmd_90(*from._impl_.wiper_cmd_90_);
  }
  if (from._internal_has_brake_motor_rpt_3_72()) {
    _impl_.brake_motor_rpt_3_72_ = new ::apollo::canbus::Brake_motor_rpt_3_72(*from._impl_.brake_motor_rpt_3_72_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gem)
}

inline void Gem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.global_rpt_6a_){nullptr}
    , decltype(_impl_.brake_cmd_6b_){nullptr}
    , decltype(_impl_.brake_rpt_6c_){nullptr}
    , decltype(_impl_.steering_cmd_6d_){nullptr}
    , decltype(_impl_.steering_rpt_1_6e_){nullptr}
    , decltype(_impl_.wheel_speed_rpt_7a_){nullptr}
    , decltype(_impl_.date_time_rpt_83_){nullptr}
    , decltype(_impl_.brake_motor_rpt_1_70_){nullptr}
    , decltype(_impl_.headlight_rpt_77_){nullptr}
    , decltype(_impl_.accel_rpt_68_){nullptr}
    , decltype(_impl_.steering_motor_rpt_3_75_){nullptr}
    , decltype(_impl_.turn_cmd_63_){nullptr}
    , decltype(_impl_.turn_rpt_64_){nullptr}
    , decltype(_impl_.shift_cmd_65_){nullptr}
    , decltype(_impl_.shift_rpt_66_){nullptr}
    , decltype(_impl_.accel_cmd_67_){nullptr}
    , decltype(_impl_.lat_lon_heading_rpt_82_){nullptr}
    , decltype(_impl_.global_cmd_69_){nullptr}
    , decltype(_impl_.parking_brake_status_rpt_80_){nullptr}
    , decltype(_impl_.yaw_rate_rpt_81_){nullptr}
    , decltype(_impl_.horn_rpt_79_){nullptr}
    , decltype(_impl_.horn_cmd_78_){nullptr}
    , decltype(_impl_.wiper_rpt_91_){nullptr}
    , decltype(_impl_.vehicle_speed_rpt_6f_){nullptr}
    , decltype(_impl_.headlight_cmd_76_){nullptr}
    , decltype(_impl_.steering_motor_rpt_2_74_){nullptr}
    , decltype(_impl_.brake_motor_rpt_2_71_){nullptr}
    , decltype(_impl_.steering_motor_rpt_1_73_){nullptr}
    , decltype(_impl_.wiper_cmd_90_){nullptr}
    , decltype(_impl_.brake_motor_rpt_3_72_){nullptr}
  };
}

Gem::~Gem() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.global_rpt_6a_;
  if (this != internal_default_instance()) delete _impl_.brake_cmd_6b_;
  if (this != internal_default_instance()) delete _impl_.brake_rpt_6c_;
  if (this != internal_default_instance()) delete _impl_.steering_cmd_6d_;
  if (this != internal_default_instance()) delete _impl_.steering_rpt_1_6e_;
  if (this != internal_default_instance()) delete _impl_.wheel_speed_rpt_7a_;
  if (this != internal_default_instance()) delete _impl_.date_time_rpt_83_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_1_70_;
  if (this != internal_default_instance()) delete _impl_.headlight_rpt_77_;
  if (this != internal_default_instance()) delete _impl_.accel_rpt_68_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_3_75_;
  if (this != internal_default_instance()) delete _impl_.turn_cmd_63_;
  if (this != internal_default_instance()) delete _impl_.turn_rpt_64_;
  if (this != internal_default_instance()) delete _impl_.shift_cmd_65_;
  if (this != internal_default_instance()) delete _impl_.shift_rpt_66_;
  if (this != internal_default_instance()) delete _impl_.accel_cmd_67_;
  if (this != internal_default_instance()) delete _impl_.lat_lon_heading_rpt_82_;
  if (this != internal_default_instance()) delete _impl_.global_cmd_69_;
  if (this != internal_default_instance()) delete _impl_.parking_brake_status_rpt_80_;
  if (this != internal_default_instance()) delete _impl_.yaw_rate_rpt_81_;
  if (this != internal_default_instance()) delete _impl_.horn_rpt_79_;
  if (this != internal_default_instance()) delete _impl_.horn_cmd_78_;
  if (this != internal_default_instance()) delete _impl_.wiper_rpt_91_;
  if (this != internal_default_instance()) delete _impl_.vehicle_speed_rpt_6f_;
  if (this != internal_default_instance()) delete _impl_.headlight_cmd_76_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_2_74_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_2_71_;
  if (this != internal_default_instance()) delete _impl_.steering_motor_rpt_1_73_;
  if (this != internal_default_instance()) delete _impl_.wiper_cmd_90_;
  if (this != internal_default_instance()) delete _impl_.brake_motor_rpt_3_72_;
}

void Gem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.global_rpt_6a_ != nullptr);
      _impl_.global_rpt_6a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.brake_cmd_6b_ != nullptr);
      _impl_.brake_cmd_6b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.brake_rpt_6c_ != nullptr);
      _impl_.brake_rpt_6c_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.steering_cmd_6d_ != nullptr);
      _impl_.steering_cmd_6d_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.steering_rpt_1_6e_ != nullptr);
      _impl_.steering_rpt_1_6e_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.wheel_speed_rpt_7a_ != nullptr);
      _impl_.wheel_speed_rpt_7a_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.date_time_rpt_83_ != nullptr);
      _impl_.date_time_rpt_83_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_1_70_ != nullptr);
      _impl_.brake_motor_rpt_1_70_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.headlight_rpt_77_ != nullptr);
      _impl_.headlight_rpt_77_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.accel_rpt_68_ != nullptr);
      _impl_.accel_rpt_68_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_3_75_ != nullptr);
      _impl_.steering_motor_rpt_3_75_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.turn_cmd_63_ != nullptr);
      _impl_.turn_cmd_63_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.turn_rpt_64_ != nullptr);
      _impl_.turn_rpt_64_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.shift_cmd_65_ != nullptr);
      _impl_.shift_cmd_65_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.shift_rpt_66_ != nullptr);
      _impl_.shift_rpt_66_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.accel_cmd_67_ != nullptr);
      _impl_.accel_cmd_67_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.lat_lon_heading_rpt_82_ != nullptr);
      _impl_.lat_lon_heading_rpt_82_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.global_cmd_69_ != nullptr);
      _impl_.global_cmd_69_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.parking_brake_status_rpt_80_ != nullptr);
      _impl_.parking_brake_status_rpt_80_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.yaw_rate_rpt_81_ != nullptr);
      _impl_.yaw_rate_rpt_81_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.horn_rpt_79_ != nullptr);
      _impl_.horn_rpt_79_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.horn_cmd_78_ != nullptr);
      _impl_.horn_cmd_78_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.wiper_rpt_91_ != nullptr);
      _impl_.wiper_rpt_91_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.vehicle_speed_rpt_6f_ != nullptr);
      _impl_.vehicle_speed_rpt_6f_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.headlight_cmd_76_ != nullptr);
      _impl_.headlight_cmd_76_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_2_74_ != nullptr);
      _impl_.steering_motor_rpt_2_74_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_2_71_ != nullptr);
      _impl_.brake_motor_rpt_2_71_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.steering_motor_rpt_1_73_ != nullptr);
      _impl_.steering_motor_rpt_1_73_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.wiper_cmd_90_ != nullptr);
      _impl_.wiper_cmd_90_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.brake_motor_rpt_3_72_ != nullptr);
      _impl_.brake_motor_rpt_3_72_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_rpt_6a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_cmd_6b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_rpt_6c(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_cmd_6d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_rpt_1_6e(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed_rpt_7a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time_rpt_83(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_1_70(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_rpt_77(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_rpt_68(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_3_75(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_cmd_63(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_rpt_64(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_cmd_65(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_rpt_66(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_cmd_67(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_lon_heading_rpt_82(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_cmd_69(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_status_rpt_80(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_yaw_rate_rpt_81(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_rpt_79(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_cmd_78(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_rpt_91(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_speed_rpt_6f(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_cmd_76(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_2_74(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_2_71(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_1_73(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_cmd_90(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_3_72(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::global_rpt_6a(this),
        _Internal::global_rpt_6a(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::brake_cmd_6b(this),
        _Internal::brake_cmd_6b(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::brake_rpt_6c(this),
        _Internal::brake_rpt_6c(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::steering_cmd_6d(this),
        _Internal::steering_cmd_6d(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::steering_rpt_1_6e(this),
        _Internal::steering_rpt_1_6e(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::wheel_speed_rpt_7a(this),
        _Internal::wheel_speed_rpt_7a(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::date_time_rpt_83(this),
        _Internal::date_time_rpt_83(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::brake_motor_rpt_1_70(this),
        _Internal::brake_motor_rpt_1_70(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::headlight_rpt_77(this),
        _Internal::headlight_rpt_77(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::accel_rpt_68(this),
        _Internal::accel_rpt_68(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::steering_motor_rpt_3_75(this),
        _Internal::steering_motor_rpt_3_75(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::turn_cmd_63(this),
        _Internal::turn_cmd_63(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::turn_rpt_64(this),
        _Internal::turn_rpt_64(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::shift_cmd_65(this),
        _Internal::shift_cmd_65(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::shift_rpt_66(this),
        _Internal::shift_rpt_66(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::accel_cmd_67(this),
        _Internal::accel_cmd_67(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::lat_lon_heading_rpt_82(this),
        _Internal::lat_lon_heading_rpt_82(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::global_cmd_69(this),
        _Internal::global_cmd_69(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::parking_brake_status_rpt_80(this),
        _Internal::parking_brake_status_rpt_80(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::yaw_rate_rpt_81(this),
        _Internal::yaw_rate_rpt_81(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::horn_rpt_79(this),
        _Internal::horn_rpt_79(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::horn_cmd_78(this),
        _Internal::horn_cmd_78(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::wiper_rpt_91(this),
        _Internal::wiper_rpt_91(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::vehicle_speed_rpt_6f(this),
        _Internal::vehicle_speed_rpt_6f(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::headlight_cmd_76(this),
        _Internal::headlight_cmd_76(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::steering_motor_rpt_2_74(this),
        _Internal::steering_motor_rpt_2_74(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::brake_motor_rpt_2_71(this),
        _Internal::brake_motor_rpt_2_71(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::steering_motor_rpt_1_73(this),
        _Internal::steering_motor_rpt_1_73(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::wiper_cmd_90(this),
        _Internal::wiper_cmd_90(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::brake_motor_rpt_3_72(this),
        _Internal::brake_motor_rpt_3_72(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gem)
  return target;
}

size_t Gem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_rpt_6a_);
    }

    // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_cmd_6b_);
    }

    // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_rpt_6c_);
    }

    // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_cmd_6d_);
    }

    // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_rpt_1_6e_);
    }

    // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wheel_speed_rpt_7a_);
    }

    // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_time_rpt_83_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_1_70_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headlight_rpt_77_);
    }

    // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accel_rpt_68_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_3_75_);
    }

    // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turn_cmd_63_);
    }

    // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.turn_rpt_64_);
    }

    // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shift_cmd_65_);
    }

    // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shift_rpt_66_);
    }

    // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.accel_cmd_67_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lat_lon_heading_rpt_82_);
    }

    // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_cmd_69_);
    }

    // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parking_brake_status_rpt_80_);
    }

    // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yaw_rate_rpt_81_);
    }

    // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horn_rpt_79_);
    }

    // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horn_cmd_78_);
    }

    // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wiper_rpt_91_);
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_speed_rpt_6f_);
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headlight_cmd_76_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_2_74_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_2_71_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steering_motor_rpt_1_73_);
    }

    // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wiper_cmd_90_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.brake_motor_rpt_3_72_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gem::GetClassData() const { return &_class_data_; }

void Gem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gem *>(to)->MergeFrom(
      static_cast<const Gem &>(from));
}


void Gem::MergeFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_global_rpt_6a()->::apollo::canbus::Global_rpt_6a::MergeFrom(from._internal_global_rpt_6a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_brake_cmd_6b()->::apollo::canbus::Brake_cmd_6b::MergeFrom(from._internal_brake_cmd_6b());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brake_rpt_6c()->::apollo::canbus::Brake_rpt_6c::MergeFrom(from._internal_brake_rpt_6c());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_steering_cmd_6d()->::apollo::canbus::Steering_cmd_6d::MergeFrom(from._internal_steering_cmd_6d());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_steering_rpt_1_6e()->::apollo::canbus::Steering_rpt_1_6e::MergeFrom(from._internal_steering_rpt_1_6e());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_wheel_speed_rpt_7a()->::apollo::canbus::Wheel_speed_rpt_7a::MergeFrom(from._internal_wheel_speed_rpt_7a());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_date_time_rpt_83()->::apollo::canbus::Date_time_rpt_83::MergeFrom(from._internal_date_time_rpt_83());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_brake_motor_rpt_1_70()->::apollo::canbus::Brake_motor_rpt_1_70::MergeFrom(from._internal_brake_motor_rpt_1_70());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_headlight_rpt_77()->::apollo::canbus::Headlight_rpt_77::MergeFrom(from._internal_headlight_rpt_77());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_accel_rpt_68()->::apollo::canbus::Accel_rpt_68::MergeFrom(from._internal_accel_rpt_68());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_steering_motor_rpt_3_75()->::apollo::canbus::Steering_motor_rpt_3_75::MergeFrom(from._internal_steering_motor_rpt_3_75());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_turn_cmd_63()->::apollo::canbus::Turn_cmd_63::MergeFrom(from._internal_turn_cmd_63());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_turn_rpt_64()->::apollo::canbus::Turn_rpt_64::MergeFrom(from._internal_turn_rpt_64());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_shift_cmd_65()->::apollo::canbus::Shift_cmd_65::MergeFrom(from._internal_shift_cmd_65());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_shift_rpt_66()->::apollo::canbus::Shift_rpt_66::MergeFrom(from._internal_shift_rpt_66());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_accel_cmd_67()->::apollo::canbus::Accel_cmd_67::MergeFrom(from._internal_accel_cmd_67());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_lat_lon_heading_rpt_82()->::apollo::canbus::Lat_lon_heading_rpt_82::MergeFrom(from._internal_lat_lon_heading_rpt_82());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_global_cmd_69()->::apollo::canbus::Global_cmd_69::MergeFrom(from._internal_global_cmd_69());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_parking_brake_status_rpt_80()->::apollo::canbus::Parking_brake_status_rpt_80::MergeFrom(from._internal_parking_brake_status_rpt_80());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_yaw_rate_rpt_81()->::apollo::canbus::Yaw_rate_rpt_81::MergeFrom(from._internal_yaw_rate_rpt_81());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_horn_rpt_79()->::apollo::canbus::Horn_rpt_79::MergeFrom(from._internal_horn_rpt_79());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_horn_cmd_78()->::apollo::canbus::Horn_cmd_78::MergeFrom(from._internal_horn_cmd_78());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_wiper_rpt_91()->::apollo::canbus::Wiper_rpt_91::MergeFrom(from._internal_wiper_rpt_91());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_vehicle_speed_rpt_6f()->::apollo::canbus::Vehicle_speed_rpt_6f::MergeFrom(from._internal_vehicle_speed_rpt_6f());
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_headlight_cmd_76()->::apollo::canbus::Headlight_cmd_76::MergeFrom(from._internal_headlight_cmd_76());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_steering_motor_rpt_2_74()->::apollo::canbus::Steering_motor_rpt_2_74::MergeFrom(from._internal_steering_motor_rpt_2_74());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_brake_motor_rpt_2_71()->::apollo::canbus::Brake_motor_rpt_2_71::MergeFrom(from._internal_brake_motor_rpt_2_71());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_steering_motor_rpt_1_73()->::apollo::canbus::Steering_motor_rpt_1_73::MergeFrom(from._internal_steering_motor_rpt_1_73());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_wiper_cmd_90()->::apollo::canbus::Wiper_cmd_90::MergeFrom(from._internal_wiper_cmd_90());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_brake_motor_rpt_3_72()->::apollo::canbus::Brake_motor_rpt_3_72::MergeFrom(from._internal_brake_motor_rpt_3_72());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gem::CopyFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gem::IsInitialized() const {
  return true;
}

void Gem::InternalSwap(Gem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gem, _impl_.brake_motor_rpt_3_72_)
      + sizeof(Gem::_impl_.brake_motor_rpt_3_72_)
      - PROTOBUF_FIELD_OFFSET(Gem, _impl_.global_rpt_6a_)>(
          reinterpret_cast<char*>(&_impl_.global_rpt_6a_),
          reinterpret_cast<char*>(&other->_impl_.global_rpt_6a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[45]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::ChassisDetail*
Arena::CreateMaybeMessage< ::apollo::canbus::ChassisDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::ChassisDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::CheckResponseSignal*
Arena::CreateMaybeMessage< ::apollo::canbus::CheckResponseSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::CheckResponseSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Battery*
Arena::CreateMaybeMessage< ::apollo::canbus::Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Light*
Arena::CreateMaybeMessage< ::apollo::canbus::Light >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Light >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Eps*
Arena::CreateMaybeMessage< ::apollo::canbus::Eps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Eps >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::VehicleSpd*
Arena::CreateMaybeMessage< ::apollo::canbus::VehicleSpd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::VehicleSpd >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Deceleration*
Arena::CreateMaybeMessage< ::apollo::canbus::Deceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Deceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Epb*
Arena::CreateMaybeMessage< ::apollo::canbus::Epb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Epb >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gas*
Arena::CreateMaybeMessage< ::apollo::canbus::Gas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gas >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Esp*
Arena::CreateMaybeMessage< ::apollo::canbus::Esp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Esp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ems*
Arena::CreateMaybeMessage< ::apollo::canbus::Ems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ems >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear*
Arena::CreateMaybeMessage< ::apollo::canbus::Gear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gear >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Safety*
Arena::CreateMaybeMessage< ::apollo::canbus::Safety >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Safety >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::BasicInfo*
Arena::CreateMaybeMessage< ::apollo::canbus::BasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::BasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_rpt_6a*
Arena::CreateMaybeMessage< ::apollo::canbus::Global_rpt_6a >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Global_rpt_6a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_cmd_6b*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_cmd_6b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_cmd_6b >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_rpt_6c*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_rpt_6c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_rpt_6c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_cmd_6d*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_cmd_6d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_cmd_6d >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_rpt_1_6e*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_rpt_1_6e >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_rpt_1_6e >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wheel_speed_rpt_7a*
Arena::CreateMaybeMessage< ::apollo::canbus::Wheel_speed_rpt_7a >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wheel_speed_rpt_7a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Date_time_rpt_83*
Arena::CreateMaybeMessage< ::apollo::canbus::Date_time_rpt_83 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Date_time_rpt_83 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_1_70*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_1_70 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_1_70 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_rpt_77*
Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_rpt_77 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Headlight_rpt_77 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_rpt_68*
Arena::CreateMaybeMessage< ::apollo::canbus::Accel_rpt_68 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Accel_rpt_68 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_3_75*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_3_75 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_3_75 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_cmd_63*
Arena::CreateMaybeMessage< ::apollo::canbus::Turn_cmd_63 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turn_cmd_63 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_rpt_64*
Arena::CreateMaybeMessage< ::apollo::canbus::Turn_rpt_64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Turn_rpt_64 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_cmd_65*
Arena::CreateMaybeMessage< ::apollo::canbus::Shift_cmd_65 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Shift_cmd_65 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_rpt_66*
Arena::CreateMaybeMessage< ::apollo::canbus::Shift_rpt_66 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Shift_rpt_66 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_cmd_67*
Arena::CreateMaybeMessage< ::apollo::canbus::Accel_cmd_67 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Accel_cmd_67 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lat_lon_heading_rpt_82*
Arena::CreateMaybeMessage< ::apollo::canbus::Lat_lon_heading_rpt_82 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Lat_lon_heading_rpt_82 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_cmd_69*
Arena::CreateMaybeMessage< ::apollo::canbus::Global_cmd_69 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Global_cmd_69 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_status_rpt_80*
Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_status_rpt_80 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Parking_brake_status_rpt_80 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Yaw_rate_rpt_81*
Arena::CreateMaybeMessage< ::apollo::canbus::Yaw_rate_rpt_81 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Yaw_rate_rpt_81 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_rpt_79*
Arena::CreateMaybeMessage< ::apollo::canbus::Horn_rpt_79 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Horn_rpt_79 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_cmd_78*
Arena::CreateMaybeMessage< ::apollo::canbus::Horn_cmd_78 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Horn_cmd_78 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_rpt_91*
Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_rpt_91 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wiper_rpt_91 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_speed_rpt_6f*
Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_speed_rpt_6f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vehicle_speed_rpt_6f >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_cmd_76*
Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_cmd_76 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Headlight_cmd_76 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_2_74*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_2_74 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_2_74 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_2_71*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_2_71 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_2_71 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_1_73*
Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_1_73 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Steering_motor_rpt_1_73 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_cmd_90*
Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_cmd_90 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Wiper_cmd_90 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_3_72*
Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_3_72 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Brake_motor_rpt_3_72 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gem*
Arena::CreateMaybeMessage< ::apollo::canbus::Gem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Gem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
