// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/vehicle_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto;
namespace apollo {
namespace canbus {
class VehicleParameter;
struct VehicleParameterDefaultTypeInternal;
extern VehicleParameterDefaultTypeInternal _VehicleParameter_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::VehicleParameter* Arena::CreateMaybeMessage<::apollo::canbus::VehicleParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum VehicleParameter_VehicleBrand : int {
  VehicleParameter_VehicleBrand_LINCOLN_MKZ = 0,
  VehicleParameter_VehicleBrand_GEM = 1,
  VehicleParameter_VehicleBrand_CH = 2
};
bool VehicleParameter_VehicleBrand_IsValid(int value);
constexpr VehicleParameter_VehicleBrand VehicleParameter_VehicleBrand_VehicleBrand_MIN = VehicleParameter_VehicleBrand_LINCOLN_MKZ;
constexpr VehicleParameter_VehicleBrand VehicleParameter_VehicleBrand_VehicleBrand_MAX = VehicleParameter_VehicleBrand_CH;
constexpr int VehicleParameter_VehicleBrand_VehicleBrand_ARRAYSIZE = VehicleParameter_VehicleBrand_VehicleBrand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleParameter_VehicleBrand_descriptor();
template<typename T>
inline const std::string& VehicleParameter_VehicleBrand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleParameter_VehicleBrand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleParameter_VehicleBrand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleParameter_VehicleBrand_descriptor(), enum_t_value);
}
inline bool VehicleParameter_VehicleBrand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleParameter_VehicleBrand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleParameter_VehicleBrand>(
    VehicleParameter_VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class VehicleParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.VehicleParameter) */ {
 public:
  inline VehicleParameter() : VehicleParameter(nullptr) {}
  ~VehicleParameter() override;
  explicit PROTOBUF_CONSTEXPR VehicleParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleParameter(const VehicleParameter& from);
  VehicleParameter(VehicleParameter&& from) noexcept
    : VehicleParameter() {
    *this = ::std::move(from);
  }

  inline VehicleParameter& operator=(const VehicleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParameter& operator=(VehicleParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleParameter* internal_default_instance() {
    return reinterpret_cast<const VehicleParameter*>(
               &_VehicleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleParameter& a, VehicleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.VehicleParameter";
  }
  protected:
  explicit VehicleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleParameter_VehicleBrand VehicleBrand;
  static constexpr VehicleBrand LINCOLN_MKZ =
    VehicleParameter_VehicleBrand_LINCOLN_MKZ;
  static constexpr VehicleBrand GEM =
    VehicleParameter_VehicleBrand_GEM;
  static constexpr VehicleBrand CH =
    VehicleParameter_VehicleBrand_CH;
  static inline bool VehicleBrand_IsValid(int value) {
    return VehicleParameter_VehicleBrand_IsValid(value);
  }
  static constexpr VehicleBrand VehicleBrand_MIN =
    VehicleParameter_VehicleBrand_VehicleBrand_MIN;
  static constexpr VehicleBrand VehicleBrand_MAX =
    VehicleParameter_VehicleBrand_VehicleBrand_MAX;
  static constexpr int VehicleBrand_ARRAYSIZE =
    VehicleParameter_VehicleBrand_VehicleBrand_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VehicleBrand_descriptor() {
    return VehicleParameter_VehicleBrand_descriptor();
  }
  template<typename T>
  static inline const std::string& VehicleBrand_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehicleBrand>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehicleBrand_Name.");
    return VehicleParameter_VehicleBrand_Name(enum_t_value);
  }
  static inline bool VehicleBrand_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VehicleBrand* value) {
    return VehicleParameter_VehicleBrand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMaxEnginePedalFieldNumber = 2,
    kBrandFieldNumber = 1,
    kMaxEnableFailAttemptFieldNumber = 3,
    kDrivingModeFieldNumber = 4,
  };
  // optional double max_engine_pedal = 2;
  bool has_max_engine_pedal() const;
  private:
  bool _internal_has_max_engine_pedal() const;
  public:
  void clear_max_engine_pedal();
  double max_engine_pedal() const;
  void set_max_engine_pedal(double value);
  private:
  double _internal_max_engine_pedal() const;
  void _internal_set_max_engine_pedal(double value);
  public:

  // optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  ::apollo::canbus::VehicleParameter_VehicleBrand brand() const;
  void set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value);
  private:
  ::apollo::canbus::VehicleParameter_VehicleBrand _internal_brand() const;
  void _internal_set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value);
  public:

  // optional int32 max_enable_fail_attempt = 3;
  bool has_max_enable_fail_attempt() const;
  private:
  bool _internal_has_max_enable_fail_attempt() const;
  public:
  void clear_max_enable_fail_attempt();
  int32_t max_enable_fail_attempt() const;
  void set_max_enable_fail_attempt(int32_t value);
  private:
  int32_t _internal_max_enable_fail_attempt() const;
  void _internal_set_max_enable_fail_attempt(int32_t value);
  public:

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  bool has_driving_mode() const;
  private:
  bool _internal_has_driving_mode() const;
  public:
  void clear_driving_mode();
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  private:
  ::apollo::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.VehicleParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_engine_pedal_;
    int brand_;
    int32_t max_enable_fail_attempt_;
    int driving_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleParameter

// optional .apollo.canbus.VehicleParameter.VehicleBrand brand = 1;
inline bool VehicleParameter::_internal_has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleParameter::has_brand() const {
  return _internal_has_brand();
}
inline void VehicleParameter::clear_brand() {
  _impl_.brand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::VehicleParameter_VehicleBrand VehicleParameter::_internal_brand() const {
  return static_cast< ::apollo::canbus::VehicleParameter_VehicleBrand >(_impl_.brand_);
}
inline ::apollo::canbus::VehicleParameter_VehicleBrand VehicleParameter::brand() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.brand)
  return _internal_brand();
}
inline void VehicleParameter::_internal_set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value) {
  assert(::apollo::canbus::VehicleParameter_VehicleBrand_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.brand_ = value;
}
inline void VehicleParameter::set_brand(::apollo::canbus::VehicleParameter_VehicleBrand value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.brand)
}

// optional double max_engine_pedal = 2;
inline bool VehicleParameter::_internal_has_max_engine_pedal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleParameter::has_max_engine_pedal() const {
  return _internal_has_max_engine_pedal();
}
inline void VehicleParameter::clear_max_engine_pedal() {
  _impl_.max_engine_pedal_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double VehicleParameter::_internal_max_engine_pedal() const {
  return _impl_.max_engine_pedal_;
}
inline double VehicleParameter::max_engine_pedal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_engine_pedal)
  return _internal_max_engine_pedal();
}
inline void VehicleParameter::_internal_set_max_engine_pedal(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_engine_pedal_ = value;
}
inline void VehicleParameter::set_max_engine_pedal(double value) {
  _internal_set_max_engine_pedal(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_engine_pedal)
}

// optional int32 max_enable_fail_attempt = 3;
inline bool VehicleParameter::_internal_has_max_enable_fail_attempt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleParameter::has_max_enable_fail_attempt() const {
  return _internal_has_max_enable_fail_attempt();
}
inline void VehicleParameter::clear_max_enable_fail_attempt() {
  _impl_.max_enable_fail_attempt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t VehicleParameter::_internal_max_enable_fail_attempt() const {
  return _impl_.max_enable_fail_attempt_;
}
inline int32_t VehicleParameter::max_enable_fail_attempt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
  return _internal_max_enable_fail_attempt();
}
inline void VehicleParameter::_internal_set_max_enable_fail_attempt(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_enable_fail_attempt_ = value;
}
inline void VehicleParameter::set_max_enable_fail_attempt(int32_t value) {
  _internal_set_max_enable_fail_attempt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.max_enable_fail_attempt)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
inline bool VehicleParameter::_internal_has_driving_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleParameter::has_driving_mode() const {
  return _internal_has_driving_mode();
}
inline void VehicleParameter::clear_driving_mode() {
  _impl_.driving_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Chassis_DrivingMode VehicleParameter::_internal_driving_mode() const {
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(_impl_.driving_mode_);
}
inline ::apollo::canbus::Chassis_DrivingMode VehicleParameter::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.VehicleParameter.driving_mode)
  return _internal_driving_mode();
}
inline void VehicleParameter::_internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.driving_mode_ = value;
}
inline void VehicleParameter::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.VehicleParameter.driving_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::VehicleParameter_VehicleBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::VehicleParameter_VehicleBrand>() {
  return ::apollo::canbus::VehicleParameter_VehicleBrand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto
