// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/configs/proto/vehicle_config.proto

#include "modules/common/configs/proto/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
PROTOBUF_CONSTEXPR Transform::Transform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr} {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;
PROTOBUF_CONSTEXPR Extrinsics::Extrinsics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tansforms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtrinsicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtrinsicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtrinsicsDefaultTypeInternal() {}
  union {
    Extrinsics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
PROTOBUF_CONSTEXPR VehicleParam::VehicleParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.front_edge_to_center_)*/0
  , /*decltype(_impl_.back_edge_to_center_)*/0
  , /*decltype(_impl_.left_edge_to_center_)*/0
  , /*decltype(_impl_.right_edge_to_center_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.min_turn_radius_)*/0
  , /*decltype(_impl_.brand_)*/0
  , /*decltype(_impl_.max_abs_speed_when_stopped_)*/0
  , /*decltype(_impl_.max_acceleration_)*/0
  , /*decltype(_impl_.max_deceleration_)*/0
  , /*decltype(_impl_.max_steer_angle_)*/0
  , /*decltype(_impl_.max_steer_angle_rate_)*/0
  , /*decltype(_impl_.min_steer_angle_rate_)*/0
  , /*decltype(_impl_.steer_ratio_)*/0
  , /*decltype(_impl_.wheel_base_)*/0
  , /*decltype(_impl_.wheel_rolling_radius_)*/0} {}
struct VehicleParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleParamDefaultTypeInternal() {}
  union {
    VehicleParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
PROTOBUF_CONSTEXPR VehicleConfig::VehicleConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.vehicle_param_)*/nullptr
  , /*decltype(_impl_.extrinsics_)*/nullptr} {}
struct VehicleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleConfigDefaultTypeInternal() {}
  union {
    VehicleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _impl_.source_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _impl_.target_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Transform, _impl_.rotation_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::common::Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::Extrinsics, _impl_.tansforms_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.front_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.back_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.left_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.right_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.min_turn_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.max_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.max_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.min_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.steer_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.wheel_base_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.wheel_rolling_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleParam, _impl_.max_abs_speed_when_stopped_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleConfig, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleConfig, _impl_.vehicle_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleConfig, _impl_.extrinsics_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::common::Transform)},
  { 14, -1, -1, sizeof(::apollo::common::Extrinsics)},
  { 21, 45, -1, sizeof(::apollo::common::VehicleParam)},
  { 63, 72, -1, sizeof(::apollo::common::VehicleConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::_Transform_default_instance_._instance,
  &::apollo::common::_Extrinsics_default_instance_._instance,
  &::apollo::common::_VehicleParam_default_instance_._instance,
  &::apollo::common::_VehicleConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/common/configs/proto/vehicle_c"
  "onfig.proto\022\rapollo.common\032!modules/comm"
  "on/proto/header.proto\032#modules/common/pr"
  "oto/geometry.proto\"\221\001\n\tTransform\022\024\n\014sour"
  "ce_frame\030\001 \001(\014\022\024\n\014target_frame\030\002 \001(\014\022+\n\013"
  "translation\030\003 \001(\0132\026.apollo.common.Point3"
  "D\022+\n\010rotation\030\004 \001(\0132\031.apollo.common.Quat"
  "ernion\"9\n\nExtrinsics\022+\n\ttansforms\030\001 \003(\0132"
  "\030.apollo.common.Transform\"\243\004\n\014VehiclePar"
  "am\0227\n\005brand\030\001 \001(\0162(.apollo.common.Vehicl"
  "eParam.VehicleBrand\022\034\n\024front_edge_to_cen"
  "ter\030\002 \001(\001\022\033\n\023back_edge_to_center\030\003 \001(\001\022\033"
  "\n\023left_edge_to_center\030\004 \001(\001\022\034\n\024right_edg"
  "e_to_center\030\005 \001(\001\022\016\n\006length\030\006 \001(\001\022\r\n\005wid"
  "th\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\027\n\017min_turn_rad"
  "ius\030\t \001(\001\022\030\n\020max_acceleration\030\n \001(\001\022\030\n\020m"
  "ax_deceleration\030\013 \001(\001\022\027\n\017max_steer_angle"
  "\030\014 \001(\001\022\034\n\024max_steer_angle_rate\030\r \001(\001\022\034\n\024"
  "min_steer_angle_rate\030\016 \001(\001\022\023\n\013steer_rati"
  "o\030\017 \001(\001\022\022\n\nwheel_base\030\020 \001(\001\022\034\n\024wheel_rol"
  "ling_radius\030\021 \001(\001\022\"\n\032max_abs_speed_when_"
  "stopped\030\022 \001(\002\"(\n\014VehicleBrand\022\017\n\013LINCOLN"
  "_MKZ\020\000\022\007\n\003GEM\020\001\"\231\001\n\rVehicleConfig\022%\n\006hea"
  "der\030\001 \001(\0132\025.apollo.common.Header\0222\n\rvehi"
  "cle_param\030\002 \001(\0132\033.apollo.common.VehicleP"
  "aram\022-\n\nextrinsics\030\003 \001(\0132\031.apollo.common"
  ".Extrinsics"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto = {
    false, false, 1051, descriptor_table_protodef_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
    "modules/common/configs/proto/vehicle_config.proto",
    &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once, descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto, file_level_enum_descriptors_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto(&descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
namespace apollo {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleParam_VehicleBrand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[0];
}
bool VehicleParam_VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleParam_VehicleBrand VehicleParam::LINCOLN_MKZ;
constexpr VehicleParam_VehicleBrand VehicleParam::GEM;
constexpr VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MIN;
constexpr VehicleParam_VehicleBrand VehicleParam::VehicleBrand_MAX;
constexpr int VehicleParam::VehicleBrand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._impl_._has_bits_);
  static void set_has_source_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& translation(const Transform* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Quaternion& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Point3D&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->_impl_.translation_;
}
const ::apollo::common::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
void Transform::clear_translation() {
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_frame_){}
    , decltype(_impl_.target_frame_){}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_frame()) {
    _impl_.source_frame_.Set(from._internal_source_frame(), 
      GetArenaForAllocation());
  }
  _impl_.target_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_frame()) {
    _impl_.target_frame_.Set(from._internal_target_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_translation()) {
    _impl_.translation_ = new ::apollo::common::Point3D(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _impl_.rotation_ = new ::apollo::common::Quaternion(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Transform)
}

inline void Transform::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_frame_){}
    , decltype(_impl_.target_frame_){}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
  };
  _impl_.source_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:apollo.common.Transform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_frame_.Destroy();
  _impl_.target_frame_.Destroy();
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void Transform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.target_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes source_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes target_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D translation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Quaternion rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_frame(), target);
  }

  // optional .apollo.common.Point3D translation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Quaternion rotation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes source_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_frame());
    }

    // optional bytes target_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_target_frame());
    }

    // optional .apollo.common.Point3D translation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_);
    }

    // optional .apollo.common.Quaternion rotation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }

void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transform *>(to)->MergeFrom(
      static_cast<const Transform &>(from));
}


void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_frame(from._internal_source_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_frame(from._internal_target_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_translation()->::apollo::common::Point3D::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from._internal_rotation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_frame_, lhs_arena,
      &other->_impl_.source_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_frame_, lhs_arena,
      &other->_impl_.target_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)
      + sizeof(Transform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[0]);
}

// ===================================================================

class Extrinsics::_Internal {
 public:
};

Extrinsics::Extrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.tansforms_){from._impl_.tansforms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Extrinsics)
}

inline void Extrinsics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tansforms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:apollo.common.Extrinsics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Extrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tansforms_.~RepeatedPtrField();
}

void Extrinsics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Extrinsics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tansforms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.Transform tansforms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tansforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Extrinsics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Extrinsics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tansforms_size()); i < n; i++) {
    const auto& repfield = this->_internal_tansforms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Extrinsics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  total_size += 1UL * this->_internal_tansforms_size();
  for (const auto& msg : this->_impl_.tansforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extrinsics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extrinsics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extrinsics::GetClassData() const { return &_class_data_; }

void Extrinsics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Extrinsics *>(to)->MergeFrom(
      static_cast<const Extrinsics &>(from));
}


void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.tansforms_.MergeFrom(from._impl_.tansforms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tansforms_.InternalSwap(&other->_impl_.tansforms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[1]);
}

// ===================================================================

class VehicleParam::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleParam>()._impl_._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_front_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_back_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_left_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right_edge_to_center(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_turn_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steer_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_wheel_base(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_wheel_rolling_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_abs_speed_when_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

VehicleParam::VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_edge_to_center_){}
    , decltype(_impl_.back_edge_to_center_){}
    , decltype(_impl_.left_edge_to_center_){}
    , decltype(_impl_.right_edge_to_center_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.min_turn_radius_){}
    , decltype(_impl_.brand_){}
    , decltype(_impl_.max_abs_speed_when_stopped_){}
    , decltype(_impl_.max_acceleration_){}
    , decltype(_impl_.max_deceleration_){}
    , decltype(_impl_.max_steer_angle_){}
    , decltype(_impl_.max_steer_angle_rate_){}
    , decltype(_impl_.min_steer_angle_rate_){}
    , decltype(_impl_.steer_ratio_){}
    , decltype(_impl_.wheel_base_){}
    , decltype(_impl_.wheel_rolling_radius_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_edge_to_center_, &from._impl_.front_edge_to_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wheel_rolling_radius_) -
    reinterpret_cast<char*>(&_impl_.front_edge_to_center_)) + sizeof(_impl_.wheel_rolling_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleParam)
}

inline void VehicleParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_edge_to_center_){0}
    , decltype(_impl_.back_edge_to_center_){0}
    , decltype(_impl_.left_edge_to_center_){0}
    , decltype(_impl_.right_edge_to_center_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.min_turn_radius_){0}
    , decltype(_impl_.brand_){0}
    , decltype(_impl_.max_abs_speed_when_stopped_){0}
    , decltype(_impl_.max_acceleration_){0}
    , decltype(_impl_.max_deceleration_){0}
    , decltype(_impl_.max_steer_angle_){0}
    , decltype(_impl_.max_steer_angle_rate_){0}
    , decltype(_impl_.min_steer_angle_rate_){0}
    , decltype(_impl_.steer_ratio_){0}
    , decltype(_impl_.wheel_base_){0}
    , decltype(_impl_.wheel_rolling_radius_){0}
  };
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.front_edge_to_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.min_turn_radius_) -
        reinterpret_cast<char*>(&_impl_.front_edge_to_center_)) + sizeof(_impl_.min_turn_radius_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.brand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steer_ratio_) -
        reinterpret_cast<char*>(&_impl_.brand_)) + sizeof(_impl_.steer_ratio_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.wheel_base_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wheel_rolling_radius_) -
        reinterpret_cast<char*>(&_impl_.wheel_base_)) + sizeof(_impl_.wheel_rolling_radius_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::VehicleParam_VehicleBrand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::common::VehicleParam_VehicleBrand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double front_edge_to_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_front_edge_to_center(&has_bits);
          _impl_.front_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double back_edge_to_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_back_edge_to_center(&has_bits);
          _impl_.back_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double left_edge_to_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_left_edge_to_center(&has_bits);
          _impl_.left_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double right_edge_to_center = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_right_edge_to_center(&has_bits);
          _impl_.right_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_turn_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_min_turn_radius(&has_bits);
          _impl_.min_turn_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_max_acceleration(&has_bits);
          _impl_.max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_deceleration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_max_deceleration(&has_bits);
          _impl_.max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_steer_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_max_steer_angle(&has_bits);
          _impl_.max_steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_steer_angle_rate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_max_steer_angle_rate(&has_bits);
          _impl_.max_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_steer_angle_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_min_steer_angle_rate(&has_bits);
          _impl_.min_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_ratio = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_steer_ratio(&has_bits);
          _impl_.steer_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_base = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_wheel_base(&has_bits);
          _impl_.wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_rolling_radius = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_wheel_rolling_radius(&has_bits);
          _impl_.wheel_rolling_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float max_abs_speed_when_stopped = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_max_abs_speed_when_stopped(&has_bits);
          _impl_.max_abs_speed_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // optional double front_edge_to_center = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_right_edge_to_center(), target);
  }

  // optional double length = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_length(), target);
  }

  // optional double width = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_width(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_height(), target);
  }

  // optional double min_turn_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_min_turn_radius(), target);
  }

  // optional double max_acceleration = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_deceleration(), target);
  }

  // optional double max_steer_angle = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_steer_ratio(), target);
  }

  // optional double wheel_base = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_max_abs_speed_when_stopped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double front_edge_to_center = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double length = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double width = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.common.VehicleParam.VehicleBrand brand = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional float max_abs_speed_when_stopped = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional double max_acceleration = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double wheel_base = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleParam::GetClassData() const { return &_class_data_; }

void VehicleParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleParam *>(to)->MergeFrom(
      static_cast<const VehicleParam &>(from));
}


void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.front_edge_to_center_ = from._impl_.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.back_edge_to_center_ = from._impl_.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.left_edge_to_center_ = from._impl_.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.right_edge_to_center_ = from._impl_.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.min_turn_radius_ = from._impl_.min_turn_radius_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.brand_ = from._impl_.brand_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.max_abs_speed_when_stopped_ = from._impl_.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.max_acceleration_ = from._impl_.max_acceleration_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.max_deceleration_ = from._impl_.max_deceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.max_steer_angle_ = from._impl_.max_steer_angle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.max_steer_angle_rate_ = from._impl_.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.min_steer_angle_rate_ = from._impl_.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.steer_ratio_ = from._impl_.steer_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.wheel_base_ = from._impl_.wheel_base_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.wheel_rolling_radius_ = from._impl_.wheel_rolling_radius_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.wheel_rolling_radius_)
      + sizeof(VehicleParam::_impl_.wheel_rolling_radius_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, _impl_.front_edge_to_center_)>(
          reinterpret_cast<char*>(&_impl_.front_edge_to_center_),
          reinterpret_cast<char*>(&other->_impl_.front_edge_to_center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[2]);
}

// ===================================================================

class VehicleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleConfig>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const VehicleConfig* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::VehicleParam& vehicle_param(const VehicleConfig* msg);
  static void set_has_vehicle_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Extrinsics& extrinsics(const VehicleConfig* msg);
  static void set_has_extrinsics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
VehicleConfig::_Internal::header(const VehicleConfig* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::VehicleParam&
VehicleConfig::_Internal::vehicle_param(const VehicleConfig* msg) {
  return *msg->_impl_.vehicle_param_;
}
const ::apollo::common::Extrinsics&
VehicleConfig::_Internal::extrinsics(const VehicleConfig* msg) {
  return *msg->_impl_.extrinsics_;
}
void VehicleConfig::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VehicleConfig::VehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.vehicle_param_){nullptr}
    , decltype(_impl_.extrinsics_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_vehicle_param()) {
    _impl_.vehicle_param_ = new ::apollo::common::VehicleParam(*from._impl_.vehicle_param_);
  }
  if (from._internal_has_extrinsics()) {
    _impl_.extrinsics_ = new ::apollo::common::Extrinsics(*from._impl_.extrinsics_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleConfig)
}

inline void VehicleConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.vehicle_param_){nullptr}
    , decltype(_impl_.extrinsics_){nullptr}
  };
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.vehicle_param_;
  if (this != internal_default_instance()) delete _impl_.extrinsics_;
}

void VehicleConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vehicle_param_ != nullptr);
      _impl_.vehicle_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.extrinsics_ != nullptr);
      _impl_.extrinsics_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleParam vehicle_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Extrinsics extrinsics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrinsics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vehicle_param(this),
        _Internal::vehicle_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extrinsics(this),
        _Internal::extrinsics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.VehicleParam vehicle_param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_param_);
    }

    // optional .apollo.common.Extrinsics extrinsics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extrinsics_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleConfig::GetClassData() const { return &_class_data_; }

void VehicleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleConfig *>(to)->MergeFrom(
      static_cast<const VehicleConfig &>(from));
}


void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vehicle_param()->::apollo::common::VehicleParam::MergeFrom(from._internal_vehicle_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_extrinsics()->::apollo::common::Extrinsics::MergeFrom(from._internal_extrinsics());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.extrinsics_)
      + sizeof(VehicleConfig::_impl_.extrinsics_)
      - PROTOBUF_FIELD_OFFSET(VehicleConfig, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::Transform*
Arena::CreateMaybeMessage< ::apollo::common::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::Extrinsics*
Arena::CreateMaybeMessage< ::apollo::common::Extrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::Extrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::VehicleParam*
Arena::CreateMaybeMessage< ::apollo::common::VehicleParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::VehicleConfig*
Arena::CreateMaybeMessage< ::apollo::common::VehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::VehicleConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
