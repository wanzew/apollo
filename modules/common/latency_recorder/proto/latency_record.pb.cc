// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/latency_recorder/proto/latency_record.proto

#include "modules/common/latency_recorder/proto/latency_record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
PROTOBUF_CONSTEXPR LatencyRecord::LatencyRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_time_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_)*/uint64_t{0u}
  , /*decltype(_impl_.message_id_)*/uint64_t{0u}} {}
struct LatencyRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyRecordDefaultTypeInternal() {}
  union {
    LatencyRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyRecordDefaultTypeInternal _LatencyRecord_default_instance_;
PROTOBUF_CONSTEXPR LatencyRecordMap::LatencyRecordMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latency_records_)*/{}
  , /*decltype(_impl_.module_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct LatencyRecordMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyRecordMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyRecordMapDefaultTypeInternal() {}
  union {
    LatencyRecordMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyRecordMapDefaultTypeInternal _LatencyRecordMap_default_instance_;
PROTOBUF_CONSTEXPR LatencyStat::LatencyStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_duration_)*/uint64_t{0u}
  , /*decltype(_impl_.aver_duration_)*/uint64_t{0u}
  , /*decltype(_impl_.sample_size_)*/0u
  , /*decltype(_impl_.min_duration_)*/uint64_t{9223372036854775808u}} {}
struct LatencyStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyStatDefaultTypeInternal() {}
  union {
    LatencyStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyStatDefaultTypeInternal _LatencyStat_default_instance_;
PROTOBUF_CONSTEXPR LatencyTrack_LatencyTrackMessage::LatencyTrack_LatencyTrackMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latency_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latency_stat_)*/nullptr} {}
struct LatencyTrack_LatencyTrackMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyTrack_LatencyTrackMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyTrack_LatencyTrackMessageDefaultTypeInternal() {}
  union {
    LatencyTrack_LatencyTrackMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyTrack_LatencyTrackMessageDefaultTypeInternal _LatencyTrack_LatencyTrackMessage_default_instance_;
PROTOBUF_CONSTEXPR LatencyTrack::LatencyTrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latency_track_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LatencyTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyTrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyTrackDefaultTypeInternal() {}
  union {
    LatencyTrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyTrackDefaultTypeInternal _LatencyTrack_default_instance_;
PROTOBUF_CONSTEXPR LatencyReport::LatencyReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.e2es_latency_)*/nullptr
  , /*decltype(_impl_.modules_latency_)*/nullptr} {}
struct LatencyReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyReportDefaultTypeInternal() {}
  union {
    LatencyReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyReportDefaultTypeInternal _LatencyReport_default_instance_;
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecord, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecord, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecord, _impl_.message_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _impl_.module_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _impl_.latency_records_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _impl_.min_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _impl_.max_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _impl_.aver_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyStat, _impl_.sample_size_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _impl_.latency_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _impl_.latency_stat_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyTrack, _impl_.latency_track_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyReport, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyReport, _impl_.e2es_latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::LatencyReport, _impl_.modules_latency_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::common::LatencyRecord)},
  { 12, 21, -1, sizeof(::apollo::common::LatencyRecordMap)},
  { 24, 34, -1, sizeof(::apollo::common::LatencyStat)},
  { 38, 46, -1, sizeof(::apollo::common::LatencyTrack_LatencyTrackMessage)},
  { 48, -1, -1, sizeof(::apollo::common::LatencyTrack)},
  { 55, 64, -1, sizeof(::apollo::common::LatencyReport)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::_LatencyRecord_default_instance_._instance,
  &::apollo::common::_LatencyRecordMap_default_instance_._instance,
  &::apollo::common::_LatencyStat_default_instance_._instance,
  &::apollo::common::_LatencyTrack_LatencyTrackMessage_default_instance_._instance,
  &::apollo::common::_LatencyTrack_default_instance_._instance,
  &::apollo::common::_LatencyReport_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:modules/common/latency_recorder/proto/"
  "latency_record.proto\022\rapollo.common\032!mod"
  "ules/common/proto/header.proto\"I\n\rLatenc"
  "yRecord\022\022\n\nbegin_time\030\001 \001(\004\022\020\n\010end_time\030"
  "\002 \001(\004\022\022\n\nmessage_id\030\003 \001(\004\"\205\001\n\020LatencyRec"
  "ordMap\022%\n\006header\030\001 \001(\0132\025.apollo.common.H"
  "eader\022\023\n\013module_name\030\002 \001(\t\0225\n\017latency_re"
  "cords\030\003 \003(\0132\034.apollo.common.LatencyRecor"
  "d\"z\n\013LatencyStat\022)\n\014min_duration\030\001 \001(\004:\023"
  "9223372036854775808\022\024\n\014max_duration\030\002 \001("
  "\004\022\025\n\raver_duration\030\003 \001(\004\022\023\n\013sample_size\030"
  "\004 \001(\r\"\265\001\n\014LatencyTrack\022F\n\rlatency_track\030"
  "\001 \003(\0132/.apollo.common.LatencyTrack.Laten"
  "cyTrackMessage\032]\n\023LatencyTrackMessage\022\024\n"
  "\014latency_name\030\001 \001(\t\0220\n\014latency_stat\030\002 \001("
  "\0132\032.apollo.common.LatencyStat\"\237\001\n\rLatenc"
  "yReport\022%\n\006header\030\001 \001(\0132\025.apollo.common."
  "Header\0221\n\014e2es_latency\030\002 \001(\0132\033.apollo.co"
  "mmon.LatencyTrack\0224\n\017modules_latency\030\003 \001"
  "(\0132\033.apollo.common.LatencyTrack"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto = {
    false, false, 791, descriptor_table_protodef_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto,
    "modules/common/latency_recorder/proto/latency_record.proto",
    &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once, descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto, file_level_enum_descriptors_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto,
    file_level_service_descriptors_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto(&descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto);
namespace apollo {
namespace common {

// ===================================================================

class LatencyRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyRecord>()._impl_._has_bits_);
  static void set_has_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LatencyRecord::LatencyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyRecord)
}
LatencyRecord::LatencyRecord(const LatencyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_time_, &from._impl_.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.begin_time_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyRecord)
}

inline void LatencyRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_time_){uint64_t{0u}}
    , decltype(_impl_.end_time_){uint64_t{0u}}
    , decltype(_impl_.message_id_){uint64_t{0u}}
  };
}

LatencyRecord::~LatencyRecord() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatencyRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.begin_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.message_id_) -
        reinterpret_cast<char*>(&_impl_.begin_time_)) + sizeof(_impl_.message_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 begin_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin_time(&has_bits);
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_begin_time(), target);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end_time(), target);
  }

  // optional uint64 message_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyRecord)
  return target;
}

size_t LatencyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 begin_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_begin_time());
    }

    // optional uint64 end_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());
    }

    // optional uint64 message_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyRecord::GetClassData() const { return &_class_data_; }

void LatencyRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyRecord *>(to)->MergeFrom(
      static_cast<const LatencyRecord &>(from));
}


void LatencyRecord::MergeFrom(const LatencyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.begin_time_ = from._impl_.begin_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.message_id_ = from._impl_.message_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyRecord::CopyFrom(const LatencyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyRecord::IsInitialized() const {
  return true;
}

void LatencyRecord::InternalSwap(LatencyRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyRecord, _impl_.message_id_)
      + sizeof(LatencyRecord::_impl_.message_id_)
      - PROTOBUF_FIELD_OFFSET(LatencyRecord, _impl_.begin_time_)>(
          reinterpret_cast<char*>(&_impl_.begin_time_),
          reinterpret_cast<char*>(&other->_impl_.begin_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[0]);
}

// ===================================================================

class LatencyRecordMap::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyRecordMap>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const LatencyRecordMap* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
LatencyRecordMap::_Internal::header(const LatencyRecordMap* msg) {
  return *msg->_impl_.header_;
}
void LatencyRecordMap::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LatencyRecordMap::LatencyRecordMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyRecordMap)
}
LatencyRecordMap::LatencyRecordMap(const LatencyRecordMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latency_records_){from._impl_.latency_records_}
    , decltype(_impl_.module_name_){}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_name()) {
    _impl_.module_name_.Set(from._internal_module_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyRecordMap)
}

inline void LatencyRecordMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latency_records_){arena}
    , decltype(_impl_.module_name_){}
    , decltype(_impl_.header_){nullptr}
  };
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LatencyRecordMap::~LatencyRecordMap() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyRecordMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyRecordMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.latency_records_.~RepeatedPtrField();
  _impl_.module_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void LatencyRecordMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyRecordMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyRecordMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latency_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.module_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyRecordMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string module_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.LatencyRecordMap.module_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.LatencyRecord latency_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_latency_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyRecordMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyRecordMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyRecordMap.module_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_name(), target);
  }

  // repeated .apollo.common.LatencyRecord latency_records = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_latency_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_latency_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyRecordMap)
  return target;
}

size_t LatencyRecordMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyRecordMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.LatencyRecord latency_records = 3;
  total_size += 1UL * this->_internal_latency_records_size();
  for (const auto& msg : this->_impl_.latency_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string module_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_name());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyRecordMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyRecordMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyRecordMap::GetClassData() const { return &_class_data_; }

void LatencyRecordMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyRecordMap *>(to)->MergeFrom(
      static_cast<const LatencyRecordMap &>(from));
}


void LatencyRecordMap::MergeFrom(const LatencyRecordMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyRecordMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.latency_records_.MergeFrom(from._impl_.latency_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_module_name(from._internal_module_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyRecordMap::CopyFrom(const LatencyRecordMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyRecordMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyRecordMap::IsInitialized() const {
  return true;
}

void LatencyRecordMap::InternalSwap(LatencyRecordMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.latency_records_.InternalSwap(&other->_impl_.latency_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_name_, lhs_arena,
      &other->_impl_.module_name_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyRecordMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[1]);
}

// ===================================================================

class LatencyStat::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStat>()._impl_._has_bits_);
  static void set_has_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aver_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LatencyStat::LatencyStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyStat)
}
LatencyStat::LatencyStat(const LatencyStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_duration_){}
    , decltype(_impl_.aver_duration_){}
    , decltype(_impl_.sample_size_){}
    , decltype(_impl_.min_duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_duration_, &from._impl_.max_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_duration_) -
    reinterpret_cast<char*>(&_impl_.max_duration_)) + sizeof(_impl_.min_duration_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyStat)
}

inline void LatencyStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_duration_){uint64_t{0u}}
    , decltype(_impl_.aver_duration_){uint64_t{0u}}
    , decltype(_impl_.sample_size_){0u}
    , decltype(_impl_.min_duration_){uint64_t{9223372036854775808u}}
  };
}

LatencyStat::~LatencyStat() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatencyStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyStat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.max_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sample_size_) -
        reinterpret_cast<char*>(&_impl_.max_duration_)) + sizeof(_impl_.sample_size_));
    _impl_.min_duration_ = uint64_t{9223372036854775808u};
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 min_duration = 1 [default = 9223372036854775808];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_duration(&has_bits);
          _impl_.min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_duration(&has_bits);
          _impl_.max_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 aver_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_aver_duration(&has_bits);
          _impl_.aver_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sample_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sample_size(&has_bits);
          _impl_.sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 min_duration = 1 [default = 9223372036854775808];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_min_duration(), target);
  }

  // optional uint64 max_duration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_duration(), target);
  }

  // optional uint64 aver_duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_aver_duration(), target);
  }

  // optional uint32 sample_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sample_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyStat)
  return target;
}

size_t LatencyStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 max_duration = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_duration());
    }

    // optional uint64 aver_duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_aver_duration());
    }

    // optional uint32 sample_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_size());
    }

    // optional uint64 min_duration = 1 [default = 9223372036854775808];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyStat::GetClassData() const { return &_class_data_; }

void LatencyStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyStat *>(to)->MergeFrom(
      static_cast<const LatencyStat &>(from));
}


void LatencyStat::MergeFrom(const LatencyStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_duration_ = from._impl_.max_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.aver_duration_ = from._impl_.aver_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sample_size_ = from._impl_.sample_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.min_duration_ = from._impl_.min_duration_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyStat::CopyFrom(const LatencyStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStat::IsInitialized() const {
  return true;
}

void LatencyStat::InternalSwap(LatencyStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStat, _impl_.sample_size_)
      + sizeof(LatencyStat::_impl_.sample_size_)
      - PROTOBUF_FIELD_OFFSET(LatencyStat, _impl_.max_duration_)>(
          reinterpret_cast<char*>(&_impl_.max_duration_),
          reinterpret_cast<char*>(&other->_impl_.max_duration_));
  swap(_impl_.min_duration_, other->_impl_.min_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[2]);
}

// ===================================================================

class LatencyTrack_LatencyTrackMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyTrack_LatencyTrackMessage>()._impl_._has_bits_);
  static void set_has_latency_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::LatencyStat& latency_stat(const LatencyTrack_LatencyTrackMessage* msg);
  static void set_has_latency_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::LatencyStat&
LatencyTrack_LatencyTrackMessage::_Internal::latency_stat(const LatencyTrack_LatencyTrackMessage* msg) {
  return *msg->_impl_.latency_stat_;
}
LatencyTrack_LatencyTrackMessage::LatencyTrack_LatencyTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyTrack.LatencyTrackMessage)
}
LatencyTrack_LatencyTrackMessage::LatencyTrack_LatencyTrackMessage(const LatencyTrack_LatencyTrackMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latency_name_){}
    , decltype(_impl_.latency_stat_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.latency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_latency_name()) {
    _impl_.latency_name_.Set(from._internal_latency_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_latency_stat()) {
    _impl_.latency_stat_ = new ::apollo::common::LatencyStat(*from._impl_.latency_stat_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyTrack.LatencyTrackMessage)
}

inline void LatencyTrack_LatencyTrackMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latency_name_){}
    , decltype(_impl_.latency_stat_){nullptr}
  };
  _impl_.latency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LatencyTrack_LatencyTrackMessage::~LatencyTrack_LatencyTrackMessage() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyTrack.LatencyTrackMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyTrack_LatencyTrackMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.latency_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latency_stat_;
}

void LatencyTrack_LatencyTrackMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyTrack_LatencyTrackMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.latency_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.latency_stat_ != nullptr);
      _impl_.latency_stat_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyTrack_LatencyTrackMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string latency_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_latency_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.LatencyTrack.LatencyTrackMessage.latency_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.LatencyStat latency_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyTrack_LatencyTrackMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string latency_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_latency_name().data(), static_cast<int>(this->_internal_latency_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyTrack.LatencyTrackMessage.latency_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_latency_name(), target);
  }

  // optional .apollo.common.LatencyStat latency_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latency_stat(this),
        _Internal::latency_stat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyTrack.LatencyTrackMessage)
  return target;
}

size_t LatencyTrack_LatencyTrackMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string latency_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_latency_name());
    }

    // optional .apollo.common.LatencyStat latency_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latency_stat_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyTrack_LatencyTrackMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyTrack_LatencyTrackMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyTrack_LatencyTrackMessage::GetClassData() const { return &_class_data_; }

void LatencyTrack_LatencyTrackMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyTrack_LatencyTrackMessage *>(to)->MergeFrom(
      static_cast<const LatencyTrack_LatencyTrackMessage &>(from));
}


void LatencyTrack_LatencyTrackMessage::MergeFrom(const LatencyTrack_LatencyTrackMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_latency_name(from._internal_latency_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_latency_stat()->::apollo::common::LatencyStat::MergeFrom(from._internal_latency_stat());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyTrack_LatencyTrackMessage::CopyFrom(const LatencyTrack_LatencyTrackMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyTrack_LatencyTrackMessage::IsInitialized() const {
  return true;
}

void LatencyTrack_LatencyTrackMessage::InternalSwap(LatencyTrack_LatencyTrackMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.latency_name_, lhs_arena,
      &other->_impl_.latency_name_, rhs_arena
  );
  swap(_impl_.latency_stat_, other->_impl_.latency_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyTrack_LatencyTrackMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[3]);
}

// ===================================================================

class LatencyTrack::_Internal {
 public:
};

LatencyTrack::LatencyTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyTrack)
}
LatencyTrack::LatencyTrack(const LatencyTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.latency_track_){from._impl_.latency_track_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyTrack)
}

inline void LatencyTrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latency_track_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LatencyTrack::~LatencyTrack() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyTrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.latency_track_.~RepeatedPtrField();
}

void LatencyTrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyTrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latency_track_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyTrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_latency_track(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyTrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyTrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_latency_track_size()); i < n; i++) {
    const auto& repfield = this->_internal_latency_track(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyTrack)
  return target;
}

size_t LatencyTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyTrack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  total_size += 1UL * this->_internal_latency_track_size();
  for (const auto& msg : this->_impl_.latency_track_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyTrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyTrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyTrack::GetClassData() const { return &_class_data_; }

void LatencyTrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyTrack *>(to)->MergeFrom(
      static_cast<const LatencyTrack &>(from));
}


void LatencyTrack::MergeFrom(const LatencyTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyTrack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.latency_track_.MergeFrom(from._impl_.latency_track_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyTrack::CopyFrom(const LatencyTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyTrack::IsInitialized() const {
  return true;
}

void LatencyTrack::InternalSwap(LatencyTrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.latency_track_.InternalSwap(&other->_impl_.latency_track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyTrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[4]);
}

// ===================================================================

class LatencyReport::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyReport>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const LatencyReport* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::LatencyTrack& e2es_latency(const LatencyReport* msg);
  static void set_has_e2es_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::LatencyTrack& modules_latency(const LatencyReport* msg);
  static void set_has_modules_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
LatencyReport::_Internal::header(const LatencyReport* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::LatencyTrack&
LatencyReport::_Internal::e2es_latency(const LatencyReport* msg) {
  return *msg->_impl_.e2es_latency_;
}
const ::apollo::common::LatencyTrack&
LatencyReport::_Internal::modules_latency(const LatencyReport* msg) {
  return *msg->_impl_.modules_latency_;
}
void LatencyReport::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LatencyReport::LatencyReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.LatencyReport)
}
LatencyReport::LatencyReport(const LatencyReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.e2es_latency_){nullptr}
    , decltype(_impl_.modules_latency_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_e2es_latency()) {
    _impl_.e2es_latency_ = new ::apollo::common::LatencyTrack(*from._impl_.e2es_latency_);
  }
  if (from._internal_has_modules_latency()) {
    _impl_.modules_latency_ = new ::apollo::common::LatencyTrack(*from._impl_.modules_latency_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyReport)
}

inline void LatencyReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.e2es_latency_){nullptr}
    , decltype(_impl_.modules_latency_){nullptr}
  };
}

LatencyReport::~LatencyReport() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.e2es_latency_;
  if (this != internal_default_instance()) delete _impl_.modules_latency_;
}

void LatencyReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyReport::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.e2es_latency_ != nullptr);
      _impl_.e2es_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.modules_latency_ != nullptr);
      _impl_.modules_latency_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.LatencyTrack e2es_latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2es_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.LatencyTrack modules_latency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modules_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.LatencyTrack e2es_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::e2es_latency(this),
        _Internal::e2es_latency(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.LatencyTrack modules_latency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modules_latency(this),
        _Internal::modules_latency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyReport)
  return target;
}

size_t LatencyReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.LatencyTrack e2es_latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.e2es_latency_);
    }

    // optional .apollo.common.LatencyTrack modules_latency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.modules_latency_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyReport::GetClassData() const { return &_class_data_; }

void LatencyReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyReport *>(to)->MergeFrom(
      static_cast<const LatencyReport &>(from));
}


void LatencyReport::MergeFrom(const LatencyReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_e2es_latency()->::apollo::common::LatencyTrack::MergeFrom(from._internal_e2es_latency());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_modules_latency()->::apollo::common::LatencyTrack::MergeFrom(from._internal_modules_latency());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyReport::CopyFrom(const LatencyReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyReport::IsInitialized() const {
  return true;
}

void LatencyReport::InternalSwap(LatencyReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyReport, _impl_.modules_latency_)
      + sizeof(LatencyReport::_impl_.modules_latency_)
      - PROTOBUF_FIELD_OFFSET(LatencyReport, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_getter, &descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto_once,
      file_level_metadata_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyRecord*
Arena::CreateMaybeMessage< ::apollo::common::LatencyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyRecordMap*
Arena::CreateMaybeMessage< ::apollo::common::LatencyRecordMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyRecordMap >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyStat*
Arena::CreateMaybeMessage< ::apollo::common::LatencyStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyStat >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyTrack_LatencyTrackMessage*
Arena::CreateMaybeMessage< ::apollo::common::LatencyTrack_LatencyTrackMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyTrack_LatencyTrackMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyTrack*
Arena::CreateMaybeMessage< ::apollo::common::LatencyTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::LatencyReport*
Arena::CreateMaybeMessage< ::apollo::common::LatencyReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::LatencyReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
