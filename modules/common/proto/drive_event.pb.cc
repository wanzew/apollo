// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/drive_event.proto

#include "modules/common/proto/drive_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
PROTOBUF_CONSTEXPR DriveEvent::DriveEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_.event_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.is_reportable_)*/false} {}
struct DriveEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DriveEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DriveEventDefaultTypeInternal() {}
  union {
    DriveEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DriveEventDefaultTypeInternal _DriveEvent_default_instance_;
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::DriveEvent, _impl_.is_reportable_),
  1,
  0,
  2,
  ~0u,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::common::DriveEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::_DriveEvent_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/common/proto/drive_event.proto"
  "\022\rapollo.common\032!modules/common/proto/he"
  "ader.proto\032%modules/localization/proto/p"
  "ose.proto\"\366\001\n\nDriveEvent\022%\n\006header\030\001 \001(\013"
  "2\025.apollo.common.Header\022\r\n\005event\030\002 \001(\t\022+"
  "\n\010location\030\003 \001(\0132\031.apollo.localization.P"
  "ose\022,\n\004type\030\004 \003(\0162\036.apollo.common.DriveE"
  "vent.Type\022\025\n\ris_reportable\030\005 \001(\010\"@\n\004Type"
  "\022\014\n\010CRITICAL\020\000\022\013\n\007PROBLEM\020\001\022\013\n\007DESIRED\020\002"
  "\022\020\n\014OUT_OF_SCOPE\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto = {
    false, false, 378, descriptor_table_protodef_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto,
    "modules/common/proto/drive_event.proto",
    &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_once, descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto, file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto,
    file_level_service_descriptors_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto(&descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto);
namespace apollo {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto[0];
}
bool DriveEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DriveEvent_Type DriveEvent::CRITICAL;
constexpr DriveEvent_Type DriveEvent::PROBLEM;
constexpr DriveEvent_Type DriveEvent::DESIRED;
constexpr DriveEvent_Type DriveEvent::OUT_OF_SCOPE;
constexpr DriveEvent_Type DriveEvent::Type_MIN;
constexpr DriveEvent_Type DriveEvent::Type_MAX;
constexpr int DriveEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DriveEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DriveEvent>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const DriveEvent* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::localization::Pose& location(const DriveEvent* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_reportable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
DriveEvent::_Internal::header(const DriveEvent* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::localization::Pose&
DriveEvent::_Internal::location(const DriveEvent* msg) {
  return *msg->_impl_.location_;
}
void DriveEvent::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DriveEvent::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DriveEvent::DriveEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.DriveEvent)
}
DriveEvent::DriveEvent(const DriveEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){from._impl_.type_}
    , decltype(_impl_.event_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.is_reportable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event()) {
    _impl_.event_.Set(from._internal_event(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_location()) {
    _impl_.location_ = new ::apollo::localization::Pose(*from._impl_.location_);
  }
  _impl_.is_reportable_ = from._impl_.is_reportable_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.DriveEvent)
}

inline void DriveEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){arena}
    , decltype(_impl_.event_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.is_reportable_){false}
  };
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DriveEvent::~DriveEvent() {
  // @@protoc_insertion_point(destructor:apollo.common.DriveEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DriveEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.~RepeatedField();
  _impl_.event_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void DriveEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DriveEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.DriveEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.event_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  _impl_.is_reportable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriveEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.DriveEvent.event");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.Pose location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.DriveEvent.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::common::DriveEvent_Type_IsValid(val))) {
              _internal_add_type(static_cast<::apollo::common::DriveEvent_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_type(), ptr, ctx, ::apollo::common::DriveEvent_Type_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_reportable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_reportable(&has_bits);
          _impl_.is_reportable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DriveEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.DriveEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event().data(), static_cast<int>(this->_internal_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.DriveEvent.event");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event(), target);
  }

  // optional .apollo.localization.Pose location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.DriveEvent.Type type = 4;
  for (int i = 0, n = this->_internal_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(i), target);
  }

  // optional bool is_reportable = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_reportable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.DriveEvent)
  return target;
}

size_t DriveEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.DriveEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.DriveEvent.Type type = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.localization.Pose location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional bool is_reportable = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DriveEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DriveEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DriveEvent::GetClassData() const { return &_class_data_; }

void DriveEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DriveEvent *>(to)->MergeFrom(
      static_cast<const DriveEvent &>(from));
}


void DriveEvent::MergeFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.DriveEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.type_.MergeFrom(from._impl_.type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event(from._internal_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_location()->::apollo::localization::Pose::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_reportable_ = from._impl_.is_reportable_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DriveEvent::CopyFrom(const DriveEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.DriveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveEvent::IsInitialized() const {
  return true;
}

void DriveEvent::InternalSwap(DriveEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.type_.InternalSwap(&other->_impl_.type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_, lhs_arena,
      &other->_impl_.event_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DriveEvent, _impl_.is_reportable_)
      + sizeof(DriveEvent::_impl_.is_reportable_)
      - PROTOBUF_FIELD_OFFSET(DriveEvent, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::DriveEvent*
Arena::CreateMaybeMessage< ::apollo::common::DriveEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::DriveEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
