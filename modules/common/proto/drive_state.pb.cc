// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/drive_state.proto

#include "modules/common/proto/drive_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
PROTOBUF_CONSTEXPR EngageAdvice::EngageAdvice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.advice_)*/1} {}
struct EngageAdviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngageAdviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngageAdviceDefaultTypeInternal() {}
  union {
    EngageAdvice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngageAdviceDefaultTypeInternal _EngageAdvice_default_instance_;
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::EngageAdvice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::EngageAdvice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::EngageAdvice, _impl_.advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::EngageAdvice, _impl_.reason_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::common::EngageAdvice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::_EngageAdvice_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/common/proto/drive_state.proto"
  "\022\rapollo.common\"\315\001\n\014EngageAdvice\022C\n\006advi"
  "ce\030\001 \001(\0162\".apollo.common.EngageAdvice.Ad"
  "vice:\017DISALLOW_ENGAGE\022\016\n\006reason\030\002 \001(\t\"h\n"
  "\006Advice\022\013\n\007UNKNOWN\020\000\022\023\n\017DISALLOW_ENGAGE\020"
  "\001\022\023\n\017READY_TO_ENGAGE\020\002\022\020\n\014KEEP_ENGAGED\020\003"
  "\022\025\n\021PREPARE_DISENGAGE\020\004"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto = {
    false, false, 263, descriptor_table_protodef_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
    "modules/common/proto/drive_state.proto",
    &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto, file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
    file_level_service_descriptors_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto(&descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto);
namespace apollo {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngageAdvice_Advice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto[0];
}
bool EngageAdvice_Advice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EngageAdvice_Advice EngageAdvice::UNKNOWN;
constexpr EngageAdvice_Advice EngageAdvice::DISALLOW_ENGAGE;
constexpr EngageAdvice_Advice EngageAdvice::READY_TO_ENGAGE;
constexpr EngageAdvice_Advice EngageAdvice::KEEP_ENGAGED;
constexpr EngageAdvice_Advice EngageAdvice::PREPARE_DISENGAGE;
constexpr EngageAdvice_Advice EngageAdvice::Advice_MIN;
constexpr EngageAdvice_Advice EngageAdvice::Advice_MAX;
constexpr int EngageAdvice::Advice_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EngageAdvice::_Internal {
 public:
  using HasBits = decltype(std::declval<EngageAdvice>()._impl_._has_bits_);
  static void set_has_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EngageAdvice::EngageAdvice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.EngageAdvice)
}
EngageAdvice::EngageAdvice(const EngageAdvice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.advice_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _impl_.reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  _impl_.advice_ = from._impl_.advice_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.EngageAdvice)
}

inline void EngageAdvice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.advice_){1}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EngageAdvice::~EngageAdvice() {
  // @@protoc_insertion_point(destructor:apollo.common.EngageAdvice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngageAdvice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void EngageAdvice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngageAdvice::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.EngageAdvice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    _impl_.advice_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngageAdvice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::EngageAdvice_Advice_IsValid(val))) {
            _internal_set_advice(static_cast<::apollo::common::EngageAdvice_Advice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.EngageAdvice.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngageAdvice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.EngageAdvice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_advice(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.EngageAdvice.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.EngageAdvice)
  return target;
}

size_t EngageAdvice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.EngageAdvice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_advice());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngageAdvice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EngageAdvice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngageAdvice::GetClassData() const { return &_class_data_; }

void EngageAdvice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EngageAdvice *>(to)->MergeFrom(
      static_cast<const EngageAdvice &>(from));
}


void EngageAdvice::MergeFrom(const EngageAdvice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.EngageAdvice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.advice_ = from._impl_.advice_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngageAdvice::CopyFrom(const EngageAdvice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.EngageAdvice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngageAdvice::IsInitialized() const {
  return true;
}

void EngageAdvice::InternalSwap(EngageAdvice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.advice_, other->_impl_.advice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngageAdvice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::EngageAdvice*
Arena::CreateMaybeMessage< ::apollo::common::EngageAdvice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::EngageAdvice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
