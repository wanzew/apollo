// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/drive_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/localization/proto/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto;
namespace apollo {
namespace common {
class DriveEvent;
struct DriveEventDefaultTypeInternal;
extern DriveEventDefaultTypeInternal _DriveEvent_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::DriveEvent* Arena::CreateMaybeMessage<::apollo::common::DriveEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

enum DriveEvent_Type : int {
  DriveEvent_Type_CRITICAL = 0,
  DriveEvent_Type_PROBLEM = 1,
  DriveEvent_Type_DESIRED = 2,
  DriveEvent_Type_OUT_OF_SCOPE = 3
};
bool DriveEvent_Type_IsValid(int value);
constexpr DriveEvent_Type DriveEvent_Type_Type_MIN = DriveEvent_Type_CRITICAL;
constexpr DriveEvent_Type DriveEvent_Type_Type_MAX = DriveEvent_Type_OUT_OF_SCOPE;
constexpr int DriveEvent_Type_Type_ARRAYSIZE = DriveEvent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveEvent_Type_descriptor();
template<typename T>
inline const std::string& DriveEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DriveEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DriveEvent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DriveEvent_Type_descriptor(), enum_t_value);
}
inline bool DriveEvent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DriveEvent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DriveEvent_Type>(
    DriveEvent_Type_descriptor(), name, value);
}
// ===================================================================

class DriveEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.DriveEvent) */ {
 public:
  inline DriveEvent() : DriveEvent(nullptr) {}
  ~DriveEvent() override;
  explicit PROTOBUF_CONSTEXPR DriveEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DriveEvent(const DriveEvent& from);
  DriveEvent(DriveEvent&& from) noexcept
    : DriveEvent() {
    *this = ::std::move(from);
  }

  inline DriveEvent& operator=(const DriveEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriveEvent& operator=(DriveEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DriveEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DriveEvent* internal_default_instance() {
    return reinterpret_cast<const DriveEvent*>(
               &_DriveEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DriveEvent& a, DriveEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DriveEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DriveEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DriveEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DriveEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DriveEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DriveEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.DriveEvent";
  }
  protected:
  explicit DriveEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DriveEvent_Type Type;
  static constexpr Type CRITICAL =
    DriveEvent_Type_CRITICAL;
  static constexpr Type PROBLEM =
    DriveEvent_Type_PROBLEM;
  static constexpr Type DESIRED =
    DriveEvent_Type_DESIRED;
  static constexpr Type OUT_OF_SCOPE =
    DriveEvent_Type_OUT_OF_SCOPE;
  static inline bool Type_IsValid(int value) {
    return DriveEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DriveEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DriveEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DriveEvent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DriveEvent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DriveEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DriveEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 4,
    kEventFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kLocationFieldNumber = 3,
    kIsReportableFieldNumber = 5,
  };
  // repeated .apollo.common.DriveEvent.Type type = 4;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::apollo::common::DriveEvent_Type _internal_type(int index) const;
  void _internal_add_type(::apollo::common::DriveEvent_Type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::apollo::common::DriveEvent_Type type(int index) const;
  void set_type(int index, ::apollo::common::DriveEvent_Type value);
  void add_type(::apollo::common::DriveEvent_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // optional string event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const std::string& event() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event();
  PROTOBUF_NODISCARD std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.localization.Pose location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::apollo::localization::Pose& location() const;
  PROTOBUF_NODISCARD ::apollo::localization::Pose* release_location();
  ::apollo::localization::Pose* mutable_location();
  void set_allocated_location(::apollo::localization::Pose* location);
  private:
  const ::apollo::localization::Pose& _internal_location() const;
  ::apollo::localization::Pose* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::apollo::localization::Pose* location);
  ::apollo::localization::Pose* unsafe_arena_release_location();

  // optional bool is_reportable = 5;
  bool has_is_reportable() const;
  private:
  bool _internal_has_is_reportable() const;
  public:
  void clear_is_reportable();
  bool is_reportable() const;
  void set_is_reportable(bool value);
  private:
  bool _internal_is_reportable() const;
  void _internal_set_is_reportable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.DriveEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
    ::apollo::common::Header* header_;
    ::apollo::localization::Pose* location_;
    bool is_reportable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DriveEvent

// optional .apollo.common.Header header = 1;
inline bool DriveEvent::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool DriveEvent::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& DriveEvent::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& DriveEvent::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.header)
  return _internal_header();
}
inline void DriveEvent::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.DriveEvent.header)
}
inline ::apollo::common::Header* DriveEvent::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* DriveEvent::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* DriveEvent::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* DriveEvent::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.header)
  return _msg;
}
inline void DriveEvent::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.header)
}

// optional string event = 2;
inline bool DriveEvent::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DriveEvent::has_event() const {
  return _internal_has_event();
}
inline void DriveEvent::clear_event() {
  _impl_.event_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DriveEvent::event() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.event)
  return _internal_event();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DriveEvent::set_event(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.event_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.event)
}
inline std::string* DriveEvent::mutable_event() {
  std::string* _s = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.event)
  return _s;
}
inline const std::string& DriveEvent::_internal_event() const {
  return _impl_.event_.Get();
}
inline void DriveEvent::_internal_set_event(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_.Set(value, GetArenaForAllocation());
}
inline std::string* DriveEvent::_internal_mutable_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_.Mutable(GetArenaForAllocation());
}
inline std::string* DriveEvent::release_event() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.event)
  if (!_internal_has_event()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.event_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_.IsDefault()) {
    _impl_.event_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DriveEvent::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_.SetAllocated(event, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_.IsDefault()) {
    _impl_.event_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.event)
}

// optional .apollo.localization.Pose location = 3;
inline bool DriveEvent::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool DriveEvent::has_location() const {
  return _internal_has_location();
}
inline const ::apollo::localization::Pose& DriveEvent::_internal_location() const {
  const ::apollo::localization::Pose* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::localization::Pose&>(
      ::apollo::localization::_Pose_default_instance_);
}
inline const ::apollo::localization::Pose& DriveEvent::location() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.location)
  return _internal_location();
}
inline void DriveEvent::unsafe_arena_set_allocated_location(
    ::apollo::localization::Pose* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.DriveEvent.location)
}
inline ::apollo::localization::Pose* DriveEvent::release_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::localization::Pose* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::localization::Pose* DriveEvent::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:apollo.common.DriveEvent.location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::localization::Pose* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::apollo::localization::Pose* DriveEvent::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::localization::Pose>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::apollo::localization::Pose* DriveEvent::mutable_location() {
  ::apollo::localization::Pose* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:apollo.common.DriveEvent.location)
  return _msg;
}
inline void DriveEvent::set_allocated_location(::apollo::localization::Pose* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.DriveEvent.location)
}

// repeated .apollo.common.DriveEvent.Type type = 4;
inline int DriveEvent::_internal_type_size() const {
  return _impl_.type_.size();
}
inline int DriveEvent::type_size() const {
  return _internal_type_size();
}
inline void DriveEvent::clear_type() {
  _impl_.type_.Clear();
}
inline ::apollo::common::DriveEvent_Type DriveEvent::_internal_type(int index) const {
  return static_cast< ::apollo::common::DriveEvent_Type >(_impl_.type_.Get(index));
}
inline ::apollo::common::DriveEvent_Type DriveEvent::type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.type)
  return _internal_type(index);
}
inline void DriveEvent::set_type(int index, ::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  _impl_.type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.type)
}
inline void DriveEvent::_internal_add_type(::apollo::common::DriveEvent_Type value) {
  assert(::apollo::common::DriveEvent_Type_IsValid(value));
  _impl_.type_.Add(value);
}
inline void DriveEvent::add_type(::apollo::common::DriveEvent_Type value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:apollo.common.DriveEvent.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
DriveEvent::type() const {
  // @@protoc_insertion_point(field_list:apollo.common.DriveEvent.type)
  return _impl_.type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DriveEvent::_internal_mutable_type() {
  return &_impl_.type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
DriveEvent::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.DriveEvent.type)
  return _internal_mutable_type();
}

// optional bool is_reportable = 5;
inline bool DriveEvent::_internal_has_is_reportable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DriveEvent::has_is_reportable() const {
  return _internal_has_is_reportable();
}
inline void DriveEvent::clear_is_reportable() {
  _impl_.is_reportable_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool DriveEvent::_internal_is_reportable() const {
  return _impl_.is_reportable_;
}
inline bool DriveEvent::is_reportable() const {
  // @@protoc_insertion_point(field_get:apollo.common.DriveEvent.is_reportable)
  return _internal_is_reportable();
}
inline void DriveEvent::_internal_set_is_reportable(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_reportable_ = value;
}
inline void DriveEvent::set_is_reportable(bool value) {
  _internal_set_is_reportable(value);
  // @@protoc_insertion_point(field_set:apollo.common.DriveEvent.is_reportable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::common::DriveEvent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::DriveEvent_Type>() {
  return ::apollo::common::DriveEvent_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fdrive_5fevent_2eproto
