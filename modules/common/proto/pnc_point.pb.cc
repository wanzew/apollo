// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

#include "modules/common/proto/pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
PROTOBUF_CONSTEXPR SLPoint::SLPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.l_)*/0} {}
struct SLPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SLPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SLPointDefaultTypeInternal() {}
  union {
    SLPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SLPointDefaultTypeInternal _SLPoint_default_instance_;
PROTOBUF_CONSTEXPR FrenetFramePoint::FrenetFramePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.dl_)*/0
  , /*decltype(_impl_.ddl_)*/0} {}
struct FrenetFramePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrenetFramePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrenetFramePointDefaultTypeInternal() {}
  union {
    FrenetFramePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrenetFramePointDefaultTypeInternal _FrenetFramePoint_default_instance_;
PROTOBUF_CONSTEXPR SpeedPoint::SpeedPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.da_)*/0} {}
struct SpeedPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPointDefaultTypeInternal() {}
  union {
    SpeedPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
PROTOBUF_CONSTEXPR PathPoint::PathPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.kappa_)*/0
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.dkappa_)*/0
  , /*decltype(_impl_.ddkappa_)*/0
  , /*decltype(_impl_.x_derivative_)*/0
  , /*decltype(_impl_.y_derivative_)*/0} {}
struct PathPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPointDefaultTypeInternal() {}
  union {
    PathPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPointDefaultTypeInternal _PathPoint_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_point_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryPoint::TrajectoryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_point_)*/nullptr
  , /*decltype(_impl_.gaussian_info_)*/nullptr
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.relative_time_)*/0
  , /*decltype(_impl_.da_)*/0
  , /*decltype(_impl_.steer_)*/0} {}
struct TrajectoryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryPointDefaultTypeInternal() {}
  union {
    TrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
PROTOBUF_CONSTEXPR Trajectory::Trajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
PROTOBUF_CONSTEXPR VehicleMotionPoint::VehicleMotionPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/nullptr
  , /*decltype(_impl_.steer_)*/0} {}
struct VehicleMotionPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleMotionPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleMotionPointDefaultTypeInternal() {}
  union {
    VehicleMotionPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleMotionPointDefaultTypeInternal _VehicleMotionPoint_default_instance_;
PROTOBUF_CONSTEXPR VehicleMotion::VehicleMotion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_motion_point_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct VehicleMotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleMotionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleMotionDefaultTypeInternal() {}
  union {
    VehicleMotion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleMotionDefaultTypeInternal _VehicleMotion_default_instance_;
PROTOBUF_CONSTEXPR GaussianInfo::GaussianInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sigma_x_)*/0
  , /*decltype(_impl_.sigma_y_)*/0
  , /*decltype(_impl_.correlation_)*/0
  , /*decltype(_impl_.area_probability_)*/0
  , /*decltype(_impl_.ellipse_a_)*/0
  , /*decltype(_impl_.ellipse_b_)*/0
  , /*decltype(_impl_.theta_a_)*/0} {}
struct GaussianInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaussianInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaussianInfoDefaultTypeInternal() {}
  union {
    GaussianInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaussianInfoDefaultTypeInternal _GaussianInfo_default_instance_;
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::SLPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::SLPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SLPoint, _impl_.l_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _impl_.dl_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::FrenetFramePoint, _impl_.ddl_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::SpeedPoint, _impl_.da_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.ddkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.x_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _impl_.y_derivative_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::common::Path, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::Path, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Path, _impl_.path_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.da_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _impl_.gaussian_info_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::common::Trajectory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::Trajectory, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::Trajectory, _impl_.trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotionPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotionPoint, _impl_.trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotionPoint, _impl_.steer_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotion, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleMotion, _impl_.vehicle_motion_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.sigma_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.sigma_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.correlation_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.area_probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.ellipse_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.ellipse_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::GaussianInfo, _impl_.theta_a_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::common::SLPoint)},
  { 10, 20, -1, sizeof(::apollo::common::FrenetFramePoint)},
  { 24, 35, -1, sizeof(::apollo::common::SpeedPoint)},
  { 40, 57, -1, sizeof(::apollo::common::PathPoint)},
  { 68, 76, -1, sizeof(::apollo::common::Path)},
  { 78, 91, -1, sizeof(::apollo::common::TrajectoryPoint)},
  { 98, 106, -1, sizeof(::apollo::common::Trajectory)},
  { 108, 116, -1, sizeof(::apollo::common::VehicleMotionPoint)},
  { 118, 126, -1, sizeof(::apollo::common::VehicleMotion)},
  { 128, 141, -1, sizeof(::apollo::common::GaussianInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::_SLPoint_default_instance_._instance,
  &::apollo::common::_FrenetFramePoint_default_instance_._instance,
  &::apollo::common::_SpeedPoint_default_instance_._instance,
  &::apollo::common::_PathPoint_default_instance_._instance,
  &::apollo::common::_Path_default_instance_._instance,
  &::apollo::common::_TrajectoryPoint_default_instance_._instance,
  &::apollo::common::_Trajectory_default_instance_._instance,
  &::apollo::common::_VehicleMotionPoint_default_instance_._instance,
  &::apollo::common::_VehicleMotion_default_instance_._instance,
  &::apollo::common::_GaussianInfo_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/common/proto/pnc_point.proto\022\r"
  "apollo.common\"\037\n\007SLPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l"
  "\030\002 \001(\001\"A\n\020FrenetFramePoint\022\t\n\001s\030\001 \001(\001\022\t\n"
  "\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022\013\n\003ddl\030\004 \001(\001\"D\n\nSpe"
  "edPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001"
  "\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\"\263\001\n\tPathPoint\022\t\n"
  "\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005theta\030"
  "\004 \001(\001\022\r\n\005kappa\030\005 \001(\001\022\t\n\001s\030\006 \001(\001\022\016\n\006dkapp"
  "a\030\007 \001(\001\022\017\n\007ddkappa\030\010 \001(\001\022\017\n\007lane_id\030\t \001("
  "\t\022\024\n\014x_derivative\030\n \001(\001\022\024\n\014y_derivative\030"
  "\013 \001(\001\"B\n\004Path\022\014\n\004name\030\001 \001(\t\022,\n\npath_poin"
  "t\030\002 \003(\0132\030.apollo.common.PathPoint\"\273\001\n\017Tr"
  "ajectoryPoint\022,\n\npath_point\030\001 \001(\0132\030.apol"
  "lo.common.PathPoint\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001("
  "\001\022\025\n\rrelative_time\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\022\r\n\005"
  "steer\030\006 \001(\001\0222\n\rgaussian_info\030\007 \001(\0132\033.apo"
  "llo.common.GaussianInfo\"T\n\nTrajectory\022\014\n"
  "\004name\030\001 \001(\t\0228\n\020trajectory_point\030\002 \003(\0132\036."
  "apollo.common.TrajectoryPoint\"]\n\022Vehicle"
  "MotionPoint\0228\n\020trajectory_point\030\001 \001(\0132\036."
  "apollo.common.TrajectoryPoint\022\r\n\005steer\030\002"
  " \001(\001\"^\n\rVehicleMotion\022\014\n\004name\030\001 \001(\t\022\?\n\024v"
  "ehicle_motion_point\030\002 \003(\0132!.apollo.commo"
  "n.VehicleMotionPoint\"\226\001\n\014GaussianInfo\022\017\n"
  "\007sigma_x\030\001 \001(\001\022\017\n\007sigma_y\030\002 \001(\001\022\023\n\013corre"
  "lation\030\003 \001(\001\022\030\n\020area_probability\030\004 \001(\001\022\021"
  "\n\tellipse_a\030\005 \001(\001\022\021\n\tellipse_b\030\006 \001(\001\022\017\n\007"
  "theta_a\030\007 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = {
    false, false, 1093, descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
    "modules/common/proto/pnc_point.proto",
    &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
    file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto(&descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
namespace apollo {
namespace common {

// ===================================================================

class SLPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SLPoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SLPoint::SLPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.SLPoint)
}
SLPoint::SLPoint(const SLPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.l_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.l_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.SLPoint)
}

inline void SLPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.l_){0}
  };
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SLPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SLPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SLPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.l_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.l_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SLPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SLPoint)
  return target;
}

size_t SLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SLPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLPoint::GetClassData() const { return &_class_data_; }

void SLPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLPoint *>(to)->MergeFrom(
      static_cast<const SLPoint &>(from));
}


void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.l_ = from._impl_.l_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {
  return true;
}

void SLPoint::InternalSwap(SLPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPoint, _impl_.l_)
      + sizeof(SLPoint::_impl_.l_)
      - PROTOBUF_FIELD_OFFSET(SLPoint, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[0]);
}

// ===================================================================

class FrenetFramePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<FrenetFramePoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FrenetFramePoint::FrenetFramePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.FrenetFramePoint)
}
FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.l_){}
    , decltype(_impl_.dl_){}
    , decltype(_impl_.ddl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ddl_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.ddl_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.FrenetFramePoint)
}

inline void FrenetFramePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.dl_){0}
    , decltype(_impl_.ddl_){0}
  };
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:apollo.common.FrenetFramePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrenetFramePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrenetFramePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrenetFramePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.FrenetFramePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ddl_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.ddl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrenetFramePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dl(&has_bits);
          _impl_.dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ddl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_ddl(&has_bits);
          _impl_.ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrenetFramePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.FrenetFramePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dl(), target);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ddl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.FrenetFramePoint)
  return target;
}

size_t FrenetFramePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.FrenetFramePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrenetFramePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrenetFramePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrenetFramePoint::GetClassData() const { return &_class_data_; }

void FrenetFramePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FrenetFramePoint *>(to)->MergeFrom(
      static_cast<const FrenetFramePoint &>(from));
}


void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.l_ = from._impl_.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dl_ = from._impl_.dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ddl_ = from._impl_.ddl_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {
  return true;
}

void FrenetFramePoint::InternalSwap(FrenetFramePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrenetFramePoint, _impl_.ddl_)
      + sizeof(FrenetFramePoint::_impl_.ddl_)
      - PROTOBUF_FIELD_OFFSET(FrenetFramePoint, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrenetFramePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[1]);
}

// ===================================================================

class SpeedPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_da(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SpeedPoint::SpeedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.da_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.da_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.da_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.SpeedPoint)
}

inline void SpeedPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.da_){0}
  };
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SpeedPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SpeedPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.da_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.da_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_da(&has_bits);
          _impl_.da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SpeedPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SpeedPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPoint::GetClassData() const { return &_class_data_; }

void SpeedPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPoint *>(to)->MergeFrom(
      static_cast<const SpeedPoint &>(from));
}


void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.v_ = from._impl_.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.da_ = from._impl_.da_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::InternalSwap(SpeedPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPoint, _impl_.da_)
      + sizeof(SpeedPoint::_impl_.da_)
      - PROTOBUF_FIELD_OFFSET(SpeedPoint, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[2]);
}

// ===================================================================

class PathPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPoint>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ddkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

PathPoint::PathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.kappa_){}
    , decltype(_impl_.s_){}
    , decltype(_impl_.dkappa_){}
    , decltype(_impl_.ddkappa_){}
    , decltype(_impl_.x_derivative_){}
    , decltype(_impl_.y_derivative_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_derivative_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_derivative_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.PathPoint)
}

inline void PathPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.kappa_){0}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.dkappa_){0}
    , decltype(_impl_.ddkappa_){0}
    , decltype(_impl_.x_derivative_){0}
    , decltype(_impl_.y_derivative_){0}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.PathPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.Destroy();
}

void PathPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PathPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dkappa_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.dkappa_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.ddkappa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_derivative_) -
        reinterpret_cast<char*>(&_impl_.ddkappa_)) + sizeof(_impl_.y_derivative_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_kappa(&has_bits);
          _impl_.kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dkappa = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_dkappa(&has_bits);
          _impl_.dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ddkappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_ddkappa(&has_bits);
          _impl_.ddkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.PathPoint.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double x_derivative = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_x_derivative(&has_bits);
          _impl_.x_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y_derivative = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_y_derivative(&has_bits);
          _impl_.y_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PathPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_kappa(), target);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_s(), target);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_y_derivative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PathPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lane_id = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double ddkappa = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double x_derivative = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPoint::GetClassData() const { return &_class_data_; }

void PathPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathPoint *>(to)->MergeFrom(
      static_cast<const PathPoint &>(from));
}


void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.kappa_ = from._impl_.kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.dkappa_ = from._impl_.dkappa_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.ddkappa_ = from._impl_.ddkappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.x_derivative_ = from._impl_.x_derivative_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.y_derivative_ = from._impl_.y_derivative_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPoint, _impl_.y_derivative_)
      + sizeof(PathPoint::_impl_.y_derivative_)
      - PROTOBUF_FIELD_OFFSET(PathPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[3]);
}

// ===================================================================

class Path::_Internal {
 public:
  using HasBits = decltype(std::declval<Path>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){from._impl_.path_point_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Path)
}

inline void Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:apollo.common.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_point_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.Path.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.PathPoint path_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.Path.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_path_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.PathPoint path_point = 2;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->_impl_.path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.path_point_.MergeFrom(from._impl_.path_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.path_point_.InternalSwap(&other->_impl_.path_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[4]);
}

// ===================================================================

class TrajectoryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPoint>()._impl_._has_bits_);
  static const ::apollo::common::PathPoint& path_point(const TrajectoryPoint* msg);
  static void set_has_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_da(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::GaussianInfo& gaussian_info(const TrajectoryPoint* msg);
  static void set_has_gaussian_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PathPoint&
TrajectoryPoint::_Internal::path_point(const TrajectoryPoint* msg) {
  return *msg->_impl_.path_point_;
}
const ::apollo::common::GaussianInfo&
TrajectoryPoint::_Internal::gaussian_info(const TrajectoryPoint* msg) {
  return *msg->_impl_.gaussian_info_;
}
TrajectoryPoint::TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){nullptr}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.v_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.relative_time_){}
    , decltype(_impl_.da_){}
    , decltype(_impl_.steer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    _impl_.path_point_ = new ::apollo::common::PathPoint(*from._impl_.path_point_);
  }
  if (from._internal_has_gaussian_info()) {
    _impl_.gaussian_info_ = new ::apollo::common::GaussianInfo(*from._impl_.gaussian_info_);
  }
  ::memcpy(&_impl_.v_, &from._impl_.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steer_) -
    reinterpret_cast<char*>(&_impl_.v_)) + sizeof(_impl_.steer_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.TrajectoryPoint)
}

inline void TrajectoryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){nullptr}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.relative_time_){0}
    , decltype(_impl_.da_){0}
    , decltype(_impl_.steer_){0}
  };
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.TrajectoryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_point_;
  if (this != internal_default_instance()) delete _impl_.gaussian_info_;
}

void TrajectoryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.TrajectoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_point_ != nullptr);
      _impl_.path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gaussian_info_ != nullptr);
      _impl_.gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steer_) -
        reinterpret_cast<char*>(&_impl_.v_)) + sizeof(_impl_.steer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_v(&has_bits);
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_relative_time(&has_bits);
          _impl_.relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_da(&has_bits);
          _impl_.da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_steer(&has_bits);
          _impl_.steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.GaussianInfo gaussian_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.TrajectoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_point(this),
        _Internal::path_point(this).GetCachedSize(), target, stream);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_time(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_steer(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::gaussian_info(this),
        _Internal::gaussian_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.TrajectoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.common.PathPoint path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_point_);
    }

    // optional .apollo.common.GaussianInfo gaussian_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gaussian_info_);
    }

    // optional double v = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPoint::GetClassData() const { return &_class_data_; }

void TrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPoint *>(to)->MergeFrom(
      static_cast<const TrajectoryPoint &>(from));
}


void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_point()->::apollo::common::PathPoint::MergeFrom(from._internal_path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from._internal_gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.v_ = from._impl_.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.relative_time_ = from._impl_.relative_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.da_ = from._impl_.da_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.steer_ = from._impl_.steer_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPoint, _impl_.steer_)
      + sizeof(TrajectoryPoint::_impl_.steer_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPoint, _impl_.path_point_)>(
          reinterpret_cast<char*>(&_impl_.path_point_),
          reinterpret_cast<char*>(&other->_impl_.path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[5]);
}

// ===================================================================

class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){from._impl_.trajectory_point_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Trajectory)
}

inline void Trajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.common.Trajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_point_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Trajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Trajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.Trajectory.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Trajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.Trajectory.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Trajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->_impl_.trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory::GetClassData() const { return &_class_data_; }

void Trajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trajectory *>(to)->MergeFrom(
      static_cast<const Trajectory &>(from));
}


void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_point_.MergeFrom(from._impl_.trajectory_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[6]);
}

// ===================================================================

class VehicleMotionPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleMotionPoint>()._impl_._has_bits_);
  static const ::apollo::common::TrajectoryPoint& trajectory_point(const VehicleMotionPoint* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::TrajectoryPoint&
VehicleMotionPoint::_Internal::trajectory_point(const VehicleMotionPoint* msg) {
  return *msg->_impl_.trajectory_point_;
}
VehicleMotionPoint::VehicleMotionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.VehicleMotionPoint)
}
VehicleMotionPoint::VehicleMotionPoint(const VehicleMotionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.steer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trajectory_point()) {
    _impl_.trajectory_point_ = new ::apollo::common::TrajectoryPoint(*from._impl_.trajectory_point_);
  }
  _impl_.steer_ = from._impl_.steer_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotionPoint)
}

inline void VehicleMotionPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.steer_){0}
  };
}

VehicleMotionPoint::~VehicleMotionPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotionPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleMotionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trajectory_point_;
}

void VehicleMotionPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleMotionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleMotionPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.trajectory_point_ != nullptr);
    _impl_.trajectory_point_->Clear();
  }
  _impl_.steer_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotionPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steer(&has_bits);
          _impl_.steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleMotionPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotionPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trajectory_point(this),
        _Internal::trajectory_point(this).GetCachedSize(), target, stream);
  }

  // optional double steer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotionPoint)
  return target;
}

size_t VehicleMotionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleMotionPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trajectory_point_);
    }

    // optional double steer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleMotionPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleMotionPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleMotionPoint::GetClassData() const { return &_class_data_; }

void VehicleMotionPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleMotionPoint *>(to)->MergeFrom(
      static_cast<const VehicleMotionPoint &>(from));
}


void VehicleMotionPoint::MergeFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trajectory_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steer_ = from._impl_.steer_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleMotionPoint::CopyFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotionPoint::IsInitialized() const {
  return true;
}

void VehicleMotionPoint::InternalSwap(VehicleMotionPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, _impl_.steer_)
      + sizeof(VehicleMotionPoint::_impl_.steer_)
      - PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, _impl_.trajectory_point_)>(
          reinterpret_cast<char*>(&_impl_.trajectory_point_),
          reinterpret_cast<char*>(&other->_impl_.trajectory_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotionPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[7]);
}

// ===================================================================

class VehicleMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleMotion>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VehicleMotion::VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.VehicleMotion)
}
VehicleMotion::VehicleMotion(const VehicleMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_motion_point_){from._impl_.vehicle_motion_point_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotion)
}

inline void VehicleMotion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_motion_point_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleMotion::~VehicleMotion() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vehicle_motion_point_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void VehicleMotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleMotion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicle_motion_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.VehicleMotion.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_motion_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleMotion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleMotion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vehicle_motion_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_vehicle_motion_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotion)
  return target;
}

size_t VehicleMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleMotion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  total_size += 1UL * this->_internal_vehicle_motion_point_size();
  for (const auto& msg : this->_impl_.vehicle_motion_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleMotion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleMotion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleMotion::GetClassData() const { return &_class_data_; }

void VehicleMotion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleMotion *>(to)->MergeFrom(
      static_cast<const VehicleMotion &>(from));
}


void VehicleMotion::MergeFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.vehicle_motion_point_.MergeFrom(from._impl_.vehicle_motion_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleMotion::CopyFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotion::IsInitialized() const {
  return true;
}

void VehicleMotion::InternalSwap(VehicleMotion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vehicle_motion_point_.InternalSwap(&other->_impl_.vehicle_motion_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[8]);
}

// ===================================================================

class GaussianInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GaussianInfo>()._impl_._has_bits_);
  static void set_has_sigma_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sigma_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correlation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_area_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ellipse_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ellipse_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_theta_a(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GaussianInfo::GaussianInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.GaussianInfo)
}
GaussianInfo::GaussianInfo(const GaussianInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sigma_x_){}
    , decltype(_impl_.sigma_y_){}
    , decltype(_impl_.correlation_){}
    , decltype(_impl_.area_probability_){}
    , decltype(_impl_.ellipse_a_){}
    , decltype(_impl_.ellipse_b_){}
    , decltype(_impl_.theta_a_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sigma_x_, &from._impl_.sigma_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_a_) -
    reinterpret_cast<char*>(&_impl_.sigma_x_)) + sizeof(_impl_.theta_a_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.GaussianInfo)
}

inline void GaussianInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sigma_x_){0}
    , decltype(_impl_.sigma_y_){0}
    , decltype(_impl_.correlation_){0}
    , decltype(_impl_.area_probability_){0}
    , decltype(_impl_.ellipse_a_){0}
    , decltype(_impl_.ellipse_b_){0}
    , decltype(_impl_.theta_a_){0}
  };
}

GaussianInfo::~GaussianInfo() {
  // @@protoc_insertion_point(destructor:apollo.common.GaussianInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GaussianInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GaussianInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GaussianInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.GaussianInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.sigma_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theta_a_) -
        reinterpret_cast<char*>(&_impl_.sigma_x_)) + sizeof(_impl_.theta_a_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaussianInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double sigma_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_sigma_x(&has_bits);
          _impl_.sigma_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sigma_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sigma_y(&has_bits);
          _impl_.sigma_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double correlation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_correlation(&has_bits);
          _impl_.correlation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double area_probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_area_probability(&has_bits);
          _impl_.area_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ellipse_a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_ellipse_a(&has_bits);
          _impl_.ellipse_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ellipse_b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_ellipse_b(&has_bits);
          _impl_.ellipse_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta_a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_theta_a(&has_bits);
          _impl_.theta_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GaussianInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.GaussianInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma_x(), target);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_sigma_y(), target);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_correlation(), target);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_area_probability(), target);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_ellipse_a(), target);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_ellipse_b(), target);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_theta_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.GaussianInfo)
  return target;
}

size_t GaussianInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.GaussianInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double sigma_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double sigma_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double correlation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double area_probability = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ellipse_a = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ellipse_b = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double theta_a = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GaussianInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GaussianInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GaussianInfo::GetClassData() const { return &_class_data_; }

void GaussianInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GaussianInfo *>(to)->MergeFrom(
      static_cast<const GaussianInfo &>(from));
}


void GaussianInfo::MergeFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sigma_x_ = from._impl_.sigma_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sigma_y_ = from._impl_.sigma_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.correlation_ = from._impl_.correlation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.area_probability_ = from._impl_.area_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ellipse_a_ = from._impl_.ellipse_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ellipse_b_ = from._impl_.ellipse_b_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.theta_a_ = from._impl_.theta_a_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GaussianInfo::CopyFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianInfo::IsInitialized() const {
  return true;
}

void GaussianInfo::InternalSwap(GaussianInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaussianInfo, _impl_.theta_a_)
      + sizeof(GaussianInfo::_impl_.theta_a_)
      - PROTOBUF_FIELD_OFFSET(GaussianInfo, _impl_.sigma_x_)>(
          reinterpret_cast<char*>(&_impl_.sigma_x_),
          reinterpret_cast<char*>(&other->_impl_.sigma_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GaussianInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_getter, &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once,
      file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::SLPoint*
Arena::CreateMaybeMessage< ::apollo::common::SLPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::SLPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::FrenetFramePoint*
Arena::CreateMaybeMessage< ::apollo::common::FrenetFramePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::FrenetFramePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::SpeedPoint*
Arena::CreateMaybeMessage< ::apollo::common::SpeedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::SpeedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::PathPoint*
Arena::CreateMaybeMessage< ::apollo::common::PathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::PathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::Path*
Arena::CreateMaybeMessage< ::apollo::common::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::TrajectoryPoint*
Arena::CreateMaybeMessage< ::apollo::common::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::Trajectory*
Arena::CreateMaybeMessage< ::apollo::common::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::VehicleMotionPoint*
Arena::CreateMaybeMessage< ::apollo::common::VehicleMotionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::VehicleMotionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::VehicleMotion*
Arena::CreateMaybeMessage< ::apollo::common::VehicleMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::VehicleMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::GaussianInfo*
Arena::CreateMaybeMessage< ::apollo::common::GaussianInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::GaussianInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
