// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/adapters/proto/adapter_config.proto

#include "modules/common/adapters/proto/adapter_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace common {
namespace adapter {
PROTOBUF_CONSTEXPR AdapterConfig::AdapterConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.latch_)*/false
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.message_history_limit_)*/10} {}
struct AdapterConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdapterConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdapterConfigDefaultTypeInternal() {}
  union {
    AdapterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdapterConfigDefaultTypeInternal _AdapterConfig_default_instance_;
PROTOBUF_CONSTEXPR AdapterManagerConfig::AdapterManagerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_.is_ros_)*/false} {}
struct AdapterManagerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdapterManagerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdapterManagerConfigDefaultTypeInternal() {}
  union {
    AdapterManagerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdapterManagerConfigDefaultTypeInternal _AdapterManagerConfig_default_instance_;
}  // namespace adapter
}  // namespace common
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_.message_history_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_.latch_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterConfig, _impl_.topic_),
  3,
  1,
  4,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterManagerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterManagerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterManagerConfig, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::adapter::AdapterManagerConfig, _impl_.is_ros_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::common::adapter::AdapterConfig)},
  { 16, 24, -1, sizeof(::apollo::common::adapter::AdapterManagerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::common::adapter::_AdapterConfig_default_instance_._instance,
  &::apollo::common::adapter::_AdapterManagerConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/common/adapters/proto/adapter_"
  "config.proto\022\025apollo.common.adapter\"\261\016\n\r"
  "AdapterConfig\022>\n\004type\030\001 \001(\01620.apollo.com"
  "mon.adapter.AdapterConfig.MessageType\0227\n"
  "\004mode\030\002 \001(\0162).apollo.common.adapter.Adap"
  "terConfig.Mode\022!\n\025message_history_limit\030"
  "\003 \001(\005:\00210\022\024\n\005latch\030\004 \001(\010:\005false\022\r\n\005topic"
  "\030\005 \001(\t\"\246\014\n\013MessageType\022\017\n\013POINT_CLOUD\020\001\022"
  "\025\n\021VLP16_POINT_CLOUD\020:\022\007\n\003GPS\020\002\022\007\n\003IMU\020\003"
  "\022\013\n\007CHASSIS\020\004\022\020\n\014LOCALIZATION\020\005\022\027\n\023PLANN"
  "ING_TRAJECTORY\020\006\022\013\n\007MONITOR\020\007\022\007\n\003PAD\020\010\022\023"
  "\n\017CONTROL_COMMAND\020\t\022\016\n\nPREDICTION\020\n\022\030\n\024P"
  "ERCEPTION_OBSTACLES\020\013\022\033\n\027TRAFFIC_LIGHT_D"
  "ETECTION\020\014\022\022\n\016CHASSIS_DETAIL\020\r\022\020\n\010DECISI"
  "ON\020\016\032\002\010\001\022\n\n\006CANBUS\020\017\022\023\n\017ROUTING_REQUEST\020"
  "\020\022\024\n\020ROUTING_RESPONSE\020\021\022\025\n\021RELATIVE_ODOM"
  "ETRY\020\022\022\014\n\010INS_STAT\020\023\022\023\n\013HMI_COMMAND\020\024\032\002\010"
  "\001\022\014\n\010MOBILEYE\020\025\022\r\n\tDELPHIESR\020\026\022\024\n\020COMPRE"
  "SSED_IMAGE\020\027\022\021\n\rSYSTEM_STATUS\020\030\022\016\n\nINS_S"
  "TATUS\020\031\022\017\n\013GNSS_STATUS\020\032\022\017\n\013CONTI_RADAR\020"
  "\033\022\017\n\013IMAGE_SHORT\020\034\022\016\n\nIMAGE_LONG\020\035\022\017\n\013DR"
  "IVE_EVENT\020\036\022\020\n\014GNSS_RTK_OBS\020\037\022\020\n\014GNSS_RT"
  "K_EPH\020 \022\022\n\016GNSS_BEST_POSE\020!\022\031\n\025LOCALIZAT"
  "ION_MSF_GNSS\020\"\022\032\n\026LOCALIZATION_MSF_LIDAR"
  "\020#\022\035\n\031LOCALIZATION_MSF_SINS_PVA\020$\022\013\n\007RAW"
  "_IMU\020%\022\033\n\027LOCALIZATION_MSF_STATUS\020&\022\017\n\013S"
  "TATIC_INFO\020\'\022\020\n\014RELATIVE_MAP\020(\022\016\n\nNAVIGA"
  "TION\020)\022\024\n\020ULTRASONIC_RADAR\020*\022\021\n\rAUDIO_CA"
  "PTURE\020+\022\017\n\013IMAGE_FRONT\020-\022\027\n\023PANDORA_POIN"
  "T_CLOUD\020.\022\036\n\032PANDORA_CAMERA_FRONT_COLOR\020"
  "/\022\035\n\031PANDORA_CAMERA_RIGHT_GRAY\0200\022\034\n\030PAND"
  "ORA_CAMERA_LEFT_GRAY\0201\022\035\n\031PANDORA_CAMERA"
  "_FRONT_GRAY\0202\022\034\n\030PANDORA_CAMERA_BACK_GRA"
  "Y\0203\022\030\n\024PERCEPTION_LANE_MASK\0204\022\014\n\010GUARDIA"
  "N\0205\022\021\n\rGNSS_RAW_DATA\0206\022\021\n\rSTREAM_STATUS\020"
  "7\022\020\n\014GNSS_HEADING\0208\022\r\n\tRTCM_DATA\0209\022\021\n\rRA"
  "COBIT_RADAR\020;\022\025\n\021POINT_CLOUD_DENSE\020<\022\031\n\025"
  "POINT_CLOUD_DENSE_RAW\020=\022\027\n\023VELODYNE_SCAN"
  "_DENSE\020>\022\030\n\024POINT_CLOUD_SPARSE_1\020\?\022\034\n\030PO"
  "INT_CLOUD_SPARSE_RAW_1\020@\022\032\n\026VELODYNE_SCA"
  "N_SPARSE_1\020A\022\030\n\024POINT_CLOUD_SPARSE_2\020B\022\034"
  "\n\030POINT_CLOUD_SPARSE_RAW_2\020C\022\032\n\026VELODYNE"
  "_SCAN_SPARSE_2\020D\022\030\n\024POINT_CLOUD_SPARSE_3"
  "\020E\022\034\n\030POINT_CLOUD_SPARSE_RAW_3\020F\022\032\n\026VELO"
  "DYNE_SCAN_SPARSE_3\020G\022\025\n\021CAMERA_IMAGE_LON"
  "G\020H\022\026\n\022CAMERA_IMAGE_SHORT\020I\022\020\n\014PLANNING_"
  "PAD\020J\022\020\n\014STORYTELLING\020K\"6\n\004Mode\022\020\n\014RECEI"
  "VE_ONLY\020\000\022\020\n\014PUBLISH_ONLY\020\001\022\n\n\006DUPLEX\020\002\""
  "\\\n\024AdapterManagerConfig\0224\n\006config\030\001 \003(\0132"
  "$.apollo.common.adapter.AdapterConfig\022\016\n"
  "\006is_ros\030\002 \001(\010"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto = {
    false, false, 2013, descriptor_table_protodef_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto,
    "modules/common/adapters/proto/adapter_config.proto",
    &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto, file_level_enum_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto(&descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto);
namespace apollo {
namespace common {
namespace adapter {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdapterConfig_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[0];
}
bool AdapterConfig_MessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD;
constexpr AdapterConfig_MessageType AdapterConfig::VLP16_POINT_CLOUD;
constexpr AdapterConfig_MessageType AdapterConfig::GPS;
constexpr AdapterConfig_MessageType AdapterConfig::IMU;
constexpr AdapterConfig_MessageType AdapterConfig::CHASSIS;
constexpr AdapterConfig_MessageType AdapterConfig::LOCALIZATION;
constexpr AdapterConfig_MessageType AdapterConfig::PLANNING_TRAJECTORY;
constexpr AdapterConfig_MessageType AdapterConfig::MONITOR;
constexpr AdapterConfig_MessageType AdapterConfig::PAD;
constexpr AdapterConfig_MessageType AdapterConfig::CONTROL_COMMAND;
constexpr AdapterConfig_MessageType AdapterConfig::PREDICTION;
constexpr AdapterConfig_MessageType AdapterConfig::PERCEPTION_OBSTACLES;
constexpr AdapterConfig_MessageType AdapterConfig::TRAFFIC_LIGHT_DETECTION;
constexpr AdapterConfig_MessageType AdapterConfig::CHASSIS_DETAIL;
constexpr AdapterConfig_MessageType AdapterConfig::DECISION;
constexpr AdapterConfig_MessageType AdapterConfig::CANBUS;
constexpr AdapterConfig_MessageType AdapterConfig::ROUTING_REQUEST;
constexpr AdapterConfig_MessageType AdapterConfig::ROUTING_RESPONSE;
constexpr AdapterConfig_MessageType AdapterConfig::RELATIVE_ODOMETRY;
constexpr AdapterConfig_MessageType AdapterConfig::INS_STAT;
constexpr AdapterConfig_MessageType AdapterConfig::HMI_COMMAND;
constexpr AdapterConfig_MessageType AdapterConfig::MOBILEYE;
constexpr AdapterConfig_MessageType AdapterConfig::DELPHIESR;
constexpr AdapterConfig_MessageType AdapterConfig::COMPRESSED_IMAGE;
constexpr AdapterConfig_MessageType AdapterConfig::SYSTEM_STATUS;
constexpr AdapterConfig_MessageType AdapterConfig::INS_STATUS;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_STATUS;
constexpr AdapterConfig_MessageType AdapterConfig::CONTI_RADAR;
constexpr AdapterConfig_MessageType AdapterConfig::IMAGE_SHORT;
constexpr AdapterConfig_MessageType AdapterConfig::IMAGE_LONG;
constexpr AdapterConfig_MessageType AdapterConfig::DRIVE_EVENT;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_RTK_OBS;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_RTK_EPH;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_BEST_POSE;
constexpr AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_GNSS;
constexpr AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_LIDAR;
constexpr AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_SINS_PVA;
constexpr AdapterConfig_MessageType AdapterConfig::RAW_IMU;
constexpr AdapterConfig_MessageType AdapterConfig::LOCALIZATION_MSF_STATUS;
constexpr AdapterConfig_MessageType AdapterConfig::STATIC_INFO;
constexpr AdapterConfig_MessageType AdapterConfig::RELATIVE_MAP;
constexpr AdapterConfig_MessageType AdapterConfig::NAVIGATION;
constexpr AdapterConfig_MessageType AdapterConfig::ULTRASONIC_RADAR;
constexpr AdapterConfig_MessageType AdapterConfig::AUDIO_CAPTURE;
constexpr AdapterConfig_MessageType AdapterConfig::IMAGE_FRONT;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_POINT_CLOUD;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_FRONT_COLOR;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_RIGHT_GRAY;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_LEFT_GRAY;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_FRONT_GRAY;
constexpr AdapterConfig_MessageType AdapterConfig::PANDORA_CAMERA_BACK_GRAY;
constexpr AdapterConfig_MessageType AdapterConfig::PERCEPTION_LANE_MASK;
constexpr AdapterConfig_MessageType AdapterConfig::GUARDIAN;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_RAW_DATA;
constexpr AdapterConfig_MessageType AdapterConfig::STREAM_STATUS;
constexpr AdapterConfig_MessageType AdapterConfig::GNSS_HEADING;
constexpr AdapterConfig_MessageType AdapterConfig::RTCM_DATA;
constexpr AdapterConfig_MessageType AdapterConfig::RACOBIT_RADAR;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_DENSE;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_DENSE_RAW;
constexpr AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_DENSE;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_1;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_1;
constexpr AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_1;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_2;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_2;
constexpr AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_2;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_3;
constexpr AdapterConfig_MessageType AdapterConfig::POINT_CLOUD_SPARSE_RAW_3;
constexpr AdapterConfig_MessageType AdapterConfig::VELODYNE_SCAN_SPARSE_3;
constexpr AdapterConfig_MessageType AdapterConfig::CAMERA_IMAGE_LONG;
constexpr AdapterConfig_MessageType AdapterConfig::CAMERA_IMAGE_SHORT;
constexpr AdapterConfig_MessageType AdapterConfig::PLANNING_PAD;
constexpr AdapterConfig_MessageType AdapterConfig::STORYTELLING;
constexpr AdapterConfig_MessageType AdapterConfig::MessageType_MIN;
constexpr AdapterConfig_MessageType AdapterConfig::MessageType_MAX;
constexpr int AdapterConfig::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdapterConfig_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[1];
}
bool AdapterConfig_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdapterConfig_Mode AdapterConfig::RECEIVE_ONLY;
constexpr AdapterConfig_Mode AdapterConfig::PUBLISH_ONLY;
constexpr AdapterConfig_Mode AdapterConfig::DUPLEX;
constexpr AdapterConfig_Mode AdapterConfig::Mode_MIN;
constexpr AdapterConfig_Mode AdapterConfig::Mode_MAX;
constexpr int AdapterConfig::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AdapterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AdapterConfig>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_history_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdapterConfig::AdapterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.adapter.AdapterConfig)
}
AdapterConfig::AdapterConfig(const AdapterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.latch_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.message_history_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _impl_.topic_.Set(from._internal_topic(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_history_limit_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.message_history_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.adapter.AdapterConfig)
}

inline void AdapterConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.latch_){false}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.message_history_limit_){10}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdapterConfig::~AdapterConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.adapter.AdapterConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdapterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
}

void AdapterConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdapterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.adapter.AdapterConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latch_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.latch_));
    _impl_.type_ = 1;
    _impl_.message_history_limit_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdapterConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::common::adapter::AdapterConfig_MessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.adapter.AdapterConfig.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::adapter::AdapterConfig_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::apollo::common::adapter::AdapterConfig_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 message_history_limit = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_message_history_limit(&has_bits);
          _impl_.message_history_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool latch = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_latch(&has_bits);
          _impl_.latch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string topic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.common.adapter.AdapterConfig.topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdapterConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.adapter.AdapterConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .apollo.common.adapter.AdapterConfig.Mode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_message_history_limit(), target);
  }

  // optional bool latch = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_latch(), target);
  }

  // optional string topic = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.adapter.AdapterConfig.topic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.adapter.AdapterConfig)
  return target;
}

size_t AdapterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.adapter.AdapterConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string topic = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional .apollo.common.adapter.AdapterConfig.Mode mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool latch = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 message_history_limit = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_history_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdapterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdapterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdapterConfig::GetClassData() const { return &_class_data_; }

void AdapterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdapterConfig *>(to)->MergeFrom(
      static_cast<const AdapterConfig &>(from));
}


void AdapterConfig::MergeFrom(const AdapterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.adapter.AdapterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.latch_ = from._impl_.latch_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.message_history_limit_ = from._impl_.message_history_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdapterConfig::CopyFrom(const AdapterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.adapter.AdapterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterConfig::IsInitialized() const {
  return true;
}

void AdapterConfig::InternalSwap(AdapterConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdapterConfig, _impl_.latch_)
      + sizeof(AdapterConfig::_impl_.latch_)
      - PROTOBUF_FIELD_OFFSET(AdapterConfig, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.message_history_limit_, other->_impl_.message_history_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdapterConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[0]);
}

// ===================================================================

class AdapterManagerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AdapterManagerConfig>()._impl_._has_bits_);
  static void set_has_is_ros(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdapterManagerConfig::AdapterManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.common.adapter.AdapterManagerConfig)
}
AdapterManagerConfig::AdapterManagerConfig(const AdapterManagerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_){from._impl_.config_}
    , decltype(_impl_.is_ros_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.is_ros_ = from._impl_.is_ros_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.adapter.AdapterManagerConfig)
}

inline void AdapterManagerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_){arena}
    , decltype(_impl_.is_ros_){false}
  };
}

AdapterManagerConfig::~AdapterManagerConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.adapter.AdapterManagerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdapterManagerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_.~RepeatedPtrField();
}

void AdapterManagerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdapterManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.adapter.AdapterManagerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_.Clear();
  _impl_.is_ros_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdapterManagerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.adapter.AdapterConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_ros(&has_bits);
          _impl_.is_ros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdapterManagerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.adapter.AdapterManagerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_ros = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_ros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.adapter.AdapterManagerConfig)
  return target;
}

size_t AdapterManagerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.adapter.AdapterManagerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->_impl_.config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_ros = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdapterManagerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdapterManagerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdapterManagerConfig::GetClassData() const { return &_class_data_; }

void AdapterManagerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdapterManagerConfig *>(to)->MergeFrom(
      static_cast<const AdapterManagerConfig &>(from));
}


void AdapterManagerConfig::MergeFrom(const AdapterManagerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.adapter.AdapterManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.config_.MergeFrom(from._impl_.config_);
  if (from._internal_has_is_ros()) {
    _internal_set_is_ros(from._internal_is_ros());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdapterManagerConfig::CopyFrom(const AdapterManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.adapter.AdapterManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterManagerConfig::IsInitialized() const {
  return true;
}

void AdapterManagerConfig::InternalSwap(AdapterManagerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.config_.InternalSwap(&other->_impl_.config_);
  swap(_impl_.is_ros_, other->_impl_.is_ros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdapterManagerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_getter, &descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto_once,
      file_level_metadata_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace adapter
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::adapter::AdapterConfig*
Arena::CreateMaybeMessage< ::apollo::common::adapter::AdapterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::adapter::AdapterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::adapter::AdapterManagerConfig*
Arena::CreateMaybeMessage< ::apollo::common::adapter::AdapterManagerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::common::adapter::AdapterManagerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
