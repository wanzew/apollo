// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/adapters/proto/adapter_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto;
namespace apollo {
namespace common {
namespace adapter {
class AdapterConfig;
struct AdapterConfigDefaultTypeInternal;
extern AdapterConfigDefaultTypeInternal _AdapterConfig_default_instance_;
class AdapterManagerConfig;
struct AdapterManagerConfigDefaultTypeInternal;
extern AdapterManagerConfigDefaultTypeInternal _AdapterManagerConfig_default_instance_;
}  // namespace adapter
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::adapter::AdapterConfig* Arena::CreateMaybeMessage<::apollo::common::adapter::AdapterConfig>(Arena*);
template<> ::apollo::common::adapter::AdapterManagerConfig* Arena::CreateMaybeMessage<::apollo::common::adapter::AdapterManagerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {
namespace adapter {

enum AdapterConfig_MessageType : int {
  AdapterConfig_MessageType_POINT_CLOUD = 1,
  AdapterConfig_MessageType_VLP16_POINT_CLOUD = 58,
  AdapterConfig_MessageType_GPS = 2,
  AdapterConfig_MessageType_IMU = 3,
  AdapterConfig_MessageType_CHASSIS = 4,
  AdapterConfig_MessageType_LOCALIZATION = 5,
  AdapterConfig_MessageType_PLANNING_TRAJECTORY = 6,
  AdapterConfig_MessageType_MONITOR = 7,
  AdapterConfig_MessageType_PAD = 8,
  AdapterConfig_MessageType_CONTROL_COMMAND = 9,
  AdapterConfig_MessageType_PREDICTION = 10,
  AdapterConfig_MessageType_PERCEPTION_OBSTACLES = 11,
  AdapterConfig_MessageType_TRAFFIC_LIGHT_DETECTION = 12,
  AdapterConfig_MessageType_CHASSIS_DETAIL = 13,
  AdapterConfig_MessageType_DECISION PROTOBUF_DEPRECATED_ENUM = 14,
  AdapterConfig_MessageType_CANBUS = 15,
  AdapterConfig_MessageType_ROUTING_REQUEST = 16,
  AdapterConfig_MessageType_ROUTING_RESPONSE = 17,
  AdapterConfig_MessageType_RELATIVE_ODOMETRY = 18,
  AdapterConfig_MessageType_INS_STAT = 19,
  AdapterConfig_MessageType_HMI_COMMAND PROTOBUF_DEPRECATED_ENUM = 20,
  AdapterConfig_MessageType_MOBILEYE = 21,
  AdapterConfig_MessageType_DELPHIESR = 22,
  AdapterConfig_MessageType_COMPRESSED_IMAGE = 23,
  AdapterConfig_MessageType_SYSTEM_STATUS = 24,
  AdapterConfig_MessageType_INS_STATUS = 25,
  AdapterConfig_MessageType_GNSS_STATUS = 26,
  AdapterConfig_MessageType_CONTI_RADAR = 27,
  AdapterConfig_MessageType_IMAGE_SHORT = 28,
  AdapterConfig_MessageType_IMAGE_LONG = 29,
  AdapterConfig_MessageType_DRIVE_EVENT = 30,
  AdapterConfig_MessageType_GNSS_RTK_OBS = 31,
  AdapterConfig_MessageType_GNSS_RTK_EPH = 32,
  AdapterConfig_MessageType_GNSS_BEST_POSE = 33,
  AdapterConfig_MessageType_LOCALIZATION_MSF_GNSS = 34,
  AdapterConfig_MessageType_LOCALIZATION_MSF_LIDAR = 35,
  AdapterConfig_MessageType_LOCALIZATION_MSF_SINS_PVA = 36,
  AdapterConfig_MessageType_RAW_IMU = 37,
  AdapterConfig_MessageType_LOCALIZATION_MSF_STATUS = 38,
  AdapterConfig_MessageType_STATIC_INFO = 39,
  AdapterConfig_MessageType_RELATIVE_MAP = 40,
  AdapterConfig_MessageType_NAVIGATION = 41,
  AdapterConfig_MessageType_ULTRASONIC_RADAR = 42,
  AdapterConfig_MessageType_VOICE_DETECTION_REQUEST = 43,
  AdapterConfig_MessageType_VOICE_DETECTION_RESPONSE = 44,
  AdapterConfig_MessageType_IMAGE_FRONT = 45,
  AdapterConfig_MessageType_PANDORA_POINT_CLOUD = 46,
  AdapterConfig_MessageType_PANDORA_CAMERA_FRONT_COLOR = 47,
  AdapterConfig_MessageType_PANDORA_CAMERA_RIGHT_GRAY = 48,
  AdapterConfig_MessageType_PANDORA_CAMERA_LEFT_GRAY = 49,
  AdapterConfig_MessageType_PANDORA_CAMERA_FRONT_GRAY = 50,
  AdapterConfig_MessageType_PANDORA_CAMERA_BACK_GRAY = 51,
  AdapterConfig_MessageType_PERCEPTION_LANE_MASK = 52,
  AdapterConfig_MessageType_GUARDIAN = 53,
  AdapterConfig_MessageType_GNSS_RAW_DATA = 54,
  AdapterConfig_MessageType_STREAM_STATUS = 55,
  AdapterConfig_MessageType_GNSS_HEADING = 56,
  AdapterConfig_MessageType_RTCM_DATA = 57,
  AdapterConfig_MessageType_RACOBIT_RADAR = 59,
  AdapterConfig_MessageType_POINT_CLOUD_RAW = 60,
  AdapterConfig_MessageType_VELODYNE_RAW = 61,
  AdapterConfig_MessageType_POINT_CLOUD_FUSION = 62
};
bool AdapterConfig_MessageType_IsValid(int value);
constexpr AdapterConfig_MessageType AdapterConfig_MessageType_MessageType_MIN = AdapterConfig_MessageType_POINT_CLOUD;
constexpr AdapterConfig_MessageType AdapterConfig_MessageType_MessageType_MAX = AdapterConfig_MessageType_POINT_CLOUD_FUSION;
constexpr int AdapterConfig_MessageType_MessageType_ARRAYSIZE = AdapterConfig_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdapterConfig_MessageType_descriptor();
template<typename T>
inline const std::string& AdapterConfig_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdapterConfig_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdapterConfig_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdapterConfig_MessageType_descriptor(), enum_t_value);
}
inline bool AdapterConfig_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdapterConfig_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdapterConfig_MessageType>(
    AdapterConfig_MessageType_descriptor(), name, value);
}
enum AdapterConfig_Mode : int {
  AdapterConfig_Mode_RECEIVE_ONLY = 0,
  AdapterConfig_Mode_PUBLISH_ONLY = 1,
  AdapterConfig_Mode_DUPLEX = 2
};
bool AdapterConfig_Mode_IsValid(int value);
constexpr AdapterConfig_Mode AdapterConfig_Mode_Mode_MIN = AdapterConfig_Mode_RECEIVE_ONLY;
constexpr AdapterConfig_Mode AdapterConfig_Mode_Mode_MAX = AdapterConfig_Mode_DUPLEX;
constexpr int AdapterConfig_Mode_Mode_ARRAYSIZE = AdapterConfig_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdapterConfig_Mode_descriptor();
template<typename T>
inline const std::string& AdapterConfig_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdapterConfig_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdapterConfig_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdapterConfig_Mode_descriptor(), enum_t_value);
}
inline bool AdapterConfig_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdapterConfig_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdapterConfig_Mode>(
    AdapterConfig_Mode_descriptor(), name, value);
}
// ===================================================================

class AdapterConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.adapter.AdapterConfig) */ {
 public:
  inline AdapterConfig() : AdapterConfig(nullptr) {}
  ~AdapterConfig() override;
  explicit PROTOBUF_CONSTEXPR AdapterConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdapterConfig(const AdapterConfig& from);
  AdapterConfig(AdapterConfig&& from) noexcept
    : AdapterConfig() {
    *this = ::std::move(from);
  }

  inline AdapterConfig& operator=(const AdapterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdapterConfig& operator=(AdapterConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdapterConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdapterConfig* internal_default_instance() {
    return reinterpret_cast<const AdapterConfig*>(
               &_AdapterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdapterConfig& a, AdapterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AdapterConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdapterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdapterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdapterConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdapterConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdapterConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdapterConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.adapter.AdapterConfig";
  }
  protected:
  explicit AdapterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AdapterConfig_MessageType MessageType;
  static constexpr MessageType POINT_CLOUD =
    AdapterConfig_MessageType_POINT_CLOUD;
  static constexpr MessageType VLP16_POINT_CLOUD =
    AdapterConfig_MessageType_VLP16_POINT_CLOUD;
  static constexpr MessageType GPS =
    AdapterConfig_MessageType_GPS;
  static constexpr MessageType IMU =
    AdapterConfig_MessageType_IMU;
  static constexpr MessageType CHASSIS =
    AdapterConfig_MessageType_CHASSIS;
  static constexpr MessageType LOCALIZATION =
    AdapterConfig_MessageType_LOCALIZATION;
  static constexpr MessageType PLANNING_TRAJECTORY =
    AdapterConfig_MessageType_PLANNING_TRAJECTORY;
  static constexpr MessageType MONITOR =
    AdapterConfig_MessageType_MONITOR;
  static constexpr MessageType PAD =
    AdapterConfig_MessageType_PAD;
  static constexpr MessageType CONTROL_COMMAND =
    AdapterConfig_MessageType_CONTROL_COMMAND;
  static constexpr MessageType PREDICTION =
    AdapterConfig_MessageType_PREDICTION;
  static constexpr MessageType PERCEPTION_OBSTACLES =
    AdapterConfig_MessageType_PERCEPTION_OBSTACLES;
  static constexpr MessageType TRAFFIC_LIGHT_DETECTION =
    AdapterConfig_MessageType_TRAFFIC_LIGHT_DETECTION;
  static constexpr MessageType CHASSIS_DETAIL =
    AdapterConfig_MessageType_CHASSIS_DETAIL;
  PROTOBUF_DEPRECATED_ENUM static constexpr MessageType DECISION =
    AdapterConfig_MessageType_DECISION;
  static constexpr MessageType CANBUS =
    AdapterConfig_MessageType_CANBUS;
  static constexpr MessageType ROUTING_REQUEST =
    AdapterConfig_MessageType_ROUTING_REQUEST;
  static constexpr MessageType ROUTING_RESPONSE =
    AdapterConfig_MessageType_ROUTING_RESPONSE;
  static constexpr MessageType RELATIVE_ODOMETRY =
    AdapterConfig_MessageType_RELATIVE_ODOMETRY;
  static constexpr MessageType INS_STAT =
    AdapterConfig_MessageType_INS_STAT;
  PROTOBUF_DEPRECATED_ENUM static constexpr MessageType HMI_COMMAND =
    AdapterConfig_MessageType_HMI_COMMAND;
  static constexpr MessageType MOBILEYE =
    AdapterConfig_MessageType_MOBILEYE;
  static constexpr MessageType DELPHIESR =
    AdapterConfig_MessageType_DELPHIESR;
  static constexpr MessageType COMPRESSED_IMAGE =
    AdapterConfig_MessageType_COMPRESSED_IMAGE;
  static constexpr MessageType SYSTEM_STATUS =
    AdapterConfig_MessageType_SYSTEM_STATUS;
  static constexpr MessageType INS_STATUS =
    AdapterConfig_MessageType_INS_STATUS;
  static constexpr MessageType GNSS_STATUS =
    AdapterConfig_MessageType_GNSS_STATUS;
  static constexpr MessageType CONTI_RADAR =
    AdapterConfig_MessageType_CONTI_RADAR;
  static constexpr MessageType IMAGE_SHORT =
    AdapterConfig_MessageType_IMAGE_SHORT;
  static constexpr MessageType IMAGE_LONG =
    AdapterConfig_MessageType_IMAGE_LONG;
  static constexpr MessageType DRIVE_EVENT =
    AdapterConfig_MessageType_DRIVE_EVENT;
  static constexpr MessageType GNSS_RTK_OBS =
    AdapterConfig_MessageType_GNSS_RTK_OBS;
  static constexpr MessageType GNSS_RTK_EPH =
    AdapterConfig_MessageType_GNSS_RTK_EPH;
  static constexpr MessageType GNSS_BEST_POSE =
    AdapterConfig_MessageType_GNSS_BEST_POSE;
  static constexpr MessageType LOCALIZATION_MSF_GNSS =
    AdapterConfig_MessageType_LOCALIZATION_MSF_GNSS;
  static constexpr MessageType LOCALIZATION_MSF_LIDAR =
    AdapterConfig_MessageType_LOCALIZATION_MSF_LIDAR;
  static constexpr MessageType LOCALIZATION_MSF_SINS_PVA =
    AdapterConfig_MessageType_LOCALIZATION_MSF_SINS_PVA;
  static constexpr MessageType RAW_IMU =
    AdapterConfig_MessageType_RAW_IMU;
  static constexpr MessageType LOCALIZATION_MSF_STATUS =
    AdapterConfig_MessageType_LOCALIZATION_MSF_STATUS;
  static constexpr MessageType STATIC_INFO =
    AdapterConfig_MessageType_STATIC_INFO;
  static constexpr MessageType RELATIVE_MAP =
    AdapterConfig_MessageType_RELATIVE_MAP;
  static constexpr MessageType NAVIGATION =
    AdapterConfig_MessageType_NAVIGATION;
  static constexpr MessageType ULTRASONIC_RADAR =
    AdapterConfig_MessageType_ULTRASONIC_RADAR;
  static constexpr MessageType VOICE_DETECTION_REQUEST =
    AdapterConfig_MessageType_VOICE_DETECTION_REQUEST;
  static constexpr MessageType VOICE_DETECTION_RESPONSE =
    AdapterConfig_MessageType_VOICE_DETECTION_RESPONSE;
  static constexpr MessageType IMAGE_FRONT =
    AdapterConfig_MessageType_IMAGE_FRONT;
  static constexpr MessageType PANDORA_POINT_CLOUD =
    AdapterConfig_MessageType_PANDORA_POINT_CLOUD;
  static constexpr MessageType PANDORA_CAMERA_FRONT_COLOR =
    AdapterConfig_MessageType_PANDORA_CAMERA_FRONT_COLOR;
  static constexpr MessageType PANDORA_CAMERA_RIGHT_GRAY =
    AdapterConfig_MessageType_PANDORA_CAMERA_RIGHT_GRAY;
  static constexpr MessageType PANDORA_CAMERA_LEFT_GRAY =
    AdapterConfig_MessageType_PANDORA_CAMERA_LEFT_GRAY;
  static constexpr MessageType PANDORA_CAMERA_FRONT_GRAY =
    AdapterConfig_MessageType_PANDORA_CAMERA_FRONT_GRAY;
  static constexpr MessageType PANDORA_CAMERA_BACK_GRAY =
    AdapterConfig_MessageType_PANDORA_CAMERA_BACK_GRAY;
  static constexpr MessageType PERCEPTION_LANE_MASK =
    AdapterConfig_MessageType_PERCEPTION_LANE_MASK;
  static constexpr MessageType GUARDIAN =
    AdapterConfig_MessageType_GUARDIAN;
  static constexpr MessageType GNSS_RAW_DATA =
    AdapterConfig_MessageType_GNSS_RAW_DATA;
  static constexpr MessageType STREAM_STATUS =
    AdapterConfig_MessageType_STREAM_STATUS;
  static constexpr MessageType GNSS_HEADING =
    AdapterConfig_MessageType_GNSS_HEADING;
  static constexpr MessageType RTCM_DATA =
    AdapterConfig_MessageType_RTCM_DATA;
  static constexpr MessageType RACOBIT_RADAR =
    AdapterConfig_MessageType_RACOBIT_RADAR;
  static constexpr MessageType POINT_CLOUD_RAW =
    AdapterConfig_MessageType_POINT_CLOUD_RAW;
  static constexpr MessageType VELODYNE_RAW =
    AdapterConfig_MessageType_VELODYNE_RAW;
  static constexpr MessageType POINT_CLOUD_FUSION =
    AdapterConfig_MessageType_POINT_CLOUD_FUSION;
  static inline bool MessageType_IsValid(int value) {
    return AdapterConfig_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    AdapterConfig_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    AdapterConfig_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    AdapterConfig_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return AdapterConfig_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return AdapterConfig_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return AdapterConfig_MessageType_Parse(name, value);
  }

  typedef AdapterConfig_Mode Mode;
  static constexpr Mode RECEIVE_ONLY =
    AdapterConfig_Mode_RECEIVE_ONLY;
  static constexpr Mode PUBLISH_ONLY =
    AdapterConfig_Mode_PUBLISH_ONLY;
  static constexpr Mode DUPLEX =
    AdapterConfig_Mode_DUPLEX;
  static inline bool Mode_IsValid(int value) {
    return AdapterConfig_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    AdapterConfig_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    AdapterConfig_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    AdapterConfig_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return AdapterConfig_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return AdapterConfig_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return AdapterConfig_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 2,
    kLatchFieldNumber = 4,
    kTypeFieldNumber = 1,
    kMessageHistoryLimitFieldNumber = 3,
  };
  // required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::apollo::common::adapter::AdapterConfig_Mode mode() const;
  void set_mode(::apollo::common::adapter::AdapterConfig_Mode value);
  private:
  ::apollo::common::adapter::AdapterConfig_Mode _internal_mode() const;
  void _internal_set_mode(::apollo::common::adapter::AdapterConfig_Mode value);
  public:

  // optional bool latch = 4 [default = false];
  bool has_latch() const;
  private:
  bool _internal_has_latch() const;
  public:
  void clear_latch();
  bool latch() const;
  void set_latch(bool value);
  private:
  bool _internal_latch() const;
  void _internal_set_latch(bool value);
  public:

  // required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::common::adapter::AdapterConfig_MessageType type() const;
  void set_type(::apollo::common::adapter::AdapterConfig_MessageType value);
  private:
  ::apollo::common::adapter::AdapterConfig_MessageType _internal_type() const;
  void _internal_set_type(::apollo::common::adapter::AdapterConfig_MessageType value);
  public:

  // optional int32 message_history_limit = 3 [default = 10];
  bool has_message_history_limit() const;
  private:
  bool _internal_has_message_history_limit() const;
  public:
  void clear_message_history_limit();
  int32_t message_history_limit() const;
  void set_message_history_limit(int32_t value);
  private:
  int32_t _internal_message_history_limit() const;
  void _internal_set_message_history_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.adapter.AdapterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int mode_;
    bool latch_;
    int type_;
    int32_t message_history_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AdapterManagerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.adapter.AdapterManagerConfig) */ {
 public:
  inline AdapterManagerConfig() : AdapterManagerConfig(nullptr) {}
  ~AdapterManagerConfig() override;
  explicit PROTOBUF_CONSTEXPR AdapterManagerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdapterManagerConfig(const AdapterManagerConfig& from);
  AdapterManagerConfig(AdapterManagerConfig&& from) noexcept
    : AdapterManagerConfig() {
    *this = ::std::move(from);
  }

  inline AdapterManagerConfig& operator=(const AdapterManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdapterManagerConfig& operator=(AdapterManagerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdapterManagerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdapterManagerConfig* internal_default_instance() {
    return reinterpret_cast<const AdapterManagerConfig*>(
               &_AdapterManagerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdapterManagerConfig& a, AdapterManagerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AdapterManagerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdapterManagerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdapterManagerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdapterManagerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdapterManagerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdapterManagerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdapterManagerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.adapter.AdapterManagerConfig";
  }
  protected:
  explicit AdapterManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kIsRosFieldNumber = 2,
  };
  // repeated .apollo.common.adapter.AdapterConfig config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  ::apollo::common::adapter::AdapterConfig* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >*
      mutable_config();
  private:
  const ::apollo::common::adapter::AdapterConfig& _internal_config(int index) const;
  ::apollo::common::adapter::AdapterConfig* _internal_add_config();
  public:
  const ::apollo::common::adapter::AdapterConfig& config(int index) const;
  ::apollo::common::adapter::AdapterConfig* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >&
      config() const;

  // required bool is_ros = 2;
  bool has_is_ros() const;
  private:
  bool _internal_has_is_ros() const;
  public:
  void clear_is_ros();
  bool is_ros() const;
  void set_is_ros(bool value);
  private:
  bool _internal_is_ros() const;
  void _internal_set_is_ros(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.adapter.AdapterManagerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig > config_;
    bool is_ros_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdapterConfig

// required .apollo.common.adapter.AdapterConfig.MessageType type = 1;
inline bool AdapterConfig::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdapterConfig::has_type() const {
  return _internal_has_type();
}
inline void AdapterConfig::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::common::adapter::AdapterConfig_MessageType AdapterConfig::_internal_type() const {
  return static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(_impl_.type_);
}
inline ::apollo::common::adapter::AdapterConfig_MessageType AdapterConfig::type() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.type)
  return _internal_type();
}
inline void AdapterConfig::_internal_set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  assert(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void AdapterConfig::set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.type)
}

// required .apollo.common.adapter.AdapterConfig.Mode mode = 2;
inline bool AdapterConfig::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdapterConfig::has_mode() const {
  return _internal_has_mode();
}
inline void AdapterConfig::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::common::adapter::AdapterConfig_Mode AdapterConfig::_internal_mode() const {
  return static_cast< ::apollo::common::adapter::AdapterConfig_Mode >(_impl_.mode_);
}
inline ::apollo::common::adapter::AdapterConfig_Mode AdapterConfig::mode() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.mode)
  return _internal_mode();
}
inline void AdapterConfig::_internal_set_mode(::apollo::common::adapter::AdapterConfig_Mode value) {
  assert(::apollo::common::adapter::AdapterConfig_Mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void AdapterConfig::set_mode(::apollo::common::adapter::AdapterConfig_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.mode)
}

// optional int32 message_history_limit = 3 [default = 10];
inline bool AdapterConfig::_internal_has_message_history_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdapterConfig::has_message_history_limit() const {
  return _internal_has_message_history_limit();
}
inline void AdapterConfig::clear_message_history_limit() {
  _impl_.message_history_limit_ = 10;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t AdapterConfig::_internal_message_history_limit() const {
  return _impl_.message_history_limit_;
}
inline int32_t AdapterConfig::message_history_limit() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.message_history_limit)
  return _internal_message_history_limit();
}
inline void AdapterConfig::_internal_set_message_history_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.message_history_limit_ = value;
}
inline void AdapterConfig::set_message_history_limit(int32_t value) {
  _internal_set_message_history_limit(value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.message_history_limit)
}

// optional bool latch = 4 [default = false];
inline bool AdapterConfig::_internal_has_latch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdapterConfig::has_latch() const {
  return _internal_has_latch();
}
inline void AdapterConfig::clear_latch() {
  _impl_.latch_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool AdapterConfig::_internal_latch() const {
  return _impl_.latch_;
}
inline bool AdapterConfig::latch() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterConfig.latch)
  return _internal_latch();
}
inline void AdapterConfig::_internal_set_latch(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.latch_ = value;
}
inline void AdapterConfig::set_latch(bool value) {
  _internal_set_latch(value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterConfig.latch)
}

// -------------------------------------------------------------------

// AdapterManagerConfig

// repeated .apollo.common.adapter.AdapterConfig config = 1;
inline int AdapterManagerConfig::_internal_config_size() const {
  return _impl_.config_.size();
}
inline int AdapterManagerConfig::config_size() const {
  return _internal_config_size();
}
inline void AdapterManagerConfig::clear_config() {
  _impl_.config_.Clear();
}
inline ::apollo::common::adapter::AdapterConfig* AdapterManagerConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.adapter.AdapterManagerConfig.config)
  return _impl_.config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >*
AdapterManagerConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.adapter.AdapterManagerConfig.config)
  return &_impl_.config_;
}
inline const ::apollo::common::adapter::AdapterConfig& AdapterManagerConfig::_internal_config(int index) const {
  return _impl_.config_.Get(index);
}
inline const ::apollo::common::adapter::AdapterConfig& AdapterManagerConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterManagerConfig.config)
  return _internal_config(index);
}
inline ::apollo::common::adapter::AdapterConfig* AdapterManagerConfig::_internal_add_config() {
  return _impl_.config_.Add();
}
inline ::apollo::common::adapter::AdapterConfig* AdapterManagerConfig::add_config() {
  ::apollo::common::adapter::AdapterConfig* _add = _internal_add_config();
  // @@protoc_insertion_point(field_add:apollo.common.adapter.AdapterManagerConfig.config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::adapter::AdapterConfig >&
AdapterManagerConfig::config() const {
  // @@protoc_insertion_point(field_list:apollo.common.adapter.AdapterManagerConfig.config)
  return _impl_.config_;
}

// required bool is_ros = 2;
inline bool AdapterManagerConfig::_internal_has_is_ros() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdapterManagerConfig::has_is_ros() const {
  return _internal_has_is_ros();
}
inline void AdapterManagerConfig::clear_is_ros() {
  _impl_.is_ros_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AdapterManagerConfig::_internal_is_ros() const {
  return _impl_.is_ros_;
}
inline bool AdapterManagerConfig::is_ros() const {
  // @@protoc_insertion_point(field_get:apollo.common.adapter.AdapterManagerConfig.is_ros)
  return _internal_is_ros();
}
inline void AdapterManagerConfig::_internal_set_is_ros(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_ros_ = value;
}
inline void AdapterManagerConfig::set_is_ros(bool value) {
  _internal_set_is_ros(value);
  // @@protoc_insertion_point(field_set:apollo.common.adapter.AdapterManagerConfig.is_ros)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace adapter
}  // namespace common
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::common::adapter::AdapterConfig_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::adapter::AdapterConfig_MessageType>() {
  return ::apollo::common::adapter::AdapterConfig_MessageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::common::adapter::AdapterConfig_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::adapter::AdapterConfig_Mode>() {
  return ::apollo::common::adapter::AdapterConfig_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto
