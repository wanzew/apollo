// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/calibration/republish_msg/proto/relative_odometry.proto

#include "modules/calibration/republish_msg/proto/relative_odometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace calibration {
namespace republish_msg {
PROTOBUF_CONSTEXPR RelativeOdometry::RelativeOdometry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.position_type_)*/0u} {}
struct RelativeOdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelativeOdometryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelativeOdometryDefaultTypeInternal() {}
  union {
    RelativeOdometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelativeOdometryDefaultTypeInternal _RelativeOdometry_default_instance_;
}  // namespace republish_msg
}  // namespace calibration
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto = nullptr;

const uint32_t TableStruct_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::apollo::calibration::republish_msg::RelativeOdometry, _impl_.position_type_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::calibration::republish_msg::RelativeOdometry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::calibration::republish_msg::_RelativeOdometry_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?modules/calibration/republish_msg/prot"
  "o/relative_odometry.proto\022 apollo.calibr"
  "ation.republish_msg\032!modules/common/prot"
  "o/header.proto\032#modules/common/proto/geo"
  "metry.proto\"\253\001\n\020RelativeOdometry\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022)\n\010posit"
  "ion\030\002 \001(\0132\027.apollo.common.PointENU\022.\n\013or"
  "ientation\030\003 \001(\0132\031.apollo.common.Quaterni"
  "on\022\025\n\rposition_type\030\004 \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto = {
    false, false, 345, descriptor_table_protodef_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto,
    "modules/calibration/republish_msg/proto/relative_odometry.proto",
    &descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_once, descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto::offsets,
    file_level_metadata_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto, file_level_enum_descriptors_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto,
    file_level_service_descriptors_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_getter() {
  return &descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto(&descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto);
namespace apollo {
namespace calibration {
namespace republish_msg {

// ===================================================================

class RelativeOdometry::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeOdometry>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const RelativeOdometry* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::PointENU& position(const RelativeOdometry* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Quaternion& orientation(const RelativeOdometry* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
RelativeOdometry::_Internal::header(const RelativeOdometry* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::PointENU&
RelativeOdometry::_Internal::position(const RelativeOdometry* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Quaternion&
RelativeOdometry::_Internal::orientation(const RelativeOdometry* msg) {
  return *msg->_impl_.orientation_;
}
void RelativeOdometry::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RelativeOdometry::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RelativeOdometry::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RelativeOdometry::RelativeOdometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.calibration.republish_msg.RelativeOdometry)
}
RelativeOdometry::RelativeOdometry(const RelativeOdometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.position_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointENU(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _impl_.orientation_ = new ::apollo::common::Quaternion(*from._impl_.orientation_);
  }
  _impl_.position_type_ = from._impl_.position_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.calibration.republish_msg.RelativeOdometry)
}

inline void RelativeOdometry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.position_type_){0u}
  };
}

RelativeOdometry::~RelativeOdometry() {
  // @@protoc_insertion_point(destructor:apollo.calibration.republish_msg.RelativeOdometry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelativeOdometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
}

void RelativeOdometry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelativeOdometry::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.calibration.republish_msg.RelativeOdometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_.position_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeOdometry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Quaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_position_type(&has_bits);
          _impl_.position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelativeOdometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.calibration.republish_msg.RelativeOdometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Quaternion orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // optional uint32 position_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_position_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.calibration.republish_msg.RelativeOdometry)
  return target;
}

size_t RelativeOdometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.calibration.republish_msg.RelativeOdometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.PointENU position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Quaternion orientation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional uint32 position_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelativeOdometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelativeOdometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelativeOdometry::GetClassData() const { return &_class_data_; }

void RelativeOdometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelativeOdometry *>(to)->MergeFrom(
      static_cast<const RelativeOdometry &>(from));
}


void RelativeOdometry::MergeFrom(const RelativeOdometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.calibration.republish_msg.RelativeOdometry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::PointENU::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation()->::apollo::common::Quaternion::MergeFrom(from._internal_orientation());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.position_type_ = from._impl_.position_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelativeOdometry::CopyFrom(const RelativeOdometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.calibration.republish_msg.RelativeOdometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeOdometry::IsInitialized() const {
  return true;
}

void RelativeOdometry::InternalSwap(RelativeOdometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeOdometry, _impl_.position_type_)
      + sizeof(RelativeOdometry::_impl_.position_type_)
      - PROTOBUF_FIELD_OFFSET(RelativeOdometry, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeOdometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_getter, &descriptor_table_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto_once,
      file_level_metadata_modules_2fcalibration_2frepublish_5fmsg_2fproto_2frelative_5fodometry_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace republish_msg
}  // namespace calibration
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::calibration::republish_msg::RelativeOdometry*
Arena::CreateMaybeMessage< ::apollo::calibration::republish_msg::RelativeOdometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::calibration::republish_msg::RelativeOdometry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
