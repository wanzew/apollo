// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/data_pipelines/proto/cruise_model.proto

#include "modules/tools/prediction/data_pipelines/proto/cruise_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TensorParameter::TensorParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorParameterDefaultTypeInternal() {}
  union {
    TensorParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorParameterDefaultTypeInternal _TensorParameter_default_instance_;
PROTOBUF_CONSTEXPR InputParameter::InputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_shape_)*/{}
  , /*decltype(_impl_.dtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sparse_)*/false} {}
struct InputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputParameterDefaultTypeInternal() {}
  union {
    InputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputParameterDefaultTypeInternal _InputParameter_default_instance_;
PROTOBUF_CONSTEXPR Conv1dParameter::Conv1dParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.kernel_)*/nullptr
  , /*decltype(_impl_.bias_)*/nullptr
  , /*decltype(_impl_.use_bias_)*/false
  , /*decltype(_impl_.stride_)*/0} {}
struct Conv1dParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Conv1dParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Conv1dParameterDefaultTypeInternal() {}
  union {
    Conv1dParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Conv1dParameterDefaultTypeInternal _Conv1dParameter_default_instance_;
PROTOBUF_CONSTEXPR DenseParameter::DenseParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weights_)*/nullptr
  , /*decltype(_impl_.bias_)*/nullptr
  , /*decltype(_impl_.units_)*/0
  , /*decltype(_impl_.use_bias_)*/false} {}
struct DenseParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenseParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenseParameterDefaultTypeInternal() {}
  union {
    DenseParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenseParameterDefaultTypeInternal _DenseParameter_default_instance_;
PROTOBUF_CONSTEXPR ActivationParameter::ActivationParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ActivationParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivationParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivationParameterDefaultTypeInternal() {}
  union {
    ActivationParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivationParameterDefaultTypeInternal _ActivationParameter_default_instance_;
PROTOBUF_CONSTEXPR MaxPool1dParameter::MaxPool1dParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kernel_size_)*/0
  , /*decltype(_impl_.stride_)*/0} {}
struct MaxPool1dParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaxPool1dParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaxPool1dParameterDefaultTypeInternal() {}
  union {
    MaxPool1dParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaxPool1dParameterDefaultTypeInternal _MaxPool1dParameter_default_instance_;
PROTOBUF_CONSTEXPR AvgPool1dParameter::AvgPool1dParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kernel_size_)*/0
  , /*decltype(_impl_.stride_)*/0} {}
struct AvgPool1dParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvgPool1dParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvgPool1dParameterDefaultTypeInternal() {}
  union {
    AvgPool1dParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvgPool1dParameterDefaultTypeInternal _AvgPool1dParameter_default_instance_;
PROTOBUF_CONSTEXPR LaneFeatureConvParameter::LaneFeatureConvParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conv1d_0_)*/nullptr
  , /*decltype(_impl_.activation_1_)*/nullptr
  , /*decltype(_impl_.conv1d_2_)*/nullptr
  , /*decltype(_impl_.activation_3_)*/nullptr
  , /*decltype(_impl_.conv1d_4_)*/nullptr} {}
struct LaneFeatureConvParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneFeatureConvParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneFeatureConvParameterDefaultTypeInternal() {}
  union {
    LaneFeatureConvParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneFeatureConvParameterDefaultTypeInternal _LaneFeatureConvParameter_default_instance_;
PROTOBUF_CONSTEXPR ObsFeatureFCParameter::ObsFeatureFCParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.linear_0_)*/nullptr
  , /*decltype(_impl_.activation_1_)*/nullptr
  , /*decltype(_impl_.linear_3_)*/nullptr
  , /*decltype(_impl_.activation_4_)*/nullptr} {}
struct ObsFeatureFCParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsFeatureFCParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsFeatureFCParameterDefaultTypeInternal() {}
  union {
    ObsFeatureFCParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsFeatureFCParameterDefaultTypeInternal _ObsFeatureFCParameter_default_instance_;
PROTOBUF_CONSTEXPR ClassifyParameter::ClassifyParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.linear_0_)*/nullptr
  , /*decltype(_impl_.activation_1_)*/nullptr
  , /*decltype(_impl_.linear_3_)*/nullptr
  , /*decltype(_impl_.activation_4_)*/nullptr
  , /*decltype(_impl_.linear_6_)*/nullptr
  , /*decltype(_impl_.activation_7_)*/nullptr
  , /*decltype(_impl_.linear_9_)*/nullptr
  , /*decltype(_impl_.activation_10_)*/nullptr} {}
struct ClassifyParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifyParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifyParameterDefaultTypeInternal() {}
  union {
    ClassifyParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifyParameterDefaultTypeInternal _ClassifyParameter_default_instance_;
PROTOBUF_CONSTEXPR RegressParameter::RegressParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.linear_0_)*/nullptr
  , /*decltype(_impl_.activation_1_)*/nullptr
  , /*decltype(_impl_.linear_3_)*/nullptr
  , /*decltype(_impl_.activation_4_)*/nullptr
  , /*decltype(_impl_.linear_6_)*/nullptr
  , /*decltype(_impl_.activation_7_)*/nullptr
  , /*decltype(_impl_.linear_9_)*/nullptr
  , /*decltype(_impl_.activation_10_)*/nullptr} {}
struct RegressParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegressParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegressParameterDefaultTypeInternal() {}
  union {
    RegressParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegressParameterDefaultTypeInternal _RegressParameter_default_instance_;
PROTOBUF_CONSTEXPR CruiseModelParameter::CruiseModelParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_feature_conv_)*/nullptr
  , /*decltype(_impl_.lane_feature_maxpool_)*/nullptr
  , /*decltype(_impl_.lane_feature_avgpool_)*/nullptr
  , /*decltype(_impl_.obs_feature_fc_)*/nullptr
  , /*decltype(_impl_.classify_)*/nullptr
  , /*decltype(_impl_.regress_)*/nullptr} {}
struct CruiseModelParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CruiseModelParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CruiseModelParameterDefaultTypeInternal() {}
  union {
    CruiseModelParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CruiseModelParameterDefaultTypeInternal _CruiseModelParameter_default_instance_;
static ::_pb::Metadata file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = nullptr;

const uint32_t TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TensorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TensorParameter, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::TensorParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InputParameter, _impl_.input_shape_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, _impl_.sparse_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_.use_bias_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_.kernel_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _impl_.stride_),
  ~0u,
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_.activation_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_.use_bias_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_.weights_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _impl_.bias_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, _impl_.activation_),
  0,
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _impl_.kernel_size_),
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _impl_.stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _impl_.kernel_size_),
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _impl_.stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_.conv1d_0_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_.activation_1_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_.conv1d_2_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_.activation_3_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _impl_.conv1d_4_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _impl_.linear_0_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _impl_.activation_1_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _impl_.linear_3_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _impl_.activation_4_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.linear_0_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.activation_1_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.linear_3_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.activation_4_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.linear_6_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.activation_7_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.linear_9_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _impl_.activation_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.linear_0_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.activation_1_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.linear_3_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.activation_4_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.linear_6_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.activation_7_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.linear_9_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _impl_.activation_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.lane_feature_conv_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.lane_feature_maxpool_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.lane_feature_avgpool_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.obs_feature_fc_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.classify_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _impl_.regress_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TensorParameter)},
  { 8, 17, -1, sizeof(::InputParameter)},
  { 20, 31, -1, sizeof(::Conv1dParameter)},
  { 36, 47, -1, sizeof(::DenseParameter)},
  { 52, 59, -1, sizeof(::ActivationParameter)},
  { 60, 68, -1, sizeof(::MaxPool1dParameter)},
  { 70, 78, -1, sizeof(::AvgPool1dParameter)},
  { 80, 91, -1, sizeof(::LaneFeatureConvParameter)},
  { 96, 106, -1, sizeof(::ObsFeatureFCParameter)},
  { 110, 124, -1, sizeof(::ClassifyParameter)},
  { 132, 146, -1, sizeof(::RegressParameter)},
  { 154, 166, -1, sizeof(::CruiseModelParameter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TensorParameter_default_instance_._instance,
  &::_InputParameter_default_instance_._instance,
  &::_Conv1dParameter_default_instance_._instance,
  &::_DenseParameter_default_instance_._instance,
  &::_ActivationParameter_default_instance_._instance,
  &::_MaxPool1dParameter_default_instance_._instance,
  &::_AvgPool1dParameter_default_instance_._instance,
  &::_LaneFeatureConvParameter_default_instance_._instance,
  &::_ObsFeatureFCParameter_default_instance_._instance,
  &::_ClassifyParameter_default_instance_._instance,
  &::_RegressParameter_default_instance_._instance,
  &::_CruiseModelParameter_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@modules/tools/prediction/data_pipeline"
  "s/proto/cruise_model.proto\"2\n\017TensorPara"
  "meter\022\020\n\004data\030\001 \003(\002B\002\020\001\022\r\n\005shape\030\002 \003(\005\"D"
  "\n\016InputParameter\022\023\n\013input_shape\030\001 \003(\005\022\r\n"
  "\005dtype\030\002 \001(\t\022\016\n\006sparse\030\003 \001(\010\"\204\001\n\017Conv1dP"
  "arameter\022\r\n\005shape\030\001 \003(\005\022\020\n\010use_bias\030\002 \001("
  "\010\022 \n\006kernel\030\003 \001(\0132\020.TensorParameter\022\036\n\004b"
  "ias\030\004 \001(\0132\020.TensorParameter\022\016\n\006stride\030\005 "
  "\001(\005\"\210\001\n\016DenseParameter\022\r\n\005units\030\001 \001(\005\022\022\n"
  "\nactivation\030\002 \001(\t\022\020\n\010use_bias\030\003 \001(\010\022!\n\007w"
  "eights\030\004 \001(\0132\020.TensorParameter\022\036\n\004bias\030\005"
  " \001(\0132\020.TensorParameter\")\n\023ActivationPara"
  "meter\022\022\n\nactivation\030\001 \001(\t\"9\n\022MaxPool1dPa"
  "rameter\022\023\n\013kernel_size\030\001 \001(\005\022\016\n\006stride\030\002"
  " \001(\005\"9\n\022AvgPool1dParameter\022\023\n\013kernel_siz"
  "e\030\001 \001(\005\022\016\n\006stride\030\002 \001(\005\"\336\001\n\030LaneFeatureC"
  "onvParameter\022\"\n\010conv1d_0\030\001 \001(\0132\020.Conv1dP"
  "arameter\022*\n\014activation_1\030\002 \001(\0132\024.Activat"
  "ionParameter\022\"\n\010conv1d_2\030\003 \001(\0132\020.Conv1dP"
  "arameter\022*\n\014activation_3\030\004 \001(\0132\024.Activat"
  "ionParameter\022\"\n\010conv1d_4\030\005 \001(\0132\020.Conv1dP"
  "arameter\"\265\001\n\025ObsFeatureFCParameter\022!\n\010li"
  "near_0\030\001 \001(\0132\017.DenseParameter\022*\n\014activat"
  "ion_1\030\002 \001(\0132\024.ActivationParameter\022!\n\010lin"
  "ear_3\030\003 \001(\0132\017.DenseParameter\022*\n\014activati"
  "on_4\030\004 \001(\0132\024.ActivationParameter\"\320\002\n\021Cla"
  "ssifyParameter\022!\n\010linear_0\030\001 \001(\0132\017.Dense"
  "Parameter\022*\n\014activation_1\030\002 \001(\0132\024.Activa"
  "tionParameter\022!\n\010linear_3\030\003 \001(\0132\017.DenseP"
  "arameter\022*\n\014activation_4\030\004 \001(\0132\024.Activat"
  "ionParameter\022!\n\010linear_6\030\005 \001(\0132\017.DensePa"
  "rameter\022*\n\014activation_7\030\006 \001(\0132\024.Activati"
  "onParameter\022!\n\010linear_9\030\007 \001(\0132\017.DensePar"
  "ameter\022+\n\ractivation_10\030\010 \001(\0132\024.Activati"
  "onParameter\"\317\002\n\020RegressParameter\022!\n\010line"
  "ar_0\030\001 \001(\0132\017.DenseParameter\022*\n\014activatio"
  "n_1\030\002 \001(\0132\024.ActivationParameter\022!\n\010linea"
  "r_3\030\003 \001(\0132\017.DenseParameter\022*\n\014activation"
  "_4\030\004 \001(\0132\024.ActivationParameter\022!\n\010linear"
  "_6\030\005 \001(\0132\017.DenseParameter\022*\n\014activation_"
  "7\030\006 \001(\0132\024.ActivationParameter\022!\n\010linear_"
  "9\030\007 \001(\0132\017.DenseParameter\022+\n\ractivation_1"
  "0\030\010 \001(\0132\024.ActivationParameter\"\254\002\n\024Cruise"
  "ModelParameter\0224\n\021lane_feature_conv\030\001 \001("
  "\0132\031.LaneFeatureConvParameter\0221\n\024lane_fea"
  "ture_maxpool\030\002 \001(\0132\023.MaxPool1dParameter\022"
  "1\n\024lane_feature_avgpool\030\003 \001(\0132\023.AvgPool1"
  "dParameter\022.\n\016obs_feature_fc\030\005 \001(\0132\026.Obs"
  "FeatureFCParameter\022$\n\010classify\030\006 \001(\0132\022.C"
  "lassifyParameter\022\"\n\007regress\030\007 \001(\0132\021.Regr"
  "essParameter"
  ;
static ::_pbi::once_flag descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = {
    false, false, 2012, descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto,
    "modules/tools/prediction/data_pipelines/proto/cruise_model.proto",
    &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto::offsets,
    file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto, file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto,
    file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter() {
  return &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto(&descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);

// ===================================================================

class TensorParameter::_Internal {
 public:
};

TensorParameter::TensorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TensorParameter)
}
TensorParameter::TensorParameter(const TensorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TensorParameter)
}

inline void TensorParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TensorParameter::~TensorParameter() {
  // @@protoc_insertion_point(destructor:TensorParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.shape_.~RepeatedField();
}

void TensorParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TensorParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shape(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TensorParameter)
  return target;
}

size_t TensorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TensorParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorParameter::GetClassData() const { return &_class_data_; }

void TensorParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TensorParameter *>(to)->MergeFrom(
      static_cast<const TensorParameter &>(from));
}


void TensorParameter::MergeFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_.MergeFrom(from._impl_.data_);
  _impl_.shape_.MergeFrom(from._impl_.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorParameter::CopyFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParameter::IsInitialized() const {
  return true;
}

void TensorParameter::InternalSwap(TensorParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[0]);
}

// ===================================================================

class InputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InputParameter>()._impl_._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputParameter::InputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_shape_){from._impl_.input_shape_}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.sparse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dtype()) {
    _impl_.dtype_.Set(from._internal_dtype(), 
      GetArenaForAllocation());
  }
  _impl_.sparse_ = from._impl_.sparse_;
  // @@protoc_insertion_point(copy_constructor:InputParameter)
}

inline void InputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_shape_){arena}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.sparse_){false}
  };
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:InputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_shape_.~RepeatedField();
  _impl_.dtype_.Destroy();
}

void InputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:InputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_shape_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dtype_.ClearNonDefaultToEmpty();
  }
  _impl_.sparse_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 input_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "InputParameter.dtype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sparse(&has_bits);
          _impl_.sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  for (int i = 0, n = this->_internal_input_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_input_shape(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dtype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "InputParameter.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // optional bool sparse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_sparse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_shape_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dtype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dtype());
    }

    // optional bool sparse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputParameter::GetClassData() const { return &_class_data_; }

void InputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputParameter *>(to)->MergeFrom(
      static_cast<const InputParameter &>(from));
}


void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.input_shape_.MergeFrom(from._impl_.input_shape_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dtype(from._internal_dtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sparse_ = from._impl_.sparse_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_shape_.InternalSwap(&other->_impl_.input_shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtype_, lhs_arena,
      &other->_impl_.dtype_, rhs_arena
  );
  swap(_impl_.sparse_, other->_impl_.sparse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[1]);
}

// ===================================================================

class Conv1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Conv1dParameter>()._impl_._has_bits_);
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TensorParameter& kernel(const Conv1dParameter* msg);
  static void set_has_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TensorParameter& bias(const Conv1dParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TensorParameter&
Conv1dParameter::_Internal::kernel(const Conv1dParameter* msg) {
  return *msg->_impl_.kernel_;
}
const ::TensorParameter&
Conv1dParameter::_Internal::bias(const Conv1dParameter* msg) {
  return *msg->_impl_.bias_;
}
Conv1dParameter::Conv1dParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Conv1dParameter)
}
Conv1dParameter::Conv1dParameter(const Conv1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.kernel_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.use_bias_){}
    , decltype(_impl_.stride_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kernel()) {
    _impl_.kernel_ = new ::TensorParameter(*from._impl_.kernel_);
  }
  if (from._internal_has_bias()) {
    _impl_.bias_ = new ::TensorParameter(*from._impl_.bias_);
  }
  ::memcpy(&_impl_.use_bias_, &from._impl_.use_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stride_) -
    reinterpret_cast<char*>(&_impl_.use_bias_)) + sizeof(_impl_.stride_));
  // @@protoc_insertion_point(copy_constructor:Conv1dParameter)
}

inline void Conv1dParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){arena}
    , decltype(_impl_.kernel_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.use_bias_){false}
    , decltype(_impl_.stride_){0}
  };
}

Conv1dParameter::~Conv1dParameter() {
  // @@protoc_insertion_point(destructor:Conv1dParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Conv1dParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.kernel_;
  if (this != internal_default_instance()) delete _impl_.bias_;
}

void Conv1dParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conv1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Conv1dParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.kernel_ != nullptr);
      _impl_.kernel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bias_ != nullptr);
      _impl_.bias_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.use_bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stride_) -
        reinterpret_cast<char*>(&_impl_.use_bias_)) + sizeof(_impl_.stride_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conv1dParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_bias(&has_bits);
          _impl_.use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TensorParameter kernel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TensorParameter bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stride = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conv1dParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Conv1dParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shape(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_bias = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_bias(), target);
  }

  // optional .TensorParameter kernel = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::kernel(this),
        _Internal::kernel(this).GetCachedSize(), target, stream);
  }

  // optional .TensorParameter bias = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bias(this),
        _Internal::bias(this).GetCachedSize(), target, stream);
  }

  // optional int32 stride = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Conv1dParameter)
  return target;
}

size_t Conv1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Conv1dParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TensorParameter kernel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kernel_);
    }

    // optional .TensorParameter bias = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_);
    }

    // optional bool use_bias = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 stride = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stride());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conv1dParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Conv1dParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conv1dParameter::GetClassData() const { return &_class_data_; }

void Conv1dParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Conv1dParameter *>(to)->MergeFrom(
      static_cast<const Conv1dParameter &>(from));
}


void Conv1dParameter::MergeFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Conv1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.shape_.MergeFrom(from._impl_.shape_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kernel()->::TensorParameter::MergeFrom(from._internal_kernel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias()->::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.use_bias_ = from._impl_.use_bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.stride_ = from._impl_.stride_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conv1dParameter::CopyFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Conv1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv1dParameter::IsInitialized() const {
  return true;
}

void Conv1dParameter::InternalSwap(Conv1dParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conv1dParameter, _impl_.stride_)
      + sizeof(Conv1dParameter::_impl_.stride_)
      - PROTOBUF_FIELD_OFFSET(Conv1dParameter, _impl_.kernel_)>(
          reinterpret_cast<char*>(&_impl_.kernel_),
          reinterpret_cast<char*>(&other->_impl_.kernel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conv1dParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[2]);
}

// ===================================================================

class DenseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseParameter>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TensorParameter& weights(const DenseParameter* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TensorParameter& bias(const DenseParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TensorParameter&
DenseParameter::_Internal::weights(const DenseParameter* msg) {
  return *msg->_impl_.weights_;
}
const ::TensorParameter&
DenseParameter::_Internal::bias(const DenseParameter* msg) {
  return *msg->_impl_.bias_;
}
DenseParameter::DenseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DenseParameter)
}
DenseParameter::DenseParameter(const DenseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.units_){}
    , decltype(_impl_.use_bias_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation()) {
    _impl_.activation_.Set(from._internal_activation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_weights()) {
    _impl_.weights_ = new ::TensorParameter(*from._impl_.weights_);
  }
  if (from._internal_has_bias()) {
    _impl_.bias_ = new ::TensorParameter(*from._impl_.bias_);
  }
  ::memcpy(&_impl_.units_, &from._impl_.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_bias_) -
    reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.use_bias_));
  // @@protoc_insertion_point(copy_constructor:DenseParameter)
}

inline void DenseParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.units_){0}
    , decltype(_impl_.use_bias_){false}
  };
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenseParameter::~DenseParameter() {
  // @@protoc_insertion_point(destructor:DenseParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenseParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weights_;
  if (this != internal_default_instance()) delete _impl_.bias_;
}

void DenseParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:DenseParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.activation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.weights_ != nullptr);
      _impl_.weights_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.bias_ != nullptr);
      _impl_.bias_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_bias_) -
        reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.use_bias_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenseParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "DenseParameter.activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_bias(&has_bits);
          _impl_.use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TensorParameter weights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TensorParameter bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DenseParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DenseParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional string activation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DenseParameter.activation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activation(), target);
  }

  // optional bool use_bias = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_use_bias(), target);
  }

  // optional .TensorParameter weights = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::weights(this),
        _Internal::weights(this).GetCachedSize(), target, stream);
  }

  // optional .TensorParameter bias = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bias(this),
        _Internal::bias(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DenseParameter)
  return target;
}

size_t DenseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DenseParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string activation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional .TensorParameter weights = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_);
    }

    // optional .TensorParameter bias = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_units());
    }

    // optional bool use_bias = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenseParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DenseParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenseParameter::GetClassData() const { return &_class_data_; }

void DenseParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DenseParameter *>(to)->MergeFrom(
      static_cast<const DenseParameter &>(from));
}


void DenseParameter::MergeFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activation(from._internal_activation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weights()->::TensorParameter::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bias()->::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.units_ = from._impl_.units_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.use_bias_ = from._impl_.use_bias_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenseParameter::CopyFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParameter::IsInitialized() const {
  return true;
}

void DenseParameter::InternalSwap(DenseParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activation_, lhs_arena,
      &other->_impl_.activation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DenseParameter, _impl_.use_bias_)
      + sizeof(DenseParameter::_impl_.use_bias_)
      - PROTOBUF_FIELD_OFFSET(DenseParameter, _impl_.weights_)>(
          reinterpret_cast<char*>(&_impl_.weights_),
          reinterpret_cast<char*>(&other->_impl_.weights_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[3]);
}

// ===================================================================

class ActivationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivationParameter>()._impl_._has_bits_);
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivationParameter::ActivationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ActivationParameter)
}
ActivationParameter::ActivationParameter(const ActivationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation()) {
    _impl_.activation_.Set(from._internal_activation(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ActivationParameter)
}

inline void ActivationParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
  };
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivationParameter::~ActivationParameter() {
  // @@protoc_insertion_point(destructor:ActivationParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivationParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activation_.Destroy();
}

void ActivationParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivationParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.activation_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ActivationParameter.activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivationParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivationParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string activation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ActivationParameter.activation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivationParameter)
  return target;
}

size_t ActivationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivationParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string activation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivationParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivationParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivationParameter::GetClassData() const { return &_class_data_; }

void ActivationParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivationParameter *>(to)->MergeFrom(
      static_cast<const ActivationParameter &>(from));
}


void ActivationParameter::MergeFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activation()) {
    _internal_set_activation(from._internal_activation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivationParameter::CopyFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParameter::IsInitialized() const {
  return true;
}

void ActivationParameter::InternalSwap(ActivationParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activation_, lhs_arena,
      &other->_impl_.activation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[4]);
}

// ===================================================================

class MaxPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MaxPool1dParameter>()._impl_._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MaxPool1dParameter::MaxPool1dParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MaxPool1dParameter)
}
MaxPool1dParameter::MaxPool1dParameter(const MaxPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kernel_size_){}
    , decltype(_impl_.stride_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kernel_size_, &from._impl_.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stride_) -
    reinterpret_cast<char*>(&_impl_.kernel_size_)) + sizeof(_impl_.stride_));
  // @@protoc_insertion_point(copy_constructor:MaxPool1dParameter)
}

inline void MaxPool1dParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kernel_size_){0}
    , decltype(_impl_.stride_){0}
  };
}

MaxPool1dParameter::~MaxPool1dParameter() {
  // @@protoc_insertion_point(destructor:MaxPool1dParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaxPool1dParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaxPool1dParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaxPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:MaxPool1dParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stride_) -
        reinterpret_cast<char*>(&_impl_.kernel_size_)) + sizeof(_impl_.stride_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxPool1dParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          _impl_.kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaxPool1dParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxPool1dParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxPool1dParameter)
  return target;
}

size_t MaxPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaxPool1dParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stride());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxPool1dParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MaxPool1dParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxPool1dParameter::GetClassData() const { return &_class_data_; }

void MaxPool1dParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MaxPool1dParameter *>(to)->MergeFrom(
      static_cast<const MaxPool1dParameter &>(from));
}


void MaxPool1dParameter::MergeFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaxPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kernel_size_ = from._impl_.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stride_ = from._impl_.stride_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxPool1dParameter::CopyFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaxPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxPool1dParameter::IsInitialized() const {
  return true;
}

void MaxPool1dParameter::InternalSwap(MaxPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaxPool1dParameter, _impl_.stride_)
      + sizeof(MaxPool1dParameter::_impl_.stride_)
      - PROTOBUF_FIELD_OFFSET(MaxPool1dParameter, _impl_.kernel_size_)>(
          reinterpret_cast<char*>(&_impl_.kernel_size_),
          reinterpret_cast<char*>(&other->_impl_.kernel_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxPool1dParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[5]);
}

// ===================================================================

class AvgPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AvgPool1dParameter>()._impl_._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AvgPool1dParameter::AvgPool1dParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AvgPool1dParameter)
}
AvgPool1dParameter::AvgPool1dParameter(const AvgPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kernel_size_){}
    , decltype(_impl_.stride_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kernel_size_, &from._impl_.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stride_) -
    reinterpret_cast<char*>(&_impl_.kernel_size_)) + sizeof(_impl_.stride_));
  // @@protoc_insertion_point(copy_constructor:AvgPool1dParameter)
}

inline void AvgPool1dParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kernel_size_){0}
    , decltype(_impl_.stride_){0}
  };
}

AvgPool1dParameter::~AvgPool1dParameter() {
  // @@protoc_insertion_point(destructor:AvgPool1dParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvgPool1dParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AvgPool1dParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvgPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:AvgPool1dParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stride_) -
        reinterpret_cast<char*>(&_impl_.kernel_size_)) + sizeof(_impl_.stride_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvgPool1dParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          _impl_.kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvgPool1dParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvgPool1dParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvgPool1dParameter)
  return target;
}

size_t AvgPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvgPool1dParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stride());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvgPool1dParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AvgPool1dParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvgPool1dParameter::GetClassData() const { return &_class_data_; }

void AvgPool1dParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AvgPool1dParameter *>(to)->MergeFrom(
      static_cast<const AvgPool1dParameter &>(from));
}


void AvgPool1dParameter::MergeFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvgPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.kernel_size_ = from._impl_.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stride_ = from._impl_.stride_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvgPool1dParameter::CopyFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvgPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvgPool1dParameter::IsInitialized() const {
  return true;
}

void AvgPool1dParameter::InternalSwap(AvgPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvgPool1dParameter, _impl_.stride_)
      + sizeof(AvgPool1dParameter::_impl_.stride_)
      - PROTOBUF_FIELD_OFFSET(AvgPool1dParameter, _impl_.kernel_size_)>(
          reinterpret_cast<char*>(&_impl_.kernel_size_),
          reinterpret_cast<char*>(&other->_impl_.kernel_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvgPool1dParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[6]);
}

// ===================================================================

class LaneFeatureConvParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFeatureConvParameter>()._impl_._has_bits_);
  static const ::Conv1dParameter& conv1d_0(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const LaneFeatureConvParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Conv1dParameter& conv1d_2(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_3(const LaneFeatureConvParameter* msg);
  static void set_has_activation_3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Conv1dParameter& conv1d_4(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_0(const LaneFeatureConvParameter* msg) {
  return *msg->_impl_.conv1d_0_;
}
const ::ActivationParameter&
LaneFeatureConvParameter::_Internal::activation_1(const LaneFeatureConvParameter* msg) {
  return *msg->_impl_.activation_1_;
}
const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_2(const LaneFeatureConvParameter* msg) {
  return *msg->_impl_.conv1d_2_;
}
const ::ActivationParameter&
LaneFeatureConvParameter::_Internal::activation_3(const LaneFeatureConvParameter* msg) {
  return *msg->_impl_.activation_3_;
}
const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_4(const LaneFeatureConvParameter* msg) {
  return *msg->_impl_.conv1d_4_;
}
LaneFeatureConvParameter::LaneFeatureConvParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LaneFeatureConvParameter)
}
LaneFeatureConvParameter::LaneFeatureConvParameter(const LaneFeatureConvParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conv1d_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.conv1d_2_){nullptr}
    , decltype(_impl_.activation_3_){nullptr}
    , decltype(_impl_.conv1d_4_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conv1d_0()) {
    _impl_.conv1d_0_ = new ::Conv1dParameter(*from._impl_.conv1d_0_);
  }
  if (from._internal_has_activation_1()) {
    _impl_.activation_1_ = new ::ActivationParameter(*from._impl_.activation_1_);
  }
  if (from._internal_has_conv1d_2()) {
    _impl_.conv1d_2_ = new ::Conv1dParameter(*from._impl_.conv1d_2_);
  }
  if (from._internal_has_activation_3()) {
    _impl_.activation_3_ = new ::ActivationParameter(*from._impl_.activation_3_);
  }
  if (from._internal_has_conv1d_4()) {
    _impl_.conv1d_4_ = new ::Conv1dParameter(*from._impl_.conv1d_4_);
  }
  // @@protoc_insertion_point(copy_constructor:LaneFeatureConvParameter)
}

inline void LaneFeatureConvParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conv1d_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.conv1d_2_){nullptr}
    , decltype(_impl_.activation_3_){nullptr}
    , decltype(_impl_.conv1d_4_){nullptr}
  };
}

LaneFeatureConvParameter::~LaneFeatureConvParameter() {
  // @@protoc_insertion_point(destructor:LaneFeatureConvParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneFeatureConvParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conv1d_0_;
  if (this != internal_default_instance()) delete _impl_.activation_1_;
  if (this != internal_default_instance()) delete _impl_.conv1d_2_;
  if (this != internal_default_instance()) delete _impl_.activation_3_;
  if (this != internal_default_instance()) delete _impl_.conv1d_4_;
}

void LaneFeatureConvParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneFeatureConvParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:LaneFeatureConvParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.conv1d_0_ != nullptr);
      _impl_.conv1d_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activation_1_ != nullptr);
      _impl_.activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.conv1d_2_ != nullptr);
      _impl_.conv1d_2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.activation_3_ != nullptr);
      _impl_.activation_3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.conv1d_4_ != nullptr);
      _impl_.conv1d_4_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneFeatureConvParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Conv1dParameter conv1d_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Conv1dParameter conv1d_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Conv1dParameter conv1d_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneFeatureConvParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaneFeatureConvParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Conv1dParameter conv1d_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conv1d_0(this),
        _Internal::conv1d_0(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activation_1(this),
        _Internal::activation_1(this).GetCachedSize(), target, stream);
  }

  // optional .Conv1dParameter conv1d_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::conv1d_2(this),
        _Internal::conv1d_2(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::activation_3(this),
        _Internal::activation_3(this).GetCachedSize(), target, stream);
  }

  // optional .Conv1dParameter conv1d_4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::conv1d_4(this),
        _Internal::conv1d_4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaneFeatureConvParameter)
  return target;
}

size_t LaneFeatureConvParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LaneFeatureConvParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Conv1dParameter conv1d_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conv1d_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_1_);
    }

    // optional .Conv1dParameter conv1d_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conv1d_2_);
    }

    // optional .ActivationParameter activation_3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_3_);
    }

    // optional .Conv1dParameter conv1d_4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conv1d_4_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneFeatureConvParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneFeatureConvParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneFeatureConvParameter::GetClassData() const { return &_class_data_; }

void LaneFeatureConvParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneFeatureConvParameter *>(to)->MergeFrom(
      static_cast<const LaneFeatureConvParameter &>(from));
}


void LaneFeatureConvParameter::MergeFrom(const LaneFeatureConvParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LaneFeatureConvParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_conv1d_0()->::Conv1dParameter::MergeFrom(from._internal_conv1d_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_conv1d_2()->::Conv1dParameter::MergeFrom(from._internal_conv1d_2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_3()->::ActivationParameter::MergeFrom(from._internal_activation_3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_conv1d_4()->::Conv1dParameter::MergeFrom(from._internal_conv1d_4());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneFeatureConvParameter::CopyFrom(const LaneFeatureConvParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LaneFeatureConvParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeatureConvParameter::IsInitialized() const {
  return true;
}

void LaneFeatureConvParameter::InternalSwap(LaneFeatureConvParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneFeatureConvParameter, _impl_.conv1d_4_)
      + sizeof(LaneFeatureConvParameter::_impl_.conv1d_4_)
      - PROTOBUF_FIELD_OFFSET(LaneFeatureConvParameter, _impl_.conv1d_0_)>(
          reinterpret_cast<char*>(&_impl_.conv1d_0_),
          reinterpret_cast<char*>(&other->_impl_.conv1d_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFeatureConvParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[7]);
}

// ===================================================================

class ObsFeatureFCParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsFeatureFCParameter>()._impl_._has_bits_);
  static const ::DenseParameter& linear_0(const ObsFeatureFCParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const ObsFeatureFCParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const ObsFeatureFCParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const ObsFeatureFCParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::DenseParameter&
ObsFeatureFCParameter::_Internal::linear_0(const ObsFeatureFCParameter* msg) {
  return *msg->_impl_.linear_0_;
}
const ::ActivationParameter&
ObsFeatureFCParameter::_Internal::activation_1(const ObsFeatureFCParameter* msg) {
  return *msg->_impl_.activation_1_;
}
const ::DenseParameter&
ObsFeatureFCParameter::_Internal::linear_3(const ObsFeatureFCParameter* msg) {
  return *msg->_impl_.linear_3_;
}
const ::ActivationParameter&
ObsFeatureFCParameter::_Internal::activation_4(const ObsFeatureFCParameter* msg) {
  return *msg->_impl_.activation_4_;
}
ObsFeatureFCParameter::ObsFeatureFCParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ObsFeatureFCParameter)
}
ObsFeatureFCParameter::ObsFeatureFCParameter(const ObsFeatureFCParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    _impl_.linear_0_ = new ::DenseParameter(*from._impl_.linear_0_);
  }
  if (from._internal_has_activation_1()) {
    _impl_.activation_1_ = new ::ActivationParameter(*from._impl_.activation_1_);
  }
  if (from._internal_has_linear_3()) {
    _impl_.linear_3_ = new ::DenseParameter(*from._impl_.linear_3_);
  }
  if (from._internal_has_activation_4()) {
    _impl_.activation_4_ = new ::ActivationParameter(*from._impl_.activation_4_);
  }
  // @@protoc_insertion_point(copy_constructor:ObsFeatureFCParameter)
}

inline void ObsFeatureFCParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}
  };
}

ObsFeatureFCParameter::~ObsFeatureFCParameter() {
  // @@protoc_insertion_point(destructor:ObsFeatureFCParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsFeatureFCParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linear_0_;
  if (this != internal_default_instance()) delete _impl_.activation_1_;
  if (this != internal_default_instance()) delete _impl_.linear_3_;
  if (this != internal_default_instance()) delete _impl_.activation_4_;
}

void ObsFeatureFCParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObsFeatureFCParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ObsFeatureFCParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.linear_0_ != nullptr);
      _impl_.linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activation_1_ != nullptr);
      _impl_.activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_3_ != nullptr);
      _impl_.linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.activation_4_ != nullptr);
      _impl_.activation_4_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObsFeatureFCParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsFeatureFCParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObsFeatureFCParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linear_0(this),
        _Internal::linear_0(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activation_1(this),
        _Internal::activation_1(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_3(this),
        _Internal::linear_3(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::activation_4(this),
        _Internal::activation_4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObsFeatureFCParameter)
  return target;
}

size_t ObsFeatureFCParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObsFeatureFCParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_4_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObsFeatureFCParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObsFeatureFCParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObsFeatureFCParameter::GetClassData() const { return &_class_data_; }

void ObsFeatureFCParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObsFeatureFCParameter *>(to)->MergeFrom(
      static_cast<const ObsFeatureFCParameter &>(from));
}


void ObsFeatureFCParameter::MergeFrom(const ObsFeatureFCParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObsFeatureFCParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObsFeatureFCParameter::CopyFrom(const ObsFeatureFCParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObsFeatureFCParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsFeatureFCParameter::IsInitialized() const {
  return true;
}

void ObsFeatureFCParameter::InternalSwap(ObsFeatureFCParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsFeatureFCParameter, _impl_.activation_4_)
      + sizeof(ObsFeatureFCParameter::_impl_.activation_4_)
      - PROTOBUF_FIELD_OFFSET(ObsFeatureFCParameter, _impl_.linear_0_)>(
          reinterpret_cast<char*>(&_impl_.linear_0_),
          reinterpret_cast<char*>(&other->_impl_.linear_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObsFeatureFCParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[8]);
}

// ===================================================================

class ClassifyParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifyParameter>()._impl_._has_bits_);
  static const ::DenseParameter& linear_0(const ClassifyParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const ClassifyParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const ClassifyParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const ClassifyParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DenseParameter& linear_6(const ClassifyParameter* msg);
  static void set_has_linear_6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ActivationParameter& activation_7(const ClassifyParameter* msg);
  static void set_has_activation_7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DenseParameter& linear_9(const ClassifyParameter* msg);
  static void set_has_linear_9(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ActivationParameter& activation_10(const ClassifyParameter* msg);
  static void set_has_activation_10(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::DenseParameter&
ClassifyParameter::_Internal::linear_0(const ClassifyParameter* msg) {
  return *msg->_impl_.linear_0_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_1(const ClassifyParameter* msg) {
  return *msg->_impl_.activation_1_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_3(const ClassifyParameter* msg) {
  return *msg->_impl_.linear_3_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_4(const ClassifyParameter* msg) {
  return *msg->_impl_.activation_4_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_6(const ClassifyParameter* msg) {
  return *msg->_impl_.linear_6_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_7(const ClassifyParameter* msg) {
  return *msg->_impl_.activation_7_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_9(const ClassifyParameter* msg) {
  return *msg->_impl_.linear_9_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_10(const ClassifyParameter* msg) {
  return *msg->_impl_.activation_10_;
}
ClassifyParameter::ClassifyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClassifyParameter)
}
ClassifyParameter::ClassifyParameter(const ClassifyParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}
    , decltype(_impl_.linear_6_){nullptr}
    , decltype(_impl_.activation_7_){nullptr}
    , decltype(_impl_.linear_9_){nullptr}
    , decltype(_impl_.activation_10_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    _impl_.linear_0_ = new ::DenseParameter(*from._impl_.linear_0_);
  }
  if (from._internal_has_activation_1()) {
    _impl_.activation_1_ = new ::ActivationParameter(*from._impl_.activation_1_);
  }
  if (from._internal_has_linear_3()) {
    _impl_.linear_3_ = new ::DenseParameter(*from._impl_.linear_3_);
  }
  if (from._internal_has_activation_4()) {
    _impl_.activation_4_ = new ::ActivationParameter(*from._impl_.activation_4_);
  }
  if (from._internal_has_linear_6()) {
    _impl_.linear_6_ = new ::DenseParameter(*from._impl_.linear_6_);
  }
  if (from._internal_has_activation_7()) {
    _impl_.activation_7_ = new ::ActivationParameter(*from._impl_.activation_7_);
  }
  if (from._internal_has_linear_9()) {
    _impl_.linear_9_ = new ::DenseParameter(*from._impl_.linear_9_);
  }
  if (from._internal_has_activation_10()) {
    _impl_.activation_10_ = new ::ActivationParameter(*from._impl_.activation_10_);
  }
  // @@protoc_insertion_point(copy_constructor:ClassifyParameter)
}

inline void ClassifyParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}
    , decltype(_impl_.linear_6_){nullptr}
    , decltype(_impl_.activation_7_){nullptr}
    , decltype(_impl_.linear_9_){nullptr}
    , decltype(_impl_.activation_10_){nullptr}
  };
}

ClassifyParameter::~ClassifyParameter() {
  // @@protoc_insertion_point(destructor:ClassifyParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassifyParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linear_0_;
  if (this != internal_default_instance()) delete _impl_.activation_1_;
  if (this != internal_default_instance()) delete _impl_.linear_3_;
  if (this != internal_default_instance()) delete _impl_.activation_4_;
  if (this != internal_default_instance()) delete _impl_.linear_6_;
  if (this != internal_default_instance()) delete _impl_.activation_7_;
  if (this != internal_default_instance()) delete _impl_.linear_9_;
  if (this != internal_default_instance()) delete _impl_.activation_10_;
}

void ClassifyParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassifyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifyParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.linear_0_ != nullptr);
      _impl_.linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activation_1_ != nullptr);
      _impl_.activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_3_ != nullptr);
      _impl_.linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.activation_4_ != nullptr);
      _impl_.activation_4_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.linear_6_ != nullptr);
      _impl_.linear_6_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.activation_7_ != nullptr);
      _impl_.activation_7_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.linear_9_ != nullptr);
      _impl_.linear_9_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.activation_10_ != nullptr);
      _impl_.activation_10_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassifyParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_7 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_7(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_9(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_10(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassifyParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassifyParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linear_0(this),
        _Internal::linear_0(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activation_1(this),
        _Internal::activation_1(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_3(this),
        _Internal::linear_3(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::activation_4(this),
        _Internal::activation_4(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_6 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::linear_6(this),
        _Internal::linear_6(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_7 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::activation_7(this),
        _Internal::activation_7(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_9 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::linear_9(this),
        _Internal::linear_9(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_10 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::activation_10(this),
        _Internal::activation_10(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassifyParameter)
  return target;
}

size_t ClassifyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassifyParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_4_);
    }

    // optional .DenseParameter linear_6 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_6_);
    }

    // optional .ActivationParameter activation_7 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_7_);
    }

    // optional .DenseParameter linear_9 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_9_);
    }

    // optional .ActivationParameter activation_10 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_10_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassifyParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassifyParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassifyParameter::GetClassData() const { return &_class_data_; }

void ClassifyParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClassifyParameter *>(to)->MergeFrom(
      static_cast<const ClassifyParameter &>(from));
}


void ClassifyParameter::MergeFrom(const ClassifyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassifyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_6()->::DenseParameter::MergeFrom(from._internal_linear_6());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_activation_7()->::ActivationParameter::MergeFrom(from._internal_activation_7());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_linear_9()->::DenseParameter::MergeFrom(from._internal_linear_9());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_activation_10()->::ActivationParameter::MergeFrom(from._internal_activation_10());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassifyParameter::CopyFrom(const ClassifyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyParameter::IsInitialized() const {
  return true;
}

void ClassifyParameter::InternalSwap(ClassifyParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassifyParameter, _impl_.activation_10_)
      + sizeof(ClassifyParameter::_impl_.activation_10_)
      - PROTOBUF_FIELD_OFFSET(ClassifyParameter, _impl_.linear_0_)>(
          reinterpret_cast<char*>(&_impl_.linear_0_),
          reinterpret_cast<char*>(&other->_impl_.linear_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassifyParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[9]);
}

// ===================================================================

class RegressParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegressParameter>()._impl_._has_bits_);
  static const ::DenseParameter& linear_0(const RegressParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const RegressParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const RegressParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const RegressParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DenseParameter& linear_6(const RegressParameter* msg);
  static void set_has_linear_6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ActivationParameter& activation_7(const RegressParameter* msg);
  static void set_has_activation_7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DenseParameter& linear_9(const RegressParameter* msg);
  static void set_has_linear_9(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ActivationParameter& activation_10(const RegressParameter* msg);
  static void set_has_activation_10(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::DenseParameter&
RegressParameter::_Internal::linear_0(const RegressParameter* msg) {
  return *msg->_impl_.linear_0_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_1(const RegressParameter* msg) {
  return *msg->_impl_.activation_1_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_3(const RegressParameter* msg) {
  return *msg->_impl_.linear_3_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_4(const RegressParameter* msg) {
  return *msg->_impl_.activation_4_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_6(const RegressParameter* msg) {
  return *msg->_impl_.linear_6_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_7(const RegressParameter* msg) {
  return *msg->_impl_.activation_7_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_9(const RegressParameter* msg) {
  return *msg->_impl_.linear_9_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_10(const RegressParameter* msg) {
  return *msg->_impl_.activation_10_;
}
RegressParameter::RegressParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegressParameter)
}
RegressParameter::RegressParameter(const RegressParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}
    , decltype(_impl_.linear_6_){nullptr}
    , decltype(_impl_.activation_7_){nullptr}
    , decltype(_impl_.linear_9_){nullptr}
    , decltype(_impl_.activation_10_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    _impl_.linear_0_ = new ::DenseParameter(*from._impl_.linear_0_);
  }
  if (from._internal_has_activation_1()) {
    _impl_.activation_1_ = new ::ActivationParameter(*from._impl_.activation_1_);
  }
  if (from._internal_has_linear_3()) {
    _impl_.linear_3_ = new ::DenseParameter(*from._impl_.linear_3_);
  }
  if (from._internal_has_activation_4()) {
    _impl_.activation_4_ = new ::ActivationParameter(*from._impl_.activation_4_);
  }
  if (from._internal_has_linear_6()) {
    _impl_.linear_6_ = new ::DenseParameter(*from._impl_.linear_6_);
  }
  if (from._internal_has_activation_7()) {
    _impl_.activation_7_ = new ::ActivationParameter(*from._impl_.activation_7_);
  }
  if (from._internal_has_linear_9()) {
    _impl_.linear_9_ = new ::DenseParameter(*from._impl_.linear_9_);
  }
  if (from._internal_has_activation_10()) {
    _impl_.activation_10_ = new ::ActivationParameter(*from._impl_.activation_10_);
  }
  // @@protoc_insertion_point(copy_constructor:RegressParameter)
}

inline void RegressParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.linear_0_){nullptr}
    , decltype(_impl_.activation_1_){nullptr}
    , decltype(_impl_.linear_3_){nullptr}
    , decltype(_impl_.activation_4_){nullptr}
    , decltype(_impl_.linear_6_){nullptr}
    , decltype(_impl_.activation_7_){nullptr}
    , decltype(_impl_.linear_9_){nullptr}
    , decltype(_impl_.activation_10_){nullptr}
  };
}

RegressParameter::~RegressParameter() {
  // @@protoc_insertion_point(destructor:RegressParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegressParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linear_0_;
  if (this != internal_default_instance()) delete _impl_.activation_1_;
  if (this != internal_default_instance()) delete _impl_.linear_3_;
  if (this != internal_default_instance()) delete _impl_.activation_4_;
  if (this != internal_default_instance()) delete _impl_.linear_6_;
  if (this != internal_default_instance()) delete _impl_.activation_7_;
  if (this != internal_default_instance()) delete _impl_.linear_9_;
  if (this != internal_default_instance()) delete _impl_.activation_10_;
}

void RegressParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegressParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:RegressParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.linear_0_ != nullptr);
      _impl_.linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.activation_1_ != nullptr);
      _impl_.activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_3_ != nullptr);
      _impl_.linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.activation_4_ != nullptr);
      _impl_.activation_4_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.linear_6_ != nullptr);
      _impl_.linear_6_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.activation_7_ != nullptr);
      _impl_.activation_7_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.linear_9_ != nullptr);
      _impl_.linear_9_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.activation_10_ != nullptr);
      _impl_.activation_10_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegressParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_7 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_7(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DenseParameter linear_9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_9(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_10(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegressParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegressParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linear_0(this),
        _Internal::linear_0(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::activation_1(this),
        _Internal::activation_1(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linear_3(this),
        _Internal::linear_3(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::activation_4(this),
        _Internal::activation_4(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_6 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::linear_6(this),
        _Internal::linear_6(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_7 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::activation_7(this),
        _Internal::activation_7(this).GetCachedSize(), target, stream);
  }

  // optional .DenseParameter linear_9 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::linear_9(this),
        _Internal::linear_9(this).GetCachedSize(), target, stream);
  }

  // optional .ActivationParameter activation_10 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::activation_10(this),
        _Internal::activation_10(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegressParameter)
  return target;
}

size_t RegressParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegressParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_4_);
    }

    // optional .DenseParameter linear_6 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_6_);
    }

    // optional .ActivationParameter activation_7 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_7_);
    }

    // optional .DenseParameter linear_9 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_9_);
    }

    // optional .ActivationParameter activation_10 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_10_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegressParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegressParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegressParameter::GetClassData() const { return &_class_data_; }

void RegressParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegressParameter *>(to)->MergeFrom(
      static_cast<const RegressParameter &>(from));
}


void RegressParameter::MergeFrom(const RegressParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegressParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_6()->::DenseParameter::MergeFrom(from._internal_linear_6());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_activation_7()->::ActivationParameter::MergeFrom(from._internal_activation_7());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_linear_9()->::DenseParameter::MergeFrom(from._internal_linear_9());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_activation_10()->::ActivationParameter::MergeFrom(from._internal_activation_10());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegressParameter::CopyFrom(const RegressParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegressParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegressParameter::IsInitialized() const {
  return true;
}

void RegressParameter::InternalSwap(RegressParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegressParameter, _impl_.activation_10_)
      + sizeof(RegressParameter::_impl_.activation_10_)
      - PROTOBUF_FIELD_OFFSET(RegressParameter, _impl_.linear_0_)>(
          reinterpret_cast<char*>(&_impl_.linear_0_),
          reinterpret_cast<char*>(&other->_impl_.linear_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegressParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[10]);
}

// ===================================================================

class CruiseModelParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CruiseModelParameter>()._impl_._has_bits_);
  static const ::LaneFeatureConvParameter& lane_feature_conv(const CruiseModelParameter* msg);
  static void set_has_lane_feature_conv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MaxPool1dParameter& lane_feature_maxpool(const CruiseModelParameter* msg);
  static void set_has_lane_feature_maxpool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AvgPool1dParameter& lane_feature_avgpool(const CruiseModelParameter* msg);
  static void set_has_lane_feature_avgpool(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ObsFeatureFCParameter& obs_feature_fc(const CruiseModelParameter* msg);
  static void set_has_obs_feature_fc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ClassifyParameter& classify(const CruiseModelParameter* msg);
  static void set_has_classify(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RegressParameter& regress(const CruiseModelParameter* msg);
  static void set_has_regress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::LaneFeatureConvParameter&
CruiseModelParameter::_Internal::lane_feature_conv(const CruiseModelParameter* msg) {
  return *msg->_impl_.lane_feature_conv_;
}
const ::MaxPool1dParameter&
CruiseModelParameter::_Internal::lane_feature_maxpool(const CruiseModelParameter* msg) {
  return *msg->_impl_.lane_feature_maxpool_;
}
const ::AvgPool1dParameter&
CruiseModelParameter::_Internal::lane_feature_avgpool(const CruiseModelParameter* msg) {
  return *msg->_impl_.lane_feature_avgpool_;
}
const ::ObsFeatureFCParameter&
CruiseModelParameter::_Internal::obs_feature_fc(const CruiseModelParameter* msg) {
  return *msg->_impl_.obs_feature_fc_;
}
const ::ClassifyParameter&
CruiseModelParameter::_Internal::classify(const CruiseModelParameter* msg) {
  return *msg->_impl_.classify_;
}
const ::RegressParameter&
CruiseModelParameter::_Internal::regress(const CruiseModelParameter* msg) {
  return *msg->_impl_.regress_;
}
CruiseModelParameter::CruiseModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CruiseModelParameter)
}
CruiseModelParameter::CruiseModelParameter(const CruiseModelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_feature_conv_){nullptr}
    , decltype(_impl_.lane_feature_maxpool_){nullptr}
    , decltype(_impl_.lane_feature_avgpool_){nullptr}
    , decltype(_impl_.obs_feature_fc_){nullptr}
    , decltype(_impl_.classify_){nullptr}
    , decltype(_impl_.regress_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_feature_conv()) {
    _impl_.lane_feature_conv_ = new ::LaneFeatureConvParameter(*from._impl_.lane_feature_conv_);
  }
  if (from._internal_has_lane_feature_maxpool()) {
    _impl_.lane_feature_maxpool_ = new ::MaxPool1dParameter(*from._impl_.lane_feature_maxpool_);
  }
  if (from._internal_has_lane_feature_avgpool()) {
    _impl_.lane_feature_avgpool_ = new ::AvgPool1dParameter(*from._impl_.lane_feature_avgpool_);
  }
  if (from._internal_has_obs_feature_fc()) {
    _impl_.obs_feature_fc_ = new ::ObsFeatureFCParameter(*from._impl_.obs_feature_fc_);
  }
  if (from._internal_has_classify()) {
    _impl_.classify_ = new ::ClassifyParameter(*from._impl_.classify_);
  }
  if (from._internal_has_regress()) {
    _impl_.regress_ = new ::RegressParameter(*from._impl_.regress_);
  }
  // @@protoc_insertion_point(copy_constructor:CruiseModelParameter)
}

inline void CruiseModelParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_feature_conv_){nullptr}
    , decltype(_impl_.lane_feature_maxpool_){nullptr}
    , decltype(_impl_.lane_feature_avgpool_){nullptr}
    , decltype(_impl_.obs_feature_fc_){nullptr}
    , decltype(_impl_.classify_){nullptr}
    , decltype(_impl_.regress_){nullptr}
  };
}

CruiseModelParameter::~CruiseModelParameter() {
  // @@protoc_insertion_point(destructor:CruiseModelParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CruiseModelParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lane_feature_conv_;
  if (this != internal_default_instance()) delete _impl_.lane_feature_maxpool_;
  if (this != internal_default_instance()) delete _impl_.lane_feature_avgpool_;
  if (this != internal_default_instance()) delete _impl_.obs_feature_fc_;
  if (this != internal_default_instance()) delete _impl_.classify_;
  if (this != internal_default_instance()) delete _impl_.regress_;
}

void CruiseModelParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CruiseModelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CruiseModelParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lane_feature_conv_ != nullptr);
      _impl_.lane_feature_conv_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lane_feature_maxpool_ != nullptr);
      _impl_.lane_feature_maxpool_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lane_feature_avgpool_ != nullptr);
      _impl_.lane_feature_avgpool_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.obs_feature_fc_ != nullptr);
      _impl_.obs_feature_fc_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.classify_ != nullptr);
      _impl_.classify_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.regress_ != nullptr);
      _impl_.regress_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CruiseModelParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .LaneFeatureConvParameter lane_feature_conv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_conv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MaxPool1dParameter lane_feature_maxpool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_maxpool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AvgPool1dParameter lane_feature_avgpool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_avgpool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ObsFeatureFCParameter obs_feature_fc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_feature_fc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ClassifyParameter classify = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_classify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RegressParameter regress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_regress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CruiseModelParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CruiseModelParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .LaneFeatureConvParameter lane_feature_conv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lane_feature_conv(this),
        _Internal::lane_feature_conv(this).GetCachedSize(), target, stream);
  }

  // optional .MaxPool1dParameter lane_feature_maxpool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lane_feature_maxpool(this),
        _Internal::lane_feature_maxpool(this).GetCachedSize(), target, stream);
  }

  // optional .AvgPool1dParameter lane_feature_avgpool = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lane_feature_avgpool(this),
        _Internal::lane_feature_avgpool(this).GetCachedSize(), target, stream);
  }

  // optional .ObsFeatureFCParameter obs_feature_fc = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::obs_feature_fc(this),
        _Internal::obs_feature_fc(this).GetCachedSize(), target, stream);
  }

  // optional .ClassifyParameter classify = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::classify(this),
        _Internal::classify(this).GetCachedSize(), target, stream);
  }

  // optional .RegressParameter regress = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::regress(this),
        _Internal::regress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CruiseModelParameter)
  return target;
}

size_t CruiseModelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CruiseModelParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .LaneFeatureConvParameter lane_feature_conv = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_feature_conv_);
    }

    // optional .MaxPool1dParameter lane_feature_maxpool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_feature_maxpool_);
    }

    // optional .AvgPool1dParameter lane_feature_avgpool = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_feature_avgpool_);
    }

    // optional .ObsFeatureFCParameter obs_feature_fc = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obs_feature_fc_);
    }

    // optional .ClassifyParameter classify = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classify_);
    }

    // optional .RegressParameter regress = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.regress_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CruiseModelParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CruiseModelParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CruiseModelParameter::GetClassData() const { return &_class_data_; }

void CruiseModelParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CruiseModelParameter *>(to)->MergeFrom(
      static_cast<const CruiseModelParameter &>(from));
}


void CruiseModelParameter::MergeFrom(const CruiseModelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CruiseModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_feature_conv()->::LaneFeatureConvParameter::MergeFrom(from._internal_lane_feature_conv());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_feature_maxpool()->::MaxPool1dParameter::MergeFrom(from._internal_lane_feature_maxpool());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_feature_avgpool()->::AvgPool1dParameter::MergeFrom(from._internal_lane_feature_avgpool());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_obs_feature_fc()->::ObsFeatureFCParameter::MergeFrom(from._internal_obs_feature_fc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_classify()->::ClassifyParameter::MergeFrom(from._internal_classify());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_regress()->::RegressParameter::MergeFrom(from._internal_regress());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CruiseModelParameter::CopyFrom(const CruiseModelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CruiseModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CruiseModelParameter::IsInitialized() const {
  return true;
}

void CruiseModelParameter::InternalSwap(CruiseModelParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CruiseModelParameter, _impl_.regress_)
      + sizeof(CruiseModelParameter::_impl_.regress_)
      - PROTOBUF_FIELD_OFFSET(CruiseModelParameter, _impl_.lane_feature_conv_)>(
          reinterpret_cast<char*>(&_impl_.lane_feature_conv_),
          reinterpret_cast<char*>(&other->_impl_.lane_feature_conv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CruiseModelParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_getter, &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once,
      file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TensorParameter*
Arena::CreateMaybeMessage< ::TensorParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TensorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::InputParameter*
Arena::CreateMaybeMessage< ::InputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::Conv1dParameter*
Arena::CreateMaybeMessage< ::Conv1dParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Conv1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::DenseParameter*
Arena::CreateMaybeMessage< ::DenseParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DenseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ActivationParameter*
Arena::CreateMaybeMessage< ::ActivationParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActivationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::MaxPool1dParameter*
Arena::CreateMaybeMessage< ::MaxPool1dParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MaxPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::AvgPool1dParameter*
Arena::CreateMaybeMessage< ::AvgPool1dParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AvgPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::LaneFeatureConvParameter*
Arena::CreateMaybeMessage< ::LaneFeatureConvParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LaneFeatureConvParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ObsFeatureFCParameter*
Arena::CreateMaybeMessage< ::ObsFeatureFCParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObsFeatureFCParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassifyParameter*
Arena::CreateMaybeMessage< ::ClassifyParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClassifyParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::RegressParameter*
Arena::CreateMaybeMessage< ::RegressParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegressParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CruiseModelParameter*
Arena::CreateMaybeMessage< ::CruiseModelParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CruiseModelParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
