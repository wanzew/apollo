// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/navigator/dbmap/proto/dbmap.proto

#include "modules/tools/navigator/dbmap/proto/dbmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace dbmap {
PROTOBUF_CONSTEXPR DBPoint::DBPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.heading_)*/0} {}
struct DBPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPointDefaultTypeInternal() {}
  union {
    DBPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPointDefaultTypeInternal _DBPoint_default_instance_;
PROTOBUF_CONSTEXPR DBLine::DBLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBLineDefaultTypeInternal() {}
  union {
    DBLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBLineDefaultTypeInternal _DBLine_default_instance_;
PROTOBUF_CONSTEXPR DBNeighbourSegment::DBNeighbourSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0
  , /*decltype(_impl_.path_start_s_)*/0
  , /*decltype(_impl_.path_end_s_)*/0} {}
struct DBNeighbourSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBNeighbourSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBNeighbourSegmentDefaultTypeInternal() {}
  union {
    DBNeighbourSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBNeighbourSegmentDefaultTypeInternal _DBNeighbourSegment_default_instance_;
PROTOBUF_CONSTEXPR DBNeighbourPath::DBNeighbourPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBNeighbourPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBNeighbourPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBNeighbourPathDefaultTypeInternal() {}
  union {
    DBNeighbourPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBNeighbourPathDefaultTypeInternal _DBNeighbourPath_default_instance_;
PROTOBUF_CONSTEXPR DBPath::DBPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{}
  , /*decltype(_impl_.left_bounday_)*/{}
  , /*decltype(_impl_.right_bounday_)*/{}
  , /*decltype(_impl_.left_path_)*/{}
  , /*decltype(_impl_.right_path_)*/{}
  , /*decltype(_impl_.duplicate_path_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DBPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPathDefaultTypeInternal() {}
  union {
    DBPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPathDefaultTypeInternal _DBPath_default_instance_;
PROTOBUF_CONSTEXPR DBMap::DBMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBMapDefaultTypeInternal() {}
  union {
    DBMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBMapDefaultTypeInternal _DBMap_default_instance_;
}  // namespace dbmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;

const uint32_t TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _impl_.heading_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_.end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_.path_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_.path_start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _impl_.path_end_s_),
  1,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, _impl_.segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.left_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.right_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.left_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.right_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _impl_.duplicate_path_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, _impl_.paths_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::dbmap::DBPoint)},
  { 16, -1, -1, sizeof(::apollo::dbmap::DBLine)},
  { 23, 34, -1, sizeof(::apollo::dbmap::DBNeighbourSegment)},
  { 39, -1, -1, sizeof(::apollo::dbmap::DBNeighbourPath)},
  { 46, 59, -1, sizeof(::apollo::dbmap::DBPath)},
  { 66, -1, -1, sizeof(::apollo::dbmap::DBMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::dbmap::_DBPoint_default_instance_._instance,
  &::apollo::dbmap::_DBLine_default_instance_._instance,
  &::apollo::dbmap::_DBNeighbourSegment_default_instance_._instance,
  &::apollo::dbmap::_DBNeighbourPath_default_instance_._instance,
  &::apollo::dbmap::_DBPath_default_instance_._instance,
  &::apollo::dbmap::_DBMap_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/tools/navigator/dbmap/proto/db"
  "map.proto\022\014apollo.dbmap\"F\n\007DBPoint\022\t\n\001x\030"
  "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001s\030\004 \001(\001\022\017"
  "\n\007heading\030\005 \001(\001\".\n\006DBLine\022$\n\005point\030\001 \003(\013"
  "2\025.apollo.dbmap.DBPoint\"o\n\022DBNeighbourSe"
  "gment\022\017\n\007start_s\030\001 \001(\001\022\r\n\005end_s\030\002 \001(\001\022\017\n"
  "\007path_id\030\003 \001(\t\022\024\n\014path_start_s\030\004 \001(\001\022\022\n\n"
  "path_end_s\030\005 \001(\001\"D\n\017DBNeighbourPath\0221\n\007s"
  "egment\030\001 \003(\0132 .apollo.dbmap.DBNeighbourS"
  "egment\"\255\002\n\006DBPath\022\n\n\002id\030\001 \001(\t\022\"\n\004path\030\002 "
  "\003(\0132\024.apollo.dbmap.DBLine\022*\n\014left_bounda"
  "y\030\003 \003(\0132\024.apollo.dbmap.DBLine\022+\n\rright_b"
  "ounday\030\004 \003(\0132\024.apollo.dbmap.DBLine\0220\n\tle"
  "ft_path\030\005 \003(\0132\035.apollo.dbmap.DBNeighbour"
  "Path\0221\n\nright_path\030\006 \003(\0132\035.apollo.dbmap."
  "DBNeighbourPath\0225\n\016duplicate_path\030\007 \003(\0132"
  "\035.apollo.dbmap.DBNeighbourPath\",\n\005DBMap\022"
  "#\n\005paths\030\001 \003(\0132\024.apollo.dbmap.DBPath"
  ;
static ::_pbi::once_flag descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = {
    false, false, 716, descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto,
    "modules/tools/navigator/dbmap/proto/dbmap.proto",
    &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets,
    file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto,
    file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter() {
  return &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto(&descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto);
namespace apollo {
namespace dbmap {

// ===================================================================

class DBPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPoint>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBPoint::DBPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBPoint)
}
DBPoint::DBPoint(const DBPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.s_){}
    , decltype(_impl_.heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heading_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPoint)
}

inline void DBPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.heading_){0}
  };
}

DBPoint::~DBPoint() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heading_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.heading_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPoint)
  return target;
}

size_t DBPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPoint::GetClassData() const { return &_class_data_; }

void DBPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBPoint *>(to)->MergeFrom(
      static_cast<const DBPoint &>(from));
}


void DBPoint::MergeFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPoint::CopyFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPoint::IsInitialized() const {
  return true;
}

void DBPoint::InternalSwap(DBPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPoint, _impl_.heading_)
      + sizeof(DBPoint::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(DBPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[0]);
}

// ===================================================================

class DBLine::_Internal {
 public:
};

DBLine::DBLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBLine)
}
DBLine::DBLine(const DBLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.point_){from._impl_.point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBLine)
}

inline void DBLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBLine::~DBLine() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
}

void DBLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBLine)
  return target;
}

size_t DBLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBLine::GetClassData() const { return &_class_data_; }

void DBLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBLine *>(to)->MergeFrom(
      static_cast<const DBLine &>(from));
}


void DBLine::MergeFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_.MergeFrom(from._impl_.point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBLine::CopyFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBLine::IsInitialized() const {
  return true;
}

void DBLine::InternalSwap(DBLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[1]);
}

// ===================================================================

class DBNeighbourSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<DBNeighbourSegment>()._impl_._has_bits_);
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBNeighbourSegment::DBNeighbourSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBNeighbourSegment)
}
DBNeighbourSegment::DBNeighbourSegment(const DBNeighbourSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_){}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}
    , decltype(_impl_.path_start_s_){}
    , decltype(_impl_.path_end_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_id()) {
    _impl_.path_id_.Set(from._internal_path_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_s_, &from._impl_.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.path_end_s_) -
    reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.path_end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourSegment)
}

inline void DBNeighbourSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_){}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
    , decltype(_impl_.path_start_s_){0}
    , decltype(_impl_.path_end_s_){0}
  };
  _impl_.path_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBNeighbourSegment::~DBNeighbourSegment() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBNeighbourSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_id_.Destroy();
}

void DBNeighbourSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBNeighbourSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.path_end_s_) -
        reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.path_end_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBNeighbourSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string path_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dbmap.DBNeighbourSegment.path_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double path_start_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_path_start_s(&has_bits);
          _impl_.path_start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_end_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_path_end_s(&has_bits);
          _impl_.path_end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBNeighbourSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_s(), target);
  }

  // optional string path_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_id().data(), static_cast<int>(this->_internal_path_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBNeighbourSegment.path_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path_id(), target);
  }

  // optional double path_start_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_path_start_s(), target);
  }

  // optional double path_end_s = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_path_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourSegment)
  return target;
}

size_t DBNeighbourSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_id());
    }

    // optional double start_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double path_start_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double path_end_s = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBNeighbourSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBNeighbourSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBNeighbourSegment::GetClassData() const { return &_class_data_; }

void DBNeighbourSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBNeighbourSegment *>(to)->MergeFrom(
      static_cast<const DBNeighbourSegment &>(from));
}


void DBNeighbourSegment::MergeFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path_id(from._internal_path_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.end_s_ = from._impl_.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.path_start_s_ = from._impl_.path_start_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.path_end_s_ = from._impl_.path_end_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBNeighbourSegment::CopyFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourSegment::IsInitialized() const {
  return true;
}

void DBNeighbourSegment::InternalSwap(DBNeighbourSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_id_, lhs_arena,
      &other->_impl_.path_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBNeighbourSegment, _impl_.path_end_s_)
      + sizeof(DBNeighbourSegment::_impl_.path_end_s_)
      - PROTOBUF_FIELD_OFFSET(DBNeighbourSegment, _impl_.start_s_)>(
          reinterpret_cast<char*>(&_impl_.start_s_),
          reinterpret_cast<char*>(&other->_impl_.start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[2]);
}

// ===================================================================

class DBNeighbourPath::_Internal {
 public:
};

DBNeighbourPath::DBNeighbourPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBNeighbourPath)
}
DBNeighbourPath::DBNeighbourPath(const DBNeighbourPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.segment_){from._impl_.segment_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourPath)
}

inline void DBNeighbourPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBNeighbourPath::~DBNeighbourPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBNeighbourPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_.~RepeatedPtrField();
}

void DBNeighbourPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBNeighbourPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBNeighbourPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBNeighbourPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourPath)
  return target;
}

size_t DBNeighbourPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->_impl_.segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBNeighbourPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBNeighbourPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBNeighbourPath::GetClassData() const { return &_class_data_; }

void DBNeighbourPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBNeighbourPath *>(to)->MergeFrom(
      static_cast<const DBNeighbourPath &>(from));
}


void DBNeighbourPath::MergeFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.segment_.MergeFrom(from._impl_.segment_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBNeighbourPath::CopyFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourPath::IsInitialized() const {
  return true;
}

void DBNeighbourPath::InternalSwap(DBNeighbourPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_.InternalSwap(&other->_impl_.segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[3]);
}

// ===================================================================

class DBPath::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPath>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DBPath::DBPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBPath)
}
DBPath::DBPath(const DBPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){from._impl_.path_}
    , decltype(_impl_.left_bounday_){from._impl_.left_bounday_}
    , decltype(_impl_.right_bounday_){from._impl_.right_bounday_}
    , decltype(_impl_.left_path_){from._impl_.left_path_}
    , decltype(_impl_.right_path_){from._impl_.right_path_}
    , decltype(_impl_.duplicate_path_){from._impl_.duplicate_path_}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPath)
}

inline void DBPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){arena}
    , decltype(_impl_.left_bounday_){arena}
    , decltype(_impl_.right_bounday_){arena}
    , decltype(_impl_.left_path_){arena}
    , decltype(_impl_.right_path_){arena}
    , decltype(_impl_.duplicate_path_){arena}
    , decltype(_impl_.id_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBPath::~DBPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.~RepeatedPtrField();
  _impl_.left_bounday_.~RepeatedPtrField();
  _impl_.right_bounday_.~RepeatedPtrField();
  _impl_.left_path_.~RepeatedPtrField();
  _impl_.right_path_.~RepeatedPtrField();
  _impl_.duplicate_path_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void DBPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.left_bounday_.Clear();
  _impl_.right_bounday_.Clear();
  _impl_.left_path_.Clear();
  _impl_.right_path_.Clear();
  _impl_.duplicate_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.dbmap.DBPath.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine left_bounday = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine right_bounday = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_duplicate_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBPath.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.dbmap.DBLine path = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_bounday_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_bounday(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_bounday_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_bounday(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_duplicate_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_duplicate_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPath)
  return target;
}

size_t DBPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBLine path = 2;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->_impl_.path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  total_size += 1UL * this->_internal_left_bounday_size();
  for (const auto& msg : this->_impl_.left_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  total_size += 1UL * this->_internal_right_bounday_size();
  for (const auto& msg : this->_impl_.right_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  total_size += 1UL * this->_internal_left_path_size();
  for (const auto& msg : this->_impl_.left_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  total_size += 1UL * this->_internal_right_path_size();
  for (const auto& msg : this->_impl_.right_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  total_size += 1UL * this->_internal_duplicate_path_size();
  for (const auto& msg : this->_impl_.duplicate_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPath::GetClassData() const { return &_class_data_; }

void DBPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBPath *>(to)->MergeFrom(
      static_cast<const DBPath &>(from));
}


void DBPath::MergeFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.path_.MergeFrom(from._impl_.path_);
  _impl_.left_bounday_.MergeFrom(from._impl_.left_bounday_);
  _impl_.right_bounday_.MergeFrom(from._impl_.right_bounday_);
  _impl_.left_path_.MergeFrom(from._impl_.left_path_);
  _impl_.right_path_.MergeFrom(from._impl_.right_path_);
  _impl_.duplicate_path_.MergeFrom(from._impl_.duplicate_path_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPath::CopyFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPath::IsInitialized() const {
  return true;
}

void DBPath::InternalSwap(DBPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  _impl_.left_bounday_.InternalSwap(&other->_impl_.left_bounday_);
  _impl_.right_bounday_.InternalSwap(&other->_impl_.right_bounday_);
  _impl_.left_path_.InternalSwap(&other->_impl_.left_path_);
  _impl_.right_path_.InternalSwap(&other->_impl_.right_path_);
  _impl_.duplicate_path_.InternalSwap(&other->_impl_.duplicate_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[4]);
}

// ===================================================================

class DBMap::_Internal {
 public:
};

DBMap::DBMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBMap)
}
DBMap::DBMap(const DBMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){from._impl_.paths_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBMap)
}

inline void DBMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBMap::~DBMap() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
}

void DBMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPath paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBMap)
  return target;
}

size_t DBMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMap::GetClassData() const { return &_class_data_; }

void DBMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBMap *>(to)->MergeFrom(
      static_cast<const DBMap &>(from));
}


void DBMap::MergeFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.paths_.MergeFrom(from._impl_.paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMap::CopyFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMap::IsInitialized() const {
  return true;
}

void DBMap::InternalSwap(DBMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPoint*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBLine*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourSegment*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBNeighbourSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourPath*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBNeighbourPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPath*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBMap*
Arena::CreateMaybeMessage< ::apollo::dbmap::DBMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
