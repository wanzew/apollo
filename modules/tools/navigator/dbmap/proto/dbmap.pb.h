// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/navigator/dbmap/proto/dbmap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
namespace apollo {
namespace dbmap {
class DBLine;
struct DBLineDefaultTypeInternal;
extern DBLineDefaultTypeInternal _DBLine_default_instance_;
class DBMap;
struct DBMapDefaultTypeInternal;
extern DBMapDefaultTypeInternal _DBMap_default_instance_;
class DBNeighbourPath;
struct DBNeighbourPathDefaultTypeInternal;
extern DBNeighbourPathDefaultTypeInternal _DBNeighbourPath_default_instance_;
class DBNeighbourSegment;
struct DBNeighbourSegmentDefaultTypeInternal;
extern DBNeighbourSegmentDefaultTypeInternal _DBNeighbourSegment_default_instance_;
class DBPath;
struct DBPathDefaultTypeInternal;
extern DBPathDefaultTypeInternal _DBPath_default_instance_;
class DBPoint;
struct DBPointDefaultTypeInternal;
extern DBPointDefaultTypeInternal _DBPoint_default_instance_;
}  // namespace dbmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dbmap::DBLine* Arena::CreateMaybeMessage<::apollo::dbmap::DBLine>(Arena*);
template<> ::apollo::dbmap::DBMap* Arena::CreateMaybeMessage<::apollo::dbmap::DBMap>(Arena*);
template<> ::apollo::dbmap::DBNeighbourPath* Arena::CreateMaybeMessage<::apollo::dbmap::DBNeighbourPath>(Arena*);
template<> ::apollo::dbmap::DBNeighbourSegment* Arena::CreateMaybeMessage<::apollo::dbmap::DBNeighbourSegment>(Arena*);
template<> ::apollo::dbmap::DBPath* Arena::CreateMaybeMessage<::apollo::dbmap::DBPath>(Arena*);
template<> ::apollo::dbmap::DBPoint* Arena::CreateMaybeMessage<::apollo::dbmap::DBPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dbmap {

// ===================================================================

class DBPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBPoint) */ {
 public:
  inline DBPoint() : DBPoint(nullptr) {}
  ~DBPoint() override;
  explicit PROTOBUF_CONSTEXPR DBPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPoint(const DBPoint& from);
  DBPoint(DBPoint&& from) noexcept
    : DBPoint() {
    *this = ::std::move(from);
  }

  inline DBPoint& operator=(const DBPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPoint& operator=(DBPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPoint* internal_default_instance() {
    return reinterpret_cast<const DBPoint*>(
               &_DBPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBPoint& a, DBPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBPoint";
  }
  protected:
  explicit DBPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kSFieldNumber = 4,
    kHeadingFieldNumber = 5,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double s = 4;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
    double s_;
    double heading_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// -------------------------------------------------------------------

class DBLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBLine) */ {
 public:
  inline DBLine() : DBLine(nullptr) {}
  ~DBLine() override;
  explicit PROTOBUF_CONSTEXPR DBLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBLine(const DBLine& from);
  DBLine(DBLine&& from) noexcept
    : DBLine() {
    *this = ::std::move(from);
  }

  inline DBLine& operator=(const DBLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBLine& operator=(DBLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBLine* internal_default_instance() {
    return reinterpret_cast<const DBLine*>(
               &_DBLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBLine& a, DBLine& b) {
    a.Swap(&b);
  }
  inline void Swap(DBLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBLine& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBLine";
  }
  protected:
  explicit DBLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .apollo.dbmap.DBPoint point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::dbmap::DBPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPoint >*
      mutable_point();
  private:
  const ::apollo::dbmap::DBPoint& _internal_point(int index) const;
  ::apollo::dbmap::DBPoint* _internal_add_point();
  public:
  const ::apollo::dbmap::DBPoint& point(int index) const;
  ::apollo::dbmap::DBPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPoint >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPoint > point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// -------------------------------------------------------------------

class DBNeighbourSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBNeighbourSegment) */ {
 public:
  inline DBNeighbourSegment() : DBNeighbourSegment(nullptr) {}
  ~DBNeighbourSegment() override;
  explicit PROTOBUF_CONSTEXPR DBNeighbourSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBNeighbourSegment(const DBNeighbourSegment& from);
  DBNeighbourSegment(DBNeighbourSegment&& from) noexcept
    : DBNeighbourSegment() {
    *this = ::std::move(from);
  }

  inline DBNeighbourSegment& operator=(const DBNeighbourSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBNeighbourSegment& operator=(DBNeighbourSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBNeighbourSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBNeighbourSegment* internal_default_instance() {
    return reinterpret_cast<const DBNeighbourSegment*>(
               &_DBNeighbourSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DBNeighbourSegment& a, DBNeighbourSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(DBNeighbourSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBNeighbourSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBNeighbourSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBNeighbourSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBNeighbourSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBNeighbourSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBNeighbourSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBNeighbourSegment";
  }
  protected:
  explicit DBNeighbourSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathIdFieldNumber = 3,
    kStartSFieldNumber = 1,
    kEndSFieldNumber = 2,
    kPathStartSFieldNumber = 4,
    kPathEndSFieldNumber = 5,
  };
  // optional string path_id = 3;
  bool has_path_id() const;
  private:
  bool _internal_has_path_id() const;
  public:
  void clear_path_id();
  const std::string& path_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_id();
  PROTOBUF_NODISCARD std::string* release_path_id();
  void set_allocated_path_id(std::string* path_id);
  private:
  const std::string& _internal_path_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_id(const std::string& value);
  std::string* _internal_mutable_path_id();
  public:

  // optional double start_s = 1;
  bool has_start_s() const;
  private:
  bool _internal_has_start_s() const;
  public:
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);
  private:
  double _internal_start_s() const;
  void _internal_set_start_s(double value);
  public:

  // optional double end_s = 2;
  bool has_end_s() const;
  private:
  bool _internal_has_end_s() const;
  public:
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);
  private:
  double _internal_end_s() const;
  void _internal_set_end_s(double value);
  public:

  // optional double path_start_s = 4;
  bool has_path_start_s() const;
  private:
  bool _internal_has_path_start_s() const;
  public:
  void clear_path_start_s();
  double path_start_s() const;
  void set_path_start_s(double value);
  private:
  double _internal_path_start_s() const;
  void _internal_set_path_start_s(double value);
  public:

  // optional double path_end_s = 5;
  bool has_path_end_s() const;
  private:
  bool _internal_has_path_end_s() const;
  public:
  void clear_path_end_s();
  double path_end_s() const;
  void set_path_end_s(double value);
  private:
  double _internal_path_end_s() const;
  void _internal_set_path_end_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBNeighbourSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_id_;
    double start_s_;
    double end_s_;
    double path_start_s_;
    double path_end_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// -------------------------------------------------------------------

class DBNeighbourPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBNeighbourPath) */ {
 public:
  inline DBNeighbourPath() : DBNeighbourPath(nullptr) {}
  ~DBNeighbourPath() override;
  explicit PROTOBUF_CONSTEXPR DBNeighbourPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBNeighbourPath(const DBNeighbourPath& from);
  DBNeighbourPath(DBNeighbourPath&& from) noexcept
    : DBNeighbourPath() {
    *this = ::std::move(from);
  }

  inline DBNeighbourPath& operator=(const DBNeighbourPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBNeighbourPath& operator=(DBNeighbourPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBNeighbourPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBNeighbourPath* internal_default_instance() {
    return reinterpret_cast<const DBNeighbourPath*>(
               &_DBNeighbourPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DBNeighbourPath& a, DBNeighbourPath& b) {
    a.Swap(&b);
  }
  inline void Swap(DBNeighbourPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBNeighbourPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBNeighbourPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBNeighbourPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBNeighbourPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBNeighbourPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBNeighbourPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBNeighbourPath";
  }
  protected:
  explicit DBNeighbourPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 1,
  };
  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  int segment_size() const;
  private:
  int _internal_segment_size() const;
  public:
  void clear_segment();
  ::apollo::dbmap::DBNeighbourSegment* mutable_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourSegment >*
      mutable_segment();
  private:
  const ::apollo::dbmap::DBNeighbourSegment& _internal_segment(int index) const;
  ::apollo::dbmap::DBNeighbourSegment* _internal_add_segment();
  public:
  const ::apollo::dbmap::DBNeighbourSegment& segment(int index) const;
  ::apollo::dbmap::DBNeighbourSegment* add_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourSegment >&
      segment() const;

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBNeighbourPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourSegment > segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// -------------------------------------------------------------------

class DBPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBPath) */ {
 public:
  inline DBPath() : DBPath(nullptr) {}
  ~DBPath() override;
  explicit PROTOBUF_CONSTEXPR DBPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPath(const DBPath& from);
  DBPath(DBPath&& from) noexcept
    : DBPath() {
    *this = ::std::move(from);
  }

  inline DBPath& operator=(const DBPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPath& operator=(DBPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPath* internal_default_instance() {
    return reinterpret_cast<const DBPath*>(
               &_DBPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DBPath& a, DBPath& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBPath";
  }
  protected:
  explicit DBPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kLeftBoundayFieldNumber = 3,
    kRightBoundayFieldNumber = 4,
    kLeftPathFieldNumber = 5,
    kRightPathFieldNumber = 6,
    kDuplicatePathFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // repeated .apollo.dbmap.DBLine path = 2;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::apollo::dbmap::DBLine* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
      mutable_path();
  private:
  const ::apollo::dbmap::DBLine& _internal_path(int index) const;
  ::apollo::dbmap::DBLine* _internal_add_path();
  public:
  const ::apollo::dbmap::DBLine& path(int index) const;
  ::apollo::dbmap::DBLine* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
      path() const;

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  int left_bounday_size() const;
  private:
  int _internal_left_bounday_size() const;
  public:
  void clear_left_bounday();
  ::apollo::dbmap::DBLine* mutable_left_bounday(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
      mutable_left_bounday();
  private:
  const ::apollo::dbmap::DBLine& _internal_left_bounday(int index) const;
  ::apollo::dbmap::DBLine* _internal_add_left_bounday();
  public:
  const ::apollo::dbmap::DBLine& left_bounday(int index) const;
  ::apollo::dbmap::DBLine* add_left_bounday();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
      left_bounday() const;

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  int right_bounday_size() const;
  private:
  int _internal_right_bounday_size() const;
  public:
  void clear_right_bounday();
  ::apollo::dbmap::DBLine* mutable_right_bounday(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
      mutable_right_bounday();
  private:
  const ::apollo::dbmap::DBLine& _internal_right_bounday(int index) const;
  ::apollo::dbmap::DBLine* _internal_add_right_bounday();
  public:
  const ::apollo::dbmap::DBLine& right_bounday(int index) const;
  ::apollo::dbmap::DBLine* add_right_bounday();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
      right_bounday() const;

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  int left_path_size() const;
  private:
  int _internal_left_path_size() const;
  public:
  void clear_left_path();
  ::apollo::dbmap::DBNeighbourPath* mutable_left_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
      mutable_left_path();
  private:
  const ::apollo::dbmap::DBNeighbourPath& _internal_left_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* _internal_add_left_path();
  public:
  const ::apollo::dbmap::DBNeighbourPath& left_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* add_left_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
      left_path() const;

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  int right_path_size() const;
  private:
  int _internal_right_path_size() const;
  public:
  void clear_right_path();
  ::apollo::dbmap::DBNeighbourPath* mutable_right_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
      mutable_right_path();
  private:
  const ::apollo::dbmap::DBNeighbourPath& _internal_right_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* _internal_add_right_path();
  public:
  const ::apollo::dbmap::DBNeighbourPath& right_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* add_right_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
      right_path() const;

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  int duplicate_path_size() const;
  private:
  int _internal_duplicate_path_size() const;
  public:
  void clear_duplicate_path();
  ::apollo::dbmap::DBNeighbourPath* mutable_duplicate_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
      mutable_duplicate_path();
  private:
  const ::apollo::dbmap::DBNeighbourPath& _internal_duplicate_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* _internal_add_duplicate_path();
  public:
  const ::apollo::dbmap::DBNeighbourPath& duplicate_path(int index) const;
  ::apollo::dbmap::DBNeighbourPath* add_duplicate_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
      duplicate_path() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine > path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine > left_bounday_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine > right_bounday_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath > left_path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath > right_path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath > duplicate_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// -------------------------------------------------------------------

class DBMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dbmap.DBMap) */ {
 public:
  inline DBMap() : DBMap(nullptr) {}
  ~DBMap() override;
  explicit PROTOBUF_CONSTEXPR DBMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMap(const DBMap& from);
  DBMap(DBMap&& from) noexcept
    : DBMap() {
    *this = ::std::move(from);
  }

  inline DBMap& operator=(const DBMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMap& operator=(DBMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMap* internal_default_instance() {
    return reinterpret_cast<const DBMap*>(
               &_DBMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DBMap& a, DBMap& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dbmap.DBMap";
  }
  protected:
  explicit DBMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 1,
  };
  // repeated .apollo.dbmap.DBPath paths = 1;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::apollo::dbmap::DBPath* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPath >*
      mutable_paths();
  private:
  const ::apollo::dbmap::DBPath& _internal_paths(int index) const;
  ::apollo::dbmap::DBPath* _internal_add_paths();
  public:
  const ::apollo::dbmap::DBPath& paths(int index) const;
  ::apollo::dbmap::DBPath* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPath >&
      paths() const;

  // @@protoc_insertion_point(class_scope:apollo.dbmap.DBMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPath > paths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBPoint

// optional double x = 1;
inline bool DBPoint::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBPoint::has_x() const {
  return _internal_has_x();
}
inline void DBPoint::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double DBPoint::_internal_x() const {
  return _impl_.x_;
}
inline double DBPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPoint.x)
  return _internal_x();
}
inline void DBPoint::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void DBPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPoint.x)
}

// optional double y = 2;
inline bool DBPoint::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBPoint::has_y() const {
  return _internal_has_y();
}
inline void DBPoint::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DBPoint::_internal_y() const {
  return _impl_.y_;
}
inline double DBPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPoint.y)
  return _internal_y();
}
inline void DBPoint::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void DBPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPoint.y)
}

// optional double z = 3;
inline bool DBPoint::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBPoint::has_z() const {
  return _internal_has_z();
}
inline void DBPoint::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double DBPoint::_internal_z() const {
  return _impl_.z_;
}
inline double DBPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPoint.z)
  return _internal_z();
}
inline void DBPoint::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void DBPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPoint.z)
}

// optional double s = 4;
inline bool DBPoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBPoint::has_s() const {
  return _internal_has_s();
}
inline void DBPoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DBPoint::_internal_s() const {
  return _impl_.s_;
}
inline double DBPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPoint.s)
  return _internal_s();
}
inline void DBPoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.s_ = value;
}
inline void DBPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPoint.s)
}

// optional double heading = 5;
inline bool DBPoint::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBPoint::has_heading() const {
  return _internal_has_heading();
}
inline void DBPoint::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DBPoint::_internal_heading() const {
  return _impl_.heading_;
}
inline double DBPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPoint.heading)
  return _internal_heading();
}
inline void DBPoint::_internal_set_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.heading_ = value;
}
inline void DBPoint::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPoint.heading)
}

// -------------------------------------------------------------------

// DBLine

// repeated .apollo.dbmap.DBPoint point = 1;
inline int DBLine::_internal_point_size() const {
  return _impl_.point_.size();
}
inline int DBLine::point_size() const {
  return _internal_point_size();
}
inline void DBLine::clear_point() {
  _impl_.point_.Clear();
}
inline ::apollo::dbmap::DBPoint* DBLine::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBLine.point)
  return _impl_.point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPoint >*
DBLine::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBLine.point)
  return &_impl_.point_;
}
inline const ::apollo::dbmap::DBPoint& DBLine::_internal_point(int index) const {
  return _impl_.point_.Get(index);
}
inline const ::apollo::dbmap::DBPoint& DBLine::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBLine.point)
  return _internal_point(index);
}
inline ::apollo::dbmap::DBPoint* DBLine::_internal_add_point() {
  return _impl_.point_.Add();
}
inline ::apollo::dbmap::DBPoint* DBLine::add_point() {
  ::apollo::dbmap::DBPoint* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBLine.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPoint >&
DBLine::point() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBLine.point)
  return _impl_.point_;
}

// -------------------------------------------------------------------

// DBNeighbourSegment

// optional double start_s = 1;
inline bool DBNeighbourSegment::_internal_has_start_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBNeighbourSegment::has_start_s() const {
  return _internal_has_start_s();
}
inline void DBNeighbourSegment::clear_start_s() {
  _impl_.start_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DBNeighbourSegment::_internal_start_s() const {
  return _impl_.start_s_;
}
inline double DBNeighbourSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourSegment.start_s)
  return _internal_start_s();
}
inline void DBNeighbourSegment::_internal_set_start_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_s_ = value;
}
inline void DBNeighbourSegment::set_start_s(double value) {
  _internal_set_start_s(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBNeighbourSegment.start_s)
}

// optional double end_s = 2;
inline bool DBNeighbourSegment::_internal_has_end_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBNeighbourSegment::has_end_s() const {
  return _internal_has_end_s();
}
inline void DBNeighbourSegment::clear_end_s() {
  _impl_.end_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double DBNeighbourSegment::_internal_end_s() const {
  return _impl_.end_s_;
}
inline double DBNeighbourSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourSegment.end_s)
  return _internal_end_s();
}
inline void DBNeighbourSegment::_internal_set_end_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_s_ = value;
}
inline void DBNeighbourSegment::set_end_s(double value) {
  _internal_set_end_s(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBNeighbourSegment.end_s)
}

// optional string path_id = 3;
inline bool DBNeighbourSegment::_internal_has_path_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBNeighbourSegment::has_path_id() const {
  return _internal_has_path_id();
}
inline void DBNeighbourSegment::clear_path_id() {
  _impl_.path_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBNeighbourSegment::path_id() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourSegment.path_id)
  return _internal_path_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBNeighbourSegment::set_path_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBNeighbourSegment.path_id)
}
inline std::string* DBNeighbourSegment::mutable_path_id() {
  std::string* _s = _internal_mutable_path_id();
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBNeighbourSegment.path_id)
  return _s;
}
inline const std::string& DBNeighbourSegment::_internal_path_id() const {
  return _impl_.path_id_.Get();
}
inline void DBNeighbourSegment::_internal_set_path_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DBNeighbourSegment::_internal_mutable_path_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DBNeighbourSegment::release_path_id() {
  // @@protoc_insertion_point(field_release:apollo.dbmap.DBNeighbourSegment.path_id)
  if (!_internal_has_path_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_id_.IsDefault()) {
    _impl_.path_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBNeighbourSegment::set_allocated_path_id(std::string* path_id) {
  if (path_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_id_.SetAllocated(path_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_id_.IsDefault()) {
    _impl_.path_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dbmap.DBNeighbourSegment.path_id)
}

// optional double path_start_s = 4;
inline bool DBNeighbourSegment::_internal_has_path_start_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBNeighbourSegment::has_path_start_s() const {
  return _internal_has_path_start_s();
}
inline void DBNeighbourSegment::clear_path_start_s() {
  _impl_.path_start_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DBNeighbourSegment::_internal_path_start_s() const {
  return _impl_.path_start_s_;
}
inline double DBNeighbourSegment::path_start_s() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourSegment.path_start_s)
  return _internal_path_start_s();
}
inline void DBNeighbourSegment::_internal_set_path_start_s(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.path_start_s_ = value;
}
inline void DBNeighbourSegment::set_path_start_s(double value) {
  _internal_set_path_start_s(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBNeighbourSegment.path_start_s)
}

// optional double path_end_s = 5;
inline bool DBNeighbourSegment::_internal_has_path_end_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBNeighbourSegment::has_path_end_s() const {
  return _internal_has_path_end_s();
}
inline void DBNeighbourSegment::clear_path_end_s() {
  _impl_.path_end_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DBNeighbourSegment::_internal_path_end_s() const {
  return _impl_.path_end_s_;
}
inline double DBNeighbourSegment::path_end_s() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourSegment.path_end_s)
  return _internal_path_end_s();
}
inline void DBNeighbourSegment::_internal_set_path_end_s(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.path_end_s_ = value;
}
inline void DBNeighbourSegment::set_path_end_s(double value) {
  _internal_set_path_end_s(value);
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBNeighbourSegment.path_end_s)
}

// -------------------------------------------------------------------

// DBNeighbourPath

// repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
inline int DBNeighbourPath::_internal_segment_size() const {
  return _impl_.segment_.size();
}
inline int DBNeighbourPath::segment_size() const {
  return _internal_segment_size();
}
inline void DBNeighbourPath::clear_segment() {
  _impl_.segment_.Clear();
}
inline ::apollo::dbmap::DBNeighbourSegment* DBNeighbourPath::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBNeighbourPath.segment)
  return _impl_.segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourSegment >*
DBNeighbourPath::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBNeighbourPath.segment)
  return &_impl_.segment_;
}
inline const ::apollo::dbmap::DBNeighbourSegment& DBNeighbourPath::_internal_segment(int index) const {
  return _impl_.segment_.Get(index);
}
inline const ::apollo::dbmap::DBNeighbourSegment& DBNeighbourPath::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBNeighbourPath.segment)
  return _internal_segment(index);
}
inline ::apollo::dbmap::DBNeighbourSegment* DBNeighbourPath::_internal_add_segment() {
  return _impl_.segment_.Add();
}
inline ::apollo::dbmap::DBNeighbourSegment* DBNeighbourPath::add_segment() {
  ::apollo::dbmap::DBNeighbourSegment* _add = _internal_add_segment();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBNeighbourPath.segment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourSegment >&
DBNeighbourPath::segment() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBNeighbourPath.segment)
  return _impl_.segment_;
}

// -------------------------------------------------------------------

// DBPath

// optional string id = 1;
inline bool DBPath::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBPath::has_id() const {
  return _internal_has_id();
}
inline void DBPath::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBPath::id() const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBPath::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dbmap.DBPath.id)
}
inline std::string* DBPath::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.id)
  return _s;
}
inline const std::string& DBPath::_internal_id() const {
  return _impl_.id_.Get();
}
inline void DBPath::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* DBPath::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* DBPath::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dbmap.DBPath.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBPath::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.dbmap.DBPath.id)
}

// repeated .apollo.dbmap.DBLine path = 2;
inline int DBPath::_internal_path_size() const {
  return _impl_.path_.size();
}
inline int DBPath::path_size() const {
  return _internal_path_size();
}
inline void DBPath::clear_path() {
  _impl_.path_.Clear();
}
inline ::apollo::dbmap::DBLine* DBPath::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.path)
  return _impl_.path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
DBPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.path)
  return &_impl_.path_;
}
inline const ::apollo::dbmap::DBLine& DBPath::_internal_path(int index) const {
  return _impl_.path_.Get(index);
}
inline const ::apollo::dbmap::DBLine& DBPath::path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.path)
  return _internal_path(index);
}
inline ::apollo::dbmap::DBLine* DBPath::_internal_add_path() {
  return _impl_.path_.Add();
}
inline ::apollo::dbmap::DBLine* DBPath::add_path() {
  ::apollo::dbmap::DBLine* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
DBPath::path() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.path)
  return _impl_.path_;
}

// repeated .apollo.dbmap.DBLine left_bounday = 3;
inline int DBPath::_internal_left_bounday_size() const {
  return _impl_.left_bounday_.size();
}
inline int DBPath::left_bounday_size() const {
  return _internal_left_bounday_size();
}
inline void DBPath::clear_left_bounday() {
  _impl_.left_bounday_.Clear();
}
inline ::apollo::dbmap::DBLine* DBPath::mutable_left_bounday(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.left_bounday)
  return _impl_.left_bounday_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
DBPath::mutable_left_bounday() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.left_bounday)
  return &_impl_.left_bounday_;
}
inline const ::apollo::dbmap::DBLine& DBPath::_internal_left_bounday(int index) const {
  return _impl_.left_bounday_.Get(index);
}
inline const ::apollo::dbmap::DBLine& DBPath::left_bounday(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.left_bounday)
  return _internal_left_bounday(index);
}
inline ::apollo::dbmap::DBLine* DBPath::_internal_add_left_bounday() {
  return _impl_.left_bounday_.Add();
}
inline ::apollo::dbmap::DBLine* DBPath::add_left_bounday() {
  ::apollo::dbmap::DBLine* _add = _internal_add_left_bounday();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.left_bounday)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
DBPath::left_bounday() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.left_bounday)
  return _impl_.left_bounday_;
}

// repeated .apollo.dbmap.DBLine right_bounday = 4;
inline int DBPath::_internal_right_bounday_size() const {
  return _impl_.right_bounday_.size();
}
inline int DBPath::right_bounday_size() const {
  return _internal_right_bounday_size();
}
inline void DBPath::clear_right_bounday() {
  _impl_.right_bounday_.Clear();
}
inline ::apollo::dbmap::DBLine* DBPath::mutable_right_bounday(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.right_bounday)
  return _impl_.right_bounday_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >*
DBPath::mutable_right_bounday() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.right_bounday)
  return &_impl_.right_bounday_;
}
inline const ::apollo::dbmap::DBLine& DBPath::_internal_right_bounday(int index) const {
  return _impl_.right_bounday_.Get(index);
}
inline const ::apollo::dbmap::DBLine& DBPath::right_bounday(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.right_bounday)
  return _internal_right_bounday(index);
}
inline ::apollo::dbmap::DBLine* DBPath::_internal_add_right_bounday() {
  return _impl_.right_bounday_.Add();
}
inline ::apollo::dbmap::DBLine* DBPath::add_right_bounday() {
  ::apollo::dbmap::DBLine* _add = _internal_add_right_bounday();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.right_bounday)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBLine >&
DBPath::right_bounday() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.right_bounday)
  return _impl_.right_bounday_;
}

// repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
inline int DBPath::_internal_left_path_size() const {
  return _impl_.left_path_.size();
}
inline int DBPath::left_path_size() const {
  return _internal_left_path_size();
}
inline void DBPath::clear_left_path() {
  _impl_.left_path_.Clear();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::mutable_left_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.left_path)
  return _impl_.left_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
DBPath::mutable_left_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.left_path)
  return &_impl_.left_path_;
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::_internal_left_path(int index) const {
  return _impl_.left_path_.Get(index);
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::left_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.left_path)
  return _internal_left_path(index);
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::_internal_add_left_path() {
  return _impl_.left_path_.Add();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::add_left_path() {
  ::apollo::dbmap::DBNeighbourPath* _add = _internal_add_left_path();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.left_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
DBPath::left_path() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.left_path)
  return _impl_.left_path_;
}

// repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
inline int DBPath::_internal_right_path_size() const {
  return _impl_.right_path_.size();
}
inline int DBPath::right_path_size() const {
  return _internal_right_path_size();
}
inline void DBPath::clear_right_path() {
  _impl_.right_path_.Clear();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::mutable_right_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.right_path)
  return _impl_.right_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
DBPath::mutable_right_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.right_path)
  return &_impl_.right_path_;
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::_internal_right_path(int index) const {
  return _impl_.right_path_.Get(index);
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::right_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.right_path)
  return _internal_right_path(index);
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::_internal_add_right_path() {
  return _impl_.right_path_.Add();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::add_right_path() {
  ::apollo::dbmap::DBNeighbourPath* _add = _internal_add_right_path();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.right_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
DBPath::right_path() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.right_path)
  return _impl_.right_path_;
}

// repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
inline int DBPath::_internal_duplicate_path_size() const {
  return _impl_.duplicate_path_.size();
}
inline int DBPath::duplicate_path_size() const {
  return _internal_duplicate_path_size();
}
inline void DBPath::clear_duplicate_path() {
  _impl_.duplicate_path_.Clear();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::mutable_duplicate_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBPath.duplicate_path)
  return _impl_.duplicate_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >*
DBPath::mutable_duplicate_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBPath.duplicate_path)
  return &_impl_.duplicate_path_;
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::_internal_duplicate_path(int index) const {
  return _impl_.duplicate_path_.Get(index);
}
inline const ::apollo::dbmap::DBNeighbourPath& DBPath::duplicate_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBPath.duplicate_path)
  return _internal_duplicate_path(index);
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::_internal_add_duplicate_path() {
  return _impl_.duplicate_path_.Add();
}
inline ::apollo::dbmap::DBNeighbourPath* DBPath::add_duplicate_path() {
  ::apollo::dbmap::DBNeighbourPath* _add = _internal_add_duplicate_path();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBPath.duplicate_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBNeighbourPath >&
DBPath::duplicate_path() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBPath.duplicate_path)
  return _impl_.duplicate_path_;
}

// -------------------------------------------------------------------

// DBMap

// repeated .apollo.dbmap.DBPath paths = 1;
inline int DBMap::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int DBMap::paths_size() const {
  return _internal_paths_size();
}
inline void DBMap::clear_paths() {
  _impl_.paths_.Clear();
}
inline ::apollo::dbmap::DBPath* DBMap::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dbmap.DBMap.paths)
  return _impl_.paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPath >*
DBMap::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dbmap.DBMap.paths)
  return &_impl_.paths_;
}
inline const ::apollo::dbmap::DBPath& DBMap::_internal_paths(int index) const {
  return _impl_.paths_.Get(index);
}
inline const ::apollo::dbmap::DBPath& DBMap::paths(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dbmap.DBMap.paths)
  return _internal_paths(index);
}
inline ::apollo::dbmap::DBPath* DBMap::_internal_add_paths() {
  return _impl_.paths_.Add();
}
inline ::apollo::dbmap::DBPath* DBMap::add_paths() {
  ::apollo::dbmap::DBPath* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:apollo.dbmap.DBMap.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dbmap::DBPath >&
DBMap::paths() const {
  // @@protoc_insertion_point(field_list:apollo.dbmap.DBMap.paths)
  return _impl_.paths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto
