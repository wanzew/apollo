// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/sensor_calibration/proto/extractor_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
class ChannelConfig;
struct ChannelConfigDefaultTypeInternal;
extern ChannelConfigDefaultTypeInternal _ChannelConfig_default_instance_;
class Channels;
struct ChannelsDefaultTypeInternal;
extern ChannelsDefaultTypeInternal _Channels_default_instance_;
class DataExtractionConfig;
struct DataExtractionConfigDefaultTypeInternal;
extern DataExtractionConfigDefaultTypeInternal _DataExtractionConfig_default_instance_;
class IoConfig;
struct IoConfigDefaultTypeInternal;
extern IoConfigDefaultTypeInternal _IoConfig_default_instance_;
class Records;
struct RecordsDefaultTypeInternal;
extern RecordsDefaultTypeInternal _Records_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChannelConfig* Arena::CreateMaybeMessage<::ChannelConfig>(Arena*);
template<> ::Channels* Arena::CreateMaybeMessage<::Channels>(Arena*);
template<> ::DataExtractionConfig* Arena::CreateMaybeMessage<::DataExtractionConfig>(Arena*);
template<> ::IoConfig* Arena::CreateMaybeMessage<::IoConfig>(Arena*);
template<> ::Records* Arena::CreateMaybeMessage<::Records>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IoConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IoConfig) */ {
 public:
  inline IoConfig() : IoConfig(nullptr) {}
  ~IoConfig() override;
  explicit PROTOBUF_CONSTEXPR IoConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IoConfig(const IoConfig& from);
  IoConfig(IoConfig&& from) noexcept
    : IoConfig() {
    *this = ::std::move(from);
  }

  inline IoConfig& operator=(const IoConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoConfig& operator=(IoConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IoConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const IoConfig* internal_default_instance() {
    return reinterpret_cast<const IoConfig*>(
               &_IoConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IoConfig& a, IoConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IoConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IoConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IoConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IoConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IoConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IoConfig";
  }
  protected:
  explicit IoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kOutputPathFieldNumber = 2,
    kStartTimestampFieldNumber = 3,
    kEndTimestampFieldNumber = 4,
    kMainSensorFieldNumber = 5,
  };
  // required string task_name = 1 [default = "tmp"];
  bool has_task_name() const;
  private:
  bool _internal_has_task_name() const;
  public:
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_NODISCARD std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // required string output_path = 2 [default = "extracted_data"];
  bool has_output_path() const;
  private:
  bool _internal_has_output_path() const;
  public:
  void clear_output_path();
  const std::string& output_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_path();
  PROTOBUF_NODISCARD std::string* release_output_path();
  void set_allocated_output_path(std::string* output_path);
  private:
  const std::string& _internal_output_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_path(const std::string& value);
  std::string* _internal_mutable_output_path();
  public:

  // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  const std::string& start_timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_timestamp();
  PROTOBUF_NODISCARD std::string* release_start_timestamp();
  void set_allocated_start_timestamp(std::string* start_timestamp);
  private:
  const std::string& _internal_start_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_timestamp(const std::string& value);
  std::string* _internal_mutable_start_timestamp();
  public:

  // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  const std::string& end_timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_timestamp();
  PROTOBUF_NODISCARD std::string* release_end_timestamp();
  void set_allocated_end_timestamp(std::string* end_timestamp);
  private:
  const std::string& _internal_end_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_timestamp(const std::string& value);
  std::string* _internal_mutable_end_timestamp();
  public:

  // optional string main_sensor = 5;
  bool has_main_sensor() const;
  private:
  bool _internal_has_main_sensor() const;
  public:
  void clear_main_sensor();
  const std::string& main_sensor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_sensor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_sensor();
  PROTOBUF_NODISCARD std::string* release_main_sensor();
  void set_allocated_main_sensor(std::string* main_sensor);
  private:
  const std::string& _internal_main_sensor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_sensor(const std::string& value);
  std::string* _internal_mutable_main_sensor();
  public:

  // @@protoc_insertion_point(class_scope:IoConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_task_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_output_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_path_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_start_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_timestamp_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_end_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_sensor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ChannelConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChannelConfig) */ {
 public:
  inline ChannelConfig() : ChannelConfig(nullptr) {}
  ~ChannelConfig() override;
  explicit PROTOBUF_CONSTEXPR ChannelConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelConfig(const ChannelConfig& from);
  ChannelConfig(ChannelConfig&& from) noexcept
    : ChannelConfig() {
    *this = ::std::move(from);
  }

  inline ChannelConfig& operator=(const ChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelConfig& operator=(ChannelConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelConfig*>(
               &_ChannelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelConfig& a, ChannelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChannelConfig";
  }
  protected:
  explicit ChannelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kNameFieldNumber = 2,
    kExtractionRateFieldNumber = 3,
  };
  // optional string description = 1 [default = ""];
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 extraction_rate = 3 [default = 1];
  bool has_extraction_rate() const;
  private:
  bool _internal_has_extraction_rate() const;
  public:
  void clear_extraction_rate();
  uint32_t extraction_rate() const;
  void set_extraction_rate(uint32_t value);
  private:
  uint32_t _internal_extraction_rate() const;
  void _internal_set_extraction_rate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChannelConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t extraction_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Channels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Channels) */ {
 public:
  inline Channels() : Channels(nullptr) {}
  ~Channels() override;
  explicit PROTOBUF_CONSTEXPR Channels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Channels(const Channels& from);
  Channels(Channels&& from) noexcept
    : Channels() {
    *this = ::std::move(from);
  }

  inline Channels& operator=(const Channels& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channels& operator=(Channels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channels& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channels* internal_default_instance() {
    return reinterpret_cast<const Channels*>(
               &_Channels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Channels& a, Channels& b) {
    a.Swap(&b);
  }
  inline void Swap(Channels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Channels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Channels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Channels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Channels& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Channels";
  }
  protected:
  explicit Channels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // repeated .ChannelConfig channel = 1;
  int channel_size() const;
  private:
  int _internal_channel_size() const;
  public:
  void clear_channel();
  ::ChannelConfig* mutable_channel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelConfig >*
      mutable_channel();
  private:
  const ::ChannelConfig& _internal_channel(int index) const;
  ::ChannelConfig* _internal_add_channel();
  public:
  const ::ChannelConfig& channel(int index) const;
  ::ChannelConfig* add_channel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelConfig >&
      channel() const;

  // @@protoc_insertion_point(class_scope:Channels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelConfig > channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Records final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Records) */ {
 public:
  inline Records() : Records(nullptr) {}
  ~Records() override;
  explicit PROTOBUF_CONSTEXPR Records(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Records(const Records& from);
  Records(Records&& from) noexcept
    : Records() {
    *this = ::std::move(from);
  }

  inline Records& operator=(const Records& from) {
    CopyFrom(from);
    return *this;
  }
  inline Records& operator=(Records&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Records& default_instance() {
    return *internal_default_instance();
  }
  static inline const Records* internal_default_instance() {
    return reinterpret_cast<const Records*>(
               &_Records_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Records& a, Records& b) {
    a.Swap(&b);
  }
  inline void Swap(Records* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Records* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Records* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Records>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Records& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Records& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Records* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Records";
  }
  protected:
  explicit Records(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordPathFieldNumber = 1,
  };
  // repeated string record_path = 1;
  int record_path_size() const;
  private:
  int _internal_record_path_size() const;
  public:
  void clear_record_path();
  const std::string& record_path(int index) const;
  std::string* mutable_record_path(int index);
  void set_record_path(int index, const std::string& value);
  void set_record_path(int index, std::string&& value);
  void set_record_path(int index, const char* value);
  void set_record_path(int index, const char* value, size_t size);
  std::string* add_record_path();
  void add_record_path(const std::string& value);
  void add_record_path(std::string&& value);
  void add_record_path(const char* value);
  void add_record_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& record_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_record_path();
  private:
  const std::string& _internal_record_path(int index) const;
  std::string* _internal_add_record_path();
  public:

  // @@protoc_insertion_point(class_scope:Records)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> record_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DataExtractionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataExtractionConfig) */ {
 public:
  inline DataExtractionConfig() : DataExtractionConfig(nullptr) {}
  ~DataExtractionConfig() override;
  explicit PROTOBUF_CONSTEXPR DataExtractionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataExtractionConfig(const DataExtractionConfig& from);
  DataExtractionConfig(DataExtractionConfig&& from) noexcept
    : DataExtractionConfig() {
    *this = ::std::move(from);
  }

  inline DataExtractionConfig& operator=(const DataExtractionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataExtractionConfig& operator=(DataExtractionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataExtractionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataExtractionConfig* internal_default_instance() {
    return reinterpret_cast<const DataExtractionConfig*>(
               &_DataExtractionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataExtractionConfig& a, DataExtractionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DataExtractionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataExtractionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataExtractionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataExtractionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataExtractionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataExtractionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataExtractionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataExtractionConfig";
  }
  protected:
  explicit DataExtractionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIoConfigFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kRecordsFieldNumber = 3,
  };
  // required .IoConfig io_config = 1;
  bool has_io_config() const;
  private:
  bool _internal_has_io_config() const;
  public:
  void clear_io_config();
  const ::IoConfig& io_config() const;
  PROTOBUF_NODISCARD ::IoConfig* release_io_config();
  ::IoConfig* mutable_io_config();
  void set_allocated_io_config(::IoConfig* io_config);
  private:
  const ::IoConfig& _internal_io_config() const;
  ::IoConfig* _internal_mutable_io_config();
  public:
  void unsafe_arena_set_allocated_io_config(
      ::IoConfig* io_config);
  ::IoConfig* unsafe_arena_release_io_config();

  // required .Channels channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  const ::Channels& channels() const;
  PROTOBUF_NODISCARD ::Channels* release_channels();
  ::Channels* mutable_channels();
  void set_allocated_channels(::Channels* channels);
  private:
  const ::Channels& _internal_channels() const;
  ::Channels* _internal_mutable_channels();
  public:
  void unsafe_arena_set_allocated_channels(
      ::Channels* channels);
  ::Channels* unsafe_arena_release_channels();

  // required .Records records = 3;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  const ::Records& records() const;
  PROTOBUF_NODISCARD ::Records* release_records();
  ::Records* mutable_records();
  void set_allocated_records(::Records* records);
  private:
  const ::Records& _internal_records() const;
  ::Records* _internal_mutable_records();
  public:
  void unsafe_arena_set_allocated_records(
      ::Records* records);
  ::Records* unsafe_arena_release_records();

  // @@protoc_insertion_point(class_scope:DataExtractionConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::IoConfig* io_config_;
    ::Channels* channels_;
    ::Records* records_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IoConfig

// required string task_name = 1 [default = "tmp"];
inline bool IoConfig::_internal_has_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IoConfig::has_task_name() const {
  return _internal_has_task_name();
}
inline void IoConfig::clear_task_name() {
  _impl_.task_name_.ClearToDefault(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_task_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IoConfig::task_name() const {
  // @@protoc_insertion_point(field_get:IoConfig.task_name)
  if (_impl_.task_name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_task_name_.get();
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoConfig::set_task_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IoConfig.task_name)
}
inline std::string* IoConfig::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:IoConfig.task_name)
  return _s;
}
inline const std::string& IoConfig::_internal_task_name() const {
  return _impl_.task_name_.Get();
}
inline void IoConfig::_internal_set_task_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IoConfig::_internal_mutable_task_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_name_.Mutable(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_task_name_, GetArenaForAllocation());
}
inline std::string* IoConfig::release_task_name() {
  // @@protoc_insertion_point(field_release:IoConfig.task_name)
  if (!_internal_has_task_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_name_.Release();
  return p;
}
inline void IoConfig::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_name_.SetAllocated(task_name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IoConfig.task_name)
}

// required string output_path = 2 [default = "extracted_data"];
inline bool IoConfig::_internal_has_output_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IoConfig::has_output_path() const {
  return _internal_has_output_path();
}
inline void IoConfig::clear_output_path() {
  _impl_.output_path_.ClearToDefault(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_output_path_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IoConfig::output_path() const {
  // @@protoc_insertion_point(field_get:IoConfig.output_path)
  if (_impl_.output_path_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_output_path_.get();
  return _internal_output_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoConfig::set_output_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.output_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IoConfig.output_path)
}
inline std::string* IoConfig::mutable_output_path() {
  std::string* _s = _internal_mutable_output_path();
  // @@protoc_insertion_point(field_mutable:IoConfig.output_path)
  return _s;
}
inline const std::string& IoConfig::_internal_output_path() const {
  return _impl_.output_path_.Get();
}
inline void IoConfig::_internal_set_output_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_path_.Set(value, GetArenaForAllocation());
}
inline std::string* IoConfig::_internal_mutable_output_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_path_.Mutable(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_output_path_, GetArenaForAllocation());
}
inline std::string* IoConfig::release_output_path() {
  // @@protoc_insertion_point(field_release:IoConfig.output_path)
  if (!_internal_has_output_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.output_path_.Release();
  return p;
}
inline void IoConfig::set_allocated_output_path(std::string* output_path) {
  if (output_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_path_.SetAllocated(output_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IoConfig.output_path)
}

// optional string start_timestamp = 3 [default = "FLOAT_MIN"];
inline bool IoConfig::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IoConfig::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void IoConfig::clear_start_timestamp() {
  _impl_.start_timestamp_.ClearToDefault(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_start_timestamp_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IoConfig::start_timestamp() const {
  // @@protoc_insertion_point(field_get:IoConfig.start_timestamp)
  if (_impl_.start_timestamp_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_start_timestamp_.get();
  return _internal_start_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoConfig::set_start_timestamp(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.start_timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IoConfig.start_timestamp)
}
inline std::string* IoConfig::mutable_start_timestamp() {
  std::string* _s = _internal_mutable_start_timestamp();
  // @@protoc_insertion_point(field_mutable:IoConfig.start_timestamp)
  return _s;
}
inline const std::string& IoConfig::_internal_start_timestamp() const {
  return _impl_.start_timestamp_.Get();
}
inline void IoConfig::_internal_set_start_timestamp(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* IoConfig::_internal_mutable_start_timestamp() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.start_timestamp_.Mutable(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_start_timestamp_, GetArenaForAllocation());
}
inline std::string* IoConfig::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:IoConfig.start_timestamp)
  if (!_internal_has_start_timestamp()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.start_timestamp_.Release();
  return p;
}
inline void IoConfig::set_allocated_start_timestamp(std::string* start_timestamp) {
  if (start_timestamp != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.start_timestamp_.SetAllocated(start_timestamp, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IoConfig.start_timestamp)
}

// optional string end_timestamp = 4 [default = "FLOAT_MAX"];
inline bool IoConfig::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IoConfig::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void IoConfig::clear_end_timestamp() {
  _impl_.end_timestamp_.ClearToDefault(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_end_timestamp_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IoConfig::end_timestamp() const {
  // @@protoc_insertion_point(field_get:IoConfig.end_timestamp)
  if (_impl_.end_timestamp_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_end_timestamp_.get();
  return _internal_end_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoConfig::set_end_timestamp(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.end_timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IoConfig.end_timestamp)
}
inline std::string* IoConfig::mutable_end_timestamp() {
  std::string* _s = _internal_mutable_end_timestamp();
  // @@protoc_insertion_point(field_mutable:IoConfig.end_timestamp)
  return _s;
}
inline const std::string& IoConfig::_internal_end_timestamp() const {
  return _impl_.end_timestamp_.Get();
}
inline void IoConfig::_internal_set_end_timestamp(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* IoConfig::_internal_mutable_end_timestamp() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.end_timestamp_.Mutable(::IoConfig::Impl_::_i_give_permission_to_break_this_code_default_end_timestamp_, GetArenaForAllocation());
}
inline std::string* IoConfig::release_end_timestamp() {
  // @@protoc_insertion_point(field_release:IoConfig.end_timestamp)
  if (!_internal_has_end_timestamp()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.end_timestamp_.Release();
  return p;
}
inline void IoConfig::set_allocated_end_timestamp(std::string* end_timestamp) {
  if (end_timestamp != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.end_timestamp_.SetAllocated(end_timestamp, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:IoConfig.end_timestamp)
}

// optional string main_sensor = 5;
inline bool IoConfig::_internal_has_main_sensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IoConfig::has_main_sensor() const {
  return _internal_has_main_sensor();
}
inline void IoConfig::clear_main_sensor() {
  _impl_.main_sensor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& IoConfig::main_sensor() const {
  // @@protoc_insertion_point(field_get:IoConfig.main_sensor)
  return _internal_main_sensor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoConfig::set_main_sensor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.main_sensor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IoConfig.main_sensor)
}
inline std::string* IoConfig::mutable_main_sensor() {
  std::string* _s = _internal_mutable_main_sensor();
  // @@protoc_insertion_point(field_mutable:IoConfig.main_sensor)
  return _s;
}
inline const std::string& IoConfig::_internal_main_sensor() const {
  return _impl_.main_sensor_.Get();
}
inline void IoConfig::_internal_set_main_sensor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.main_sensor_.Set(value, GetArenaForAllocation());
}
inline std::string* IoConfig::_internal_mutable_main_sensor() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.main_sensor_.Mutable(GetArenaForAllocation());
}
inline std::string* IoConfig::release_main_sensor() {
  // @@protoc_insertion_point(field_release:IoConfig.main_sensor)
  if (!_internal_has_main_sensor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.main_sensor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_.IsDefault()) {
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IoConfig::set_allocated_main_sensor(std::string* main_sensor) {
  if (main_sensor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.main_sensor_.SetAllocated(main_sensor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_sensor_.IsDefault()) {
    _impl_.main_sensor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IoConfig.main_sensor)
}

// -------------------------------------------------------------------

// ChannelConfig

// optional string description = 1 [default = ""];
inline bool ChannelConfig::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelConfig::has_description() const {
  return _internal_has_description();
}
inline void ChannelConfig::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelConfig::description() const {
  // @@protoc_insertion_point(field_get:ChannelConfig.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelConfig::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChannelConfig.description)
}
inline std::string* ChannelConfig::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ChannelConfig.description)
  return _s;
}
inline const std::string& ChannelConfig::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ChannelConfig::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelConfig::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelConfig::release_description() {
  // @@protoc_insertion_point(field_release:ChannelConfig.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelConfig::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChannelConfig.description)
}

// required string name = 2;
inline bool ChannelConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelConfig::has_name() const {
  return _internal_has_name();
}
inline void ChannelConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelConfig::name() const {
  // @@protoc_insertion_point(field_get:ChannelConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChannelConfig.name)
}
inline std::string* ChannelConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChannelConfig.name)
  return _s;
}
inline const std::string& ChannelConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChannelConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelConfig::release_name() {
  // @@protoc_insertion_point(field_release:ChannelConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChannelConfig.name)
}

// required uint32 extraction_rate = 3 [default = 1];
inline bool ChannelConfig::_internal_has_extraction_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelConfig::has_extraction_rate() const {
  return _internal_has_extraction_rate();
}
inline void ChannelConfig::clear_extraction_rate() {
  _impl_.extraction_rate_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChannelConfig::_internal_extraction_rate() const {
  return _impl_.extraction_rate_;
}
inline uint32_t ChannelConfig::extraction_rate() const {
  // @@protoc_insertion_point(field_get:ChannelConfig.extraction_rate)
  return _internal_extraction_rate();
}
inline void ChannelConfig::_internal_set_extraction_rate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.extraction_rate_ = value;
}
inline void ChannelConfig::set_extraction_rate(uint32_t value) {
  _internal_set_extraction_rate(value);
  // @@protoc_insertion_point(field_set:ChannelConfig.extraction_rate)
}

// -------------------------------------------------------------------

// Channels

// repeated .ChannelConfig channel = 1;
inline int Channels::_internal_channel_size() const {
  return _impl_.channel_.size();
}
inline int Channels::channel_size() const {
  return _internal_channel_size();
}
inline void Channels::clear_channel() {
  _impl_.channel_.Clear();
}
inline ::ChannelConfig* Channels::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:Channels.channel)
  return _impl_.channel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelConfig >*
Channels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:Channels.channel)
  return &_impl_.channel_;
}
inline const ::ChannelConfig& Channels::_internal_channel(int index) const {
  return _impl_.channel_.Get(index);
}
inline const ::ChannelConfig& Channels::channel(int index) const {
  // @@protoc_insertion_point(field_get:Channels.channel)
  return _internal_channel(index);
}
inline ::ChannelConfig* Channels::_internal_add_channel() {
  return _impl_.channel_.Add();
}
inline ::ChannelConfig* Channels::add_channel() {
  ::ChannelConfig* _add = _internal_add_channel();
  // @@protoc_insertion_point(field_add:Channels.channel)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelConfig >&
Channels::channel() const {
  // @@protoc_insertion_point(field_list:Channels.channel)
  return _impl_.channel_;
}

// -------------------------------------------------------------------

// Records

// repeated string record_path = 1;
inline int Records::_internal_record_path_size() const {
  return _impl_.record_path_.size();
}
inline int Records::record_path_size() const {
  return _internal_record_path_size();
}
inline void Records::clear_record_path() {
  _impl_.record_path_.Clear();
}
inline std::string* Records::add_record_path() {
  std::string* _s = _internal_add_record_path();
  // @@protoc_insertion_point(field_add_mutable:Records.record_path)
  return _s;
}
inline const std::string& Records::_internal_record_path(int index) const {
  return _impl_.record_path_.Get(index);
}
inline const std::string& Records::record_path(int index) const {
  // @@protoc_insertion_point(field_get:Records.record_path)
  return _internal_record_path(index);
}
inline std::string* Records::mutable_record_path(int index) {
  // @@protoc_insertion_point(field_mutable:Records.record_path)
  return _impl_.record_path_.Mutable(index);
}
inline void Records::set_record_path(int index, const std::string& value) {
  _impl_.record_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Records.record_path)
}
inline void Records::set_record_path(int index, std::string&& value) {
  _impl_.record_path_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Records.record_path)
}
inline void Records::set_record_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.record_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Records.record_path)
}
inline void Records::set_record_path(int index, const char* value, size_t size) {
  _impl_.record_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Records.record_path)
}
inline std::string* Records::_internal_add_record_path() {
  return _impl_.record_path_.Add();
}
inline void Records::add_record_path(const std::string& value) {
  _impl_.record_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Records.record_path)
}
inline void Records::add_record_path(std::string&& value) {
  _impl_.record_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Records.record_path)
}
inline void Records::add_record_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.record_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Records.record_path)
}
inline void Records::add_record_path(const char* value, size_t size) {
  _impl_.record_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Records.record_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Records::record_path() const {
  // @@protoc_insertion_point(field_list:Records.record_path)
  return _impl_.record_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Records::mutable_record_path() {
  // @@protoc_insertion_point(field_mutable_list:Records.record_path)
  return &_impl_.record_path_;
}

// -------------------------------------------------------------------

// DataExtractionConfig

// required .IoConfig io_config = 1;
inline bool DataExtractionConfig::_internal_has_io_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.io_config_ != nullptr);
  return value;
}
inline bool DataExtractionConfig::has_io_config() const {
  return _internal_has_io_config();
}
inline void DataExtractionConfig::clear_io_config() {
  if (_impl_.io_config_ != nullptr) _impl_.io_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IoConfig& DataExtractionConfig::_internal_io_config() const {
  const ::IoConfig* p = _impl_.io_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::IoConfig&>(
      ::_IoConfig_default_instance_);
}
inline const ::IoConfig& DataExtractionConfig::io_config() const {
  // @@protoc_insertion_point(field_get:DataExtractionConfig.io_config)
  return _internal_io_config();
}
inline void DataExtractionConfig::unsafe_arena_set_allocated_io_config(
    ::IoConfig* io_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.io_config_);
  }
  _impl_.io_config_ = io_config;
  if (io_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataExtractionConfig.io_config)
}
inline ::IoConfig* DataExtractionConfig::release_io_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IoConfig* temp = _impl_.io_config_;
  _impl_.io_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IoConfig* DataExtractionConfig::unsafe_arena_release_io_config() {
  // @@protoc_insertion_point(field_release:DataExtractionConfig.io_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IoConfig* temp = _impl_.io_config_;
  _impl_.io_config_ = nullptr;
  return temp;
}
inline ::IoConfig* DataExtractionConfig::_internal_mutable_io_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.io_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::IoConfig>(GetArenaForAllocation());
    _impl_.io_config_ = p;
  }
  return _impl_.io_config_;
}
inline ::IoConfig* DataExtractionConfig::mutable_io_config() {
  ::IoConfig* _msg = _internal_mutable_io_config();
  // @@protoc_insertion_point(field_mutable:DataExtractionConfig.io_config)
  return _msg;
}
inline void DataExtractionConfig::set_allocated_io_config(::IoConfig* io_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.io_config_;
  }
  if (io_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(io_config);
    if (message_arena != submessage_arena) {
      io_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.io_config_ = io_config;
  // @@protoc_insertion_point(field_set_allocated:DataExtractionConfig.io_config)
}

// required .Channels channels = 2;
inline bool DataExtractionConfig::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.channels_ != nullptr);
  return value;
}
inline bool DataExtractionConfig::has_channels() const {
  return _internal_has_channels();
}
inline void DataExtractionConfig::clear_channels() {
  if (_impl_.channels_ != nullptr) _impl_.channels_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Channels& DataExtractionConfig::_internal_channels() const {
  const ::Channels* p = _impl_.channels_;
  return p != nullptr ? *p : reinterpret_cast<const ::Channels&>(
      ::_Channels_default_instance_);
}
inline const ::Channels& DataExtractionConfig::channels() const {
  // @@protoc_insertion_point(field_get:DataExtractionConfig.channels)
  return _internal_channels();
}
inline void DataExtractionConfig::unsafe_arena_set_allocated_channels(
    ::Channels* channels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channels_);
  }
  _impl_.channels_ = channels;
  if (channels) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataExtractionConfig.channels)
}
inline ::Channels* DataExtractionConfig::release_channels() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Channels* temp = _impl_.channels_;
  _impl_.channels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Channels* DataExtractionConfig::unsafe_arena_release_channels() {
  // @@protoc_insertion_point(field_release:DataExtractionConfig.channels)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Channels* temp = _impl_.channels_;
  _impl_.channels_ = nullptr;
  return temp;
}
inline ::Channels* DataExtractionConfig::_internal_mutable_channels() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.channels_ == nullptr) {
    auto* p = CreateMaybeMessage<::Channels>(GetArenaForAllocation());
    _impl_.channels_ = p;
  }
  return _impl_.channels_;
}
inline ::Channels* DataExtractionConfig::mutable_channels() {
  ::Channels* _msg = _internal_mutable_channels();
  // @@protoc_insertion_point(field_mutable:DataExtractionConfig.channels)
  return _msg;
}
inline void DataExtractionConfig::set_allocated_channels(::Channels* channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.channels_;
  }
  if (channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(channels);
    if (message_arena != submessage_arena) {
      channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:DataExtractionConfig.channels)
}

// required .Records records = 3;
inline bool DataExtractionConfig::_internal_has_records() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.records_ != nullptr);
  return value;
}
inline bool DataExtractionConfig::has_records() const {
  return _internal_has_records();
}
inline void DataExtractionConfig::clear_records() {
  if (_impl_.records_ != nullptr) _impl_.records_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Records& DataExtractionConfig::_internal_records() const {
  const ::Records* p = _impl_.records_;
  return p != nullptr ? *p : reinterpret_cast<const ::Records&>(
      ::_Records_default_instance_);
}
inline const ::Records& DataExtractionConfig::records() const {
  // @@protoc_insertion_point(field_get:DataExtractionConfig.records)
  return _internal_records();
}
inline void DataExtractionConfig::unsafe_arena_set_allocated_records(
    ::Records* records) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.records_);
  }
  _impl_.records_ = records;
  if (records) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataExtractionConfig.records)
}
inline ::Records* DataExtractionConfig::release_records() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Records* temp = _impl_.records_;
  _impl_.records_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Records* DataExtractionConfig::unsafe_arena_release_records() {
  // @@protoc_insertion_point(field_release:DataExtractionConfig.records)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Records* temp = _impl_.records_;
  _impl_.records_ = nullptr;
  return temp;
}
inline ::Records* DataExtractionConfig::_internal_mutable_records() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.records_ == nullptr) {
    auto* p = CreateMaybeMessage<::Records>(GetArenaForAllocation());
    _impl_.records_ = p;
  }
  return _impl_.records_;
}
inline ::Records* DataExtractionConfig::mutable_records() {
  ::Records* _msg = _internal_mutable_records();
  // @@protoc_insertion_point(field_mutable:DataExtractionConfig.records)
  return _msg;
}
inline void DataExtractionConfig::set_allocated_records(::Records* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(records);
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.records_ = records;
  // @@protoc_insertion_point(field_set_allocated:DataExtractionConfig.records)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto
