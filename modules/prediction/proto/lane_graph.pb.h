// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
namespace apollo {
namespace prediction {
class LaneGraph;
struct LaneGraphDefaultTypeInternal;
extern LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
class LanePoint;
struct LanePointDefaultTypeInternal;
extern LanePointDefaultTypeInternal _LanePoint_default_instance_;
class LaneSegment;
struct LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneSequence;
struct LaneSequenceDefaultTypeInternal;
extern LaneSequenceDefaultTypeInternal _LaneSequence_default_instance_;
class LaneSequence_Features;
struct LaneSequence_FeaturesDefaultTypeInternal;
extern LaneSequence_FeaturesDefaultTypeInternal _LaneSequence_Features_default_instance_;
class NearbyObstacle;
struct NearbyObstacleDefaultTypeInternal;
extern NearbyObstacleDefaultTypeInternal _NearbyObstacle_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::LaneGraph* Arena::CreateMaybeMessage<::apollo::prediction::LaneGraph>(Arena*);
template<> ::apollo::prediction::LanePoint* Arena::CreateMaybeMessage<::apollo::prediction::LanePoint>(Arena*);
template<> ::apollo::prediction::LaneSegment* Arena::CreateMaybeMessage<::apollo::prediction::LaneSegment>(Arena*);
template<> ::apollo::prediction::LaneSequence* Arena::CreateMaybeMessage<::apollo::prediction::LaneSequence>(Arena*);
template<> ::apollo::prediction::LaneSequence_Features* Arena::CreateMaybeMessage<::apollo::prediction::LaneSequence_Features>(Arena*);
template<> ::apollo::prediction::NearbyObstacle* Arena::CreateMaybeMessage<::apollo::prediction::NearbyObstacle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class LanePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LanePoint) */ {
 public:
  inline LanePoint() : LanePoint(nullptr) {}
  ~LanePoint() override;
  explicit PROTOBUF_CONSTEXPR LanePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LanePoint(const LanePoint& from);
  LanePoint(LanePoint&& from) noexcept
    : LanePoint() {
    *this = ::std::move(from);
  }

  inline LanePoint& operator=(const LanePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanePoint& operator=(LanePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LanePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const LanePoint* internal_default_instance() {
    return reinterpret_cast<const LanePoint*>(
               &_LanePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LanePoint& a, LanePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LanePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LanePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LanePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LanePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LanePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LanePoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LanePoint";
  }
  protected:
  explicit LanePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kHeadingFieldNumber = 2,
    kWidthFieldNumber = 3,
    kRelativeSFieldNumber = 4,
    kRelativeLFieldNumber = 5,
    kAngleDiffFieldNumber = 6,
  };
  // optional .apollo.common.Point3D position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point3D* position);
  ::apollo::common::Point3D* unsafe_arena_release_position();

  // optional double heading = 2 [default = 0];
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double width = 3 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double relative_s = 4 [default = 0];
  bool has_relative_s() const;
  private:
  bool _internal_has_relative_s() const;
  public:
  void clear_relative_s();
  double relative_s() const;
  void set_relative_s(double value);
  private:
  double _internal_relative_s() const;
  void _internal_set_relative_s(double value);
  public:

  // optional double relative_l = 5 [default = 0];
  bool has_relative_l() const;
  private:
  bool _internal_has_relative_l() const;
  public:
  void clear_relative_l();
  double relative_l() const;
  void set_relative_l(double value);
  private:
  double _internal_relative_l() const;
  void _internal_set_relative_l(double value);
  public:

  // optional double angle_diff = 6 [default = 0];
  bool has_angle_diff() const;
  private:
  bool _internal_has_angle_diff() const;
  public:
  void clear_angle_diff();
  double angle_diff() const;
  void set_angle_diff(double value);
  private:
  double _internal_angle_diff() const;
  void _internal_set_angle_diff(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LanePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Point3D* position_;
    double heading_;
    double width_;
    double relative_s_;
    double relative_l_;
    double angle_diff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class LaneSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSegment) */ {
 public:
  inline LaneSegment() : LaneSegment(nullptr) {}
  ~LaneSegment() override;
  explicit PROTOBUF_CONSTEXPR LaneSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSegment(const LaneSegment& from);
  LaneSegment(LaneSegment&& from) noexcept
    : LaneSegment() {
    *this = ::std::move(from);
  }

  inline LaneSegment& operator=(const LaneSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSegment& operator=(LaneSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSegment* internal_default_instance() {
    return reinterpret_cast<const LaneSegment*>(
               &_LaneSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneSegment& a, LaneSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneSegment";
  }
  protected:
  explicit LaneSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanePointFieldNumber = 5,
    kLaneIdFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
    kTotalLengthFieldNumber = 6,
    kLaneTurnTypeFieldNumber = 4,
  };
  // repeated .apollo.prediction.LanePoint lane_point = 5;
  int lane_point_size() const;
  private:
  int _internal_lane_point_size() const;
  public:
  void clear_lane_point();
  ::apollo::prediction::LanePoint* mutable_lane_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_lane_point();
  private:
  const ::apollo::prediction::LanePoint& _internal_lane_point(int index) const;
  ::apollo::prediction::LanePoint* _internal_add_lane_point();
  public:
  const ::apollo::prediction::LanePoint& lane_point(int index) const;
  ::apollo::prediction::LanePoint* add_lane_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      lane_point() const;

  // optional string lane_id = 1;
  bool has_lane_id() const;
  private:
  bool _internal_has_lane_id() const;
  public:
  void clear_lane_id();
  const std::string& lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lane_id();
  PROTOBUF_NODISCARD std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);
  private:
  const std::string& _internal_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lane_id(const std::string& value);
  std::string* _internal_mutable_lane_id();
  public:

  // optional double start_s = 2 [default = 0];
  bool has_start_s() const;
  private:
  bool _internal_has_start_s() const;
  public:
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);
  private:
  double _internal_start_s() const;
  void _internal_set_start_s(double value);
  public:

  // optional double end_s = 3 [default = 0];
  bool has_end_s() const;
  private:
  bool _internal_has_end_s() const;
  public:
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);
  private:
  double _internal_end_s() const;
  void _internal_set_end_s(double value);
  public:

  // optional double total_length = 6 [default = 0];
  bool has_total_length() const;
  private:
  bool _internal_has_total_length() const;
  public:
  void clear_total_length();
  double total_length() const;
  void set_total_length(double value);
  private:
  double _internal_total_length() const;
  void _internal_set_total_length(double value);
  public:

  // optional uint32 lane_turn_type = 4 [default = 0];
  bool has_lane_turn_type() const;
  private:
  bool _internal_has_lane_turn_type() const;
  public:
  void clear_lane_turn_type();
  uint32_t lane_turn_type() const;
  void set_lane_turn_type(uint32_t value);
  private:
  uint32_t _internal_lane_turn_type() const;
  void _internal_set_lane_turn_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LanePoint > lane_point_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
    double start_s_;
    double end_s_;
    double total_length_;
    uint32_t lane_turn_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class NearbyObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.NearbyObstacle) */ {
 public:
  inline NearbyObstacle() : NearbyObstacle(nullptr) {}
  ~NearbyObstacle() override;
  explicit PROTOBUF_CONSTEXPR NearbyObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NearbyObstacle(const NearbyObstacle& from);
  NearbyObstacle(NearbyObstacle&& from) noexcept
    : NearbyObstacle() {
    *this = ::std::move(from);
  }

  inline NearbyObstacle& operator=(const NearbyObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearbyObstacle& operator=(NearbyObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NearbyObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const NearbyObstacle* internal_default_instance() {
    return reinterpret_cast<const NearbyObstacle*>(
               &_NearbyObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NearbyObstacle& a, NearbyObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(NearbyObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearbyObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NearbyObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NearbyObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NearbyObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NearbyObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearbyObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.NearbyObstacle";
  }
  protected:
  explicit NearbyObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional double s = 2;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.NearbyObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double s_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class LaneSequence_Features final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSequence.Features) */ {
 public:
  inline LaneSequence_Features() : LaneSequence_Features(nullptr) {}
  ~LaneSequence_Features() override;
  explicit PROTOBUF_CONSTEXPR LaneSequence_Features(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSequence_Features(const LaneSequence_Features& from);
  LaneSequence_Features(LaneSequence_Features&& from) noexcept
    : LaneSequence_Features() {
    *this = ::std::move(from);
  }

  inline LaneSequence_Features& operator=(const LaneSequence_Features& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSequence_Features& operator=(LaneSequence_Features&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSequence_Features& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSequence_Features* internal_default_instance() {
    return reinterpret_cast<const LaneSequence_Features*>(
               &_LaneSequence_Features_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaneSequence_Features& a, LaneSequence_Features& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSequence_Features* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSequence_Features* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSequence_Features* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSequence_Features>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSequence_Features& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneSequence_Features& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSequence_Features* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneSequence.Features";
  }
  protected:
  explicit LaneSequence_Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMlpFeaturesFieldNumber = 1,
  };
  // repeated double mlp_features = 1;
  int mlp_features_size() const;
  private:
  int _internal_mlp_features_size() const;
  public:
  void clear_mlp_features();
  private:
  double _internal_mlp_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_mlp_features() const;
  void _internal_add_mlp_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_mlp_features();
  public:
  double mlp_features(int index) const;
  void set_mlp_features(int index, double value);
  void add_mlp_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      mlp_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_mlp_features();

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSequence.Features)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > mlp_features_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class LaneSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSequence) */ {
 public:
  inline LaneSequence() : LaneSequence(nullptr) {}
  ~LaneSequence() override;
  explicit PROTOBUF_CONSTEXPR LaneSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSequence(const LaneSequence& from);
  LaneSequence(LaneSequence&& from) noexcept
    : LaneSequence() {
    *this = ::std::move(from);
  }

  inline LaneSequence& operator=(const LaneSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSequence& operator=(LaneSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSequence* internal_default_instance() {
    return reinterpret_cast<const LaneSequence*>(
               &_LaneSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LaneSequence& a, LaneSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneSequence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneSequence";
  }
  protected:
  explicit LaneSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneSequence_Features Features;

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSegmentFieldNumber = 2,
    kNearbyObstacleFieldNumber = 3,
    kPathPointFieldNumber = 8,
    kFeaturesFieldNumber = 4,
    kLaneSequenceIdFieldNumber = 1,
    kLabelFieldNumber = 5,
    kProbabilityFieldNumber = 6,
    kAccelerationFieldNumber = 7,
  };
  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  int lane_segment_size() const;
  private:
  int _internal_lane_segment_size() const;
  public:
  void clear_lane_segment();
  ::apollo::prediction::LaneSegment* mutable_lane_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
      mutable_lane_segment();
  private:
  const ::apollo::prediction::LaneSegment& _internal_lane_segment(int index) const;
  ::apollo::prediction::LaneSegment* _internal_add_lane_segment();
  public:
  const ::apollo::prediction::LaneSegment& lane_segment(int index) const;
  ::apollo::prediction::LaneSegment* add_lane_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
      lane_segment() const;

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  int nearby_obstacle_size() const;
  private:
  int _internal_nearby_obstacle_size() const;
  public:
  void clear_nearby_obstacle();
  ::apollo::prediction::NearbyObstacle* mutable_nearby_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
      mutable_nearby_obstacle();
  private:
  const ::apollo::prediction::NearbyObstacle& _internal_nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* _internal_add_nearby_obstacle();
  public:
  const ::apollo::prediction::NearbyObstacle& nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* add_nearby_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
      nearby_obstacle() const;

  // repeated .apollo.common.PathPoint path_point = 8;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  private:
  const ::apollo::common::PathPoint& _internal_path_point(int index) const;
  ::apollo::common::PathPoint* _internal_add_path_point();
  public:
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::apollo::prediction::LaneSequence_Features& features() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneSequence_Features* release_features();
  ::apollo::prediction::LaneSequence_Features* mutable_features();
  void set_allocated_features(::apollo::prediction::LaneSequence_Features* features);
  private:
  const ::apollo::prediction::LaneSequence_Features& _internal_features() const;
  ::apollo::prediction::LaneSequence_Features* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::apollo::prediction::LaneSequence_Features* features);
  ::apollo::prediction::LaneSequence_Features* unsafe_arena_release_features();

  // optional int32 lane_sequence_id = 1;
  bool has_lane_sequence_id() const;
  private:
  bool _internal_has_lane_sequence_id() const;
  public:
  void clear_lane_sequence_id();
  int32_t lane_sequence_id() const;
  void set_lane_sequence_id(int32_t value);
  private:
  int32_t _internal_lane_sequence_id() const;
  void _internal_set_lane_sequence_id(int32_t value);
  public:

  // optional int32 label = 5 [default = 0];
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // optional double probability = 6 [default = 0];
  bool has_probability() const;
  private:
  bool _internal_has_probability() const;
  public:
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // optional double acceleration = 7 [default = 0];
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSegment > lane_segment_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::NearbyObstacle > nearby_obstacle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
    ::apollo::prediction::LaneSequence_Features* features_;
    int32_t lane_sequence_id_;
    int32_t label_;
    double probability_;
    double acceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class LaneGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneGraph) */ {
 public:
  inline LaneGraph() : LaneGraph(nullptr) {}
  ~LaneGraph() override;
  explicit PROTOBUF_CONSTEXPR LaneGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneGraph(const LaneGraph& from);
  LaneGraph(LaneGraph&& from) noexcept
    : LaneGraph() {
    *this = ::std::move(from);
  }

  inline LaneGraph& operator=(const LaneGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneGraph& operator=(LaneGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneGraph* internal_default_instance() {
    return reinterpret_cast<const LaneGraph*>(
               &_LaneGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LaneGraph& a, LaneGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneGraph& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneGraph";
  }
  protected:
  explicit LaneGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSequenceFieldNumber = 1,
  };
  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  int lane_sequence_size() const;
  private:
  int _internal_lane_sequence_size() const;
  public:
  void clear_lane_sequence();
  ::apollo::prediction::LaneSequence* mutable_lane_sequence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
      mutable_lane_sequence();
  private:
  const ::apollo::prediction::LaneSequence& _internal_lane_sequence(int index) const;
  ::apollo::prediction::LaneSequence* _internal_add_lane_sequence();
  public:
  const ::apollo::prediction::LaneSequence& lane_sequence(int index) const;
  ::apollo::prediction::LaneSequence* add_lane_sequence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
      lane_sequence() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSequence > lane_sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LanePoint

// optional .apollo.common.Point3D position = 1;
inline bool LanePoint::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool LanePoint::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& LanePoint::_internal_position() const {
  const ::apollo::common::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& LanePoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.position)
  return _internal_position();
}
inline void LanePoint::unsafe_arena_set_allocated_position(
    ::apollo::common::Point3D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.LanePoint.position)
}
inline ::apollo::common::Point3D* LanePoint::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* LanePoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LanePoint.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* LanePoint::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::Point3D* LanePoint::mutable_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LanePoint.position)
  return _msg;
}
inline void LanePoint::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LanePoint.position)
}

// optional double heading = 2 [default = 0];
inline bool LanePoint::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LanePoint::has_heading() const {
  return _internal_has_heading();
}
inline void LanePoint::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LanePoint::_internal_heading() const {
  return _impl_.heading_;
}
inline double LanePoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.heading)
  return _internal_heading();
}
inline void LanePoint::_internal_set_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.heading_ = value;
}
inline void LanePoint::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.heading)
}

// optional double width = 3 [default = 0];
inline bool LanePoint::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LanePoint::has_width() const {
  return _internal_has_width();
}
inline void LanePoint::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LanePoint::_internal_width() const {
  return _impl_.width_;
}
inline double LanePoint::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.width)
  return _internal_width();
}
inline void LanePoint::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void LanePoint::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.width)
}

// optional double relative_s = 4 [default = 0];
inline bool LanePoint::_internal_has_relative_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LanePoint::has_relative_s() const {
  return _internal_has_relative_s();
}
inline void LanePoint::clear_relative_s() {
  _impl_.relative_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LanePoint::_internal_relative_s() const {
  return _impl_.relative_s_;
}
inline double LanePoint::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_s)
  return _internal_relative_s();
}
inline void LanePoint::_internal_set_relative_s(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.relative_s_ = value;
}
inline void LanePoint::set_relative_s(double value) {
  _internal_set_relative_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_s)
}

// optional double relative_l = 5 [default = 0];
inline bool LanePoint::_internal_has_relative_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LanePoint::has_relative_l() const {
  return _internal_has_relative_l();
}
inline void LanePoint::clear_relative_l() {
  _impl_.relative_l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LanePoint::_internal_relative_l() const {
  return _impl_.relative_l_;
}
inline double LanePoint::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_l)
  return _internal_relative_l();
}
inline void LanePoint::_internal_set_relative_l(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.relative_l_ = value;
}
inline void LanePoint::set_relative_l(double value) {
  _internal_set_relative_l(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_l)
}

// optional double angle_diff = 6 [default = 0];
inline bool LanePoint::_internal_has_angle_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LanePoint::has_angle_diff() const {
  return _internal_has_angle_diff();
}
inline void LanePoint::clear_angle_diff() {
  _impl_.angle_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LanePoint::_internal_angle_diff() const {
  return _impl_.angle_diff_;
}
inline double LanePoint::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.angle_diff)
  return _internal_angle_diff();
}
inline void LanePoint::_internal_set_angle_diff(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.angle_diff_ = value;
}
inline void LanePoint::set_angle_diff(double value) {
  _internal_set_angle_diff(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.angle_diff)
}

// -------------------------------------------------------------------

// LaneSegment

// optional string lane_id = 1;
inline bool LaneSegment::_internal_has_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneSegment::has_lane_id() const {
  return _internal_has_lane_id();
}
inline void LaneSegment::clear_lane_id() {
  _impl_.lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneSegment::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_id)
  return _internal_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaneSegment::set_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_id)
}
inline std::string* LaneSegment::mutable_lane_id() {
  std::string* _s = _internal_mutable_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_id)
  return _s;
}
inline const std::string& LaneSegment::_internal_lane_id() const {
  return _impl_.lane_id_.Get();
}
inline void LaneSegment::_internal_set_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaneSegment::_internal_mutable_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaneSegment::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSegment.lane_id)
  if (!_internal_has_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LaneSegment::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_id_.SetAllocated(lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSegment.lane_id)
}

// optional double start_s = 2 [default = 0];
inline bool LaneSegment::_internal_has_start_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneSegment::has_start_s() const {
  return _internal_has_start_s();
}
inline void LaneSegment::clear_start_s() {
  _impl_.start_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaneSegment::_internal_start_s() const {
  return _impl_.start_s_;
}
inline double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.start_s)
  return _internal_start_s();
}
inline void LaneSegment::_internal_set_start_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_s_ = value;
}
inline void LaneSegment::set_start_s(double value) {
  _internal_set_start_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.start_s)
}

// optional double end_s = 3 [default = 0];
inline bool LaneSegment::_internal_has_end_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneSegment::has_end_s() const {
  return _internal_has_end_s();
}
inline void LaneSegment::clear_end_s() {
  _impl_.end_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaneSegment::_internal_end_s() const {
  return _impl_.end_s_;
}
inline double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.end_s)
  return _internal_end_s();
}
inline void LaneSegment::_internal_set_end_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_s_ = value;
}
inline void LaneSegment::set_end_s(double value) {
  _internal_set_end_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.end_s)
}

// optional uint32 lane_turn_type = 4 [default = 0];
inline bool LaneSegment::_internal_has_lane_turn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneSegment::has_lane_turn_type() const {
  return _internal_has_lane_turn_type();
}
inline void LaneSegment::clear_lane_turn_type() {
  _impl_.lane_turn_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LaneSegment::_internal_lane_turn_type() const {
  return _impl_.lane_turn_type_;
}
inline uint32_t LaneSegment::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_turn_type)
  return _internal_lane_turn_type();
}
inline void LaneSegment::_internal_set_lane_turn_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lane_turn_type_ = value;
}
inline void LaneSegment::set_lane_turn_type(uint32_t value) {
  _internal_set_lane_turn_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_turn_type)
}

// repeated .apollo.prediction.LanePoint lane_point = 5;
inline int LaneSegment::_internal_lane_point_size() const {
  return _impl_.lane_point_.size();
}
inline int LaneSegment::lane_point_size() const {
  return _internal_lane_point_size();
}
inline void LaneSegment::clear_lane_point() {
  _impl_.lane_point_.Clear();
}
inline ::apollo::prediction::LanePoint* LaneSegment::mutable_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_point)
  return _impl_.lane_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSegment::mutable_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSegment.lane_point)
  return &_impl_.lane_point_;
}
inline const ::apollo::prediction::LanePoint& LaneSegment::_internal_lane_point(int index) const {
  return _impl_.lane_point_.Get(index);
}
inline const ::apollo::prediction::LanePoint& LaneSegment::lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_point)
  return _internal_lane_point(index);
}
inline ::apollo::prediction::LanePoint* LaneSegment::_internal_add_lane_point() {
  return _impl_.lane_point_.Add();
}
inline ::apollo::prediction::LanePoint* LaneSegment::add_lane_point() {
  ::apollo::prediction::LanePoint* _add = _internal_add_lane_point();
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSegment.lane_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSegment::lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSegment.lane_point)
  return _impl_.lane_point_;
}

// optional double total_length = 6 [default = 0];
inline bool LaneSegment::_internal_has_total_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneSegment::has_total_length() const {
  return _internal_has_total_length();
}
inline void LaneSegment::clear_total_length() {
  _impl_.total_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LaneSegment::_internal_total_length() const {
  return _impl_.total_length_;
}
inline double LaneSegment::total_length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.total_length)
  return _internal_total_length();
}
inline void LaneSegment::_internal_set_total_length(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.total_length_ = value;
}
inline void LaneSegment::set_total_length(double value) {
  _internal_set_total_length(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.total_length)
}

// -------------------------------------------------------------------

// NearbyObstacle

// optional int32 id = 1;
inline bool NearbyObstacle::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NearbyObstacle::has_id() const {
  return _internal_has_id();
}
inline void NearbyObstacle::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t NearbyObstacle::_internal_id() const {
  return _impl_.id_;
}
inline int32_t NearbyObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.id)
  return _internal_id();
}
inline void NearbyObstacle::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void NearbyObstacle::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.id)
}

// optional double s = 2;
inline bool NearbyObstacle::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NearbyObstacle::has_s() const {
  return _internal_has_s();
}
inline void NearbyObstacle::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double NearbyObstacle::_internal_s() const {
  return _impl_.s_;
}
inline double NearbyObstacle::s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.s)
  return _internal_s();
}
inline void NearbyObstacle::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void NearbyObstacle::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.s)
}

// -------------------------------------------------------------------

// LaneSequence_Features

// repeated double mlp_features = 1;
inline int LaneSequence_Features::_internal_mlp_features_size() const {
  return _impl_.mlp_features_.size();
}
inline int LaneSequence_Features::mlp_features_size() const {
  return _internal_mlp_features_size();
}
inline void LaneSequence_Features::clear_mlp_features() {
  _impl_.mlp_features_.Clear();
}
inline double LaneSequence_Features::_internal_mlp_features(int index) const {
  return _impl_.mlp_features_.Get(index);
}
inline double LaneSequence_Features::mlp_features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.Features.mlp_features)
  return _internal_mlp_features(index);
}
inline void LaneSequence_Features::set_mlp_features(int index, double value) {
  _impl_.mlp_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.Features.mlp_features)
}
inline void LaneSequence_Features::_internal_add_mlp_features(double value) {
  _impl_.mlp_features_.Add(value);
}
inline void LaneSequence_Features::add_mlp_features(double value) {
  _internal_add_mlp_features(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.Features.mlp_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaneSequence_Features::_internal_mlp_features() const {
  return _impl_.mlp_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaneSequence_Features::mlp_features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return _internal_mlp_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaneSequence_Features::_internal_mutable_mlp_features() {
  return &_impl_.mlp_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaneSequence_Features::mutable_mlp_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return _internal_mutable_mlp_features();
}

// -------------------------------------------------------------------

// LaneSequence

// optional int32 lane_sequence_id = 1;
inline bool LaneSequence::_internal_has_lane_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneSequence::has_lane_sequence_id() const {
  return _internal_has_lane_sequence_id();
}
inline void LaneSequence::clear_lane_sequence_id() {
  _impl_.lane_sequence_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t LaneSequence::_internal_lane_sequence_id() const {
  return _impl_.lane_sequence_id_;
}
inline int32_t LaneSequence::lane_sequence_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_sequence_id)
  return _internal_lane_sequence_id();
}
inline void LaneSequence::_internal_set_lane_sequence_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_sequence_id_ = value;
}
inline void LaneSequence::set_lane_sequence_id(int32_t value) {
  _internal_set_lane_sequence_id(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_sequence_id)
}

// repeated .apollo.prediction.LaneSegment lane_segment = 2;
inline int LaneSequence::_internal_lane_segment_size() const {
  return _impl_.lane_segment_.size();
}
inline int LaneSequence::lane_segment_size() const {
  return _internal_lane_segment_size();
}
inline void LaneSequence::clear_lane_segment() {
  _impl_.lane_segment_.Clear();
}
inline ::apollo::prediction::LaneSegment* LaneSequence::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.lane_segment)
  return _impl_.lane_segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
LaneSequence::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.lane_segment)
  return &_impl_.lane_segment_;
}
inline const ::apollo::prediction::LaneSegment& LaneSequence::_internal_lane_segment(int index) const {
  return _impl_.lane_segment_.Get(index);
}
inline const ::apollo::prediction::LaneSegment& LaneSequence::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_segment)
  return _internal_lane_segment(index);
}
inline ::apollo::prediction::LaneSegment* LaneSequence::_internal_add_lane_segment() {
  return _impl_.lane_segment_.Add();
}
inline ::apollo::prediction::LaneSegment* LaneSequence::add_lane_segment() {
  ::apollo::prediction::LaneSegment* _add = _internal_add_lane_segment();
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.lane_segment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
LaneSequence::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.lane_segment)
  return _impl_.lane_segment_;
}

// repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
inline int LaneSequence::_internal_nearby_obstacle_size() const {
  return _impl_.nearby_obstacle_.size();
}
inline int LaneSequence::nearby_obstacle_size() const {
  return _internal_nearby_obstacle_size();
}
inline void LaneSequence::clear_nearby_obstacle() {
  _impl_.nearby_obstacle_.Clear();
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::mutable_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.nearby_obstacle)
  return _impl_.nearby_obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return &_impl_.nearby_obstacle_;
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::_internal_nearby_obstacle(int index) const {
  return _impl_.nearby_obstacle_.Get(index);
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.nearby_obstacle)
  return _internal_nearby_obstacle(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::_internal_add_nearby_obstacle() {
  return _impl_.nearby_obstacle_.Add();
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::add_nearby_obstacle() {
  ::apollo::prediction::NearbyObstacle* _add = _internal_add_nearby_obstacle();
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.nearby_obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return _impl_.nearby_obstacle_;
}

// optional .apollo.prediction.LaneSequence.Features features = 4;
inline bool LaneSequence::_internal_has_features() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.features_ != nullptr);
  return value;
}
inline bool LaneSequence::has_features() const {
  return _internal_has_features();
}
inline void LaneSequence::clear_features() {
  if (_impl_.features_ != nullptr) _impl_.features_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::LaneSequence_Features& LaneSequence::_internal_features() const {
  const ::apollo::prediction::LaneSequence_Features* p = _impl_.features_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneSequence_Features&>(
      ::apollo::prediction::_LaneSequence_Features_default_instance_);
}
inline const ::apollo::prediction::LaneSequence_Features& LaneSequence::features() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.features)
  return _internal_features();
}
inline void LaneSequence::unsafe_arena_set_allocated_features(
    ::apollo::prediction::LaneSequence_Features* features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.features_);
  }
  _impl_.features_ = features;
  if (features) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.LaneSequence.features)
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::release_features() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneSequence_Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSequence.features)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneSequence_Features* temp = _impl_.features_;
  _impl_.features_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::_internal_mutable_features() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.features_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneSequence_Features>(GetArenaForAllocation());
    _impl_.features_ = p;
  }
  return _impl_.features_;
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::mutable_features() {
  ::apollo::prediction::LaneSequence_Features* _msg = _internal_mutable_features();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.features)
  return _msg;
}
inline void LaneSequence::set_allocated_features(::apollo::prediction::LaneSequence_Features* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.features_ = features;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSequence.features)
}

// optional int32 label = 5 [default = 0];
inline bool LaneSequence::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneSequence::has_label() const {
  return _internal_has_label();
}
inline void LaneSequence::clear_label() {
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t LaneSequence::_internal_label() const {
  return _impl_.label_;
}
inline int32_t LaneSequence::label() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.label)
  return _internal_label();
}
inline void LaneSequence::_internal_set_label(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_ = value;
}
inline void LaneSequence::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.label)
}

// optional double probability = 6 [default = 0];
inline bool LaneSequence::_internal_has_probability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneSequence::has_probability() const {
  return _internal_has_probability();
}
inline void LaneSequence::clear_probability() {
  _impl_.probability_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LaneSequence::_internal_probability() const {
  return _impl_.probability_;
}
inline double LaneSequence::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.probability)
  return _internal_probability();
}
inline void LaneSequence::_internal_set_probability(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.probability_ = value;
}
inline void LaneSequence::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.probability)
}

// optional double acceleration = 7 [default = 0];
inline bool LaneSequence::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneSequence::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void LaneSequence::clear_acceleration() {
  _impl_.acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LaneSequence::_internal_acceleration() const {
  return _impl_.acceleration_;
}
inline double LaneSequence::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.acceleration)
  return _internal_acceleration();
}
inline void LaneSequence::_internal_set_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.acceleration_ = value;
}
inline void LaneSequence::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.acceleration)
}

// repeated .apollo.common.PathPoint path_point = 8;
inline int LaneSequence::_internal_path_point_size() const {
  return _impl_.path_point_.size();
}
inline int LaneSequence::path_point_size() const {
  return _internal_path_point_size();
}
inline ::apollo::common::PathPoint* LaneSequence::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.path_point)
  return _impl_.path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
LaneSequence::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.path_point)
  return &_impl_.path_point_;
}
inline const ::apollo::common::PathPoint& LaneSequence::_internal_path_point(int index) const {
  return _impl_.path_point_.Get(index);
}
inline const ::apollo::common::PathPoint& LaneSequence::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.path_point)
  return _internal_path_point(index);
}
inline ::apollo::common::PathPoint* LaneSequence::_internal_add_path_point() {
  return _impl_.path_point_.Add();
}
inline ::apollo::common::PathPoint* LaneSequence::add_path_point() {
  ::apollo::common::PathPoint* _add = _internal_add_path_point();
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.path_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
LaneSequence::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.path_point)
  return _impl_.path_point_;
}

// -------------------------------------------------------------------

// LaneGraph

// repeated .apollo.prediction.LaneSequence lane_sequence = 1;
inline int LaneGraph::_internal_lane_sequence_size() const {
  return _impl_.lane_sequence_.size();
}
inline int LaneGraph::lane_sequence_size() const {
  return _internal_lane_sequence_size();
}
inline void LaneGraph::clear_lane_sequence() {
  _impl_.lane_sequence_.Clear();
}
inline ::apollo::prediction::LaneSequence* LaneGraph::mutable_lane_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneGraph.lane_sequence)
  return _impl_.lane_sequence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
LaneGraph::mutable_lane_sequence() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneGraph.lane_sequence)
  return &_impl_.lane_sequence_;
}
inline const ::apollo::prediction::LaneSequence& LaneGraph::_internal_lane_sequence(int index) const {
  return _impl_.lane_sequence_.Get(index);
}
inline const ::apollo::prediction::LaneSequence& LaneGraph::lane_sequence(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneGraph.lane_sequence)
  return _internal_lane_sequence(index);
}
inline ::apollo::prediction::LaneSequence* LaneGraph::_internal_add_lane_sequence() {
  return _impl_.lane_sequence_.Add();
}
inline ::apollo::prediction::LaneSequence* LaneGraph::add_lane_sequence() {
  ::apollo::prediction::LaneSequence* _add = _internal_add_lane_sequence();
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneGraph.lane_sequence)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
LaneGraph::lane_sequence() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneGraph.lane_sequence)
  return _impl_.lane_sequence_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
