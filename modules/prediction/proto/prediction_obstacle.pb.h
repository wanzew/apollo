// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/prediction/proto/scenario.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/feature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
namespace apollo {
namespace prediction {
class Intent;
struct IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class ObstacleIntent;
struct ObstacleIntentDefaultTypeInternal;
extern ObstacleIntentDefaultTypeInternal _ObstacleIntent_default_instance_;
class PredictionObstacle;
struct PredictionObstacleDefaultTypeInternal;
extern PredictionObstacleDefaultTypeInternal _PredictionObstacle_default_instance_;
class PredictionObstacles;
struct PredictionObstaclesDefaultTypeInternal;
extern PredictionObstaclesDefaultTypeInternal _PredictionObstacles_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::Intent* Arena::CreateMaybeMessage<::apollo::prediction::Intent>(Arena*);
template<> ::apollo::prediction::ObstacleIntent* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleIntent>(Arena*);
template<> ::apollo::prediction::PredictionObstacle* Arena::CreateMaybeMessage<::apollo::prediction::PredictionObstacle>(Arena*);
template<> ::apollo::prediction::PredictionObstacles* Arena::CreateMaybeMessage<::apollo::prediction::PredictionObstacles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

enum ObstacleIntent_Type : int {
  ObstacleIntent_Type_UNKNOWN = 0,
  ObstacleIntent_Type_STOP = 1,
  ObstacleIntent_Type_STATIONARY = 2,
  ObstacleIntent_Type_MOVING = 3,
  ObstacleIntent_Type_CHANGE_LANE = 4,
  ObstacleIntent_Type_LOW_ACCELERATION = 5,
  ObstacleIntent_Type_HIGH_ACCELERATION = 6,
  ObstacleIntent_Type_LOW_DECELERATION = 7,
  ObstacleIntent_Type_HIGH_DECELERATION = 8
};
bool ObstacleIntent_Type_IsValid(int value);
constexpr ObstacleIntent_Type ObstacleIntent_Type_Type_MIN = ObstacleIntent_Type_UNKNOWN;
constexpr ObstacleIntent_Type ObstacleIntent_Type_Type_MAX = ObstacleIntent_Type_HIGH_DECELERATION;
constexpr int ObstacleIntent_Type_Type_ARRAYSIZE = ObstacleIntent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleIntent_Type_descriptor();
template<typename T>
inline const std::string& ObstacleIntent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleIntent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleIntent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleIntent_Type_descriptor(), enum_t_value);
}
inline bool ObstacleIntent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleIntent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleIntent_Type>(
    ObstacleIntent_Type_descriptor(), name, value);
}
enum Intent_Type : int {
  Intent_Type_UNKNOWN = 0,
  Intent_Type_STOP = 1,
  Intent_Type_CRUISE = 2,
  Intent_Type_CHANGE_LANE = 3
};
bool Intent_Type_IsValid(int value);
constexpr Intent_Type Intent_Type_Type_MIN = Intent_Type_UNKNOWN;
constexpr Intent_Type Intent_Type_Type_MAX = Intent_Type_CHANGE_LANE;
constexpr int Intent_Type_Type_ARRAYSIZE = Intent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Type_descriptor();
template<typename T>
inline const std::string& Intent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Intent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Intent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Intent_Type_descriptor(), enum_t_value);
}
inline bool Intent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Intent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Intent_Type>(
    Intent_Type_descriptor(), name, value);
}
// ===================================================================

class ObstacleIntent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleIntent) */ {
 public:
  inline ObstacleIntent() : ObstacleIntent(nullptr) {}
  ~ObstacleIntent() override;
  explicit PROTOBUF_CONSTEXPR ObstacleIntent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstacleIntent(const ObstacleIntent& from);
  ObstacleIntent(ObstacleIntent&& from) noexcept
    : ObstacleIntent() {
    *this = ::std::move(from);
  }

  inline ObstacleIntent& operator=(const ObstacleIntent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleIntent& operator=(ObstacleIntent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstacleIntent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstacleIntent* internal_default_instance() {
    return reinterpret_cast<const ObstacleIntent*>(
               &_ObstacleIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleIntent& a, ObstacleIntent& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleIntent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleIntent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstacleIntent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstacleIntent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstacleIntent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstacleIntent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleIntent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstacleIntent";
  }
  protected:
  explicit ObstacleIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleIntent_Type Type;
  static constexpr Type UNKNOWN =
    ObstacleIntent_Type_UNKNOWN;
  static constexpr Type STOP =
    ObstacleIntent_Type_STOP;
  static constexpr Type STATIONARY =
    ObstacleIntent_Type_STATIONARY;
  static constexpr Type MOVING =
    ObstacleIntent_Type_MOVING;
  static constexpr Type CHANGE_LANE =
    ObstacleIntent_Type_CHANGE_LANE;
  static constexpr Type LOW_ACCELERATION =
    ObstacleIntent_Type_LOW_ACCELERATION;
  static constexpr Type HIGH_ACCELERATION =
    ObstacleIntent_Type_HIGH_ACCELERATION;
  static constexpr Type LOW_DECELERATION =
    ObstacleIntent_Type_LOW_DECELERATION;
  static constexpr Type HIGH_DECELERATION =
    ObstacleIntent_Type_HIGH_DECELERATION;
  static inline bool Type_IsValid(int value) {
    return ObstacleIntent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ObstacleIntent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ObstacleIntent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ObstacleIntent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ObstacleIntent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ObstacleIntent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ObstacleIntent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::prediction::ObstacleIntent_Type type() const;
  void set_type(::apollo::prediction::ObstacleIntent_Type value);
  private:
  ::apollo::prediction::ObstacleIntent_Type _internal_type() const;
  void _internal_set_type(::apollo::prediction::ObstacleIntent_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleIntent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class Intent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Intent) */ {
 public:
  inline Intent() : Intent(nullptr) {}
  ~Intent() override;
  explicit PROTOBUF_CONSTEXPR Intent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Intent(const Intent& from);
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intent& operator=(Intent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Intent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }
  inline void Swap(Intent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Intent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Intent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Intent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Intent";
  }
  protected:
  explicit Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Type Type;
  static constexpr Type UNKNOWN =
    Intent_Type_UNKNOWN;
  static constexpr Type STOP =
    Intent_Type_STOP;
  static constexpr Type CRUISE =
    Intent_Type_CRUISE;
  static constexpr Type CHANGE_LANE =
    Intent_Type_CHANGE_LANE;
  static inline bool Type_IsValid(int value) {
    return Intent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Intent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Intent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Intent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Intent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Intent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Intent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::prediction::Intent_Type type() const;
  void set_type(::apollo::prediction::Intent_Type value);
  private:
  ::apollo::prediction::Intent_Type _internal_type() const;
  void _internal_set_type(::apollo::prediction::Intent_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Intent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PredictionObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionObstacle) */ {
 public:
  inline PredictionObstacle() : PredictionObstacle(nullptr) {}
  ~PredictionObstacle() override;
  explicit PROTOBUF_CONSTEXPR PredictionObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionObstacle(const PredictionObstacle& from);
  PredictionObstacle(PredictionObstacle&& from) noexcept
    : PredictionObstacle() {
    *this = ::std::move(from);
  }

  inline PredictionObstacle& operator=(const PredictionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionObstacle& operator=(PredictionObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictionObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionObstacle* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacle*>(
               &_PredictionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictionObstacle& a, PredictionObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictionObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PredictionObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredictionObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PredictionObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.PredictionObstacle";
  }
  protected:
  explicit PredictionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 4,
    kFeatureFieldNumber = 8,
    kPerceptionObstacleFieldNumber = 1,
    kIntentFieldNumber = 5,
    kPriorityFieldNumber = 6,
    kInteractiveTagFieldNumber = 9,
    kTimestampFieldNumber = 2,
    kPredictedPeriodFieldNumber = 3,
    kIsStaticFieldNumber = 7,
  };
  // repeated .apollo.prediction.Trajectory trajectory = 4;
  int trajectory_size() const;
  private:
  int _internal_trajectory_size() const;
  public:
  void clear_trajectory();
  ::apollo::prediction::Trajectory* mutable_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >*
      mutable_trajectory();
  private:
  const ::apollo::prediction::Trajectory& _internal_trajectory(int index) const;
  ::apollo::prediction::Trajectory* _internal_add_trajectory();
  public:
  const ::apollo::prediction::Trajectory& trajectory(int index) const;
  ::apollo::prediction::Trajectory* add_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >&
      trajectory() const;

  // repeated .apollo.prediction.Feature feature = 8;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::apollo::prediction::Feature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >*
      mutable_feature();
  private:
  const ::apollo::prediction::Feature& _internal_feature(int index) const;
  ::apollo::prediction::Feature* _internal_add_feature();
  public:
  const ::apollo::prediction::Feature& feature(int index) const;
  ::apollo::prediction::Feature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >&
      feature() const;

  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  bool has_perception_obstacle() const;
  private:
  bool _internal_has_perception_obstacle() const;
  public:
  void clear_perception_obstacle();
  const ::apollo::perception::PerceptionObstacle& perception_obstacle() const;
  PROTOBUF_NODISCARD ::apollo::perception::PerceptionObstacle* release_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle();
  void set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle);
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_perception_obstacle() const;
  ::apollo::perception::PerceptionObstacle* _internal_mutable_perception_obstacle();
  public:
  void unsafe_arena_set_allocated_perception_obstacle(
      ::apollo::perception::PerceptionObstacle* perception_obstacle);
  ::apollo::perception::PerceptionObstacle* unsafe_arena_release_perception_obstacle();

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::apollo::prediction::ObstacleIntent& intent() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstacleIntent* release_intent();
  ::apollo::prediction::ObstacleIntent* mutable_intent();
  void set_allocated_intent(::apollo::prediction::ObstacleIntent* intent);
  private:
  const ::apollo::prediction::ObstacleIntent& _internal_intent() const;
  ::apollo::prediction::ObstacleIntent* _internal_mutable_intent();
  public:
  void unsafe_arena_set_allocated_intent(
      ::apollo::prediction::ObstacleIntent* intent);
  ::apollo::prediction::ObstacleIntent* unsafe_arena_release_intent();

  // optional .apollo.prediction.ObstaclePriority priority = 6;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::apollo::prediction::ObstaclePriority& priority() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstaclePriority* release_priority();
  ::apollo::prediction::ObstaclePriority* mutable_priority();
  void set_allocated_priority(::apollo::prediction::ObstaclePriority* priority);
  private:
  const ::apollo::prediction::ObstaclePriority& _internal_priority() const;
  ::apollo::prediction::ObstaclePriority* _internal_mutable_priority();
  public:
  void unsafe_arena_set_allocated_priority(
      ::apollo::prediction::ObstaclePriority* priority);
  ::apollo::prediction::ObstaclePriority* unsafe_arena_release_priority();

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
  bool has_interactive_tag() const;
  private:
  bool _internal_has_interactive_tag() const;
  public:
  void clear_interactive_tag();
  const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstacleInteractiveTag* release_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag* mutable_interactive_tag();
  void set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag);
  private:
  const ::apollo::prediction::ObstacleInteractiveTag& _internal_interactive_tag() const;
  ::apollo::prediction::ObstacleInteractiveTag* _internal_mutable_interactive_tag();
  public:
  void unsafe_arena_set_allocated_interactive_tag(
      ::apollo::prediction::ObstacleInteractiveTag* interactive_tag);
  ::apollo::prediction::ObstacleInteractiveTag* unsafe_arena_release_interactive_tag();

  // optional double timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double predicted_period = 3;
  bool has_predicted_period() const;
  private:
  bool _internal_has_predicted_period() const;
  public:
  void clear_predicted_period();
  double predicted_period() const;
  void set_predicted_period(double value);
  private:
  double _internal_predicted_period() const;
  void _internal_set_predicted_period(double value);
  public:

  // optional bool is_static = 7 [default = false];
  bool has_is_static() const;
  private:
  bool _internal_has_is_static() const;
  public:
  void clear_is_static();
  bool is_static() const;
  void set_is_static(bool value);
  private:
  bool _internal_is_static() const;
  void _internal_set_is_static(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory > trajectory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature > feature_;
    ::apollo::perception::PerceptionObstacle* perception_obstacle_;
    ::apollo::prediction::ObstacleIntent* intent_;
    ::apollo::prediction::ObstaclePriority* priority_;
    ::apollo::prediction::ObstacleInteractiveTag* interactive_tag_;
    double timestamp_;
    double predicted_period_;
    bool is_static_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PredictionObstacles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionObstacles) */ {
 public:
  inline PredictionObstacles() : PredictionObstacles(nullptr) {}
  ~PredictionObstacles() override;
  explicit PROTOBUF_CONSTEXPR PredictionObstacles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionObstacles(const PredictionObstacles& from);
  PredictionObstacles(PredictionObstacles&& from) noexcept
    : PredictionObstacles() {
    *this = ::std::move(from);
  }

  inline PredictionObstacles& operator=(const PredictionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionObstacles& operator=(PredictionObstacles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictionObstacles& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionObstacles* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacles*>(
               &_PredictionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PredictionObstacles& a, PredictionObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionObstacles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionObstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictionObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PredictionObstacles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredictionObstacles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PredictionObstacles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.PredictionObstacles";
  }
  protected:
  explicit PredictionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionObstacleFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kIntentFieldNumber = 6,
    kScenarioFieldNumber = 7,
    kStartTimestampFieldNumber = 4,
    kEndTimestampFieldNumber = 5,
    kPerceptionErrorCodeFieldNumber = 3,
  };
  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  int prediction_obstacle_size() const;
  private:
  int _internal_prediction_obstacle_size() const;
  public:
  void clear_prediction_obstacle();
  ::apollo::prediction::PredictionObstacle* mutable_prediction_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >*
      mutable_prediction_obstacle();
  private:
  const ::apollo::prediction::PredictionObstacle& _internal_prediction_obstacle(int index) const;
  ::apollo::prediction::PredictionObstacle* _internal_add_prediction_obstacle();
  public:
  const ::apollo::prediction::PredictionObstacle& prediction_obstacle(int index) const;
  ::apollo::prediction::PredictionObstacle* add_prediction_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >&
      prediction_obstacle() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.prediction.Intent intent = 6;
  bool has_intent() const;
  private:
  bool _internal_has_intent() const;
  public:
  void clear_intent();
  const ::apollo::prediction::Intent& intent() const;
  PROTOBUF_NODISCARD ::apollo::prediction::Intent* release_intent();
  ::apollo::prediction::Intent* mutable_intent();
  void set_allocated_intent(::apollo::prediction::Intent* intent);
  private:
  const ::apollo::prediction::Intent& _internal_intent() const;
  ::apollo::prediction::Intent* _internal_mutable_intent();
  public:
  void unsafe_arena_set_allocated_intent(
      ::apollo::prediction::Intent* intent);
  ::apollo::prediction::Intent* unsafe_arena_release_intent();

  // optional .apollo.prediction.Scenario scenario = 7;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::apollo::prediction::Scenario& scenario() const;
  PROTOBUF_NODISCARD ::apollo::prediction::Scenario* release_scenario();
  ::apollo::prediction::Scenario* mutable_scenario();
  void set_allocated_scenario(::apollo::prediction::Scenario* scenario);
  private:
  const ::apollo::prediction::Scenario& _internal_scenario() const;
  ::apollo::prediction::Scenario* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::apollo::prediction::Scenario* scenario);
  ::apollo::prediction::Scenario* unsafe_arena_release_scenario();

  // optional double start_timestamp = 4;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  double start_timestamp() const;
  void set_start_timestamp(double value);
  private:
  double _internal_start_timestamp() const;
  void _internal_set_start_timestamp(double value);
  public:

  // optional double end_timestamp = 5;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  double end_timestamp() const;
  void set_end_timestamp(double value);
  private:
  double _internal_end_timestamp() const;
  void _internal_set_end_timestamp(double value);
  public:

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  bool has_perception_error_code() const;
  private:
  bool _internal_has_perception_error_code() const;
  public:
  void clear_perception_error_code();
  ::apollo::common::ErrorCode perception_error_code() const;
  void set_perception_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_perception_error_code() const;
  void _internal_set_perception_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionObstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionObstacle > prediction_obstacle_;
    ::apollo::common::Header* header_;
    ::apollo::prediction::Intent* intent_;
    ::apollo::prediction::Scenario* scenario_;
    double start_timestamp_;
    double end_timestamp_;
    int perception_error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleIntent

// optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
inline bool ObstacleIntent::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleIntent::has_type() const {
  return _internal_has_type();
}
inline void ObstacleIntent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::prediction::ObstacleIntent_Type ObstacleIntent::_internal_type() const {
  return static_cast< ::apollo::prediction::ObstacleIntent_Type >(_impl_.type_);
}
inline ::apollo::prediction::ObstacleIntent_Type ObstacleIntent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleIntent.type)
  return _internal_type();
}
inline void ObstacleIntent::_internal_set_type(::apollo::prediction::ObstacleIntent_Type value) {
  assert(::apollo::prediction::ObstacleIntent_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void ObstacleIntent::set_type(::apollo::prediction::ObstacleIntent_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleIntent.type)
}

// -------------------------------------------------------------------

// Intent

// optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
inline bool Intent::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Intent::has_type() const {
  return _internal_has_type();
}
inline void Intent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::prediction::Intent_Type Intent::_internal_type() const {
  return static_cast< ::apollo::prediction::Intent_Type >(_impl_.type_);
}
inline ::apollo::prediction::Intent_Type Intent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Intent.type)
  return _internal_type();
}
inline void Intent::_internal_set_type(::apollo::prediction::Intent_Type value) {
  assert(::apollo::prediction::Intent_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void Intent::set_type(::apollo::prediction::Intent_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Intent.type)
}

// -------------------------------------------------------------------

// PredictionObstacle

// optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline bool PredictionObstacle::_internal_has_perception_obstacle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.perception_obstacle_ != nullptr);
  return value;
}
inline bool PredictionObstacle::has_perception_obstacle() const {
  return _internal_has_perception_obstacle();
}
inline const ::apollo::perception::PerceptionObstacle& PredictionObstacle::_internal_perception_obstacle() const {
  const ::apollo::perception::PerceptionObstacle* p = _impl_.perception_obstacle_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::PerceptionObstacle&>(
      ::apollo::perception::_PerceptionObstacle_default_instance_);
}
inline const ::apollo::perception::PerceptionObstacle& PredictionObstacle::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.perception_obstacle)
  return _internal_perception_obstacle();
}
inline void PredictionObstacle::unsafe_arena_set_allocated_perception_obstacle(
    ::apollo::perception::PerceptionObstacle* perception_obstacle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perception_obstacle_);
  }
  _impl_.perception_obstacle_ = perception_obstacle;
  if (perception_obstacle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacle.perception_obstacle)
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::release_perception_obstacle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.perception_obstacle_;
  _impl_.perception_obstacle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::unsafe_arena_release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.perception_obstacle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.perception_obstacle_;
  _impl_.perception_obstacle_ = nullptr;
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::_internal_mutable_perception_obstacle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.perception_obstacle_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(GetArenaForAllocation());
    _impl_.perception_obstacle_ = p;
  }
  return _impl_.perception_obstacle_;
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::mutable_perception_obstacle() {
  ::apollo::perception::PerceptionObstacle* _msg = _internal_mutable_perception_obstacle();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.perception_obstacle)
  return _msg;
}
inline void PredictionObstacle::set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perception_obstacle_);
  }
  if (perception_obstacle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perception_obstacle));
    if (message_arena != submessage_arena) {
      perception_obstacle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perception_obstacle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.perception_obstacle_ = perception_obstacle;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.perception_obstacle)
}

// optional double timestamp = 2;
inline bool PredictionObstacle::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PredictionObstacle::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PredictionObstacle::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PredictionObstacle::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double PredictionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.timestamp)
  return _internal_timestamp();
}
inline void PredictionObstacle::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timestamp_ = value;
}
inline void PredictionObstacle::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.timestamp)
}

// optional double predicted_period = 3;
inline bool PredictionObstacle::_internal_has_predicted_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PredictionObstacle::has_predicted_period() const {
  return _internal_has_predicted_period();
}
inline void PredictionObstacle::clear_predicted_period() {
  _impl_.predicted_period_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PredictionObstacle::_internal_predicted_period() const {
  return _impl_.predicted_period_;
}
inline double PredictionObstacle::predicted_period() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.predicted_period)
  return _internal_predicted_period();
}
inline void PredictionObstacle::_internal_set_predicted_period(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.predicted_period_ = value;
}
inline void PredictionObstacle::set_predicted_period(double value) {
  _internal_set_predicted_period(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.predicted_period)
}

// repeated .apollo.prediction.Trajectory trajectory = 4;
inline int PredictionObstacle::_internal_trajectory_size() const {
  return _impl_.trajectory_.size();
}
inline int PredictionObstacle::trajectory_size() const {
  return _internal_trajectory_size();
}
inline ::apollo::prediction::Trajectory* PredictionObstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.trajectory)
  return _impl_.trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >*
PredictionObstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacle.trajectory)
  return &_impl_.trajectory_;
}
inline const ::apollo::prediction::Trajectory& PredictionObstacle::_internal_trajectory(int index) const {
  return _impl_.trajectory_.Get(index);
}
inline const ::apollo::prediction::Trajectory& PredictionObstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.trajectory)
  return _internal_trajectory(index);
}
inline ::apollo::prediction::Trajectory* PredictionObstacle::_internal_add_trajectory() {
  return _impl_.trajectory_.Add();
}
inline ::apollo::prediction::Trajectory* PredictionObstacle::add_trajectory() {
  ::apollo::prediction::Trajectory* _add = _internal_add_trajectory();
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacle.trajectory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >&
PredictionObstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacle.trajectory)
  return _impl_.trajectory_;
}

// optional .apollo.prediction.ObstacleIntent intent = 5;
inline bool PredictionObstacle::_internal_has_intent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.intent_ != nullptr);
  return value;
}
inline bool PredictionObstacle::has_intent() const {
  return _internal_has_intent();
}
inline void PredictionObstacle::clear_intent() {
  if (_impl_.intent_ != nullptr) _impl_.intent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::ObstacleIntent& PredictionObstacle::_internal_intent() const {
  const ::apollo::prediction::ObstacleIntent* p = _impl_.intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstacleIntent&>(
      ::apollo::prediction::_ObstacleIntent_default_instance_);
}
inline const ::apollo::prediction::ObstacleIntent& PredictionObstacle::intent() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.intent)
  return _internal_intent();
}
inline void PredictionObstacle::unsafe_arena_set_allocated_intent(
    ::apollo::prediction::ObstacleIntent* intent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intent_);
  }
  _impl_.intent_ = intent;
  if (intent) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacle.intent)
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::release_intent() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::ObstacleIntent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::unsafe_arena_release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.intent)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::ObstacleIntent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::_internal_mutable_intent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleIntent>(GetArenaForAllocation());
    _impl_.intent_ = p;
  }
  return _impl_.intent_;
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::mutable_intent() {
  ::apollo::prediction::ObstacleIntent* _msg = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.intent)
  return _msg;
}
inline void PredictionObstacle::set_allocated_intent(::apollo::prediction::ObstacleIntent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intent_;
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intent);
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.intent)
}

// optional .apollo.prediction.ObstaclePriority priority = 6;
inline bool PredictionObstacle::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priority_ != nullptr);
  return value;
}
inline bool PredictionObstacle::has_priority() const {
  return _internal_has_priority();
}
inline const ::apollo::prediction::ObstaclePriority& PredictionObstacle::_internal_priority() const {
  const ::apollo::prediction::ObstaclePriority* p = _impl_.priority_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstaclePriority&>(
      ::apollo::prediction::_ObstaclePriority_default_instance_);
}
inline const ::apollo::prediction::ObstaclePriority& PredictionObstacle::priority() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.priority)
  return _internal_priority();
}
inline void PredictionObstacle::unsafe_arena_set_allocated_priority(
    ::apollo::prediction::ObstaclePriority* priority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  _impl_.priority_ = priority;
  if (priority) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacle.priority)
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::release_priority() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::ObstaclePriority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.priority)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::ObstaclePriority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::_internal_mutable_priority() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstaclePriority>(GetArenaForAllocation());
    _impl_.priority_ = p;
  }
  return _impl_.priority_;
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::mutable_priority() {
  ::apollo::prediction::ObstaclePriority* _msg = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.priority)
  return _msg;
}
inline void PredictionObstacle::set_allocated_priority(::apollo::prediction::ObstaclePriority* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority));
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.priority)
}

// optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
inline bool PredictionObstacle::_internal_has_interactive_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interactive_tag_ != nullptr);
  return value;
}
inline bool PredictionObstacle::has_interactive_tag() const {
  return _internal_has_interactive_tag();
}
inline const ::apollo::prediction::ObstacleInteractiveTag& PredictionObstacle::_internal_interactive_tag() const {
  const ::apollo::prediction::ObstacleInteractiveTag* p = _impl_.interactive_tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstacleInteractiveTag&>(
      ::apollo::prediction::_ObstacleInteractiveTag_default_instance_);
}
inline const ::apollo::prediction::ObstacleInteractiveTag& PredictionObstacle::interactive_tag() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.interactive_tag)
  return _internal_interactive_tag();
}
inline void PredictionObstacle::unsafe_arena_set_allocated_interactive_tag(
    ::apollo::prediction::ObstacleInteractiveTag* interactive_tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactive_tag_);
  }
  _impl_.interactive_tag_ = interactive_tag;
  if (interactive_tag) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacle.interactive_tag)
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::release_interactive_tag() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::ObstacleInteractiveTag* temp = _impl_.interactive_tag_;
  _impl_.interactive_tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::unsafe_arena_release_interactive_tag() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.interactive_tag)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::ObstacleInteractiveTag* temp = _impl_.interactive_tag_;
  _impl_.interactive_tag_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::_internal_mutable_interactive_tag() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.interactive_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleInteractiveTag>(GetArenaForAllocation());
    _impl_.interactive_tag_ = p;
  }
  return _impl_.interactive_tag_;
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::mutable_interactive_tag() {
  ::apollo::prediction::ObstacleInteractiveTag* _msg = _internal_mutable_interactive_tag();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.interactive_tag)
  return _msg;
}
inline void PredictionObstacle::set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactive_tag_);
  }
  if (interactive_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactive_tag));
    if (message_arena != submessage_arena) {
      interactive_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactive_tag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.interactive_tag_ = interactive_tag;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.interactive_tag)
}

// optional bool is_static = 7 [default = false];
inline bool PredictionObstacle::_internal_has_is_static() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PredictionObstacle::has_is_static() const {
  return _internal_has_is_static();
}
inline void PredictionObstacle::clear_is_static() {
  _impl_.is_static_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool PredictionObstacle::_internal_is_static() const {
  return _impl_.is_static_;
}
inline bool PredictionObstacle::is_static() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.is_static)
  return _internal_is_static();
}
inline void PredictionObstacle::_internal_set_is_static(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_static_ = value;
}
inline void PredictionObstacle::set_is_static(bool value) {
  _internal_set_is_static(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.is_static)
}

// repeated .apollo.prediction.Feature feature = 8;
inline int PredictionObstacle::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int PredictionObstacle::feature_size() const {
  return _internal_feature_size();
}
inline ::apollo::prediction::Feature* PredictionObstacle::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >*
PredictionObstacle::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacle.feature)
  return &_impl_.feature_;
}
inline const ::apollo::prediction::Feature& PredictionObstacle::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::apollo::prediction::Feature& PredictionObstacle::feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.feature)
  return _internal_feature(index);
}
inline ::apollo::prediction::Feature* PredictionObstacle::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::apollo::prediction::Feature* PredictionObstacle::add_feature() {
  ::apollo::prediction::Feature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacle.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >&
PredictionObstacle::feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacle.feature)
  return _impl_.feature_;
}

// -------------------------------------------------------------------

// PredictionObstacles

// optional .apollo.common.Header header = 1;
inline bool PredictionObstacles::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PredictionObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PredictionObstacles::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PredictionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.header)
  return _internal_header();
}
inline void PredictionObstacles::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacles.header)
}
inline ::apollo::common::Header* PredictionObstacles::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* PredictionObstacles::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PredictionObstacles::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* PredictionObstacles::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.header)
  return _msg;
}
inline void PredictionObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.header)
}

// repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
inline int PredictionObstacles::_internal_prediction_obstacle_size() const {
  return _impl_.prediction_obstacle_.size();
}
inline int PredictionObstacles::prediction_obstacle_size() const {
  return _internal_prediction_obstacle_size();
}
inline void PredictionObstacles::clear_prediction_obstacle() {
  _impl_.prediction_obstacle_.Clear();
}
inline ::apollo::prediction::PredictionObstacle* PredictionObstacles::mutable_prediction_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return _impl_.prediction_obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >*
PredictionObstacles::mutable_prediction_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return &_impl_.prediction_obstacle_;
}
inline const ::apollo::prediction::PredictionObstacle& PredictionObstacles::_internal_prediction_obstacle(int index) const {
  return _impl_.prediction_obstacle_.Get(index);
}
inline const ::apollo::prediction::PredictionObstacle& PredictionObstacles::prediction_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return _internal_prediction_obstacle(index);
}
inline ::apollo::prediction::PredictionObstacle* PredictionObstacles::_internal_add_prediction_obstacle() {
  return _impl_.prediction_obstacle_.Add();
}
inline ::apollo::prediction::PredictionObstacle* PredictionObstacles::add_prediction_obstacle() {
  ::apollo::prediction::PredictionObstacle* _add = _internal_add_prediction_obstacle();
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >&
PredictionObstacles::prediction_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return _impl_.prediction_obstacle_;
}

// optional .apollo.common.ErrorCode perception_error_code = 3;
inline bool PredictionObstacles::_internal_has_perception_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PredictionObstacles::has_perception_error_code() const {
  return _internal_has_perception_error_code();
}
inline void PredictionObstacles::clear_perception_error_code() {
  _impl_.perception_error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::common::ErrorCode PredictionObstacles::_internal_perception_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(_impl_.perception_error_code_);
}
inline ::apollo::common::ErrorCode PredictionObstacles::perception_error_code() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.perception_error_code)
  return _internal_perception_error_code();
}
inline void PredictionObstacles::_internal_set_perception_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.perception_error_code_ = value;
}
inline void PredictionObstacles::set_perception_error_code(::apollo::common::ErrorCode value) {
  _internal_set_perception_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.perception_error_code)
}

// optional double start_timestamp = 4;
inline bool PredictionObstacles::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PredictionObstacles::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void PredictionObstacles::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PredictionObstacles::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline double PredictionObstacles::start_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.start_timestamp)
  return _internal_start_timestamp();
}
inline void PredictionObstacles::_internal_set_start_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_timestamp_ = value;
}
inline void PredictionObstacles::set_start_timestamp(double value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.start_timestamp)
}

// optional double end_timestamp = 5;
inline bool PredictionObstacles::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PredictionObstacles::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void PredictionObstacles::clear_end_timestamp() {
  _impl_.end_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PredictionObstacles::_internal_end_timestamp() const {
  return _impl_.end_timestamp_;
}
inline double PredictionObstacles::end_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.end_timestamp)
  return _internal_end_timestamp();
}
inline void PredictionObstacles::_internal_set_end_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.end_timestamp_ = value;
}
inline void PredictionObstacles::set_end_timestamp(double value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.end_timestamp)
}

// optional .apollo.prediction.Intent intent = 6;
inline bool PredictionObstacles::_internal_has_intent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.intent_ != nullptr);
  return value;
}
inline bool PredictionObstacles::has_intent() const {
  return _internal_has_intent();
}
inline void PredictionObstacles::clear_intent() {
  if (_impl_.intent_ != nullptr) _impl_.intent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::Intent& PredictionObstacles::_internal_intent() const {
  const ::apollo::prediction::Intent* p = _impl_.intent_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::Intent&>(
      ::apollo::prediction::_Intent_default_instance_);
}
inline const ::apollo::prediction::Intent& PredictionObstacles::intent() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.intent)
  return _internal_intent();
}
inline void PredictionObstacles::unsafe_arena_set_allocated_intent(
    ::apollo::prediction::Intent* intent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intent_);
  }
  _impl_.intent_ = intent;
  if (intent) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacles.intent)
}
inline ::apollo::prediction::Intent* PredictionObstacles::release_intent() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::Intent* PredictionObstacles::unsafe_arena_release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.intent)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::Intent* temp = _impl_.intent_;
  _impl_.intent_ = nullptr;
  return temp;
}
inline ::apollo::prediction::Intent* PredictionObstacles::_internal_mutable_intent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Intent>(GetArenaForAllocation());
    _impl_.intent_ = p;
  }
  return _impl_.intent_;
}
inline ::apollo::prediction::Intent* PredictionObstacles::mutable_intent() {
  ::apollo::prediction::Intent* _msg = _internal_mutable_intent();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.intent)
  return _msg;
}
inline void PredictionObstacles::set_allocated_intent(::apollo::prediction::Intent* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intent_;
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intent);
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.intent)
}

// optional .apollo.prediction.Scenario scenario = 7;
inline bool PredictionObstacles::_internal_has_scenario() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scenario_ != nullptr);
  return value;
}
inline bool PredictionObstacles::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::apollo::prediction::Scenario& PredictionObstacles::_internal_scenario() const {
  const ::apollo::prediction::Scenario* p = _impl_.scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::Scenario&>(
      ::apollo::prediction::_Scenario_default_instance_);
}
inline const ::apollo::prediction::Scenario& PredictionObstacles::scenario() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.scenario)
  return _internal_scenario();
}
inline void PredictionObstacles::unsafe_arena_set_allocated_scenario(
    ::apollo::prediction::Scenario* scenario) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scenario_);
  }
  _impl_.scenario_ = scenario;
  if (scenario) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionObstacles.scenario)
}
inline ::apollo::prediction::Scenario* PredictionObstacles::release_scenario() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::Scenario* temp = _impl_.scenario_;
  _impl_.scenario_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::Scenario* PredictionObstacles::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.scenario)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::Scenario* temp = _impl_.scenario_;
  _impl_.scenario_ = nullptr;
  return temp;
}
inline ::apollo::prediction::Scenario* PredictionObstacles::_internal_mutable_scenario() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Scenario>(GetArenaForAllocation());
    _impl_.scenario_ = p;
  }
  return _impl_.scenario_;
}
inline ::apollo::prediction::Scenario* PredictionObstacles::mutable_scenario() {
  ::apollo::prediction::Scenario* _msg = _internal_mutable_scenario();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.scenario)
  return _msg;
}
inline void PredictionObstacles::set_allocated_scenario(::apollo::prediction::Scenario* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario));
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.scenario)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::prediction::ObstacleIntent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleIntent_Type>() {
  return ::apollo::prediction::ObstacleIntent_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::Intent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::Intent_Type>() {
  return ::apollo::prediction::Intent_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
