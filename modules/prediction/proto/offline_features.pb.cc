// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/offline_features.proto

#include "modules/prediction/proto/offline_features.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR DataForLearning::DataForLearning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.features_for_learning_)*/{}
  , /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.string_features_for_learning_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.lane_sequence_id_)*/0} {}
struct DataForLearningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataForLearningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataForLearningDefaultTypeInternal() {}
  union {
    DataForLearning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataForLearningDefaultTypeInternal _DataForLearning_default_instance_;
PROTOBUF_CONSTEXPR ListDataForLearning::ListDataForLearning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_for_learning_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDataForLearningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDataForLearningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDataForLearningDefaultTypeInternal() {}
  union {
    ListDataForLearning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDataForLearningDefaultTypeInternal _ListDataForLearning_default_instance_;
PROTOBUF_CONSTEXPR PredictionResult::PredictionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_)*/{}
  , /*decltype(_impl_.obstacle_conf_)*/nullptr
  , /*decltype(_impl_.scenario_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.id_)*/0} {}
struct PredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionResultDefaultTypeInternal() {}
  union {
    PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionResultDefaultTypeInternal _PredictionResult_default_instance_;
PROTOBUF_CONSTEXPR ListPredictionResult::ListPredictionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prediction_result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPredictionResultDefaultTypeInternal() {}
  union {
    ListPredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPredictionResultDefaultTypeInternal _ListPredictionResult_default_instance_;
PROTOBUF_CONSTEXPR ListFrameEnv::ListFrameEnv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frame_env_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListFrameEnvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListFrameEnvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListFrameEnvDefaultTypeInternal() {}
  union {
    ListFrameEnv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListFrameEnvDefaultTypeInternal _ListFrameEnv_default_instance_;
PROTOBUF_CONSTEXPR DataForTuning::DataForTuning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_for_tuning_)*/{}
  , /*decltype(_impl_.real_cost_value_)*/{}
  , /*decltype(_impl_.adc_trajectory_point_)*/{}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.lane_sequence_id_)*/0} {}
struct DataForTuningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataForTuningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataForTuningDefaultTypeInternal() {}
  union {
    DataForTuning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataForTuningDefaultTypeInternal _DataForTuning_default_instance_;
PROTOBUF_CONSTEXPR ListDataForTuning::ListDataForTuning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_for_tuning_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDataForTuningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDataForTuningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDataForTuningDefaultTypeInternal() {}
  union {
    ListDataForTuning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDataForTuningDefaultTypeInternal _ListDataForTuning_default_instance_;
PROTOBUF_CONSTEXPR Features::Features(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesDefaultTypeInternal() {}
  union {
    Features _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesDefaultTypeInternal _Features_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.features_for_learning_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.string_features_for_learning_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForLearning, _impl_.lane_sequence_id_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListDataForLearning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListDataForLearning, _impl_.data_for_learning_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_.trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_.obstacle_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionResult, _impl_.scenario_),
  3,
  2,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListPredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListPredictionResult, _impl_.prediction_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListFrameEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListFrameEnv, _impl_.frame_env_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.values_for_tuning_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.real_cost_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.lane_sequence_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DataForTuning, _impl_.adc_trajectory_point_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListDataForTuning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ListDataForTuning, _impl_.data_for_tuning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Features, _impl_.feature_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::prediction::DataForLearning)},
  { 20, -1, -1, sizeof(::apollo::prediction::ListDataForLearning)},
  { 27, 38, -1, sizeof(::apollo::prediction::PredictionResult)},
  { 43, -1, -1, sizeof(::apollo::prediction::ListPredictionResult)},
  { 50, -1, -1, sizeof(::apollo::prediction::ListFrameEnv)},
  { 57, 70, -1, sizeof(::apollo::prediction::DataForTuning)},
  { 77, -1, -1, sizeof(::apollo::prediction::ListDataForTuning)},
  { 84, -1, -1, sizeof(::apollo::prediction::Features)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_DataForLearning_default_instance_._instance,
  &::apollo::prediction::_ListDataForLearning_default_instance_._instance,
  &::apollo::prediction::_PredictionResult_default_instance_._instance,
  &::apollo::prediction::_ListPredictionResult_default_instance_._instance,
  &::apollo::prediction::_ListFrameEnv_default_instance_._instance,
  &::apollo::prediction::_DataForTuning_default_instance_._instance,
  &::apollo::prediction::_ListDataForTuning_default_instance_._instance,
  &::apollo::prediction::_Features_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/prediction/proto/offline_featu"
  "res.proto\022\021apollo.prediction\032$modules/co"
  "mmon/proto/pnc_point.proto\032&modules/pred"
  "iction/proto/feature.proto\032.modules/pred"
  "iction/proto/prediction_conf.proto\032\'modu"
  "les/prediction/proto/scenario.proto\"\261\001\n\017"
  "DataForLearning\022\020\n\010category\030\005 \001(\t\022\n\n\002id\030"
  "\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\001\022\035\n\025features_for"
  "_learning\030\003 \003(\001\022$\n\034string_features_for_l"
  "earning\030\007 \003(\t\022\016\n\006labels\030\004 \003(\001\022\030\n\020lane_se"
  "quence_id\030\006 \001(\005\"T\n\023ListDataForLearning\022="
  "\n\021data_for_learning\030\001 \003(\0132\".apollo.predi"
  "ction.DataForLearning\"\313\001\n\020PredictionResu"
  "lt\022\n\n\002id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\001\0221\n\ntra"
  "jectory\030\003 \003(\0132\035.apollo.prediction.Trajec"
  "tory\0226\n\robstacle_conf\030\004 \001(\0132\037.apollo.pre"
  "diction.ObstacleConf\022-\n\010scenario\030\005 \001(\0132\033"
  ".apollo.prediction.Scenario\"V\n\024ListPredi"
  "ctionResult\022>\n\021prediction_result\030\001 \003(\0132#"
  ".apollo.prediction.PredictionResult\">\n\014L"
  "istFrameEnv\022.\n\tframe_env\030\001 \003(\0132\033.apollo."
  "prediction.FrameEnv\"\314\001\n\rDataForTuning\022\020\n"
  "\010category\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\021\n\ttimestamp"
  "\030\003 \001(\001\022\031\n\021values_for_tuning\030\004 \003(\001\022\027\n\017rea"
  "l_cost_value\030\005 \003(\001\022\030\n\020lane_sequence_id\030\006"
  " \001(\005\022<\n\024adc_trajectory_point\030\007 \003(\0132\036.apo"
  "llo.common.TrajectoryPoint\"N\n\021ListDataFo"
  "rTuning\0229\n\017data_for_tuning\030\001 \003(\0132 .apoll"
  "o.prediction.DataForTuning\"7\n\010Features\022+"
  "\n\007feature\030\001 \003(\0132\032.apollo.prediction.Feat"
  "ure"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_deps[4] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fscenario_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto = {
    false, false, 1203, descriptor_table_protodef_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto,
    "modules/prediction/proto/offline_features.proto",
    &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_deps, 4, 8,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto(&descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class DataForLearning::_Internal {
 public:
  using HasBits = decltype(std::declval<DataForLearning>()._impl_._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DataForLearning::DataForLearning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.DataForLearning)
}
DataForLearning::DataForLearning(const DataForLearning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.features_for_learning_){from._impl_.features_for_learning_}
    , decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.string_features_for_learning_){from._impl_.string_features_for_learning_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.lane_sequence_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    _impl_.category_.Set(from._internal_category(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_sequence_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lane_sequence_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.DataForLearning)
}

inline void DataForLearning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.features_for_learning_){arena}
    , decltype(_impl_.labels_){arena}
    , decltype(_impl_.string_features_for_learning_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.lane_sequence_id_){0}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataForLearning::~DataForLearning() {
  // @@protoc_insertion_point(destructor:apollo.prediction.DataForLearning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataForLearning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_for_learning_.~RepeatedField();
  _impl_.labels_.~RepeatedField();
  _impl_.string_features_for_learning_.~RepeatedPtrField();
  _impl_.category_.Destroy();
}

void DataForLearning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataForLearning::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.DataForLearning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_for_learning_.Clear();
  _impl_.labels_.Clear();
  _impl_.string_features_for_learning_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.category_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_sequence_id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lane_sequence_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataForLearning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double features_for_learning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_features_for_learning(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_features_for_learning(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.DataForLearning.category");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_sequence_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lane_sequence_id(&has_bits);
          _impl_.lane_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string string_features_for_learning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_features_for_learning();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.prediction.DataForLearning.string_features_for_learning");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataForLearning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.DataForLearning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // repeated double features_for_learning = 3;
  for (int i = 0, n = this->_internal_features_for_learning_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_features_for_learning(i), target);
  }

  // repeated double labels = 4;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_labels(i), target);
  }

  // optional string category = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.DataForLearning.category");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_category(), target);
  }

  // optional int32 lane_sequence_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_lane_sequence_id(), target);
  }

  // repeated string string_features_for_learning = 7;
  for (int i = 0, n = this->_internal_string_features_for_learning_size(); i < n; i++) {
    const auto& s = this->_internal_string_features_for_learning(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.DataForLearning.string_features_for_learning");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.DataForLearning)
  return target;
}

size_t DataForLearning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.DataForLearning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double features_for_learning = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_for_learning_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_features_for_learning_size());
    total_size += data_size;
  }

  // repeated double labels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_labels_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_labels_size());
    total_size += data_size;
  }

  // repeated string string_features_for_learning = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_features_for_learning_.size());
  for (int i = 0, n = _impl_.string_features_for_learning_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_features_for_learning_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string category = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 lane_sequence_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_sequence_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataForLearning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataForLearning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataForLearning::GetClassData() const { return &_class_data_; }

void DataForLearning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataForLearning *>(to)->MergeFrom(
      static_cast<const DataForLearning &>(from));
}


void DataForLearning::MergeFrom(const DataForLearning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.DataForLearning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.features_for_learning_.MergeFrom(from._impl_.features_for_learning_);
  _impl_.labels_.MergeFrom(from._impl_.labels_);
  _impl_.string_features_for_learning_.MergeFrom(from._impl_.string_features_for_learning_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.lane_sequence_id_ = from._impl_.lane_sequence_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataForLearning::CopyFrom(const DataForLearning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.DataForLearning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataForLearning::IsInitialized() const {
  return true;
}

void DataForLearning::InternalSwap(DataForLearning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.features_for_learning_.InternalSwap(&other->_impl_.features_for_learning_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.string_features_for_learning_.InternalSwap(&other->_impl_.string_features_for_learning_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataForLearning, _impl_.lane_sequence_id_)
      + sizeof(DataForLearning::_impl_.lane_sequence_id_)
      - PROTOBUF_FIELD_OFFSET(DataForLearning, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataForLearning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[0]);
}

// ===================================================================

class ListDataForLearning::_Internal {
 public:
};

ListDataForLearning::ListDataForLearning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ListDataForLearning)
}
ListDataForLearning::ListDataForLearning(const ListDataForLearning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_for_learning_){from._impl_.data_for_learning_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ListDataForLearning)
}

inline void ListDataForLearning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_for_learning_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDataForLearning::~ListDataForLearning() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ListDataForLearning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDataForLearning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_for_learning_.~RepeatedPtrField();
}

void ListDataForLearning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDataForLearning::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ListDataForLearning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_for_learning_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDataForLearning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.DataForLearning data_for_learning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_for_learning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDataForLearning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ListDataForLearning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.DataForLearning data_for_learning = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_for_learning_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_for_learning(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ListDataForLearning)
  return target;
}

size_t ListDataForLearning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ListDataForLearning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.DataForLearning data_for_learning = 1;
  total_size += 1UL * this->_internal_data_for_learning_size();
  for (const auto& msg : this->_impl_.data_for_learning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDataForLearning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDataForLearning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDataForLearning::GetClassData() const { return &_class_data_; }

void ListDataForLearning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDataForLearning *>(to)->MergeFrom(
      static_cast<const ListDataForLearning &>(from));
}


void ListDataForLearning::MergeFrom(const ListDataForLearning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ListDataForLearning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_for_learning_.MergeFrom(from._impl_.data_for_learning_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDataForLearning::CopyFrom(const ListDataForLearning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ListDataForLearning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDataForLearning::IsInitialized() const {
  return true;
}

void ListDataForLearning::InternalSwap(ListDataForLearning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_for_learning_.InternalSwap(&other->_impl_.data_for_learning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDataForLearning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[1]);
}

// ===================================================================

class PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionResult>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::ObstacleConf& obstacle_conf(const PredictionResult* msg);
  static void set_has_obstacle_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::Scenario& scenario(const PredictionResult* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::prediction::ObstacleConf&
PredictionResult::_Internal::obstacle_conf(const PredictionResult* msg) {
  return *msg->_impl_.obstacle_conf_;
}
const ::apollo::prediction::Scenario&
PredictionResult::_Internal::scenario(const PredictionResult* msg) {
  return *msg->_impl_.scenario_;
}
void PredictionResult::clear_trajectory() {
  _impl_.trajectory_.Clear();
}
void PredictionResult::clear_obstacle_conf() {
  if (_impl_.obstacle_conf_ != nullptr) _impl_.obstacle_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PredictionResult::clear_scenario() {
  if (_impl_.scenario_ != nullptr) _impl_.scenario_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PredictionResult::PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.PredictionResult)
}
PredictionResult::PredictionResult(const PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){from._impl_.trajectory_}
    , decltype(_impl_.obstacle_conf_){nullptr}
    , decltype(_impl_.scenario_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle_conf()) {
    _impl_.obstacle_conf_ = new ::apollo::prediction::ObstacleConf(*from._impl_.obstacle_conf_);
  }
  if (from._internal_has_scenario()) {
    _impl_.scenario_ = new ::apollo::prediction::Scenario(*from._impl_.scenario_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionResult)
}

inline void PredictionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){arena}
    , decltype(_impl_.obstacle_conf_){nullptr}
    , decltype(_impl_.scenario_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.id_){0}
  };
}

PredictionResult::~PredictionResult() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.obstacle_conf_;
  if (this != internal_default_instance()) delete _impl_.scenario_;
}

void PredictionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.obstacle_conf_ != nullptr);
      _impl_.obstacle_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.scenario_ != nullptr);
      _impl_.scenario_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Trajectory trajectory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf obstacle_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Scenario scenario = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .apollo.prediction.Trajectory trajectory = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.ObstacleConf obstacle_conf = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::obstacle_conf(this),
        _Internal::obstacle_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.Scenario scenario = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::scenario(this),
        _Internal::scenario(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionResult)
  return target;
}

size_t PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Trajectory trajectory = 3;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->_impl_.trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.prediction.ObstacleConf obstacle_conf = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obstacle_conf_);
    }

    // optional .apollo.prediction.Scenario scenario = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_);
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionResult::GetClassData() const { return &_class_data_; }

void PredictionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionResult *>(to)->MergeFrom(
      static_cast<const PredictionResult &>(from));
}


void PredictionResult::MergeFrom(const PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_.MergeFrom(from._impl_.trajectory_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obstacle_conf()->::apollo::prediction::ObstacleConf::MergeFrom(from._internal_obstacle_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_scenario()->::apollo::prediction::Scenario::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.id_ = from._impl_.id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionResult::CopyFrom(const PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionResult::IsInitialized() const {
  return true;
}

void PredictionResult::InternalSwap(PredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_.InternalSwap(&other->_impl_.trajectory_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionResult, _impl_.id_)
      + sizeof(PredictionResult::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PredictionResult, _impl_.obstacle_conf_)>(
          reinterpret_cast<char*>(&_impl_.obstacle_conf_),
          reinterpret_cast<char*>(&other->_impl_.obstacle_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[2]);
}

// ===================================================================

class ListPredictionResult::_Internal {
 public:
};

ListPredictionResult::ListPredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ListPredictionResult)
}
ListPredictionResult::ListPredictionResult(const ListPredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.prediction_result_){from._impl_.prediction_result_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ListPredictionResult)
}

inline void ListPredictionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prediction_result_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListPredictionResult::~ListPredictionResult() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ListPredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prediction_result_.~RepeatedPtrField();
}

void ListPredictionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ListPredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prediction_result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.PredictionResult prediction_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prediction_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ListPredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.PredictionResult prediction_result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prediction_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_prediction_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ListPredictionResult)
  return target;
}

size_t ListPredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ListPredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.PredictionResult prediction_result = 1;
  total_size += 1UL * this->_internal_prediction_result_size();
  for (const auto& msg : this->_impl_.prediction_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPredictionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPredictionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPredictionResult::GetClassData() const { return &_class_data_; }

void ListPredictionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPredictionResult *>(to)->MergeFrom(
      static_cast<const ListPredictionResult &>(from));
}


void ListPredictionResult::MergeFrom(const ListPredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ListPredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.prediction_result_.MergeFrom(from._impl_.prediction_result_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPredictionResult::CopyFrom(const ListPredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ListPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPredictionResult::IsInitialized() const {
  return true;
}

void ListPredictionResult::InternalSwap(ListPredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prediction_result_.InternalSwap(&other->_impl_.prediction_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPredictionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[3]);
}

// ===================================================================

class ListFrameEnv::_Internal {
 public:
};

void ListFrameEnv::clear_frame_env() {
  _impl_.frame_env_.Clear();
}
ListFrameEnv::ListFrameEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ListFrameEnv)
}
ListFrameEnv::ListFrameEnv(const ListFrameEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.frame_env_){from._impl_.frame_env_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ListFrameEnv)
}

inline void ListFrameEnv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_env_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListFrameEnv::~ListFrameEnv() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ListFrameEnv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListFrameEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_env_.~RepeatedPtrField();
}

void ListFrameEnv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListFrameEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ListFrameEnv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame_env_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListFrameEnv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.FrameEnv frame_env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_env(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListFrameEnv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ListFrameEnv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.FrameEnv frame_env = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frame_env_size()); i < n; i++) {
    const auto& repfield = this->_internal_frame_env(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ListFrameEnv)
  return target;
}

size_t ListFrameEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ListFrameEnv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.FrameEnv frame_env = 1;
  total_size += 1UL * this->_internal_frame_env_size();
  for (const auto& msg : this->_impl_.frame_env_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListFrameEnv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListFrameEnv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListFrameEnv::GetClassData() const { return &_class_data_; }

void ListFrameEnv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListFrameEnv *>(to)->MergeFrom(
      static_cast<const ListFrameEnv &>(from));
}


void ListFrameEnv::MergeFrom(const ListFrameEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ListFrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.frame_env_.MergeFrom(from._impl_.frame_env_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListFrameEnv::CopyFrom(const ListFrameEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ListFrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFrameEnv::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.frame_env_))
    return false;
  return true;
}

void ListFrameEnv::InternalSwap(ListFrameEnv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.frame_env_.InternalSwap(&other->_impl_.frame_env_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFrameEnv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[4]);
}

// ===================================================================

class DataForTuning::_Internal {
 public:
  using HasBits = decltype(std::declval<DataForTuning>()._impl_._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void DataForTuning::clear_adc_trajectory_point() {
  _impl_.adc_trajectory_point_.Clear();
}
DataForTuning::DataForTuning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.DataForTuning)
}
DataForTuning::DataForTuning(const DataForTuning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_for_tuning_){from._impl_.values_for_tuning_}
    , decltype(_impl_.real_cost_value_){from._impl_.real_cost_value_}
    , decltype(_impl_.adc_trajectory_point_){from._impl_.adc_trajectory_point_}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.lane_sequence_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    _impl_.category_.Set(from._internal_category(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_sequence_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lane_sequence_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.DataForTuning)
}

inline void DataForTuning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_for_tuning_){arena}
    , decltype(_impl_.real_cost_value_){arena}
    , decltype(_impl_.adc_trajectory_point_){arena}
    , decltype(_impl_.category_){}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.lane_sequence_id_){0}
  };
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataForTuning::~DataForTuning() {
  // @@protoc_insertion_point(destructor:apollo.prediction.DataForTuning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataForTuning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_for_tuning_.~RepeatedField();
  _impl_.real_cost_value_.~RepeatedField();
  _impl_.adc_trajectory_point_.~RepeatedPtrField();
  _impl_.category_.Destroy();
}

void DataForTuning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataForTuning::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.DataForTuning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_for_tuning_.Clear();
  _impl_.real_cost_value_.Clear();
  _impl_.adc_trajectory_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.category_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_sequence_id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.lane_sequence_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataForTuning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.DataForTuning.category");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double values_for_tuning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values_for_tuning(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values_for_tuning(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double real_cost_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_real_cost_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_real_cost_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_sequence_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lane_sequence_id(&has_bits);
          _impl_.lane_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataForTuning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.DataForTuning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.DataForTuning.category");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_category(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp(), target);
  }

  // repeated double values_for_tuning = 4;
  for (int i = 0, n = this->_internal_values_for_tuning_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_values_for_tuning(i), target);
  }

  // repeated double real_cost_value = 5;
  for (int i = 0, n = this->_internal_real_cost_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_real_cost_value(i), target);
  }

  // optional int32 lane_sequence_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_lane_sequence_id(), target);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.DataForTuning)
  return target;
}

size_t DataForTuning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.DataForTuning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values_for_tuning = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_for_tuning_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_for_tuning_size());
    total_size += data_size;
  }

  // repeated double real_cost_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_real_cost_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_real_cost_value_size());
    total_size += data_size;
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 7;
  total_size += 1UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->_impl_.adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional double timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 lane_sequence_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_sequence_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataForTuning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataForTuning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataForTuning::GetClassData() const { return &_class_data_; }

void DataForTuning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataForTuning *>(to)->MergeFrom(
      static_cast<const DataForTuning &>(from));
}


void DataForTuning::MergeFrom(const DataForTuning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.DataForTuning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.values_for_tuning_.MergeFrom(from._impl_.values_for_tuning_);
  _impl_.real_cost_value_.MergeFrom(from._impl_.real_cost_value_);
  _impl_.adc_trajectory_point_.MergeFrom(from._impl_.adc_trajectory_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.lane_sequence_id_ = from._impl_.lane_sequence_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataForTuning::CopyFrom(const DataForTuning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.DataForTuning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataForTuning::IsInitialized() const {
  return true;
}

void DataForTuning::InternalSwap(DataForTuning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_for_tuning_.InternalSwap(&other->_impl_.values_for_tuning_);
  _impl_.real_cost_value_.InternalSwap(&other->_impl_.real_cost_value_);
  _impl_.adc_trajectory_point_.InternalSwap(&other->_impl_.adc_trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataForTuning, _impl_.lane_sequence_id_)
      + sizeof(DataForTuning::_impl_.lane_sequence_id_)
      - PROTOBUF_FIELD_OFFSET(DataForTuning, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataForTuning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[5]);
}

// ===================================================================

class ListDataForTuning::_Internal {
 public:
};

ListDataForTuning::ListDataForTuning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ListDataForTuning)
}
ListDataForTuning::ListDataForTuning(const ListDataForTuning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_for_tuning_){from._impl_.data_for_tuning_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ListDataForTuning)
}

inline void ListDataForTuning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_for_tuning_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDataForTuning::~ListDataForTuning() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ListDataForTuning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDataForTuning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_for_tuning_.~RepeatedPtrField();
}

void ListDataForTuning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDataForTuning::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ListDataForTuning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_for_tuning_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDataForTuning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.DataForTuning data_for_tuning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_for_tuning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDataForTuning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ListDataForTuning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.DataForTuning data_for_tuning = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_for_tuning_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_for_tuning(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ListDataForTuning)
  return target;
}

size_t ListDataForTuning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ListDataForTuning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.DataForTuning data_for_tuning = 1;
  total_size += 1UL * this->_internal_data_for_tuning_size();
  for (const auto& msg : this->_impl_.data_for_tuning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDataForTuning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDataForTuning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDataForTuning::GetClassData() const { return &_class_data_; }

void ListDataForTuning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDataForTuning *>(to)->MergeFrom(
      static_cast<const ListDataForTuning &>(from));
}


void ListDataForTuning::MergeFrom(const ListDataForTuning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ListDataForTuning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_for_tuning_.MergeFrom(from._impl_.data_for_tuning_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDataForTuning::CopyFrom(const ListDataForTuning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ListDataForTuning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDataForTuning::IsInitialized() const {
  return true;
}

void ListDataForTuning::InternalSwap(ListDataForTuning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_for_tuning_.InternalSwap(&other->_impl_.data_for_tuning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDataForTuning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[6]);
}

// ===================================================================

class Features::_Internal {
 public:
};

void Features::clear_feature() {
  _impl_.feature_.Clear();
}
Features::Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Features)
}
Features::Features(const Features& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){from._impl_.feature_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Features)
}

inline void Features::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Features)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Features::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.~RepeatedPtrField();
}

void Features::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Features)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Features::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.Feature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Features::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Features)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Features)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_impl_.feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Features::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Features::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Features::GetClassData() const { return &_class_data_; }

void Features::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Features *>(to)->MergeFrom(
      static_cast<const Features &>(from));
}


void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Features)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.feature_.MergeFrom(from._impl_.feature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.feature_))
    return false;
  return true;
}

void Features::InternalSwap(Features* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Features::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2foffline_5ffeatures_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::DataForLearning*
Arena::CreateMaybeMessage< ::apollo::prediction::DataForLearning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::DataForLearning >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ListDataForLearning*
Arena::CreateMaybeMessage< ::apollo::prediction::ListDataForLearning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ListDataForLearning >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionResult*
Arena::CreateMaybeMessage< ::apollo::prediction::PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ListPredictionResult*
Arena::CreateMaybeMessage< ::apollo::prediction::ListPredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ListPredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ListFrameEnv*
Arena::CreateMaybeMessage< ::apollo::prediction::ListFrameEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ListFrameEnv >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::DataForTuning*
Arena::CreateMaybeMessage< ::apollo::prediction::DataForTuning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::DataForTuning >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ListDataForTuning*
Arena::CreateMaybeMessage< ::apollo::prediction::ListDataForTuning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ListDataForTuning >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Features*
Arena::CreateMaybeMessage< ::apollo::prediction::Features >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Features >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
