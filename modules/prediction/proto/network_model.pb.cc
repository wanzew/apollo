// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_model.proto

#include "modules/prediction/proto/network_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR VerificationSample::VerificationSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.probability_)*/0
  , /*decltype(_impl_.distance_)*/0} {}
struct VerificationSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerificationSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerificationSampleDefaultTypeInternal() {}
  union {
    VerificationSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerificationSampleDefaultTypeInternal _VerificationSample_default_instance_;
PROTOBUF_CONSTEXPR Performance::Performance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accuracy_)*/{}
  , /*decltype(_impl_.recall_)*/{}
  , /*decltype(_impl_.precision_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceDefaultTypeInternal() {}
  union {
    Performance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceDefaultTypeInternal _Performance_default_instance_;
PROTOBUF_CONSTEXPR NetParameter::NetParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.verification_samples_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.performance_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.time_dumped_)*/0} {}
struct NetParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetParameterDefaultTypeInternal() {}
  union {
    NetParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetParameterDefaultTypeInternal _NetParameter_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _impl_.distance_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _impl_.accuracy_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _impl_.recall_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.layers_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.verification_samples_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.performance_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _impl_.time_dumped_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::prediction::VerificationSample)},
  { 12, -1, -1, sizeof(::apollo::prediction::Performance)},
  { 21, 33, -1, sizeof(::apollo::prediction::NetParameter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_VerificationSample_default_instance_._instance,
  &::apollo::prediction::_Performance_default_instance_._instance,
  &::apollo::prediction::_NetParameter_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/prediction/proto/network_model"
  ".proto\022\021apollo.prediction\032-modules/predi"
  "ction/proto/network_layers.proto\"q\n\022Veri"
  "ficationSample\0224\n\010features\030\001 \003(\0132\".apoll"
  "o.prediction.TensorParameter\022\023\n\013probabil"
  "ity\030\002 \001(\002\022\020\n\010distance\030\003 \001(\002\"B\n\013Performan"
  "ce\022\020\n\010accuracy\030\001 \003(\002\022\016\n\006recall\030\002 \003(\002\022\021\n\t"
  "precision\030\003 \003(\002\"\352\001\n\014NetParameter\022\n\n\002id\030\001"
  " \001(\005\022\014\n\004name\030\002 \001(\t\0221\n\006layers\030\003 \003(\0132!.apo"
  "llo.prediction.LayerParameter\022C\n\024verific"
  "ation_samples\030\004 \003(\0132%.apollo.prediction."
  "VerificationSample\0223\n\013performance\030\005 \001(\0132"
  "\036.apollo.prediction.Performance\022\023\n\013time_"
  "dumped\030\006 \001(\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_deps[1] = {
  &::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = {
    false, false, 532, descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto,
    "modules/prediction/proto/network_model.proto",
    &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto(&descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class VerificationSample::_Internal {
 public:
  using HasBits = decltype(std::declval<VerificationSample>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void VerificationSample::clear_features() {
  _impl_.features_.Clear();
}
VerificationSample::VerificationSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.VerificationSample)
}
VerificationSample::VerificationSample(const VerificationSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.probability_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.probability_, &from._impl_.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.probability_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VerificationSample)
}

inline void VerificationSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.features_){arena}
    , decltype(_impl_.probability_){0}
    , decltype(_impl_.distance_){0}
  };
}

VerificationSample::~VerificationSample() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VerificationSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerificationSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedPtrField();
}

void VerificationSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerificationSample::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VerificationSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.probability_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerificationSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.TensorParameter features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerificationSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VerificationSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.TensorParameter features = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float probability = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_probability(), target);
  }

  // optional float distance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VerificationSample)
  return target;
}

size_t VerificationSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VerificationSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.TensorParameter features = 1;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->_impl_.features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float probability = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float distance = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerificationSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerificationSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerificationSample::GetClassData() const { return &_class_data_; }

void VerificationSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerificationSample *>(to)->MergeFrom(
      static_cast<const VerificationSample &>(from));
}


void VerificationSample::MergeFrom(const VerificationSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VerificationSample)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.features_.MergeFrom(from._impl_.features_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.probability_ = from._impl_.probability_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerificationSample::CopyFrom(const VerificationSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VerificationSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationSample::IsInitialized() const {
  return true;
}

void VerificationSample::InternalSwap(VerificationSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerificationSample, _impl_.distance_)
      + sizeof(VerificationSample::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(VerificationSample, _impl_.probability_)>(
          reinterpret_cast<char*>(&_impl_.probability_),
          reinterpret_cast<char*>(&other->_impl_.probability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[0]);
}

// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.accuracy_){from._impl_.accuracy_}
    , decltype(_impl_.recall_){from._impl_.recall_}
    , decltype(_impl_.precision_){from._impl_.precision_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Performance)
}

inline void Performance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accuracy_){arena}
    , decltype(_impl_.recall_){arena}
    , decltype(_impl_.precision_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Performance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Performance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accuracy_.~RepeatedField();
  _impl_.recall_.~RepeatedField();
  _impl_.precision_.~RepeatedField();
}

void Performance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Performance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accuracy_.Clear();
  _impl_.recall_.Clear();
  _impl_.precision_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Performance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float accuracy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accuracy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_accuracy(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float recall = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Performance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Performance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float accuracy = 1;
  for (int i = 0, n = this->_internal_accuracy_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_accuracy(i), target);
  }

  // repeated float recall = 2;
  for (int i = 0, n = this->_internal_recall_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_recall(i), target);
  }

  // repeated float precision = 3;
  for (int i = 0, n = this->_internal_precision_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_precision(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Performance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float accuracy = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_accuracy_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_accuracy_size());
    total_size += data_size;
  }

  // repeated float recall = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recall_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_recall_size());
    total_size += data_size;
  }

  // repeated float precision = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_precision_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_precision_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Performance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Performance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Performance::GetClassData() const { return &_class_data_; }

void Performance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Performance *>(to)->MergeFrom(
      static_cast<const Performance &>(from));
}


void Performance::MergeFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.accuracy_.MergeFrom(from._impl_.accuracy_);
  _impl_.recall_.MergeFrom(from._impl_.recall_);
  _impl_.precision_.MergeFrom(from._impl_.precision_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accuracy_.InternalSwap(&other->_impl_.accuracy_);
  _impl_.recall_.InternalSwap(&other->_impl_.recall_);
  _impl_.precision_.InternalSwap(&other->_impl_.precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[1]);
}

// ===================================================================

class NetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NetParameter>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::Performance& performance(const NetParameter* msg);
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_dumped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::Performance&
NetParameter::_Internal::performance(const NetParameter* msg) {
  return *msg->_impl_.performance_;
}
void NetParameter::clear_layers() {
  _impl_.layers_.Clear();
}
NetParameter::NetParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.verification_samples_){from._impl_.verification_samples_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_dumped_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_performance()) {
    _impl_.performance_ = new ::apollo::prediction::Performance(*from._impl_.performance_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_dumped_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.time_dumped_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NetParameter)
}

inline void NetParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layers_){arena}
    , decltype(_impl_.verification_samples_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.time_dumped_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NetParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
  _impl_.verification_samples_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.performance_;
}

void NetParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NetParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.verification_samples_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.performance_ != nullptr);
      _impl_.performance_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_dumped_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.time_dumped_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.NetParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LayerParameter layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.VerificationSample verification_samples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_verification_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Performance performance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time_dumped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_time_dumped(&has_bits);
          _impl_.time_dumped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NetParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.NetParameter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .apollo.prediction.LayerParameter layers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.VerificationSample verification_samples = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_verification_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_verification_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.Performance performance = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::performance(this),
        _Internal::performance(this).GetCachedSize(), target, stream);
  }

  // optional float time_dumped = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_time_dumped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NetParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LayerParameter layers = 3;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.VerificationSample verification_samples = 4;
  total_size += 1UL * this->_internal_verification_samples_size();
  for (const auto& msg : this->_impl_.verification_samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.prediction.Performance performance = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.performance_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional float time_dumped = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetParameter::GetClassData() const { return &_class_data_; }

void NetParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetParameter *>(to)->MergeFrom(
      static_cast<const NetParameter &>(from));
}


void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.layers_.MergeFrom(from._impl_.layers_);
  _impl_.verification_samples_.MergeFrom(from._impl_.verification_samples_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_performance()->::apollo::prediction::Performance::MergeFrom(from._internal_performance());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.time_dumped_ = from._impl_.time_dumped_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.verification_samples_.InternalSwap(&other->_impl_.verification_samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetParameter, _impl_.time_dumped_)
      + sizeof(NetParameter::_impl_.time_dumped_)
      - PROTOBUF_FIELD_OFFSET(NetParameter, _impl_.performance_)>(
          reinterpret_cast<char*>(&_impl_.performance_),
          reinterpret_cast<char*>(&other->_impl_.performance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::VerificationSample*
Arena::CreateMaybeMessage< ::apollo::prediction::VerificationSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::VerificationSample >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Performance*
Arena::CreateMaybeMessage< ::apollo::prediction::Performance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::NetParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::NetParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::NetParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
