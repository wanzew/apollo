// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/prediction/proto/lane_graph.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto;
namespace apollo {
namespace prediction {
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Lane;
struct LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneFeature;
struct LaneFeatureDefaultTypeInternal;
extern LaneFeatureDefaultTypeInternal _LaneFeature_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::Feature* Arena::CreateMaybeMessage<::apollo::prediction::Feature>(Arena*);
template<> ::apollo::prediction::Lane* Arena::CreateMaybeMessage<::apollo::prediction::Lane>(Arena*);
template<> ::apollo::prediction::LaneFeature* Arena::CreateMaybeMessage<::apollo::prediction::LaneFeature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class Lane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Lane) */ {
 public:
  inline Lane() : Lane(nullptr) {}
  ~Lane() override;
  explicit PROTOBUF_CONSTEXPR Lane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lane(const Lane& from);
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lane& operator=(Lane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }
  inline void Swap(Lane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Lane& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Lane";
  }
  protected:
  explicit Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentLaneFeatureFieldNumber = 1,
    kNearbyLaneFeatureFieldNumber = 3,
    kLaneFeatureFieldNumber = 2,
    kLaneGraphFieldNumber = 4,
    kLabelUpdateTimeDeltaFieldNumber = 26,
  };
  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  int current_lane_feature_size() const;
  private:
  int _internal_current_lane_feature_size() const;
  public:
  void clear_current_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_current_lane_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_current_lane_feature();
  private:
  const ::apollo::prediction::LaneFeature& _internal_current_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* _internal_add_current_lane_feature();
  public:
  const ::apollo::prediction::LaneFeature& current_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* add_current_lane_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      current_lane_feature() const;

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  int nearby_lane_feature_size() const;
  private:
  int _internal_nearby_lane_feature_size() const;
  public:
  void clear_nearby_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_nearby_lane_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_nearby_lane_feature();
  private:
  const ::apollo::prediction::LaneFeature& _internal_nearby_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* _internal_add_nearby_lane_feature();
  public:
  const ::apollo::prediction::LaneFeature& nearby_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* add_nearby_lane_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      nearby_lane_feature() const;

  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  bool has_lane_feature() const;
  private:
  bool _internal_has_lane_feature() const;
  public:
  void clear_lane_feature();
  const ::apollo::prediction::LaneFeature& lane_feature() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneFeature* release_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_lane_feature();
  void set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature);
  private:
  const ::apollo::prediction::LaneFeature& _internal_lane_feature() const;
  ::apollo::prediction::LaneFeature* _internal_mutable_lane_feature();
  public:
  void unsafe_arena_set_allocated_lane_feature(
      ::apollo::prediction::LaneFeature* lane_feature);
  ::apollo::prediction::LaneFeature* unsafe_arena_release_lane_feature();

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  bool has_lane_graph() const;
  private:
  bool _internal_has_lane_graph() const;
  public:
  void clear_lane_graph();
  const ::apollo::prediction::LaneGraph& lane_graph() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneGraph* release_lane_graph();
  ::apollo::prediction::LaneGraph* mutable_lane_graph();
  void set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph);
  private:
  const ::apollo::prediction::LaneGraph& _internal_lane_graph() const;
  ::apollo::prediction::LaneGraph* _internal_mutable_lane_graph();
  public:
  void unsafe_arena_set_allocated_lane_graph(
      ::apollo::prediction::LaneGraph* lane_graph);
  ::apollo::prediction::LaneGraph* unsafe_arena_release_lane_graph();

  // optional double label_update_time_delta = 26;
  bool has_label_update_time_delta() const;
  private:
  bool _internal_has_label_update_time_delta() const;
  public:
  void clear_label_update_time_delta();
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);
  private:
  double _internal_label_update_time_delta() const;
  void _internal_set_label_update_time_delta(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Lane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature > current_lane_feature_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature > nearby_lane_feature_;
    ::apollo::prediction::LaneFeature* lane_feature_;
    ::apollo::prediction::LaneGraph* lane_graph_;
    double label_update_time_delta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class LaneFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneFeature) */ {
 public:
  inline LaneFeature() : LaneFeature(nullptr) {}
  ~LaneFeature() override;
  explicit PROTOBUF_CONSTEXPR LaneFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneFeature(const LaneFeature& from);
  LaneFeature(LaneFeature&& from) noexcept
    : LaneFeature() {
    *this = ::std::move(from);
  }

  inline LaneFeature& operator=(const LaneFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneFeature& operator=(LaneFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneFeature* internal_default_instance() {
    return reinterpret_cast<const LaneFeature*>(
               &_LaneFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneFeature& a, LaneFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneFeature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneFeature";
  }
  protected:
  explicit LaneFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
    kLaneSFieldNumber = 3,
    kLaneLFieldNumber = 4,
    kAngleDiffFieldNumber = 5,
    kDistToLeftBoundaryFieldNumber = 6,
    kDistToRightBoundaryFieldNumber = 7,
    kLaneTurnTypeFieldNumber = 2,
  };
  // optional string lane_id = 1;
  bool has_lane_id() const;
  private:
  bool _internal_has_lane_id() const;
  public:
  void clear_lane_id();
  const std::string& lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lane_id();
  PROTOBUF_NODISCARD std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);
  private:
  const std::string& _internal_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lane_id(const std::string& value);
  std::string* _internal_mutable_lane_id();
  public:

  // optional double lane_s = 3;
  bool has_lane_s() const;
  private:
  bool _internal_has_lane_s() const;
  public:
  void clear_lane_s();
  double lane_s() const;
  void set_lane_s(double value);
  private:
  double _internal_lane_s() const;
  void _internal_set_lane_s(double value);
  public:

  // optional double lane_l = 4;
  bool has_lane_l() const;
  private:
  bool _internal_has_lane_l() const;
  public:
  void clear_lane_l();
  double lane_l() const;
  void set_lane_l(double value);
  private:
  double _internal_lane_l() const;
  void _internal_set_lane_l(double value);
  public:

  // optional double angle_diff = 5;
  bool has_angle_diff() const;
  private:
  bool _internal_has_angle_diff() const;
  public:
  void clear_angle_diff();
  double angle_diff() const;
  void set_angle_diff(double value);
  private:
  double _internal_angle_diff() const;
  void _internal_set_angle_diff(double value);
  public:

  // optional double dist_to_left_boundary = 6;
  bool has_dist_to_left_boundary() const;
  private:
  bool _internal_has_dist_to_left_boundary() const;
  public:
  void clear_dist_to_left_boundary();
  double dist_to_left_boundary() const;
  void set_dist_to_left_boundary(double value);
  private:
  double _internal_dist_to_left_boundary() const;
  void _internal_set_dist_to_left_boundary(double value);
  public:

  // optional double dist_to_right_boundary = 7;
  bool has_dist_to_right_boundary() const;
  private:
  bool _internal_has_dist_to_right_boundary() const;
  public:
  void clear_dist_to_right_boundary();
  double dist_to_right_boundary() const;
  void set_dist_to_right_boundary(double value);
  private:
  double _internal_dist_to_right_boundary() const;
  void _internal_set_dist_to_right_boundary(double value);
  public:

  // optional uint32 lane_turn_type = 2;
  bool has_lane_turn_type() const;
  private:
  bool _internal_has_lane_turn_type() const;
  public:
  void clear_lane_turn_type();
  uint32_t lane_turn_type() const;
  void set_lane_turn_type(uint32_t value);
  private:
  uint32_t _internal_lane_turn_type() const;
  void _internal_set_lane_turn_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
    double lane_s_;
    double lane_l_;
    double angle_diff_;
    double dist_to_left_boundary_;
    double dist_to_right_boundary_;
    uint32_t lane_turn_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Feature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAccelerationFieldNumber = 4,
    kLaneFieldNumber = 14,
    kTPositionFieldNumber = 16,
    kTVelocityFieldNumber = 17,
    kTAccelerationFieldNumber = 20,
    kVelocityHeadingFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kAccFieldNumber = 7,
    kThetaFieldNumber = 8,
    kLengthFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kIdFieldNumber = 1,
    kIsStillFieldNumber = 22,
    kTrackingTimeFieldNumber = 12,
    kTimestampFieldNumber = 13,
    kTVelocityHeadingFieldNumber = 18,
    kTSpeedFieldNumber = 19,
    kTAccFieldNumber = 21,
    kLabelUpdateTimeDeltaFieldNumber = 24,
    kTypeFieldNumber = 23,
  };
  // optional .apollo.common.Point3D position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point3D* position);
  ::apollo::common::Point3D* unsafe_arena_release_position();

  // optional .apollo.common.Point3D velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::common::Point3D* velocity);
  ::apollo::common::Point3D* unsafe_arena_release_velocity();

  // optional .apollo.common.Point3D acceleration = 4;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::apollo::common::Point3D& acceleration() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_acceleration();
  ::apollo::common::Point3D* mutable_acceleration();
  void set_allocated_acceleration(::apollo::common::Point3D* acceleration);
  private:
  const ::apollo::common::Point3D& _internal_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::apollo::common::Point3D* acceleration);
  ::apollo::common::Point3D* unsafe_arena_release_acceleration();

  // optional .apollo.prediction.Lane lane = 14;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  const ::apollo::prediction::Lane& lane() const;
  PROTOBUF_NODISCARD ::apollo::prediction::Lane* release_lane();
  ::apollo::prediction::Lane* mutable_lane();
  void set_allocated_lane(::apollo::prediction::Lane* lane);
  private:
  const ::apollo::prediction::Lane& _internal_lane() const;
  ::apollo::prediction::Lane* _internal_mutable_lane();
  public:
  void unsafe_arena_set_allocated_lane(
      ::apollo::prediction::Lane* lane);
  ::apollo::prediction::Lane* unsafe_arena_release_lane();

  // optional .apollo.common.Point3D t_position = 16;
  bool has_t_position() const;
  private:
  bool _internal_has_t_position() const;
  public:
  void clear_t_position();
  const ::apollo::common::Point3D& t_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_t_position();
  ::apollo::common::Point3D* mutable_t_position();
  void set_allocated_t_position(::apollo::common::Point3D* t_position);
  private:
  const ::apollo::common::Point3D& _internal_t_position() const;
  ::apollo::common::Point3D* _internal_mutable_t_position();
  public:
  void unsafe_arena_set_allocated_t_position(
      ::apollo::common::Point3D* t_position);
  ::apollo::common::Point3D* unsafe_arena_release_t_position();

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_velocity() const;
  private:
  bool _internal_has_t_velocity() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_velocity();
  PROTOBUF_DEPRECATED const ::apollo::common::Point3D& t_velocity() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::common::Point3D* release_t_velocity();
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* mutable_t_velocity();
  PROTOBUF_DEPRECATED void set_allocated_t_velocity(::apollo::common::Point3D* t_velocity);
  private:
  const ::apollo::common::Point3D& _internal_t_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_t_velocity();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_t_velocity(
      ::apollo::common::Point3D* t_velocity);
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* unsafe_arena_release_t_velocity();

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_acceleration() const;
  private:
  bool _internal_has_t_acceleration() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_acceleration();
  PROTOBUF_DEPRECATED const ::apollo::common::Point3D& t_acceleration() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::common::Point3D* release_t_acceleration();
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* mutable_t_acceleration();
  PROTOBUF_DEPRECATED void set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration);
  private:
  const ::apollo::common::Point3D& _internal_t_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_t_acceleration();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_t_acceleration(
      ::apollo::common::Point3D* t_acceleration);
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* unsafe_arena_release_t_acceleration();

  // optional double velocity_heading = 5;
  bool has_velocity_heading() const;
  private:
  bool _internal_has_velocity_heading() const;
  public:
  void clear_velocity_heading();
  double velocity_heading() const;
  void set_velocity_heading(double value);
  private:
  double _internal_velocity_heading() const;
  void _internal_set_velocity_heading(double value);
  public:

  // optional double speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acc = 7;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // optional double theta = 8;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 9;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 10;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 11;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional bool is_still = 22 [default = false];
  bool has_is_still() const;
  private:
  bool _internal_has_is_still() const;
  public:
  void clear_is_still();
  bool is_still() const;
  void set_is_still(bool value);
  private:
  bool _internal_is_still() const;
  void _internal_set_is_still(bool value);
  public:

  // optional double tracking_time = 12;
  bool has_tracking_time() const;
  private:
  bool _internal_has_tracking_time() const;
  public:
  void clear_tracking_time();
  double tracking_time() const;
  void set_tracking_time(double value);
  private:
  double _internal_tracking_time() const;
  void _internal_set_tracking_time(double value);
  public:

  // optional double timestamp = 13;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double t_velocity_heading = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_velocity_heading() const;
  private:
  bool _internal_has_t_velocity_heading() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_velocity_heading();
  PROTOBUF_DEPRECATED double t_velocity_heading() const;
  PROTOBUF_DEPRECATED void set_t_velocity_heading(double value);
  private:
  double _internal_t_velocity_heading() const;
  void _internal_set_t_velocity_heading(double value);
  public:

  // optional double t_speed = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_speed() const;
  private:
  bool _internal_has_t_speed() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_speed();
  PROTOBUF_DEPRECATED double t_speed() const;
  PROTOBUF_DEPRECATED void set_t_speed(double value);
  private:
  double _internal_t_speed() const;
  void _internal_set_t_speed(double value);
  public:

  // optional double t_acc = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_acc() const;
  private:
  bool _internal_has_t_acc() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_acc();
  PROTOBUF_DEPRECATED double t_acc() const;
  PROTOBUF_DEPRECATED void set_t_acc(double value);
  private:
  double _internal_t_acc() const;
  void _internal_set_t_acc(double value);
  public:

  // optional double label_update_time_delta = 24;
  bool has_label_update_time_delta() const;
  private:
  bool _internal_has_label_update_time_delta() const;
  public:
  void clear_label_update_time_delta();
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);
  private:
  double _internal_label_update_time_delta() const;
  void _internal_set_label_update_time_delta(double value);
  public:

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Point3D* position_;
    ::apollo::common::Point3D* velocity_;
    ::apollo::common::Point3D* acceleration_;
    ::apollo::prediction::Lane* lane_;
    ::apollo::common::Point3D* t_position_;
    ::apollo::common::Point3D* t_velocity_;
    ::apollo::common::Point3D* t_acceleration_;
    double velocity_heading_;
    double speed_;
    double acc_;
    double theta_;
    double length_;
    double width_;
    double height_;
    int32_t id_;
    bool is_still_;
    double tracking_time_;
    double timestamp_;
    double t_velocity_heading_;
    double t_speed_;
    double t_acc_;
    double label_update_time_delta_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lane

// repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
inline int Lane::_internal_current_lane_feature_size() const {
  return _impl_.current_lane_feature_.size();
}
inline int Lane::current_lane_feature_size() const {
  return _internal_current_lane_feature_size();
}
inline void Lane::clear_current_lane_feature() {
  _impl_.current_lane_feature_.Clear();
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_current_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.current_lane_feature)
  return _impl_.current_lane_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_current_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.current_lane_feature)
  return &_impl_.current_lane_feature_;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_current_lane_feature(int index) const {
  return _impl_.current_lane_feature_.Get(index);
}
inline const ::apollo::prediction::LaneFeature& Lane::current_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.current_lane_feature)
  return _internal_current_lane_feature(index);
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_add_current_lane_feature() {
  return _impl_.current_lane_feature_.Add();
}
inline ::apollo::prediction::LaneFeature* Lane::add_current_lane_feature() {
  ::apollo::prediction::LaneFeature* _add = _internal_add_current_lane_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.current_lane_feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::current_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.current_lane_feature)
  return _impl_.current_lane_feature_;
}

// optional .apollo.prediction.LaneFeature lane_feature = 2;
inline bool Lane::_internal_has_lane_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_feature_ != nullptr);
  return value;
}
inline bool Lane::has_lane_feature() const {
  return _internal_has_lane_feature();
}
inline void Lane::clear_lane_feature() {
  if (_impl_.lane_feature_ != nullptr) _impl_.lane_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_lane_feature() const {
  const ::apollo::prediction::LaneFeature* p = _impl_.lane_feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneFeature&>(
      ::apollo::prediction::_LaneFeature_default_instance_);
}
inline const ::apollo::prediction::LaneFeature& Lane::lane_feature() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_feature)
  return _internal_lane_feature();
}
inline void Lane::unsafe_arena_set_allocated_lane_feature(
    ::apollo::prediction::LaneFeature* lane_feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_feature_);
  }
  _impl_.lane_feature_ = lane_feature;
  if (lane_feature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Lane.lane_feature)
}
inline ::apollo::prediction::LaneFeature* Lane::release_lane_feature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneFeature* temp = _impl_.lane_feature_;
  _impl_.lane_feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneFeature* Lane::unsafe_arena_release_lane_feature() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_feature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneFeature* temp = _impl_.lane_feature_;
  _impl_.lane_feature_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_mutable_lane_feature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lane_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneFeature>(GetArenaForAllocation());
    _impl_.lane_feature_ = p;
  }
  return _impl_.lane_feature_;
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_lane_feature() {
  ::apollo::prediction::LaneFeature* _msg = _internal_mutable_lane_feature();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_feature)
  return _msg;
}
inline void Lane::set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_feature_;
  }
  if (lane_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_feature);
    if (message_arena != submessage_arena) {
      lane_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_feature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_feature_ = lane_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_feature)
}

// repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
inline int Lane::_internal_nearby_lane_feature_size() const {
  return _impl_.nearby_lane_feature_.size();
}
inline int Lane::nearby_lane_feature_size() const {
  return _internal_nearby_lane_feature_size();
}
inline void Lane::clear_nearby_lane_feature() {
  _impl_.nearby_lane_feature_.Clear();
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_nearby_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.nearby_lane_feature)
  return _impl_.nearby_lane_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_nearby_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.nearby_lane_feature)
  return &_impl_.nearby_lane_feature_;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_nearby_lane_feature(int index) const {
  return _impl_.nearby_lane_feature_.Get(index);
}
inline const ::apollo::prediction::LaneFeature& Lane::nearby_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.nearby_lane_feature)
  return _internal_nearby_lane_feature(index);
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_add_nearby_lane_feature() {
  return _impl_.nearby_lane_feature_.Add();
}
inline ::apollo::prediction::LaneFeature* Lane::add_nearby_lane_feature() {
  ::apollo::prediction::LaneFeature* _add = _internal_add_nearby_lane_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.nearby_lane_feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::nearby_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.nearby_lane_feature)
  return _impl_.nearby_lane_feature_;
}

// optional .apollo.prediction.LaneGraph lane_graph = 4;
inline bool Lane::_internal_has_lane_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_graph_ != nullptr);
  return value;
}
inline bool Lane::has_lane_graph() const {
  return _internal_has_lane_graph();
}
inline const ::apollo::prediction::LaneGraph& Lane::_internal_lane_graph() const {
  const ::apollo::prediction::LaneGraph* p = _impl_.lane_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneGraph&>(
      ::apollo::prediction::_LaneGraph_default_instance_);
}
inline const ::apollo::prediction::LaneGraph& Lane::lane_graph() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_graph)
  return _internal_lane_graph();
}
inline void Lane::unsafe_arena_set_allocated_lane_graph(
    ::apollo::prediction::LaneGraph* lane_graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_);
  }
  _impl_.lane_graph_ = lane_graph;
  if (lane_graph) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Lane.lane_graph)
}
inline ::apollo::prediction::LaneGraph* Lane::release_lane_graph() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_;
  _impl_.lane_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::unsafe_arena_release_lane_graph() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_graph)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_;
  _impl_.lane_graph_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::_internal_mutable_lane_graph() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lane_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneGraph>(GetArenaForAllocation());
    _impl_.lane_graph_ = p;
  }
  return _impl_.lane_graph_;
}
inline ::apollo::prediction::LaneGraph* Lane::mutable_lane_graph() {
  ::apollo::prediction::LaneGraph* _msg = _internal_mutable_lane_graph();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_graph)
  return _msg;
}
inline void Lane::set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_);
  }
  if (lane_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_graph));
    if (message_arena != submessage_arena) {
      lane_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_graph, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lane_graph_ = lane_graph;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_graph)
}

// optional double label_update_time_delta = 26;
inline bool Lane::_internal_has_label_update_time_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lane::has_label_update_time_delta() const {
  return _internal_has_label_update_time_delta();
}
inline void Lane::clear_label_update_time_delta() {
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Lane::_internal_label_update_time_delta() const {
  return _impl_.label_update_time_delta_;
}
inline double Lane::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.label_update_time_delta)
  return _internal_label_update_time_delta();
}
inline void Lane::_internal_set_label_update_time_delta(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_update_time_delta_ = value;
}
inline void Lane::set_label_update_time_delta(double value) {
  _internal_set_label_update_time_delta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Lane.label_update_time_delta)
}

// -------------------------------------------------------------------

// LaneFeature

// optional string lane_id = 1;
inline bool LaneFeature::_internal_has_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_id() const {
  return _internal_has_lane_id();
}
inline void LaneFeature::clear_lane_id() {
  _impl_.lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_id)
  return _internal_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaneFeature::set_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_id)
}
inline std::string* LaneFeature::mutable_lane_id() {
  std::string* _s = _internal_mutable_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneFeature.lane_id)
  return _s;
}
inline const std::string& LaneFeature::_internal_lane_id() const {
  return _impl_.lane_id_.Get();
}
inline void LaneFeature::_internal_set_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaneFeature::_internal_mutable_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaneFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneFeature.lane_id)
  if (!_internal_has_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LaneFeature::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_id_.SetAllocated(lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneFeature.lane_id)
}

// optional uint32 lane_turn_type = 2;
inline bool LaneFeature::_internal_has_lane_turn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_turn_type() const {
  return _internal_has_lane_turn_type();
}
inline void LaneFeature::clear_lane_turn_type() {
  _impl_.lane_turn_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t LaneFeature::_internal_lane_turn_type() const {
  return _impl_.lane_turn_type_;
}
inline uint32_t LaneFeature::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_turn_type)
  return _internal_lane_turn_type();
}
inline void LaneFeature::_internal_set_lane_turn_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lane_turn_type_ = value;
}
inline void LaneFeature::set_lane_turn_type(uint32_t value) {
  _internal_set_lane_turn_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_turn_type)
}

// optional double lane_s = 3;
inline bool LaneFeature::_internal_has_lane_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_s() const {
  return _internal_has_lane_s();
}
inline void LaneFeature::clear_lane_s() {
  _impl_.lane_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaneFeature::_internal_lane_s() const {
  return _impl_.lane_s_;
}
inline double LaneFeature::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_s)
  return _internal_lane_s();
}
inline void LaneFeature::_internal_set_lane_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_s_ = value;
}
inline void LaneFeature::set_lane_s(double value) {
  _internal_set_lane_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_s)
}

// optional double lane_l = 4;
inline bool LaneFeature::_internal_has_lane_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_l() const {
  return _internal_has_lane_l();
}
inline void LaneFeature::clear_lane_l() {
  _impl_.lane_l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaneFeature::_internal_lane_l() const {
  return _impl_.lane_l_;
}
inline double LaneFeature::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_l)
  return _internal_lane_l();
}
inline void LaneFeature::_internal_set_lane_l(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_l_ = value;
}
inline void LaneFeature::set_lane_l(double value) {
  _internal_set_lane_l(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_l)
}

// optional double angle_diff = 5;
inline bool LaneFeature::_internal_has_angle_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneFeature::has_angle_diff() const {
  return _internal_has_angle_diff();
}
inline void LaneFeature::clear_angle_diff() {
  _impl_.angle_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LaneFeature::_internal_angle_diff() const {
  return _impl_.angle_diff_;
}
inline double LaneFeature::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.angle_diff)
  return _internal_angle_diff();
}
inline void LaneFeature::_internal_set_angle_diff(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.angle_diff_ = value;
}
inline void LaneFeature::set_angle_diff(double value) {
  _internal_set_angle_diff(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.angle_diff)
}

// optional double dist_to_left_boundary = 6;
inline bool LaneFeature::_internal_has_dist_to_left_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneFeature::has_dist_to_left_boundary() const {
  return _internal_has_dist_to_left_boundary();
}
inline void LaneFeature::clear_dist_to_left_boundary() {
  _impl_.dist_to_left_boundary_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LaneFeature::_internal_dist_to_left_boundary() const {
  return _impl_.dist_to_left_boundary_;
}
inline double LaneFeature::dist_to_left_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_left_boundary)
  return _internal_dist_to_left_boundary();
}
inline void LaneFeature::_internal_set_dist_to_left_boundary(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dist_to_left_boundary_ = value;
}
inline void LaneFeature::set_dist_to_left_boundary(double value) {
  _internal_set_dist_to_left_boundary(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_left_boundary)
}

// optional double dist_to_right_boundary = 7;
inline bool LaneFeature::_internal_has_dist_to_right_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneFeature::has_dist_to_right_boundary() const {
  return _internal_has_dist_to_right_boundary();
}
inline void LaneFeature::clear_dist_to_right_boundary() {
  _impl_.dist_to_right_boundary_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LaneFeature::_internal_dist_to_right_boundary() const {
  return _impl_.dist_to_right_boundary_;
}
inline double LaneFeature::dist_to_right_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_right_boundary)
  return _internal_dist_to_right_boundary();
}
inline void LaneFeature::_internal_set_dist_to_right_boundary(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dist_to_right_boundary_ = value;
}
inline void LaneFeature::set_dist_to_right_boundary(double value) {
  _internal_set_dist_to_right_boundary(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_right_boundary)
}

// -------------------------------------------------------------------

// Feature

// optional int32 id = 1;
inline bool Feature::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Feature::has_id() const {
  return _internal_has_id();
}
inline void Feature::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t Feature::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Feature::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.id)
  return _internal_id();
}
inline void Feature::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.id_ = value;
}
inline void Feature::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.id)
}

// optional .apollo.common.Point3D position = 2;
inline bool Feature::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Feature::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& Feature::_internal_position() const {
  const ::apollo::common::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.position)
  return _internal_position();
}
inline void Feature::unsafe_arena_set_allocated_position(
    ::apollo::common::Point3D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.position)
}
inline ::apollo::common::Point3D* Feature::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::Point3D* Feature::mutable_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.position)
  return _msg;
}
inline void Feature::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.position)
}

// optional .apollo.common.Point3D velocity = 3;
inline bool Feature::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool Feature::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& Feature::_internal_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity)
  return _internal_velocity();
}
inline void Feature::unsafe_arena_set_allocated_velocity(
    ::apollo::common::Point3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.velocity)
}
inline ::apollo::common::Point3D* Feature::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.velocity)
  return _msg;
}
inline void Feature::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.velocity)
}

// optional .apollo.common.Point3D acceleration = 4;
inline bool Feature::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool Feature::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::apollo::common::Point3D& Feature::_internal_acceleration() const {
  const ::apollo::common::Point3D* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acceleration)
  return _internal_acceleration();
}
inline void Feature::unsafe_arena_set_allocated_acceleration(
    ::apollo::common::Point3D* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.acceleration)
}
inline ::apollo::common::Point3D* Feature::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.acceleration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_acceleration() {
  ::apollo::common::Point3D* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.acceleration)
  return _msg;
}
inline void Feature::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.acceleration)
}

// optional double velocity_heading = 5;
inline bool Feature::_internal_has_velocity_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Feature::has_velocity_heading() const {
  return _internal_has_velocity_heading();
}
inline void Feature::clear_velocity_heading() {
  _impl_.velocity_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Feature::_internal_velocity_heading() const {
  return _impl_.velocity_heading_;
}
inline double Feature::velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity_heading)
  return _internal_velocity_heading();
}
inline void Feature::_internal_set_velocity_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.velocity_heading_ = value;
}
inline void Feature::set_velocity_heading(double value) {
  _internal_set_velocity_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.velocity_heading)
}

// optional double speed = 6;
inline bool Feature::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Feature::has_speed() const {
  return _internal_has_speed();
}
inline void Feature::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Feature::_internal_speed() const {
  return _impl_.speed_;
}
inline double Feature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.speed)
  return _internal_speed();
}
inline void Feature::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.speed_ = value;
}
inline void Feature::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.speed)
}

// optional double acc = 7;
inline bool Feature::_internal_has_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Feature::has_acc() const {
  return _internal_has_acc();
}
inline void Feature::clear_acc() {
  _impl_.acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Feature::_internal_acc() const {
  return _impl_.acc_;
}
inline double Feature::acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acc)
  return _internal_acc();
}
inline void Feature::_internal_set_acc(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.acc_ = value;
}
inline void Feature::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.acc)
}

// optional double theta = 8;
inline bool Feature::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Feature::has_theta() const {
  return _internal_has_theta();
}
inline void Feature::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double Feature::_internal_theta() const {
  return _impl_.theta_;
}
inline double Feature::theta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.theta)
  return _internal_theta();
}
inline void Feature::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theta_ = value;
}
inline void Feature::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.theta)
}

// optional double length = 9;
inline bool Feature::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Feature::has_length() const {
  return _internal_has_length();
}
inline void Feature::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double Feature::_internal_length() const {
  return _impl_.length_;
}
inline double Feature::length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.length)
  return _internal_length();
}
inline void Feature::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.length_ = value;
}
inline void Feature::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.length)
}

// optional double width = 10;
inline bool Feature::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Feature::has_width() const {
  return _internal_has_width();
}
inline void Feature::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double Feature::_internal_width() const {
  return _impl_.width_;
}
inline double Feature::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.width)
  return _internal_width();
}
inline void Feature::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.width_ = value;
}
inline void Feature::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.width)
}

// optional double height = 11;
inline bool Feature::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Feature::has_height() const {
  return _internal_has_height();
}
inline void Feature::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double Feature::_internal_height() const {
  return _impl_.height_;
}
inline double Feature::height() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.height)
  return _internal_height();
}
inline void Feature::_internal_set_height(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.height_ = value;
}
inline void Feature::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.height)
}

// optional double tracking_time = 12;
inline bool Feature::_internal_has_tracking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Feature::has_tracking_time() const {
  return _internal_has_tracking_time();
}
inline void Feature::clear_tracking_time() {
  _impl_.tracking_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double Feature::_internal_tracking_time() const {
  return _impl_.tracking_time_;
}
inline double Feature::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.tracking_time)
  return _internal_tracking_time();
}
inline void Feature::_internal_set_tracking_time(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tracking_time_ = value;
}
inline void Feature::set_tracking_time(double value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.tracking_time)
}

// optional double timestamp = 13;
inline bool Feature::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Feature::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Feature::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double Feature::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double Feature::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.timestamp)
  return _internal_timestamp();
}
inline void Feature::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.timestamp_ = value;
}
inline void Feature::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.timestamp)
}

// optional .apollo.prediction.Lane lane = 14;
inline bool Feature::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_ != nullptr);
  return value;
}
inline bool Feature::has_lane() const {
  return _internal_has_lane();
}
inline void Feature::clear_lane() {
  if (_impl_.lane_ != nullptr) _impl_.lane_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::prediction::Lane& Feature::_internal_lane() const {
  const ::apollo::prediction::Lane* p = _impl_.lane_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::Lane&>(
      ::apollo::prediction::_Lane_default_instance_);
}
inline const ::apollo::prediction::Lane& Feature::lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.lane)
  return _internal_lane();
}
inline void Feature::unsafe_arena_set_allocated_lane(
    ::apollo::prediction::Lane* lane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_);
  }
  _impl_.lane_ = lane;
  if (lane) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.lane)
}
inline ::apollo::prediction::Lane* Feature::release_lane() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::Lane* temp = _impl_.lane_;
  _impl_.lane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::Lane* Feature::unsafe_arena_release_lane() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.lane)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::Lane* temp = _impl_.lane_;
  _impl_.lane_ = nullptr;
  return temp;
}
inline ::apollo::prediction::Lane* Feature::_internal_mutable_lane() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Lane>(GetArenaForAllocation());
    _impl_.lane_ = p;
  }
  return _impl_.lane_;
}
inline ::apollo::prediction::Lane* Feature::mutable_lane() {
  ::apollo::prediction::Lane* _msg = _internal_mutable_lane();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.lane)
  return _msg;
}
inline void Feature::set_allocated_lane(::apollo::prediction::Lane* lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_;
  }
  if (lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane);
    if (message_arena != submessage_arena) {
      lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lane_ = lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.lane)
}

// optional .apollo.common.Point3D t_position = 16;
inline bool Feature::_internal_has_t_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_position_ != nullptr);
  return value;
}
inline bool Feature::has_t_position() const {
  return _internal_has_t_position();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_position() const {
  const ::apollo::common::Point3D* p = _impl_.t_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_position)
  return _internal_t_position();
}
inline void Feature::unsafe_arena_set_allocated_t_position(
    ::apollo::common::Point3D* t_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_position_);
  }
  _impl_.t_position_ = t_position;
  if (t_position) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_position)
}
inline ::apollo::common::Point3D* Feature::release_t_position() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.t_position_;
  _impl_.t_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_position)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.t_position_;
  _impl_.t_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_position() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.t_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_position_ = p;
  }
  return _impl_.t_position_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_position)
  return _msg;
}
inline void Feature::set_allocated_t_position(::apollo::common::Point3D* t_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_position_);
  }
  if (t_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_position));
    if (message_arena != submessage_arena) {
      t_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.t_position_ = t_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_position)
}

// optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
inline bool Feature::_internal_has_t_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_velocity_ != nullptr);
  return value;
}
inline bool Feature::has_t_velocity() const {
  return _internal_has_t_velocity();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.t_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity)
  return _internal_t_velocity();
}
inline void Feature::unsafe_arena_set_allocated_t_velocity(
    ::apollo::common::Point3D* t_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_velocity_);
  }
  _impl_.t_velocity_ = t_velocity;
  if (t_velocity) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_velocity)
}
inline ::apollo::common::Point3D* Feature::release_t_velocity() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Point3D* temp = _impl_.t_velocity_;
  _impl_.t_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_velocity)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Point3D* temp = _impl_.t_velocity_;
  _impl_.t_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_velocity() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.t_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_velocity_ = p;
  }
  return _impl_.t_velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_velocity)
  return _msg;
}
inline void Feature::set_allocated_t_velocity(::apollo::common::Point3D* t_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_velocity_);
  }
  if (t_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_velocity));
    if (message_arena != submessage_arena) {
      t_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.t_velocity_ = t_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_velocity)
}

// optional double t_velocity_heading = 18 [deprecated = true];
inline bool Feature::_internal_has_t_velocity_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Feature::has_t_velocity_heading() const {
  return _internal_has_t_velocity_heading();
}
inline void Feature::clear_t_velocity_heading() {
  _impl_.t_velocity_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double Feature::_internal_t_velocity_heading() const {
  return _impl_.t_velocity_heading_;
}
inline double Feature::t_velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity_heading)
  return _internal_t_velocity_heading();
}
inline void Feature::_internal_set_t_velocity_heading(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.t_velocity_heading_ = value;
}
inline void Feature::set_t_velocity_heading(double value) {
  _internal_set_t_velocity_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_velocity_heading)
}

// optional double t_speed = 19 [deprecated = true];
inline bool Feature::_internal_has_t_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Feature::has_t_speed() const {
  return _internal_has_t_speed();
}
inline void Feature::clear_t_speed() {
  _impl_.t_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double Feature::_internal_t_speed() const {
  return _impl_.t_speed_;
}
inline double Feature::t_speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_speed)
  return _internal_t_speed();
}
inline void Feature::_internal_set_t_speed(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.t_speed_ = value;
}
inline void Feature::set_t_speed(double value) {
  _internal_set_t_speed(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_speed)
}

// optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
inline bool Feature::_internal_has_t_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_acceleration_ != nullptr);
  return value;
}
inline bool Feature::has_t_acceleration() const {
  return _internal_has_t_acceleration();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_acceleration() const {
  const ::apollo::common::Point3D* p = _impl_.t_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acceleration)
  return _internal_t_acceleration();
}
inline void Feature::unsafe_arena_set_allocated_t_acceleration(
    ::apollo::common::Point3D* t_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_acceleration_);
  }
  _impl_.t_acceleration_ = t_acceleration;
  if (t_acceleration) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_acceleration)
}
inline ::apollo::common::Point3D* Feature::release_t_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Point3D* temp = _impl_.t_acceleration_;
  _impl_.t_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_acceleration)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Point3D* temp = _impl_.t_acceleration_;
  _impl_.t_acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_acceleration() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.t_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_acceleration_ = p;
  }
  return _impl_.t_acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_acceleration() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_acceleration();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_acceleration)
  return _msg;
}
inline void Feature::set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_acceleration_);
  }
  if (t_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_acceleration));
    if (message_arena != submessage_arena) {
      t_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.t_acceleration_ = t_acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_acceleration)
}

// optional double t_acc = 21 [deprecated = true];
inline bool Feature::_internal_has_t_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Feature::has_t_acc() const {
  return _internal_has_t_acc();
}
inline void Feature::clear_t_acc() {
  _impl_.t_acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double Feature::_internal_t_acc() const {
  return _impl_.t_acc_;
}
inline double Feature::t_acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acc)
  return _internal_t_acc();
}
inline void Feature::_internal_set_t_acc(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.t_acc_ = value;
}
inline void Feature::set_t_acc(double value) {
  _internal_set_t_acc(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_acc)
}

// optional bool is_still = 22 [default = false];
inline bool Feature::_internal_has_is_still() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Feature::has_is_still() const {
  return _internal_has_is_still();
}
inline void Feature::clear_is_still() {
  _impl_.is_still_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Feature::_internal_is_still() const {
  return _impl_.is_still_;
}
inline bool Feature::is_still() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.is_still)
  return _internal_is_still();
}
inline void Feature::_internal_set_is_still(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.is_still_ = value;
}
inline void Feature::set_is_still(bool value) {
  _internal_set_is_still(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.is_still)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 23;
inline bool Feature::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Feature::has_type() const {
  return _internal_has_type();
}
inline void Feature::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::perception::PerceptionObstacle_Type Feature::_internal_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(_impl_.type_);
}
inline ::apollo::perception::PerceptionObstacle_Type Feature::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.type)
  return _internal_type();
}
inline void Feature::_internal_set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.type_ = value;
}
inline void Feature::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.type)
}

// optional double label_update_time_delta = 24;
inline bool Feature::_internal_has_label_update_time_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Feature::has_label_update_time_delta() const {
  return _internal_has_label_update_time_delta();
}
inline void Feature::clear_label_update_time_delta() {
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double Feature::_internal_label_update_time_delta() const {
  return _impl_.label_update_time_delta_;
}
inline double Feature::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.label_update_time_delta)
  return _internal_label_update_time_delta();
}
inline void Feature::_internal_set_label_update_time_delta(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.label_update_time_delta_ = value;
}
inline void Feature::set_label_update_time_delta(double value) {
  _internal_set_label_update_time_delta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.label_update_time_delta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto
