// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/map/proto/map_lane.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/lane_graph.pb.h"
#include "modules/prediction/proto/prediction_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto;
namespace apollo {
namespace prediction {
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FrameEnv;
struct FrameEnvDefaultTypeInternal;
extern FrameEnvDefaultTypeInternal _FrameEnv_default_instance_;
class JunctionExit;
struct JunctionExitDefaultTypeInternal;
extern JunctionExitDefaultTypeInternal _JunctionExit_default_instance_;
class JunctionFeature;
struct JunctionFeatureDefaultTypeInternal;
extern JunctionFeatureDefaultTypeInternal _JunctionFeature_default_instance_;
class Lane;
struct LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneFeature;
struct LaneFeatureDefaultTypeInternal;
extern LaneFeatureDefaultTypeInternal _LaneFeature_default_instance_;
class ObstacleHistory;
struct ObstacleHistoryDefaultTypeInternal;
extern ObstacleHistoryDefaultTypeInternal _ObstacleHistory_default_instance_;
class ObstacleInteractiveTag;
struct ObstacleInteractiveTagDefaultTypeInternal;
extern ObstacleInteractiveTagDefaultTypeInternal _ObstacleInteractiveTag_default_instance_;
class ObstaclePriority;
struct ObstaclePriorityDefaultTypeInternal;
extern ObstaclePriorityDefaultTypeInternal _ObstaclePriority_default_instance_;
class Trajectory;
struct TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::Feature* Arena::CreateMaybeMessage<::apollo::prediction::Feature>(Arena*);
template<> ::apollo::prediction::FrameEnv* Arena::CreateMaybeMessage<::apollo::prediction::FrameEnv>(Arena*);
template<> ::apollo::prediction::JunctionExit* Arena::CreateMaybeMessage<::apollo::prediction::JunctionExit>(Arena*);
template<> ::apollo::prediction::JunctionFeature* Arena::CreateMaybeMessage<::apollo::prediction::JunctionFeature>(Arena*);
template<> ::apollo::prediction::Lane* Arena::CreateMaybeMessage<::apollo::prediction::Lane>(Arena*);
template<> ::apollo::prediction::LaneFeature* Arena::CreateMaybeMessage<::apollo::prediction::LaneFeature>(Arena*);
template<> ::apollo::prediction::ObstacleHistory* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleHistory>(Arena*);
template<> ::apollo::prediction::ObstacleInteractiveTag* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleInteractiveTag>(Arena*);
template<> ::apollo::prediction::ObstaclePriority* Arena::CreateMaybeMessage<::apollo::prediction::ObstaclePriority>(Arena*);
template<> ::apollo::prediction::Trajectory* Arena::CreateMaybeMessage<::apollo::prediction::Trajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

enum ObstaclePriority_Priority : int {
  ObstaclePriority_Priority_CAUTION = 1,
  ObstaclePriority_Priority_NORMAL = 2,
  ObstaclePriority_Priority_IGNORE = 3
};
bool ObstaclePriority_Priority_IsValid(int value);
constexpr ObstaclePriority_Priority ObstaclePriority_Priority_Priority_MIN = ObstaclePriority_Priority_CAUTION;
constexpr ObstaclePriority_Priority ObstaclePriority_Priority_Priority_MAX = ObstaclePriority_Priority_IGNORE;
constexpr int ObstaclePriority_Priority_Priority_ARRAYSIZE = ObstaclePriority_Priority_Priority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstaclePriority_Priority_descriptor();
template<typename T>
inline const std::string& ObstaclePriority_Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstaclePriority_Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstaclePriority_Priority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstaclePriority_Priority_descriptor(), enum_t_value);
}
inline bool ObstaclePriority_Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstaclePriority_Priority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstaclePriority_Priority>(
    ObstaclePriority_Priority_descriptor(), name, value);
}
enum ObstacleInteractiveTag_InteractiveTag : int {
  ObstacleInteractiveTag_InteractiveTag_INTERACTION = 1,
  ObstacleInteractiveTag_InteractiveTag_NONINTERACTION = 2
};
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value);
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MIN = ObstacleInteractiveTag_InteractiveTag_INTERACTION;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX = ObstacleInteractiveTag_InteractiveTag_NONINTERACTION;
constexpr int ObstacleInteractiveTag_InteractiveTag_InteractiveTag_ARRAYSIZE = ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor();
template<typename T>
inline const std::string& ObstacleInteractiveTag_InteractiveTag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleInteractiveTag_InteractiveTag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleInteractiveTag_InteractiveTag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleInteractiveTag_InteractiveTag_descriptor(), enum_t_value);
}
inline bool ObstacleInteractiveTag_InteractiveTag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleInteractiveTag_InteractiveTag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleInteractiveTag_InteractiveTag>(
    ObstacleInteractiveTag_InteractiveTag_descriptor(), name, value);
}
// ===================================================================

class Lane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Lane) */ {
 public:
  inline Lane() : Lane(nullptr) {}
  ~Lane() override;
  explicit PROTOBUF_CONSTEXPR Lane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lane(const Lane& from);
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lane& operator=(Lane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }
  inline void Swap(Lane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Lane& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Lane";
  }
  protected:
  explicit Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentLaneFeatureFieldNumber = 1,
    kNearbyLaneFeatureFieldNumber = 3,
    kLaneFeatureFieldNumber = 2,
    kLaneGraphFieldNumber = 4,
    kLaneGraphOrderedFieldNumber = 5,
    kLabelUpdateTimeDeltaFieldNumber = 26,
  };
  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  int current_lane_feature_size() const;
  private:
  int _internal_current_lane_feature_size() const;
  public:
  void clear_current_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_current_lane_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_current_lane_feature();
  private:
  const ::apollo::prediction::LaneFeature& _internal_current_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* _internal_add_current_lane_feature();
  public:
  const ::apollo::prediction::LaneFeature& current_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* add_current_lane_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      current_lane_feature() const;

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  int nearby_lane_feature_size() const;
  private:
  int _internal_nearby_lane_feature_size() const;
  public:
  void clear_nearby_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_nearby_lane_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
      mutable_nearby_lane_feature();
  private:
  const ::apollo::prediction::LaneFeature& _internal_nearby_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* _internal_add_nearby_lane_feature();
  public:
  const ::apollo::prediction::LaneFeature& nearby_lane_feature(int index) const;
  ::apollo::prediction::LaneFeature* add_nearby_lane_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
      nearby_lane_feature() const;

  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  bool has_lane_feature() const;
  private:
  bool _internal_has_lane_feature() const;
  public:
  void clear_lane_feature();
  const ::apollo::prediction::LaneFeature& lane_feature() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneFeature* release_lane_feature();
  ::apollo::prediction::LaneFeature* mutable_lane_feature();
  void set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature);
  private:
  const ::apollo::prediction::LaneFeature& _internal_lane_feature() const;
  ::apollo::prediction::LaneFeature* _internal_mutable_lane_feature();
  public:
  void unsafe_arena_set_allocated_lane_feature(
      ::apollo::prediction::LaneFeature* lane_feature);
  ::apollo::prediction::LaneFeature* unsafe_arena_release_lane_feature();

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  bool has_lane_graph() const;
  private:
  bool _internal_has_lane_graph() const;
  public:
  void clear_lane_graph();
  const ::apollo::prediction::LaneGraph& lane_graph() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneGraph* release_lane_graph();
  ::apollo::prediction::LaneGraph* mutable_lane_graph();
  void set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph);
  private:
  const ::apollo::prediction::LaneGraph& _internal_lane_graph() const;
  ::apollo::prediction::LaneGraph* _internal_mutable_lane_graph();
  public:
  void unsafe_arena_set_allocated_lane_graph(
      ::apollo::prediction::LaneGraph* lane_graph);
  ::apollo::prediction::LaneGraph* unsafe_arena_release_lane_graph();

  // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
  bool has_lane_graph_ordered() const;
  private:
  bool _internal_has_lane_graph_ordered() const;
  public:
  void clear_lane_graph_ordered();
  const ::apollo::prediction::LaneGraph& lane_graph_ordered() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneGraph* release_lane_graph_ordered();
  ::apollo::prediction::LaneGraph* mutable_lane_graph_ordered();
  void set_allocated_lane_graph_ordered(::apollo::prediction::LaneGraph* lane_graph_ordered);
  private:
  const ::apollo::prediction::LaneGraph& _internal_lane_graph_ordered() const;
  ::apollo::prediction::LaneGraph* _internal_mutable_lane_graph_ordered();
  public:
  void unsafe_arena_set_allocated_lane_graph_ordered(
      ::apollo::prediction::LaneGraph* lane_graph_ordered);
  ::apollo::prediction::LaneGraph* unsafe_arena_release_lane_graph_ordered();

  // optional double label_update_time_delta = 26;
  bool has_label_update_time_delta() const;
  private:
  bool _internal_has_label_update_time_delta() const;
  public:
  void clear_label_update_time_delta();
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);
  private:
  double _internal_label_update_time_delta() const;
  void _internal_set_label_update_time_delta(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Lane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature > current_lane_feature_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature > nearby_lane_feature_;
    ::apollo::prediction::LaneFeature* lane_feature_;
    ::apollo::prediction::LaneGraph* lane_graph_;
    ::apollo::prediction::LaneGraph* lane_graph_ordered_;
    double label_update_time_delta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class LaneFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneFeature) */ {
 public:
  inline LaneFeature() : LaneFeature(nullptr) {}
  ~LaneFeature() override;
  explicit PROTOBUF_CONSTEXPR LaneFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneFeature(const LaneFeature& from);
  LaneFeature(LaneFeature&& from) noexcept
    : LaneFeature() {
    *this = ::std::move(from);
  }

  inline LaneFeature& operator=(const LaneFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneFeature& operator=(LaneFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneFeature* internal_default_instance() {
    return reinterpret_cast<const LaneFeature*>(
               &_LaneFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneFeature& a, LaneFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneFeature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LaneFeature";
  }
  protected:
  explicit LaneFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
    kLaneSFieldNumber = 3,
    kLaneLFieldNumber = 4,
    kAngleDiffFieldNumber = 5,
    kDistToLeftBoundaryFieldNumber = 6,
    kDistToRightBoundaryFieldNumber = 7,
    kLaneHeadingFieldNumber = 8,
    kLaneTurnTypeFieldNumber = 2,
    kLaneTypeFieldNumber = 9,
  };
  // optional string lane_id = 1;
  bool has_lane_id() const;
  private:
  bool _internal_has_lane_id() const;
  public:
  void clear_lane_id();
  const std::string& lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lane_id();
  PROTOBUF_NODISCARD std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);
  private:
  const std::string& _internal_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lane_id(const std::string& value);
  std::string* _internal_mutable_lane_id();
  public:

  // optional double lane_s = 3;
  bool has_lane_s() const;
  private:
  bool _internal_has_lane_s() const;
  public:
  void clear_lane_s();
  double lane_s() const;
  void set_lane_s(double value);
  private:
  double _internal_lane_s() const;
  void _internal_set_lane_s(double value);
  public:

  // optional double lane_l = 4;
  bool has_lane_l() const;
  private:
  bool _internal_has_lane_l() const;
  public:
  void clear_lane_l();
  double lane_l() const;
  void set_lane_l(double value);
  private:
  double _internal_lane_l() const;
  void _internal_set_lane_l(double value);
  public:

  // optional double angle_diff = 5;
  bool has_angle_diff() const;
  private:
  bool _internal_has_angle_diff() const;
  public:
  void clear_angle_diff();
  double angle_diff() const;
  void set_angle_diff(double value);
  private:
  double _internal_angle_diff() const;
  void _internal_set_angle_diff(double value);
  public:

  // optional double dist_to_left_boundary = 6;
  bool has_dist_to_left_boundary() const;
  private:
  bool _internal_has_dist_to_left_boundary() const;
  public:
  void clear_dist_to_left_boundary();
  double dist_to_left_boundary() const;
  void set_dist_to_left_boundary(double value);
  private:
  double _internal_dist_to_left_boundary() const;
  void _internal_set_dist_to_left_boundary(double value);
  public:

  // optional double dist_to_right_boundary = 7;
  bool has_dist_to_right_boundary() const;
  private:
  bool _internal_has_dist_to_right_boundary() const;
  public:
  void clear_dist_to_right_boundary();
  double dist_to_right_boundary() const;
  void set_dist_to_right_boundary(double value);
  private:
  double _internal_dist_to_right_boundary() const;
  void _internal_set_dist_to_right_boundary(double value);
  public:

  // optional double lane_heading = 8;
  bool has_lane_heading() const;
  private:
  bool _internal_has_lane_heading() const;
  public:
  void clear_lane_heading();
  double lane_heading() const;
  void set_lane_heading(double value);
  private:
  double _internal_lane_heading() const;
  void _internal_set_lane_heading(double value);
  public:

  // optional uint32 lane_turn_type = 2;
  bool has_lane_turn_type() const;
  private:
  bool _internal_has_lane_turn_type() const;
  public:
  void clear_lane_turn_type();
  uint32_t lane_turn_type() const;
  void set_lane_turn_type(uint32_t value);
  private:
  uint32_t _internal_lane_turn_type() const;
  void _internal_set_lane_turn_type(uint32_t value);
  public:

  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::apollo::hdmap::Lane_LaneType lane_type() const;
  void set_lane_type(::apollo::hdmap::Lane_LaneType value);
  private:
  ::apollo::hdmap::Lane_LaneType _internal_lane_type() const;
  void _internal_set_lane_type(::apollo::hdmap::Lane_LaneType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
    double lane_s_;
    double lane_l_;
    double angle_diff_;
    double dist_to_left_boundary_;
    double dist_to_right_boundary_;
    double lane_heading_;
    uint32_t lane_turn_type_;
    int lane_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class JunctionExit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.JunctionExit) */ {
 public:
  inline JunctionExit() : JunctionExit(nullptr) {}
  ~JunctionExit() override;
  explicit PROTOBUF_CONSTEXPR JunctionExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JunctionExit(const JunctionExit& from);
  JunctionExit(JunctionExit&& from) noexcept
    : JunctionExit() {
    *this = ::std::move(from);
  }

  inline JunctionExit& operator=(const JunctionExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline JunctionExit& operator=(JunctionExit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JunctionExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const JunctionExit* internal_default_instance() {
    return reinterpret_cast<const JunctionExit*>(
               &_JunctionExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JunctionExit& a, JunctionExit& b) {
    a.Swap(&b);
  }
  inline void Swap(JunctionExit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JunctionExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JunctionExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JunctionExit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JunctionExit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JunctionExit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JunctionExit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.JunctionExit";
  }
  protected:
  explicit JunctionExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExitLaneIdFieldNumber = 1,
    kExitPositionFieldNumber = 2,
    kExitHeadingFieldNumber = 3,
    kExitWidthFieldNumber = 4,
  };
  // optional string exit_lane_id = 1;
  bool has_exit_lane_id() const;
  private:
  bool _internal_has_exit_lane_id() const;
  public:
  void clear_exit_lane_id();
  const std::string& exit_lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exit_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exit_lane_id();
  PROTOBUF_NODISCARD std::string* release_exit_lane_id();
  void set_allocated_exit_lane_id(std::string* exit_lane_id);
  private:
  const std::string& _internal_exit_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exit_lane_id(const std::string& value);
  std::string* _internal_mutable_exit_lane_id();
  public:

  // optional .apollo.common.Point3D exit_position = 2;
  bool has_exit_position() const;
  private:
  bool _internal_has_exit_position() const;
  public:
  void clear_exit_position();
  const ::apollo::common::Point3D& exit_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_exit_position();
  ::apollo::common::Point3D* mutable_exit_position();
  void set_allocated_exit_position(::apollo::common::Point3D* exit_position);
  private:
  const ::apollo::common::Point3D& _internal_exit_position() const;
  ::apollo::common::Point3D* _internal_mutable_exit_position();
  public:
  void unsafe_arena_set_allocated_exit_position(
      ::apollo::common::Point3D* exit_position);
  ::apollo::common::Point3D* unsafe_arena_release_exit_position();

  // optional double exit_heading = 3;
  bool has_exit_heading() const;
  private:
  bool _internal_has_exit_heading() const;
  public:
  void clear_exit_heading();
  double exit_heading() const;
  void set_exit_heading(double value);
  private:
  double _internal_exit_heading() const;
  void _internal_set_exit_heading(double value);
  public:

  // optional double exit_width = 4;
  bool has_exit_width() const;
  private:
  bool _internal_has_exit_width() const;
  public:
  void clear_exit_width();
  double exit_width() const;
  void set_exit_width(double value);
  private:
  double _internal_exit_width() const;
  void _internal_set_exit_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.JunctionExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exit_lane_id_;
    ::apollo::common::Point3D* exit_position_;
    double exit_heading_;
    double exit_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class JunctionFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.JunctionFeature) */ {
 public:
  inline JunctionFeature() : JunctionFeature(nullptr) {}
  ~JunctionFeature() override;
  explicit PROTOBUF_CONSTEXPR JunctionFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JunctionFeature(const JunctionFeature& from);
  JunctionFeature(JunctionFeature&& from) noexcept
    : JunctionFeature() {
    *this = ::std::move(from);
  }

  inline JunctionFeature& operator=(const JunctionFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline JunctionFeature& operator=(JunctionFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JunctionFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const JunctionFeature* internal_default_instance() {
    return reinterpret_cast<const JunctionFeature*>(
               &_JunctionFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JunctionFeature& a, JunctionFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(JunctionFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JunctionFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JunctionFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JunctionFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JunctionFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JunctionFeature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JunctionFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.JunctionFeature";
  }
  protected:
  explicit JunctionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionExitFieldNumber = 4,
    kJunctionMlpFeatureFieldNumber = 5,
    kJunctionMlpLabelFieldNumber = 6,
    kJunctionMlpProbabilityFieldNumber = 7,
    kStartLaneIdFieldNumber = 8,
    kJunctionIdFieldNumber = 1,
    kEnterLaneFieldNumber = 3,
    kJunctionRangeFieldNumber = 2,
  };
  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  int junction_exit_size() const;
  private:
  int _internal_junction_exit_size() const;
  public:
  void clear_junction_exit();
  ::apollo::prediction::JunctionExit* mutable_junction_exit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::JunctionExit >*
      mutable_junction_exit();
  private:
  const ::apollo::prediction::JunctionExit& _internal_junction_exit(int index) const;
  ::apollo::prediction::JunctionExit* _internal_add_junction_exit();
  public:
  const ::apollo::prediction::JunctionExit& junction_exit(int index) const;
  ::apollo::prediction::JunctionExit* add_junction_exit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::JunctionExit >&
      junction_exit() const;

  // repeated double junction_mlp_feature = 5;
  int junction_mlp_feature_size() const;
  private:
  int _internal_junction_mlp_feature_size() const;
  public:
  void clear_junction_mlp_feature();
  private:
  double _internal_junction_mlp_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_junction_mlp_feature() const;
  void _internal_add_junction_mlp_feature(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_junction_mlp_feature();
  public:
  double junction_mlp_feature(int index) const;
  void set_junction_mlp_feature(int index, double value);
  void add_junction_mlp_feature(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      junction_mlp_feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_junction_mlp_feature();

  // repeated int32 junction_mlp_label = 6;
  int junction_mlp_label_size() const;
  private:
  int _internal_junction_mlp_label_size() const;
  public:
  void clear_junction_mlp_label();
  private:
  int32_t _internal_junction_mlp_label(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_junction_mlp_label() const;
  void _internal_add_junction_mlp_label(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_junction_mlp_label();
  public:
  int32_t junction_mlp_label(int index) const;
  void set_junction_mlp_label(int index, int32_t value);
  void add_junction_mlp_label(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      junction_mlp_label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_junction_mlp_label();

  // repeated double junction_mlp_probability = 7;
  int junction_mlp_probability_size() const;
  private:
  int _internal_junction_mlp_probability_size() const;
  public:
  void clear_junction_mlp_probability();
  private:
  double _internal_junction_mlp_probability(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_junction_mlp_probability() const;
  void _internal_add_junction_mlp_probability(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_junction_mlp_probability();
  public:
  double junction_mlp_probability(int index) const;
  void set_junction_mlp_probability(int index, double value);
  void add_junction_mlp_probability(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      junction_mlp_probability() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_junction_mlp_probability();

  // repeated string start_lane_id = 8;
  int start_lane_id_size() const;
  private:
  int _internal_start_lane_id_size() const;
  public:
  void clear_start_lane_id();
  const std::string& start_lane_id(int index) const;
  std::string* mutable_start_lane_id(int index);
  void set_start_lane_id(int index, const std::string& value);
  void set_start_lane_id(int index, std::string&& value);
  void set_start_lane_id(int index, const char* value);
  void set_start_lane_id(int index, const char* value, size_t size);
  std::string* add_start_lane_id();
  void add_start_lane_id(const std::string& value);
  void add_start_lane_id(std::string&& value);
  void add_start_lane_id(const char* value);
  void add_start_lane_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& start_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_start_lane_id();
  private:
  const std::string& _internal_start_lane_id(int index) const;
  std::string* _internal_add_start_lane_id();
  public:

  // optional string junction_id = 1;
  bool has_junction_id() const;
  private:
  bool _internal_has_junction_id() const;
  public:
  void clear_junction_id();
  const std::string& junction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_junction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_junction_id();
  PROTOBUF_NODISCARD std::string* release_junction_id();
  void set_allocated_junction_id(std::string* junction_id);
  private:
  const std::string& _internal_junction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_junction_id(const std::string& value);
  std::string* _internal_mutable_junction_id();
  public:

  // optional .apollo.prediction.LaneFeature enter_lane = 3;
  bool has_enter_lane() const;
  private:
  bool _internal_has_enter_lane() const;
  public:
  void clear_enter_lane();
  const ::apollo::prediction::LaneFeature& enter_lane() const;
  PROTOBUF_NODISCARD ::apollo::prediction::LaneFeature* release_enter_lane();
  ::apollo::prediction::LaneFeature* mutable_enter_lane();
  void set_allocated_enter_lane(::apollo::prediction::LaneFeature* enter_lane);
  private:
  const ::apollo::prediction::LaneFeature& _internal_enter_lane() const;
  ::apollo::prediction::LaneFeature* _internal_mutable_enter_lane();
  public:
  void unsafe_arena_set_allocated_enter_lane(
      ::apollo::prediction::LaneFeature* enter_lane);
  ::apollo::prediction::LaneFeature* unsafe_arena_release_enter_lane();

  // optional double junction_range = 2;
  bool has_junction_range() const;
  private:
  bool _internal_has_junction_range() const;
  public:
  void clear_junction_range();
  double junction_range() const;
  void set_junction_range(double value);
  private:
  double _internal_junction_range() const;
  void _internal_set_junction_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.JunctionFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::JunctionExit > junction_exit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > junction_mlp_feature_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > junction_mlp_label_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > junction_mlp_probability_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> start_lane_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr junction_id_;
    ::apollo::prediction::LaneFeature* enter_lane_;
    double junction_range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class ObstaclePriority final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstaclePriority) */ {
 public:
  inline ObstaclePriority() : ObstaclePriority(nullptr) {}
  ~ObstaclePriority() override;
  explicit PROTOBUF_CONSTEXPR ObstaclePriority(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstaclePriority(const ObstaclePriority& from);
  ObstaclePriority(ObstaclePriority&& from) noexcept
    : ObstaclePriority() {
    *this = ::std::move(from);
  }

  inline ObstaclePriority& operator=(const ObstaclePriority& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstaclePriority& operator=(ObstaclePriority&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstaclePriority& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstaclePriority* internal_default_instance() {
    return reinterpret_cast<const ObstaclePriority*>(
               &_ObstaclePriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObstaclePriority& a, ObstaclePriority& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstaclePriority* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstaclePriority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstaclePriority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstaclePriority>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstaclePriority& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstaclePriority& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstaclePriority* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstaclePriority";
  }
  protected:
  explicit ObstaclePriority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstaclePriority_Priority Priority;
  static constexpr Priority CAUTION =
    ObstaclePriority_Priority_CAUTION;
  static constexpr Priority NORMAL =
    ObstaclePriority_Priority_NORMAL;
  static constexpr Priority IGNORE =
    ObstaclePriority_Priority_IGNORE;
  static inline bool Priority_IsValid(int value) {
    return ObstaclePriority_Priority_IsValid(value);
  }
  static constexpr Priority Priority_MIN =
    ObstaclePriority_Priority_Priority_MIN;
  static constexpr Priority Priority_MAX =
    ObstaclePriority_Priority_Priority_MAX;
  static constexpr int Priority_ARRAYSIZE =
    ObstaclePriority_Priority_Priority_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Priority_descriptor() {
    return ObstaclePriority_Priority_descriptor();
  }
  template<typename T>
  static inline const std::string& Priority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Priority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Priority_Name.");
    return ObstaclePriority_Priority_Name(enum_t_value);
  }
  static inline bool Priority_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Priority* value) {
    return ObstaclePriority_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 25,
  };
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::apollo::prediction::ObstaclePriority_Priority priority() const;
  void set_priority(::apollo::prediction::ObstaclePriority_Priority value);
  private:
  ::apollo::prediction::ObstaclePriority_Priority _internal_priority() const;
  void _internal_set_priority(::apollo::prediction::ObstaclePriority_Priority value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstaclePriority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class ObstacleInteractiveTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleInteractiveTag) */ {
 public:
  inline ObstacleInteractiveTag() : ObstacleInteractiveTag(nullptr) {}
  ~ObstacleInteractiveTag() override;
  explicit PROTOBUF_CONSTEXPR ObstacleInteractiveTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstacleInteractiveTag(const ObstacleInteractiveTag& from);
  ObstacleInteractiveTag(ObstacleInteractiveTag&& from) noexcept
    : ObstacleInteractiveTag() {
    *this = ::std::move(from);
  }

  inline ObstacleInteractiveTag& operator=(const ObstacleInteractiveTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleInteractiveTag& operator=(ObstacleInteractiveTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstacleInteractiveTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstacleInteractiveTag* internal_default_instance() {
    return reinterpret_cast<const ObstacleInteractiveTag*>(
               &_ObstacleInteractiveTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObstacleInteractiveTag& a, ObstacleInteractiveTag& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleInteractiveTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleInteractiveTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstacleInteractiveTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstacleInteractiveTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstacleInteractiveTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstacleInteractiveTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleInteractiveTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstacleInteractiveTag";
  }
  protected:
  explicit ObstacleInteractiveTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleInteractiveTag_InteractiveTag InteractiveTag;
  static constexpr InteractiveTag INTERACTION =
    ObstacleInteractiveTag_InteractiveTag_INTERACTION;
  static constexpr InteractiveTag NONINTERACTION =
    ObstacleInteractiveTag_InteractiveTag_NONINTERACTION;
  static inline bool InteractiveTag_IsValid(int value) {
    return ObstacleInteractiveTag_InteractiveTag_IsValid(value);
  }
  static constexpr InteractiveTag InteractiveTag_MIN =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MIN;
  static constexpr InteractiveTag InteractiveTag_MAX =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX;
  static constexpr int InteractiveTag_ARRAYSIZE =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InteractiveTag_descriptor() {
    return ObstacleInteractiveTag_InteractiveTag_descriptor();
  }
  template<typename T>
  static inline const std::string& InteractiveTag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InteractiveTag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InteractiveTag_Name.");
    return ObstacleInteractiveTag_InteractiveTag_Name(enum_t_value);
  }
  static inline bool InteractiveTag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InteractiveTag* value) {
    return ObstacleInteractiveTag_InteractiveTag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInteractiveTagFieldNumber = 37,
  };
  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  bool has_interactive_tag() const;
  private:
  bool _internal_has_interactive_tag() const;
  public:
  void clear_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag interactive_tag() const;
  void set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value);
  private:
  ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag _internal_interactive_tag() const;
  void _internal_set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleInteractiveTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int interactive_tag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class Trajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Trajectory) */ {
 public:
  inline Trajectory() : Trajectory(nullptr) {}
  ~Trajectory() override;
  explicit PROTOBUF_CONSTEXPR Trajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Trajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Trajectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Trajectory";
  }
  protected:
  explicit Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  private:
  const ::apollo::common::TrajectoryPoint& _internal_trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* _internal_add_trajectory_point();
  public:
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // optional double probability = 1;
  bool has_probability() const;
  private:
  bool _internal_has_probability() const;
  public:
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
    double probability_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Feature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 30,
    kFutureTrajectoryPointsFieldNumber = 31,
    kShortTermPredictedTrajectoryPointsFieldNumber = 32,
    kPredictedTrajectoryFieldNumber = 33,
    kAdcTrajectoryPointFieldNumber = 34,
    kSurroundingLaneIdFieldNumber = 35,
    kWithinLaneIdFieldNumber = 36,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAccelerationFieldNumber = 4,
    kLaneFieldNumber = 14,
    kTPositionFieldNumber = 16,
    kTVelocityFieldNumber = 17,
    kTAccelerationFieldNumber = 20,
    kPriorityFieldNumber = 25,
    kJunctionFeatureFieldNumber = 26,
    kFrontPositionFieldNumber = 27,
    kRawVelocityFieldNumber = 28,
    kInteractiveTagFieldNumber = 37,
    kAdcLocalizationFieldNumber = 39,
    kVelocityHeadingFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kAccFieldNumber = 7,
    kThetaFieldNumber = 8,
    kLengthFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kTrackingTimeFieldNumber = 12,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 23,
    kTimestampFieldNumber = 13,
    kTVelocityHeadingFieldNumber = 18,
    kTSpeedFieldNumber = 19,
    kTAccFieldNumber = 21,
    kLabelUpdateTimeDeltaFieldNumber = 24,
    kAdcTimestampFieldNumber = 38,
    kIsStillFieldNumber = 22,
    kIsNearJunctionFieldNumber = 29,
  };
  // repeated .apollo.common.Point3D polygon_point = 30;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::common::Point3D* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_polygon_point();
  private:
  const ::apollo::common::Point3D& _internal_polygon_point(int index) const;
  ::apollo::common::Point3D* _internal_add_polygon_point();
  public:
  const ::apollo::common::Point3D& polygon_point(int index) const;
  ::apollo::common::Point3D* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      polygon_point() const;

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  int future_trajectory_points_size() const;
  private:
  int _internal_future_trajectory_points_size() const;
  public:
  void clear_future_trajectory_points();
  ::apollo::prediction::PredictionTrajectoryPoint* mutable_future_trajectory_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionTrajectoryPoint >*
      mutable_future_trajectory_points();
  private:
  const ::apollo::prediction::PredictionTrajectoryPoint& _internal_future_trajectory_points(int index) const;
  ::apollo::prediction::PredictionTrajectoryPoint* _internal_add_future_trajectory_points();
  public:
  const ::apollo::prediction::PredictionTrajectoryPoint& future_trajectory_points(int index) const;
  ::apollo::prediction::PredictionTrajectoryPoint* add_future_trajectory_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionTrajectoryPoint >&
      future_trajectory_points() const;

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  int short_term_predicted_trajectory_points_size() const;
  private:
  int _internal_short_term_predicted_trajectory_points_size() const;
  public:
  void clear_short_term_predicted_trajectory_points();
  ::apollo::common::TrajectoryPoint* mutable_short_term_predicted_trajectory_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_short_term_predicted_trajectory_points();
  private:
  const ::apollo::common::TrajectoryPoint& _internal_short_term_predicted_trajectory_points(int index) const;
  ::apollo::common::TrajectoryPoint* _internal_add_short_term_predicted_trajectory_points();
  public:
  const ::apollo::common::TrajectoryPoint& short_term_predicted_trajectory_points(int index) const;
  ::apollo::common::TrajectoryPoint* add_short_term_predicted_trajectory_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      short_term_predicted_trajectory_points() const;

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  int predicted_trajectory_size() const;
  private:
  int _internal_predicted_trajectory_size() const;
  public:
  void clear_predicted_trajectory();
  ::apollo::prediction::Trajectory* mutable_predicted_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >*
      mutable_predicted_trajectory();
  private:
  const ::apollo::prediction::Trajectory& _internal_predicted_trajectory(int index) const;
  ::apollo::prediction::Trajectory* _internal_add_predicted_trajectory();
  public:
  const ::apollo::prediction::Trajectory& predicted_trajectory(int index) const;
  ::apollo::prediction::Trajectory* add_predicted_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >&
      predicted_trajectory() const;

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  int adc_trajectory_point_size() const;
  private:
  int _internal_adc_trajectory_point_size() const;
  public:
  void clear_adc_trajectory_point();
  ::apollo::common::TrajectoryPoint* mutable_adc_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_adc_trajectory_point();
  private:
  const ::apollo::common::TrajectoryPoint& _internal_adc_trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* _internal_add_adc_trajectory_point();
  public:
  const ::apollo::common::TrajectoryPoint& adc_trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_adc_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      adc_trajectory_point() const;

  // repeated string surrounding_lane_id = 35;
  int surrounding_lane_id_size() const;
  private:
  int _internal_surrounding_lane_id_size() const;
  public:
  void clear_surrounding_lane_id();
  const std::string& surrounding_lane_id(int index) const;
  std::string* mutable_surrounding_lane_id(int index);
  void set_surrounding_lane_id(int index, const std::string& value);
  void set_surrounding_lane_id(int index, std::string&& value);
  void set_surrounding_lane_id(int index, const char* value);
  void set_surrounding_lane_id(int index, const char* value, size_t size);
  std::string* add_surrounding_lane_id();
  void add_surrounding_lane_id(const std::string& value);
  void add_surrounding_lane_id(std::string&& value);
  void add_surrounding_lane_id(const char* value);
  void add_surrounding_lane_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& surrounding_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_surrounding_lane_id();
  private:
  const std::string& _internal_surrounding_lane_id(int index) const;
  std::string* _internal_add_surrounding_lane_id();
  public:

  // repeated string within_lane_id = 36;
  int within_lane_id_size() const;
  private:
  int _internal_within_lane_id_size() const;
  public:
  void clear_within_lane_id();
  const std::string& within_lane_id(int index) const;
  std::string* mutable_within_lane_id(int index);
  void set_within_lane_id(int index, const std::string& value);
  void set_within_lane_id(int index, std::string&& value);
  void set_within_lane_id(int index, const char* value);
  void set_within_lane_id(int index, const char* value, size_t size);
  std::string* add_within_lane_id();
  void add_within_lane_id(const std::string& value);
  void add_within_lane_id(std::string&& value);
  void add_within_lane_id(const char* value);
  void add_within_lane_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& within_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_within_lane_id();
  private:
  const std::string& _internal_within_lane_id(int index) const;
  std::string* _internal_add_within_lane_id();
  public:

  // optional .apollo.common.Point3D position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point3D* position);
  ::apollo::common::Point3D* unsafe_arena_release_position();

  // optional .apollo.common.Point3D velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::common::Point3D* velocity);
  ::apollo::common::Point3D* unsafe_arena_release_velocity();

  // optional .apollo.common.Point3D acceleration = 4;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::apollo::common::Point3D& acceleration() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_acceleration();
  ::apollo::common::Point3D* mutable_acceleration();
  void set_allocated_acceleration(::apollo::common::Point3D* acceleration);
  private:
  const ::apollo::common::Point3D& _internal_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::apollo::common::Point3D* acceleration);
  ::apollo::common::Point3D* unsafe_arena_release_acceleration();

  // optional .apollo.prediction.Lane lane = 14;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  const ::apollo::prediction::Lane& lane() const;
  PROTOBUF_NODISCARD ::apollo::prediction::Lane* release_lane();
  ::apollo::prediction::Lane* mutable_lane();
  void set_allocated_lane(::apollo::prediction::Lane* lane);
  private:
  const ::apollo::prediction::Lane& _internal_lane() const;
  ::apollo::prediction::Lane* _internal_mutable_lane();
  public:
  void unsafe_arena_set_allocated_lane(
      ::apollo::prediction::Lane* lane);
  ::apollo::prediction::Lane* unsafe_arena_release_lane();

  // optional .apollo.common.Point3D t_position = 16;
  bool has_t_position() const;
  private:
  bool _internal_has_t_position() const;
  public:
  void clear_t_position();
  const ::apollo::common::Point3D& t_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_t_position();
  ::apollo::common::Point3D* mutable_t_position();
  void set_allocated_t_position(::apollo::common::Point3D* t_position);
  private:
  const ::apollo::common::Point3D& _internal_t_position() const;
  ::apollo::common::Point3D* _internal_mutable_t_position();
  public:
  void unsafe_arena_set_allocated_t_position(
      ::apollo::common::Point3D* t_position);
  ::apollo::common::Point3D* unsafe_arena_release_t_position();

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_velocity() const;
  private:
  bool _internal_has_t_velocity() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_velocity();
  PROTOBUF_DEPRECATED const ::apollo::common::Point3D& t_velocity() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::common::Point3D* release_t_velocity();
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* mutable_t_velocity();
  PROTOBUF_DEPRECATED void set_allocated_t_velocity(::apollo::common::Point3D* t_velocity);
  private:
  const ::apollo::common::Point3D& _internal_t_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_t_velocity();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_t_velocity(
      ::apollo::common::Point3D* t_velocity);
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* unsafe_arena_release_t_velocity();

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_acceleration() const;
  private:
  bool _internal_has_t_acceleration() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_acceleration();
  PROTOBUF_DEPRECATED const ::apollo::common::Point3D& t_acceleration() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::common::Point3D* release_t_acceleration();
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* mutable_t_acceleration();
  PROTOBUF_DEPRECATED void set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration);
  private:
  const ::apollo::common::Point3D& _internal_t_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_t_acceleration();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_t_acceleration(
      ::apollo::common::Point3D* t_acceleration);
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* unsafe_arena_release_t_acceleration();

  // optional .apollo.prediction.ObstaclePriority priority = 25;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::apollo::prediction::ObstaclePriority& priority() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstaclePriority* release_priority();
  ::apollo::prediction::ObstaclePriority* mutable_priority();
  void set_allocated_priority(::apollo::prediction::ObstaclePriority* priority);
  private:
  const ::apollo::prediction::ObstaclePriority& _internal_priority() const;
  ::apollo::prediction::ObstaclePriority* _internal_mutable_priority();
  public:
  void unsafe_arena_set_allocated_priority(
      ::apollo::prediction::ObstaclePriority* priority);
  ::apollo::prediction::ObstaclePriority* unsafe_arena_release_priority();

  // optional .apollo.prediction.JunctionFeature junction_feature = 26;
  bool has_junction_feature() const;
  private:
  bool _internal_has_junction_feature() const;
  public:
  void clear_junction_feature();
  const ::apollo::prediction::JunctionFeature& junction_feature() const;
  PROTOBUF_NODISCARD ::apollo::prediction::JunctionFeature* release_junction_feature();
  ::apollo::prediction::JunctionFeature* mutable_junction_feature();
  void set_allocated_junction_feature(::apollo::prediction::JunctionFeature* junction_feature);
  private:
  const ::apollo::prediction::JunctionFeature& _internal_junction_feature() const;
  ::apollo::prediction::JunctionFeature* _internal_mutable_junction_feature();
  public:
  void unsafe_arena_set_allocated_junction_feature(
      ::apollo::prediction::JunctionFeature* junction_feature);
  ::apollo::prediction::JunctionFeature* unsafe_arena_release_junction_feature();

  // optional .apollo.common.Point3D front_position = 27;
  bool has_front_position() const;
  private:
  bool _internal_has_front_position() const;
  public:
  void clear_front_position();
  const ::apollo::common::Point3D& front_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_front_position();
  ::apollo::common::Point3D* mutable_front_position();
  void set_allocated_front_position(::apollo::common::Point3D* front_position);
  private:
  const ::apollo::common::Point3D& _internal_front_position() const;
  ::apollo::common::Point3D* _internal_mutable_front_position();
  public:
  void unsafe_arena_set_allocated_front_position(
      ::apollo::common::Point3D* front_position);
  ::apollo::common::Point3D* unsafe_arena_release_front_position();

  // optional .apollo.common.Point3D raw_velocity = 28;
  bool has_raw_velocity() const;
  private:
  bool _internal_has_raw_velocity() const;
  public:
  void clear_raw_velocity();
  const ::apollo::common::Point3D& raw_velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_raw_velocity();
  ::apollo::common::Point3D* mutable_raw_velocity();
  void set_allocated_raw_velocity(::apollo::common::Point3D* raw_velocity);
  private:
  const ::apollo::common::Point3D& _internal_raw_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_raw_velocity();
  public:
  void unsafe_arena_set_allocated_raw_velocity(
      ::apollo::common::Point3D* raw_velocity);
  ::apollo::common::Point3D* unsafe_arena_release_raw_velocity();

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
  bool has_interactive_tag() const;
  private:
  bool _internal_has_interactive_tag() const;
  public:
  void clear_interactive_tag();
  const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstacleInteractiveTag* release_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag* mutable_interactive_tag();
  void set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag);
  private:
  const ::apollo::prediction::ObstacleInteractiveTag& _internal_interactive_tag() const;
  ::apollo::prediction::ObstacleInteractiveTag* _internal_mutable_interactive_tag();
  public:
  void unsafe_arena_set_allocated_interactive_tag(
      ::apollo::prediction::ObstacleInteractiveTag* interactive_tag);
  ::apollo::prediction::ObstacleInteractiveTag* unsafe_arena_release_interactive_tag();

  // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
  bool has_adc_localization() const;
  private:
  bool _internal_has_adc_localization() const;
  public:
  void clear_adc_localization();
  const ::apollo::perception::PerceptionObstacle& adc_localization() const;
  PROTOBUF_NODISCARD ::apollo::perception::PerceptionObstacle* release_adc_localization();
  ::apollo::perception::PerceptionObstacle* mutable_adc_localization();
  void set_allocated_adc_localization(::apollo::perception::PerceptionObstacle* adc_localization);
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_adc_localization() const;
  ::apollo::perception::PerceptionObstacle* _internal_mutable_adc_localization();
  public:
  void unsafe_arena_set_allocated_adc_localization(
      ::apollo::perception::PerceptionObstacle* adc_localization);
  ::apollo::perception::PerceptionObstacle* unsafe_arena_release_adc_localization();

  // optional double velocity_heading = 5;
  bool has_velocity_heading() const;
  private:
  bool _internal_has_velocity_heading() const;
  public:
  void clear_velocity_heading();
  double velocity_heading() const;
  void set_velocity_heading(double value);
  private:
  double _internal_velocity_heading() const;
  void _internal_set_velocity_heading(double value);
  public:

  // optional double speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acc = 7;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // optional double theta = 8;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 9;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 10;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 11;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double tracking_time = 12;
  bool has_tracking_time() const;
  private:
  bool _internal_has_tracking_time() const;
  public:
  void clear_tracking_time();
  double tracking_time() const;
  void set_tracking_time(double value);
  private:
  double _internal_tracking_time() const;
  void _internal_set_tracking_time(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional double timestamp = 13;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double t_velocity_heading = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_velocity_heading() const;
  private:
  bool _internal_has_t_velocity_heading() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_velocity_heading();
  PROTOBUF_DEPRECATED double t_velocity_heading() const;
  PROTOBUF_DEPRECATED void set_t_velocity_heading(double value);
  private:
  double _internal_t_velocity_heading() const;
  void _internal_set_t_velocity_heading(double value);
  public:

  // optional double t_speed = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_speed() const;
  private:
  bool _internal_has_t_speed() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_speed();
  PROTOBUF_DEPRECATED double t_speed() const;
  PROTOBUF_DEPRECATED void set_t_speed(double value);
  private:
  double _internal_t_speed() const;
  void _internal_set_t_speed(double value);
  public:

  // optional double t_acc = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_t_acc() const;
  private:
  bool _internal_has_t_acc() const;
  public:
  PROTOBUF_DEPRECATED void clear_t_acc();
  PROTOBUF_DEPRECATED double t_acc() const;
  PROTOBUF_DEPRECATED void set_t_acc(double value);
  private:
  double _internal_t_acc() const;
  void _internal_set_t_acc(double value);
  public:

  // optional double label_update_time_delta = 24;
  bool has_label_update_time_delta() const;
  private:
  bool _internal_has_label_update_time_delta() const;
  public:
  void clear_label_update_time_delta();
  double label_update_time_delta() const;
  void set_label_update_time_delta(double value);
  private:
  double _internal_label_update_time_delta() const;
  void _internal_set_label_update_time_delta(double value);
  public:

  // optional double adc_timestamp = 38;
  bool has_adc_timestamp() const;
  private:
  bool _internal_has_adc_timestamp() const;
  public:
  void clear_adc_timestamp();
  double adc_timestamp() const;
  void set_adc_timestamp(double value);
  private:
  double _internal_adc_timestamp() const;
  void _internal_set_adc_timestamp(double value);
  public:

  // optional bool is_still = 22 [default = false];
  bool has_is_still() const;
  private:
  bool _internal_has_is_still() const;
  public:
  void clear_is_still();
  bool is_still() const;
  void set_is_still(bool value);
  private:
  bool _internal_is_still() const;
  void _internal_set_is_still(bool value);
  public:

  // optional bool is_near_junction = 29 [default = false];
  bool has_is_near_junction() const;
  private:
  bool _internal_has_is_near_junction() const;
  public:
  void clear_is_near_junction();
  bool is_near_junction() const;
  void set_is_near_junction(bool value);
  private:
  bool _internal_is_near_junction() const;
  void _internal_set_is_near_junction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > polygon_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionTrajectoryPoint > future_trajectory_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint > short_term_predicted_trajectory_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory > predicted_trajectory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint > adc_trajectory_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> surrounding_lane_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> within_lane_id_;
    ::apollo::common::Point3D* position_;
    ::apollo::common::Point3D* velocity_;
    ::apollo::common::Point3D* acceleration_;
    ::apollo::prediction::Lane* lane_;
    ::apollo::common::Point3D* t_position_;
    ::apollo::common::Point3D* t_velocity_;
    ::apollo::common::Point3D* t_acceleration_;
    ::apollo::prediction::ObstaclePriority* priority_;
    ::apollo::prediction::JunctionFeature* junction_feature_;
    ::apollo::common::Point3D* front_position_;
    ::apollo::common::Point3D* raw_velocity_;
    ::apollo::prediction::ObstacleInteractiveTag* interactive_tag_;
    ::apollo::perception::PerceptionObstacle* adc_localization_;
    double velocity_heading_;
    double speed_;
    double acc_;
    double theta_;
    double length_;
    double width_;
    double height_;
    double tracking_time_;
    int32_t id_;
    int type_;
    double timestamp_;
    double t_velocity_heading_;
    double t_speed_;
    double t_acc_;
    double label_update_time_delta_;
    double adc_timestamp_;
    bool is_still_;
    bool is_near_junction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class ObstacleHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleHistory) */ {
 public:
  inline ObstacleHistory() : ObstacleHistory(nullptr) {}
  ~ObstacleHistory() override;
  explicit PROTOBUF_CONSTEXPR ObstacleHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstacleHistory(const ObstacleHistory& from);
  ObstacleHistory(ObstacleHistory&& from) noexcept
    : ObstacleHistory() {
    *this = ::std::move(from);
  }

  inline ObstacleHistory& operator=(const ObstacleHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleHistory& operator=(ObstacleHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstacleHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstacleHistory* internal_default_instance() {
    return reinterpret_cast<const ObstacleHistory*>(
               &_ObstacleHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ObstacleHistory& a, ObstacleHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstacleHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstacleHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstacleHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstacleHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstacleHistory";
  }
  protected:
  explicit ObstacleHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kIsTrainableFieldNumber = 2,
  };
  // repeated .apollo.prediction.Feature feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::apollo::prediction::Feature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >*
      mutable_feature();
  private:
  const ::apollo::prediction::Feature& _internal_feature(int index) const;
  ::apollo::prediction::Feature* _internal_add_feature();
  public:
  const ::apollo::prediction::Feature& feature(int index) const;
  ::apollo::prediction::Feature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >&
      feature() const;

  // optional bool is_trainable = 2 [default = false];
  bool has_is_trainable() const;
  private:
  bool _internal_has_is_trainable() const;
  public:
  void clear_is_trainable();
  bool is_trainable() const;
  void set_is_trainable(bool value);
  private:
  bool _internal_is_trainable() const;
  void _internal_set_is_trainable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature > feature_;
    bool is_trainable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// -------------------------------------------------------------------

class FrameEnv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.FrameEnv) */ {
 public:
  inline FrameEnv() : FrameEnv(nullptr) {}
  ~FrameEnv() override;
  explicit PROTOBUF_CONSTEXPR FrameEnv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameEnv(const FrameEnv& from);
  FrameEnv(FrameEnv&& from) noexcept
    : FrameEnv() {
    *this = ::std::move(from);
  }

  inline FrameEnv& operator=(const FrameEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameEnv& operator=(FrameEnv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameEnv& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameEnv* internal_default_instance() {
    return reinterpret_cast<const FrameEnv*>(
               &_FrameEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FrameEnv& a, FrameEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameEnv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameEnv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameEnv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameEnv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameEnv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameEnv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.FrameEnv";
  }
  protected:
  explicit FrameEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesHistoryFieldNumber = 3,
    kEgoHistoryFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  int obstacles_history_size() const;
  private:
  int _internal_obstacles_history_size() const;
  public:
  void clear_obstacles_history();
  ::apollo::prediction::ObstacleHistory* mutable_obstacles_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleHistory >*
      mutable_obstacles_history();
  private:
  const ::apollo::prediction::ObstacleHistory& _internal_obstacles_history(int index) const;
  ::apollo::prediction::ObstacleHistory* _internal_add_obstacles_history();
  public:
  const ::apollo::prediction::ObstacleHistory& obstacles_history(int index) const;
  ::apollo::prediction::ObstacleHistory* add_obstacles_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleHistory >&
      obstacles_history() const;

  // optional .apollo.prediction.ObstacleHistory ego_history = 2;
  bool has_ego_history() const;
  private:
  bool _internal_has_ego_history() const;
  public:
  void clear_ego_history();
  const ::apollo::prediction::ObstacleHistory& ego_history() const;
  PROTOBUF_NODISCARD ::apollo::prediction::ObstacleHistory* release_ego_history();
  ::apollo::prediction::ObstacleHistory* mutable_ego_history();
  void set_allocated_ego_history(::apollo::prediction::ObstacleHistory* ego_history);
  private:
  const ::apollo::prediction::ObstacleHistory& _internal_ego_history() const;
  ::apollo::prediction::ObstacleHistory* _internal_mutable_ego_history();
  public:
  void unsafe_arena_set_allocated_ego_history(
      ::apollo::prediction::ObstacleHistory* ego_history);
  ::apollo::prediction::ObstacleHistory* unsafe_arena_release_ego_history();

  // optional double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.FrameEnv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleHistory > obstacles_history_;
    ::apollo::prediction::ObstacleHistory* ego_history_;
    double timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lane

// repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
inline int Lane::_internal_current_lane_feature_size() const {
  return _impl_.current_lane_feature_.size();
}
inline int Lane::current_lane_feature_size() const {
  return _internal_current_lane_feature_size();
}
inline void Lane::clear_current_lane_feature() {
  _impl_.current_lane_feature_.Clear();
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_current_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.current_lane_feature)
  return _impl_.current_lane_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_current_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.current_lane_feature)
  return &_impl_.current_lane_feature_;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_current_lane_feature(int index) const {
  return _impl_.current_lane_feature_.Get(index);
}
inline const ::apollo::prediction::LaneFeature& Lane::current_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.current_lane_feature)
  return _internal_current_lane_feature(index);
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_add_current_lane_feature() {
  return _impl_.current_lane_feature_.Add();
}
inline ::apollo::prediction::LaneFeature* Lane::add_current_lane_feature() {
  ::apollo::prediction::LaneFeature* _add = _internal_add_current_lane_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.current_lane_feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::current_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.current_lane_feature)
  return _impl_.current_lane_feature_;
}

// optional .apollo.prediction.LaneFeature lane_feature = 2;
inline bool Lane::_internal_has_lane_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_feature_ != nullptr);
  return value;
}
inline bool Lane::has_lane_feature() const {
  return _internal_has_lane_feature();
}
inline void Lane::clear_lane_feature() {
  if (_impl_.lane_feature_ != nullptr) _impl_.lane_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_lane_feature() const {
  const ::apollo::prediction::LaneFeature* p = _impl_.lane_feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneFeature&>(
      ::apollo::prediction::_LaneFeature_default_instance_);
}
inline const ::apollo::prediction::LaneFeature& Lane::lane_feature() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_feature)
  return _internal_lane_feature();
}
inline void Lane::unsafe_arena_set_allocated_lane_feature(
    ::apollo::prediction::LaneFeature* lane_feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_feature_);
  }
  _impl_.lane_feature_ = lane_feature;
  if (lane_feature) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Lane.lane_feature)
}
inline ::apollo::prediction::LaneFeature* Lane::release_lane_feature() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneFeature* temp = _impl_.lane_feature_;
  _impl_.lane_feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneFeature* Lane::unsafe_arena_release_lane_feature() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_feature)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::LaneFeature* temp = _impl_.lane_feature_;
  _impl_.lane_feature_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_mutable_lane_feature() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lane_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneFeature>(GetArenaForAllocation());
    _impl_.lane_feature_ = p;
  }
  return _impl_.lane_feature_;
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_lane_feature() {
  ::apollo::prediction::LaneFeature* _msg = _internal_mutable_lane_feature();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_feature)
  return _msg;
}
inline void Lane::set_allocated_lane_feature(::apollo::prediction::LaneFeature* lane_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_feature_;
  }
  if (lane_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_feature);
    if (message_arena != submessage_arena) {
      lane_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_feature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_feature_ = lane_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_feature)
}

// repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
inline int Lane::_internal_nearby_lane_feature_size() const {
  return _impl_.nearby_lane_feature_.size();
}
inline int Lane::nearby_lane_feature_size() const {
  return _internal_nearby_lane_feature_size();
}
inline void Lane::clear_nearby_lane_feature() {
  _impl_.nearby_lane_feature_.Clear();
}
inline ::apollo::prediction::LaneFeature* Lane::mutable_nearby_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.nearby_lane_feature)
  return _impl_.nearby_lane_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >*
Lane::mutable_nearby_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Lane.nearby_lane_feature)
  return &_impl_.nearby_lane_feature_;
}
inline const ::apollo::prediction::LaneFeature& Lane::_internal_nearby_lane_feature(int index) const {
  return _impl_.nearby_lane_feature_.Get(index);
}
inline const ::apollo::prediction::LaneFeature& Lane::nearby_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.nearby_lane_feature)
  return _internal_nearby_lane_feature(index);
}
inline ::apollo::prediction::LaneFeature* Lane::_internal_add_nearby_lane_feature() {
  return _impl_.nearby_lane_feature_.Add();
}
inline ::apollo::prediction::LaneFeature* Lane::add_nearby_lane_feature() {
  ::apollo::prediction::LaneFeature* _add = _internal_add_nearby_lane_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.Lane.nearby_lane_feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LaneFeature >&
Lane::nearby_lane_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Lane.nearby_lane_feature)
  return _impl_.nearby_lane_feature_;
}

// optional .apollo.prediction.LaneGraph lane_graph = 4;
inline bool Lane::_internal_has_lane_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_graph_ != nullptr);
  return value;
}
inline bool Lane::has_lane_graph() const {
  return _internal_has_lane_graph();
}
inline const ::apollo::prediction::LaneGraph& Lane::_internal_lane_graph() const {
  const ::apollo::prediction::LaneGraph* p = _impl_.lane_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneGraph&>(
      ::apollo::prediction::_LaneGraph_default_instance_);
}
inline const ::apollo::prediction::LaneGraph& Lane::lane_graph() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_graph)
  return _internal_lane_graph();
}
inline void Lane::unsafe_arena_set_allocated_lane_graph(
    ::apollo::prediction::LaneGraph* lane_graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_);
  }
  _impl_.lane_graph_ = lane_graph;
  if (lane_graph) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Lane.lane_graph)
}
inline ::apollo::prediction::LaneGraph* Lane::release_lane_graph() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_;
  _impl_.lane_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::unsafe_arena_release_lane_graph() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_graph)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_;
  _impl_.lane_graph_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::_internal_mutable_lane_graph() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lane_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneGraph>(GetArenaForAllocation());
    _impl_.lane_graph_ = p;
  }
  return _impl_.lane_graph_;
}
inline ::apollo::prediction::LaneGraph* Lane::mutable_lane_graph() {
  ::apollo::prediction::LaneGraph* _msg = _internal_mutable_lane_graph();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_graph)
  return _msg;
}
inline void Lane::set_allocated_lane_graph(::apollo::prediction::LaneGraph* lane_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_);
  }
  if (lane_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_graph));
    if (message_arena != submessage_arena) {
      lane_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_graph, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lane_graph_ = lane_graph;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_graph)
}

// optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
inline bool Lane::_internal_has_lane_graph_ordered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_graph_ordered_ != nullptr);
  return value;
}
inline bool Lane::has_lane_graph_ordered() const {
  return _internal_has_lane_graph_ordered();
}
inline const ::apollo::prediction::LaneGraph& Lane::_internal_lane_graph_ordered() const {
  const ::apollo::prediction::LaneGraph* p = _impl_.lane_graph_ordered_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneGraph&>(
      ::apollo::prediction::_LaneGraph_default_instance_);
}
inline const ::apollo::prediction::LaneGraph& Lane::lane_graph_ordered() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.lane_graph_ordered)
  return _internal_lane_graph_ordered();
}
inline void Lane::unsafe_arena_set_allocated_lane_graph_ordered(
    ::apollo::prediction::LaneGraph* lane_graph_ordered) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_ordered_);
  }
  _impl_.lane_graph_ordered_ = lane_graph_ordered;
  if (lane_graph_ordered) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Lane.lane_graph_ordered)
}
inline ::apollo::prediction::LaneGraph* Lane::release_lane_graph_ordered() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_ordered_;
  _impl_.lane_graph_ordered_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::unsafe_arena_release_lane_graph_ordered() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Lane.lane_graph_ordered)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::LaneGraph* temp = _impl_.lane_graph_ordered_;
  _impl_.lane_graph_ordered_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneGraph* Lane::_internal_mutable_lane_graph_ordered() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.lane_graph_ordered_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneGraph>(GetArenaForAllocation());
    _impl_.lane_graph_ordered_ = p;
  }
  return _impl_.lane_graph_ordered_;
}
inline ::apollo::prediction::LaneGraph* Lane::mutable_lane_graph_ordered() {
  ::apollo::prediction::LaneGraph* _msg = _internal_mutable_lane_graph_ordered();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Lane.lane_graph_ordered)
  return _msg;
}
inline void Lane::set_allocated_lane_graph_ordered(::apollo::prediction::LaneGraph* lane_graph_ordered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_graph_ordered_);
  }
  if (lane_graph_ordered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_graph_ordered));
    if (message_arena != submessage_arena) {
      lane_graph_ordered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_graph_ordered, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lane_graph_ordered_ = lane_graph_ordered;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Lane.lane_graph_ordered)
}

// optional double label_update_time_delta = 26;
inline bool Lane::_internal_has_label_update_time_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Lane::has_label_update_time_delta() const {
  return _internal_has_label_update_time_delta();
}
inline void Lane::clear_label_update_time_delta() {
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Lane::_internal_label_update_time_delta() const {
  return _impl_.label_update_time_delta_;
}
inline double Lane::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Lane.label_update_time_delta)
  return _internal_label_update_time_delta();
}
inline void Lane::_internal_set_label_update_time_delta(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.label_update_time_delta_ = value;
}
inline void Lane::set_label_update_time_delta(double value) {
  _internal_set_label_update_time_delta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Lane.label_update_time_delta)
}

// -------------------------------------------------------------------

// LaneFeature

// optional string lane_id = 1;
inline bool LaneFeature::_internal_has_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_id() const {
  return _internal_has_lane_id();
}
inline void LaneFeature::clear_lane_id() {
  _impl_.lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_id)
  return _internal_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaneFeature::set_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_id)
}
inline std::string* LaneFeature::mutable_lane_id() {
  std::string* _s = _internal_mutable_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneFeature.lane_id)
  return _s;
}
inline const std::string& LaneFeature::_internal_lane_id() const {
  return _impl_.lane_id_.Get();
}
inline void LaneFeature::_internal_set_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaneFeature::_internal_mutable_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaneFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneFeature.lane_id)
  if (!_internal_has_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LaneFeature::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_id_.SetAllocated(lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneFeature.lane_id)
}

// optional uint32 lane_turn_type = 2;
inline bool LaneFeature::_internal_has_lane_turn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_turn_type() const {
  return _internal_has_lane_turn_type();
}
inline void LaneFeature::clear_lane_turn_type() {
  _impl_.lane_turn_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t LaneFeature::_internal_lane_turn_type() const {
  return _impl_.lane_turn_type_;
}
inline uint32_t LaneFeature::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_turn_type)
  return _internal_lane_turn_type();
}
inline void LaneFeature::_internal_set_lane_turn_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.lane_turn_type_ = value;
}
inline void LaneFeature::set_lane_turn_type(uint32_t value) {
  _internal_set_lane_turn_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_turn_type)
}

// optional double lane_s = 3;
inline bool LaneFeature::_internal_has_lane_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_s() const {
  return _internal_has_lane_s();
}
inline void LaneFeature::clear_lane_s() {
  _impl_.lane_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaneFeature::_internal_lane_s() const {
  return _impl_.lane_s_;
}
inline double LaneFeature::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_s)
  return _internal_lane_s();
}
inline void LaneFeature::_internal_set_lane_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_s_ = value;
}
inline void LaneFeature::set_lane_s(double value) {
  _internal_set_lane_s(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_s)
}

// optional double lane_l = 4;
inline bool LaneFeature::_internal_has_lane_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_l() const {
  return _internal_has_lane_l();
}
inline void LaneFeature::clear_lane_l() {
  _impl_.lane_l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaneFeature::_internal_lane_l() const {
  return _impl_.lane_l_;
}
inline double LaneFeature::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_l)
  return _internal_lane_l();
}
inline void LaneFeature::_internal_set_lane_l(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_l_ = value;
}
inline void LaneFeature::set_lane_l(double value) {
  _internal_set_lane_l(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_l)
}

// optional double angle_diff = 5;
inline bool LaneFeature::_internal_has_angle_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneFeature::has_angle_diff() const {
  return _internal_has_angle_diff();
}
inline void LaneFeature::clear_angle_diff() {
  _impl_.angle_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double LaneFeature::_internal_angle_diff() const {
  return _impl_.angle_diff_;
}
inline double LaneFeature::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.angle_diff)
  return _internal_angle_diff();
}
inline void LaneFeature::_internal_set_angle_diff(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.angle_diff_ = value;
}
inline void LaneFeature::set_angle_diff(double value) {
  _internal_set_angle_diff(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.angle_diff)
}

// optional double dist_to_left_boundary = 6;
inline bool LaneFeature::_internal_has_dist_to_left_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneFeature::has_dist_to_left_boundary() const {
  return _internal_has_dist_to_left_boundary();
}
inline void LaneFeature::clear_dist_to_left_boundary() {
  _impl_.dist_to_left_boundary_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LaneFeature::_internal_dist_to_left_boundary() const {
  return _impl_.dist_to_left_boundary_;
}
inline double LaneFeature::dist_to_left_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_left_boundary)
  return _internal_dist_to_left_boundary();
}
inline void LaneFeature::_internal_set_dist_to_left_boundary(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dist_to_left_boundary_ = value;
}
inline void LaneFeature::set_dist_to_left_boundary(double value) {
  _internal_set_dist_to_left_boundary(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_left_boundary)
}

// optional double dist_to_right_boundary = 7;
inline bool LaneFeature::_internal_has_dist_to_right_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneFeature::has_dist_to_right_boundary() const {
  return _internal_has_dist_to_right_boundary();
}
inline void LaneFeature::clear_dist_to_right_boundary() {
  _impl_.dist_to_right_boundary_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LaneFeature::_internal_dist_to_right_boundary() const {
  return _impl_.dist_to_right_boundary_;
}
inline double LaneFeature::dist_to_right_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.dist_to_right_boundary)
  return _internal_dist_to_right_boundary();
}
inline void LaneFeature::_internal_set_dist_to_right_boundary(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dist_to_right_boundary_ = value;
}
inline void LaneFeature::set_dist_to_right_boundary(double value) {
  _internal_set_dist_to_right_boundary(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.dist_to_right_boundary)
}

// optional double lane_heading = 8;
inline bool LaneFeature::_internal_has_lane_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_heading() const {
  return _internal_has_lane_heading();
}
inline void LaneFeature::clear_lane_heading() {
  _impl_.lane_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double LaneFeature::_internal_lane_heading() const {
  return _impl_.lane_heading_;
}
inline double LaneFeature::lane_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_heading)
  return _internal_lane_heading();
}
inline void LaneFeature::_internal_set_lane_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lane_heading_ = value;
}
inline void LaneFeature::set_lane_heading(double value) {
  _internal_set_lane_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_heading)
}

// optional .apollo.hdmap.Lane.LaneType lane_type = 9;
inline bool LaneFeature::_internal_has_lane_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LaneFeature::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void LaneFeature::clear_lane_type() {
  _impl_.lane_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::hdmap::Lane_LaneType LaneFeature::_internal_lane_type() const {
  return static_cast< ::apollo::hdmap::Lane_LaneType >(_impl_.lane_type_);
}
inline ::apollo::hdmap::Lane_LaneType LaneFeature::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneFeature.lane_type)
  return _internal_lane_type();
}
inline void LaneFeature::_internal_set_lane_type(::apollo::hdmap::Lane_LaneType value) {
  assert(::apollo::hdmap::Lane_LaneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lane_type_ = value;
}
inline void LaneFeature::set_lane_type(::apollo::hdmap::Lane_LaneType value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneFeature.lane_type)
}

// -------------------------------------------------------------------

// JunctionExit

// optional string exit_lane_id = 1;
inline bool JunctionExit::_internal_has_exit_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JunctionExit::has_exit_lane_id() const {
  return _internal_has_exit_lane_id();
}
inline void JunctionExit::clear_exit_lane_id() {
  _impl_.exit_lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JunctionExit::exit_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionExit.exit_lane_id)
  return _internal_exit_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JunctionExit::set_exit_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.exit_lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionExit.exit_lane_id)
}
inline std::string* JunctionExit::mutable_exit_lane_id() {
  std::string* _s = _internal_mutable_exit_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionExit.exit_lane_id)
  return _s;
}
inline const std::string& JunctionExit::_internal_exit_lane_id() const {
  return _impl_.exit_lane_id_.Get();
}
inline void JunctionExit::_internal_set_exit_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exit_lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JunctionExit::_internal_mutable_exit_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.exit_lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JunctionExit::release_exit_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.JunctionExit.exit_lane_id)
  if (!_internal_has_exit_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.exit_lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exit_lane_id_.IsDefault()) {
    _impl_.exit_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JunctionExit::set_allocated_exit_lane_id(std::string* exit_lane_id) {
  if (exit_lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.exit_lane_id_.SetAllocated(exit_lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exit_lane_id_.IsDefault()) {
    _impl_.exit_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.JunctionExit.exit_lane_id)
}

// optional .apollo.common.Point3D exit_position = 2;
inline bool JunctionExit::_internal_has_exit_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exit_position_ != nullptr);
  return value;
}
inline bool JunctionExit::has_exit_position() const {
  return _internal_has_exit_position();
}
inline const ::apollo::common::Point3D& JunctionExit::_internal_exit_position() const {
  const ::apollo::common::Point3D* p = _impl_.exit_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& JunctionExit::exit_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionExit.exit_position)
  return _internal_exit_position();
}
inline void JunctionExit::unsafe_arena_set_allocated_exit_position(
    ::apollo::common::Point3D* exit_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exit_position_);
  }
  _impl_.exit_position_ = exit_position;
  if (exit_position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.JunctionExit.exit_position)
}
inline ::apollo::common::Point3D* JunctionExit::release_exit_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.exit_position_;
  _impl_.exit_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* JunctionExit::unsafe_arena_release_exit_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.JunctionExit.exit_position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.exit_position_;
  _impl_.exit_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* JunctionExit::_internal_mutable_exit_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.exit_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.exit_position_ = p;
  }
  return _impl_.exit_position_;
}
inline ::apollo::common::Point3D* JunctionExit::mutable_exit_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_exit_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionExit.exit_position)
  return _msg;
}
inline void JunctionExit::set_allocated_exit_position(::apollo::common::Point3D* exit_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exit_position_);
  }
  if (exit_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exit_position));
    if (message_arena != submessage_arena) {
      exit_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.exit_position_ = exit_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.JunctionExit.exit_position)
}

// optional double exit_heading = 3;
inline bool JunctionExit::_internal_has_exit_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JunctionExit::has_exit_heading() const {
  return _internal_has_exit_heading();
}
inline void JunctionExit::clear_exit_heading() {
  _impl_.exit_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double JunctionExit::_internal_exit_heading() const {
  return _impl_.exit_heading_;
}
inline double JunctionExit::exit_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionExit.exit_heading)
  return _internal_exit_heading();
}
inline void JunctionExit::_internal_set_exit_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.exit_heading_ = value;
}
inline void JunctionExit::set_exit_heading(double value) {
  _internal_set_exit_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionExit.exit_heading)
}

// optional double exit_width = 4;
inline bool JunctionExit::_internal_has_exit_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JunctionExit::has_exit_width() const {
  return _internal_has_exit_width();
}
inline void JunctionExit::clear_exit_width() {
  _impl_.exit_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double JunctionExit::_internal_exit_width() const {
  return _impl_.exit_width_;
}
inline double JunctionExit::exit_width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionExit.exit_width)
  return _internal_exit_width();
}
inline void JunctionExit::_internal_set_exit_width(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.exit_width_ = value;
}
inline void JunctionExit::set_exit_width(double value) {
  _internal_set_exit_width(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionExit.exit_width)
}

// -------------------------------------------------------------------

// JunctionFeature

// optional string junction_id = 1;
inline bool JunctionFeature::_internal_has_junction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JunctionFeature::has_junction_id() const {
  return _internal_has_junction_id();
}
inline void JunctionFeature::clear_junction_id() {
  _impl_.junction_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JunctionFeature::junction_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_id)
  return _internal_junction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JunctionFeature::set_junction_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.junction_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.junction_id)
}
inline std::string* JunctionFeature::mutable_junction_id() {
  std::string* _s = _internal_mutable_junction_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionFeature.junction_id)
  return _s;
}
inline const std::string& JunctionFeature::_internal_junction_id() const {
  return _impl_.junction_id_.Get();
}
inline void JunctionFeature::_internal_set_junction_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.junction_id_.Set(value, GetArenaForAllocation());
}
inline std::string* JunctionFeature::_internal_mutable_junction_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.junction_id_.Mutable(GetArenaForAllocation());
}
inline std::string* JunctionFeature::release_junction_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.JunctionFeature.junction_id)
  if (!_internal_has_junction_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.junction_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.junction_id_.IsDefault()) {
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JunctionFeature::set_allocated_junction_id(std::string* junction_id) {
  if (junction_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.junction_id_.SetAllocated(junction_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.junction_id_.IsDefault()) {
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.JunctionFeature.junction_id)
}

// optional double junction_range = 2;
inline bool JunctionFeature::_internal_has_junction_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JunctionFeature::has_junction_range() const {
  return _internal_has_junction_range();
}
inline void JunctionFeature::clear_junction_range() {
  _impl_.junction_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double JunctionFeature::_internal_junction_range() const {
  return _impl_.junction_range_;
}
inline double JunctionFeature::junction_range() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_range)
  return _internal_junction_range();
}
inline void JunctionFeature::_internal_set_junction_range(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.junction_range_ = value;
}
inline void JunctionFeature::set_junction_range(double value) {
  _internal_set_junction_range(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.junction_range)
}

// optional .apollo.prediction.LaneFeature enter_lane = 3;
inline bool JunctionFeature::_internal_has_enter_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enter_lane_ != nullptr);
  return value;
}
inline bool JunctionFeature::has_enter_lane() const {
  return _internal_has_enter_lane();
}
inline void JunctionFeature::clear_enter_lane() {
  if (_impl_.enter_lane_ != nullptr) _impl_.enter_lane_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::LaneFeature& JunctionFeature::_internal_enter_lane() const {
  const ::apollo::prediction::LaneFeature* p = _impl_.enter_lane_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::LaneFeature&>(
      ::apollo::prediction::_LaneFeature_default_instance_);
}
inline const ::apollo::prediction::LaneFeature& JunctionFeature::enter_lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.enter_lane)
  return _internal_enter_lane();
}
inline void JunctionFeature::unsafe_arena_set_allocated_enter_lane(
    ::apollo::prediction::LaneFeature* enter_lane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enter_lane_);
  }
  _impl_.enter_lane_ = enter_lane;
  if (enter_lane) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.JunctionFeature.enter_lane)
}
inline ::apollo::prediction::LaneFeature* JunctionFeature::release_enter_lane() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneFeature* temp = _impl_.enter_lane_;
  _impl_.enter_lane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::LaneFeature* JunctionFeature::unsafe_arena_release_enter_lane() {
  // @@protoc_insertion_point(field_release:apollo.prediction.JunctionFeature.enter_lane)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::LaneFeature* temp = _impl_.enter_lane_;
  _impl_.enter_lane_ = nullptr;
  return temp;
}
inline ::apollo::prediction::LaneFeature* JunctionFeature::_internal_mutable_enter_lane() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.enter_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneFeature>(GetArenaForAllocation());
    _impl_.enter_lane_ = p;
  }
  return _impl_.enter_lane_;
}
inline ::apollo::prediction::LaneFeature* JunctionFeature::mutable_enter_lane() {
  ::apollo::prediction::LaneFeature* _msg = _internal_mutable_enter_lane();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionFeature.enter_lane)
  return _msg;
}
inline void JunctionFeature::set_allocated_enter_lane(::apollo::prediction::LaneFeature* enter_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enter_lane_;
  }
  if (enter_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enter_lane);
    if (message_arena != submessage_arena) {
      enter_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enter_lane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.enter_lane_ = enter_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.JunctionFeature.enter_lane)
}

// repeated .apollo.prediction.JunctionExit junction_exit = 4;
inline int JunctionFeature::_internal_junction_exit_size() const {
  return _impl_.junction_exit_.size();
}
inline int JunctionFeature::junction_exit_size() const {
  return _internal_junction_exit_size();
}
inline void JunctionFeature::clear_junction_exit() {
  _impl_.junction_exit_.Clear();
}
inline ::apollo::prediction::JunctionExit* JunctionFeature::mutable_junction_exit(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionFeature.junction_exit)
  return _impl_.junction_exit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::JunctionExit >*
JunctionFeature::mutable_junction_exit() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.JunctionFeature.junction_exit)
  return &_impl_.junction_exit_;
}
inline const ::apollo::prediction::JunctionExit& JunctionFeature::_internal_junction_exit(int index) const {
  return _impl_.junction_exit_.Get(index);
}
inline const ::apollo::prediction::JunctionExit& JunctionFeature::junction_exit(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_exit)
  return _internal_junction_exit(index);
}
inline ::apollo::prediction::JunctionExit* JunctionFeature::_internal_add_junction_exit() {
  return _impl_.junction_exit_.Add();
}
inline ::apollo::prediction::JunctionExit* JunctionFeature::add_junction_exit() {
  ::apollo::prediction::JunctionExit* _add = _internal_add_junction_exit();
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.junction_exit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::JunctionExit >&
JunctionFeature::junction_exit() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.JunctionFeature.junction_exit)
  return _impl_.junction_exit_;
}

// repeated double junction_mlp_feature = 5;
inline int JunctionFeature::_internal_junction_mlp_feature_size() const {
  return _impl_.junction_mlp_feature_.size();
}
inline int JunctionFeature::junction_mlp_feature_size() const {
  return _internal_junction_mlp_feature_size();
}
inline void JunctionFeature::clear_junction_mlp_feature() {
  _impl_.junction_mlp_feature_.Clear();
}
inline double JunctionFeature::_internal_junction_mlp_feature(int index) const {
  return _impl_.junction_mlp_feature_.Get(index);
}
inline double JunctionFeature::junction_mlp_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_mlp_feature)
  return _internal_junction_mlp_feature(index);
}
inline void JunctionFeature::set_junction_mlp_feature(int index, double value) {
  _impl_.junction_mlp_feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.junction_mlp_feature)
}
inline void JunctionFeature::_internal_add_junction_mlp_feature(double value) {
  _impl_.junction_mlp_feature_.Add(value);
}
inline void JunctionFeature::add_junction_mlp_feature(double value) {
  _internal_add_junction_mlp_feature(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.junction_mlp_feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JunctionFeature::_internal_junction_mlp_feature() const {
  return _impl_.junction_mlp_feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JunctionFeature::junction_mlp_feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.JunctionFeature.junction_mlp_feature)
  return _internal_junction_mlp_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JunctionFeature::_internal_mutable_junction_mlp_feature() {
  return &_impl_.junction_mlp_feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JunctionFeature::mutable_junction_mlp_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.JunctionFeature.junction_mlp_feature)
  return _internal_mutable_junction_mlp_feature();
}

// repeated int32 junction_mlp_label = 6;
inline int JunctionFeature::_internal_junction_mlp_label_size() const {
  return _impl_.junction_mlp_label_.size();
}
inline int JunctionFeature::junction_mlp_label_size() const {
  return _internal_junction_mlp_label_size();
}
inline void JunctionFeature::clear_junction_mlp_label() {
  _impl_.junction_mlp_label_.Clear();
}
inline int32_t JunctionFeature::_internal_junction_mlp_label(int index) const {
  return _impl_.junction_mlp_label_.Get(index);
}
inline int32_t JunctionFeature::junction_mlp_label(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_mlp_label)
  return _internal_junction_mlp_label(index);
}
inline void JunctionFeature::set_junction_mlp_label(int index, int32_t value) {
  _impl_.junction_mlp_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.junction_mlp_label)
}
inline void JunctionFeature::_internal_add_junction_mlp_label(int32_t value) {
  _impl_.junction_mlp_label_.Add(value);
}
inline void JunctionFeature::add_junction_mlp_label(int32_t value) {
  _internal_add_junction_mlp_label(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.junction_mlp_label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
JunctionFeature::_internal_junction_mlp_label() const {
  return _impl_.junction_mlp_label_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
JunctionFeature::junction_mlp_label() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.JunctionFeature.junction_mlp_label)
  return _internal_junction_mlp_label();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
JunctionFeature::_internal_mutable_junction_mlp_label() {
  return &_impl_.junction_mlp_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
JunctionFeature::mutable_junction_mlp_label() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.JunctionFeature.junction_mlp_label)
  return _internal_mutable_junction_mlp_label();
}

// repeated double junction_mlp_probability = 7;
inline int JunctionFeature::_internal_junction_mlp_probability_size() const {
  return _impl_.junction_mlp_probability_.size();
}
inline int JunctionFeature::junction_mlp_probability_size() const {
  return _internal_junction_mlp_probability_size();
}
inline void JunctionFeature::clear_junction_mlp_probability() {
  _impl_.junction_mlp_probability_.Clear();
}
inline double JunctionFeature::_internal_junction_mlp_probability(int index) const {
  return _impl_.junction_mlp_probability_.Get(index);
}
inline double JunctionFeature::junction_mlp_probability(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.junction_mlp_probability)
  return _internal_junction_mlp_probability(index);
}
inline void JunctionFeature::set_junction_mlp_probability(int index, double value) {
  _impl_.junction_mlp_probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.junction_mlp_probability)
}
inline void JunctionFeature::_internal_add_junction_mlp_probability(double value) {
  _impl_.junction_mlp_probability_.Add(value);
}
inline void JunctionFeature::add_junction_mlp_probability(double value) {
  _internal_add_junction_mlp_probability(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.junction_mlp_probability)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JunctionFeature::_internal_junction_mlp_probability() const {
  return _impl_.junction_mlp_probability_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JunctionFeature::junction_mlp_probability() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.JunctionFeature.junction_mlp_probability)
  return _internal_junction_mlp_probability();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JunctionFeature::_internal_mutable_junction_mlp_probability() {
  return &_impl_.junction_mlp_probability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JunctionFeature::mutable_junction_mlp_probability() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.JunctionFeature.junction_mlp_probability)
  return _internal_mutable_junction_mlp_probability();
}

// repeated string start_lane_id = 8;
inline int JunctionFeature::_internal_start_lane_id_size() const {
  return _impl_.start_lane_id_.size();
}
inline int JunctionFeature::start_lane_id_size() const {
  return _internal_start_lane_id_size();
}
inline void JunctionFeature::clear_start_lane_id() {
  _impl_.start_lane_id_.Clear();
}
inline std::string* JunctionFeature::add_start_lane_id() {
  std::string* _s = _internal_add_start_lane_id();
  // @@protoc_insertion_point(field_add_mutable:apollo.prediction.JunctionFeature.start_lane_id)
  return _s;
}
inline const std::string& JunctionFeature::_internal_start_lane_id(int index) const {
  return _impl_.start_lane_id_.Get(index);
}
inline const std::string& JunctionFeature::start_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.JunctionFeature.start_lane_id)
  return _internal_start_lane_id(index);
}
inline std::string* JunctionFeature::mutable_start_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.JunctionFeature.start_lane_id)
  return _impl_.start_lane_id_.Mutable(index);
}
inline void JunctionFeature::set_start_lane_id(int index, const std::string& value) {
  _impl_.start_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::set_start_lane_id(int index, std::string&& value) {
  _impl_.start_lane_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::set_start_lane_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.start_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::set_start_lane_id(int index, const char* value, size_t size) {
  _impl_.start_lane_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.JunctionFeature.start_lane_id)
}
inline std::string* JunctionFeature::_internal_add_start_lane_id() {
  return _impl_.start_lane_id_.Add();
}
inline void JunctionFeature::add_start_lane_id(const std::string& value) {
  _impl_.start_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::add_start_lane_id(std::string&& value) {
  _impl_.start_lane_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::add_start_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.start_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.prediction.JunctionFeature.start_lane_id)
}
inline void JunctionFeature::add_start_lane_id(const char* value, size_t size) {
  _impl_.start_lane_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.prediction.JunctionFeature.start_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JunctionFeature::start_lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.JunctionFeature.start_lane_id)
  return _impl_.start_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JunctionFeature::mutable_start_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.JunctionFeature.start_lane_id)
  return &_impl_.start_lane_id_;
}

// -------------------------------------------------------------------

// ObstaclePriority

// optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
inline bool ObstaclePriority::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstaclePriority::has_priority() const {
  return _internal_has_priority();
}
inline void ObstaclePriority::clear_priority() {
  _impl_.priority_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstaclePriority::_internal_priority() const {
  return static_cast< ::apollo::prediction::ObstaclePriority_Priority >(_impl_.priority_);
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstaclePriority::priority() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstaclePriority.priority)
  return _internal_priority();
}
inline void ObstaclePriority::_internal_set_priority(::apollo::prediction::ObstaclePriority_Priority value) {
  assert(::apollo::prediction::ObstaclePriority_Priority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.priority_ = value;
}
inline void ObstaclePriority::set_priority(::apollo::prediction::ObstaclePriority_Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstaclePriority.priority)
}

// -------------------------------------------------------------------

// ObstacleInteractiveTag

// optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
inline bool ObstacleInteractiveTag::_internal_has_interactive_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleInteractiveTag::has_interactive_tag() const {
  return _internal_has_interactive_tag();
}
inline void ObstacleInteractiveTag::clear_interactive_tag() {
  _impl_.interactive_tag_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::_internal_interactive_tag() const {
  return static_cast< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag >(_impl_.interactive_tag_);
}
inline ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::interactive_tag() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleInteractiveTag.interactive_tag)
  return _internal_interactive_tag();
}
inline void ObstacleInteractiveTag::_internal_set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  assert(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.interactive_tag_ = value;
}
inline void ObstacleInteractiveTag::set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  _internal_set_interactive_tag(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleInteractiveTag.interactive_tag)
}

// -------------------------------------------------------------------

// Trajectory

// optional double probability = 1;
inline bool Trajectory::_internal_has_probability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Trajectory::has_probability() const {
  return _internal_has_probability();
}
inline void Trajectory::clear_probability() {
  _impl_.probability_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Trajectory::_internal_probability() const {
  return _impl_.probability_;
}
inline double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Trajectory.probability)
  return _internal_probability();
}
inline void Trajectory::_internal_set_probability(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.probability_ = value;
}
inline void Trajectory::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Trajectory.probability)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::_internal_trajectory_point_size() const {
  return _impl_.trajectory_point_.size();
}
inline int Trajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Trajectory.trajectory_point)
  return _impl_.trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Trajectory.trajectory_point)
  return &_impl_.trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& Trajectory::_internal_trajectory_point(int index) const {
  return _impl_.trajectory_point_.Get(index);
}
inline const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Trajectory.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::apollo::common::TrajectoryPoint* Trajectory::_internal_add_trajectory_point() {
  return _impl_.trajectory_point_.Add();
}
inline ::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  ::apollo::common::TrajectoryPoint* _add = _internal_add_trajectory_point();
  // @@protoc_insertion_point(field_add:apollo.prediction.Trajectory.trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Trajectory.trajectory_point)
  return _impl_.trajectory_point_;
}

// -------------------------------------------------------------------

// Feature

// optional int32 id = 1;
inline bool Feature::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Feature::has_id() const {
  return _internal_has_id();
}
inline void Feature::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t Feature::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Feature::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.id)
  return _internal_id();
}
inline void Feature::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.id_ = value;
}
inline void Feature::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.id)
}

// repeated .apollo.common.Point3D polygon_point = 30;
inline int Feature::_internal_polygon_point_size() const {
  return _impl_.polygon_point_.size();
}
inline int Feature::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline ::apollo::common::Point3D* Feature::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.polygon_point)
  return _impl_.polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
Feature::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.polygon_point)
  return &_impl_.polygon_point_;
}
inline const ::apollo::common::Point3D& Feature::_internal_polygon_point(int index) const {
  return _impl_.polygon_point_.Get(index);
}
inline const ::apollo::common::Point3D& Feature::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::common::Point3D* Feature::_internal_add_polygon_point() {
  return _impl_.polygon_point_.Add();
}
inline ::apollo::common::Point3D* Feature::add_polygon_point() {
  ::apollo::common::Point3D* _add = _internal_add_polygon_point();
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.polygon_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
Feature::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.polygon_point)
  return _impl_.polygon_point_;
}

// optional .apollo.common.Point3D position = 2;
inline bool Feature::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Feature::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& Feature::_internal_position() const {
  const ::apollo::common::Point3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.position)
  return _internal_position();
}
inline void Feature::unsafe_arena_set_allocated_position(
    ::apollo::common::Point3D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.position)
}
inline ::apollo::common::Point3D* Feature::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::Point3D* Feature::mutable_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.position)
  return _msg;
}
inline void Feature::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.position)
}

// optional .apollo.common.Point3D front_position = 27;
inline bool Feature::_internal_has_front_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.front_position_ != nullptr);
  return value;
}
inline bool Feature::has_front_position() const {
  return _internal_has_front_position();
}
inline const ::apollo::common::Point3D& Feature::_internal_front_position() const {
  const ::apollo::common::Point3D* p = _impl_.front_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::front_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.front_position)
  return _internal_front_position();
}
inline void Feature::unsafe_arena_set_allocated_front_position(
    ::apollo::common::Point3D* front_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_position_);
  }
  _impl_.front_position_ = front_position;
  if (front_position) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.front_position)
}
inline ::apollo::common::Point3D* Feature::release_front_position() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::common::Point3D* temp = _impl_.front_position_;
  _impl_.front_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_front_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.front_position)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::common::Point3D* temp = _impl_.front_position_;
  _impl_.front_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_front_position() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.front_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.front_position_ = p;
  }
  return _impl_.front_position_;
}
inline ::apollo::common::Point3D* Feature::mutable_front_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_front_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.front_position)
  return _msg;
}
inline void Feature::set_allocated_front_position(::apollo::common::Point3D* front_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_position_);
  }
  if (front_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_position));
    if (message_arena != submessage_arena) {
      front_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.front_position_ = front_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.front_position)
}

// optional .apollo.common.Point3D velocity = 3;
inline bool Feature::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool Feature::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& Feature::_internal_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity)
  return _internal_velocity();
}
inline void Feature::unsafe_arena_set_allocated_velocity(
    ::apollo::common::Point3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.velocity)
}
inline ::apollo::common::Point3D* Feature::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.velocity)
  return _msg;
}
inline void Feature::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.velocity)
}

// optional .apollo.common.Point3D raw_velocity = 28;
inline bool Feature::_internal_has_raw_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.raw_velocity_ != nullptr);
  return value;
}
inline bool Feature::has_raw_velocity() const {
  return _internal_has_raw_velocity();
}
inline const ::apollo::common::Point3D& Feature::_internal_raw_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.raw_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::raw_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.raw_velocity)
  return _internal_raw_velocity();
}
inline void Feature::unsafe_arena_set_allocated_raw_velocity(
    ::apollo::common::Point3D* raw_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raw_velocity_);
  }
  _impl_.raw_velocity_ = raw_velocity;
  if (raw_velocity) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.raw_velocity)
}
inline ::apollo::common::Point3D* Feature::release_raw_velocity() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::common::Point3D* temp = _impl_.raw_velocity_;
  _impl_.raw_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_raw_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.raw_velocity)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::apollo::common::Point3D* temp = _impl_.raw_velocity_;
  _impl_.raw_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_raw_velocity() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.raw_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.raw_velocity_ = p;
  }
  return _impl_.raw_velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_raw_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_raw_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.raw_velocity)
  return _msg;
}
inline void Feature::set_allocated_raw_velocity(::apollo::common::Point3D* raw_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raw_velocity_);
  }
  if (raw_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_velocity));
    if (message_arena != submessage_arena) {
      raw_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.raw_velocity_ = raw_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.raw_velocity)
}

// optional .apollo.common.Point3D acceleration = 4;
inline bool Feature::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool Feature::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::apollo::common::Point3D& Feature::_internal_acceleration() const {
  const ::apollo::common::Point3D* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acceleration)
  return _internal_acceleration();
}
inline void Feature::unsafe_arena_set_allocated_acceleration(
    ::apollo::common::Point3D* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.acceleration)
}
inline ::apollo::common::Point3D* Feature::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.acceleration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_acceleration() {
  ::apollo::common::Point3D* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.acceleration)
  return _msg;
}
inline void Feature::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.acceleration)
}

// optional double velocity_heading = 5;
inline bool Feature::_internal_has_velocity_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Feature::has_velocity_heading() const {
  return _internal_has_velocity_heading();
}
inline void Feature::clear_velocity_heading() {
  _impl_.velocity_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double Feature::_internal_velocity_heading() const {
  return _impl_.velocity_heading_;
}
inline double Feature::velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.velocity_heading)
  return _internal_velocity_heading();
}
inline void Feature::_internal_set_velocity_heading(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.velocity_heading_ = value;
}
inline void Feature::set_velocity_heading(double value) {
  _internal_set_velocity_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.velocity_heading)
}

// optional double speed = 6;
inline bool Feature::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Feature::has_speed() const {
  return _internal_has_speed();
}
inline void Feature::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double Feature::_internal_speed() const {
  return _impl_.speed_;
}
inline double Feature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.speed)
  return _internal_speed();
}
inline void Feature::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.speed_ = value;
}
inline void Feature::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.speed)
}

// optional double acc = 7;
inline bool Feature::_internal_has_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Feature::has_acc() const {
  return _internal_has_acc();
}
inline void Feature::clear_acc() {
  _impl_.acc_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double Feature::_internal_acc() const {
  return _impl_.acc_;
}
inline double Feature::acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.acc)
  return _internal_acc();
}
inline void Feature::_internal_set_acc(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.acc_ = value;
}
inline void Feature::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.acc)
}

// optional double theta = 8;
inline bool Feature::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Feature::has_theta() const {
  return _internal_has_theta();
}
inline void Feature::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double Feature::_internal_theta() const {
  return _impl_.theta_;
}
inline double Feature::theta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.theta)
  return _internal_theta();
}
inline void Feature::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.theta_ = value;
}
inline void Feature::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.theta)
}

// optional double length = 9;
inline bool Feature::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Feature::has_length() const {
  return _internal_has_length();
}
inline void Feature::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double Feature::_internal_length() const {
  return _impl_.length_;
}
inline double Feature::length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.length)
  return _internal_length();
}
inline void Feature::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.length_ = value;
}
inline void Feature::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.length)
}

// optional double width = 10;
inline bool Feature::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Feature::has_width() const {
  return _internal_has_width();
}
inline void Feature::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double Feature::_internal_width() const {
  return _impl_.width_;
}
inline double Feature::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.width)
  return _internal_width();
}
inline void Feature::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.width_ = value;
}
inline void Feature::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.width)
}

// optional double height = 11;
inline bool Feature::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Feature::has_height() const {
  return _internal_has_height();
}
inline void Feature::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double Feature::_internal_height() const {
  return _impl_.height_;
}
inline double Feature::height() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.height)
  return _internal_height();
}
inline void Feature::_internal_set_height(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.height_ = value;
}
inline void Feature::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.height)
}

// optional double tracking_time = 12;
inline bool Feature::_internal_has_tracking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Feature::has_tracking_time() const {
  return _internal_has_tracking_time();
}
inline void Feature::clear_tracking_time() {
  _impl_.tracking_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double Feature::_internal_tracking_time() const {
  return _impl_.tracking_time_;
}
inline double Feature::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.tracking_time)
  return _internal_tracking_time();
}
inline void Feature::_internal_set_tracking_time(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tracking_time_ = value;
}
inline void Feature::set_tracking_time(double value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.tracking_time)
}

// optional double timestamp = 13;
inline bool Feature::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Feature::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Feature::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double Feature::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double Feature::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.timestamp)
  return _internal_timestamp();
}
inline void Feature::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.timestamp_ = value;
}
inline void Feature::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.timestamp)
}

// optional .apollo.prediction.Lane lane = 14;
inline bool Feature::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_ != nullptr);
  return value;
}
inline bool Feature::has_lane() const {
  return _internal_has_lane();
}
inline void Feature::clear_lane() {
  if (_impl_.lane_ != nullptr) _impl_.lane_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::prediction::Lane& Feature::_internal_lane() const {
  const ::apollo::prediction::Lane* p = _impl_.lane_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::Lane&>(
      ::apollo::prediction::_Lane_default_instance_);
}
inline const ::apollo::prediction::Lane& Feature::lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.lane)
  return _internal_lane();
}
inline void Feature::unsafe_arena_set_allocated_lane(
    ::apollo::prediction::Lane* lane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_);
  }
  _impl_.lane_ = lane;
  if (lane) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.lane)
}
inline ::apollo::prediction::Lane* Feature::release_lane() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::Lane* temp = _impl_.lane_;
  _impl_.lane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::Lane* Feature::unsafe_arena_release_lane() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.lane)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::Lane* temp = _impl_.lane_;
  _impl_.lane_ = nullptr;
  return temp;
}
inline ::apollo::prediction::Lane* Feature::_internal_mutable_lane() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Lane>(GetArenaForAllocation());
    _impl_.lane_ = p;
  }
  return _impl_.lane_;
}
inline ::apollo::prediction::Lane* Feature::mutable_lane() {
  ::apollo::prediction::Lane* _msg = _internal_mutable_lane();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.lane)
  return _msg;
}
inline void Feature::set_allocated_lane(::apollo::prediction::Lane* lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_;
  }
  if (lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane);
    if (message_arena != submessage_arena) {
      lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lane_ = lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.lane)
}

// optional .apollo.prediction.JunctionFeature junction_feature = 26;
inline bool Feature::_internal_has_junction_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.junction_feature_ != nullptr);
  return value;
}
inline bool Feature::has_junction_feature() const {
  return _internal_has_junction_feature();
}
inline void Feature::clear_junction_feature() {
  if (_impl_.junction_feature_ != nullptr) _impl_.junction_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::prediction::JunctionFeature& Feature::_internal_junction_feature() const {
  const ::apollo::prediction::JunctionFeature* p = _impl_.junction_feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::JunctionFeature&>(
      ::apollo::prediction::_JunctionFeature_default_instance_);
}
inline const ::apollo::prediction::JunctionFeature& Feature::junction_feature() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.junction_feature)
  return _internal_junction_feature();
}
inline void Feature::unsafe_arena_set_allocated_junction_feature(
    ::apollo::prediction::JunctionFeature* junction_feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.junction_feature_);
  }
  _impl_.junction_feature_ = junction_feature;
  if (junction_feature) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.junction_feature)
}
inline ::apollo::prediction::JunctionFeature* Feature::release_junction_feature() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::prediction::JunctionFeature* temp = _impl_.junction_feature_;
  _impl_.junction_feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::JunctionFeature* Feature::unsafe_arena_release_junction_feature() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.junction_feature)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::prediction::JunctionFeature* temp = _impl_.junction_feature_;
  _impl_.junction_feature_ = nullptr;
  return temp;
}
inline ::apollo::prediction::JunctionFeature* Feature::_internal_mutable_junction_feature() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.junction_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::JunctionFeature>(GetArenaForAllocation());
    _impl_.junction_feature_ = p;
  }
  return _impl_.junction_feature_;
}
inline ::apollo::prediction::JunctionFeature* Feature::mutable_junction_feature() {
  ::apollo::prediction::JunctionFeature* _msg = _internal_mutable_junction_feature();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.junction_feature)
  return _msg;
}
inline void Feature::set_allocated_junction_feature(::apollo::prediction::JunctionFeature* junction_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.junction_feature_;
  }
  if (junction_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(junction_feature);
    if (message_arena != submessage_arena) {
      junction_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, junction_feature, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.junction_feature_ = junction_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.junction_feature)
}

// optional .apollo.common.Point3D t_position = 16;
inline bool Feature::_internal_has_t_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_position_ != nullptr);
  return value;
}
inline bool Feature::has_t_position() const {
  return _internal_has_t_position();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_position() const {
  const ::apollo::common::Point3D* p = _impl_.t_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_position)
  return _internal_t_position();
}
inline void Feature::unsafe_arena_set_allocated_t_position(
    ::apollo::common::Point3D* t_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_position_);
  }
  _impl_.t_position_ = t_position;
  if (t_position) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_position)
}
inline ::apollo::common::Point3D* Feature::release_t_position() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.t_position_;
  _impl_.t_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_position)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.t_position_;
  _impl_.t_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_position() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.t_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_position_ = p;
  }
  return _impl_.t_position_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_position)
  return _msg;
}
inline void Feature::set_allocated_t_position(::apollo::common::Point3D* t_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_position_);
  }
  if (t_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_position));
    if (message_arena != submessage_arena) {
      t_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.t_position_ = t_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_position)
}

// optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
inline bool Feature::_internal_has_t_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_velocity_ != nullptr);
  return value;
}
inline bool Feature::has_t_velocity() const {
  return _internal_has_t_velocity();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.t_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity)
  return _internal_t_velocity();
}
inline void Feature::unsafe_arena_set_allocated_t_velocity(
    ::apollo::common::Point3D* t_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_velocity_);
  }
  _impl_.t_velocity_ = t_velocity;
  if (t_velocity) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_velocity)
}
inline ::apollo::common::Point3D* Feature::release_t_velocity() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Point3D* temp = _impl_.t_velocity_;
  _impl_.t_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_velocity() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_velocity)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Point3D* temp = _impl_.t_velocity_;
  _impl_.t_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_velocity() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.t_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_velocity_ = p;
  }
  return _impl_.t_velocity_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_velocity)
  return _msg;
}
inline void Feature::set_allocated_t_velocity(::apollo::common::Point3D* t_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_velocity_);
  }
  if (t_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_velocity));
    if (message_arena != submessage_arena) {
      t_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.t_velocity_ = t_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_velocity)
}

// optional double t_velocity_heading = 18 [deprecated = true];
inline bool Feature::_internal_has_t_velocity_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Feature::has_t_velocity_heading() const {
  return _internal_has_t_velocity_heading();
}
inline void Feature::clear_t_velocity_heading() {
  _impl_.t_velocity_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double Feature::_internal_t_velocity_heading() const {
  return _impl_.t_velocity_heading_;
}
inline double Feature::t_velocity_heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_velocity_heading)
  return _internal_t_velocity_heading();
}
inline void Feature::_internal_set_t_velocity_heading(double value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.t_velocity_heading_ = value;
}
inline void Feature::set_t_velocity_heading(double value) {
  _internal_set_t_velocity_heading(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_velocity_heading)
}

// optional double t_speed = 19 [deprecated = true];
inline bool Feature::_internal_has_t_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Feature::has_t_speed() const {
  return _internal_has_t_speed();
}
inline void Feature::clear_t_speed() {
  _impl_.t_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double Feature::_internal_t_speed() const {
  return _impl_.t_speed_;
}
inline double Feature::t_speed() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_speed)
  return _internal_t_speed();
}
inline void Feature::_internal_set_t_speed(double value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.t_speed_ = value;
}
inline void Feature::set_t_speed(double value) {
  _internal_set_t_speed(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_speed)
}

// optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
inline bool Feature::_internal_has_t_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_acceleration_ != nullptr);
  return value;
}
inline bool Feature::has_t_acceleration() const {
  return _internal_has_t_acceleration();
}
inline const ::apollo::common::Point3D& Feature::_internal_t_acceleration() const {
  const ::apollo::common::Point3D* p = _impl_.t_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Feature::t_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acceleration)
  return _internal_t_acceleration();
}
inline void Feature::unsafe_arena_set_allocated_t_acceleration(
    ::apollo::common::Point3D* t_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_acceleration_);
  }
  _impl_.t_acceleration_ = t_acceleration;
  if (t_acceleration) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.t_acceleration)
}
inline ::apollo::common::Point3D* Feature::release_t_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Point3D* temp = _impl_.t_acceleration_;
  _impl_.t_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Feature::unsafe_arena_release_t_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.t_acceleration)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Point3D* temp = _impl_.t_acceleration_;
  _impl_.t_acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Feature::_internal_mutable_t_acceleration() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.t_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.t_acceleration_ = p;
  }
  return _impl_.t_acceleration_;
}
inline ::apollo::common::Point3D* Feature::mutable_t_acceleration() {
  ::apollo::common::Point3D* _msg = _internal_mutable_t_acceleration();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.t_acceleration)
  return _msg;
}
inline void Feature::set_allocated_t_acceleration(::apollo::common::Point3D* t_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_acceleration_);
  }
  if (t_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_acceleration));
    if (message_arena != submessage_arena) {
      t_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.t_acceleration_ = t_acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.t_acceleration)
}

// optional double t_acc = 21 [deprecated = true];
inline bool Feature::_internal_has_t_acc() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Feature::has_t_acc() const {
  return _internal_has_t_acc();
}
inline void Feature::clear_t_acc() {
  _impl_.t_acc_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double Feature::_internal_t_acc() const {
  return _impl_.t_acc_;
}
inline double Feature::t_acc() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.t_acc)
  return _internal_t_acc();
}
inline void Feature::_internal_set_t_acc(double value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.t_acc_ = value;
}
inline void Feature::set_t_acc(double value) {
  _internal_set_t_acc(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.t_acc)
}

// optional bool is_still = 22 [default = false];
inline bool Feature::_internal_has_is_still() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool Feature::has_is_still() const {
  return _internal_has_is_still();
}
inline void Feature::clear_is_still() {
  _impl_.is_still_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool Feature::_internal_is_still() const {
  return _impl_.is_still_;
}
inline bool Feature::is_still() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.is_still)
  return _internal_is_still();
}
inline void Feature::_internal_set_is_still(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.is_still_ = value;
}
inline void Feature::set_is_still(bool value) {
  _internal_set_is_still(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.is_still)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 23;
inline bool Feature::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Feature::has_type() const {
  return _internal_has_type();
}
inline void Feature::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::perception::PerceptionObstacle_Type Feature::_internal_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(_impl_.type_);
}
inline ::apollo::perception::PerceptionObstacle_Type Feature::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.type)
  return _internal_type();
}
inline void Feature::_internal_set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.type_ = value;
}
inline void Feature::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.type)
}

// optional double label_update_time_delta = 24;
inline bool Feature::_internal_has_label_update_time_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Feature::has_label_update_time_delta() const {
  return _internal_has_label_update_time_delta();
}
inline void Feature::clear_label_update_time_delta() {
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double Feature::_internal_label_update_time_delta() const {
  return _impl_.label_update_time_delta_;
}
inline double Feature::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.label_update_time_delta)
  return _internal_label_update_time_delta();
}
inline void Feature::_internal_set_label_update_time_delta(double value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.label_update_time_delta_ = value;
}
inline void Feature::set_label_update_time_delta(double value) {
  _internal_set_label_update_time_delta(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.label_update_time_delta)
}

// optional .apollo.prediction.ObstaclePriority priority = 25;
inline bool Feature::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priority_ != nullptr);
  return value;
}
inline bool Feature::has_priority() const {
  return _internal_has_priority();
}
inline void Feature::clear_priority() {
  if (_impl_.priority_ != nullptr) _impl_.priority_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::prediction::ObstaclePriority& Feature::_internal_priority() const {
  const ::apollo::prediction::ObstaclePriority* p = _impl_.priority_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstaclePriority&>(
      ::apollo::prediction::_ObstaclePriority_default_instance_);
}
inline const ::apollo::prediction::ObstaclePriority& Feature::priority() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.priority)
  return _internal_priority();
}
inline void Feature::unsafe_arena_set_allocated_priority(
    ::apollo::prediction::ObstaclePriority* priority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  _impl_.priority_ = priority;
  if (priority) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.priority)
}
inline ::apollo::prediction::ObstaclePriority* Feature::release_priority() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::prediction::ObstaclePriority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* Feature::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.priority)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::prediction::ObstaclePriority* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* Feature::_internal_mutable_priority() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstaclePriority>(GetArenaForAllocation());
    _impl_.priority_ = p;
  }
  return _impl_.priority_;
}
inline ::apollo::prediction::ObstaclePriority* Feature::mutable_priority() {
  ::apollo::prediction::ObstaclePriority* _msg = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.priority)
  return _msg;
}
inline void Feature::set_allocated_priority(::apollo::prediction::ObstaclePriority* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.priority_;
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(priority);
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.priority)
}

// optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
inline bool Feature::_internal_has_interactive_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interactive_tag_ != nullptr);
  return value;
}
inline bool Feature::has_interactive_tag() const {
  return _internal_has_interactive_tag();
}
inline void Feature::clear_interactive_tag() {
  if (_impl_.interactive_tag_ != nullptr) _impl_.interactive_tag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::prediction::ObstacleInteractiveTag& Feature::_internal_interactive_tag() const {
  const ::apollo::prediction::ObstacleInteractiveTag* p = _impl_.interactive_tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstacleInteractiveTag&>(
      ::apollo::prediction::_ObstacleInteractiveTag_default_instance_);
}
inline const ::apollo::prediction::ObstacleInteractiveTag& Feature::interactive_tag() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.interactive_tag)
  return _internal_interactive_tag();
}
inline void Feature::unsafe_arena_set_allocated_interactive_tag(
    ::apollo::prediction::ObstacleInteractiveTag* interactive_tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactive_tag_);
  }
  _impl_.interactive_tag_ = interactive_tag;
  if (interactive_tag) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.interactive_tag)
}
inline ::apollo::prediction::ObstacleInteractiveTag* Feature::release_interactive_tag() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::prediction::ObstacleInteractiveTag* temp = _impl_.interactive_tag_;
  _impl_.interactive_tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstacleInteractiveTag* Feature::unsafe_arena_release_interactive_tag() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.interactive_tag)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::apollo::prediction::ObstacleInteractiveTag* temp = _impl_.interactive_tag_;
  _impl_.interactive_tag_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstacleInteractiveTag* Feature::_internal_mutable_interactive_tag() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.interactive_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleInteractiveTag>(GetArenaForAllocation());
    _impl_.interactive_tag_ = p;
  }
  return _impl_.interactive_tag_;
}
inline ::apollo::prediction::ObstacleInteractiveTag* Feature::mutable_interactive_tag() {
  ::apollo::prediction::ObstacleInteractiveTag* _msg = _internal_mutable_interactive_tag();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.interactive_tag)
  return _msg;
}
inline void Feature::set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.interactive_tag_;
  }
  if (interactive_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interactive_tag);
    if (message_arena != submessage_arena) {
      interactive_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactive_tag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.interactive_tag_ = interactive_tag;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.interactive_tag)
}

// optional bool is_near_junction = 29 [default = false];
inline bool Feature::_internal_has_is_near_junction() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool Feature::has_is_near_junction() const {
  return _internal_has_is_near_junction();
}
inline void Feature::clear_is_near_junction() {
  _impl_.is_near_junction_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool Feature::_internal_is_near_junction() const {
  return _impl_.is_near_junction_;
}
inline bool Feature::is_near_junction() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.is_near_junction)
  return _internal_is_near_junction();
}
inline void Feature::_internal_set_is_near_junction(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.is_near_junction_ = value;
}
inline void Feature::set_is_near_junction(bool value) {
  _internal_set_is_near_junction(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.is_near_junction)
}

// repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
inline int Feature::_internal_future_trajectory_points_size() const {
  return _impl_.future_trajectory_points_.size();
}
inline int Feature::future_trajectory_points_size() const {
  return _internal_future_trajectory_points_size();
}
inline ::apollo::prediction::PredictionTrajectoryPoint* Feature::mutable_future_trajectory_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.future_trajectory_points)
  return _impl_.future_trajectory_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionTrajectoryPoint >*
Feature::mutable_future_trajectory_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.future_trajectory_points)
  return &_impl_.future_trajectory_points_;
}
inline const ::apollo::prediction::PredictionTrajectoryPoint& Feature::_internal_future_trajectory_points(int index) const {
  return _impl_.future_trajectory_points_.Get(index);
}
inline const ::apollo::prediction::PredictionTrajectoryPoint& Feature::future_trajectory_points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.future_trajectory_points)
  return _internal_future_trajectory_points(index);
}
inline ::apollo::prediction::PredictionTrajectoryPoint* Feature::_internal_add_future_trajectory_points() {
  return _impl_.future_trajectory_points_.Add();
}
inline ::apollo::prediction::PredictionTrajectoryPoint* Feature::add_future_trajectory_points() {
  ::apollo::prediction::PredictionTrajectoryPoint* _add = _internal_add_future_trajectory_points();
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.future_trajectory_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::PredictionTrajectoryPoint >&
Feature::future_trajectory_points() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.future_trajectory_points)
  return _impl_.future_trajectory_points_;
}

// repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
inline int Feature::_internal_short_term_predicted_trajectory_points_size() const {
  return _impl_.short_term_predicted_trajectory_points_.size();
}
inline int Feature::short_term_predicted_trajectory_points_size() const {
  return _internal_short_term_predicted_trajectory_points_size();
}
inline ::apollo::common::TrajectoryPoint* Feature::mutable_short_term_predicted_trajectory_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.short_term_predicted_trajectory_points)
  return _impl_.short_term_predicted_trajectory_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Feature::mutable_short_term_predicted_trajectory_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.short_term_predicted_trajectory_points)
  return &_impl_.short_term_predicted_trajectory_points_;
}
inline const ::apollo::common::TrajectoryPoint& Feature::_internal_short_term_predicted_trajectory_points(int index) const {
  return _impl_.short_term_predicted_trajectory_points_.Get(index);
}
inline const ::apollo::common::TrajectoryPoint& Feature::short_term_predicted_trajectory_points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.short_term_predicted_trajectory_points)
  return _internal_short_term_predicted_trajectory_points(index);
}
inline ::apollo::common::TrajectoryPoint* Feature::_internal_add_short_term_predicted_trajectory_points() {
  return _impl_.short_term_predicted_trajectory_points_.Add();
}
inline ::apollo::common::TrajectoryPoint* Feature::add_short_term_predicted_trajectory_points() {
  ::apollo::common::TrajectoryPoint* _add = _internal_add_short_term_predicted_trajectory_points();
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.short_term_predicted_trajectory_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Feature::short_term_predicted_trajectory_points() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.short_term_predicted_trajectory_points)
  return _impl_.short_term_predicted_trajectory_points_;
}

// repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
inline int Feature::_internal_predicted_trajectory_size() const {
  return _impl_.predicted_trajectory_.size();
}
inline int Feature::predicted_trajectory_size() const {
  return _internal_predicted_trajectory_size();
}
inline void Feature::clear_predicted_trajectory() {
  _impl_.predicted_trajectory_.Clear();
}
inline ::apollo::prediction::Trajectory* Feature::mutable_predicted_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.predicted_trajectory)
  return _impl_.predicted_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >*
Feature::mutable_predicted_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.predicted_trajectory)
  return &_impl_.predicted_trajectory_;
}
inline const ::apollo::prediction::Trajectory& Feature::_internal_predicted_trajectory(int index) const {
  return _impl_.predicted_trajectory_.Get(index);
}
inline const ::apollo::prediction::Trajectory& Feature::predicted_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.predicted_trajectory)
  return _internal_predicted_trajectory(index);
}
inline ::apollo::prediction::Trajectory* Feature::_internal_add_predicted_trajectory() {
  return _impl_.predicted_trajectory_.Add();
}
inline ::apollo::prediction::Trajectory* Feature::add_predicted_trajectory() {
  ::apollo::prediction::Trajectory* _add = _internal_add_predicted_trajectory();
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.predicted_trajectory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Trajectory >&
Feature::predicted_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.predicted_trajectory)
  return _impl_.predicted_trajectory_;
}

// repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
inline int Feature::_internal_adc_trajectory_point_size() const {
  return _impl_.adc_trajectory_point_.size();
}
inline int Feature::adc_trajectory_point_size() const {
  return _internal_adc_trajectory_point_size();
}
inline ::apollo::common::TrajectoryPoint* Feature::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.adc_trajectory_point)
  return _impl_.adc_trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Feature::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.adc_trajectory_point)
  return &_impl_.adc_trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& Feature::_internal_adc_trajectory_point(int index) const {
  return _impl_.adc_trajectory_point_.Get(index);
}
inline const ::apollo::common::TrajectoryPoint& Feature::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.adc_trajectory_point)
  return _internal_adc_trajectory_point(index);
}
inline ::apollo::common::TrajectoryPoint* Feature::_internal_add_adc_trajectory_point() {
  return _impl_.adc_trajectory_point_.Add();
}
inline ::apollo::common::TrajectoryPoint* Feature::add_adc_trajectory_point() {
  ::apollo::common::TrajectoryPoint* _add = _internal_add_adc_trajectory_point();
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.adc_trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Feature::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.adc_trajectory_point)
  return _impl_.adc_trajectory_point_;
}

// optional double adc_timestamp = 38;
inline bool Feature::_internal_has_adc_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Feature::has_adc_timestamp() const {
  return _internal_has_adc_timestamp();
}
inline void Feature::clear_adc_timestamp() {
  _impl_.adc_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double Feature::_internal_adc_timestamp() const {
  return _impl_.adc_timestamp_;
}
inline double Feature::adc_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.adc_timestamp)
  return _internal_adc_timestamp();
}
inline void Feature::_internal_set_adc_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.adc_timestamp_ = value;
}
inline void Feature::set_adc_timestamp(double value) {
  _internal_set_adc_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.adc_timestamp)
}

// optional .apollo.perception.PerceptionObstacle adc_localization = 39;
inline bool Feature::_internal_has_adc_localization() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adc_localization_ != nullptr);
  return value;
}
inline bool Feature::has_adc_localization() const {
  return _internal_has_adc_localization();
}
inline const ::apollo::perception::PerceptionObstacle& Feature::_internal_adc_localization() const {
  const ::apollo::perception::PerceptionObstacle* p = _impl_.adc_localization_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::PerceptionObstacle&>(
      ::apollo::perception::_PerceptionObstacle_default_instance_);
}
inline const ::apollo::perception::PerceptionObstacle& Feature::adc_localization() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.adc_localization)
  return _internal_adc_localization();
}
inline void Feature::unsafe_arena_set_allocated_adc_localization(
    ::apollo::perception::PerceptionObstacle* adc_localization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adc_localization_);
  }
  _impl_.adc_localization_ = adc_localization;
  if (adc_localization) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.Feature.adc_localization)
}
inline ::apollo::perception::PerceptionObstacle* Feature::release_adc_localization() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.adc_localization_;
  _impl_.adc_localization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* Feature::unsafe_arena_release_adc_localization() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Feature.adc_localization)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::apollo::perception::PerceptionObstacle* temp = _impl_.adc_localization_;
  _impl_.adc_localization_ = nullptr;
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* Feature::_internal_mutable_adc_localization() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.adc_localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(GetArenaForAllocation());
    _impl_.adc_localization_ = p;
  }
  return _impl_.adc_localization_;
}
inline ::apollo::perception::PerceptionObstacle* Feature::mutable_adc_localization() {
  ::apollo::perception::PerceptionObstacle* _msg = _internal_mutable_adc_localization();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.adc_localization)
  return _msg;
}
inline void Feature::set_allocated_adc_localization(::apollo::perception::PerceptionObstacle* adc_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adc_localization_);
  }
  if (adc_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adc_localization));
    if (message_arena != submessage_arena) {
      adc_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_localization, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.adc_localization_ = adc_localization;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Feature.adc_localization)
}

// repeated string surrounding_lane_id = 35;
inline int Feature::_internal_surrounding_lane_id_size() const {
  return _impl_.surrounding_lane_id_.size();
}
inline int Feature::surrounding_lane_id_size() const {
  return _internal_surrounding_lane_id_size();
}
inline void Feature::clear_surrounding_lane_id() {
  _impl_.surrounding_lane_id_.Clear();
}
inline std::string* Feature::add_surrounding_lane_id() {
  std::string* _s = _internal_add_surrounding_lane_id();
  // @@protoc_insertion_point(field_add_mutable:apollo.prediction.Feature.surrounding_lane_id)
  return _s;
}
inline const std::string& Feature::_internal_surrounding_lane_id(int index) const {
  return _impl_.surrounding_lane_id_.Get(index);
}
inline const std::string& Feature::surrounding_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.surrounding_lane_id)
  return _internal_surrounding_lane_id(index);
}
inline std::string* Feature::mutable_surrounding_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.surrounding_lane_id)
  return _impl_.surrounding_lane_id_.Mutable(index);
}
inline void Feature::set_surrounding_lane_id(int index, const std::string& value) {
  _impl_.surrounding_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::set_surrounding_lane_id(int index, std::string&& value) {
  _impl_.surrounding_lane_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::set_surrounding_lane_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.surrounding_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::set_surrounding_lane_id(int index, const char* value, size_t size) {
  _impl_.surrounding_lane_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.Feature.surrounding_lane_id)
}
inline std::string* Feature::_internal_add_surrounding_lane_id() {
  return _impl_.surrounding_lane_id_.Add();
}
inline void Feature::add_surrounding_lane_id(const std::string& value) {
  _impl_.surrounding_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::add_surrounding_lane_id(std::string&& value) {
  _impl_.surrounding_lane_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::add_surrounding_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.surrounding_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.prediction.Feature.surrounding_lane_id)
}
inline void Feature::add_surrounding_lane_id(const char* value, size_t size) {
  _impl_.surrounding_lane_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.prediction.Feature.surrounding_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Feature::surrounding_lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.surrounding_lane_id)
  return _impl_.surrounding_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Feature::mutable_surrounding_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.surrounding_lane_id)
  return &_impl_.surrounding_lane_id_;
}

// repeated string within_lane_id = 36;
inline int Feature::_internal_within_lane_id_size() const {
  return _impl_.within_lane_id_.size();
}
inline int Feature::within_lane_id_size() const {
  return _internal_within_lane_id_size();
}
inline void Feature::clear_within_lane_id() {
  _impl_.within_lane_id_.Clear();
}
inline std::string* Feature::add_within_lane_id() {
  std::string* _s = _internal_add_within_lane_id();
  // @@protoc_insertion_point(field_add_mutable:apollo.prediction.Feature.within_lane_id)
  return _s;
}
inline const std::string& Feature::_internal_within_lane_id(int index) const {
  return _impl_.within_lane_id_.Get(index);
}
inline const std::string& Feature::within_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Feature.within_lane_id)
  return _internal_within_lane_id(index);
}
inline std::string* Feature::mutable_within_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Feature.within_lane_id)
  return _impl_.within_lane_id_.Mutable(index);
}
inline void Feature::set_within_lane_id(int index, const std::string& value) {
  _impl_.within_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::set_within_lane_id(int index, std::string&& value) {
  _impl_.within_lane_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::set_within_lane_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.within_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::set_within_lane_id(int index, const char* value, size_t size) {
  _impl_.within_lane_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.Feature.within_lane_id)
}
inline std::string* Feature::_internal_add_within_lane_id() {
  return _impl_.within_lane_id_.Add();
}
inline void Feature::add_within_lane_id(const std::string& value) {
  _impl_.within_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::add_within_lane_id(std::string&& value) {
  _impl_.within_lane_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::add_within_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.within_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.prediction.Feature.within_lane_id)
}
inline void Feature::add_within_lane_id(const char* value, size_t size) {
  _impl_.within_lane_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.prediction.Feature.within_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Feature::within_lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Feature.within_lane_id)
  return _impl_.within_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Feature::mutable_within_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Feature.within_lane_id)
  return &_impl_.within_lane_id_;
}

// -------------------------------------------------------------------

// ObstacleHistory

// repeated .apollo.prediction.Feature feature = 1;
inline int ObstacleHistory::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int ObstacleHistory::feature_size() const {
  return _internal_feature_size();
}
inline void ObstacleHistory::clear_feature() {
  _impl_.feature_.Clear();
}
inline ::apollo::prediction::Feature* ObstacleHistory::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ObstacleHistory.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >*
ObstacleHistory::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.ObstacleHistory.feature)
  return &_impl_.feature_;
}
inline const ::apollo::prediction::Feature& ObstacleHistory::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::apollo::prediction::Feature& ObstacleHistory::feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleHistory.feature)
  return _internal_feature(index);
}
inline ::apollo::prediction::Feature* ObstacleHistory::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::apollo::prediction::Feature* ObstacleHistory::add_feature() {
  ::apollo::prediction::Feature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:apollo.prediction.ObstacleHistory.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Feature >&
ObstacleHistory::feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.ObstacleHistory.feature)
  return _impl_.feature_;
}

// optional bool is_trainable = 2 [default = false];
inline bool ObstacleHistory::_internal_has_is_trainable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleHistory::has_is_trainable() const {
  return _internal_has_is_trainable();
}
inline void ObstacleHistory::clear_is_trainable() {
  _impl_.is_trainable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ObstacleHistory::_internal_is_trainable() const {
  return _impl_.is_trainable_;
}
inline bool ObstacleHistory::is_trainable() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleHistory.is_trainable)
  return _internal_is_trainable();
}
inline void ObstacleHistory::_internal_set_is_trainable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_trainable_ = value;
}
inline void ObstacleHistory::set_is_trainable(bool value) {
  _internal_set_is_trainable(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleHistory.is_trainable)
}

// -------------------------------------------------------------------

// FrameEnv

// optional double timestamp = 1;
inline bool FrameEnv::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameEnv::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FrameEnv::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double FrameEnv::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double FrameEnv::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FrameEnv.timestamp)
  return _internal_timestamp();
}
inline void FrameEnv::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void FrameEnv::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.FrameEnv.timestamp)
}

// optional .apollo.prediction.ObstacleHistory ego_history = 2;
inline bool FrameEnv::_internal_has_ego_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ego_history_ != nullptr);
  return value;
}
inline bool FrameEnv::has_ego_history() const {
  return _internal_has_ego_history();
}
inline void FrameEnv::clear_ego_history() {
  if (_impl_.ego_history_ != nullptr) _impl_.ego_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::ObstacleHistory& FrameEnv::_internal_ego_history() const {
  const ::apollo::prediction::ObstacleHistory* p = _impl_.ego_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::ObstacleHistory&>(
      ::apollo::prediction::_ObstacleHistory_default_instance_);
}
inline const ::apollo::prediction::ObstacleHistory& FrameEnv::ego_history() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FrameEnv.ego_history)
  return _internal_ego_history();
}
inline void FrameEnv::unsafe_arena_set_allocated_ego_history(
    ::apollo::prediction::ObstacleHistory* ego_history) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ego_history_);
  }
  _impl_.ego_history_ = ego_history;
  if (ego_history) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.FrameEnv.ego_history)
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::release_ego_history() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::ObstacleHistory* temp = _impl_.ego_history_;
  _impl_.ego_history_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::unsafe_arena_release_ego_history() {
  // @@protoc_insertion_point(field_release:apollo.prediction.FrameEnv.ego_history)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::ObstacleHistory* temp = _impl_.ego_history_;
  _impl_.ego_history_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::_internal_mutable_ego_history() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ego_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleHistory>(GetArenaForAllocation());
    _impl_.ego_history_ = p;
  }
  return _impl_.ego_history_;
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::mutable_ego_history() {
  ::apollo::prediction::ObstacleHistory* _msg = _internal_mutable_ego_history();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.FrameEnv.ego_history)
  return _msg;
}
inline void FrameEnv::set_allocated_ego_history(::apollo::prediction::ObstacleHistory* ego_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ego_history_;
  }
  if (ego_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ego_history);
    if (message_arena != submessage_arena) {
      ego_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ego_history, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ego_history_ = ego_history;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.FrameEnv.ego_history)
}

// repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
inline int FrameEnv::_internal_obstacles_history_size() const {
  return _impl_.obstacles_history_.size();
}
inline int FrameEnv::obstacles_history_size() const {
  return _internal_obstacles_history_size();
}
inline void FrameEnv::clear_obstacles_history() {
  _impl_.obstacles_history_.Clear();
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::mutable_obstacles_history(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.FrameEnv.obstacles_history)
  return _impl_.obstacles_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleHistory >*
FrameEnv::mutable_obstacles_history() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.FrameEnv.obstacles_history)
  return &_impl_.obstacles_history_;
}
inline const ::apollo::prediction::ObstacleHistory& FrameEnv::_internal_obstacles_history(int index) const {
  return _impl_.obstacles_history_.Get(index);
}
inline const ::apollo::prediction::ObstacleHistory& FrameEnv::obstacles_history(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.FrameEnv.obstacles_history)
  return _internal_obstacles_history(index);
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::_internal_add_obstacles_history() {
  return _impl_.obstacles_history_.Add();
}
inline ::apollo::prediction::ObstacleHistory* FrameEnv::add_obstacles_history() {
  ::apollo::prediction::ObstacleHistory* _add = _internal_add_obstacles_history();
  // @@protoc_insertion_point(field_add:apollo.prediction.FrameEnv.obstacles_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleHistory >&
FrameEnv::obstacles_history() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.FrameEnv.obstacles_history)
  return _impl_.obstacles_history_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::prediction::ObstaclePriority_Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstaclePriority_Priority>() {
  return ::apollo::prediction::ObstaclePriority_Priority_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag>() {
  return ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2ffeature_2eproto
