// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/vector_net.proto

#include "modules/prediction/proto/vector_net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR VNVector::VNVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VNVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VNVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VNVectorDefaultTypeInternal() {}
  union {
    VNVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VNVectorDefaultTypeInternal _VNVector_default_instance_;
PROTOBUF_CONSTEXPR Polyline::Polyline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vector_)*/{}
  , /*decltype(_impl_.p_id_x_)*/0
  , /*decltype(_impl_.p_id_y_)*/0} {}
struct PolylineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolylineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolylineDefaultTypeInternal() {}
  union {
    Polyline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolylineDefaultTypeInternal _Polyline_default_instance_;
PROTOBUF_CONSTEXPR CarPosition::CarPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.phi_)*/0} {}
struct CarPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarPositionDefaultTypeInternal() {}
  union {
    CarPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarPositionDefaultTypeInternal _CarPosition_default_instance_;
PROTOBUF_CONSTEXPR VectorNetFeature::VectorNetFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polyline_)*/{}
  , /*decltype(_impl_.car_position_)*/nullptr} {}
struct VectorNetFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorNetFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorNetFeatureDefaultTypeInternal() {}
  union {
    VectorNetFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorNetFeatureDefaultTypeInternal _VectorNetFeature_default_instance_;
PROTOBUF_CONSTEXPR WorldCoord::WorldCoord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorldCoordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldCoordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldCoordDefaultTypeInternal() {}
  union {
    WorldCoord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldCoordDefaultTypeInternal _WorldCoord_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VNVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VNVector, _impl_.element_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _impl_.p_id_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _impl_.p_id_y_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _impl_.phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _impl_.id_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _impl_.car_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _impl_.polyline_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::WorldCoord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::WorldCoord, _impl_.pose_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::prediction::VNVector)},
  { 7, 16, -1, sizeof(::apollo::prediction::Polyline)},
  { 19, 29, -1, sizeof(::apollo::prediction::CarPosition)},
  { 33, 41, -1, sizeof(::apollo::prediction::VectorNetFeature)},
  { 43, -1, -1, sizeof(::apollo::prediction::WorldCoord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_VNVector_default_instance_._instance,
  &::apollo::prediction::_Polyline_default_instance_._instance,
  &::apollo::prediction::_CarPosition_default_instance_._instance,
  &::apollo::prediction::_VectorNetFeature_default_instance_._instance,
  &::apollo::prediction::_WorldCoord_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/prediction/proto/vector_net.pr"
  "oto\022\021apollo.prediction\"\033\n\010VNVector\022\017\n\007el"
  "ement\030\001 \003(\001\"W\n\010Polyline\022+\n\006vector\030\001 \003(\0132"
  "\033.apollo.prediction.VNVector\022\016\n\006p_id_x\030\002"
  " \001(\001\022\016\n\006p_id_y\030\003 \001(\001\"<\n\013CarPosition\022\t\n\001x"
  "\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\013\n\003phi\030\003 \001(\001\022\n\n\002id\030\004 \001"
  "(\t\"w\n\020VectorNetFeature\0224\n\014car_position\030\001"
  " \001(\0132\036.apollo.prediction.CarPosition\022-\n\010"
  "polyline\030\002 \003(\0132\033.apollo.prediction.Polyl"
  "ine\":\n\nWorldCoord\022,\n\004pose\030\001 \003(\0132\036.apollo"
  ".prediction.CarPosition"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = {
    false, false, 423, descriptor_table_protodef_modules_2fprediction_2fproto_2fvector_5fnet_2eproto,
    "modules/prediction/proto/vector_net.proto",
    &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2fvector_5fnet_2eproto(&descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class VNVector::_Internal {
 public:
};

VNVector::VNVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.VNVector)
}
VNVector::VNVector(const VNVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.element_){from._impl_.element_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VNVector)
}

inline void VNVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.element_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VNVector::~VNVector() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VNVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VNVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedField();
}

void VNVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VNVector::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VNVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VNVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VNVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VNVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double element = 1;
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_element(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VNVector)
  return target;
}

size_t VNVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VNVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_element_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VNVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VNVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VNVector::GetClassData() const { return &_class_data_; }

void VNVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VNVector *>(to)->MergeFrom(
      static_cast<const VNVector &>(from));
}


void VNVector::MergeFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VNVector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.element_.MergeFrom(from._impl_.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VNVector::CopyFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VNVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VNVector::IsInitialized() const {
  return true;
}

void VNVector::InternalSwap(VNVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VNVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[0]);
}

// ===================================================================

class Polyline::_Internal {
 public:
  using HasBits = decltype(std::declval<Polyline>()._impl_._has_bits_);
  static void set_has_p_id_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_id_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Polyline::Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Polyline)
}
Polyline::Polyline(const Polyline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vector_){from._impl_.vector_}
    , decltype(_impl_.p_id_x_){}
    , decltype(_impl_.p_id_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.p_id_x_, &from._impl_.p_id_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.p_id_y_) -
    reinterpret_cast<char*>(&_impl_.p_id_x_)) + sizeof(_impl_.p_id_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Polyline)
}

inline void Polyline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vector_){arena}
    , decltype(_impl_.p_id_x_){0}
    , decltype(_impl_.p_id_y_){0}
  };
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Polyline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polyline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vector_.~RepeatedPtrField();
}

void Polyline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Polyline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vector_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.p_id_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.p_id_y_) -
        reinterpret_cast<char*>(&_impl_.p_id_x_)) + sizeof(_impl_.p_id_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polyline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.VNVector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double p_id_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_p_id_x(&has_bits);
          _impl_.p_id_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double p_id_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_p_id_y(&has_bits);
          _impl_.p_id_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polyline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Polyline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vector_size()); i < n; i++) {
    const auto& repfield = this->_internal_vector(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double p_id_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_p_id_x(), target);
  }

  // optional double p_id_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_p_id_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Polyline)
  return target;
}

size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Polyline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  total_size += 1UL * this->_internal_vector_size();
  for (const auto& msg : this->_impl_.vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double p_id_x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double p_id_y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polyline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polyline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polyline::GetClassData() const { return &_class_data_; }

void Polyline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Polyline *>(to)->MergeFrom(
      static_cast<const Polyline &>(from));
}


void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.vector_.MergeFrom(from._impl_.vector_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.p_id_x_ = from._impl_.p_id_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.p_id_y_ = from._impl_.p_id_y_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {
  return true;
}

void Polyline::InternalSwap(Polyline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vector_.InternalSwap(&other->_impl_.vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polyline, _impl_.p_id_y_)
      + sizeof(Polyline::_impl_.p_id_y_)
      - PROTOBUF_FIELD_OFFSET(Polyline, _impl_.p_id_x_)>(
          reinterpret_cast<char*>(&_impl_.p_id_x_),
          reinterpret_cast<char*>(&other->_impl_.p_id_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polyline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[1]);
}

// ===================================================================

class CarPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CarPosition>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CarPosition::CarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.CarPosition)
}
CarPosition::CarPosition(const CarPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.phi_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phi_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.phi_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.CarPosition)
}

inline void CarPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.phi_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CarPosition::~CarPosition() {
  // @@protoc_insertion_point(destructor:apollo.prediction.CarPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CarPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.CarPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.phi_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.phi_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double phi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_phi(&has_bits);
          _impl_.phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.CarPosition.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.CarPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double phi = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_phi(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.CarPosition.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.CarPosition)
  return target;
}

size_t CarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.CarPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double phi = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarPosition::GetClassData() const { return &_class_data_; }

void CarPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CarPosition *>(to)->MergeFrom(
      static_cast<const CarPosition &>(from));
}


void CarPosition::MergeFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.CarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.phi_ = from._impl_.phi_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarPosition::CopyFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.CarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarPosition::IsInitialized() const {
  return true;
}

void CarPosition::InternalSwap(CarPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarPosition, _impl_.phi_)
      + sizeof(CarPosition::_impl_.phi_)
      - PROTOBUF_FIELD_OFFSET(CarPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[2]);
}

// ===================================================================

class VectorNetFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorNetFeature>()._impl_._has_bits_);
  static const ::apollo::prediction::CarPosition& car_position(const VectorNetFeature* msg);
  static void set_has_car_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::prediction::CarPosition&
VectorNetFeature::_Internal::car_position(const VectorNetFeature* msg) {
  return *msg->_impl_.car_position_;
}
VectorNetFeature::VectorNetFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.VectorNetFeature)
}
VectorNetFeature::VectorNetFeature(const VectorNetFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polyline_){from._impl_.polyline_}
    , decltype(_impl_.car_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_car_position()) {
    _impl_.car_position_ = new ::apollo::prediction::CarPosition(*from._impl_.car_position_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VectorNetFeature)
}

inline void VectorNetFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polyline_){arena}
    , decltype(_impl_.car_position_){nullptr}
  };
}

VectorNetFeature::~VectorNetFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VectorNetFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorNetFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polyline_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.car_position_;
}

void VectorNetFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorNetFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VectorNetFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polyline_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.car_position_ != nullptr);
    _impl_.car_position_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorNetFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.prediction.CarPosition car_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_car_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Polyline polyline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorNetFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VectorNetFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.CarPosition car_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::car_position(this),
        _Internal::car_position(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.Polyline polyline = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polyline_size()); i < n; i++) {
    const auto& repfield = this->_internal_polyline(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VectorNetFeature)
  return target;
}

size_t VectorNetFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VectorNetFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Polyline polyline = 2;
  total_size += 1UL * this->_internal_polyline_size();
  for (const auto& msg : this->_impl_.polyline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.prediction.CarPosition car_position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.car_position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorNetFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorNetFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorNetFeature::GetClassData() const { return &_class_data_; }

void VectorNetFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorNetFeature *>(to)->MergeFrom(
      static_cast<const VectorNetFeature &>(from));
}


void VectorNetFeature::MergeFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VectorNetFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polyline_.MergeFrom(from._impl_.polyline_);
  if (from._internal_has_car_position()) {
    _internal_mutable_car_position()->::apollo::prediction::CarPosition::MergeFrom(from._internal_car_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorNetFeature::CopyFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VectorNetFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorNetFeature::IsInitialized() const {
  return true;
}

void VectorNetFeature::InternalSwap(VectorNetFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polyline_.InternalSwap(&other->_impl_.polyline_);
  swap(_impl_.car_position_, other->_impl_.car_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorNetFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[3]);
}

// ===================================================================

class WorldCoord::_Internal {
 public:
};

WorldCoord::WorldCoord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.WorldCoord)
}
WorldCoord::WorldCoord(const WorldCoord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){from._impl_.pose_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.WorldCoord)
}

inline void WorldCoord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorldCoord::~WorldCoord() {
  // @@protoc_insertion_point(destructor:apollo.prediction.WorldCoord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldCoord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pose_.~RepeatedPtrField();
}

void WorldCoord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorldCoord::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.WorldCoord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldCoord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.CarPosition pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldCoord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.WorldCoord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pose_size()); i < n; i++) {
    const auto& repfield = this->_internal_pose(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.WorldCoord)
  return target;
}

size_t WorldCoord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.WorldCoord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  total_size += 1UL * this->_internal_pose_size();
  for (const auto& msg : this->_impl_.pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldCoord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorldCoord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldCoord::GetClassData() const { return &_class_data_; }

void WorldCoord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorldCoord *>(to)->MergeFrom(
      static_cast<const WorldCoord &>(from));
}


void WorldCoord::MergeFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.WorldCoord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.pose_.MergeFrom(from._impl_.pose_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldCoord::CopyFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.WorldCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldCoord::IsInitialized() const {
  return true;
}

void WorldCoord::InternalSwap(WorldCoord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pose_.InternalSwap(&other->_impl_.pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldCoord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::VNVector*
Arena::CreateMaybeMessage< ::apollo::prediction::VNVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::VNVector >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Polyline*
Arena::CreateMaybeMessage< ::apollo::prediction::Polyline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Polyline >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::CarPosition*
Arena::CreateMaybeMessage< ::apollo::prediction::CarPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::CarPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::VectorNetFeature*
Arena::CreateMaybeMessage< ::apollo::prediction::VectorNetFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::VectorNetFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::WorldCoord*
Arena::CreateMaybeMessage< ::apollo::prediction::WorldCoord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::WorldCoord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
