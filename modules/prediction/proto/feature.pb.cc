// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#include "modules/prediction/proto/feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_lane_feature_)*/{}
  , /*decltype(_impl_.nearby_lane_feature_)*/{}
  , /*decltype(_impl_.lane_feature_)*/nullptr
  , /*decltype(_impl_.lane_graph_)*/nullptr
  , /*decltype(_impl_.label_update_time_delta_)*/0} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
PROTOBUF_CONSTEXPR LaneFeature::LaneFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lane_s_)*/0
  , /*decltype(_impl_.lane_l_)*/0
  , /*decltype(_impl_.angle_diff_)*/0
  , /*decltype(_impl_.dist_to_left_boundary_)*/0
  , /*decltype(_impl_.dist_to_right_boundary_)*/0
  , /*decltype(_impl_.lane_turn_type_)*/0u} {}
struct LaneFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneFeatureDefaultTypeInternal() {}
  union {
    LaneFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneFeatureDefaultTypeInternal _LaneFeature_default_instance_;
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.lane_)*/nullptr
  , /*decltype(_impl_.t_position_)*/nullptr
  , /*decltype(_impl_.t_velocity_)*/nullptr
  , /*decltype(_impl_.t_acceleration_)*/nullptr
  , /*decltype(_impl_.velocity_heading_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.acc_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.is_still_)*/false
  , /*decltype(_impl_.tracking_time_)*/0
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.t_velocity_heading_)*/0
  , /*decltype(_impl_.t_speed_)*/0
  , /*decltype(_impl_.t_acc_)*/0
  , /*decltype(_impl_.label_update_time_delta_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.current_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.nearby_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.lane_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.label_update_time_delta_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_turn_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.angle_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.dist_to_left_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.dist_to_right_boundary_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.is_still_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.label_update_time_delta_),
  14,
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  16,
  17,
  3,
  4,
  5,
  18,
  19,
  6,
  20,
  15,
  22,
  21,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::prediction::Lane)},
  { 16, 29, -1, sizeof(::apollo::prediction::LaneFeature)},
  { 36, 65, -1, sizeof(::apollo::prediction::Feature)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_Lane_default_instance_._instance,
  &::apollo::prediction::_LaneFeature_default_instance_._instance,
  &::apollo::prediction::_Feature_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/prediction/proto/feature.proto"
  "\022\021apollo.prediction\032)modules/prediction/"
  "proto/lane_graph.proto\032#modules/common/p"
  "roto/geometry.proto\0322modules/perception/"
  "proto/perception_obstacle.proto\"\212\002\n\004Lane"
  "\022<\n\024current_lane_feature\030\001 \003(\0132\036.apollo."
  "prediction.LaneFeature\0224\n\014lane_feature\030\002"
  " \001(\0132\036.apollo.prediction.LaneFeature\022;\n\023"
  "nearby_lane_feature\030\003 \003(\0132\036.apollo.predi"
  "ction.LaneFeature\0220\n\nlane_graph\030\004 \001(\0132\034."
  "apollo.prediction.LaneGraph\022\037\n\027label_upd"
  "ate_time_delta\030\032 \001(\001\"\251\001\n\013LaneFeature\022\017\n\007"
  "lane_id\030\001 \001(\t\022\026\n\016lane_turn_type\030\002 \001(\r\022\016\n"
  "\006lane_s\030\003 \001(\001\022\016\n\006lane_l\030\004 \001(\001\022\022\n\nangle_d"
  "iff\030\005 \001(\001\022\035\n\025dist_to_left_boundary\030\006 \001(\001"
  "\022\036\n\026dist_to_right_boundary\030\007 \001(\001\"\250\005\n\007Fea"
  "ture\022\n\n\002id\030\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.apo"
  "llo.common.Point3D\022(\n\010velocity\030\003 \001(\0132\026.a"
  "pollo.common.Point3D\022,\n\014acceleration\030\004 \001"
  "(\0132\026.apollo.common.Point3D\022\030\n\020velocity_h"
  "eading\030\005 \001(\001\022\r\n\005speed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001"
  "\022\r\n\005theta\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005width"
  "\030\n \001(\001\022\016\n\006height\030\013 \001(\001\022\025\n\rtracking_time\030"
  "\014 \001(\001\022\021\n\ttimestamp\030\r \001(\001\022%\n\004lane\030\016 \001(\0132\027"
  ".apollo.prediction.Lane\022*\n\nt_position\030\020 "
  "\001(\0132\026.apollo.common.Point3D\022.\n\nt_velocit"
  "y\030\021 \001(\0132\026.apollo.common.Point3DB\002\030\001\022\036\n\022t"
  "_velocity_heading\030\022 \001(\001B\002\030\001\022\023\n\007t_speed\030\023"
  " \001(\001B\002\030\001\0222\n\016t_acceleration\030\024 \001(\0132\026.apoll"
  "o.common.Point3DB\002\030\001\022\021\n\005t_acc\030\025 \001(\001B\002\030\001\022"
  "\027\n\010is_still\030\026 \001(\010:\005false\0228\n\004type\030\027 \001(\0162*"
  ".apollo.perception.PerceptionObstacle.Ty"
  "pe\022\037\n\027label_update_time_delta\030\030 \001(\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto = {
    false, false, 1315, descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto,
    "modules/prediction/proto/feature.proto",
    &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2ffeature_2eproto(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._impl_._has_bits_);
  static const ::apollo::prediction::LaneFeature& lane_feature(const Lane* msg);
  static void set_has_lane_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::LaneGraph& lane_graph(const Lane* msg);
  static void set_has_lane_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::prediction::LaneFeature&
Lane::_Internal::lane_feature(const Lane* msg) {
  return *msg->_impl_.lane_feature_;
}
const ::apollo::prediction::LaneGraph&
Lane::_Internal::lane_graph(const Lane* msg) {
  return *msg->_impl_.lane_graph_;
}
void Lane::clear_lane_graph() {
  if (_impl_.lane_graph_ != nullptr) _impl_.lane_graph_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_lane_feature_){from._impl_.current_lane_feature_}
    , decltype(_impl_.nearby_lane_feature_){from._impl_.nearby_lane_feature_}
    , decltype(_impl_.lane_feature_){nullptr}
    , decltype(_impl_.lane_graph_){nullptr}
    , decltype(_impl_.label_update_time_delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_feature()) {
    _impl_.lane_feature_ = new ::apollo::prediction::LaneFeature(*from._impl_.lane_feature_);
  }
  if (from._internal_has_lane_graph()) {
    _impl_.lane_graph_ = new ::apollo::prediction::LaneGraph(*from._impl_.lane_graph_);
  }
  _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_lane_feature_){arena}
    , decltype(_impl_.nearby_lane_feature_){arena}
    , decltype(_impl_.lane_feature_){nullptr}
    , decltype(_impl_.lane_graph_){nullptr}
    , decltype(_impl_.label_update_time_delta_){0}
  };
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_lane_feature_.~RepeatedPtrField();
  _impl_.nearby_lane_feature_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.lane_feature_;
  if (this != internal_default_instance()) delete _impl_.lane_graph_;
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_lane_feature_.Clear();
  _impl_.nearby_lane_feature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lane_feature_ != nullptr);
      _impl_.lane_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lane_graph_ != nullptr);
      _impl_.lane_graph_->Clear();
    }
  }
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneFeature lane_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearby_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneGraph lane_graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          _impl_.label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_current_lane_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_current_lane_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lane_feature(this),
        _Internal::lane_feature(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nearby_lane_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_nearby_lane_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lane_graph(this),
        _Internal::lane_graph(this).GetCachedSize(), target, stream);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_label_update_time_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  total_size += 1UL * this->_internal_current_lane_feature_size();
  for (const auto& msg : this->_impl_.current_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  total_size += 1UL * this->_internal_nearby_lane_feature_size();
  for (const auto& msg : this->_impl_.nearby_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.prediction.LaneFeature lane_feature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_feature_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_graph_);
    }

    // optional double label_update_time_delta = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }

void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane *>(to)->MergeFrom(
      static_cast<const Lane &>(from));
}


void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.current_lane_feature_.MergeFrom(from._impl_.current_lane_feature_);
  _impl_.nearby_lane_feature_.MergeFrom(from._impl_.nearby_lane_feature_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_feature()->::apollo::prediction::LaneFeature::MergeFrom(from._internal_lane_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_graph()->::apollo::prediction::LaneGraph::MergeFrom(from._internal_lane_graph());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.current_lane_feature_.InternalSwap(&other->_impl_.current_lane_feature_);
  _impl_.nearby_lane_feature_.InternalSwap(&other->_impl_.nearby_lane_feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.label_update_time_delta_)
      + sizeof(Lane::_impl_.label_update_time_delta_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.lane_feature_)>(
          reinterpret_cast<char*>(&_impl_.lane_feature_),
          reinterpret_cast<char*>(&other->_impl_.lane_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[0]);
}

// ===================================================================

class LaneFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFeature>()._impl_._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_turn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dist_to_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dist_to_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LaneFeature::LaneFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneFeature)
}
LaneFeature::LaneFeature(const LaneFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.lane_s_){}
    , decltype(_impl_.lane_l_){}
    , decltype(_impl_.angle_diff_){}
    , decltype(_impl_.dist_to_left_boundary_){}
    , decltype(_impl_.dist_to_right_boundary_){}
    , decltype(_impl_.lane_turn_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lane_s_, &from._impl_.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_turn_type_) -
    reinterpret_cast<char*>(&_impl_.lane_s_)) + sizeof(_impl_.lane_turn_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneFeature)
}

inline void LaneFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.lane_s_){0}
    , decltype(_impl_.lane_l_){0}
    , decltype(_impl_.angle_diff_){0}
    , decltype(_impl_.dist_to_left_boundary_){0}
    , decltype(_impl_.dist_to_right_boundary_){0}
    , decltype(_impl_.lane_turn_type_){0u}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneFeature::~LaneFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.Destroy();
}

void LaneFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_turn_type_) -
        reinterpret_cast<char*>(&_impl_.lane_s_)) + sizeof(_impl_.lane_turn_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LaneFeature.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_turn_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane_turn_type(&has_bits);
          _impl_.lane_turn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lane_s(&has_bits);
          _impl_.lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_lane_l(&has_bits);
          _impl_.lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double angle_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_angle_diff(&has_bits);
          _impl_.angle_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dist_to_left_boundary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_dist_to_left_boundary(&has_bits);
          _impl_.dist_to_left_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dist_to_right_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_dist_to_right_boundary(&has_bits);
          _impl_.dist_to_right_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneFeature.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane_turn_type(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_lane_l(), target);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle_diff(), target);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dist_to_left_boundary(), target);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_dist_to_right_boundary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneFeature)
  return target;
}

size_t LaneFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double lane_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_left_boundary = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_right_boundary = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_turn_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneFeature::GetClassData() const { return &_class_data_; }

void LaneFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneFeature *>(to)->MergeFrom(
      static_cast<const LaneFeature &>(from));
}


void LaneFeature::MergeFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lane_s_ = from._impl_.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lane_l_ = from._impl_.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.angle_diff_ = from._impl_.angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dist_to_left_boundary_ = from._impl_.dist_to_left_boundary_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.dist_to_right_boundary_ = from._impl_.dist_to_right_boundary_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lane_turn_type_ = from._impl_.lane_turn_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneFeature::CopyFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeature::IsInitialized() const {
  return true;
}

void LaneFeature::InternalSwap(LaneFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneFeature, _impl_.lane_turn_type_)
      + sizeof(LaneFeature::_impl_.lane_turn_type_)
      - PROTOBUF_FIELD_OFFSET(LaneFeature, _impl_.lane_s_)>(
          reinterpret_cast<char*>(&_impl_.lane_s_),
          reinterpret_cast<char*>(&other->_impl_.lane_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[1]);
}

// ===================================================================

class Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Feature>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::common::Point3D& position(const Feature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& velocity(const Feature* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& acceleration(const Feature* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::prediction::Lane& lane(const Feature* msg);
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& t_position(const Feature* msg);
  static void set_has_t_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& t_velocity(const Feature* msg);
  static void set_has_t_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_t_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_t_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::common::Point3D& t_acceleration(const Feature* msg);
  static void set_has_t_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_t_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_still(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::apollo::common::Point3D&
Feature::_Internal::position(const Feature* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::velocity(const Feature* msg) {
  return *msg->_impl_.velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::acceleration(const Feature* msg) {
  return *msg->_impl_.acceleration_;
}
const ::apollo::prediction::Lane&
Feature::_Internal::lane(const Feature* msg) {
  return *msg->_impl_.lane_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_position(const Feature* msg) {
  return *msg->_impl_.t_position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_velocity(const Feature* msg) {
  return *msg->_impl_.t_velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_acceleration(const Feature* msg) {
  return *msg->_impl_.t_acceleration_;
}
void Feature::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Feature::clear_t_position() {
  if (_impl_.t_position_ != nullptr) _impl_.t_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Feature::clear_t_velocity() {
  if (_impl_.t_velocity_ != nullptr) _impl_.t_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Feature::clear_t_acceleration() {
  if (_impl_.t_acceleration_ != nullptr) _impl_.t_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.lane_){nullptr}
    , decltype(_impl_.t_position_){nullptr}
    , decltype(_impl_.t_velocity_){nullptr}
    , decltype(_impl_.t_acceleration_){nullptr}
    , decltype(_impl_.velocity_heading_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.acc_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.is_still_){}
    , decltype(_impl_.tracking_time_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.t_velocity_heading_){}
    , decltype(_impl_.t_speed_){}
    , decltype(_impl_.t_acc_){}
    , decltype(_impl_.label_update_time_delta_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::common::Point3D(*from._impl_.velocity_);
  }
  if (from._internal_has_acceleration()) {
    _impl_.acceleration_ = new ::apollo::common::Point3D(*from._impl_.acceleration_);
  }
  if (from._internal_has_lane()) {
    _impl_.lane_ = new ::apollo::prediction::Lane(*from._impl_.lane_);
  }
  if (from._internal_has_t_position()) {
    _impl_.t_position_ = new ::apollo::common::Point3D(*from._impl_.t_position_);
  }
  if (from._internal_has_t_velocity()) {
    _impl_.t_velocity_ = new ::apollo::common::Point3D(*from._impl_.t_velocity_);
  }
  if (from._internal_has_t_acceleration()) {
    _impl_.t_acceleration_ = new ::apollo::common::Point3D(*from._impl_.t_acceleration_);
  }
  ::memcpy(&_impl_.velocity_heading_, &from._impl_.velocity_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.velocity_heading_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Feature)
}

inline void Feature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.lane_){nullptr}
    , decltype(_impl_.t_position_){nullptr}
    , decltype(_impl_.t_velocity_){nullptr}
    , decltype(_impl_.t_acceleration_){nullptr}
    , decltype(_impl_.velocity_heading_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.acc_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.is_still_){false}
    , decltype(_impl_.tracking_time_){0}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.t_velocity_heading_){0}
    , decltype(_impl_.t_speed_){0}
    , decltype(_impl_.t_acc_){0}
    , decltype(_impl_.label_update_time_delta_){0}
    , decltype(_impl_.type_){0}
  };
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.lane_;
  if (this != internal_default_instance()) delete _impl_.t_position_;
  if (this != internal_default_instance()) delete _impl_.t_velocity_;
  if (this != internal_default_instance()) delete _impl_.t_acceleration_;
}

void Feature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lane_ != nullptr);
      _impl_.lane_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.t_position_ != nullptr);
      _impl_.t_position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.t_velocity_ != nullptr);
      _impl_.t_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.t_acceleration_ != nullptr);
      _impl_.t_acceleration_->Clear();
    }
  }
  _impl_.velocity_heading_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_still_) -
        reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.is_still_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.tracking_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.tracking_time_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity_heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_velocity_heading(&has_bits);
          _impl_.velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_acc(&has_bits);
          _impl_.acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_tracking_time(&has_bits);
          _impl_.tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Lane lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double t_velocity_heading = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_t_velocity_heading(&has_bits);
          _impl_.t_velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t_speed = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_t_speed(&has_bits);
          _impl_.t_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double t_acc = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_t_acc(&has_bits);
          _impl_.t_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_still = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_still(&has_bits);
          _impl_.is_still_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          _impl_.label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_velocity_heading(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc(), target);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_theta(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_tracking_time(), target);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  // optional .apollo.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::lane(this),
        _Internal::lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::t_position(this),
        _Internal::t_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::t_velocity(this),
        _Internal::t_velocity(this).GetCachedSize(), target, stream);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_t_velocity_heading(), target);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_t_speed(), target);
  }

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::t_acceleration(this),
        _Internal::t_acceleration(this).GetCachedSize(), target, stream);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_t_acc(), target);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_still(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_type(), target);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_label_update_time_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // optional .apollo.prediction.Lane lane = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_);
    }

    // optional .apollo.common.Point3D t_position = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_position_);
    }

    // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_velocity_);
    }

    // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_acceleration_);
    }

    // optional double velocity_heading = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double speed = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double acc = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double theta = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double width = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double height = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional bool is_still = 22 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional double tracking_time = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double t_velocity_heading = 18 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double t_speed = 19 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double t_acc = 21 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double label_update_time_delta = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }

void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Feature *>(to)->MergeFrom(
      static_cast<const Feature &>(from));
}


void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lane()->::apollo::prediction::Lane::MergeFrom(from._internal_lane());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_t_position()->::apollo::common::Point3D::MergeFrom(from._internal_t_position());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_t_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_t_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_t_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_t_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.velocity_heading_ = from._impl_.velocity_heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.acc_ = from._impl_.acc_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.is_still_ = from._impl_.is_still_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.tracking_time_ = from._impl_.tracking_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.t_velocity_heading_ = from._impl_.t_velocity_heading_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.t_speed_ = from._impl_.t_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.t_acc_ = from._impl_.t_acc_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature, _impl_.type_)
      + sizeof(Feature::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Feature, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::Lane*
Arena::CreateMaybeMessage< ::apollo::prediction::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneFeature*
Arena::CreateMaybeMessage< ::apollo::prediction::LaneFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Feature*
Arena::CreateMaybeMessage< ::apollo::prediction::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Feature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
