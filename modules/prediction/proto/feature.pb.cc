// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#include "modules/prediction/proto/feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_lane_feature_)*/{}
  , /*decltype(_impl_.nearby_lane_feature_)*/{}
  , /*decltype(_impl_.lane_feature_)*/nullptr
  , /*decltype(_impl_.lane_graph_)*/nullptr
  , /*decltype(_impl_.lane_graph_ordered_)*/nullptr
  , /*decltype(_impl_.label_update_time_delta_)*/0} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
PROTOBUF_CONSTEXPR LaneFeature::LaneFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lane_s_)*/0
  , /*decltype(_impl_.lane_l_)*/0
  , /*decltype(_impl_.angle_diff_)*/0
  , /*decltype(_impl_.dist_to_left_boundary_)*/0
  , /*decltype(_impl_.dist_to_right_boundary_)*/0
  , /*decltype(_impl_.lane_heading_)*/0
  , /*decltype(_impl_.lane_turn_type_)*/0u
  , /*decltype(_impl_.lane_type_)*/1} {}
struct LaneFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneFeatureDefaultTypeInternal() {}
  union {
    LaneFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneFeatureDefaultTypeInternal _LaneFeature_default_instance_;
PROTOBUF_CONSTEXPR JunctionExit::JunctionExit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.exit_lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exit_position_)*/nullptr
  , /*decltype(_impl_.exit_heading_)*/0
  , /*decltype(_impl_.exit_width_)*/0} {}
struct JunctionExitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JunctionExitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JunctionExitDefaultTypeInternal() {}
  union {
    JunctionExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JunctionExitDefaultTypeInternal _JunctionExit_default_instance_;
PROTOBUF_CONSTEXPR JunctionFeature::JunctionFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.junction_exit_)*/{}
  , /*decltype(_impl_.junction_mlp_feature_)*/{}
  , /*decltype(_impl_.junction_mlp_label_)*/{}
  , /*decltype(_impl_.junction_mlp_probability_)*/{}
  , /*decltype(_impl_.start_lane_id_)*/{}
  , /*decltype(_impl_.junction_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enter_lane_)*/nullptr
  , /*decltype(_impl_.junction_range_)*/0} {}
struct JunctionFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JunctionFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JunctionFeatureDefaultTypeInternal() {}
  union {
    JunctionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JunctionFeatureDefaultTypeInternal _JunctionFeature_default_instance_;
PROTOBUF_CONSTEXPR ObstaclePriority::ObstaclePriority(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.priority_)*/2} {}
struct ObstaclePriorityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstaclePriorityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstaclePriorityDefaultTypeInternal() {}
  union {
    ObstaclePriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstaclePriorityDefaultTypeInternal _ObstaclePriority_default_instance_;
PROTOBUF_CONSTEXPR ObstacleInteractiveTag::ObstacleInteractiveTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interactive_tag_)*/2} {}
struct ObstacleInteractiveTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleInteractiveTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleInteractiveTagDefaultTypeInternal() {}
  union {
    ObstacleInteractiveTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleInteractiveTagDefaultTypeInternal _ObstacleInteractiveTag_default_instance_;
PROTOBUF_CONSTEXPR Trajectory::Trajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/{}
  , /*decltype(_impl_.probability_)*/0} {}
struct TrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_point_)*/{}
  , /*decltype(_impl_.future_trajectory_points_)*/{}
  , /*decltype(_impl_.short_term_predicted_trajectory_points_)*/{}
  , /*decltype(_impl_.predicted_trajectory_)*/{}
  , /*decltype(_impl_.adc_trajectory_point_)*/{}
  , /*decltype(_impl_.surrounding_lane_id_)*/{}
  , /*decltype(_impl_.within_lane_id_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.lane_)*/nullptr
  , /*decltype(_impl_.t_position_)*/nullptr
  , /*decltype(_impl_.t_velocity_)*/nullptr
  , /*decltype(_impl_.t_acceleration_)*/nullptr
  , /*decltype(_impl_.priority_)*/nullptr
  , /*decltype(_impl_.junction_feature_)*/nullptr
  , /*decltype(_impl_.front_position_)*/nullptr
  , /*decltype(_impl_.raw_velocity_)*/nullptr
  , /*decltype(_impl_.interactive_tag_)*/nullptr
  , /*decltype(_impl_.adc_localization_)*/nullptr
  , /*decltype(_impl_.velocity_heading_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.acc_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.tracking_time_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.t_velocity_heading_)*/0
  , /*decltype(_impl_.t_speed_)*/0
  , /*decltype(_impl_.t_acc_)*/0
  , /*decltype(_impl_.label_update_time_delta_)*/0
  , /*decltype(_impl_.adc_timestamp_)*/0
  , /*decltype(_impl_.is_still_)*/false
  , /*decltype(_impl_.is_near_junction_)*/false} {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
PROTOBUF_CONSTEXPR ObstacleHistory::ObstacleHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feature_)*/{}
  , /*decltype(_impl_.is_trainable_)*/false} {}
struct ObstacleHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleHistoryDefaultTypeInternal() {}
  union {
    ObstacleHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleHistoryDefaultTypeInternal _ObstacleHistory_default_instance_;
PROTOBUF_CONSTEXPR FrameEnv::FrameEnv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacles_history_)*/{}
  , /*decltype(_impl_.ego_history_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0} {}
struct FrameEnvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameEnvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameEnvDefaultTypeInternal() {}
  union {
    FrameEnv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameEnvDefaultTypeInternal _FrameEnv_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.current_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.nearby_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.lane_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.lane_graph_ordered_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _impl_.label_update_time_delta_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_turn_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.angle_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.dist_to_left_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.dist_to_right_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _impl_.lane_type_),
  0,
  7,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _impl_.exit_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _impl_.exit_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _impl_.exit_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _impl_.exit_width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.enter_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_exit_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_mlp_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_mlp_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.junction_mlp_probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _impl_.start_lane_id_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _impl_.priority_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, _impl_.interactive_tag_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _impl_.trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.front_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.raw_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.junction_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.t_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.is_still_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.label_update_time_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.is_near_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.future_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.short_term_predicted_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.predicted_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.adc_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.adc_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.adc_localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.surrounding_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _impl_.within_lane_id_),
  21,
  ~0u,
  0,
  9,
  1,
  10,
  2,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  23,
  3,
  8,
  4,
  5,
  24,
  25,
  6,
  26,
  29,
  22,
  27,
  7,
  11,
  30,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  28,
  12,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _impl_.is_trainable_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _impl_.ego_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _impl_.obstacles_history_),
  1,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::prediction::Lane)},
  { 18, 33, -1, sizeof(::apollo::prediction::LaneFeature)},
  { 42, 52, -1, sizeof(::apollo::prediction::JunctionExit)},
  { 56, 70, -1, sizeof(::apollo::prediction::JunctionFeature)},
  { 78, 85, -1, sizeof(::apollo::prediction::ObstaclePriority)},
  { 86, 93, -1, sizeof(::apollo::prediction::ObstacleInteractiveTag)},
  { 94, 102, -1, sizeof(::apollo::prediction::Trajectory)},
  { 104, 148, -1, sizeof(::apollo::prediction::Feature)},
  { 186, 194, -1, sizeof(::apollo::prediction::ObstacleHistory)},
  { 196, 205, -1, sizeof(::apollo::prediction::FrameEnv)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_Lane_default_instance_._instance,
  &::apollo::prediction::_LaneFeature_default_instance_._instance,
  &::apollo::prediction::_JunctionExit_default_instance_._instance,
  &::apollo::prediction::_JunctionFeature_default_instance_._instance,
  &::apollo::prediction::_ObstaclePriority_default_instance_._instance,
  &::apollo::prediction::_ObstacleInteractiveTag_default_instance_._instance,
  &::apollo::prediction::_Trajectory_default_instance_._instance,
  &::apollo::prediction::_Feature_default_instance_._instance,
  &::apollo::prediction::_ObstacleHistory_default_instance_._instance,
  &::apollo::prediction::_FrameEnv_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/prediction/proto/feature.proto"
  "\022\021apollo.prediction\032#modules/common/prot"
  "o/geometry.proto\032$modules/common/proto/p"
  "nc_point.proto\032 modules/map/proto/map_la"
  "ne.proto\0322modules/perception/proto/perce"
  "ption_obstacle.proto\032)modules/prediction"
  "/proto/lane_graph.proto\032/modules/predict"
  "ion/proto/prediction_point.proto\"\304\002\n\004Lan"
  "e\022<\n\024current_lane_feature\030\001 \003(\0132\036.apollo"
  ".prediction.LaneFeature\0224\n\014lane_feature\030"
  "\002 \001(\0132\036.apollo.prediction.LaneFeature\022;\n"
  "\023nearby_lane_feature\030\003 \003(\0132\036.apollo.pred"
  "iction.LaneFeature\0220\n\nlane_graph\030\004 \001(\0132\034"
  ".apollo.prediction.LaneGraph\0228\n\022lane_gra"
  "ph_ordered\030\005 \001(\0132\034.apollo.prediction.Lan"
  "eGraph\022\037\n\027label_update_time_delta\030\032 \001(\001\""
  "\357\001\n\013LaneFeature\022\017\n\007lane_id\030\001 \001(\t\022\026\n\016lane"
  "_turn_type\030\002 \001(\r\022\016\n\006lane_s\030\003 \001(\001\022\016\n\006lane"
  "_l\030\004 \001(\001\022\022\n\nangle_diff\030\005 \001(\001\022\035\n\025dist_to_"
  "left_boundary\030\006 \001(\001\022\036\n\026dist_to_right_bou"
  "ndary\030\007 \001(\001\022\024\n\014lane_heading\030\010 \001(\001\022.\n\tlan"
  "e_type\030\t \001(\0162\033.apollo.hdmap.Lane.LaneTyp"
  "e\"}\n\014JunctionExit\022\024\n\014exit_lane_id\030\001 \001(\t\022"
  "-\n\rexit_position\030\002 \001(\0132\026.apollo.common.P"
  "oint3D\022\024\n\014exit_heading\030\003 \001(\001\022\022\n\nexit_wid"
  "th\030\004 \001(\001\"\235\002\n\017JunctionFeature\022\023\n\013junction"
  "_id\030\001 \001(\t\022\026\n\016junction_range\030\002 \001(\001\0222\n\nent"
  "er_lane\030\003 \001(\0132\036.apollo.prediction.LaneFe"
  "ature\0226\n\rjunction_exit\030\004 \003(\0132\037.apollo.pr"
  "ediction.JunctionExit\022\034\n\024junction_mlp_fe"
  "ature\030\005 \003(\001\022\032\n\022junction_mlp_label\030\006 \003(\005\022"
  " \n\030junction_mlp_probability\030\007 \003(\001\022\025\n\rsta"
  "rt_lane_id\030\010 \003(\t\"\213\001\n\020ObstaclePriority\022F\n"
  "\010priority\030\031 \001(\0162,.apollo.prediction.Obst"
  "aclePriority.Priority:\006NORMAL\"/\n\010Priorit"
  "y\022\013\n\007CAUTION\020\001\022\n\n\006NORMAL\020\002\022\n\n\006IGNORE\020\003\"\262"
  "\001\n\026ObstacleInteractiveTag\022a\n\017interactive"
  "_tag\030% \001(\01628.apollo.prediction.ObstacleI"
  "nteractiveTag.InteractiveTag:\016NONINTERAC"
  "TION\"5\n\016InteractiveTag\022\017\n\013INTERACTION\020\001\022"
  "\022\n\016NONINTERACTION\020\002\"[\n\nTrajectory\022\023\n\013pro"
  "bability\030\001 \001(\001\0228\n\020trajectory_point\030\002 \003(\013"
  "2\036.apollo.common.TrajectoryPoint\"\267\013\n\007Fea"
  "ture\022\n\n\002id\030\001 \001(\005\022-\n\rpolygon_point\030\036 \003(\0132"
  "\026.apollo.common.Point3D\022(\n\010position\030\002 \001("
  "\0132\026.apollo.common.Point3D\022.\n\016front_posit"
  "ion\030\033 \001(\0132\026.apollo.common.Point3D\022(\n\010vel"
  "ocity\030\003 \001(\0132\026.apollo.common.Point3D\022,\n\014r"
  "aw_velocity\030\034 \001(\0132\026.apollo.common.Point3"
  "D\022,\n\014acceleration\030\004 \001(\0132\026.apollo.common."
  "Point3D\022\030\n\020velocity_heading\030\005 \001(\001\022\r\n\005spe"
  "ed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001\022\r\n\005theta\030\010 \001(\001\022\016\n\006"
  "length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n\006height\030\013 "
  "\001(\001\022\025\n\rtracking_time\030\014 \001(\001\022\021\n\ttimestamp\030"
  "\r \001(\001\022%\n\004lane\030\016 \001(\0132\027.apollo.prediction."
  "Lane\022<\n\020junction_feature\030\032 \001(\0132\".apollo."
  "prediction.JunctionFeature\022*\n\nt_position"
  "\030\020 \001(\0132\026.apollo.common.Point3D\022.\n\nt_velo"
  "city\030\021 \001(\0132\026.apollo.common.Point3DB\002\030\001\022\036"
  "\n\022t_velocity_heading\030\022 \001(\001B\002\030\001\022\023\n\007t_spee"
  "d\030\023 \001(\001B\002\030\001\0222\n\016t_acceleration\030\024 \001(\0132\026.ap"
  "ollo.common.Point3DB\002\030\001\022\021\n\005t_acc\030\025 \001(\001B\002"
  "\030\001\022\027\n\010is_still\030\026 \001(\010:\005false\0228\n\004type\030\027 \001("
  "\0162*.apollo.perception.PerceptionObstacle"
  ".Type\022\037\n\027label_update_time_delta\030\030 \001(\001\0225"
  "\n\010priority\030\031 \001(\0132#.apollo.prediction.Obs"
  "taclePriority\022B\n\017interactive_tag\030% \001(\0132)"
  ".apollo.prediction.ObstacleInteractiveTa"
  "g\022\037\n\020is_near_junction\030\035 \001(\010:\005false\022N\n\030fu"
  "ture_trajectory_points\030\037 \003(\0132,.apollo.pr"
  "ediction.PredictionTrajectoryPoint\022N\n&sh"
  "ort_term_predicted_trajectory_points\030  \003"
  "(\0132\036.apollo.common.TrajectoryPoint\022;\n\024pr"
  "edicted_trajectory\030! \003(\0132\035.apollo.predic"
  "tion.Trajectory\022<\n\024adc_trajectory_point\030"
  "\" \003(\0132\036.apollo.common.TrajectoryPoint\022\025\n"
  "\radc_timestamp\030& \001(\001\022\?\n\020adc_localization"
  "\030\' \001(\0132%.apollo.perception.PerceptionObs"
  "tacle\022\033\n\023surrounding_lane_id\030# \003(\t\022\026\n\016wi"
  "thin_lane_id\030$ \003(\t\"[\n\017ObstacleHistory\022+\n"
  "\007feature\030\001 \003(\0132\032.apollo.prediction.Featu"
  "re\022\033\n\014is_trainable\030\002 \001(\010:\005false\"\225\001\n\010Fram"
  "eEnv\022\021\n\ttimestamp\030\001 \001(\001\0227\n\013ego_history\030\002"
  " \001(\0132\".apollo.prediction.ObstacleHistory"
  "\022=\n\021obstacles_history\030\003 \003(\0132\".apollo.pre"
  "diction.ObstacleHistory"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps[6] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto = {
    false, false, 3423, descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto,
    "modules/prediction/proto/feature.proto",
    &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps, 6, 10,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2ffeature_2eproto(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto[0];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstaclePriority_Priority ObstaclePriority::CAUTION;
constexpr ObstaclePriority_Priority ObstaclePriority::NORMAL;
constexpr ObstaclePriority_Priority ObstaclePriority::IGNORE;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
constexpr int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto[1];
}
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::INTERACTION;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::NONINTERACTION;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MIN;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MAX;
constexpr int ObstacleInteractiveTag::InteractiveTag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._impl_._has_bits_);
  static const ::apollo::prediction::LaneFeature& lane_feature(const Lane* msg);
  static void set_has_lane_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::LaneGraph& lane_graph(const Lane* msg);
  static void set_has_lane_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::LaneGraph& lane_graph_ordered(const Lane* msg);
  static void set_has_lane_graph_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::LaneFeature&
Lane::_Internal::lane_feature(const Lane* msg) {
  return *msg->_impl_.lane_feature_;
}
const ::apollo::prediction::LaneGraph&
Lane::_Internal::lane_graph(const Lane* msg) {
  return *msg->_impl_.lane_graph_;
}
const ::apollo::prediction::LaneGraph&
Lane::_Internal::lane_graph_ordered(const Lane* msg) {
  return *msg->_impl_.lane_graph_ordered_;
}
void Lane::clear_lane_graph() {
  if (_impl_.lane_graph_ != nullptr) _impl_.lane_graph_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_lane_graph_ordered() {
  if (_impl_.lane_graph_ordered_ != nullptr) _impl_.lane_graph_ordered_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_lane_feature_){from._impl_.current_lane_feature_}
    , decltype(_impl_.nearby_lane_feature_){from._impl_.nearby_lane_feature_}
    , decltype(_impl_.lane_feature_){nullptr}
    , decltype(_impl_.lane_graph_){nullptr}
    , decltype(_impl_.lane_graph_ordered_){nullptr}
    , decltype(_impl_.label_update_time_delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_feature()) {
    _impl_.lane_feature_ = new ::apollo::prediction::LaneFeature(*from._impl_.lane_feature_);
  }
  if (from._internal_has_lane_graph()) {
    _impl_.lane_graph_ = new ::apollo::prediction::LaneGraph(*from._impl_.lane_graph_);
  }
  if (from._internal_has_lane_graph_ordered()) {
    _impl_.lane_graph_ordered_ = new ::apollo::prediction::LaneGraph(*from._impl_.lane_graph_ordered_);
  }
  _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_lane_feature_){arena}
    , decltype(_impl_.nearby_lane_feature_){arena}
    , decltype(_impl_.lane_feature_){nullptr}
    , decltype(_impl_.lane_graph_){nullptr}
    , decltype(_impl_.lane_graph_ordered_){nullptr}
    , decltype(_impl_.label_update_time_delta_){0}
  };
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_lane_feature_.~RepeatedPtrField();
  _impl_.nearby_lane_feature_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.lane_feature_;
  if (this != internal_default_instance()) delete _impl_.lane_graph_;
  if (this != internal_default_instance()) delete _impl_.lane_graph_ordered_;
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_lane_feature_.Clear();
  _impl_.nearby_lane_feature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lane_feature_ != nullptr);
      _impl_.lane_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lane_graph_ != nullptr);
      _impl_.lane_graph_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lane_graph_ordered_ != nullptr);
      _impl_.lane_graph_ordered_->Clear();
    }
  }
  _impl_.label_update_time_delta_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneFeature lane_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearby_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneGraph lane_graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph_ordered(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          _impl_.label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_current_lane_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_current_lane_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lane_feature(this),
        _Internal::lane_feature(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nearby_lane_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_nearby_lane_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lane_graph(this),
        _Internal::lane_graph(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lane_graph_ordered(this),
        _Internal::lane_graph_ordered(this).GetCachedSize(), target, stream);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_label_update_time_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  total_size += 1UL * this->_internal_current_lane_feature_size();
  for (const auto& msg : this->_impl_.current_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  total_size += 1UL * this->_internal_nearby_lane_feature_size();
  for (const auto& msg : this->_impl_.nearby_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.prediction.LaneFeature lane_feature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_feature_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_graph_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_graph_ordered_);
    }

    // optional double label_update_time_delta = 26;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }

void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane *>(to)->MergeFrom(
      static_cast<const Lane &>(from));
}


void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.current_lane_feature_.MergeFrom(from._impl_.current_lane_feature_);
  _impl_.nearby_lane_feature_.MergeFrom(from._impl_.nearby_lane_feature_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_feature()->::apollo::prediction::LaneFeature::MergeFrom(from._internal_lane_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_graph()->::apollo::prediction::LaneGraph::MergeFrom(from._internal_lane_graph());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_graph_ordered()->::apollo::prediction::LaneGraph::MergeFrom(from._internal_lane_graph_ordered());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.current_lane_feature_.InternalSwap(&other->_impl_.current_lane_feature_);
  _impl_.nearby_lane_feature_.InternalSwap(&other->_impl_.nearby_lane_feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.label_update_time_delta_)
      + sizeof(Lane::_impl_.label_update_time_delta_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.lane_feature_)>(
          reinterpret_cast<char*>(&_impl_.lane_feature_),
          reinterpret_cast<char*>(&other->_impl_.lane_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[0]);
}

// ===================================================================

class LaneFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFeature>()._impl_._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_turn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dist_to_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dist_to_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lane_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

LaneFeature::LaneFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneFeature)
}
LaneFeature::LaneFeature(const LaneFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.lane_s_){}
    , decltype(_impl_.lane_l_){}
    , decltype(_impl_.angle_diff_){}
    , decltype(_impl_.dist_to_left_boundary_){}
    , decltype(_impl_.dist_to_right_boundary_){}
    , decltype(_impl_.lane_heading_){}
    , decltype(_impl_.lane_turn_type_){}
    , decltype(_impl_.lane_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lane_s_, &from._impl_.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_type_) -
    reinterpret_cast<char*>(&_impl_.lane_s_)) + sizeof(_impl_.lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneFeature)
}

inline void LaneFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.lane_s_){0}
    , decltype(_impl_.lane_l_){0}
    , decltype(_impl_.angle_diff_){0}
    , decltype(_impl_.dist_to_left_boundary_){0}
    , decltype(_impl_.dist_to_right_boundary_){0}
    , decltype(_impl_.lane_heading_){0}
    , decltype(_impl_.lane_turn_type_){0u}
    , decltype(_impl_.lane_type_){1}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneFeature::~LaneFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.Destroy();
}

void LaneFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_turn_type_) -
        reinterpret_cast<char*>(&_impl_.lane_s_)) + sizeof(_impl_.lane_turn_type_));
  }
  _impl_.lane_type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LaneFeature.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_turn_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane_turn_type(&has_bits);
          _impl_.lane_turn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lane_s(&has_bits);
          _impl_.lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_lane_l(&has_bits);
          _impl_.lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double angle_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_angle_diff(&has_bits);
          _impl_.angle_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dist_to_left_boundary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_dist_to_left_boundary(&has_bits);
          _impl_.dist_to_left_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dist_to_right_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_dist_to_right_boundary(&has_bits);
          _impl_.dist_to_right_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_heading = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_lane_heading(&has_bits);
          _impl_.lane_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneType_IsValid(val))) {
            _internal_set_lane_type(static_cast<::apollo::hdmap::Lane_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneFeature.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane_turn_type(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_lane_l(), target);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle_diff(), target);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dist_to_left_boundary(), target);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_dist_to_right_boundary(), target);
  }

  // optional double lane_heading = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_lane_heading(), target);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneFeature)
  return target;
}

size_t LaneFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double lane_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_left_boundary = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_right_boundary = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lane_heading = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_turn_type());
    }

  }
  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneFeature::GetClassData() const { return &_class_data_; }

void LaneFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneFeature *>(to)->MergeFrom(
      static_cast<const LaneFeature &>(from));
}


void LaneFeature::MergeFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lane_s_ = from._impl_.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lane_l_ = from._impl_.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.angle_diff_ = from._impl_.angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dist_to_left_boundary_ = from._impl_.dist_to_left_boundary_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.dist_to_right_boundary_ = from._impl_.dist_to_right_boundary_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lane_heading_ = from._impl_.lane_heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.lane_turn_type_ = from._impl_.lane_turn_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_lane_type(from._internal_lane_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneFeature::CopyFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeature::IsInitialized() const {
  return true;
}

void LaneFeature::InternalSwap(LaneFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneFeature, _impl_.lane_turn_type_)
      + sizeof(LaneFeature::_impl_.lane_turn_type_)
      - PROTOBUF_FIELD_OFFSET(LaneFeature, _impl_.lane_s_)>(
          reinterpret_cast<char*>(&_impl_.lane_s_),
          reinterpret_cast<char*>(&other->_impl_.lane_s_));
  swap(_impl_.lane_type_, other->_impl_.lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[1]);
}

// ===================================================================

class JunctionExit::_Internal {
 public:
  using HasBits = decltype(std::declval<JunctionExit>()._impl_._has_bits_);
  static void set_has_exit_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& exit_position(const JunctionExit* msg);
  static void set_has_exit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exit_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exit_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Point3D&
JunctionExit::_Internal::exit_position(const JunctionExit* msg) {
  return *msg->_impl_.exit_position_;
}
void JunctionExit::clear_exit_position() {
  if (_impl_.exit_position_ != nullptr) _impl_.exit_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
JunctionExit::JunctionExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.JunctionExit)
}
JunctionExit::JunctionExit(const JunctionExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exit_lane_id_){}
    , decltype(_impl_.exit_position_){nullptr}
    , decltype(_impl_.exit_heading_){}
    , decltype(_impl_.exit_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exit_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exit_lane_id()) {
    _impl_.exit_lane_id_.Set(from._internal_exit_lane_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_exit_position()) {
    _impl_.exit_position_ = new ::apollo::common::Point3D(*from._impl_.exit_position_);
  }
  ::memcpy(&_impl_.exit_heading_, &from._impl_.exit_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exit_width_) -
    reinterpret_cast<char*>(&_impl_.exit_heading_)) + sizeof(_impl_.exit_width_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionExit)
}

inline void JunctionExit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exit_lane_id_){}
    , decltype(_impl_.exit_position_){nullptr}
    , decltype(_impl_.exit_heading_){0}
    , decltype(_impl_.exit_width_){0}
  };
  _impl_.exit_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JunctionExit::~JunctionExit() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionExit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JunctionExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exit_lane_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.exit_position_;
}

void JunctionExit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JunctionExit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionExit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.exit_lane_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.exit_position_ != nullptr);
      _impl_.exit_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.exit_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.exit_width_) -
        reinterpret_cast<char*>(&_impl_.exit_heading_)) + sizeof(_impl_.exit_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionExit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string exit_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exit_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.JunctionExit.exit_lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D exit_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double exit_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_exit_heading(&has_bits);
          _impl_.exit_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double exit_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_exit_width(&has_bits);
          _impl_.exit_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JunctionExit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionExit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string exit_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exit_lane_id().data(), static_cast<int>(this->_internal_exit_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionExit.exit_lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exit_lane_id(), target);
  }

  // optional .apollo.common.Point3D exit_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::exit_position(this),
        _Internal::exit_position(this).GetCachedSize(), target, stream);
  }

  // optional double exit_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_exit_heading(), target);
  }

  // optional double exit_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_exit_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionExit)
  return target;
}

size_t JunctionExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionExit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string exit_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exit_lane_id());
    }

    // optional .apollo.common.Point3D exit_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exit_position_);
    }

    // optional double exit_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double exit_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JunctionExit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JunctionExit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JunctionExit::GetClassData() const { return &_class_data_; }

void JunctionExit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JunctionExit *>(to)->MergeFrom(
      static_cast<const JunctionExit &>(from));
}


void JunctionExit::MergeFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_exit_lane_id(from._internal_exit_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_exit_position()->::apollo::common::Point3D::MergeFrom(from._internal_exit_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.exit_heading_ = from._impl_.exit_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.exit_width_ = from._impl_.exit_width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JunctionExit::CopyFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionExit::IsInitialized() const {
  return true;
}

void JunctionExit::InternalSwap(JunctionExit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exit_lane_id_, lhs_arena,
      &other->_impl_.exit_lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JunctionExit, _impl_.exit_width_)
      + sizeof(JunctionExit::_impl_.exit_width_)
      - PROTOBUF_FIELD_OFFSET(JunctionExit, _impl_.exit_position_)>(
          reinterpret_cast<char*>(&_impl_.exit_position_),
          reinterpret_cast<char*>(&other->_impl_.exit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionExit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[2]);
}

// ===================================================================

class JunctionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<JunctionFeature>()._impl_._has_bits_);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_junction_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::LaneFeature& enter_lane(const JunctionFeature* msg);
  static void set_has_enter_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::prediction::LaneFeature&
JunctionFeature::_Internal::enter_lane(const JunctionFeature* msg) {
  return *msg->_impl_.enter_lane_;
}
JunctionFeature::JunctionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.JunctionFeature)
}
JunctionFeature::JunctionFeature(const JunctionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.junction_exit_){from._impl_.junction_exit_}
    , decltype(_impl_.junction_mlp_feature_){from._impl_.junction_mlp_feature_}
    , decltype(_impl_.junction_mlp_label_){from._impl_.junction_mlp_label_}
    , decltype(_impl_.junction_mlp_probability_){from._impl_.junction_mlp_probability_}
    , decltype(_impl_.start_lane_id_){from._impl_.start_lane_id_}
    , decltype(_impl_.junction_id_){}
    , decltype(_impl_.enter_lane_){nullptr}
    , decltype(_impl_.junction_range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_junction_id()) {
    _impl_.junction_id_.Set(from._internal_junction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enter_lane()) {
    _impl_.enter_lane_ = new ::apollo::prediction::LaneFeature(*from._impl_.enter_lane_);
  }
  _impl_.junction_range_ = from._impl_.junction_range_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionFeature)
}

inline void JunctionFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.junction_exit_){arena}
    , decltype(_impl_.junction_mlp_feature_){arena}
    , decltype(_impl_.junction_mlp_label_){arena}
    , decltype(_impl_.junction_mlp_probability_){arena}
    , decltype(_impl_.start_lane_id_){arena}
    , decltype(_impl_.junction_id_){}
    , decltype(_impl_.enter_lane_){nullptr}
    , decltype(_impl_.junction_range_){0}
  };
  _impl_.junction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.junction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JunctionFeature::~JunctionFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JunctionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.junction_exit_.~RepeatedPtrField();
  _impl_.junction_mlp_feature_.~RepeatedField();
  _impl_.junction_mlp_label_.~RepeatedField();
  _impl_.junction_mlp_probability_.~RepeatedField();
  _impl_.start_lane_id_.~RepeatedPtrField();
  _impl_.junction_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.enter_lane_;
}

void JunctionFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JunctionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junction_exit_.Clear();
  _impl_.junction_mlp_feature_.Clear();
  _impl_.junction_mlp_label_.Clear();
  _impl_.junction_mlp_probability_.Clear();
  _impl_.start_lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.junction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.enter_lane_ != nullptr);
      _impl_.enter_lane_->Clear();
    }
  }
  _impl_.junction_range_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string junction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_junction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.JunctionFeature.junction_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double junction_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_junction_range(&has_bits);
          _impl_.junction_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneFeature enter_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_enter_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.JunctionExit junction_exit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_exit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double junction_mlp_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_feature(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 junction_mlp_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_junction_mlp_label(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double junction_mlp_probability = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_probability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_probability(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string start_lane_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_start_lane_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.prediction.JunctionFeature.start_lane_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JunctionFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string junction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_junction_id().data(), static_cast<int>(this->_internal_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.junction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_junction_id(), target);
  }

  // optional double junction_range = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_junction_range(), target);
  }

  // optional .apollo.prediction.LaneFeature enter_lane = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::enter_lane(this),
        _Internal::enter_lane(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_junction_exit_size()); i < n; i++) {
    const auto& repfield = this->_internal_junction_exit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double junction_mlp_feature = 5;
  for (int i = 0, n = this->_internal_junction_mlp_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_junction_mlp_feature(i), target);
  }

  // repeated int32 junction_mlp_label = 6;
  for (int i = 0, n = this->_internal_junction_mlp_label_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_junction_mlp_label(i), target);
  }

  // repeated double junction_mlp_probability = 7;
  for (int i = 0, n = this->_internal_junction_mlp_probability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_junction_mlp_probability(i), target);
  }

  // repeated string start_lane_id = 8;
  for (int i = 0, n = this->_internal_start_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_start_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.start_lane_id");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionFeature)
  return target;
}

size_t JunctionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  total_size += 1UL * this->_internal_junction_exit_size();
  for (const auto& msg : this->_impl_.junction_exit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double junction_mlp_feature = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_feature_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_junction_mlp_feature_size());
    total_size += data_size;
  }

  // repeated int32 junction_mlp_label = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.junction_mlp_label_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_junction_mlp_label_size());
    total_size += data_size;
  }

  // repeated double junction_mlp_probability = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_probability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_junction_mlp_probability_size());
    total_size += data_size;
  }

  // repeated string start_lane_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.start_lane_id_.size());
  for (int i = 0, n = _impl_.start_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.start_lane_id_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string junction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_junction_id());
    }

    // optional .apollo.prediction.LaneFeature enter_lane = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enter_lane_);
    }

    // optional double junction_range = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JunctionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JunctionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JunctionFeature::GetClassData() const { return &_class_data_; }

void JunctionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JunctionFeature *>(to)->MergeFrom(
      static_cast<const JunctionFeature &>(from));
}


void JunctionFeature::MergeFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.junction_exit_.MergeFrom(from._impl_.junction_exit_);
  _impl_.junction_mlp_feature_.MergeFrom(from._impl_.junction_mlp_feature_);
  _impl_.junction_mlp_label_.MergeFrom(from._impl_.junction_mlp_label_);
  _impl_.junction_mlp_probability_.MergeFrom(from._impl_.junction_mlp_probability_);
  _impl_.start_lane_id_.MergeFrom(from._impl_.start_lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_junction_id(from._internal_junction_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_enter_lane()->::apollo::prediction::LaneFeature::MergeFrom(from._internal_enter_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.junction_range_ = from._impl_.junction_range_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JunctionFeature::CopyFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionFeature::IsInitialized() const {
  return true;
}

void JunctionFeature::InternalSwap(JunctionFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.junction_exit_.InternalSwap(&other->_impl_.junction_exit_);
  _impl_.junction_mlp_feature_.InternalSwap(&other->_impl_.junction_mlp_feature_);
  _impl_.junction_mlp_label_.InternalSwap(&other->_impl_.junction_mlp_label_);
  _impl_.junction_mlp_probability_.InternalSwap(&other->_impl_.junction_mlp_probability_);
  _impl_.start_lane_id_.InternalSwap(&other->_impl_.start_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.junction_id_, lhs_arena,
      &other->_impl_.junction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JunctionFeature, _impl_.junction_range_)
      + sizeof(JunctionFeature::_impl_.junction_range_)
      - PROTOBUF_FIELD_OFFSET(JunctionFeature, _impl_.enter_lane_)>(
          reinterpret_cast<char*>(&_impl_.enter_lane_),
          reinterpret_cast<char*>(&other->_impl_.enter_lane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[3]);
}

// ===================================================================

class ObstaclePriority::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstaclePriority>()._impl_._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstaclePriority::ObstaclePriority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.priority_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstaclePriority)
}

inline void ObstaclePriority::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.priority_){2}
  };
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstaclePriority)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstaclePriority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstaclePriority::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstaclePriority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.priority_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstaclePriority::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstaclePriority_Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::apollo::prediction::ObstaclePriority_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstaclePriority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstaclePriority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstaclePriority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstaclePriority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstaclePriority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstaclePriority::GetClassData() const { return &_class_data_; }

void ObstaclePriority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstaclePriority *>(to)->MergeFrom(
      static_cast<const ObstaclePriority &>(from));
}


void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_priority()) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.priority_, other->_impl_.priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstaclePriority::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[4]);
}

// ===================================================================

class ObstacleInteractiveTag::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleInteractiveTag>()._impl_._has_bits_);
  static void set_has_interactive_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstacleInteractiveTag::ObstacleInteractiveTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ObstacleInteractiveTag)
}
ObstacleInteractiveTag::ObstacleInteractiveTag(const ObstacleInteractiveTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactive_tag_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interactive_tag_ = from._impl_.interactive_tag_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleInteractiveTag)
}

inline void ObstacleInteractiveTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactive_tag_){2}
  };
}

ObstacleInteractiveTag::~ObstacleInteractiveTag() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleInteractiveTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleInteractiveTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleInteractiveTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleInteractiveTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleInteractiveTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interactive_tag_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleInteractiveTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(val))) {
            _internal_set_interactive_tag(static_cast<::apollo::prediction::ObstacleInteractiveTag_InteractiveTag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleInteractiveTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleInteractiveTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      37, this->_internal_interactive_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleInteractiveTag)
  return target;
}

size_t ObstacleInteractiveTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleInteractiveTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interactive_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleInteractiveTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleInteractiveTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleInteractiveTag::GetClassData() const { return &_class_data_; }

void ObstacleInteractiveTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleInteractiveTag *>(to)->MergeFrom(
      static_cast<const ObstacleInteractiveTag &>(from));
}


void ObstacleInteractiveTag::MergeFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interactive_tag()) {
    _internal_set_interactive_tag(from._internal_interactive_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleInteractiveTag::CopyFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInteractiveTag::IsInitialized() const {
  return true;
}

void ObstacleInteractiveTag::InternalSwap(ObstacleInteractiveTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.interactive_tag_, other->_impl_.interactive_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleInteractiveTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[5]);
}

// ===================================================================

class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void Trajectory::clear_trajectory_point() {
  _impl_.trajectory_point_.Clear();
}
Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){from._impl_.trajectory_point_}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Trajectory)
}

inline void Trajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){arena}
    , decltype(_impl_.probability_){0}
  };
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Trajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_point_.~RepeatedPtrField();
}

void Trajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Trajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_point_.Clear();
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Trajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Trajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->_impl_.trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory::GetClassData() const { return &_class_data_; }

void Trajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trajectory *>(to)->MergeFrom(
      static_cast<const Trajectory &>(from));
}


void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_point_.MergeFrom(from._impl_.trajectory_point_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  swap(_impl_.probability_, other->_impl_.probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[6]);
}

// ===================================================================

class Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Feature>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::common::Point3D& position(const Feature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& front_position(const Feature* msg);
  static void set_has_front_position(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::common::Point3D& velocity(const Feature* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& raw_velocity(const Feature* msg);
  static void set_has_raw_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::common::Point3D& acceleration(const Feature* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::prediction::Lane& lane(const Feature* msg);
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::JunctionFeature& junction_feature(const Feature* msg);
  static void set_has_junction_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::common::Point3D& t_position(const Feature* msg);
  static void set_has_t_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& t_velocity(const Feature* msg);
  static void set_has_t_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_t_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_t_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::common::Point3D& t_acceleration(const Feature* msg);
  static void set_has_t_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_t_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_still(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const Feature* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag(const Feature* msg);
  static void set_has_interactive_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_near_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_adc_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::perception::PerceptionObstacle& adc_localization(const Feature* msg);
  static void set_has_adc_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::common::Point3D&
Feature::_Internal::position(const Feature* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::front_position(const Feature* msg) {
  return *msg->_impl_.front_position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::velocity(const Feature* msg) {
  return *msg->_impl_.velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::raw_velocity(const Feature* msg) {
  return *msg->_impl_.raw_velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::acceleration(const Feature* msg) {
  return *msg->_impl_.acceleration_;
}
const ::apollo::prediction::Lane&
Feature::_Internal::lane(const Feature* msg) {
  return *msg->_impl_.lane_;
}
const ::apollo::prediction::JunctionFeature&
Feature::_Internal::junction_feature(const Feature* msg) {
  return *msg->_impl_.junction_feature_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_position(const Feature* msg) {
  return *msg->_impl_.t_position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_velocity(const Feature* msg) {
  return *msg->_impl_.t_velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_acceleration(const Feature* msg) {
  return *msg->_impl_.t_acceleration_;
}
const ::apollo::prediction::ObstaclePriority&
Feature::_Internal::priority(const Feature* msg) {
  return *msg->_impl_.priority_;
}
const ::apollo::prediction::ObstacleInteractiveTag&
Feature::_Internal::interactive_tag(const Feature* msg) {
  return *msg->_impl_.interactive_tag_;
}
const ::apollo::perception::PerceptionObstacle&
Feature::_Internal::adc_localization(const Feature* msg) {
  return *msg->_impl_.adc_localization_;
}
void Feature::clear_polygon_point() {
  _impl_.polygon_point_.Clear();
}
void Feature::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_front_position() {
  if (_impl_.front_position_ != nullptr) _impl_.front_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Feature::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_raw_velocity() {
  if (_impl_.raw_velocity_ != nullptr) _impl_.raw_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Feature::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Feature::clear_t_position() {
  if (_impl_.t_position_ != nullptr) _impl_.t_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Feature::clear_t_velocity() {
  if (_impl_.t_velocity_ != nullptr) _impl_.t_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Feature::clear_t_acceleration() {
  if (_impl_.t_acceleration_ != nullptr) _impl_.t_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Feature::clear_future_trajectory_points() {
  _impl_.future_trajectory_points_.Clear();
}
void Feature::clear_short_term_predicted_trajectory_points() {
  _impl_.short_term_predicted_trajectory_points_.Clear();
}
void Feature::clear_adc_trajectory_point() {
  _impl_.adc_trajectory_point_.Clear();
}
void Feature::clear_adc_localization() {
  if (_impl_.adc_localization_ != nullptr) _impl_.adc_localization_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){from._impl_.polygon_point_}
    , decltype(_impl_.future_trajectory_points_){from._impl_.future_trajectory_points_}
    , decltype(_impl_.short_term_predicted_trajectory_points_){from._impl_.short_term_predicted_trajectory_points_}
    , decltype(_impl_.predicted_trajectory_){from._impl_.predicted_trajectory_}
    , decltype(_impl_.adc_trajectory_point_){from._impl_.adc_trajectory_point_}
    , decltype(_impl_.surrounding_lane_id_){from._impl_.surrounding_lane_id_}
    , decltype(_impl_.within_lane_id_){from._impl_.within_lane_id_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.lane_){nullptr}
    , decltype(_impl_.t_position_){nullptr}
    , decltype(_impl_.t_velocity_){nullptr}
    , decltype(_impl_.t_acceleration_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.junction_feature_){nullptr}
    , decltype(_impl_.front_position_){nullptr}
    , decltype(_impl_.raw_velocity_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.adc_localization_){nullptr}
    , decltype(_impl_.velocity_heading_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.acc_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.tracking_time_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.t_velocity_heading_){}
    , decltype(_impl_.t_speed_){}
    , decltype(_impl_.t_acc_){}
    , decltype(_impl_.label_update_time_delta_){}
    , decltype(_impl_.adc_timestamp_){}
    , decltype(_impl_.is_still_){}
    , decltype(_impl_.is_near_junction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::common::Point3D(*from._impl_.velocity_);
  }
  if (from._internal_has_acceleration()) {
    _impl_.acceleration_ = new ::apollo::common::Point3D(*from._impl_.acceleration_);
  }
  if (from._internal_has_lane()) {
    _impl_.lane_ = new ::apollo::prediction::Lane(*from._impl_.lane_);
  }
  if (from._internal_has_t_position()) {
    _impl_.t_position_ = new ::apollo::common::Point3D(*from._impl_.t_position_);
  }
  if (from._internal_has_t_velocity()) {
    _impl_.t_velocity_ = new ::apollo::common::Point3D(*from._impl_.t_velocity_);
  }
  if (from._internal_has_t_acceleration()) {
    _impl_.t_acceleration_ = new ::apollo::common::Point3D(*from._impl_.t_acceleration_);
  }
  if (from._internal_has_priority()) {
    _impl_.priority_ = new ::apollo::prediction::ObstaclePriority(*from._impl_.priority_);
  }
  if (from._internal_has_junction_feature()) {
    _impl_.junction_feature_ = new ::apollo::prediction::JunctionFeature(*from._impl_.junction_feature_);
  }
  if (from._internal_has_front_position()) {
    _impl_.front_position_ = new ::apollo::common::Point3D(*from._impl_.front_position_);
  }
  if (from._internal_has_raw_velocity()) {
    _impl_.raw_velocity_ = new ::apollo::common::Point3D(*from._impl_.raw_velocity_);
  }
  if (from._internal_has_interactive_tag()) {
    _impl_.interactive_tag_ = new ::apollo::prediction::ObstacleInteractiveTag(*from._impl_.interactive_tag_);
  }
  if (from._internal_has_adc_localization()) {
    _impl_.adc_localization_ = new ::apollo::perception::PerceptionObstacle(*from._impl_.adc_localization_);
  }
  ::memcpy(&_impl_.velocity_heading_, &from._impl_.velocity_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_near_junction_) -
    reinterpret_cast<char*>(&_impl_.velocity_heading_)) + sizeof(_impl_.is_near_junction_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Feature)
}

inline void Feature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){arena}
    , decltype(_impl_.future_trajectory_points_){arena}
    , decltype(_impl_.short_term_predicted_trajectory_points_){arena}
    , decltype(_impl_.predicted_trajectory_){arena}
    , decltype(_impl_.adc_trajectory_point_){arena}
    , decltype(_impl_.surrounding_lane_id_){arena}
    , decltype(_impl_.within_lane_id_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.lane_){nullptr}
    , decltype(_impl_.t_position_){nullptr}
    , decltype(_impl_.t_velocity_){nullptr}
    , decltype(_impl_.t_acceleration_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.junction_feature_){nullptr}
    , decltype(_impl_.front_position_){nullptr}
    , decltype(_impl_.raw_velocity_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.adc_localization_){nullptr}
    , decltype(_impl_.velocity_heading_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.acc_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.tracking_time_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.t_velocity_heading_){0}
    , decltype(_impl_.t_speed_){0}
    , decltype(_impl_.t_acc_){0}
    , decltype(_impl_.label_update_time_delta_){0}
    , decltype(_impl_.adc_timestamp_){0}
    , decltype(_impl_.is_still_){false}
    , decltype(_impl_.is_near_junction_){false}
  };
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_point_.~RepeatedPtrField();
  _impl_.future_trajectory_points_.~RepeatedPtrField();
  _impl_.short_term_predicted_trajectory_points_.~RepeatedPtrField();
  _impl_.predicted_trajectory_.~RepeatedPtrField();
  _impl_.adc_trajectory_point_.~RepeatedPtrField();
  _impl_.surrounding_lane_id_.~RepeatedPtrField();
  _impl_.within_lane_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.lane_;
  if (this != internal_default_instance()) delete _impl_.t_position_;
  if (this != internal_default_instance()) delete _impl_.t_velocity_;
  if (this != internal_default_instance()) delete _impl_.t_acceleration_;
  if (this != internal_default_instance()) delete _impl_.priority_;
  if (this != internal_default_instance()) delete _impl_.junction_feature_;
  if (this != internal_default_instance()) delete _impl_.front_position_;
  if (this != internal_default_instance()) delete _impl_.raw_velocity_;
  if (this != internal_default_instance()) delete _impl_.interactive_tag_;
  if (this != internal_default_instance()) delete _impl_.adc_localization_;
}

void Feature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_point_.Clear();
  _impl_.future_trajectory_points_.Clear();
  _impl_.short_term_predicted_trajectory_points_.Clear();
  _impl_.predicted_trajectory_.Clear();
  _impl_.adc_trajectory_point_.Clear();
  _impl_.surrounding_lane_id_.Clear();
  _impl_.within_lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lane_ != nullptr);
      _impl_.lane_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.t_position_ != nullptr);
      _impl_.t_position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.t_velocity_ != nullptr);
      _impl_.t_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.t_acceleration_ != nullptr);
      _impl_.t_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.priority_ != nullptr);
      _impl_.priority_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.junction_feature_ != nullptr);
      _impl_.junction_feature_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.front_position_ != nullptr);
      _impl_.front_position_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.raw_velocity_ != nullptr);
      _impl_.raw_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.interactive_tag_ != nullptr);
      _impl_.interactive_tag_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.adc_localization_ != nullptr);
      _impl_.adc_localization_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.velocity_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.acc_) -
        reinterpret_cast<char*>(&_impl_.velocity_heading_)) + sizeof(_impl_.acc_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.theta_)) + sizeof(_impl_.timestamp_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&_impl_.t_velocity_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_near_junction_) -
        reinterpret_cast<char*>(&_impl_.t_velocity_heading_)) + sizeof(_impl_.is_near_junction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity_heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_velocity_heading(&has_bits);
          _impl_.velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_acc(&has_bits);
          _impl_.acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_tracking_time(&has_bits);
          _impl_.tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Lane lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double t_velocity_heading = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_t_velocity_heading(&has_bits);
          _impl_.t_velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t_speed = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_t_speed(&has_bits);
          _impl_.t_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double t_acc = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_t_acc(&has_bits);
          _impl_.t_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_still = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_still(&has_bits);
          _impl_.is_still_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          _impl_.label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.JunctionFeature junction_feature = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D front_position = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D raw_velocity = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_near_junction = 29 [default = false];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_is_near_junction(&has_bits);
          _impl_.is_near_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D polygon_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_future_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_short_term_predicted_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string surrounding_lane_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_surrounding_lane_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.prediction.Feature.surrounding_lane_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string within_lane_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_within_lane_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.prediction.Feature.within_lane_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactive_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double adc_timestamp = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_adc_timestamp(&has_bits);
          _impl_.adc_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_velocity_heading(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc(), target);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_theta(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_tracking_time(), target);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  // optional .apollo.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::lane(this),
        _Internal::lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::t_position(this),
        _Internal::t_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::t_velocity(this),
        _Internal::t_velocity(this).GetCachedSize(), target, stream);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_t_velocity_heading(), target);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_t_speed(), target);
  }

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::t_acceleration(this),
        _Internal::t_acceleration(this).GetCachedSize(), target, stream);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_t_acc(), target);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_still(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_type(), target);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_label_update_time_delta(), target);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.JunctionFeature junction_feature = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::junction_feature(this),
        _Internal::junction_feature(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D front_position = 27;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::front_position(this),
        _Internal::front_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D raw_velocity = 28;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::raw_velocity(this),
        _Internal::raw_velocity(this).GetCachedSize(), target, stream);
  }

  // optional bool is_near_junction = 29 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_is_near_junction(), target);
  }

  // repeated .apollo.common.Point3D polygon_point = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_future_trajectory_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_future_trajectory_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_short_term_predicted_trajectory_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_short_term_predicted_trajectory_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predicted_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_predicted_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string surrounding_lane_id = 35;
  for (int i = 0, n = this->_internal_surrounding_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_surrounding_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.surrounding_lane_id");
    target = stream->WriteString(35, s, target);
  }

  // repeated string within_lane_id = 36;
  for (int i = 0, n = this->_internal_within_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_within_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.within_lane_id");
    target = stream->WriteString(36, s, target);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::interactive_tag(this),
        _Internal::interactive_tag(this).GetCachedSize(), target, stream);
  }

  // optional double adc_timestamp = 38;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_adc_timestamp(), target);
  }

  // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::adc_localization(this),
        _Internal::adc_localization(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D polygon_point = 30;
  total_size += 2UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->_impl_.polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  total_size += 2UL * this->_internal_future_trajectory_points_size();
  for (const auto& msg : this->_impl_.future_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  total_size += 2UL * this->_internal_short_term_predicted_trajectory_points_size();
  for (const auto& msg : this->_impl_.short_term_predicted_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  total_size += 2UL * this->_internal_predicted_trajectory_size();
  for (const auto& msg : this->_impl_.predicted_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  total_size += 2UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->_impl_.adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string surrounding_lane_id = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.surrounding_lane_id_.size());
  for (int i = 0, n = _impl_.surrounding_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.surrounding_lane_id_.Get(i));
  }

  // repeated string within_lane_id = 36;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.within_lane_id_.size());
  for (int i = 0, n = _impl_.within_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.within_lane_id_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // optional .apollo.prediction.Lane lane = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_);
    }

    // optional .apollo.common.Point3D t_position = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_position_);
    }

    // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_velocity_);
    }

    // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_acceleration_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.priority_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.prediction.JunctionFeature junction_feature = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.junction_feature_);
    }

    // optional .apollo.common.Point3D front_position = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.front_position_);
    }

    // optional .apollo.common.Point3D raw_velocity = 28;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.raw_velocity_);
    }

    // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactive_tag_);
    }

    // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adc_localization_);
    }

    // optional double velocity_heading = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double acc = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double theta = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double width = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double height = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double timestamp = 13;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double t_velocity_heading = 18 [deprecated = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double t_speed = 19 [deprecated = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double t_acc = 21 [deprecated = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double label_update_time_delta = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double adc_timestamp = 38;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_still = 22 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_near_junction = 29 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }

void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Feature *>(to)->MergeFrom(
      static_cast<const Feature &>(from));
}


void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_point_.MergeFrom(from._impl_.polygon_point_);
  _impl_.future_trajectory_points_.MergeFrom(from._impl_.future_trajectory_points_);
  _impl_.short_term_predicted_trajectory_points_.MergeFrom(from._impl_.short_term_predicted_trajectory_points_);
  _impl_.predicted_trajectory_.MergeFrom(from._impl_.predicted_trajectory_);
  _impl_.adc_trajectory_point_.MergeFrom(from._impl_.adc_trajectory_point_);
  _impl_.surrounding_lane_id_.MergeFrom(from._impl_.surrounding_lane_id_);
  _impl_.within_lane_id_.MergeFrom(from._impl_.within_lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lane()->::apollo::prediction::Lane::MergeFrom(from._internal_lane());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_t_position()->::apollo::common::Point3D::MergeFrom(from._internal_t_position());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_t_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_t_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_t_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_t_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_junction_feature()->::apollo::prediction::JunctionFeature::MergeFrom(from._internal_junction_feature());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_front_position()->::apollo::common::Point3D::MergeFrom(from._internal_front_position());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_raw_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_raw_velocity());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_interactive_tag()->::apollo::prediction::ObstacleInteractiveTag::MergeFrom(from._internal_interactive_tag());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_adc_localization()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_adc_localization());
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.velocity_heading_ = from._impl_.velocity_heading_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.acc_ = from._impl_.acc_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.tracking_time_ = from._impl_.tracking_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.t_velocity_heading_ = from._impl_.t_velocity_heading_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.t_speed_ = from._impl_.t_speed_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.t_acc_ = from._impl_.t_acc_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.label_update_time_delta_ = from._impl_.label_update_time_delta_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.adc_timestamp_ = from._impl_.adc_timestamp_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.is_still_ = from._impl_.is_still_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.is_near_junction_ = from._impl_.is_near_junction_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.future_trajectory_points_))
    return false;
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polygon_point_.InternalSwap(&other->_impl_.polygon_point_);
  _impl_.future_trajectory_points_.InternalSwap(&other->_impl_.future_trajectory_points_);
  _impl_.short_term_predicted_trajectory_points_.InternalSwap(&other->_impl_.short_term_predicted_trajectory_points_);
  _impl_.predicted_trajectory_.InternalSwap(&other->_impl_.predicted_trajectory_);
  _impl_.adc_trajectory_point_.InternalSwap(&other->_impl_.adc_trajectory_point_);
  _impl_.surrounding_lane_id_.InternalSwap(&other->_impl_.surrounding_lane_id_);
  _impl_.within_lane_id_.InternalSwap(&other->_impl_.within_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature, _impl_.is_near_junction_)
      + sizeof(Feature::_impl_.is_near_junction_)
      - PROTOBUF_FIELD_OFFSET(Feature, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[7]);
}

// ===================================================================

class ObstacleHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleHistory>()._impl_._has_bits_);
  static void set_has_is_trainable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstacleHistory::ObstacleHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ObstacleHistory)
}
ObstacleHistory::ObstacleHistory(const ObstacleHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_){from._impl_.feature_}
    , decltype(_impl_.is_trainable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.is_trainable_ = from._impl_.is_trainable_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleHistory)
}

inline void ObstacleHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_){arena}
    , decltype(_impl_.is_trainable_){false}
  };
}

ObstacleHistory::~ObstacleHistory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.~RepeatedPtrField();
}

void ObstacleHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _impl_.is_trainable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.Feature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trainable = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_trainable(&has_bits);
          _impl_.is_trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_trainable = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_trainable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleHistory)
  return target;
}

size_t ObstacleHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_impl_.feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_trainable = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleHistory::GetClassData() const { return &_class_data_; }

void ObstacleHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleHistory *>(to)->MergeFrom(
      static_cast<const ObstacleHistory &>(from));
}


void ObstacleHistory::MergeFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.feature_.MergeFrom(from._impl_.feature_);
  if (from._internal_has_is_trainable()) {
    _internal_set_is_trainable(from._internal_is_trainable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleHistory::CopyFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleHistory::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.feature_))
    return false;
  return true;
}

void ObstacleHistory::InternalSwap(ObstacleHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
  swap(_impl_.is_trainable_, other->_impl_.is_trainable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[8]);
}

// ===================================================================

class FrameEnv::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameEnv>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::ObstacleHistory& ego_history(const FrameEnv* msg);
  static void set_has_ego_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::prediction::ObstacleHistory&
FrameEnv::_Internal::ego_history(const FrameEnv* msg) {
  return *msg->_impl_.ego_history_;
}
FrameEnv::FrameEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.FrameEnv)
}
FrameEnv::FrameEnv(const FrameEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacles_history_){from._impl_.obstacles_history_}
    , decltype(_impl_.ego_history_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ego_history()) {
    _impl_.ego_history_ = new ::apollo::prediction::ObstacleHistory(*from._impl_.ego_history_);
  }
  _impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FrameEnv)
}

inline void FrameEnv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacles_history_){arena}
    , decltype(_impl_.ego_history_){nullptr}
    , decltype(_impl_.timestamp_){0}
  };
}

FrameEnv::~FrameEnv() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FrameEnv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacles_history_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ego_history_;
}

void FrameEnv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FrameEnv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacles_history_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ego_history_ != nullptr);
    _impl_.ego_history_->Clear();
  }
  _impl_.timestamp_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameEnv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleHistory ego_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameEnv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FrameEnv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional .apollo.prediction.ObstacleHistory ego_history = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ego_history(this),
        _Internal::ego_history(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FrameEnv)
  return target;
}

size_t FrameEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FrameEnv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  total_size += 1UL * this->_internal_obstacles_history_size();
  for (const auto& msg : this->_impl_.obstacles_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.prediction.ObstacleHistory ego_history = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ego_history_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameEnv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameEnv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameEnv::GetClassData() const { return &_class_data_; }

void FrameEnv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FrameEnv *>(to)->MergeFrom(
      static_cast<const FrameEnv &>(from));
}


void FrameEnv::MergeFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.obstacles_history_.MergeFrom(from._impl_.obstacles_history_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ego_history()->::apollo::prediction::ObstacleHistory::MergeFrom(from._internal_ego_history());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameEnv::CopyFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameEnv::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.obstacles_history_))
    return false;
  if (_internal_has_ego_history()) {
    if (!_impl_.ego_history_->IsInitialized()) return false;
  }
  return true;
}

void FrameEnv::InternalSwap(FrameEnv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obstacles_history_.InternalSwap(&other->_impl_.obstacles_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameEnv, _impl_.timestamp_)
      + sizeof(FrameEnv::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(FrameEnv, _impl_.ego_history_)>(
          reinterpret_cast<char*>(&_impl_.ego_history_),
          reinterpret_cast<char*>(&other->_impl_.ego_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameEnv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::Lane*
Arena::CreateMaybeMessage< ::apollo::prediction::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneFeature*
Arena::CreateMaybeMessage< ::apollo::prediction::LaneFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::JunctionExit*
Arena::CreateMaybeMessage< ::apollo::prediction::JunctionExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::JunctionExit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::JunctionFeature*
Arena::CreateMaybeMessage< ::apollo::prediction::JunctionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::JunctionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstaclePriority*
Arena::CreateMaybeMessage< ::apollo::prediction::ObstaclePriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ObstaclePriority >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleInteractiveTag*
Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleInteractiveTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ObstacleInteractiveTag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Trajectory*
Arena::CreateMaybeMessage< ::apollo::prediction::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Feature*
Arena::CreateMaybeMessage< ::apollo::prediction::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleHistory*
Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ObstacleHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::FrameEnv*
Arena::CreateMaybeMessage< ::apollo::prediction::FrameEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::FrameEnv >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
