// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_layers.proto

#include "modules/prediction/proto/network_layers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR TensorParameter::TensorParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorParameterDefaultTypeInternal() {}
  union {
    TensorParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorParameterDefaultTypeInternal _TensorParameter_default_instance_;
PROTOBUF_CONSTEXPR InputParameter::InputParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_shape_)*/{}
  , /*decltype(_impl_.dtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sparse_)*/false} {}
struct InputParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputParameterDefaultTypeInternal() {}
  union {
    InputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputParameterDefaultTypeInternal _InputParameter_default_instance_;
PROTOBUF_CONSTEXPR DenseParameter::DenseParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weights_)*/nullptr
  , /*decltype(_impl_.bias_)*/nullptr
  , /*decltype(_impl_.units_)*/0
  , /*decltype(_impl_.use_bias_)*/false} {}
struct DenseParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenseParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenseParameterDefaultTypeInternal() {}
  union {
    DenseParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenseParameterDefaultTypeInternal _DenseParameter_default_instance_;
PROTOBUF_CONSTEXPR BatchNormalizationParameter::BatchNormalizationParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mu_)*/nullptr
  , /*decltype(_impl_.sigma_)*/nullptr
  , /*decltype(_impl_.gamma_)*/nullptr
  , /*decltype(_impl_.beta_)*/nullptr
  , /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.center_)*/false
  , /*decltype(_impl_.scale_)*/false
  , /*decltype(_impl_.momentum_)*/0
  , /*decltype(_impl_.epsilon_)*/1e-05} {}
struct BatchNormalizationParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchNormalizationParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchNormalizationParameterDefaultTypeInternal() {}
  union {
    BatchNormalizationParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchNormalizationParameterDefaultTypeInternal _BatchNormalizationParameter_default_instance_;
PROTOBUF_CONSTEXPR LSTMParameter::LSTMParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recurrent_activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weights_input_)*/nullptr
  , /*decltype(_impl_.weights_forget_)*/nullptr
  , /*decltype(_impl_.weights_cell_)*/nullptr
  , /*decltype(_impl_.weights_output_)*/nullptr
  , /*decltype(_impl_.bias_input_)*/nullptr
  , /*decltype(_impl_.bias_forget_)*/nullptr
  , /*decltype(_impl_.bias_cell_)*/nullptr
  , /*decltype(_impl_.bias_output_)*/nullptr
  , /*decltype(_impl_.recurrent_weights_input_)*/nullptr
  , /*decltype(_impl_.recurrent_weights_forget_)*/nullptr
  , /*decltype(_impl_.recurrent_weights_cell_)*/nullptr
  , /*decltype(_impl_.recurrent_weights_output_)*/nullptr
  , /*decltype(_impl_.units_)*/0
  , /*decltype(_impl_.return_sequences_)*/false
  , /*decltype(_impl_.stateful_)*/false
  , /*decltype(_impl_.use_bias_)*/false
  , /*decltype(_impl_.go_backwards_)*/false
  , /*decltype(_impl_.unroll_)*/false
  , /*decltype(_impl_.implementation_)*/0
  , /*decltype(_impl_.unit_forget_bias_)*/true} {}
struct LSTMParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LSTMParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LSTMParameterDefaultTypeInternal() {}
  union {
    LSTMParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LSTMParameterDefaultTypeInternal _LSTMParameter_default_instance_;
PROTOBUF_CONSTEXPR ActivationParameter::ActivationParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ActivationParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivationParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivationParameterDefaultTypeInternal() {}
  union {
    ActivationParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivationParameterDefaultTypeInternal _ActivationParameter_default_instance_;
PROTOBUF_CONSTEXPR FlattenParameter::FlattenParameter(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct FlattenParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlattenParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlattenParameterDefaultTypeInternal() {}
  union {
    FlattenParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
PROTOBUF_CONSTEXPR ConcatenateParameter::ConcatenateParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_)*/0} {}
struct ConcatenateParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcatenateParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcatenateParameterDefaultTypeInternal() {}
  union {
    ConcatenateParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcatenateParameterDefaultTypeInternal _ConcatenateParameter_default_instance_;
PROTOBUF_CONSTEXPR LayerParameter::LayerParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_number_)*/0
  , /*decltype(_impl_.oneof_layers_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LayerParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerParameterDefaultTypeInternal() {}
  union {
    LayerParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _impl_.input_shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _impl_.sparse_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_.activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_.use_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_.weights_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _impl_.bias_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.epsilon_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.momentum_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.mu_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.gamma_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _impl_.beta_),
  8,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.return_sequences_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.stateful_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.recurrent_activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.use_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.unit_forget_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.go_backwards_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.unroll_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.implementation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.weights_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.weights_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.weights_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.weights_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.bias_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.bias_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.bias_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.bias_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.recurrent_weights_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.recurrent_weights_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.recurrent_weights_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _impl_.recurrent_weights_output_),
  14,
  15,
  16,
  0,
  1,
  17,
  21,
  18,
  19,
  20,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, _impl_.activation_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, _impl_.axis_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_.order_number_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _impl_.oneof_layers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::prediction::TensorParameter)},
  { 8, 17, -1, sizeof(::apollo::prediction::InputParameter)},
  { 20, 31, -1, sizeof(::apollo::prediction::DenseParameter)},
  { 36, 51, -1, sizeof(::apollo::prediction::BatchNormalizationParameter)},
  { 60, 88, -1, sizeof(::apollo::prediction::LSTMParameter)},
  { 110, 117, -1, sizeof(::apollo::prediction::ActivationParameter)},
  { 118, -1, -1, sizeof(::apollo::prediction::FlattenParameter)},
  { 124, 131, -1, sizeof(::apollo::prediction::ConcatenateParameter)},
  { 132, 149, -1, sizeof(::apollo::prediction::LayerParameter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_TensorParameter_default_instance_._instance,
  &::apollo::prediction::_InputParameter_default_instance_._instance,
  &::apollo::prediction::_DenseParameter_default_instance_._instance,
  &::apollo::prediction::_BatchNormalizationParameter_default_instance_._instance,
  &::apollo::prediction::_LSTMParameter_default_instance_._instance,
  &::apollo::prediction::_ActivationParameter_default_instance_._instance,
  &::apollo::prediction::_FlattenParameter_default_instance_._instance,
  &::apollo::prediction::_ConcatenateParameter_default_instance_._instance,
  &::apollo::prediction::_LayerParameter_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/prediction/proto/network_layer"
  "s.proto\022\021apollo.prediction\"2\n\017TensorPara"
  "meter\022\020\n\004data\030\001 \003(\002B\002\020\001\022\r\n\005shape\030\002 \003(\005\"D"
  "\n\016InputParameter\022\023\n\013input_shape\030\001 \003(\005\022\r\n"
  "\005dtype\030\002 \001(\t\022\016\n\006sparse\030\003 \001(\010\"\254\001\n\016DensePa"
  "rameter\022\r\n\005units\030\001 \001(\005\022\022\n\nactivation\030\002 \001"
  "(\t\022\020\n\010use_bias\030\003 \001(\010\0223\n\007weights\030\004 \001(\0132\"."
  "apollo.prediction.TensorParameter\0220\n\004bia"
  "s\030\005 \001(\0132\".apollo.prediction.TensorParame"
  "ter\"\274\002\n\033BatchNormalizationParameter\022\026\n\007e"
  "psilon\030\001 \001(\001:\0051e-05\022\014\n\004axis\030\002 \001(\005\022\016\n\006cen"
  "ter\030\003 \001(\010\022\r\n\005scale\030\004 \001(\010\022\020\n\010momentum\030\005 \001"
  "(\002\022.\n\002mu\030\006 \001(\0132\".apollo.prediction.Tenso"
  "rParameter\0221\n\005sigma\030\007 \001(\0132\".apollo.predi"
  "ction.TensorParameter\0221\n\005gamma\030\010 \001(\0132\".a"
  "pollo.prediction.TensorParameter\0220\n\004beta"
  "\030\t \001(\0132\".apollo.prediction.TensorParamet"
  "er\"\340\007\n\rLSTMParameter\022\r\n\005units\030\001 \001(\005\022\030\n\020r"
  "eturn_sequences\030\002 \001(\010\022\020\n\010stateful\030\003 \001(\010\022"
  "\022\n\nactivation\030\004 \001(\t\022\034\n\024recurrent_activat"
  "ion\030\005 \001(\t\022\020\n\010use_bias\030\006 \001(\010\022\036\n\020unit_forg"
  "et_bias\030\007 \001(\010:\004true\022\033\n\014go_backwards\030\010 \001("
  "\010:\005false\022\025\n\006unroll\030\t \001(\010:\005false\022\031\n\016imple"
  "mentation\030\n \001(\005:\0010\0229\n\rweights_input\030\017 \001("
  "\0132\".apollo.prediction.TensorParameter\022:\n"
  "\016weights_forget\030\020 \001(\0132\".apollo.predictio"
  "n.TensorParameter\0228\n\014weights_cell\030\021 \001(\0132"
  "\".apollo.prediction.TensorParameter\022:\n\016w"
  "eights_output\030\022 \001(\0132\".apollo.prediction."
  "TensorParameter\0226\n\nbias_input\030\023 \001(\0132\".ap"
  "ollo.prediction.TensorParameter\0227\n\013bias_"
  "forget\030\024 \001(\0132\".apollo.prediction.TensorP"
  "arameter\0225\n\tbias_cell\030\025 \001(\0132\".apollo.pre"
  "diction.TensorParameter\0227\n\013bias_output\030\026"
  " \001(\0132\".apollo.prediction.TensorParameter"
  "\022C\n\027recurrent_weights_input\030\031 \001(\0132\".apol"
  "lo.prediction.TensorParameter\022D\n\030recurre"
  "nt_weights_forget\030\032 \001(\0132\".apollo.predict"
  "ion.TensorParameter\022B\n\026recurrent_weights"
  "_cell\030\033 \001(\0132\".apollo.prediction.TensorPa"
  "rameter\022D\n\030recurrent_weights_output\030\034 \001("
  "\0132\".apollo.prediction.TensorParameter\")\n"
  "\023ActivationParameter\022\022\n\nactivation\030\001 \001(\t"
  "\"\022\n\020FlattenParameter\"$\n\024ConcatenateParam"
  "eter\022\014\n\004axis\030\001 \001(\005\"\361\003\n\016LayerParameter\022\014\n"
  "\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\024\n\014order_numbe"
  "r\030\003 \001(\005\0222\n\005input\030\004 \001(\0132!.apollo.predicti"
  "on.InputParameterH\000\022<\n\nactivation\030\005 \001(\0132"
  "&.apollo.prediction.ActivationParameterH"
  "\000\0222\n\005dense\030\006 \001(\0132!.apollo.prediction.Den"
  "seParameterH\000\022M\n\023batch_normalization\030\007 \001"
  "(\0132..apollo.prediction.BatchNormalizatio"
  "nParameterH\000\0220\n\004lstm\030\010 \001(\0132 .apollo.pred"
  "iction.LSTMParameterH\000\0226\n\007flatten\030\t \001(\0132"
  "#.apollo.prediction.FlattenParameterH\000\022>"
  "\n\013concatenate\030\n \001(\0132\'.apollo.prediction."
  "ConcatenateParameterH\000B\016\n\014oneof_layers"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = {
    false, false, 2278, descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
    "modules/prediction/proto/network_layers.proto",
    &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto(&descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class TensorParameter::_Internal {
 public:
};

TensorParameter::TensorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.TensorParameter)
}
TensorParameter::TensorParameter(const TensorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.TensorParameter)
}

inline void TensorParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TensorParameter::~TensorParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.TensorParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.shape_.~RepeatedField();
}

void TensorParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.TensorParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.TensorParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shape(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.TensorParameter)
  return target;
}

size_t TensorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.TensorParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TensorParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorParameter::GetClassData() const { return &_class_data_; }

void TensorParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TensorParameter *>(to)->MergeFrom(
      static_cast<const TensorParameter &>(from));
}


void TensorParameter::MergeFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.data_.MergeFrom(from._impl_.data_);
  _impl_.shape_.MergeFrom(from._impl_.shape_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorParameter::CopyFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParameter::IsInitialized() const {
  return true;
}

void TensorParameter::InternalSwap(TensorParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[0]);
}

// ===================================================================

class InputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InputParameter>()._impl_._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputParameter::InputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_shape_){from._impl_.input_shape_}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.sparse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dtype()) {
    _impl_.dtype_.Set(from._internal_dtype(), 
      GetArenaForAllocation());
  }
  _impl_.sparse_ = from._impl_.sparse_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.InputParameter)
}

inline void InputParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_shape_){arena}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.sparse_){false}
  };
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.InputParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_shape_.~RepeatedField();
  _impl_.dtype_.Destroy();
}

void InputParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.InputParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_shape_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dtype_.ClearNonDefaultToEmpty();
  }
  _impl_.sparse_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 input_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.InputParameter.dtype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sparse(&has_bits);
          _impl_.sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.InputParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  for (int i = 0, n = this->_internal_input_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_input_shape(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dtype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.InputParameter.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // optional bool sparse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_sparse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.InputParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_shape_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dtype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dtype());
    }

    // optional bool sparse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputParameter::GetClassData() const { return &_class_data_; }

void InputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InputParameter *>(to)->MergeFrom(
      static_cast<const InputParameter &>(from));
}


void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.input_shape_.MergeFrom(from._impl_.input_shape_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dtype(from._internal_dtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sparse_ = from._impl_.sparse_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_shape_.InternalSwap(&other->_impl_.input_shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtype_, lhs_arena,
      &other->_impl_.dtype_, rhs_arena
  );
  swap(_impl_.sparse_, other->_impl_.sparse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[1]);
}

// ===================================================================

class DenseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseParameter>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::TensorParameter& weights(const DenseParameter* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::TensorParameter& bias(const DenseParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::prediction::TensorParameter&
DenseParameter::_Internal::weights(const DenseParameter* msg) {
  return *msg->_impl_.weights_;
}
const ::apollo::prediction::TensorParameter&
DenseParameter::_Internal::bias(const DenseParameter* msg) {
  return *msg->_impl_.bias_;
}
DenseParameter::DenseParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.DenseParameter)
}
DenseParameter::DenseParameter(const DenseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.units_){}
    , decltype(_impl_.use_bias_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation()) {
    _impl_.activation_.Set(from._internal_activation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_weights()) {
    _impl_.weights_ = new ::apollo::prediction::TensorParameter(*from._impl_.weights_);
  }
  if (from._internal_has_bias()) {
    _impl_.bias_ = new ::apollo::prediction::TensorParameter(*from._impl_.bias_);
  }
  ::memcpy(&_impl_.units_, &from._impl_.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_bias_) -
    reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.use_bias_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.DenseParameter)
}

inline void DenseParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.weights_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.units_){0}
    , decltype(_impl_.use_bias_){false}
  };
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenseParameter::~DenseParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.DenseParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenseParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weights_;
  if (this != internal_default_instance()) delete _impl_.bias_;
}

void DenseParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.DenseParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.activation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.weights_ != nullptr);
      _impl_.weights_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.bias_ != nullptr);
      _impl_.bias_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_bias_) -
        reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.use_bias_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenseParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.DenseParameter.activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_bias(&has_bits);
          _impl_.use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DenseParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.DenseParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional string activation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.DenseParameter.activation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activation(), target);
  }

  // optional bool use_bias = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_use_bias(), target);
  }

  // optional .apollo.prediction.TensorParameter weights = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::weights(this),
        _Internal::weights(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bias(this),
        _Internal::bias(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.DenseParameter)
  return target;
}

size_t DenseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.DenseParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string activation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional .apollo.prediction.TensorParameter weights = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_);
    }

    // optional .apollo.prediction.TensorParameter bias = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_units());
    }

    // optional bool use_bias = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenseParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DenseParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenseParameter::GetClassData() const { return &_class_data_; }

void DenseParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DenseParameter *>(to)->MergeFrom(
      static_cast<const DenseParameter &>(from));
}


void DenseParameter::MergeFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activation(from._internal_activation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weights()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bias()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.units_ = from._impl_.units_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.use_bias_ = from._impl_.use_bias_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenseParameter::CopyFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParameter::IsInitialized() const {
  return true;
}

void DenseParameter::InternalSwap(DenseParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activation_, lhs_arena,
      &other->_impl_.activation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DenseParameter, _impl_.use_bias_)
      + sizeof(DenseParameter::_impl_.use_bias_)
      - PROTOBUF_FIELD_OFFSET(DenseParameter, _impl_.weights_)>(
          reinterpret_cast<char*>(&_impl_.weights_),
          reinterpret_cast<char*>(&other->_impl_.weights_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[2]);
}

// ===================================================================

class BatchNormalizationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNormalizationParameter>()._impl_._has_bits_);
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_momentum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::TensorParameter& mu(const BatchNormalizationParameter* msg);
  static void set_has_mu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::TensorParameter& sigma(const BatchNormalizationParameter* msg);
  static void set_has_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::TensorParameter& gamma(const BatchNormalizationParameter* msg);
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::TensorParameter& beta(const BatchNormalizationParameter* msg);
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::mu(const BatchNormalizationParameter* msg) {
  return *msg->_impl_.mu_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::sigma(const BatchNormalizationParameter* msg) {
  return *msg->_impl_.sigma_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::gamma(const BatchNormalizationParameter* msg) {
  return *msg->_impl_.gamma_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::beta(const BatchNormalizationParameter* msg) {
  return *msg->_impl_.beta_;
}
BatchNormalizationParameter::BatchNormalizationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.BatchNormalizationParameter)
}
BatchNormalizationParameter::BatchNormalizationParameter(const BatchNormalizationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mu_){nullptr}
    , decltype(_impl_.sigma_){nullptr}
    , decltype(_impl_.gamma_){nullptr}
    , decltype(_impl_.beta_){nullptr}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.center_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.momentum_){}
    , decltype(_impl_.epsilon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mu()) {
    _impl_.mu_ = new ::apollo::prediction::TensorParameter(*from._impl_.mu_);
  }
  if (from._internal_has_sigma()) {
    _impl_.sigma_ = new ::apollo::prediction::TensorParameter(*from._impl_.sigma_);
  }
  if (from._internal_has_gamma()) {
    _impl_.gamma_ = new ::apollo::prediction::TensorParameter(*from._impl_.gamma_);
  }
  if (from._internal_has_beta()) {
    _impl_.beta_ = new ::apollo::prediction::TensorParameter(*from._impl_.beta_);
  }
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.epsilon_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.epsilon_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.BatchNormalizationParameter)
}

inline void BatchNormalizationParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mu_){nullptr}
    , decltype(_impl_.sigma_){nullptr}
    , decltype(_impl_.gamma_){nullptr}
    , decltype(_impl_.beta_){nullptr}
    , decltype(_impl_.axis_){0}
    , decltype(_impl_.center_){false}
    , decltype(_impl_.scale_){false}
    , decltype(_impl_.momentum_){0}
    , decltype(_impl_.epsilon_){1e-05}
  };
}

BatchNormalizationParameter::~BatchNormalizationParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.BatchNormalizationParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchNormalizationParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mu_;
  if (this != internal_default_instance()) delete _impl_.sigma_;
  if (this != internal_default_instance()) delete _impl_.gamma_;
  if (this != internal_default_instance()) delete _impl_.beta_;
}

void BatchNormalizationParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchNormalizationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.BatchNormalizationParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.mu_ != nullptr);
      _impl_.mu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sigma_ != nullptr);
      _impl_.sigma_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.gamma_ != nullptr);
      _impl_.gamma_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.beta_ != nullptr);
      _impl_.beta_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.axis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.momentum_) -
        reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.momentum_));
  }
  _impl_.epsilon_ = 1e-05;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchNormalizationParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double epsilon = 1 [default = 1e-05];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_epsilon(&has_bits);
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_center(&has_bits);
          _impl_.center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float momentum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_momentum(&has_bits);
          _impl_.momentum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter mu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter sigma = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigma(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter gamma = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter beta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_beta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchNormalizationParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.BatchNormalizationParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double epsilon = 1 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_epsilon(), target);
  }

  // optional int32 axis = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional bool center = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_center(), target);
  }

  // optional bool scale = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_scale(), target);
  }

  // optional float momentum = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_momentum(), target);
  }

  // optional .apollo.prediction.TensorParameter mu = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::mu(this),
        _Internal::mu(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter sigma = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::sigma(this),
        _Internal::sigma(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter gamma = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::gamma(this),
        _Internal::gamma(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter beta = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::beta(this),
        _Internal::beta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.BatchNormalizationParameter)
  return target;
}

size_t BatchNormalizationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.BatchNormalizationParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.prediction.TensorParameter mu = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mu_);
    }

    // optional .apollo.prediction.TensorParameter sigma = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sigma_);
    }

    // optional .apollo.prediction.TensorParameter gamma = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamma_);
    }

    // optional .apollo.prediction.TensorParameter beta = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.beta_);
    }

    // optional int32 axis = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
    }

    // optional bool center = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool scale = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float momentum = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional double epsilon = 1 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchNormalizationParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchNormalizationParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchNormalizationParameter::GetClassData() const { return &_class_data_; }

void BatchNormalizationParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchNormalizationParameter *>(to)->MergeFrom(
      static_cast<const BatchNormalizationParameter &>(from));
}


void BatchNormalizationParameter::MergeFrom(const BatchNormalizationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.BatchNormalizationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mu()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_mu());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sigma()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_sigma());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gamma()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_gamma());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_beta()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_beta());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.center_ = from._impl_.center_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.momentum_ = from._impl_.momentum_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_epsilon(from._internal_epsilon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchNormalizationParameter::CopyFrom(const BatchNormalizationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.BatchNormalizationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormalizationParameter::IsInitialized() const {
  return true;
}

void BatchNormalizationParameter::InternalSwap(BatchNormalizationParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchNormalizationParameter, _impl_.momentum_)
      + sizeof(BatchNormalizationParameter::_impl_.momentum_)
      - PROTOBUF_FIELD_OFFSET(BatchNormalizationParameter, _impl_.mu_)>(
          reinterpret_cast<char*>(&_impl_.mu_),
          reinterpret_cast<char*>(&other->_impl_.mu_));
  swap(_impl_.epsilon_, other->_impl_.epsilon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNormalizationParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[3]);
}

// ===================================================================

class LSTMParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LSTMParameter>()._impl_._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_return_sequences(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_stateful(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recurrent_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_unit_forget_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_go_backwards(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_unroll(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_implementation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::prediction::TensorParameter& weights_input(const LSTMParameter* msg);
  static void set_has_weights_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::TensorParameter& weights_forget(const LSTMParameter* msg);
  static void set_has_weights_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::TensorParameter& weights_cell(const LSTMParameter* msg);
  static void set_has_weights_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::TensorParameter& weights_output(const LSTMParameter* msg);
  static void set_has_weights_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::prediction::TensorParameter& bias_input(const LSTMParameter* msg);
  static void set_has_bias_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::prediction::TensorParameter& bias_forget(const LSTMParameter* msg);
  static void set_has_bias_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::TensorParameter& bias_cell(const LSTMParameter* msg);
  static void set_has_bias_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::prediction::TensorParameter& bias_output(const LSTMParameter* msg);
  static void set_has_bias_output(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_input(const LSTMParameter* msg);
  static void set_has_recurrent_weights_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_forget(const LSTMParameter* msg);
  static void set_has_recurrent_weights_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_cell(const LSTMParameter* msg);
  static void set_has_recurrent_weights_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_output(const LSTMParameter* msg);
  static void set_has_recurrent_weights_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_input(const LSTMParameter* msg) {
  return *msg->_impl_.weights_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_forget(const LSTMParameter* msg) {
  return *msg->_impl_.weights_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_cell(const LSTMParameter* msg) {
  return *msg->_impl_.weights_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_output(const LSTMParameter* msg) {
  return *msg->_impl_.weights_output_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_input(const LSTMParameter* msg) {
  return *msg->_impl_.bias_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_forget(const LSTMParameter* msg) {
  return *msg->_impl_.bias_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_cell(const LSTMParameter* msg) {
  return *msg->_impl_.bias_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_output(const LSTMParameter* msg) {
  return *msg->_impl_.bias_output_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_input(const LSTMParameter* msg) {
  return *msg->_impl_.recurrent_weights_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_forget(const LSTMParameter* msg) {
  return *msg->_impl_.recurrent_weights_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_cell(const LSTMParameter* msg) {
  return *msg->_impl_.recurrent_weights_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_output(const LSTMParameter* msg) {
  return *msg->_impl_.recurrent_weights_output_;
}
LSTMParameter::LSTMParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LSTMParameter)
}
LSTMParameter::LSTMParameter(const LSTMParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.recurrent_activation_){}
    , decltype(_impl_.weights_input_){nullptr}
    , decltype(_impl_.weights_forget_){nullptr}
    , decltype(_impl_.weights_cell_){nullptr}
    , decltype(_impl_.weights_output_){nullptr}
    , decltype(_impl_.bias_input_){nullptr}
    , decltype(_impl_.bias_forget_){nullptr}
    , decltype(_impl_.bias_cell_){nullptr}
    , decltype(_impl_.bias_output_){nullptr}
    , decltype(_impl_.recurrent_weights_input_){nullptr}
    , decltype(_impl_.recurrent_weights_forget_){nullptr}
    , decltype(_impl_.recurrent_weights_cell_){nullptr}
    , decltype(_impl_.recurrent_weights_output_){nullptr}
    , decltype(_impl_.units_){}
    , decltype(_impl_.return_sequences_){}
    , decltype(_impl_.stateful_){}
    , decltype(_impl_.use_bias_){}
    , decltype(_impl_.go_backwards_){}
    , decltype(_impl_.unroll_){}
    , decltype(_impl_.implementation_){}
    , decltype(_impl_.unit_forget_bias_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation()) {
    _impl_.activation_.Set(from._internal_activation(), 
      GetArenaForAllocation());
  }
  _impl_.recurrent_activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recurrent_activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recurrent_activation()) {
    _impl_.recurrent_activation_.Set(from._internal_recurrent_activation(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_weights_input()) {
    _impl_.weights_input_ = new ::apollo::prediction::TensorParameter(*from._impl_.weights_input_);
  }
  if (from._internal_has_weights_forget()) {
    _impl_.weights_forget_ = new ::apollo::prediction::TensorParameter(*from._impl_.weights_forget_);
  }
  if (from._internal_has_weights_cell()) {
    _impl_.weights_cell_ = new ::apollo::prediction::TensorParameter(*from._impl_.weights_cell_);
  }
  if (from._internal_has_weights_output()) {
    _impl_.weights_output_ = new ::apollo::prediction::TensorParameter(*from._impl_.weights_output_);
  }
  if (from._internal_has_bias_input()) {
    _impl_.bias_input_ = new ::apollo::prediction::TensorParameter(*from._impl_.bias_input_);
  }
  if (from._internal_has_bias_forget()) {
    _impl_.bias_forget_ = new ::apollo::prediction::TensorParameter(*from._impl_.bias_forget_);
  }
  if (from._internal_has_bias_cell()) {
    _impl_.bias_cell_ = new ::apollo::prediction::TensorParameter(*from._impl_.bias_cell_);
  }
  if (from._internal_has_bias_output()) {
    _impl_.bias_output_ = new ::apollo::prediction::TensorParameter(*from._impl_.bias_output_);
  }
  if (from._internal_has_recurrent_weights_input()) {
    _impl_.recurrent_weights_input_ = new ::apollo::prediction::TensorParameter(*from._impl_.recurrent_weights_input_);
  }
  if (from._internal_has_recurrent_weights_forget()) {
    _impl_.recurrent_weights_forget_ = new ::apollo::prediction::TensorParameter(*from._impl_.recurrent_weights_forget_);
  }
  if (from._internal_has_recurrent_weights_cell()) {
    _impl_.recurrent_weights_cell_ = new ::apollo::prediction::TensorParameter(*from._impl_.recurrent_weights_cell_);
  }
  if (from._internal_has_recurrent_weights_output()) {
    _impl_.recurrent_weights_output_ = new ::apollo::prediction::TensorParameter(*from._impl_.recurrent_weights_output_);
  }
  ::memcpy(&_impl_.units_, &from._impl_.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_forget_bias_) -
    reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.unit_forget_bias_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LSTMParameter)
}

inline void LSTMParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.recurrent_activation_){}
    , decltype(_impl_.weights_input_){nullptr}
    , decltype(_impl_.weights_forget_){nullptr}
    , decltype(_impl_.weights_cell_){nullptr}
    , decltype(_impl_.weights_output_){nullptr}
    , decltype(_impl_.bias_input_){nullptr}
    , decltype(_impl_.bias_forget_){nullptr}
    , decltype(_impl_.bias_cell_){nullptr}
    , decltype(_impl_.bias_output_){nullptr}
    , decltype(_impl_.recurrent_weights_input_){nullptr}
    , decltype(_impl_.recurrent_weights_forget_){nullptr}
    , decltype(_impl_.recurrent_weights_cell_){nullptr}
    , decltype(_impl_.recurrent_weights_output_){nullptr}
    , decltype(_impl_.units_){0}
    , decltype(_impl_.return_sequences_){false}
    , decltype(_impl_.stateful_){false}
    , decltype(_impl_.use_bias_){false}
    , decltype(_impl_.go_backwards_){false}
    , decltype(_impl_.unroll_){false}
    , decltype(_impl_.implementation_){0}
    , decltype(_impl_.unit_forget_bias_){true}
  };
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recurrent_activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recurrent_activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LSTMParameter::~LSTMParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LSTMParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LSTMParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activation_.Destroy();
  _impl_.recurrent_activation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.weights_input_;
  if (this != internal_default_instance()) delete _impl_.weights_forget_;
  if (this != internal_default_instance()) delete _impl_.weights_cell_;
  if (this != internal_default_instance()) delete _impl_.weights_output_;
  if (this != internal_default_instance()) delete _impl_.bias_input_;
  if (this != internal_default_instance()) delete _impl_.bias_forget_;
  if (this != internal_default_instance()) delete _impl_.bias_cell_;
  if (this != internal_default_instance()) delete _impl_.bias_output_;
  if (this != internal_default_instance()) delete _impl_.recurrent_weights_input_;
  if (this != internal_default_instance()) delete _impl_.recurrent_weights_forget_;
  if (this != internal_default_instance()) delete _impl_.recurrent_weights_cell_;
  if (this != internal_default_instance()) delete _impl_.recurrent_weights_output_;
}

void LSTMParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LSTMParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LSTMParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.activation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.recurrent_activation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.weights_input_ != nullptr);
      _impl_.weights_input_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.weights_forget_ != nullptr);
      _impl_.weights_forget_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.weights_cell_ != nullptr);
      _impl_.weights_cell_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.weights_output_ != nullptr);
      _impl_.weights_output_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.bias_input_ != nullptr);
      _impl_.bias_input_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.bias_forget_ != nullptr);
      _impl_.bias_forget_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.bias_cell_ != nullptr);
      _impl_.bias_cell_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.bias_output_ != nullptr);
      _impl_.bias_output_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.recurrent_weights_input_ != nullptr);
      _impl_.recurrent_weights_input_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.recurrent_weights_forget_ != nullptr);
      _impl_.recurrent_weights_forget_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.recurrent_weights_cell_ != nullptr);
      _impl_.recurrent_weights_cell_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.recurrent_weights_output_ != nullptr);
      _impl_.recurrent_weights_output_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.return_sequences_) -
        reinterpret_cast<char*>(&_impl_.units_)) + sizeof(_impl_.return_sequences_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.stateful_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.implementation_) -
        reinterpret_cast<char*>(&_impl_.stateful_)) + sizeof(_impl_.implementation_));
    _impl_.unit_forget_bias_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LSTMParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          _impl_.units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_sequences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_return_sequences(&has_bits);
          _impl_.return_sequences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stateful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stateful(&has_bits);
          _impl_.stateful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string activation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LSTMParameter.activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string recurrent_activation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_recurrent_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LSTMParameter.recurrent_activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_bias = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_bias(&has_bits);
          _impl_.use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unit_forget_bias = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unit_forget_bias(&has_bits);
          _impl_.unit_forget_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool go_backwards = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_go_backwards(&has_bits);
          _impl_.go_backwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unroll = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_unroll(&has_bits);
          _impl_.unroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 implementation = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_implementation(&has_bits);
          _impl_.implementation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_input = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_forget = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_forget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_cell = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_output = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_input = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_forget = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_forget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_cell = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_output = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_forget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LSTMParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LSTMParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional bool return_sequences = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_return_sequences(), target);
  }

  // optional bool stateful = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_stateful(), target);
  }

  // optional string activation = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LSTMParameter.activation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activation(), target);
  }

  // optional string recurrent_activation = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recurrent_activation().data(), static_cast<int>(this->_internal_recurrent_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LSTMParameter.recurrent_activation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_recurrent_activation(), target);
  }

  // optional bool use_bias = 6;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_bias(), target);
  }

  // optional bool unit_forget_bias = 7 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_unit_forget_bias(), target);
  }

  // optional bool go_backwards = 8 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_go_backwards(), target);
  }

  // optional bool unroll = 9 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_unroll(), target);
  }

  // optional int32 implementation = 10 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_implementation(), target);
  }

  // optional .apollo.prediction.TensorParameter weights_input = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::weights_input(this),
        _Internal::weights_input(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_forget = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::weights_forget(this),
        _Internal::weights_forget(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_cell = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::weights_cell(this),
        _Internal::weights_cell(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_output = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::weights_output(this),
        _Internal::weights_output(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_input = 19;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::bias_input(this),
        _Internal::bias_input(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_forget = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::bias_forget(this),
        _Internal::bias_forget(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_cell = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::bias_cell(this),
        _Internal::bias_cell(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_output = 22;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::bias_output(this),
        _Internal::bias_output(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::recurrent_weights_input(this),
        _Internal::recurrent_weights_input(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::recurrent_weights_forget(this),
        _Internal::recurrent_weights_forget(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::recurrent_weights_cell(this),
        _Internal::recurrent_weights_cell(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::recurrent_weights_output(this),
        _Internal::recurrent_weights_output(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LSTMParameter)
  return target;
}

size_t LSTMParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LSTMParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string activation = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional string recurrent_activation = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recurrent_activation());
    }

    // optional .apollo.prediction.TensorParameter weights_input = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_input_);
    }

    // optional .apollo.prediction.TensorParameter weights_forget = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_forget_);
    }

    // optional .apollo.prediction.TensorParameter weights_cell = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_cell_);
    }

    // optional .apollo.prediction.TensorParameter weights_output = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weights_output_);
    }

    // optional .apollo.prediction.TensorParameter bias_input = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_input_);
    }

    // optional .apollo.prediction.TensorParameter bias_forget = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_forget_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.prediction.TensorParameter bias_cell = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_cell_);
    }

    // optional .apollo.prediction.TensorParameter bias_output = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_output_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recurrent_weights_input_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recurrent_weights_forget_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recurrent_weights_cell_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recurrent_weights_output_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_units());
    }

    // optional bool return_sequences = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool stateful = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool use_bias = 6;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool go_backwards = 8 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool unroll = 9 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional int32 implementation = 10 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_implementation());
    }

    // optional bool unit_forget_bias = 7 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LSTMParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LSTMParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LSTMParameter::GetClassData() const { return &_class_data_; }

void LSTMParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LSTMParameter *>(to)->MergeFrom(
      static_cast<const LSTMParameter &>(from));
}


void LSTMParameter::MergeFrom(const LSTMParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LSTMParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_activation(from._internal_activation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_recurrent_activation(from._internal_recurrent_activation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_weights_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_input());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_weights_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_forget());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_weights_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_cell());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_weights_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_output());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bias_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_input());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_bias_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_forget());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_bias_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_cell());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_bias_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_output());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_recurrent_weights_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_input());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_recurrent_weights_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_forget());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_recurrent_weights_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_cell());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_recurrent_weights_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_output());
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.units_ = from._impl_.units_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.return_sequences_ = from._impl_.return_sequences_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.stateful_ = from._impl_.stateful_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.use_bias_ = from._impl_.use_bias_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.go_backwards_ = from._impl_.go_backwards_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.unroll_ = from._impl_.unroll_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.implementation_ = from._impl_.implementation_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.unit_forget_bias_ = from._impl_.unit_forget_bias_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LSTMParameter::CopyFrom(const LSTMParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LSTMParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSTMParameter::IsInitialized() const {
  return true;
}

void LSTMParameter::InternalSwap(LSTMParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activation_, lhs_arena,
      &other->_impl_.activation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recurrent_activation_, lhs_arena,
      &other->_impl_.recurrent_activation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LSTMParameter, _impl_.implementation_)
      + sizeof(LSTMParameter::_impl_.implementation_)
      - PROTOBUF_FIELD_OFFSET(LSTMParameter, _impl_.weights_input_)>(
          reinterpret_cast<char*>(&_impl_.weights_input_),
          reinterpret_cast<char*>(&other->_impl_.weights_input_));
  swap(_impl_.unit_forget_bias_, other->_impl_.unit_forget_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LSTMParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[4]);
}

// ===================================================================

class ActivationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivationParameter>()._impl_._has_bits_);
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivationParameter::ActivationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ActivationParameter)
}
ActivationParameter::ActivationParameter(const ActivationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_activation()) {
    _impl_.activation_.Set(from._internal_activation(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ActivationParameter)
}

inline void ActivationParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activation_){}
  };
  _impl_.activation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivationParameter::~ActivationParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ActivationParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivationParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activation_.Destroy();
}

void ActivationParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ActivationParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.activation_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_activation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.ActivationParameter.activation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivationParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ActivationParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string activation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ActivationParameter.activation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ActivationParameter)
  return target;
}

size_t ActivationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ActivationParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string activation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivationParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivationParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivationParameter::GetClassData() const { return &_class_data_; }

void ActivationParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivationParameter *>(to)->MergeFrom(
      static_cast<const ActivationParameter &>(from));
}


void ActivationParameter::MergeFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activation()) {
    _internal_set_activation(from._internal_activation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivationParameter::CopyFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParameter::IsInitialized() const {
  return true;
}

void ActivationParameter::InternalSwap(ActivationParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activation_, lhs_arena,
      &other->_impl_.activation_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[5]);
}

// ===================================================================

class FlattenParameter::_Internal {
 public:
};

FlattenParameter::FlattenParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FlattenParameter)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlattenParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlattenParameter::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FlattenParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[6]);
}

// ===================================================================

class ConcatenateParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatenateParameter>()._impl_._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConcatenateParameter::ConcatenateParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ConcatenateParameter)
}
ConcatenateParameter::ConcatenateParameter(const ConcatenateParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.axis_ = from._impl_.axis_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ConcatenateParameter)
}

inline void ConcatenateParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_){0}
  };
}

ConcatenateParameter::~ConcatenateParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ConcatenateParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConcatenateParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConcatenateParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConcatenateParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ConcatenateParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.axis_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcatenateParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConcatenateParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ConcatenateParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 axis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ConcatenateParameter)
  return target;
}

size_t ConcatenateParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ConcatenateParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 axis = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_axis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcatenateParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcatenateParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcatenateParameter::GetClassData() const { return &_class_data_; }

void ConcatenateParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConcatenateParameter *>(to)->MergeFrom(
      static_cast<const ConcatenateParameter &>(from));
}


void ConcatenateParameter::MergeFrom(const ConcatenateParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ConcatenateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_axis()) {
    _internal_set_axis(from._internal_axis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcatenateParameter::CopyFrom(const ConcatenateParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ConcatenateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatenateParameter::IsInitialized() const {
  return true;
}

void ConcatenateParameter::InternalSwap(ConcatenateParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.axis_, other->_impl_.axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatenateParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[7]);
}

// ===================================================================

class LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerParameter>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::InputParameter& input(const LayerParameter* msg);
  static const ::apollo::prediction::ActivationParameter& activation(const LayerParameter* msg);
  static const ::apollo::prediction::DenseParameter& dense(const LayerParameter* msg);
  static const ::apollo::prediction::BatchNormalizationParameter& batch_normalization(const LayerParameter* msg);
  static const ::apollo::prediction::LSTMParameter& lstm(const LayerParameter* msg);
  static const ::apollo::prediction::FlattenParameter& flatten(const LayerParameter* msg);
  static const ::apollo::prediction::ConcatenateParameter& concatenate(const LayerParameter* msg);
};

const ::apollo::prediction::InputParameter&
LayerParameter::_Internal::input(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.input_;
}
const ::apollo::prediction::ActivationParameter&
LayerParameter::_Internal::activation(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.activation_;
}
const ::apollo::prediction::DenseParameter&
LayerParameter::_Internal::dense(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.dense_;
}
const ::apollo::prediction::BatchNormalizationParameter&
LayerParameter::_Internal::batch_normalization(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.batch_normalization_;
}
const ::apollo::prediction::LSTMParameter&
LayerParameter::_Internal::lstm(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.lstm_;
}
const ::apollo::prediction::FlattenParameter&
LayerParameter::_Internal::flatten(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.flatten_;
}
const ::apollo::prediction::ConcatenateParameter&
LayerParameter::_Internal::concatenate(const LayerParameter* msg) {
  return *msg->_impl_.oneof_layers_.concatenate_;
}
void LayerParameter::set_allocated_input(::apollo::prediction::InputParameter* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    set_has_input();
    _impl_.oneof_layers_.input_ = input;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.input)
}
void LayerParameter::set_allocated_activation(::apollo::prediction::ActivationParameter* activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activation);
    if (message_arena != submessage_arena) {
      activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation, submessage_arena);
    }
    set_has_activation();
    _impl_.oneof_layers_.activation_ = activation;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.activation)
}
void LayerParameter::set_allocated_dense(::apollo::prediction::DenseParameter* dense) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (dense) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dense);
    if (message_arena != submessage_arena) {
      dense = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dense, submessage_arena);
    }
    set_has_dense();
    _impl_.oneof_layers_.dense_ = dense;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.dense)
}
void LayerParameter::set_allocated_batch_normalization(::apollo::prediction::BatchNormalizationParameter* batch_normalization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (batch_normalization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch_normalization);
    if (message_arena != submessage_arena) {
      batch_normalization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_normalization, submessage_arena);
    }
    set_has_batch_normalization();
    _impl_.oneof_layers_.batch_normalization_ = batch_normalization;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.batch_normalization)
}
void LayerParameter::set_allocated_lstm(::apollo::prediction::LSTMParameter* lstm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (lstm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lstm);
    if (message_arena != submessage_arena) {
      lstm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lstm, submessage_arena);
    }
    set_has_lstm();
    _impl_.oneof_layers_.lstm_ = lstm;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.lstm)
}
void LayerParameter::set_allocated_flatten(::apollo::prediction::FlattenParameter* flatten) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (flatten) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flatten);
    if (message_arena != submessage_arena) {
      flatten = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    _impl_.oneof_layers_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.flatten)
}
void LayerParameter::set_allocated_concatenate(::apollo::prediction::ConcatenateParameter* concatenate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_layers();
  if (concatenate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(concatenate);
    if (message_arena != submessage_arena) {
      concatenate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concatenate, submessage_arena);
    }
    set_has_concatenate();
    _impl_.oneof_layers_.concatenate_ = concatenate;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.concatenate)
}
LayerParameter::LayerParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.order_number_){}
    , decltype(_impl_.oneof_layers_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _impl_.type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.order_number_ = from._impl_.order_number_;
  clear_has_oneof_layers();
  switch (from.oneof_layers_case()) {
    case kInput: {
      _internal_mutable_input()->::apollo::prediction::InputParameter::MergeFrom(from._internal_input());
      break;
    }
    case kActivation: {
      _internal_mutable_activation()->::apollo::prediction::ActivationParameter::MergeFrom(from._internal_activation());
      break;
    }
    case kDense: {
      _internal_mutable_dense()->::apollo::prediction::DenseParameter::MergeFrom(from._internal_dense());
      break;
    }
    case kBatchNormalization: {
      _internal_mutable_batch_normalization()->::apollo::prediction::BatchNormalizationParameter::MergeFrom(from._internal_batch_normalization());
      break;
    }
    case kLstm: {
      _internal_mutable_lstm()->::apollo::prediction::LSTMParameter::MergeFrom(from._internal_lstm());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::apollo::prediction::FlattenParameter::MergeFrom(from._internal_flatten());
      break;
    }
    case kConcatenate: {
      _internal_mutable_concatenate()->::apollo::prediction::ConcatenateParameter::MergeFrom(from._internal_concatenate());
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LayerParameter)
}

inline void LayerParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.order_number_){0}
    , decltype(_impl_.oneof_layers_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_oneof_layers();
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LayerParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  if (has_oneof_layers()) {
    clear_oneof_layers();
  }
}

void LayerParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerParameter::clear_oneof_layers() {
// @@protoc_insertion_point(one_of_clear_start:apollo.prediction.LayerParameter)
  switch (oneof_layers_case()) {
    case kInput: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.input_;
      }
      break;
    }
    case kActivation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.activation_;
      }
      break;
    }
    case kDense: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.dense_;
      }
      break;
    }
    case kBatchNormalization: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.batch_normalization_;
      }
      break;
    }
    case kLstm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.lstm_;
      }
      break;
    }
    case kFlatten: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.flatten_;
      }
      break;
    }
    case kConcatenate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_layers_.concatenate_;
      }
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONEOF_LAYERS_NOT_SET;
}


void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LayerParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.order_number_ = 0;
  clear_oneof_layers();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LayerParameter.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.prediction.LayerParameter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 order_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_order_number(&has_bits);
          _impl_.order_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.InputParameter input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.ActivationParameter activation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.DenseParameter dense = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dense(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_normalization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.LSTMParameter lstm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lstm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.FlattenParameter flatten = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.prediction.ConcatenateParameter concatenate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_concatenate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LayerParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 order_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_number(), target);
  }

  switch (oneof_layers_case()) {
    case kInput: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::input(this),
          _Internal::input(this).GetCachedSize(), target, stream);
      break;
    }
    case kActivation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::activation(this),
          _Internal::activation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDense: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::dense(this),
          _Internal::dense(this).GetCachedSize(), target, stream);
      break;
    }
    case kBatchNormalization: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::batch_normalization(this),
          _Internal::batch_normalization(this).GetCachedSize(), target, stream);
      break;
    }
    case kLstm: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::lstm(this),
          _Internal::lstm(this).GetCachedSize(), target, stream);
      break;
    }
    case kFlatten: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::flatten(this),
          _Internal::flatten(this).GetCachedSize(), target, stream);
      break;
    }
    case kConcatenate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::concatenate(this),
          _Internal::concatenate(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LayerParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 order_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_number());
    }

  }
  switch (oneof_layers_case()) {
    // .apollo.prediction.InputParameter input = 4;
    case kInput: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.input_);
      break;
    }
    // .apollo.prediction.ActivationParameter activation = 5;
    case kActivation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.activation_);
      break;
    }
    // .apollo.prediction.DenseParameter dense = 6;
    case kDense: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.dense_);
      break;
    }
    // .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
    case kBatchNormalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.batch_normalization_);
      break;
    }
    // .apollo.prediction.LSTMParameter lstm = 8;
    case kLstm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.lstm_);
      break;
    }
    // .apollo.prediction.FlattenParameter flatten = 9;
    case kFlatten: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.flatten_);
      break;
    }
    // .apollo.prediction.ConcatenateParameter concatenate = 10;
    case kConcatenate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_layers_.concatenate_);
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayerParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerParameter::GetClassData() const { return &_class_data_; }

void LayerParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayerParameter *>(to)->MergeFrom(
      static_cast<const LayerParameter &>(from));
}


void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.order_number_ = from._impl_.order_number_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_layers_case()) {
    case kInput: {
      _internal_mutable_input()->::apollo::prediction::InputParameter::MergeFrom(from._internal_input());
      break;
    }
    case kActivation: {
      _internal_mutable_activation()->::apollo::prediction::ActivationParameter::MergeFrom(from._internal_activation());
      break;
    }
    case kDense: {
      _internal_mutable_dense()->::apollo::prediction::DenseParameter::MergeFrom(from._internal_dense());
      break;
    }
    case kBatchNormalization: {
      _internal_mutable_batch_normalization()->::apollo::prediction::BatchNormalizationParameter::MergeFrom(from._internal_batch_normalization());
      break;
    }
    case kLstm: {
      _internal_mutable_lstm()->::apollo::prediction::LSTMParameter::MergeFrom(from._internal_lstm());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::apollo::prediction::FlattenParameter::MergeFrom(from._internal_flatten());
      break;
    }
    case kConcatenate: {
      _internal_mutable_concatenate()->::apollo::prediction::ConcatenateParameter::MergeFrom(from._internal_concatenate());
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.order_number_, other->_impl_.order_number_);
  swap(_impl_.oneof_layers_, other->_impl_.oneof_layers_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::TensorParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::TensorParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::TensorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::InputParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::InputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::DenseParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::DenseParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::DenseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::BatchNormalizationParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::BatchNormalizationParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::BatchNormalizationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LSTMParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::LSTMParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LSTMParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ActivationParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::ActivationParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ActivationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::FlattenParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::FlattenParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::FlattenParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ConcatenateParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::ConcatenateParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ConcatenateParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LayerParameter*
Arena::CreateMaybeMessage< ::apollo::prediction::LayerParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LayerParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
