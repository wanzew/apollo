// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#include "modules/prediction/proto/prediction_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR ObstacleConf::ObstacleConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_type_)*/0
  , /*decltype(_impl_.obstacle_status_)*/0
  , /*decltype(_impl_.evaluator_type_)*/0
  , /*decltype(_impl_.predictor_type_)*/0} {}
struct ObstacleConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleConfDefaultTypeInternal() {}
  union {
    ObstacleConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleConfDefaultTypeInternal _ObstacleConf_default_instance_;
PROTOBUF_CONSTEXPR PredictionConf::PredictionConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obstacle_conf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PredictionConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionConfDefaultTypeInternal() {}
  union {
    PredictionConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionConfDefaultTypeInternal _PredictionConf_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _impl_.obstacle_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _impl_.obstacle_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _impl_.evaluator_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _impl_.predictor_type_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionConf, _impl_.obstacle_conf_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::prediction::ObstacleConf)},
  { 14, -1, -1, sizeof(::apollo::prediction::PredictionConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_ObstacleConf_default_instance_._instance,
  &::apollo::prediction::_PredictionConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/prediction/proto/prediction_co"
  "nf.proto\022\021apollo.prediction\0322modules/per"
  "ception/proto/perception_obstacle.proto\""
  "\351\004\n\014ObstacleConf\022A\n\robstacle_type\030\001 \001(\0162"
  "*.apollo.perception.PerceptionObstacle.T"
  "ype\022G\n\017obstacle_status\030\002 \001(\0162..apollo.pr"
  "ediction.ObstacleConf.ObstacleStatus\022E\n\016"
  "evaluator_type\030\003 \001(\0162-.apollo.prediction"
  ".ObstacleConf.EvaluatorType\022E\n\016predictor"
  "_type\030\004 \001(\0162-.apollo.prediction.Obstacle"
  "Conf.PredictorType\"G\n\016ObstacleStatus\022\013\n\007"
  "ON_LANE\020\000\022\014\n\010OFF_LANE\020\001\022\016\n\nSTATIONARY\020\003\022"
  "\n\n\006MOVING\020\004\"I\n\rEvaluatorType\022\021\n\rMLP_EVAL"
  "UATOR\020\000\022\021\n\rRNN_EVALUATOR\020\001\022\022\n\016COST_EVALU"
  "ATOR\020\002\"\252\001\n\rPredictorType\022\033\n\027LANE_SEQUENC"
  "E_PREDICTOR\020\000\022\027\n\023FREE_MOVE_PREDICTOR\020\001\022\026"
  "\n\022REGIONAL_PREDICTOR\020\002\022\033\n\027MOVE_SEQUENCE_"
  "PREDICTOR\020\003\022\023\n\017EMPTY_PREDICTOR\020\004\022\031\n\025SING"
  "LE_LANE_PREDICTOR\020\005\"H\n\016PredictionConf\0226\n"
  "\robstacle_conf\030\001 \003(\0132\037.apollo.prediction"
  ".ObstacleConf"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_deps[1] = {
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto = {
    false, false, 813, descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto,
    "modules/prediction/proto/prediction_conf.proto",
    &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[0];
}
bool ObstacleConf_ObstacleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ON_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::OFF_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::STATIONARY;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::MOVING;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MIN;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MAX;
constexpr int ObstacleConf::ObstacleStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[1];
}
bool ObstacleConf_EvaluatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleConf_EvaluatorType ObstacleConf::MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::RNN_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::COST_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MIN;
constexpr ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MAX;
constexpr int ObstacleConf::EvaluatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_PredictorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[2];
}
bool ObstacleConf_PredictorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleConf_PredictorType ObstacleConf::LANE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::FREE_MOVE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::REGIONAL_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::MOVE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::EMPTY_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::SINGLE_LANE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::PredictorType_MIN;
constexpr ObstacleConf_PredictorType ObstacleConf::PredictorType_MAX;
constexpr int ObstacleConf::PredictorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ObstacleConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleConf>()._impl_._has_bits_);
  static void set_has_obstacle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evaluator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predictor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleConf::ObstacleConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ObstacleConf)
}
ObstacleConf::ObstacleConf(const ObstacleConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_type_){}
    , decltype(_impl_.obstacle_status_){}
    , decltype(_impl_.evaluator_type_){}
    , decltype(_impl_.predictor_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.obstacle_type_, &from._impl_.obstacle_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.predictor_type_) -
    reinterpret_cast<char*>(&_impl_.obstacle_type_)) + sizeof(_impl_.predictor_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleConf)
}

inline void ObstacleConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_type_){0}
    , decltype(_impl_.obstacle_status_){0}
    , decltype(_impl_.evaluator_type_){0}
    , decltype(_impl_.predictor_type_){0}
  };
}

ObstacleConf::~ObstacleConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.obstacle_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.predictor_type_) -
        reinterpret_cast<char*>(&_impl_.obstacle_type_)) + sizeof(_impl_.predictor_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_obstacle_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(val))) {
            _internal_set_obstacle_status(static_cast<::apollo::prediction::ObstacleConf_ObstacleStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(val))) {
            _internal_set_evaluator_type(static_cast<::apollo::prediction::ObstacleConf_EvaluatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_PredictorType_IsValid(val))) {
            _internal_set_predictor_type(static_cast<::apollo::prediction::ObstacleConf_PredictorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_obstacle_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_obstacle_status(), target);
  }

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_evaluator_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_predictor_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleConf)
  return target;
}

size_t ObstacleConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_obstacle_type());
    }

    // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_obstacle_status());
    }

    // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_evaluator_type());
    }

    // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_predictor_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleConf::GetClassData() const { return &_class_data_; }

void ObstacleConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleConf *>(to)->MergeFrom(
      static_cast<const ObstacleConf &>(from));
}


void ObstacleConf::MergeFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.obstacle_type_ = from._impl_.obstacle_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.obstacle_status_ = from._impl_.obstacle_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.evaluator_type_ = from._impl_.evaluator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.predictor_type_ = from._impl_.predictor_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleConf::CopyFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleConf::IsInitialized() const {
  return true;
}

void ObstacleConf::InternalSwap(ObstacleConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleConf, _impl_.predictor_type_)
      + sizeof(ObstacleConf::_impl_.predictor_type_)
      - PROTOBUF_FIELD_OFFSET(ObstacleConf, _impl_.obstacle_type_)>(
          reinterpret_cast<char*>(&_impl_.obstacle_type_),
          reinterpret_cast<char*>(&other->_impl_.obstacle_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[0]);
}

// ===================================================================

class PredictionConf::_Internal {
 public:
};

PredictionConf::PredictionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.PredictionConf)
}
PredictionConf::PredictionConf(const PredictionConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.obstacle_conf_){from._impl_.obstacle_conf_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionConf)
}

inline void PredictionConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacle_conf_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PredictionConf::~PredictionConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_conf_.~RepeatedPtrField();
}

void PredictionConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacle_conf_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_conf_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_conf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionConf)
  return target;
}

size_t PredictionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  total_size += 1UL * this->_internal_obstacle_conf_size();
  for (const auto& msg : this->_impl_.obstacle_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionConf::GetClassData() const { return &_class_data_; }

void PredictionConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionConf *>(to)->MergeFrom(
      static_cast<const PredictionConf &>(from));
}


void PredictionConf::MergeFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.obstacle_conf_.MergeFrom(from._impl_.obstacle_conf_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionConf::CopyFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionConf::IsInitialized() const {
  return true;
}

void PredictionConf::InternalSwap(PredictionConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.obstacle_conf_.InternalSwap(&other->_impl_.obstacle_conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleConf*
Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ObstacleConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionConf*
Arena::CreateMaybeMessage< ::apollo::prediction::PredictionConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::PredictionConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
