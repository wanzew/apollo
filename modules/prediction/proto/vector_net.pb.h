// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/vector_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fvector_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fvector_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fvector_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
namespace apollo {
namespace prediction {
class CarPosition;
struct CarPositionDefaultTypeInternal;
extern CarPositionDefaultTypeInternal _CarPosition_default_instance_;
class Polyline;
struct PolylineDefaultTypeInternal;
extern PolylineDefaultTypeInternal _Polyline_default_instance_;
class VNVector;
struct VNVectorDefaultTypeInternal;
extern VNVectorDefaultTypeInternal _VNVector_default_instance_;
class VectorNetFeature;
struct VectorNetFeatureDefaultTypeInternal;
extern VectorNetFeatureDefaultTypeInternal _VectorNetFeature_default_instance_;
class WorldCoord;
struct WorldCoordDefaultTypeInternal;
extern WorldCoordDefaultTypeInternal _WorldCoord_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::CarPosition* Arena::CreateMaybeMessage<::apollo::prediction::CarPosition>(Arena*);
template<> ::apollo::prediction::Polyline* Arena::CreateMaybeMessage<::apollo::prediction::Polyline>(Arena*);
template<> ::apollo::prediction::VNVector* Arena::CreateMaybeMessage<::apollo::prediction::VNVector>(Arena*);
template<> ::apollo::prediction::VectorNetFeature* Arena::CreateMaybeMessage<::apollo::prediction::VectorNetFeature>(Arena*);
template<> ::apollo::prediction::WorldCoord* Arena::CreateMaybeMessage<::apollo::prediction::WorldCoord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class VNVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.VNVector) */ {
 public:
  inline VNVector() : VNVector(nullptr) {}
  ~VNVector() override;
  explicit PROTOBUF_CONSTEXPR VNVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VNVector(const VNVector& from);
  VNVector(VNVector&& from) noexcept
    : VNVector() {
    *this = ::std::move(from);
  }

  inline VNVector& operator=(const VNVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline VNVector& operator=(VNVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VNVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const VNVector* internal_default_instance() {
    return reinterpret_cast<const VNVector*>(
               &_VNVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VNVector& a, VNVector& b) {
    a.Swap(&b);
  }
  inline void Swap(VNVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VNVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VNVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VNVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VNVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VNVector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VNVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.VNVector";
  }
  protected:
  explicit VNVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated double element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  double _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_element() const;
  void _internal_add_element(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_element();
  public:
  double element(int index) const;
  void set_element(int index, double value);
  void add_element(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:apollo.prediction.VNVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
};
// -------------------------------------------------------------------

class Polyline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Polyline) */ {
 public:
  inline Polyline() : Polyline(nullptr) {}
  ~Polyline() override;
  explicit PROTOBUF_CONSTEXPR Polyline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polyline(const Polyline& from);
  Polyline(Polyline&& from) noexcept
    : Polyline() {
    *this = ::std::move(from);
  }

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polyline& operator=(Polyline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polyline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polyline* internal_default_instance() {
    return reinterpret_cast<const Polyline*>(
               &_Polyline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Polyline& a, Polyline& b) {
    a.Swap(&b);
  }
  inline void Swap(Polyline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polyline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polyline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polyline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polyline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polyline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polyline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Polyline";
  }
  protected:
  explicit Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kPIdXFieldNumber = 2,
    kPIdYFieldNumber = 3,
  };
  // repeated .apollo.prediction.VNVector vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  ::apollo::prediction::VNVector* mutable_vector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VNVector >*
      mutable_vector();
  private:
  const ::apollo::prediction::VNVector& _internal_vector(int index) const;
  ::apollo::prediction::VNVector* _internal_add_vector();
  public:
  const ::apollo::prediction::VNVector& vector(int index) const;
  ::apollo::prediction::VNVector* add_vector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VNVector >&
      vector() const;

  // optional double p_id_x = 2;
  bool has_p_id_x() const;
  private:
  bool _internal_has_p_id_x() const;
  public:
  void clear_p_id_x();
  double p_id_x() const;
  void set_p_id_x(double value);
  private:
  double _internal_p_id_x() const;
  void _internal_set_p_id_x(double value);
  public:

  // optional double p_id_y = 3;
  bool has_p_id_y() const;
  private:
  bool _internal_has_p_id_y() const;
  public:
  void clear_p_id_y();
  double p_id_y() const;
  void set_p_id_y(double value);
  private:
  double _internal_p_id_y() const;
  void _internal_set_p_id_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Polyline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VNVector > vector_;
    double p_id_x_;
    double p_id_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
};
// -------------------------------------------------------------------

class CarPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.CarPosition) */ {
 public:
  inline CarPosition() : CarPosition(nullptr) {}
  ~CarPosition() override;
  explicit PROTOBUF_CONSTEXPR CarPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarPosition(const CarPosition& from);
  CarPosition(CarPosition&& from) noexcept
    : CarPosition() {
    *this = ::std::move(from);
  }

  inline CarPosition& operator=(const CarPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarPosition& operator=(CarPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarPosition* internal_default_instance() {
    return reinterpret_cast<const CarPosition*>(
               &_CarPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CarPosition& a, CarPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CarPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CarPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.CarPosition";
  }
  protected:
  explicit CarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kPhiFieldNumber = 3,
  };
  // optional string id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double phi = 3;
  bool has_phi() const;
  private:
  bool _internal_has_phi() const;
  public:
  void clear_phi();
  double phi() const;
  void set_phi(double value);
  private:
  double _internal_phi() const;
  void _internal_set_phi(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.CarPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double x_;
    double y_;
    double phi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
};
// -------------------------------------------------------------------

class VectorNetFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.VectorNetFeature) */ {
 public:
  inline VectorNetFeature() : VectorNetFeature(nullptr) {}
  ~VectorNetFeature() override;
  explicit PROTOBUF_CONSTEXPR VectorNetFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorNetFeature(const VectorNetFeature& from);
  VectorNetFeature(VectorNetFeature&& from) noexcept
    : VectorNetFeature() {
    *this = ::std::move(from);
  }

  inline VectorNetFeature& operator=(const VectorNetFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorNetFeature& operator=(VectorNetFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorNetFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorNetFeature* internal_default_instance() {
    return reinterpret_cast<const VectorNetFeature*>(
               &_VectorNetFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VectorNetFeature& a, VectorNetFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorNetFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorNetFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorNetFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorNetFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorNetFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VectorNetFeature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorNetFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.VectorNetFeature";
  }
  protected:
  explicit VectorNetFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolylineFieldNumber = 2,
    kCarPositionFieldNumber = 1,
  };
  // repeated .apollo.prediction.Polyline polyline = 2;
  int polyline_size() const;
  private:
  int _internal_polyline_size() const;
  public:
  void clear_polyline();
  ::apollo::prediction::Polyline* mutable_polyline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Polyline >*
      mutable_polyline();
  private:
  const ::apollo::prediction::Polyline& _internal_polyline(int index) const;
  ::apollo::prediction::Polyline* _internal_add_polyline();
  public:
  const ::apollo::prediction::Polyline& polyline(int index) const;
  ::apollo::prediction::Polyline* add_polyline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Polyline >&
      polyline() const;

  // optional .apollo.prediction.CarPosition car_position = 1;
  bool has_car_position() const;
  private:
  bool _internal_has_car_position() const;
  public:
  void clear_car_position();
  const ::apollo::prediction::CarPosition& car_position() const;
  PROTOBUF_NODISCARD ::apollo::prediction::CarPosition* release_car_position();
  ::apollo::prediction::CarPosition* mutable_car_position();
  void set_allocated_car_position(::apollo::prediction::CarPosition* car_position);
  private:
  const ::apollo::prediction::CarPosition& _internal_car_position() const;
  ::apollo::prediction::CarPosition* _internal_mutable_car_position();
  public:
  void unsafe_arena_set_allocated_car_position(
      ::apollo::prediction::CarPosition* car_position);
  ::apollo::prediction::CarPosition* unsafe_arena_release_car_position();

  // @@protoc_insertion_point(class_scope:apollo.prediction.VectorNetFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Polyline > polyline_;
    ::apollo::prediction::CarPosition* car_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
};
// -------------------------------------------------------------------

class WorldCoord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.WorldCoord) */ {
 public:
  inline WorldCoord() : WorldCoord(nullptr) {}
  ~WorldCoord() override;
  explicit PROTOBUF_CONSTEXPR WorldCoord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldCoord(const WorldCoord& from);
  WorldCoord(WorldCoord&& from) noexcept
    : WorldCoord() {
    *this = ::std::move(from);
  }

  inline WorldCoord& operator=(const WorldCoord& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldCoord& operator=(WorldCoord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldCoord& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldCoord* internal_default_instance() {
    return reinterpret_cast<const WorldCoord*>(
               &_WorldCoord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorldCoord& a, WorldCoord& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldCoord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldCoord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldCoord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldCoord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldCoord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorldCoord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldCoord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.WorldCoord";
  }
  protected:
  explicit WorldCoord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // repeated .apollo.prediction.CarPosition pose = 1;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::apollo::prediction::CarPosition* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::CarPosition >*
      mutable_pose();
  private:
  const ::apollo::prediction::CarPosition& _internal_pose(int index) const;
  ::apollo::prediction::CarPosition* _internal_add_pose();
  public:
  const ::apollo::prediction::CarPosition& pose(int index) const;
  ::apollo::prediction::CarPosition* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::CarPosition >&
      pose() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.WorldCoord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::CarPosition > pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VNVector

// repeated double element = 1;
inline int VNVector::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int VNVector::element_size() const {
  return _internal_element_size();
}
inline void VNVector::clear_element() {
  _impl_.element_.Clear();
}
inline double VNVector::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline double VNVector::element(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VNVector.element)
  return _internal_element(index);
}
inline void VNVector::set_element(int index, double value) {
  _impl_.element_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.VNVector.element)
}
inline void VNVector::_internal_add_element(double value) {
  _impl_.element_.Add(value);
}
inline void VNVector::add_element(double value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.VNVector.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VNVector::_internal_element() const {
  return _impl_.element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VNVector::element() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.VNVector.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VNVector::_internal_mutable_element() {
  return &_impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VNVector::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.VNVector.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// Polyline

// repeated .apollo.prediction.VNVector vector = 1;
inline int Polyline::_internal_vector_size() const {
  return _impl_.vector_.size();
}
inline int Polyline::vector_size() const {
  return _internal_vector_size();
}
inline void Polyline::clear_vector() {
  _impl_.vector_.Clear();
}
inline ::apollo::prediction::VNVector* Polyline::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Polyline.vector)
  return _impl_.vector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VNVector >*
Polyline::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Polyline.vector)
  return &_impl_.vector_;
}
inline const ::apollo::prediction::VNVector& Polyline::_internal_vector(int index) const {
  return _impl_.vector_.Get(index);
}
inline const ::apollo::prediction::VNVector& Polyline::vector(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Polyline.vector)
  return _internal_vector(index);
}
inline ::apollo::prediction::VNVector* Polyline::_internal_add_vector() {
  return _impl_.vector_.Add();
}
inline ::apollo::prediction::VNVector* Polyline::add_vector() {
  ::apollo::prediction::VNVector* _add = _internal_add_vector();
  // @@protoc_insertion_point(field_add:apollo.prediction.Polyline.vector)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VNVector >&
Polyline::vector() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Polyline.vector)
  return _impl_.vector_;
}

// optional double p_id_x = 2;
inline bool Polyline::_internal_has_p_id_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Polyline::has_p_id_x() const {
  return _internal_has_p_id_x();
}
inline void Polyline::clear_p_id_x() {
  _impl_.p_id_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Polyline::_internal_p_id_x() const {
  return _impl_.p_id_x_;
}
inline double Polyline::p_id_x() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Polyline.p_id_x)
  return _internal_p_id_x();
}
inline void Polyline::_internal_set_p_id_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.p_id_x_ = value;
}
inline void Polyline::set_p_id_x(double value) {
  _internal_set_p_id_x(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Polyline.p_id_x)
}

// optional double p_id_y = 3;
inline bool Polyline::_internal_has_p_id_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Polyline::has_p_id_y() const {
  return _internal_has_p_id_y();
}
inline void Polyline::clear_p_id_y() {
  _impl_.p_id_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Polyline::_internal_p_id_y() const {
  return _impl_.p_id_y_;
}
inline double Polyline::p_id_y() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Polyline.p_id_y)
  return _internal_p_id_y();
}
inline void Polyline::_internal_set_p_id_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.p_id_y_ = value;
}
inline void Polyline::set_p_id_y(double value) {
  _internal_set_p_id_y(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Polyline.p_id_y)
}

// -------------------------------------------------------------------

// CarPosition

// optional double x = 1;
inline bool CarPosition::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CarPosition::has_x() const {
  return _internal_has_x();
}
inline void CarPosition::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CarPosition::_internal_x() const {
  return _impl_.x_;
}
inline double CarPosition::x() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.CarPosition.x)
  return _internal_x();
}
inline void CarPosition::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_ = value;
}
inline void CarPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.CarPosition.x)
}

// optional double y = 2;
inline bool CarPosition::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CarPosition::has_y() const {
  return _internal_has_y();
}
inline void CarPosition::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CarPosition::_internal_y() const {
  return _impl_.y_;
}
inline double CarPosition::y() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.CarPosition.y)
  return _internal_y();
}
inline void CarPosition::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_ = value;
}
inline void CarPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.CarPosition.y)
}

// optional double phi = 3;
inline bool CarPosition::_internal_has_phi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CarPosition::has_phi() const {
  return _internal_has_phi();
}
inline void CarPosition::clear_phi() {
  _impl_.phi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double CarPosition::_internal_phi() const {
  return _impl_.phi_;
}
inline double CarPosition::phi() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.CarPosition.phi)
  return _internal_phi();
}
inline void CarPosition::_internal_set_phi(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.phi_ = value;
}
inline void CarPosition::set_phi(double value) {
  _internal_set_phi(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.CarPosition.phi)
}

// optional string id = 4;
inline bool CarPosition::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CarPosition::has_id() const {
  return _internal_has_id();
}
inline void CarPosition::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CarPosition::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.CarPosition.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CarPosition::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.CarPosition.id)
}
inline std::string* CarPosition::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.CarPosition.id)
  return _s;
}
inline const std::string& CarPosition::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CarPosition::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CarPosition::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CarPosition::release_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.CarPosition.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CarPosition::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.CarPosition.id)
}

// -------------------------------------------------------------------

// VectorNetFeature

// optional .apollo.prediction.CarPosition car_position = 1;
inline bool VectorNetFeature::_internal_has_car_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.car_position_ != nullptr);
  return value;
}
inline bool VectorNetFeature::has_car_position() const {
  return _internal_has_car_position();
}
inline void VectorNetFeature::clear_car_position() {
  if (_impl_.car_position_ != nullptr) _impl_.car_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::CarPosition& VectorNetFeature::_internal_car_position() const {
  const ::apollo::prediction::CarPosition* p = _impl_.car_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::CarPosition&>(
      ::apollo::prediction::_CarPosition_default_instance_);
}
inline const ::apollo::prediction::CarPosition& VectorNetFeature::car_position() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VectorNetFeature.car_position)
  return _internal_car_position();
}
inline void VectorNetFeature::unsafe_arena_set_allocated_car_position(
    ::apollo::prediction::CarPosition* car_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.car_position_);
  }
  _impl_.car_position_ = car_position;
  if (car_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.VectorNetFeature.car_position)
}
inline ::apollo::prediction::CarPosition* VectorNetFeature::release_car_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::CarPosition* temp = _impl_.car_position_;
  _impl_.car_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::CarPosition* VectorNetFeature::unsafe_arena_release_car_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.VectorNetFeature.car_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::CarPosition* temp = _impl_.car_position_;
  _impl_.car_position_ = nullptr;
  return temp;
}
inline ::apollo::prediction::CarPosition* VectorNetFeature::_internal_mutable_car_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.car_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::CarPosition>(GetArenaForAllocation());
    _impl_.car_position_ = p;
  }
  return _impl_.car_position_;
}
inline ::apollo::prediction::CarPosition* VectorNetFeature::mutable_car_position() {
  ::apollo::prediction::CarPosition* _msg = _internal_mutable_car_position();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.VectorNetFeature.car_position)
  return _msg;
}
inline void VectorNetFeature::set_allocated_car_position(::apollo::prediction::CarPosition* car_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.car_position_;
  }
  if (car_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(car_position);
    if (message_arena != submessage_arena) {
      car_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.car_position_ = car_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.VectorNetFeature.car_position)
}

// repeated .apollo.prediction.Polyline polyline = 2;
inline int VectorNetFeature::_internal_polyline_size() const {
  return _impl_.polyline_.size();
}
inline int VectorNetFeature::polyline_size() const {
  return _internal_polyline_size();
}
inline void VectorNetFeature::clear_polyline() {
  _impl_.polyline_.Clear();
}
inline ::apollo::prediction::Polyline* VectorNetFeature::mutable_polyline(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.VectorNetFeature.polyline)
  return _impl_.polyline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Polyline >*
VectorNetFeature::mutable_polyline() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.VectorNetFeature.polyline)
  return &_impl_.polyline_;
}
inline const ::apollo::prediction::Polyline& VectorNetFeature::_internal_polyline(int index) const {
  return _impl_.polyline_.Get(index);
}
inline const ::apollo::prediction::Polyline& VectorNetFeature::polyline(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VectorNetFeature.polyline)
  return _internal_polyline(index);
}
inline ::apollo::prediction::Polyline* VectorNetFeature::_internal_add_polyline() {
  return _impl_.polyline_.Add();
}
inline ::apollo::prediction::Polyline* VectorNetFeature::add_polyline() {
  ::apollo::prediction::Polyline* _add = _internal_add_polyline();
  // @@protoc_insertion_point(field_add:apollo.prediction.VectorNetFeature.polyline)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::Polyline >&
VectorNetFeature::polyline() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.VectorNetFeature.polyline)
  return _impl_.polyline_;
}

// -------------------------------------------------------------------

// WorldCoord

// repeated .apollo.prediction.CarPosition pose = 1;
inline int WorldCoord::_internal_pose_size() const {
  return _impl_.pose_.size();
}
inline int WorldCoord::pose_size() const {
  return _internal_pose_size();
}
inline void WorldCoord::clear_pose() {
  _impl_.pose_.Clear();
}
inline ::apollo::prediction::CarPosition* WorldCoord::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.WorldCoord.pose)
  return _impl_.pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::CarPosition >*
WorldCoord::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.WorldCoord.pose)
  return &_impl_.pose_;
}
inline const ::apollo::prediction::CarPosition& WorldCoord::_internal_pose(int index) const {
  return _impl_.pose_.Get(index);
}
inline const ::apollo::prediction::CarPosition& WorldCoord::pose(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.WorldCoord.pose)
  return _internal_pose(index);
}
inline ::apollo::prediction::CarPosition* WorldCoord::_internal_add_pose() {
  return _impl_.pose_.Add();
}
inline ::apollo::prediction::CarPosition* WorldCoord::add_pose() {
  ::apollo::prediction::CarPosition* _add = _internal_add_pose();
  // @@protoc_insertion_point(field_add:apollo.prediction.WorldCoord.pose)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::CarPosition >&
WorldCoord::pose() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.WorldCoord.pose)
  return _impl_.pose_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fvector_5fnet_2eproto
