// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/feature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
namespace apollo {
namespace prediction {
class ObstacleConf;
struct ObstacleConfDefaultTypeInternal;
extern ObstacleConfDefaultTypeInternal _ObstacleConf_default_instance_;
class PredictionConf;
struct PredictionConfDefaultTypeInternal;
extern PredictionConfDefaultTypeInternal _PredictionConf_default_instance_;
class TopicConf;
struct TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::ObstacleConf* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleConf>(Arena*);
template<> ::apollo::prediction::PredictionConf* Arena::CreateMaybeMessage<::apollo::prediction::PredictionConf>(Arena*);
template<> ::apollo::prediction::TopicConf* Arena::CreateMaybeMessage<::apollo::prediction::TopicConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

enum ObstacleConf_ObstacleStatus : int {
  ObstacleConf_ObstacleStatus_ON_LANE = 0,
  ObstacleConf_ObstacleStatus_OFF_LANE = 1,
  ObstacleConf_ObstacleStatus_STATIONARY = 3,
  ObstacleConf_ObstacleStatus_MOVING = 4,
  ObstacleConf_ObstacleStatus_IN_JUNCTION = 5
};
bool ObstacleConf_ObstacleStatus_IsValid(int value);
constexpr ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MIN = ObstacleConf_ObstacleStatus_ON_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MAX = ObstacleConf_ObstacleStatus_IN_JUNCTION;
constexpr int ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE = ObstacleConf_ObstacleStatus_ObstacleStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor();
template<typename T>
inline const std::string& ObstacleConf_ObstacleStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_ObstacleStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_ObstacleStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_ObstacleStatus_descriptor(), enum_t_value);
}
inline bool ObstacleConf_ObstacleStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleConf_ObstacleStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_ObstacleStatus>(
    ObstacleConf_ObstacleStatus_descriptor(), name, value);
}
enum ObstacleConf_EvaluatorType : int {
  ObstacleConf_EvaluatorType_MLP_EVALUATOR = 0,
  ObstacleConf_EvaluatorType_RNN_EVALUATOR PROTOBUF_DEPRECATED_ENUM = 1,
  ObstacleConf_EvaluatorType_COST_EVALUATOR = 2,
  ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR = 3,
  ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR = 4,
  ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR = 5,
  ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR = 6,
  ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR = 7,
  ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR = 8,
  ObstacleConf_EvaluatorType_LANE_AGGREGATING_EVALUATOR = 9,
  ObstacleConf_EvaluatorType_SEMANTIC_LSTM_EVALUATOR = 10,
  ObstacleConf_EvaluatorType_JOINTLY_PREDICTION_PLANNING_EVALUATOR = 11,
  ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR = 12
};
bool ObstacleConf_EvaluatorType_IsValid(int value);
constexpr ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MIN = ObstacleConf_EvaluatorType_MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MAX = ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR;
constexpr int ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE = ObstacleConf_EvaluatorType_EvaluatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor();
template<typename T>
inline const std::string& ObstacleConf_EvaluatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_EvaluatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_EvaluatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_EvaluatorType_descriptor(), enum_t_value);
}
inline bool ObstacleConf_EvaluatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleConf_EvaluatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_EvaluatorType>(
    ObstacleConf_EvaluatorType_descriptor(), name, value);
}
enum ObstacleConf_PredictorType : int {
  ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR = 0,
  ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR = 1,
  ObstacleConf_PredictorType_REGIONAL_PREDICTOR PROTOBUF_DEPRECATED_ENUM = 2,
  ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR = 3,
  ObstacleConf_PredictorType_EMPTY_PREDICTOR = 4,
  ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR = 5,
  ObstacleConf_PredictorType_JUNCTION_PREDICTOR = 6,
  ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR = 7,
  ObstacleConf_PredictorType_INTERACTION_PREDICTOR = 8
};
bool ObstacleConf_PredictorType_IsValid(int value);
constexpr ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MIN = ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MAX = ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
constexpr int ObstacleConf_PredictorType_PredictorType_ARRAYSIZE = ObstacleConf_PredictorType_PredictorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_PredictorType_descriptor();
template<typename T>
inline const std::string& ObstacleConf_PredictorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_PredictorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_PredictorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_PredictorType_descriptor(), enum_t_value);
}
inline bool ObstacleConf_PredictorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObstacleConf_PredictorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_PredictorType>(
    ObstacleConf_PredictorType_descriptor(), name, value);
}
// ===================================================================

class ObstacleConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleConf) */ {
 public:
  inline ObstacleConf() : ObstacleConf(nullptr) {}
  ~ObstacleConf() override;
  explicit PROTOBUF_CONSTEXPR ObstacleConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstacleConf(const ObstacleConf& from);
  ObstacleConf(ObstacleConf&& from) noexcept
    : ObstacleConf() {
    *this = ::std::move(from);
  }

  inline ObstacleConf& operator=(const ObstacleConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleConf& operator=(ObstacleConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstacleConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstacleConf* internal_default_instance() {
    return reinterpret_cast<const ObstacleConf*>(
               &_ObstacleConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleConf& a, ObstacleConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstacleConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstacleConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstacleConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstacleConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstacleConf";
  }
  protected:
  explicit ObstacleConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleConf_ObstacleStatus ObstacleStatus;
  static constexpr ObstacleStatus ON_LANE =
    ObstacleConf_ObstacleStatus_ON_LANE;
  static constexpr ObstacleStatus OFF_LANE =
    ObstacleConf_ObstacleStatus_OFF_LANE;
  static constexpr ObstacleStatus STATIONARY =
    ObstacleConf_ObstacleStatus_STATIONARY;
  static constexpr ObstacleStatus MOVING =
    ObstacleConf_ObstacleStatus_MOVING;
  static constexpr ObstacleStatus IN_JUNCTION =
    ObstacleConf_ObstacleStatus_IN_JUNCTION;
  static inline bool ObstacleStatus_IsValid(int value) {
    return ObstacleConf_ObstacleStatus_IsValid(value);
  }
  static constexpr ObstacleStatus ObstacleStatus_MIN =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MIN;
  static constexpr ObstacleStatus ObstacleStatus_MAX =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MAX;
  static constexpr int ObstacleStatus_ARRAYSIZE =
    ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObstacleStatus_descriptor() {
    return ObstacleConf_ObstacleStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ObstacleStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObstacleStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObstacleStatus_Name.");
    return ObstacleConf_ObstacleStatus_Name(enum_t_value);
  }
  static inline bool ObstacleStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObstacleStatus* value) {
    return ObstacleConf_ObstacleStatus_Parse(name, value);
  }

  typedef ObstacleConf_EvaluatorType EvaluatorType;
  static constexpr EvaluatorType MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_MLP_EVALUATOR;
  PROTOBUF_DEPRECATED_ENUM static constexpr EvaluatorType RNN_EVALUATOR =
    ObstacleConf_EvaluatorType_RNN_EVALUATOR;
  static constexpr EvaluatorType COST_EVALUATOR =
    ObstacleConf_EvaluatorType_COST_EVALUATOR;
  static constexpr EvaluatorType CRUISE_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR;
  static constexpr EvaluatorType JUNCTION_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR;
  static constexpr EvaluatorType CYCLIST_KEEP_LANE_EVALUATOR =
    ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR;
  static constexpr EvaluatorType LANE_SCANNING_EVALUATOR =
    ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR;
  static constexpr EvaluatorType PEDESTRIAN_INTERACTION_EVALUATOR =
    ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR;
  static constexpr EvaluatorType JUNCTION_MAP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR;
  static constexpr EvaluatorType LANE_AGGREGATING_EVALUATOR =
    ObstacleConf_EvaluatorType_LANE_AGGREGATING_EVALUATOR;
  static constexpr EvaluatorType SEMANTIC_LSTM_EVALUATOR =
    ObstacleConf_EvaluatorType_SEMANTIC_LSTM_EVALUATOR;
  static constexpr EvaluatorType JOINTLY_PREDICTION_PLANNING_EVALUATOR =
    ObstacleConf_EvaluatorType_JOINTLY_PREDICTION_PLANNING_EVALUATOR;
  static constexpr EvaluatorType VECTORNET_EVALUATOR =
    ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR;
  static inline bool EvaluatorType_IsValid(int value) {
    return ObstacleConf_EvaluatorType_IsValid(value);
  }
  static constexpr EvaluatorType EvaluatorType_MIN =
    ObstacleConf_EvaluatorType_EvaluatorType_MIN;
  static constexpr EvaluatorType EvaluatorType_MAX =
    ObstacleConf_EvaluatorType_EvaluatorType_MAX;
  static constexpr int EvaluatorType_ARRAYSIZE =
    ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EvaluatorType_descriptor() {
    return ObstacleConf_EvaluatorType_descriptor();
  }
  template<typename T>
  static inline const std::string& EvaluatorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EvaluatorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EvaluatorType_Name.");
    return ObstacleConf_EvaluatorType_Name(enum_t_value);
  }
  static inline bool EvaluatorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EvaluatorType* value) {
    return ObstacleConf_EvaluatorType_Parse(name, value);
  }

  typedef ObstacleConf_PredictorType PredictorType;
  static constexpr PredictorType LANE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
  static constexpr PredictorType FREE_MOVE_PREDICTOR =
    ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR;
  PROTOBUF_DEPRECATED_ENUM static constexpr PredictorType REGIONAL_PREDICTOR =
    ObstacleConf_PredictorType_REGIONAL_PREDICTOR;
  static constexpr PredictorType MOVE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR;
  static constexpr PredictorType EMPTY_PREDICTOR =
    ObstacleConf_PredictorType_EMPTY_PREDICTOR;
  static constexpr PredictorType SINGLE_LANE_PREDICTOR =
    ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR;
  static constexpr PredictorType JUNCTION_PREDICTOR =
    ObstacleConf_PredictorType_JUNCTION_PREDICTOR;
  static constexpr PredictorType EXTRAPOLATION_PREDICTOR =
    ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR;
  static constexpr PredictorType INTERACTION_PREDICTOR =
    ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
  static inline bool PredictorType_IsValid(int value) {
    return ObstacleConf_PredictorType_IsValid(value);
  }
  static constexpr PredictorType PredictorType_MIN =
    ObstacleConf_PredictorType_PredictorType_MIN;
  static constexpr PredictorType PredictorType_MAX =
    ObstacleConf_PredictorType_PredictorType_MAX;
  static constexpr int PredictorType_ARRAYSIZE =
    ObstacleConf_PredictorType_PredictorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PredictorType_descriptor() {
    return ObstacleConf_PredictorType_descriptor();
  }
  template<typename T>
  static inline const std::string& PredictorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PredictorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PredictorType_Name.");
    return ObstacleConf_PredictorType_Name(enum_t_value);
  }
  static inline bool PredictorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PredictorType* value) {
    return ObstacleConf_PredictorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleTypeFieldNumber = 1,
    kEvaluatorTypeFieldNumber = 3,
    kPredictorTypeFieldNumber = 4,
    kInteractiveTagFieldNumber = 6,
    kObstacleStatusFieldNumber = 2,
    kPriorityTypeFieldNumber = 5,
  };
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  bool has_obstacle_type() const;
  private:
  bool _internal_has_obstacle_type() const;
  public:
  void clear_obstacle_type();
  ::apollo::perception::PerceptionObstacle_Type obstacle_type() const;
  void set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_obstacle_type() const;
  void _internal_set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  bool has_evaluator_type() const;
  private:
  bool _internal_has_evaluator_type() const;
  public:
  void clear_evaluator_type();
  ::apollo::prediction::ObstacleConf_EvaluatorType evaluator_type() const;
  void set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);
  private:
  ::apollo::prediction::ObstacleConf_EvaluatorType _internal_evaluator_type() const;
  void _internal_set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);
  public:

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  bool has_predictor_type() const;
  private:
  bool _internal_has_predictor_type() const;
  public:
  void clear_predictor_type();
  ::apollo::prediction::ObstacleConf_PredictorType predictor_type() const;
  void set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);
  private:
  ::apollo::prediction::ObstacleConf_PredictorType _internal_predictor_type() const;
  void _internal_set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);
  public:

  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 6;
  bool has_interactive_tag() const;
  private:
  bool _internal_has_interactive_tag() const;
  public:
  void clear_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag interactive_tag() const;
  void set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value);
  private:
  ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag _internal_interactive_tag() const;
  void _internal_set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value);
  public:

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2 [default = STATIONARY];
  bool has_obstacle_status() const;
  private:
  bool _internal_has_obstacle_status() const;
  public:
  void clear_obstacle_status();
  ::apollo::prediction::ObstacleConf_ObstacleStatus obstacle_status() const;
  void set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);
  private:
  ::apollo::prediction::ObstacleConf_ObstacleStatus _internal_obstacle_status() const;
  void _internal_set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);
  public:

  // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
  bool has_priority_type() const;
  private:
  bool _internal_has_priority_type() const;
  public:
  void clear_priority_type();
  ::apollo::prediction::ObstaclePriority_Priority priority_type() const;
  void set_priority_type(::apollo::prediction::ObstaclePriority_Priority value);
  private:
  ::apollo::prediction::ObstaclePriority_Priority _internal_priority_type() const;
  void _internal_set_priority_type(::apollo::prediction::ObstaclePriority_Priority value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int obstacle_type_;
    int evaluator_type_;
    int predictor_type_;
    int interactive_tag_;
    int obstacle_status_;
    int priority_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TopicConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.TopicConf) */ {
 public:
  inline TopicConf() : TopicConf(nullptr) {}
  ~TopicConf() override;
  explicit PROTOBUF_CONSTEXPR TopicConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicConf(const TopicConf& from);
  TopicConf(TopicConf&& from) noexcept
    : TopicConf() {
    *this = ::std::move(from);
  }

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicConf& operator=(TopicConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicConf* internal_default_instance() {
    return reinterpret_cast<const TopicConf*>(
               &_TopicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicConf& a, TopicConf& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.TopicConf";
  }
  protected:
  explicit TopicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdccontainerTopicNameFieldNumber = 1,
    kContainerTopicNameFieldNumber = 2,
    kEvaluatorTopicNameFieldNumber = 3,
    kLocalizationTopicFieldNumber = 4,
    kPerceptionObstacleTopicFieldNumber = 5,
    kPerceptionObstaclesTopicNameFieldNumber = 6,
    kPlanningTrajectoryTopicFieldNumber = 7,
    kPredictionTopicFieldNumber = 8,
    kStorytellingTopicFieldNumber = 9,
  };
  // optional string adccontainer_topic_name = 1;
  bool has_adccontainer_topic_name() const;
  private:
  bool _internal_has_adccontainer_topic_name() const;
  public:
  void clear_adccontainer_topic_name();
  const std::string& adccontainer_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adccontainer_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adccontainer_topic_name();
  PROTOBUF_NODISCARD std::string* release_adccontainer_topic_name();
  void set_allocated_adccontainer_topic_name(std::string* adccontainer_topic_name);
  private:
  const std::string& _internal_adccontainer_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adccontainer_topic_name(const std::string& value);
  std::string* _internal_mutable_adccontainer_topic_name();
  public:

  // optional string container_topic_name = 2;
  bool has_container_topic_name() const;
  private:
  bool _internal_has_container_topic_name() const;
  public:
  void clear_container_topic_name();
  const std::string& container_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_topic_name();
  PROTOBUF_NODISCARD std::string* release_container_topic_name();
  void set_allocated_container_topic_name(std::string* container_topic_name);
  private:
  const std::string& _internal_container_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_topic_name(const std::string& value);
  std::string* _internal_mutable_container_topic_name();
  public:

  // optional string evaluator_topic_name = 3;
  bool has_evaluator_topic_name() const;
  private:
  bool _internal_has_evaluator_topic_name() const;
  public:
  void clear_evaluator_topic_name();
  const std::string& evaluator_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_evaluator_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_evaluator_topic_name();
  PROTOBUF_NODISCARD std::string* release_evaluator_topic_name();
  void set_allocated_evaluator_topic_name(std::string* evaluator_topic_name);
  private:
  const std::string& _internal_evaluator_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evaluator_topic_name(const std::string& value);
  std::string* _internal_mutable_evaluator_topic_name();
  public:

  // optional string localization_topic = 4;
  bool has_localization_topic() const;
  private:
  bool _internal_has_localization_topic() const;
  public:
  void clear_localization_topic();
  const std::string& localization_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_topic();
  PROTOBUF_NODISCARD std::string* release_localization_topic();
  void set_allocated_localization_topic(std::string* localization_topic);
  private:
  const std::string& _internal_localization_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_topic(const std::string& value);
  std::string* _internal_mutable_localization_topic();
  public:

  // optional string perception_obstacle_topic = 5;
  bool has_perception_obstacle_topic() const;
  private:
  bool _internal_has_perception_obstacle_topic() const;
  public:
  void clear_perception_obstacle_topic();
  const std::string& perception_obstacle_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_perception_obstacle_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_perception_obstacle_topic();
  PROTOBUF_NODISCARD std::string* release_perception_obstacle_topic();
  void set_allocated_perception_obstacle_topic(std::string* perception_obstacle_topic);
  private:
  const std::string& _internal_perception_obstacle_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_perception_obstacle_topic(const std::string& value);
  std::string* _internal_mutable_perception_obstacle_topic();
  public:

  // optional string perception_obstacles_topic_name = 6;
  bool has_perception_obstacles_topic_name() const;
  private:
  bool _internal_has_perception_obstacles_topic_name() const;
  public:
  void clear_perception_obstacles_topic_name();
  const std::string& perception_obstacles_topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_perception_obstacles_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_perception_obstacles_topic_name();
  PROTOBUF_NODISCARD std::string* release_perception_obstacles_topic_name();
  void set_allocated_perception_obstacles_topic_name(std::string* perception_obstacles_topic_name);
  private:
  const std::string& _internal_perception_obstacles_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_perception_obstacles_topic_name(const std::string& value);
  std::string* _internal_mutable_perception_obstacles_topic_name();
  public:

  // optional string planning_trajectory_topic = 7;
  bool has_planning_trajectory_topic() const;
  private:
  bool _internal_has_planning_trajectory_topic() const;
  public:
  void clear_planning_trajectory_topic();
  const std::string& planning_trajectory_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_planning_trajectory_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_planning_trajectory_topic();
  PROTOBUF_NODISCARD std::string* release_planning_trajectory_topic();
  void set_allocated_planning_trajectory_topic(std::string* planning_trajectory_topic);
  private:
  const std::string& _internal_planning_trajectory_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_planning_trajectory_topic(const std::string& value);
  std::string* _internal_mutable_planning_trajectory_topic();
  public:

  // optional string prediction_topic = 8;
  bool has_prediction_topic() const;
  private:
  bool _internal_has_prediction_topic() const;
  public:
  void clear_prediction_topic();
  const std::string& prediction_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prediction_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prediction_topic();
  PROTOBUF_NODISCARD std::string* release_prediction_topic();
  void set_allocated_prediction_topic(std::string* prediction_topic);
  private:
  const std::string& _internal_prediction_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prediction_topic(const std::string& value);
  std::string* _internal_mutable_prediction_topic();
  public:

  // optional string storytelling_topic = 9;
  bool has_storytelling_topic() const;
  private:
  bool _internal_has_storytelling_topic() const;
  public:
  void clear_storytelling_topic();
  const std::string& storytelling_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storytelling_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storytelling_topic();
  PROTOBUF_NODISCARD std::string* release_storytelling_topic();
  void set_allocated_storytelling_topic(std::string* storytelling_topic);
  private:
  const std::string& _internal_storytelling_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storytelling_topic(const std::string& value);
  std::string* _internal_mutable_storytelling_topic();
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.TopicConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adccontainer_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evaluator_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr perception_obstacle_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr perception_obstacles_topic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planning_trajectory_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prediction_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storytelling_topic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PredictionConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionConf) */ {
 public:
  inline PredictionConf() : PredictionConf(nullptr) {}
  ~PredictionConf() override;
  explicit PROTOBUF_CONSTEXPR PredictionConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PredictionConf(const PredictionConf& from);
  PredictionConf(PredictionConf&& from) noexcept
    : PredictionConf() {
    *this = ::std::move(from);
  }

  inline PredictionConf& operator=(const PredictionConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionConf& operator=(PredictionConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictionConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictionConf* internal_default_instance() {
    return reinterpret_cast<const PredictionConf*>(
               &_PredictionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictionConf& a, PredictionConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictionConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PredictionConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PredictionConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PredictionConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.PredictionConf";
  }
  protected:
  explicit PredictionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleConfFieldNumber = 2,
    kTopicConfFieldNumber = 1,
  };
  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 2;
  int obstacle_conf_size() const;
  private:
  int _internal_obstacle_conf_size() const;
  public:
  void clear_obstacle_conf();
  ::apollo::prediction::ObstacleConf* mutable_obstacle_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
      mutable_obstacle_conf();
  private:
  const ::apollo::prediction::ObstacleConf& _internal_obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* _internal_add_obstacle_conf();
  public:
  const ::apollo::prediction::ObstacleConf& obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* add_obstacle_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
      obstacle_conf() const;

  // optional .apollo.prediction.TopicConf topic_conf = 1;
  bool has_topic_conf() const;
  private:
  bool _internal_has_topic_conf() const;
  public:
  void clear_topic_conf();
  const ::apollo::prediction::TopicConf& topic_conf() const;
  PROTOBUF_NODISCARD ::apollo::prediction::TopicConf* release_topic_conf();
  ::apollo::prediction::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::prediction::TopicConf* topic_conf);
  private:
  const ::apollo::prediction::TopicConf& _internal_topic_conf() const;
  ::apollo::prediction::TopicConf* _internal_mutable_topic_conf();
  public:
  void unsafe_arena_set_allocated_topic_conf(
      ::apollo::prediction::TopicConf* topic_conf);
  ::apollo::prediction::TopicConf* unsafe_arena_release_topic_conf();

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf > obstacle_conf_;
    ::apollo::prediction::TopicConf* topic_conf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleConf

// optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
inline bool ObstacleConf::_internal_has_obstacle_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleConf::has_obstacle_type() const {
  return _internal_has_obstacle_type();
}
inline void ObstacleConf::clear_obstacle_type() {
  _impl_.obstacle_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::_internal_obstacle_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(_impl_.obstacle_type_);
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_type)
  return _internal_obstacle_type();
}
inline void ObstacleConf::_internal_set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.obstacle_type_ = value;
}
inline void ObstacleConf::set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_obstacle_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_type)
}

// optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2 [default = STATIONARY];
inline bool ObstacleConf::_internal_has_obstacle_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObstacleConf::has_obstacle_status() const {
  return _internal_has_obstacle_status();
}
inline void ObstacleConf::clear_obstacle_status() {
  _impl_.obstacle_status_ = 3;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::_internal_obstacle_status() const {
  return static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(_impl_.obstacle_status_);
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_status)
  return _internal_obstacle_status();
}
inline void ObstacleConf::_internal_set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.obstacle_status_ = value;
}
inline void ObstacleConf::set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  _internal_set_obstacle_status(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_status)
}

// optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
inline bool ObstacleConf::_internal_has_priority_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObstacleConf::has_priority_type() const {
  return _internal_has_priority_type();
}
inline void ObstacleConf::clear_priority_type() {
  _impl_.priority_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstacleConf::_internal_priority_type() const {
  return static_cast< ::apollo::prediction::ObstaclePriority_Priority >(_impl_.priority_type_);
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstacleConf::priority_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.priority_type)
  return _internal_priority_type();
}
inline void ObstacleConf::_internal_set_priority_type(::apollo::prediction::ObstaclePriority_Priority value) {
  assert(::apollo::prediction::ObstaclePriority_Priority_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.priority_type_ = value;
}
inline void ObstacleConf::set_priority_type(::apollo::prediction::ObstaclePriority_Priority value) {
  _internal_set_priority_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.priority_type)
}

// optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 6;
inline bool ObstacleConf::_internal_has_interactive_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObstacleConf::has_interactive_tag() const {
  return _internal_has_interactive_tag();
}
inline void ObstacleConf::clear_interactive_tag() {
  _impl_.interactive_tag_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleConf::_internal_interactive_tag() const {
  return static_cast< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag >(_impl_.interactive_tag_);
}
inline ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleConf::interactive_tag() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.interactive_tag)
  return _internal_interactive_tag();
}
inline void ObstacleConf::_internal_set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  assert(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.interactive_tag_ = value;
}
inline void ObstacleConf::set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  _internal_set_interactive_tag(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.interactive_tag)
}

// optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
inline bool ObstacleConf::_internal_has_evaluator_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObstacleConf::has_evaluator_type() const {
  return _internal_has_evaluator_type();
}
inline void ObstacleConf::clear_evaluator_type() {
  _impl_.evaluator_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::_internal_evaluator_type() const {
  return static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(_impl_.evaluator_type_);
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.evaluator_type)
  return _internal_evaluator_type();
}
inline void ObstacleConf::_internal_set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  assert(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.evaluator_type_ = value;
}
inline void ObstacleConf::set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  _internal_set_evaluator_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.evaluator_type)
}

// optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
inline bool ObstacleConf::_internal_has_predictor_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObstacleConf::has_predictor_type() const {
  return _internal_has_predictor_type();
}
inline void ObstacleConf::clear_predictor_type() {
  _impl_.predictor_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::_internal_predictor_type() const {
  return static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(_impl_.predictor_type_);
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.predictor_type)
  return _internal_predictor_type();
}
inline void ObstacleConf::_internal_set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  assert(::apollo::prediction::ObstacleConf_PredictorType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.predictor_type_ = value;
}
inline void ObstacleConf::set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  _internal_set_predictor_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.predictor_type)
}

// -------------------------------------------------------------------

// TopicConf

// optional string adccontainer_topic_name = 1;
inline bool TopicConf::_internal_has_adccontainer_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicConf::has_adccontainer_topic_name() const {
  return _internal_has_adccontainer_topic_name();
}
inline void TopicConf::clear_adccontainer_topic_name() {
  _impl_.adccontainer_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TopicConf::adccontainer_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.adccontainer_topic_name)
  return _internal_adccontainer_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_adccontainer_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.adccontainer_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.adccontainer_topic_name)
}
inline std::string* TopicConf::mutable_adccontainer_topic_name() {
  std::string* _s = _internal_mutable_adccontainer_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.adccontainer_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_adccontainer_topic_name() const {
  return _impl_.adccontainer_topic_name_.Get();
}
inline void TopicConf::_internal_set_adccontainer_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adccontainer_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_adccontainer_topic_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.adccontainer_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_adccontainer_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.adccontainer_topic_name)
  if (!_internal_has_adccontainer_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.adccontainer_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adccontainer_topic_name_.IsDefault()) {
    _impl_.adccontainer_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_adccontainer_topic_name(std::string* adccontainer_topic_name) {
  if (adccontainer_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.adccontainer_topic_name_.SetAllocated(adccontainer_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adccontainer_topic_name_.IsDefault()) {
    _impl_.adccontainer_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.adccontainer_topic_name)
}

// optional string container_topic_name = 2;
inline bool TopicConf::_internal_has_container_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicConf::has_container_topic_name() const {
  return _internal_has_container_topic_name();
}
inline void TopicConf::clear_container_topic_name() {
  _impl_.container_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TopicConf::container_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.container_topic_name)
  return _internal_container_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_container_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.container_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.container_topic_name)
}
inline std::string* TopicConf::mutable_container_topic_name() {
  std::string* _s = _internal_mutable_container_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.container_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_container_topic_name() const {
  return _impl_.container_topic_name_.Get();
}
inline void TopicConf::_internal_set_container_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.container_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_container_topic_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.container_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_container_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.container_topic_name)
  if (!_internal_has_container_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.container_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.container_topic_name_.IsDefault()) {
    _impl_.container_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_container_topic_name(std::string* container_topic_name) {
  if (container_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.container_topic_name_.SetAllocated(container_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.container_topic_name_.IsDefault()) {
    _impl_.container_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.container_topic_name)
}

// optional string evaluator_topic_name = 3;
inline bool TopicConf::_internal_has_evaluator_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TopicConf::has_evaluator_topic_name() const {
  return _internal_has_evaluator_topic_name();
}
inline void TopicConf::clear_evaluator_topic_name() {
  _impl_.evaluator_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TopicConf::evaluator_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.evaluator_topic_name)
  return _internal_evaluator_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_evaluator_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.evaluator_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.evaluator_topic_name)
}
inline std::string* TopicConf::mutable_evaluator_topic_name() {
  std::string* _s = _internal_mutable_evaluator_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.evaluator_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_evaluator_topic_name() const {
  return _impl_.evaluator_topic_name_.Get();
}
inline void TopicConf::_internal_set_evaluator_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.evaluator_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_evaluator_topic_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.evaluator_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_evaluator_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.evaluator_topic_name)
  if (!_internal_has_evaluator_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.evaluator_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.evaluator_topic_name_.IsDefault()) {
    _impl_.evaluator_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_evaluator_topic_name(std::string* evaluator_topic_name) {
  if (evaluator_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.evaluator_topic_name_.SetAllocated(evaluator_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.evaluator_topic_name_.IsDefault()) {
    _impl_.evaluator_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.evaluator_topic_name)
}

// optional string localization_topic = 4;
inline bool TopicConf::_internal_has_localization_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TopicConf::has_localization_topic() const {
  return _internal_has_localization_topic();
}
inline void TopicConf::clear_localization_topic() {
  _impl_.localization_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TopicConf::localization_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.localization_topic)
  return _internal_localization_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_localization_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.localization_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.localization_topic)
}
inline std::string* TopicConf::mutable_localization_topic() {
  std::string* _s = _internal_mutable_localization_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.localization_topic)
  return _s;
}
inline const std::string& TopicConf::_internal_localization_topic() const {
  return _impl_.localization_topic_.Get();
}
inline void TopicConf::_internal_set_localization_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.localization_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_localization_topic() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.localization_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_localization_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.localization_topic)
  if (!_internal_has_localization_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.localization_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_localization_topic(std::string* localization_topic) {
  if (localization_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.localization_topic_.SetAllocated(localization_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.localization_topic)
}

// optional string perception_obstacle_topic = 5;
inline bool TopicConf::_internal_has_perception_obstacle_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TopicConf::has_perception_obstacle_topic() const {
  return _internal_has_perception_obstacle_topic();
}
inline void TopicConf::clear_perception_obstacle_topic() {
  _impl_.perception_obstacle_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TopicConf::perception_obstacle_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.perception_obstacle_topic)
  return _internal_perception_obstacle_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_perception_obstacle_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.perception_obstacle_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.perception_obstacle_topic)
}
inline std::string* TopicConf::mutable_perception_obstacle_topic() {
  std::string* _s = _internal_mutable_perception_obstacle_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.perception_obstacle_topic)
  return _s;
}
inline const std::string& TopicConf::_internal_perception_obstacle_topic() const {
  return _impl_.perception_obstacle_topic_.Get();
}
inline void TopicConf::_internal_set_perception_obstacle_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.perception_obstacle_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_perception_obstacle_topic() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.perception_obstacle_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_perception_obstacle_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.perception_obstacle_topic)
  if (!_internal_has_perception_obstacle_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.perception_obstacle_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_obstacle_topic_.IsDefault()) {
    _impl_.perception_obstacle_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_perception_obstacle_topic(std::string* perception_obstacle_topic) {
  if (perception_obstacle_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.perception_obstacle_topic_.SetAllocated(perception_obstacle_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_obstacle_topic_.IsDefault()) {
    _impl_.perception_obstacle_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.perception_obstacle_topic)
}

// optional string perception_obstacles_topic_name = 6;
inline bool TopicConf::_internal_has_perception_obstacles_topic_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TopicConf::has_perception_obstacles_topic_name() const {
  return _internal_has_perception_obstacles_topic_name();
}
inline void TopicConf::clear_perception_obstacles_topic_name() {
  _impl_.perception_obstacles_topic_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TopicConf::perception_obstacles_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  return _internal_perception_obstacles_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_perception_obstacles_topic_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.perception_obstacles_topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}
inline std::string* TopicConf::mutable_perception_obstacles_topic_name() {
  std::string* _s = _internal_mutable_perception_obstacles_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  return _s;
}
inline const std::string& TopicConf::_internal_perception_obstacles_topic_name() const {
  return _impl_.perception_obstacles_topic_name_.Get();
}
inline void TopicConf::_internal_set_perception_obstacles_topic_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.perception_obstacles_topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_perception_obstacles_topic_name() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.perception_obstacles_topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_perception_obstacles_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  if (!_internal_has_perception_obstacles_topic_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.perception_obstacles_topic_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_obstacles_topic_name_.IsDefault()) {
    _impl_.perception_obstacles_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_perception_obstacles_topic_name(std::string* perception_obstacles_topic_name) {
  if (perception_obstacles_topic_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.perception_obstacles_topic_name_.SetAllocated(perception_obstacles_topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.perception_obstacles_topic_name_.IsDefault()) {
    _impl_.perception_obstacles_topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}

// optional string planning_trajectory_topic = 7;
inline bool TopicConf::_internal_has_planning_trajectory_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TopicConf::has_planning_trajectory_topic() const {
  return _internal_has_planning_trajectory_topic();
}
inline void TopicConf::clear_planning_trajectory_topic() {
  _impl_.planning_trajectory_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TopicConf::planning_trajectory_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.planning_trajectory_topic)
  return _internal_planning_trajectory_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_planning_trajectory_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.planning_trajectory_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.planning_trajectory_topic)
}
inline std::string* TopicConf::mutable_planning_trajectory_topic() {
  std::string* _s = _internal_mutable_planning_trajectory_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.planning_trajectory_topic)
  return _s;
}
inline const std::string& TopicConf::_internal_planning_trajectory_topic() const {
  return _impl_.planning_trajectory_topic_.Get();
}
inline void TopicConf::_internal_set_planning_trajectory_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.planning_trajectory_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_planning_trajectory_topic() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.planning_trajectory_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_planning_trajectory_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.planning_trajectory_topic)
  if (!_internal_has_planning_trajectory_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.planning_trajectory_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_trajectory_topic_.IsDefault()) {
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_planning_trajectory_topic(std::string* planning_trajectory_topic) {
  if (planning_trajectory_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.planning_trajectory_topic_.SetAllocated(planning_trajectory_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_trajectory_topic_.IsDefault()) {
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.planning_trajectory_topic)
}

// optional string prediction_topic = 8;
inline bool TopicConf::_internal_has_prediction_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TopicConf::has_prediction_topic() const {
  return _internal_has_prediction_topic();
}
inline void TopicConf::clear_prediction_topic() {
  _impl_.prediction_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TopicConf::prediction_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.prediction_topic)
  return _internal_prediction_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_prediction_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.prediction_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.prediction_topic)
}
inline std::string* TopicConf::mutable_prediction_topic() {
  std::string* _s = _internal_mutable_prediction_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.prediction_topic)
  return _s;
}
inline const std::string& TopicConf::_internal_prediction_topic() const {
  return _impl_.prediction_topic_.Get();
}
inline void TopicConf::_internal_set_prediction_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.prediction_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_prediction_topic() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.prediction_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_prediction_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.prediction_topic)
  if (!_internal_has_prediction_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.prediction_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prediction_topic_.IsDefault()) {
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_prediction_topic(std::string* prediction_topic) {
  if (prediction_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.prediction_topic_.SetAllocated(prediction_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prediction_topic_.IsDefault()) {
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.prediction_topic)
}

// optional string storytelling_topic = 9;
inline bool TopicConf::_internal_has_storytelling_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TopicConf::has_storytelling_topic() const {
  return _internal_has_storytelling_topic();
}
inline void TopicConf::clear_storytelling_topic() {
  _impl_.storytelling_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& TopicConf::storytelling_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.storytelling_topic)
  return _internal_storytelling_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConf::set_storytelling_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.storytelling_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.storytelling_topic)
}
inline std::string* TopicConf::mutable_storytelling_topic() {
  std::string* _s = _internal_mutable_storytelling_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.storytelling_topic)
  return _s;
}
inline const std::string& TopicConf::_internal_storytelling_topic() const {
  return _impl_.storytelling_topic_.Get();
}
inline void TopicConf::_internal_set_storytelling_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.storytelling_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConf::_internal_mutable_storytelling_topic() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.storytelling_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConf::release_storytelling_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.storytelling_topic)
  if (!_internal_has_storytelling_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.storytelling_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storytelling_topic_.IsDefault()) {
    _impl_.storytelling_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConf::set_allocated_storytelling_topic(std::string* storytelling_topic) {
  if (storytelling_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.storytelling_topic_.SetAllocated(storytelling_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storytelling_topic_.IsDefault()) {
    _impl_.storytelling_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.storytelling_topic)
}

// -------------------------------------------------------------------

// PredictionConf

// optional .apollo.prediction.TopicConf topic_conf = 1;
inline bool PredictionConf::_internal_has_topic_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_conf_ != nullptr);
  return value;
}
inline bool PredictionConf::has_topic_conf() const {
  return _internal_has_topic_conf();
}
inline void PredictionConf::clear_topic_conf() {
  if (_impl_.topic_conf_ != nullptr) _impl_.topic_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::TopicConf& PredictionConf::_internal_topic_conf() const {
  const ::apollo::prediction::TopicConf* p = _impl_.topic_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::prediction::TopicConf&>(
      ::apollo::prediction::_TopicConf_default_instance_);
}
inline const ::apollo::prediction::TopicConf& PredictionConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.topic_conf)
  return _internal_topic_conf();
}
inline void PredictionConf::unsafe_arena_set_allocated_topic_conf(
    ::apollo::prediction::TopicConf* topic_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_conf_);
  }
  _impl_.topic_conf_ = topic_conf;
  if (topic_conf) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.prediction.PredictionConf.topic_conf)
}
inline ::apollo::prediction::TopicConf* PredictionConf::release_topic_conf() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::prediction::TopicConf* PredictionConf::unsafe_arena_release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionConf.topic_conf)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TopicConf* PredictionConf::_internal_mutable_topic_conf() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.topic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TopicConf>(GetArenaForAllocation());
    _impl_.topic_conf_ = p;
  }
  return _impl_.topic_conf_;
}
inline ::apollo::prediction::TopicConf* PredictionConf::mutable_topic_conf() {
  ::apollo::prediction::TopicConf* _msg = _internal_mutable_topic_conf();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.topic_conf)
  return _msg;
}
inline void PredictionConf::set_allocated_topic_conf(::apollo::prediction::TopicConf* topic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_conf_;
  }
  if (topic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_conf);
    if (message_arena != submessage_arena) {
      topic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionConf.topic_conf)
}

// repeated .apollo.prediction.ObstacleConf obstacle_conf = 2;
inline int PredictionConf::_internal_obstacle_conf_size() const {
  return _impl_.obstacle_conf_.size();
}
inline int PredictionConf::obstacle_conf_size() const {
  return _internal_obstacle_conf_size();
}
inline void PredictionConf::clear_obstacle_conf() {
  _impl_.obstacle_conf_.Clear();
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.obstacle_conf)
  return _impl_.obstacle_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionConf.obstacle_conf)
  return &_impl_.obstacle_conf_;
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::_internal_obstacle_conf(int index) const {
  return _impl_.obstacle_conf_.Get(index);
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.obstacle_conf)
  return _internal_obstacle_conf(index);
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::_internal_add_obstacle_conf() {
  return _impl_.obstacle_conf_.Add();
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  ::apollo::prediction::ObstacleConf* _add = _internal_add_obstacle_conf();
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionConf.obstacle_conf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionConf.obstacle_conf)
  return _impl_.obstacle_conf_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_ObstacleStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_ObstacleStatus>() {
  return ::apollo::prediction::ObstacleConf_ObstacleStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_EvaluatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_EvaluatorType>() {
  return ::apollo::prediction::ObstacleConf_EvaluatorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_PredictorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_PredictorType>() {
  return ::apollo::prediction::ObstacleConf_PredictorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
