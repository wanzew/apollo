// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_obstacle.proto

#include "modules/prediction/proto/prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace prediction {
PROTOBUF_CONSTEXPR ObstacleIntent::ObstacleIntent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct ObstacleIntentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleIntentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleIntentDefaultTypeInternal() {}
  union {
    ObstacleIntent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleIntentDefaultTypeInternal _ObstacleIntent_default_instance_;
PROTOBUF_CONSTEXPR Intent::Intent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct IntentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntentDefaultTypeInternal() {}
  union {
    Intent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntentDefaultTypeInternal _Intent_default_instance_;
PROTOBUF_CONSTEXPR PredictionObstacle::PredictionObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_)*/{}
  , /*decltype(_impl_.feature_)*/{}
  , /*decltype(_impl_.perception_obstacle_)*/nullptr
  , /*decltype(_impl_.intent_)*/nullptr
  , /*decltype(_impl_.priority_)*/nullptr
  , /*decltype(_impl_.interactive_tag_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.predicted_period_)*/0
  , /*decltype(_impl_.is_static_)*/false} {}
struct PredictionObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionObstacleDefaultTypeInternal() {}
  union {
    PredictionObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionObstacleDefaultTypeInternal _PredictionObstacle_default_instance_;
PROTOBUF_CONSTEXPR PredictionObstacles::PredictionObstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prediction_obstacle_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.intent_)*/nullptr
  , /*decltype(_impl_.scenario_)*/nullptr
  , /*decltype(_impl_.start_timestamp_)*/0
  , /*decltype(_impl_.end_timestamp_)*/0
  , /*decltype(_impl_.perception_error_code_)*/0} {}
struct PredictionObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionObstaclesDefaultTypeInternal() {}
  union {
    PredictionObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionObstaclesDefaultTypeInternal _PredictionObstacles_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto = nullptr;

const uint32_t TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.predicted_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.is_static_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _impl_.feature_),
  0,
  4,
  5,
  ~0u,
  1,
  2,
  3,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.prediction_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.perception_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _impl_.scenario_),
  0,
  ~0u,
  5,
  3,
  4,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::prediction::ObstacleIntent)},
  { 8, 15, -1, sizeof(::apollo::prediction::Intent)},
  { 16, 31, -1, sizeof(::apollo::prediction::PredictionObstacle)},
  { 40, 53, -1, sizeof(::apollo::prediction::PredictionObstacles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::prediction::_ObstacleIntent_default_instance_._instance,
  &::apollo::prediction::_Intent_default_instance_._instance,
  &::apollo::prediction::_PredictionObstacle_default_instance_._instance,
  &::apollo::prediction::_PredictionObstacles_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/prediction/proto/prediction_ob"
  "stacle.proto\022\021apollo.prediction\032%modules"
  "/common/proto/error_code.proto\032!modules/"
  "common/proto/header.proto\032\'modules/predi"
  "ction/proto/scenario.proto\0322modules/perc"
  "eption/proto/perception_obstacle.proto\032&"
  "modules/prediction/proto/feature.proto\"\366"
  "\001\n\016ObstacleIntent\022=\n\004type\030\001 \001(\0162&.apollo"
  ".prediction.ObstacleIntent.Type:\007UNKNOWN"
  "\"\244\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\016\n\nSTAT"
  "IONARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHANGE_LANE\020\004\022\024\n"
  "\020LOW_ACCELERATION\020\005\022\025\n\021HIGH_ACCELERATION"
  "\020\006\022\024\n\020LOW_DECELERATION\020\007\022\025\n\021HIGH_DECELER"
  "ATION\020\010\"{\n\006Intent\0225\n\004type\030\001 \001(\0162\036.apollo"
  ".prediction.Intent.Type:\007UNKNOWN\":\n\004Type"
  "\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE\020\002\022\017\n\013C"
  "HANGE_LANE\020\003\"\255\003\n\022PredictionObstacle\022B\n\023p"
  "erception_obstacle\030\001 \001(\0132%.apollo.percep"
  "tion.PerceptionObstacle\022\021\n\ttimestamp\030\002 \001"
  "(\001\022\030\n\020predicted_period\030\003 \001(\001\0221\n\ntrajecto"
  "ry\030\004 \003(\0132\035.apollo.prediction.Trajectory\022"
  "1\n\006intent\030\005 \001(\0132!.apollo.prediction.Obst"
  "acleIntent\0225\n\010priority\030\006 \001(\0132#.apollo.pr"
  "ediction.ObstaclePriority\022B\n\017interactive"
  "_tag\030\t \001(\0132).apollo.prediction.ObstacleI"
  "nteractiveTag\022\030\n\tis_static\030\007 \001(\010:\005false\022"
  "+\n\007feature\030\010 \003(\0132\032.apollo.prediction.Fea"
  "ture\"\303\002\n\023PredictionObstacles\022%\n\006header\030\001"
  " \001(\0132\025.apollo.common.Header\022B\n\023predictio"
  "n_obstacle\030\002 \003(\0132%.apollo.prediction.Pre"
  "dictionObstacle\0227\n\025perception_error_code"
  "\030\003 \001(\0162\030.apollo.common.ErrorCode\022\027\n\017star"
  "t_timestamp\030\004 \001(\001\022\025\n\rend_timestamp\030\005 \001(\001"
  "\022)\n\006intent\030\006 \001(\0132\031.apollo.prediction.Int"
  "ent\022-\n\010scenario\030\007 \001(\0132\033.apollo.predictio"
  "n.Scenario"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fscenario_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto = {
    false, false, 1410, descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
    "modules/prediction/proto/prediction_obstacle.proto",
    &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::offsets,
    file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
    file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[0];
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleIntent_Type ObstacleIntent::UNKNOWN;
constexpr ObstacleIntent_Type ObstacleIntent::STOP;
constexpr ObstacleIntent_Type ObstacleIntent::STATIONARY;
constexpr ObstacleIntent_Type ObstacleIntent::MOVING;
constexpr ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MIN;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MAX;
constexpr int ObstacleIntent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[1];
}
bool Intent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Intent_Type Intent::UNKNOWN;
constexpr Intent_Type Intent::STOP;
constexpr Intent_Type Intent::CRUISE;
constexpr Intent_Type Intent::CHANGE_LANE;
constexpr Intent_Type Intent::Type_MIN;
constexpr Intent_Type Intent::Type_MAX;
constexpr int Intent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ObstacleIntent::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleIntent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstacleIntent::ObstacleIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.ObstacleIntent)
}
ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleIntent)
}

inline void ObstacleIntent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleIntent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleIntent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleIntent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleIntent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleIntent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleIntent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::prediction::ObstacleIntent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleIntent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleIntent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleIntent)
  return target;
}

size_t ObstacleIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleIntent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleIntent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleIntent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleIntent::GetClassData() const { return &_class_data_; }

void ObstacleIntent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleIntent *>(to)->MergeFrom(
      static_cast<const ObstacleIntent &>(from));
}


void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {
  return true;
}

void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleIntent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[0]);
}

// ===================================================================

class Intent::_Internal {
 public:
  using HasBits = decltype(std::declval<Intent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Intent::Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Intent)
}
Intent::Intent(const Intent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Intent)
}

inline void Intent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Intent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Intent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Intent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Intent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::Intent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::prediction::Intent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Intent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Intent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Intent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Intent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Intent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Intent::GetClassData() const { return &_class_data_; }

void Intent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Intent *>(to)->MergeFrom(
      static_cast<const Intent &>(from));
}


void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::InternalSwap(Intent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Intent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[1]);
}

// ===================================================================

class PredictionObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacle>()._impl_._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& perception_obstacle(const PredictionObstacle* msg);
  static void set_has_perception_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_predicted_period(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::prediction::ObstacleIntent& intent(const PredictionObstacle* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const PredictionObstacle* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag(const PredictionObstacle* msg);
  static void set_has_interactive_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_static(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::perception::PerceptionObstacle&
PredictionObstacle::_Internal::perception_obstacle(const PredictionObstacle* msg) {
  return *msg->_impl_.perception_obstacle_;
}
const ::apollo::prediction::ObstacleIntent&
PredictionObstacle::_Internal::intent(const PredictionObstacle* msg) {
  return *msg->_impl_.intent_;
}
const ::apollo::prediction::ObstaclePriority&
PredictionObstacle::_Internal::priority(const PredictionObstacle* msg) {
  return *msg->_impl_.priority_;
}
const ::apollo::prediction::ObstacleInteractiveTag&
PredictionObstacle::_Internal::interactive_tag(const PredictionObstacle* msg) {
  return *msg->_impl_.interactive_tag_;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (_impl_.perception_obstacle_ != nullptr) _impl_.perception_obstacle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacle::clear_trajectory() {
  _impl_.trajectory_.Clear();
}
void PredictionObstacle::clear_priority() {
  if (_impl_.priority_ != nullptr) _impl_.priority_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacle::clear_interactive_tag() {
  if (_impl_.interactive_tag_ != nullptr) _impl_.interactive_tag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PredictionObstacle::clear_feature() {
  _impl_.feature_.Clear();
}
PredictionObstacle::PredictionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.PredictionObstacle)
}
PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){from._impl_.trajectory_}
    , decltype(_impl_.feature_){from._impl_.feature_}
    , decltype(_impl_.perception_obstacle_){nullptr}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.predicted_period_){}
    , decltype(_impl_.is_static_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perception_obstacle()) {
    _impl_.perception_obstacle_ = new ::apollo::perception::PerceptionObstacle(*from._impl_.perception_obstacle_);
  }
  if (from._internal_has_intent()) {
    _impl_.intent_ = new ::apollo::prediction::ObstacleIntent(*from._impl_.intent_);
  }
  if (from._internal_has_priority()) {
    _impl_.priority_ = new ::apollo::prediction::ObstaclePriority(*from._impl_.priority_);
  }
  if (from._internal_has_interactive_tag()) {
    _impl_.interactive_tag_ = new ::apollo::prediction::ObstacleInteractiveTag(*from._impl_.interactive_tag_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_static_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_static_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacle)
}

inline void PredictionObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){arena}
    , decltype(_impl_.feature_){arena}
    , decltype(_impl_.perception_obstacle_){nullptr}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.interactive_tag_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.predicted_period_){0}
    , decltype(_impl_.is_static_){false}
  };
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_.~RepeatedPtrField();
  _impl_.feature_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.perception_obstacle_;
  if (this != internal_default_instance()) delete _impl_.intent_;
  if (this != internal_default_instance()) delete _impl_.priority_;
  if (this != internal_default_instance()) delete _impl_.interactive_tag_;
}

void PredictionObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_.Clear();
  _impl_.feature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.perception_obstacle_ != nullptr);
      _impl_.perception_obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.intent_ != nullptr);
      _impl_.intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.priority_ != nullptr);
      _impl_.priority_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.interactive_tag_ != nullptr);
      _impl_.interactive_tag_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_static_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_static_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perception_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double predicted_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_predicted_period(&has_bits);
          _impl_.predicted_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Trajectory trajectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleIntent intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_static = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_static(&has_bits);
          _impl_.is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Feature feature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactive_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::perception_obstacle(this),
        _Internal::perception_obstacle(this).GetCachedSize(), target, stream);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_predicted_period(), target);
  }

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::intent(this),
        _Internal::intent(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_static(), target);
  }

  // repeated .apollo.prediction.Feature feature = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::interactive_tag(this),
        _Internal::interactive_tag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacle)
  return target;
}

size_t PredictionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->_impl_.trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.Feature feature = 8;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->_impl_.feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.perception_obstacle_);
    }

    // optional .apollo.prediction.ObstacleIntent intent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.intent_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.priority_);
    }

    // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactive_tag_);
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacle::GetClassData() const { return &_class_data_; }

void PredictionObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacle *>(to)->MergeFrom(
      static_cast<const PredictionObstacle &>(from));
}


void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_.MergeFrom(from._impl_.trajectory_);
  _impl_.feature_.MergeFrom(from._impl_.feature_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_perception_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_perception_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_interactive_tag()->::apollo::prediction::ObstacleInteractiveTag::MergeFrom(from._internal_interactive_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.predicted_period_ = from._impl_.predicted_period_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.is_static_ = from._impl_.is_static_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.feature_))
    return false;
  return true;
}

void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_.InternalSwap(&other->_impl_.trajectory_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacle, _impl_.is_static_)
      + sizeof(PredictionObstacle::_impl_.is_static_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacle, _impl_.perception_obstacle_)>(
          reinterpret_cast<char*>(&_impl_.perception_obstacle_),
          reinterpret_cast<char*>(&other->_impl_.perception_obstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[2]);
}

// ===================================================================

class PredictionObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacles>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const PredictionObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_perception_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::Intent& intent(const PredictionObstacles* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::Scenario& scenario(const PredictionObstacles* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
PredictionObstacles::_Internal::header(const PredictionObstacles* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::prediction::Intent&
PredictionObstacles::_Internal::intent(const PredictionObstacles* msg) {
  return *msg->_impl_.intent_;
}
const ::apollo::prediction::Scenario&
PredictionObstacles::_Internal::scenario(const PredictionObstacles* msg) {
  return *msg->_impl_.scenario_;
}
void PredictionObstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacles::clear_scenario() {
  if (_impl_.scenario_ != nullptr) _impl_.scenario_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PredictionObstacles::PredictionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.PredictionObstacles)
}
PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_obstacle_){from._impl_.prediction_obstacle_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.scenario_){nullptr}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.end_timestamp_){}
    , decltype(_impl_.perception_error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_intent()) {
    _impl_.intent_ = new ::apollo::prediction::Intent(*from._impl_.intent_);
  }
  if (from._internal_has_scenario()) {
    _impl_.scenario_ = new ::apollo::prediction::Scenario(*from._impl_.scenario_);
  }
  ::memcpy(&_impl_.start_timestamp_, &from._impl_.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.perception_error_code_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.perception_error_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacles)
}

inline void PredictionObstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_obstacle_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.scenario_){nullptr}
    , decltype(_impl_.start_timestamp_){0}
    , decltype(_impl_.end_timestamp_){0}
    , decltype(_impl_.perception_error_code_){0}
  };
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prediction_obstacle_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.intent_;
  if (this != internal_default_instance()) delete _impl_.scenario_;
}

void PredictionObstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prediction_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.intent_ != nullptr);
      _impl_.intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.scenario_ != nullptr);
      _impl_.scenario_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.perception_error_code_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.perception_error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prediction_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode perception_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_perception_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double start_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_end_timestamp(&has_bits);
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Intent intent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Scenario scenario = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prediction_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_prediction_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_perception_error_code(), target);
  }

  // optional double start_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_timestamp(), target);
  }

  // optional double end_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_end_timestamp(), target);
  }

  // optional .apollo.prediction.Intent intent = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::intent(this),
        _Internal::intent(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.Scenario scenario = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::scenario(this),
        _Internal::scenario(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacles)
  return target;
}

size_t PredictionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  total_size += 1UL * this->_internal_prediction_obstacle_size();
  for (const auto& msg : this->_impl_.prediction_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.prediction.Intent intent = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.intent_);
    }

    // optional .apollo.prediction.Scenario scenario = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_);
    }

    // optional double start_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double end_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.ErrorCode perception_error_code = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_perception_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacles::GetClassData() const { return &_class_data_; }

void PredictionObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacles *>(to)->MergeFrom(
      static_cast<const PredictionObstacles &>(from));
}


void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.prediction_obstacle_.MergeFrom(from._impl_.prediction_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_intent()->::apollo::prediction::Intent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scenario()->::apollo::prediction::Scenario::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.end_timestamp_ = from._impl_.end_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.perception_error_code_ = from._impl_.perception_error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.prediction_obstacle_))
    return false;
  return true;
}

void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.prediction_obstacle_.InternalSwap(&other->_impl_.prediction_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacles, _impl_.perception_error_code_)
      + sizeof(PredictionObstacles::_impl_.perception_error_code_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacles, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleIntent*
Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleIntent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::ObstacleIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Intent*
Arena::CreateMaybeMessage< ::apollo::prediction::Intent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Intent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionObstacle*
Arena::CreateMaybeMessage< ::apollo::prediction::PredictionObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::PredictionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionObstacles*
Arena::CreateMaybeMessage< ::apollo::prediction::PredictionObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::PredictionObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
