// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing_config.proto

#include "modules/routing/proto/routing_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace routing {
PROTOBUF_CONSTEXPR RoutingConfig::RoutingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_speed_)*/0
  , /*decltype(_impl_.left_turn_penalty_)*/0
  , /*decltype(_impl_.right_turn_penalty_)*/0
  , /*decltype(_impl_.uturn_penalty_)*/0
  , /*decltype(_impl_.change_penalty_)*/0
  , /*decltype(_impl_.base_changing_length_)*/0} {}
struct RoutingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingConfigDefaultTypeInternal() {}
  union {
    RoutingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingConfigDefaultTypeInternal _RoutingConfig_default_instance_;
}  // namespace routing
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2frouting_2fproto_2frouting_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.base_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.left_turn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.right_turn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.uturn_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingConfig, _impl_.base_changing_length_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::routing::RoutingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::routing::_RoutingConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2frouting_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*modules/routing/proto/routing_config.p"
  "roto\022\016apollo.routing\"\247\001\n\rRoutingConfig\022\022"
  "\n\nbase_speed\030\001 \001(\001\022\031\n\021left_turn_penalty\030"
  "\002 \001(\001\022\032\n\022right_turn_penalty\030\003 \001(\001\022\025\n\rutu"
  "rn_penalty\030\004 \001(\001\022\026\n\016change_penalty\030\005 \001(\001"
  "\022\034\n\024base_changing_length\030\006 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto = {
    false, false, 230, descriptor_table_protodef_modules_2frouting_2fproto_2frouting_5fconfig_2eproto,
    "modules/routing/proto/routing_config.proto",
    &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2frouting_2fproto_2frouting_5fconfig_2eproto, file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto,
    file_level_service_descriptors_modules_2frouting_2fproto_2frouting_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2frouting_2fproto_2frouting_5fconfig_2eproto(&descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto);
namespace apollo {
namespace routing {

// ===================================================================

class RoutingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingConfig>()._impl_._has_bits_);
  static void set_has_base_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left_turn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_turn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uturn_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_changing_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RoutingConfig::RoutingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.RoutingConfig)
}
RoutingConfig::RoutingConfig(const RoutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_speed_){}
    , decltype(_impl_.left_turn_penalty_){}
    , decltype(_impl_.right_turn_penalty_){}
    , decltype(_impl_.uturn_penalty_){}
    , decltype(_impl_.change_penalty_){}
    , decltype(_impl_.base_changing_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.base_speed_, &from._impl_.base_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_changing_length_) -
    reinterpret_cast<char*>(&_impl_.base_speed_)) + sizeof(_impl_.base_changing_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingConfig)
}

inline void RoutingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_speed_){0}
    , decltype(_impl_.left_turn_penalty_){0}
    , decltype(_impl_.right_turn_penalty_){0}
    , decltype(_impl_.uturn_penalty_){0}
    , decltype(_impl_.change_penalty_){0}
    , decltype(_impl_.base_changing_length_){0}
  };
}

RoutingConfig::~RoutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.base_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_changing_length_) -
        reinterpret_cast<char*>(&_impl_.base_speed_)) + sizeof(_impl_.base_changing_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double base_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_base_speed(&has_bits);
          _impl_.base_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double left_turn_penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_left_turn_penalty(&has_bits);
          _impl_.left_turn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double right_turn_penalty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_right_turn_penalty(&has_bits);
          _impl_.right_turn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double uturn_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_uturn_penalty(&has_bits);
          _impl_.uturn_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double change_penalty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_change_penalty(&has_bits);
          _impl_.change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double base_changing_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_base_changing_length(&has_bits);
          _impl_.base_changing_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double base_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_base_speed(), target);
  }

  // optional double left_turn_penalty = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_left_turn_penalty(), target);
  }

  // optional double right_turn_penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_right_turn_penalty(), target);
  }

  // optional double uturn_penalty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_uturn_penalty(), target);
  }

  // optional double change_penalty = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_change_penalty(), target);
  }

  // optional double base_changing_length = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_base_changing_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingConfig)
  return target;
}

size_t RoutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double base_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_penalty = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double uturn_penalty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double change_penalty = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double base_changing_length = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingConfig::GetClassData() const { return &_class_data_; }

void RoutingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingConfig *>(to)->MergeFrom(
      static_cast<const RoutingConfig &>(from));
}


void RoutingConfig::MergeFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.base_speed_ = from._impl_.base_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.left_turn_penalty_ = from._impl_.left_turn_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.right_turn_penalty_ = from._impl_.right_turn_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.uturn_penalty_ = from._impl_.uturn_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.change_penalty_ = from._impl_.change_penalty_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.base_changing_length_ = from._impl_.base_changing_length_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingConfig::CopyFrom(const RoutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingConfig::IsInitialized() const {
  return true;
}

void RoutingConfig::InternalSwap(RoutingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingConfig, _impl_.base_changing_length_)
      + sizeof(RoutingConfig::_impl_.base_changing_length_)
      - PROTOBUF_FIELD_OFFSET(RoutingConfig, _impl_.base_speed_)>(
          reinterpret_cast<char*>(&_impl_.base_speed_),
          reinterpret_cast<char*>(&other->_impl_.base_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingConfig*
Arena::CreateMaybeMessage< ::apollo::routing::RoutingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::RoutingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
