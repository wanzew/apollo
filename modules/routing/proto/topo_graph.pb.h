// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/topo_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
namespace apollo {
namespace routing {
class CurvePoint;
struct CurvePointDefaultTypeInternal;
extern CurvePointDefaultTypeInternal _CurvePoint_default_instance_;
class CurveRange;
struct CurveRangeDefaultTypeInternal;
extern CurveRangeDefaultTypeInternal _CurveRange_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::routing::CurvePoint* Arena::CreateMaybeMessage<::apollo::routing::CurvePoint>(Arena*);
template<> ::apollo::routing::CurveRange* Arena::CreateMaybeMessage<::apollo::routing::CurveRange>(Arena*);
template<> ::apollo::routing::Edge* Arena::CreateMaybeMessage<::apollo::routing::Edge>(Arena*);
template<> ::apollo::routing::Graph* Arena::CreateMaybeMessage<::apollo::routing::Graph>(Arena*);
template<> ::apollo::routing::Node* Arena::CreateMaybeMessage<::apollo::routing::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace routing {

enum Edge_DirectionType : int {
  Edge_DirectionType_FORWARD = 0,
  Edge_DirectionType_LEFT = 1,
  Edge_DirectionType_RIGHT = 2
};
bool Edge_DirectionType_IsValid(int value);
constexpr Edge_DirectionType Edge_DirectionType_DirectionType_MIN = Edge_DirectionType_FORWARD;
constexpr Edge_DirectionType Edge_DirectionType_DirectionType_MAX = Edge_DirectionType_RIGHT;
constexpr int Edge_DirectionType_DirectionType_ARRAYSIZE = Edge_DirectionType_DirectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_DirectionType_descriptor();
template<typename T>
inline const std::string& Edge_DirectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_DirectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_DirectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_DirectionType_descriptor(), enum_t_value);
}
inline bool Edge_DirectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_DirectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_DirectionType>(
    Edge_DirectionType_descriptor(), name, value);
}
// ===================================================================

class CurvePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.CurvePoint) */ {
 public:
  inline CurvePoint() : CurvePoint(nullptr) {}
  ~CurvePoint() override;
  explicit PROTOBUF_CONSTEXPR CurvePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurvePoint(const CurvePoint& from);
  CurvePoint(CurvePoint&& from) noexcept
    : CurvePoint() {
    *this = ::std::move(from);
  }

  inline CurvePoint& operator=(const CurvePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurvePoint& operator=(CurvePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurvePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurvePoint* internal_default_instance() {
    return reinterpret_cast<const CurvePoint*>(
               &_CurvePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CurvePoint& a, CurvePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CurvePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurvePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurvePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurvePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurvePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurvePoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurvePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.CurvePoint";
  }
  protected:
  explicit CurvePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
  };
  // optional double s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.CurvePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class CurveRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.CurveRange) */ {
 public:
  inline CurveRange() : CurveRange(nullptr) {}
  ~CurveRange() override;
  explicit PROTOBUF_CONSTEXPR CurveRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurveRange(const CurveRange& from);
  CurveRange(CurveRange&& from) noexcept
    : CurveRange() {
    *this = ::std::move(from);
  }

  inline CurveRange& operator=(const CurveRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurveRange& operator=(CurveRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurveRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurveRange* internal_default_instance() {
    return reinterpret_cast<const CurveRange*>(
               &_CurveRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CurveRange& a, CurveRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CurveRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurveRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurveRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurveRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurveRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurveRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurveRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.CurveRange";
  }
  protected:
  explicit CurveRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional .apollo.routing.CurvePoint start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::apollo::routing::CurvePoint& start() const;
  PROTOBUF_NODISCARD ::apollo::routing::CurvePoint* release_start();
  ::apollo::routing::CurvePoint* mutable_start();
  void set_allocated_start(::apollo::routing::CurvePoint* start);
  private:
  const ::apollo::routing::CurvePoint& _internal_start() const;
  ::apollo::routing::CurvePoint* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::apollo::routing::CurvePoint* start);
  ::apollo::routing::CurvePoint* unsafe_arena_release_start();

  // optional .apollo.routing.CurvePoint end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::apollo::routing::CurvePoint& end() const;
  PROTOBUF_NODISCARD ::apollo::routing::CurvePoint* release_end();
  ::apollo::routing::CurvePoint* mutable_end();
  void set_allocated_end(::apollo::routing::CurvePoint* end);
  private:
  const ::apollo::routing::CurvePoint& _internal_end() const;
  ::apollo::routing::CurvePoint* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::apollo::routing::CurvePoint* end);
  ::apollo::routing::CurvePoint* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:apollo.routing.CurveRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::routing::CurvePoint* start_;
    ::apollo::routing::CurvePoint* end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftOutFieldNumber = 3,
    kRightOutFieldNumber = 4,
    kLaneIdFieldNumber = 1,
    kRoadIdFieldNumber = 8,
    kCentralCurveFieldNumber = 6,
    kLengthFieldNumber = 2,
    kCostFieldNumber = 5,
    kIsVirtualFieldNumber = 7,
  };
  // repeated .apollo.routing.CurveRange left_out = 3;
  int left_out_size() const;
  private:
  int _internal_left_out_size() const;
  public:
  void clear_left_out();
  ::apollo::routing::CurveRange* mutable_left_out(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >*
      mutable_left_out();
  private:
  const ::apollo::routing::CurveRange& _internal_left_out(int index) const;
  ::apollo::routing::CurveRange* _internal_add_left_out();
  public:
  const ::apollo::routing::CurveRange& left_out(int index) const;
  ::apollo::routing::CurveRange* add_left_out();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >&
      left_out() const;

  // repeated .apollo.routing.CurveRange right_out = 4;
  int right_out_size() const;
  private:
  int _internal_right_out_size() const;
  public:
  void clear_right_out();
  ::apollo::routing::CurveRange* mutable_right_out(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >*
      mutable_right_out();
  private:
  const ::apollo::routing::CurveRange& _internal_right_out(int index) const;
  ::apollo::routing::CurveRange* _internal_add_right_out();
  public:
  const ::apollo::routing::CurveRange& right_out(int index) const;
  ::apollo::routing::CurveRange* add_right_out();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >&
      right_out() const;

  // optional string lane_id = 1;
  bool has_lane_id() const;
  private:
  bool _internal_has_lane_id() const;
  public:
  void clear_lane_id();
  const std::string& lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lane_id();
  PROTOBUF_NODISCARD std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);
  private:
  const std::string& _internal_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lane_id(const std::string& value);
  std::string* _internal_mutable_lane_id();
  public:

  // optional string road_id = 8;
  bool has_road_id() const;
  private:
  bool _internal_has_road_id() const;
  public:
  void clear_road_id();
  const std::string& road_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_road_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_road_id();
  PROTOBUF_NODISCARD std::string* release_road_id();
  void set_allocated_road_id(std::string* road_id);
  private:
  const std::string& _internal_road_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_road_id(const std::string& value);
  std::string* _internal_mutable_road_id();
  public:

  // optional .apollo.hdmap.Curve central_curve = 6;
  bool has_central_curve() const;
  private:
  bool _internal_has_central_curve() const;
  public:
  void clear_central_curve();
  const ::apollo::hdmap::Curve& central_curve() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Curve* release_central_curve();
  ::apollo::hdmap::Curve* mutable_central_curve();
  void set_allocated_central_curve(::apollo::hdmap::Curve* central_curve);
  private:
  const ::apollo::hdmap::Curve& _internal_central_curve() const;
  ::apollo::hdmap::Curve* _internal_mutable_central_curve();
  public:
  void unsafe_arena_set_allocated_central_curve(
      ::apollo::hdmap::Curve* central_curve);
  ::apollo::hdmap::Curve* unsafe_arena_release_central_curve();

  // optional double length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double cost = 5;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // optional bool is_virtual = 7 [default = true];
  bool has_is_virtual() const;
  private:
  bool _internal_has_is_virtual() const;
  public:
  void clear_is_virtual();
  bool is_virtual() const;
  void set_is_virtual(bool value);
  private:
  bool _internal_is_virtual() const;
  void _internal_set_is_virtual(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange > left_out_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange > right_out_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr road_id_;
    ::apollo::hdmap::Curve* central_curve_;
    double length_;
    double cost_;
    bool is_virtual_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Edge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Edge_DirectionType DirectionType;
  static constexpr DirectionType FORWARD =
    Edge_DirectionType_FORWARD;
  static constexpr DirectionType LEFT =
    Edge_DirectionType_LEFT;
  static constexpr DirectionType RIGHT =
    Edge_DirectionType_RIGHT;
  static inline bool DirectionType_IsValid(int value) {
    return Edge_DirectionType_IsValid(value);
  }
  static constexpr DirectionType DirectionType_MIN =
    Edge_DirectionType_DirectionType_MIN;
  static constexpr DirectionType DirectionType_MAX =
    Edge_DirectionType_DirectionType_MAX;
  static constexpr int DirectionType_ARRAYSIZE =
    Edge_DirectionType_DirectionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DirectionType_descriptor() {
    return Edge_DirectionType_descriptor();
  }
  template<typename T>
  static inline const std::string& DirectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DirectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DirectionType_Name.");
    return Edge_DirectionType_Name(enum_t_value);
  }
  static inline bool DirectionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DirectionType* value) {
    return Edge_DirectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFromLaneIdFieldNumber = 1,
    kToLaneIdFieldNumber = 2,
    kCostFieldNumber = 3,
    kDirectionTypeFieldNumber = 4,
  };
  // optional string from_lane_id = 1;
  bool has_from_lane_id() const;
  private:
  bool _internal_has_from_lane_id() const;
  public:
  void clear_from_lane_id();
  const std::string& from_lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_lane_id();
  PROTOBUF_NODISCARD std::string* release_from_lane_id();
  void set_allocated_from_lane_id(std::string* from_lane_id);
  private:
  const std::string& _internal_from_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_lane_id(const std::string& value);
  std::string* _internal_mutable_from_lane_id();
  public:

  // optional string to_lane_id = 2;
  bool has_to_lane_id() const;
  private:
  bool _internal_has_to_lane_id() const;
  public:
  void clear_to_lane_id();
  const std::string& to_lane_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_lane_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_lane_id();
  PROTOBUF_NODISCARD std::string* release_to_lane_id();
  void set_allocated_to_lane_id(std::string* to_lane_id);
  private:
  const std::string& _internal_to_lane_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_lane_id(const std::string& value);
  std::string* _internal_mutable_to_lane_id();
  public:

  // optional double cost = 3;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  bool has_direction_type() const;
  private:
  bool _internal_has_direction_type() const;
  public:
  void clear_direction_type();
  ::apollo::routing::Edge_DirectionType direction_type() const;
  void set_direction_type(::apollo::routing::Edge_DirectionType value);
  private:
  ::apollo::routing::Edge_DirectionType _internal_direction_type() const;
  void _internal_set_direction_type(::apollo::routing::Edge_DirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_lane_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_lane_id_;
    double cost_;
    int direction_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Graph& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 3,
    kEdgeFieldNumber = 4,
    kHdmapVersionFieldNumber = 1,
    kHdmapDistrictFieldNumber = 2,
  };
  // repeated .apollo.routing.Node node = 3;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::apollo::routing::Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Node >*
      mutable_node();
  private:
  const ::apollo::routing::Node& _internal_node(int index) const;
  ::apollo::routing::Node* _internal_add_node();
  public:
  const ::apollo::routing::Node& node(int index) const;
  ::apollo::routing::Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Node >&
      node() const;

  // repeated .apollo.routing.Edge edge = 4;
  int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  void clear_edge();
  ::apollo::routing::Edge* mutable_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Edge >*
      mutable_edge();
  private:
  const ::apollo::routing::Edge& _internal_edge(int index) const;
  ::apollo::routing::Edge* _internal_add_edge();
  public:
  const ::apollo::routing::Edge& edge(int index) const;
  ::apollo::routing::Edge* add_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Edge >&
      edge() const;

  // optional string hdmap_version = 1;
  bool has_hdmap_version() const;
  private:
  bool _internal_has_hdmap_version() const;
  public:
  void clear_hdmap_version();
  const std::string& hdmap_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hdmap_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hdmap_version();
  PROTOBUF_NODISCARD std::string* release_hdmap_version();
  void set_allocated_hdmap_version(std::string* hdmap_version);
  private:
  const std::string& _internal_hdmap_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdmap_version(const std::string& value);
  std::string* _internal_mutable_hdmap_version();
  public:

  // optional string hdmap_district = 2;
  bool has_hdmap_district() const;
  private:
  bool _internal_has_hdmap_district() const;
  public:
  void clear_hdmap_district();
  const std::string& hdmap_district() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hdmap_district(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hdmap_district();
  PROTOBUF_NODISCARD std::string* release_hdmap_district();
  void set_allocated_hdmap_district(std::string* hdmap_district);
  private:
  const std::string& _internal_hdmap_district() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdmap_district(const std::string& value);
  std::string* _internal_mutable_hdmap_district();
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Node > node_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Edge > edge_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdmap_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdmap_district_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurvePoint

// optional double s = 1;
inline bool CurvePoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurvePoint::has_s() const {
  return _internal_has_s();
}
inline void CurvePoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CurvePoint::_internal_s() const {
  return _impl_.s_;
}
inline double CurvePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurvePoint.s)
  return _internal_s();
}
inline void CurvePoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void CurvePoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.routing.CurvePoint.s)
}

// -------------------------------------------------------------------

// CurveRange

// optional .apollo.routing.CurvePoint start = 1;
inline bool CurveRange::_internal_has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline bool CurveRange::has_start() const {
  return _internal_has_start();
}
inline void CurveRange::clear_start() {
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::routing::CurvePoint& CurveRange::_internal_start() const {
  const ::apollo::routing::CurvePoint* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::CurvePoint&>(
      ::apollo::routing::_CurvePoint_default_instance_);
}
inline const ::apollo::routing::CurvePoint& CurveRange::start() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurveRange.start)
  return _internal_start();
}
inline void CurveRange::unsafe_arena_set_allocated_start(
    ::apollo::routing::CurvePoint* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.CurveRange.start)
}
inline ::apollo::routing::CurvePoint* CurveRange::release_start() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::CurvePoint* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::CurvePoint* CurveRange::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:apollo.routing.CurveRange.start)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::CurvePoint* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::apollo::routing::CurvePoint* CurveRange::_internal_mutable_start() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::CurvePoint>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::apollo::routing::CurvePoint* CurveRange::mutable_start() {
  ::apollo::routing::CurvePoint* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:apollo.routing.CurveRange.start)
  return _msg;
}
inline void CurveRange::set_allocated_start(::apollo::routing::CurvePoint* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.CurveRange.start)
}

// optional .apollo.routing.CurvePoint end = 2;
inline bool CurveRange::_internal_has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline bool CurveRange::has_end() const {
  return _internal_has_end();
}
inline void CurveRange::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::routing::CurvePoint& CurveRange::_internal_end() const {
  const ::apollo::routing::CurvePoint* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::CurvePoint&>(
      ::apollo::routing::_CurvePoint_default_instance_);
}
inline const ::apollo::routing::CurvePoint& CurveRange::end() const {
  // @@protoc_insertion_point(field_get:apollo.routing.CurveRange.end)
  return _internal_end();
}
inline void CurveRange::unsafe_arena_set_allocated_end(
    ::apollo::routing::CurvePoint* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.CurveRange.end)
}
inline ::apollo::routing::CurvePoint* CurveRange::release_end() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::CurvePoint* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::CurvePoint* CurveRange::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:apollo.routing.CurveRange.end)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::CurvePoint* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::apollo::routing::CurvePoint* CurveRange::_internal_mutable_end() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::CurvePoint>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::apollo::routing::CurvePoint* CurveRange::mutable_end() {
  ::apollo::routing::CurvePoint* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:apollo.routing.CurveRange.end)
  return _msg;
}
inline void CurveRange::set_allocated_end(::apollo::routing::CurvePoint* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.CurveRange.end)
}

// -------------------------------------------------------------------

// Node

// optional string lane_id = 1;
inline bool Node::_internal_has_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_lane_id() const {
  return _internal_has_lane_id();
}
inline void Node::clear_lane_id() {
  _impl_.lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.lane_id)
  return _internal_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Node.lane_id)
}
inline std::string* Node::mutable_lane_id() {
  std::string* _s = _internal_mutable_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.lane_id)
  return _s;
}
inline const std::string& Node::_internal_lane_id() const {
  return _impl_.lane_id_.Get();
}
inline void Node::_internal_set_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.lane_id)
  if (!_internal_has_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lane_id_.SetAllocated(lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lane_id_.IsDefault()) {
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.lane_id)
}

// optional double length = 2;
inline bool Node::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Node::has_length() const {
  return _internal_has_length();
}
inline void Node::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Node::_internal_length() const {
  return _impl_.length_;
}
inline double Node::length() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.length)
  return _internal_length();
}
inline void Node::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.length_ = value;
}
inline void Node::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Node.length)
}

// repeated .apollo.routing.CurveRange left_out = 3;
inline int Node::_internal_left_out_size() const {
  return _impl_.left_out_.size();
}
inline int Node::left_out_size() const {
  return _internal_left_out_size();
}
inline void Node::clear_left_out() {
  _impl_.left_out_.Clear();
}
inline ::apollo::routing::CurveRange* Node::mutable_left_out(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.left_out)
  return _impl_.left_out_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >*
Node::mutable_left_out() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Node.left_out)
  return &_impl_.left_out_;
}
inline const ::apollo::routing::CurveRange& Node::_internal_left_out(int index) const {
  return _impl_.left_out_.Get(index);
}
inline const ::apollo::routing::CurveRange& Node::left_out(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.left_out)
  return _internal_left_out(index);
}
inline ::apollo::routing::CurveRange* Node::_internal_add_left_out() {
  return _impl_.left_out_.Add();
}
inline ::apollo::routing::CurveRange* Node::add_left_out() {
  ::apollo::routing::CurveRange* _add = _internal_add_left_out();
  // @@protoc_insertion_point(field_add:apollo.routing.Node.left_out)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >&
Node::left_out() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Node.left_out)
  return _impl_.left_out_;
}

// repeated .apollo.routing.CurveRange right_out = 4;
inline int Node::_internal_right_out_size() const {
  return _impl_.right_out_.size();
}
inline int Node::right_out_size() const {
  return _internal_right_out_size();
}
inline void Node::clear_right_out() {
  _impl_.right_out_.Clear();
}
inline ::apollo::routing::CurveRange* Node::mutable_right_out(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.right_out)
  return _impl_.right_out_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >*
Node::mutable_right_out() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Node.right_out)
  return &_impl_.right_out_;
}
inline const ::apollo::routing::CurveRange& Node::_internal_right_out(int index) const {
  return _impl_.right_out_.Get(index);
}
inline const ::apollo::routing::CurveRange& Node::right_out(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.right_out)
  return _internal_right_out(index);
}
inline ::apollo::routing::CurveRange* Node::_internal_add_right_out() {
  return _impl_.right_out_.Add();
}
inline ::apollo::routing::CurveRange* Node::add_right_out() {
  ::apollo::routing::CurveRange* _add = _internal_add_right_out();
  // @@protoc_insertion_point(field_add:apollo.routing.Node.right_out)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::CurveRange >&
Node::right_out() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Node.right_out)
  return _impl_.right_out_;
}

// optional double cost = 5;
inline bool Node::_internal_has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Node::has_cost() const {
  return _internal_has_cost();
}
inline void Node::clear_cost() {
  _impl_.cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Node::_internal_cost() const {
  return _impl_.cost_;
}
inline double Node::cost() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.cost)
  return _internal_cost();
}
inline void Node::_internal_set_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cost_ = value;
}
inline void Node::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Node.cost)
}

// optional .apollo.hdmap.Curve central_curve = 6;
inline bool Node::_internal_has_central_curve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.central_curve_ != nullptr);
  return value;
}
inline bool Node::has_central_curve() const {
  return _internal_has_central_curve();
}
inline const ::apollo::hdmap::Curve& Node::_internal_central_curve() const {
  const ::apollo::hdmap::Curve* p = _impl_.central_curve_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Curve&>(
      ::apollo::hdmap::_Curve_default_instance_);
}
inline const ::apollo::hdmap::Curve& Node::central_curve() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.central_curve)
  return _internal_central_curve();
}
inline void Node::unsafe_arena_set_allocated_central_curve(
    ::apollo::hdmap::Curve* central_curve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.central_curve_);
  }
  _impl_.central_curve_ = central_curve;
  if (central_curve) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.Node.central_curve)
}
inline ::apollo::hdmap::Curve* Node::release_central_curve() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::hdmap::Curve* temp = _impl_.central_curve_;
  _impl_.central_curve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Curve* Node::unsafe_arena_release_central_curve() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.central_curve)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::hdmap::Curve* temp = _impl_.central_curve_;
  _impl_.central_curve_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Curve* Node::_internal_mutable_central_curve() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.central_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Curve>(GetArenaForAllocation());
    _impl_.central_curve_ = p;
  }
  return _impl_.central_curve_;
}
inline ::apollo::hdmap::Curve* Node::mutable_central_curve() {
  ::apollo::hdmap::Curve* _msg = _internal_mutable_central_curve();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.central_curve)
  return _msg;
}
inline void Node::set_allocated_central_curve(::apollo::hdmap::Curve* central_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.central_curve_);
  }
  if (central_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(central_curve));
    if (message_arena != submessage_arena) {
      central_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, central_curve, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.central_curve_ = central_curve;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.central_curve)
}

// optional bool is_virtual = 7 [default = true];
inline bool Node::_internal_has_is_virtual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Node::has_is_virtual() const {
  return _internal_has_is_virtual();
}
inline void Node::clear_is_virtual() {
  _impl_.is_virtual_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Node::_internal_is_virtual() const {
  return _impl_.is_virtual_;
}
inline bool Node::is_virtual() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.is_virtual)
  return _internal_is_virtual();
}
inline void Node::_internal_set_is_virtual(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_virtual_ = value;
}
inline void Node::set_is_virtual(bool value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Node.is_virtual)
}

// optional string road_id = 8;
inline bool Node::_internal_has_road_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Node::has_road_id() const {
  return _internal_has_road_id();
}
inline void Node::clear_road_id() {
  _impl_.road_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Node::road_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Node.road_id)
  return _internal_road_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_road_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.road_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Node.road_id)
}
inline std::string* Node::mutable_road_id() {
  std::string* _s = _internal_mutable_road_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Node.road_id)
  return _s;
}
inline const std::string& Node::_internal_road_id() const {
  return _impl_.road_id_.Get();
}
inline void Node::_internal_set_road_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.road_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_road_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.road_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_road_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Node.road_id)
  if (!_internal_has_road_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.road_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.road_id_.IsDefault()) {
    _impl_.road_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_road_id(std::string* road_id) {
  if (road_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.road_id_.SetAllocated(road_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.road_id_.IsDefault()) {
    _impl_.road_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Node.road_id)
}

// -------------------------------------------------------------------

// Edge

// optional string from_lane_id = 1;
inline bool Edge::_internal_has_from_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Edge::has_from_lane_id() const {
  return _internal_has_from_lane_id();
}
inline void Edge::clear_from_lane_id() {
  _impl_.from_lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Edge::from_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.from_lane_id)
  return _internal_from_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge::set_from_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.from_lane_id)
}
inline std::string* Edge::mutable_from_lane_id() {
  std::string* _s = _internal_mutable_from_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Edge.from_lane_id)
  return _s;
}
inline const std::string& Edge::_internal_from_lane_id() const {
  return _impl_.from_lane_id_.Get();
}
inline void Edge::_internal_set_from_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_from_lane_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge::release_from_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Edge.from_lane_id)
  if (!_internal_has_from_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_lane_id_.IsDefault()) {
    _impl_.from_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Edge::set_allocated_from_lane_id(std::string* from_lane_id) {
  if (from_lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_lane_id_.SetAllocated(from_lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_lane_id_.IsDefault()) {
    _impl_.from_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Edge.from_lane_id)
}

// optional string to_lane_id = 2;
inline bool Edge::_internal_has_to_lane_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Edge::has_to_lane_id() const {
  return _internal_has_to_lane_id();
}
inline void Edge::clear_to_lane_id() {
  _impl_.to_lane_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Edge::to_lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.to_lane_id)
  return _internal_to_lane_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Edge::set_to_lane_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.to_lane_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.to_lane_id)
}
inline std::string* Edge::mutable_to_lane_id() {
  std::string* _s = _internal_mutable_to_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Edge.to_lane_id)
  return _s;
}
inline const std::string& Edge::_internal_to_lane_id() const {
  return _impl_.to_lane_id_.Get();
}
inline void Edge::_internal_set_to_lane_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.to_lane_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_to_lane_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.to_lane_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Edge::release_to_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Edge.to_lane_id)
  if (!_internal_has_to_lane_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.to_lane_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_lane_id_.IsDefault()) {
    _impl_.to_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Edge::set_allocated_to_lane_id(std::string* to_lane_id) {
  if (to_lane_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.to_lane_id_.SetAllocated(to_lane_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_lane_id_.IsDefault()) {
    _impl_.to_lane_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Edge.to_lane_id)
}

// optional double cost = 3;
inline bool Edge::_internal_has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Edge::has_cost() const {
  return _internal_has_cost();
}
inline void Edge::clear_cost() {
  _impl_.cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Edge::_internal_cost() const {
  return _impl_.cost_;
}
inline double Edge::cost() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.cost)
  return _internal_cost();
}
inline void Edge::_internal_set_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cost_ = value;
}
inline void Edge::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.cost)
}

// optional .apollo.routing.Edge.DirectionType direction_type = 4;
inline bool Edge::_internal_has_direction_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Edge::has_direction_type() const {
  return _internal_has_direction_type();
}
inline void Edge::clear_direction_type() {
  _impl_.direction_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::routing::Edge_DirectionType Edge::_internal_direction_type() const {
  return static_cast< ::apollo::routing::Edge_DirectionType >(_impl_.direction_type_);
}
inline ::apollo::routing::Edge_DirectionType Edge::direction_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Edge.direction_type)
  return _internal_direction_type();
}
inline void Edge::_internal_set_direction_type(::apollo::routing::Edge_DirectionType value) {
  assert(::apollo::routing::Edge_DirectionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.direction_type_ = value;
}
inline void Edge::set_direction_type(::apollo::routing::Edge_DirectionType value) {
  _internal_set_direction_type(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Edge.direction_type)
}

// -------------------------------------------------------------------

// Graph

// optional string hdmap_version = 1;
inline bool Graph::_internal_has_hdmap_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Graph::has_hdmap_version() const {
  return _internal_has_hdmap_version();
}
inline void Graph::clear_hdmap_version() {
  _impl_.hdmap_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Graph::hdmap_version() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.hdmap_version)
  return _internal_hdmap_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Graph::set_hdmap_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hdmap_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Graph.hdmap_version)
}
inline std::string* Graph::mutable_hdmap_version() {
  std::string* _s = _internal_mutable_hdmap_version();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.hdmap_version)
  return _s;
}
inline const std::string& Graph::_internal_hdmap_version() const {
  return _impl_.hdmap_version_.Get();
}
inline void Graph::_internal_set_hdmap_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hdmap_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Graph::_internal_mutable_hdmap_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hdmap_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Graph::release_hdmap_version() {
  // @@protoc_insertion_point(field_release:apollo.routing.Graph.hdmap_version)
  if (!_internal_has_hdmap_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hdmap_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hdmap_version_.IsDefault()) {
    _impl_.hdmap_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Graph::set_allocated_hdmap_version(std::string* hdmap_version) {
  if (hdmap_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hdmap_version_.SetAllocated(hdmap_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hdmap_version_.IsDefault()) {
    _impl_.hdmap_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Graph.hdmap_version)
}

// optional string hdmap_district = 2;
inline bool Graph::_internal_has_hdmap_district() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Graph::has_hdmap_district() const {
  return _internal_has_hdmap_district();
}
inline void Graph::clear_hdmap_district() {
  _impl_.hdmap_district_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Graph::hdmap_district() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.hdmap_district)
  return _internal_hdmap_district();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Graph::set_hdmap_district(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.hdmap_district_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Graph.hdmap_district)
}
inline std::string* Graph::mutable_hdmap_district() {
  std::string* _s = _internal_mutable_hdmap_district();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.hdmap_district)
  return _s;
}
inline const std::string& Graph::_internal_hdmap_district() const {
  return _impl_.hdmap_district_.Get();
}
inline void Graph::_internal_set_hdmap_district(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hdmap_district_.Set(value, GetArenaForAllocation());
}
inline std::string* Graph::_internal_mutable_hdmap_district() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hdmap_district_.Mutable(GetArenaForAllocation());
}
inline std::string* Graph::release_hdmap_district() {
  // @@protoc_insertion_point(field_release:apollo.routing.Graph.hdmap_district)
  if (!_internal_has_hdmap_district()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.hdmap_district_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hdmap_district_.IsDefault()) {
    _impl_.hdmap_district_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Graph::set_allocated_hdmap_district(std::string* hdmap_district) {
  if (hdmap_district != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hdmap_district_.SetAllocated(hdmap_district, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hdmap_district_.IsDefault()) {
    _impl_.hdmap_district_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Graph.hdmap_district)
}

// repeated .apollo.routing.Node node = 3;
inline int Graph::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int Graph::node_size() const {
  return _internal_node_size();
}
inline void Graph::clear_node() {
  _impl_.node_.Clear();
}
inline ::apollo::routing::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Graph.node)
  return &_impl_.node_;
}
inline const ::apollo::routing::Node& Graph::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::apollo::routing::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.node)
  return _internal_node(index);
}
inline ::apollo::routing::Node* Graph::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::apollo::routing::Node* Graph::add_node() {
  ::apollo::routing::Node* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:apollo.routing.Graph.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Graph.node)
  return _impl_.node_;
}

// repeated .apollo.routing.Edge edge = 4;
inline int Graph::_internal_edge_size() const {
  return _impl_.edge_.size();
}
inline int Graph::edge_size() const {
  return _internal_edge_size();
}
inline void Graph::clear_edge() {
  _impl_.edge_.Clear();
}
inline ::apollo::routing::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Graph.edge)
  return _impl_.edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Graph.edge)
  return &_impl_.edge_;
}
inline const ::apollo::routing::Edge& Graph::_internal_edge(int index) const {
  return _impl_.edge_.Get(index);
}
inline const ::apollo::routing::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Graph.edge)
  return _internal_edge(index);
}
inline ::apollo::routing::Edge* Graph::_internal_add_edge() {
  return _impl_.edge_.Add();
}
inline ::apollo::routing::Edge* Graph::add_edge() {
  ::apollo::routing::Edge* _add = _internal_add_edge();
  // @@protoc_insertion_point(field_add:apollo.routing.Graph.edge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Graph.edge)
  return _impl_.edge_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::routing::Edge_DirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::routing::Edge_DirectionType>() {
  return ::apollo::routing::Edge_DirectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto
