// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/topo_graph.proto

#include "modules/routing/proto/topo_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace routing {
PROTOBUF_CONSTEXPR CurvePoint::CurvePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0} {}
struct CurvePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurvePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurvePointDefaultTypeInternal() {}
  union {
    CurvePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurvePointDefaultTypeInternal _CurvePoint_default_instance_;
PROTOBUF_CONSTEXPR CurveRange::CurveRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr} {}
struct CurveRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurveRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurveRangeDefaultTypeInternal() {}
  union {
    CurveRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurveRangeDefaultTypeInternal _CurveRange_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_out_)*/{}
  , /*decltype(_impl_.right_out_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.road_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.central_curve_)*/nullptr
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_.is_virtual_)*/true} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_.direction_type_)*/0} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR Graph::Graph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.edge_)*/{}
  , /*decltype(_impl_.hdmap_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hdmap_district_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDefaultTypeInternal _Graph_default_instance_;
}  // namespace routing
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto = nullptr;

const uint32_t TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurvePoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurvePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurvePoint, _impl_.s_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurveRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurveRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurveRange, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::CurveRange, _impl_.end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.left_out_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.right_out_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.central_curve_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.is_virtual_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Node, _impl_.road_id_),
  0,
  3,
  ~0u,
  ~0u,
  4,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _impl_.from_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _impl_.to_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Edge, _impl_.direction_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _impl_.hdmap_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _impl_.hdmap_district_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Graph, _impl_.edge_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::routing::CurvePoint)},
  { 8, 16, -1, sizeof(::apollo::routing::CurveRange)},
  { 18, 32, -1, sizeof(::apollo::routing::Node)},
  { 40, 50, -1, sizeof(::apollo::routing::Edge)},
  { 54, 64, -1, sizeof(::apollo::routing::Graph)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::routing::_CurvePoint_default_instance_._instance,
  &::apollo::routing::_CurveRange_default_instance_._instance,
  &::apollo::routing::_Node_default_instance_._instance,
  &::apollo::routing::_Edge_default_instance_._instance,
  &::apollo::routing::_Graph_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/routing/proto/topo_graph.proto"
  "\022\016apollo.routing\032$modules/map/proto/map_"
  "geometry.proto\"\027\n\nCurvePoint\022\t\n\001s\030\001 \001(\001\""
  "`\n\nCurveRange\022)\n\005start\030\001 \001(\0132\032.apollo.ro"
  "uting.CurvePoint\022\'\n\003end\030\002 \001(\0132\032.apollo.r"
  "outing.CurvePoint\"\351\001\n\004Node\022\017\n\007lane_id\030\001 "
  "\001(\t\022\016\n\006length\030\002 \001(\001\022,\n\010left_out\030\003 \003(\0132\032."
  "apollo.routing.CurveRange\022-\n\tright_out\030\004"
  " \003(\0132\032.apollo.routing.CurveRange\022\014\n\004cost"
  "\030\005 \001(\001\022*\n\rcentral_curve\030\006 \001(\0132\023.apollo.h"
  "dmap.Curve\022\030\n\nis_virtual\030\007 \001(\010:\004true\022\017\n\007"
  "road_id\030\010 \001(\t\"\255\001\n\004Edge\022\024\n\014from_lane_id\030\001"
  " \001(\t\022\022\n\nto_lane_id\030\002 \001(\t\022\014\n\004cost\030\003 \001(\001\022:"
  "\n\016direction_type\030\004 \001(\0162\".apollo.routing."
  "Edge.DirectionType\"1\n\rDirectionType\022\013\n\007F"
  "ORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"~\n\005Graph\022\025"
  "\n\rhdmap_version\030\001 \001(\t\022\026\n\016hdmap_district\030"
  "\002 \001(\t\022\"\n\004node\030\003 \003(\0132\024.apollo.routing.Nod"
  "e\022\"\n\004edge\030\004 \003(\0132\024.apollo.routing.Edge"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_deps[1] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto = {
    false, false, 757, descriptor_table_protodef_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto,
    "modules/routing/proto/topo_graph.proto",
    &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once, descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::offsets,
    file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto, file_level_enum_descriptors_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto,
    file_level_service_descriptors_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter() {
  return &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto(&descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto);
namespace apollo {
namespace routing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_DirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto);
  return file_level_enum_descriptors_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[0];
}
bool Edge_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Edge_DirectionType Edge::FORWARD;
constexpr Edge_DirectionType Edge::LEFT;
constexpr Edge_DirectionType Edge::RIGHT;
constexpr Edge_DirectionType Edge::DirectionType_MIN;
constexpr Edge_DirectionType Edge::DirectionType_MAX;
constexpr int Edge::DirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CurvePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<CurvePoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurvePoint::CurvePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.CurvePoint)
}
CurvePoint::CurvePoint(const CurvePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_ = from._impl_.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurvePoint)
}

inline void CurvePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
  };
}

CurvePoint::~CurvePoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurvePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurvePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurvePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurvePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurvePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurvePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurvePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurvePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurvePoint)
  return target;
}

size_t CurvePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurvePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double s = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurvePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurvePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurvePoint::GetClassData() const { return &_class_data_; }

void CurvePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurvePoint *>(to)->MergeFrom(
      static_cast<const CurvePoint &>(from));
}


void CurvePoint::MergeFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_s()) {
    _internal_set_s(from._internal_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurvePoint::CopyFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvePoint::IsInitialized() const {
  return true;
}

void CurvePoint::InternalSwap(CurvePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.s_, other->_impl_.s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurvePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[0]);
}

// ===================================================================

class CurveRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CurveRange>()._impl_._has_bits_);
  static const ::apollo::routing::CurvePoint& start(const CurveRange* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::routing::CurvePoint& end(const CurveRange* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::routing::CurvePoint&
CurveRange::_Internal::start(const CurveRange* msg) {
  return *msg->_impl_.start_;
}
const ::apollo::routing::CurvePoint&
CurveRange::_Internal::end(const CurveRange* msg) {
  return *msg->_impl_.end_;
}
CurveRange::CurveRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.CurveRange)
}
CurveRange::CurveRange(const CurveRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _impl_.start_ = new ::apollo::routing::CurvePoint(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _impl_.end_ = new ::apollo::routing::CurvePoint(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurveRange)
}

inline void CurveRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
  };
}

CurveRange::~CurveRange() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurveRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurveRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void CurveRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CurveRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurveRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurveRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.routing.CurvePoint start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.CurvePoint end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurveRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurveRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.routing.CurvePoint start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.routing.CurvePoint end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurveRange)
  return target;
}

size_t CurveRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurveRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.routing.CurvePoint start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_);
    }

    // optional .apollo.routing.CurvePoint end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurveRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurveRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurveRange::GetClassData() const { return &_class_data_; }

void CurveRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurveRange *>(to)->MergeFrom(
      static_cast<const CurveRange &>(from));
}


void CurveRange::MergeFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurveRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::apollo::routing::CurvePoint::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::apollo::routing::CurvePoint::MergeFrom(from._internal_end());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurveRange::CopyFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurveRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveRange::IsInitialized() const {
  return true;
}

void CurveRange::InternalSwap(CurveRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurveRange, _impl_.end_)
      + sizeof(CurveRange::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(CurveRange, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurveRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[1]);
}

// ===================================================================

class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._impl_._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::hdmap::Curve& central_curve(const Node* msg);
  static void set_has_central_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_virtual(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_road_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Curve&
Node::_Internal::central_curve(const Node* msg) {
  return *msg->_impl_.central_curve_;
}
void Node::clear_central_curve() {
  if (_impl_.central_curve_ != nullptr) _impl_.central_curve_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_out_){from._impl_.left_out_}
    , decltype(_impl_.right_out_){from._impl_.right_out_}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.road_id_){}
    , decltype(_impl_.central_curve_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.is_virtual_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  _impl_.road_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.road_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_road_id()) {
    _impl_.road_id_.Set(from._internal_road_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_central_curve()) {
    _impl_.central_curve_ = new ::apollo::hdmap::Curve(*from._impl_.central_curve_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_virtual_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.is_virtual_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_out_){arena}
    , decltype(_impl_.right_out_){arena}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.road_id_){}
    , decltype(_impl_.central_curve_){nullptr}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.cost_){0}
    , decltype(_impl_.is_virtual_){true}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.road_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.road_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:apollo.routing.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_out_.~RepeatedPtrField();
  _impl_.right_out_.~RepeatedPtrField();
  _impl_.lane_id_.Destroy();
  _impl_.road_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.central_curve_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.left_out_.Clear();
  _impl_.right_out_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lane_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.road_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.central_curve_ != nullptr);
      _impl_.central_curve_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cost_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.cost_));
    _impl_.is_virtual_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Node.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.CurveRange left_out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_out(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.CurveRange right_out = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_out(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_cost(&has_bits);
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Curve central_curve = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_central_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_virtual = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_virtual(&has_bits);
          _impl_.is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string road_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_road_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Node.road_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // repeated .apollo.routing.CurveRange left_out = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_out_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_out(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_out_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_out(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double cost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_cost(), target);
  }

  // optional .apollo.hdmap.Curve central_curve = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::central_curve(this),
        _Internal::central_curve(this).GetCachedSize(), target, stream);
  }

  // optional bool is_virtual = 7 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_virtual(), target);
  }

  // optional string road_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_road_id().data(), static_cast<int>(this->_internal_road_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.road_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_road_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.CurveRange left_out = 3;
  total_size += 1UL * this->_internal_left_out_size();
  for (const auto& msg : this->_impl_.left_out_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  total_size += 1UL * this->_internal_right_out_size();
  for (const auto& msg : this->_impl_.right_out_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional string road_id = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_road_id());
    }

    // optional .apollo.hdmap.Curve central_curve = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.central_curve_);
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double cost = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_virtual = 7 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.left_out_.MergeFrom(from._impl_.left_out_);
  _impl_.right_out_.MergeFrom(from._impl_.right_out_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_road_id(from._internal_road_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_central_curve()->::apollo::hdmap::Curve::MergeFrom(from._internal_central_curve());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.cost_ = from._impl_.cost_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_virtual_ = from._impl_.is_virtual_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.left_out_.InternalSwap(&other->_impl_.left_out_);
  _impl_.right_out_.InternalSwap(&other->_impl_.right_out_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.road_id_, lhs_arena,
      &other->_impl_.road_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.cost_)
      + sizeof(Node::_impl_.cost_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.central_curve_)>(
          reinterpret_cast<char*>(&_impl_.central_curve_),
          reinterpret_cast<char*>(&other->_impl_.central_curve_));
  swap(_impl_.is_virtual_, other->_impl_.is_virtual_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[2]);
}

// ===================================================================

class Edge::_Internal {
 public:
  using HasBits = decltype(std::declval<Edge>()._impl_._has_bits_);
  static void set_has_from_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_lane_id_){}
    , decltype(_impl_.to_lane_id_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.direction_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from_lane_id()) {
    _impl_.from_lane_id_.Set(from._internal_from_lane_id(), 
      GetArenaForAllocation());
  }
  _impl_.to_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to_lane_id()) {
    _impl_.to_lane_id_.Set(from._internal_to_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cost_, &from._impl_.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_type_) -
    reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.direction_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_lane_id_){}
    , decltype(_impl_.to_lane_id_){}
    , decltype(_impl_.cost_){0}
    , decltype(_impl_.direction_type_){0}
  };
  _impl_.from_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:apollo.routing.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_lane_id_.Destroy();
  _impl_.to_lane_id_.Destroy();
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_lane_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.to_lane_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.direction_type_) -
        reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.direction_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string from_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Edge.from_lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string to_lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Edge.to_lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_cost(&has_bits);
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.Edge.DirectionType direction_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::Edge_DirectionType_IsValid(val))) {
            _internal_set_direction_type(static_cast<::apollo::routing::Edge_DirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string from_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_lane_id().data(), static_cast<int>(this->_internal_from_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.from_lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_lane_id(), target);
  }

  // optional string to_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_lane_id().data(), static_cast<int>(this->_internal_to_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.to_lane_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_lane_id(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cost(), target);
  }

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string from_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_lane_id());
    }

    // optional string to_lane_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_lane_id());
    }

    // optional double cost = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.Edge.DirectionType direction_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }

void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Edge *>(to)->MergeFrom(
      static_cast<const Edge &>(from));
}


void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_lane_id(from._internal_from_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_lane_id(from._internal_to_lane_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cost_ = from._impl_.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.direction_type_ = from._impl_.direction_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_lane_id_, lhs_arena,
      &other->_impl_.from_lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_lane_id_, lhs_arena,
      &other->_impl_.to_lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.direction_type_)
      + sizeof(Edge::_impl_.direction_type_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.cost_)>(
          reinterpret_cast<char*>(&_impl_.cost_),
          reinterpret_cast<char*>(&other->_impl_.cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[3]);
}

// ===================================================================

class Graph::_Internal {
 public:
  using HasBits = decltype(std::declval<Graph>()._impl_._has_bits_);
  static void set_has_hdmap_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hdmap_district(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.edge_){from._impl_.edge_}
    , decltype(_impl_.hdmap_version_){}
    , decltype(_impl_.hdmap_district_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hdmap_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hdmap_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hdmap_version()) {
    _impl_.hdmap_version_.Set(from._internal_hdmap_version(), 
      GetArenaForAllocation());
  }
  _impl_.hdmap_district_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hdmap_district_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hdmap_district()) {
    _impl_.hdmap_district_.Set(from._internal_hdmap_district(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Graph)
}

inline void Graph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){arena}
    , decltype(_impl_.edge_){arena}
    , decltype(_impl_.hdmap_version_){}
    , decltype(_impl_.hdmap_district_){}
  };
  _impl_.hdmap_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hdmap_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hdmap_district_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hdmap_district_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:apollo.routing.Graph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
  _impl_.edge_.~RepeatedPtrField();
  _impl_.hdmap_version_.Destroy();
  _impl_.hdmap_district_.Destroy();
}

void Graph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.edge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hdmap_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hdmap_district_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hdmap_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hdmap_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Graph.hdmap_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hdmap_district = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hdmap_district();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Graph.hdmap_district");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.Node node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.Edge edge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string hdmap_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hdmap_version().data(), static_cast<int>(this->_internal_hdmap_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdmap_version(), target);
  }

  // optional string hdmap_district = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hdmap_district().data(), static_cast<int>(this->_internal_hdmap_district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_district");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hdmap_district(), target);
  }

  // repeated .apollo.routing.Node node = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.routing.Edge edge = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.Node node = 3;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.routing.Edge edge = 4;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->_impl_.edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string hdmap_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdmap_version());
    }

    // optional string hdmap_district = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hdmap_district());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }

void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph *>(to)->MergeFrom(
      static_cast<const Graph &>(from));
}


void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.node_.MergeFrom(from._impl_.node_);
  _impl_.edge_.MergeFrom(from._impl_.edge_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hdmap_version(from._internal_hdmap_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hdmap_district(from._internal_hdmap_district());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.edge_.InternalSwap(&other->_impl_.edge_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hdmap_version_, lhs_arena,
      &other->_impl_.hdmap_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hdmap_district_, lhs_arena,
      &other->_impl_.hdmap_district_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::CurvePoint*
Arena::CreateMaybeMessage< ::apollo::routing::CurvePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::CurvePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::CurveRange*
Arena::CreateMaybeMessage< ::apollo::routing::CurveRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::CurveRange >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Node*
Arena::CreateMaybeMessage< ::apollo::routing::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Edge*
Arena::CreateMaybeMessage< ::apollo::routing::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Graph*
Arena::CreateMaybeMessage< ::apollo::routing::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
