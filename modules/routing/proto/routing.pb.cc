// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#include "modules/routing/proto/routing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace routing {
PROTOBUF_CONSTEXPR LaneWaypoint::LaneWaypoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.s_)*/0} {}
struct LaneWaypointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneWaypointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneWaypointDefaultTypeInternal() {}
  union {
    LaneWaypoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneWaypointDefaultTypeInternal _LaneWaypoint_default_instance_;
PROTOBUF_CONSTEXPR LaneSegment::LaneSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0} {}
struct LaneSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneSegmentDefaultTypeInternal() {}
  union {
    LaneSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
PROTOBUF_CONSTEXPR RoutingRequest::RoutingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.waypoint_)*/{}
  , /*decltype(_impl_.blacklisted_lane_)*/{}
  , /*decltype(_impl_.blacklisted_road_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.broadcast_)*/true} {}
struct RoutingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingRequestDefaultTypeInternal() {}
  union {
    RoutingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingRequestDefaultTypeInternal _RoutingRequest_default_instance_;
PROTOBUF_CONSTEXPR Measurement::Measurement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.distance_)*/0} {}
struct MeasurementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasurementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasurementDefaultTypeInternal() {}
  union {
    Measurement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasurementDefaultTypeInternal _Measurement_default_instance_;
PROTOBUF_CONSTEXPR Passage::Passage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.segment_)*/{}
  , /*decltype(_impl_.can_exit_)*/false
  , /*decltype(_impl_.change_lane_type_)*/0} {}
struct PassageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassageDefaultTypeInternal() {}
  union {
    Passage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassageDefaultTypeInternal _Passage_default_instance_;
PROTOBUF_CONSTEXPR RoadSegment::RoadSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.passage_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RoadSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSegmentDefaultTypeInternal() {}
  union {
    RoadSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSegmentDefaultTypeInternal _RoadSegment_default_instance_;
PROTOBUF_CONSTEXPR RoutingResponse::RoutingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.road_)*/{}
  , /*decltype(_impl_.map_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.measurement_)*/nullptr
  , /*decltype(_impl_.routing_request_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr} {}
struct RoutingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingResponseDefaultTypeInternal() {}
  union {
    RoutingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingResponseDefaultTypeInternal _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2frouting_2eproto = nullptr;

const uint32_t TableStruct_modules_2frouting_2fproto_2frouting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _impl_.pose_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _impl_.end_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_.waypoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_.blacklisted_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_.blacklisted_road_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _impl_.broadcast_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, _impl_.distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _impl_.segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _impl_.can_exit_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _impl_.change_lane_type_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _impl_.passage_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.road_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.measurement_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.routing_request_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.map_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _impl_.status_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::routing::LaneWaypoint)},
  { 12, 21, -1, sizeof(::apollo::routing::LaneSegment)},
  { 24, 35, -1, sizeof(::apollo::routing::RoutingRequest)},
  { 40, 47, -1, sizeof(::apollo::routing::Measurement)},
  { 48, 57, -1, sizeof(::apollo::routing::Passage)},
  { 60, 68, -1, sizeof(::apollo::routing::RoadSegment)},
  { 70, 82, -1, sizeof(::apollo::routing::RoutingResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::routing::_LaneWaypoint_default_instance_._instance,
  &::apollo::routing::_LaneSegment_default_instance_._instance,
  &::apollo::routing::_RoutingRequest_default_instance_._instance,
  &::apollo::routing::_Measurement_default_instance_._instance,
  &::apollo::routing::_Passage_default_instance_._instance,
  &::apollo::routing::_RoadSegment_default_instance_._instance,
  &::apollo::routing::_RoutingResponse_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2frouting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#modules/routing/proto/routing.proto\022\016a"
  "pollo.routing\032!modules/common/proto/head"
  "er.proto\032#modules/common/proto/geometry."
  "proto\032%modules/common/proto/error_code.p"
  "roto\"L\n\014LaneWaypoint\022\n\n\002id\030\001 \001(\t\022\t\n\001s\030\002 "
  "\001(\001\022%\n\004pose\030\003 \001(\0132\027.apollo.common.PointE"
  "NU\"9\n\013LaneSegment\022\n\n\002id\030\001 \001(\t\022\017\n\007start_s"
  "\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\"\321\001\n\016RoutingRequest"
  "\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022"
  ".\n\010waypoint\030\002 \003(\0132\034.apollo.routing.LaneW"
  "aypoint\0225\n\020blacklisted_lane\030\003 \003(\0132\033.apol"
  "lo.routing.LaneSegment\022\030\n\020blacklisted_ro"
  "ad\030\004 \003(\t\022\027\n\tbroadcast\030\005 \001(\010:\004true\"\037\n\013Mea"
  "surement\022\020\n\010distance\030\001 \001(\001\"\214\001\n\007Passage\022,"
  "\n\007segment\030\001 \003(\0132\033.apollo.routing.LaneSeg"
  "ment\022\020\n\010can_exit\030\002 \001(\010\022A\n\020change_lane_ty"
  "pe\030\003 \001(\0162\036.apollo.routing.ChangeLaneType"
  ":\007FORWARD\"C\n\013RoadSegment\022\n\n\002id\030\001 \001(\t\022(\n\007"
  "passage\030\002 \003(\0132\027.apollo.routing.Passage\"\214"
  "\002\n\017RoutingResponse\022%\n\006header\030\001 \001(\0132\025.apo"
  "llo.common.Header\022)\n\004road\030\002 \003(\0132\033.apollo"
  ".routing.RoadSegment\0220\n\013measurement\030\003 \001("
  "\0132\033.apollo.routing.Measurement\0227\n\017routin"
  "g_request\030\004 \001(\0132\036.apollo.routing.Routing"
  "Request\022\023\n\013map_version\030\005 \001(\014\022\'\n\006status\030\006"
  " \001(\0132\027.apollo.common.StatusPb*2\n\016ChangeL"
  "aneType\022\013\n\007FORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020"
  "\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_2eproto = {
    false, false, 1081, descriptor_table_protodef_modules_2frouting_2fproto_2frouting_2eproto,
    "modules/routing/proto/routing.proto",
    &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once, descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2frouting_2eproto::offsets,
    file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto, file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto,
    file_level_service_descriptors_modules_2frouting_2fproto_2frouting_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter() {
  return &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2frouting_2fproto_2frouting_2eproto(&descriptor_table_modules_2frouting_2fproto_2frouting_2eproto);
namespace apollo {
namespace routing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2frouting_2fproto_2frouting_2eproto);
  return file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto[0];
}
bool ChangeLaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LaneWaypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneWaypoint>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::PointENU& pose(const LaneWaypoint* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PointENU&
LaneWaypoint::_Internal::pose(const LaneWaypoint* msg) {
  return *msg->_impl_.pose_;
}
void LaneWaypoint::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LaneWaypoint::LaneWaypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.LaneWaypoint)
}
LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pose()) {
    _impl_.pose_ = new ::apollo::common::PointENU(*from._impl_.pose_);
  }
  _impl_.s_ = from._impl_.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneWaypoint)
}

inline void LaneWaypoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.s_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneWaypoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneWaypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void LaneWaypoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneWaypoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  _impl_.s_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneWaypoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.LaneWaypoint.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneWaypoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneWaypoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneWaypoint)
  return target;
}

size_t LaneWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneWaypoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.common.PointENU pose = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pose_);
    }

    // optional double s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneWaypoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneWaypoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneWaypoint::GetClassData() const { return &_class_data_; }

void LaneWaypoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneWaypoint *>(to)->MergeFrom(
      static_cast<const LaneWaypoint &>(from));
}


void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::apollo::common::PointENU::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.s_ = from._impl_.s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {
  return true;
}

void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneWaypoint, _impl_.s_)
      + sizeof(LaneWaypoint::_impl_.s_)
      - PROTOBUF_FIELD_OFFSET(LaneWaypoint, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneWaypoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[0]);
}

// ===================================================================

class LaneSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSegment>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneSegment::LaneSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_s_, &from._impl_.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_s_) -
    reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneSegment)
}

inline void LaneSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void LaneSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_s_) -
        reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.LaneSegment.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSegment::GetClassData() const { return &_class_data_; }

void LaneSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneSegment *>(to)->MergeFrom(
      static_cast<const LaneSegment &>(from));
}


void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.end_s_ = from._impl_.end_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegment, _impl_.end_s_)
      + sizeof(LaneSegment::_impl_.end_s_)
      - PROTOBUF_FIELD_OFFSET(LaneSegment, _impl_.start_s_)>(
          reinterpret_cast<char*>(&_impl_.start_s_),
          reinterpret_cast<char*>(&other->_impl_.start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[1]);
}

// ===================================================================

class RoutingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingRequest>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const RoutingRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
RoutingRequest::_Internal::header(const RoutingRequest* msg) {
  return *msg->_impl_.header_;
}
void RoutingRequest::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoutingRequest::RoutingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.RoutingRequest)
}
RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waypoint_){from._impl_.waypoint_}
    , decltype(_impl_.blacklisted_lane_){from._impl_.blacklisted_lane_}
    , decltype(_impl_.blacklisted_road_){from._impl_.blacklisted_road_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.broadcast_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.broadcast_ = from._impl_.broadcast_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingRequest)
}

inline void RoutingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waypoint_){arena}
    , decltype(_impl_.blacklisted_lane_){arena}
    , decltype(_impl_.blacklisted_road_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.broadcast_){true}
  };
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.waypoint_.~RepeatedPtrField();
  _impl_.blacklisted_lane_.~RepeatedPtrField();
  _impl_.blacklisted_road_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void RoutingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.waypoint_.Clear();
  _impl_.blacklisted_lane_.Clear();
  _impl_.blacklisted_road_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    _impl_.broadcast_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blacklisted_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string blacklisted_road = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklisted_road();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.routing.RoutingRequest.blacklisted_road");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_broadcast(&has_bits);
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_waypoint_size()); i < n; i++) {
    const auto& repfield = this->_internal_waypoint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blacklisted_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_blacklisted_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->_internal_blacklisted_road_size(); i < n; i++) {
    const auto& s = this->_internal_blacklisted_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    target = stream->WriteString(4, s, target);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingRequest)
  return target;
}

size_t RoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  total_size += 1UL * this->_internal_waypoint_size();
  for (const auto& msg : this->_impl_.waypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  total_size += 1UL * this->_internal_blacklisted_lane_size();
  for (const auto& msg : this->_impl_.blacklisted_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blacklisted_road_.size());
  for (int i = 0, n = _impl_.blacklisted_road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blacklisted_road_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional bool broadcast = 5 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingRequest::GetClassData() const { return &_class_data_; }

void RoutingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingRequest *>(to)->MergeFrom(
      static_cast<const RoutingRequest &>(from));
}


void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.waypoint_.MergeFrom(from._impl_.waypoint_);
  _impl_.blacklisted_lane_.MergeFrom(from._impl_.blacklisted_lane_);
  _impl_.blacklisted_road_.MergeFrom(from._impl_.blacklisted_road_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.broadcast_ = from._impl_.broadcast_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {
  return true;
}

void RoutingRequest::InternalSwap(RoutingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.waypoint_.InternalSwap(&other->_impl_.waypoint_);
  _impl_.blacklisted_lane_.InternalSwap(&other->_impl_.blacklisted_lane_);
  _impl_.blacklisted_road_.InternalSwap(&other->_impl_.blacklisted_road_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.broadcast_, other->_impl_.broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[2]);
}

// ===================================================================

class Measurement::_Internal {
 public:
  using HasBits = decltype(std::declval<Measurement>()._impl_._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Measurement::Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Measurement)
}

inline void Measurement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_){0}
  };
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:apollo.routing.Measurement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Measurement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Measurement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Measurement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measurement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Measurement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Measurement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Measurement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double distance = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Measurement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Measurement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Measurement::GetClassData() const { return &_class_data_; }

void Measurement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Measurement *>(to)->MergeFrom(
      static_cast<const Measurement &>(from));
}


void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _internal_set_distance(from._internal_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Measurement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[3]);
}

// ===================================================================

class Passage::_Internal {
 public:
  using HasBits = decltype(std::declval<Passage>()._impl_._has_bits_);
  static void set_has_can_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Passage::Passage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Passage)
}
Passage::Passage(const Passage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segment_){from._impl_.segment_}
    , decltype(_impl_.can_exit_){}
    , decltype(_impl_.change_lane_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.can_exit_, &from._impl_.can_exit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_lane_type_) -
    reinterpret_cast<char*>(&_impl_.can_exit_)) + sizeof(_impl_.change_lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Passage)
}

inline void Passage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.segment_){arena}
    , decltype(_impl_.can_exit_){false}
    , decltype(_impl_.change_lane_type_){0}
  };
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.routing.Passage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Passage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_.~RepeatedPtrField();
}

void Passage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Passage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.can_exit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.change_lane_type_) -
        reinterpret_cast<char*>(&_impl_.can_exit_)) + sizeof(_impl_.change_lane_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Passage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.routing.LaneSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool can_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_can_exit(&has_bits);
          _impl_.can_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Passage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Passage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_exit(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Passage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->_impl_.segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_exit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Passage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Passage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Passage::GetClassData() const { return &_class_data_; }

void Passage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Passage *>(to)->MergeFrom(
      static_cast<const Passage &>(from));
}


void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.segment_.MergeFrom(from._impl_.segment_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.can_exit_ = from._impl_.can_exit_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.change_lane_type_ = from._impl_.change_lane_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::InternalSwap(Passage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.segment_.InternalSwap(&other->_impl_.segment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Passage, _impl_.change_lane_type_)
      + sizeof(Passage::_impl_.change_lane_type_)
      - PROTOBUF_FIELD_OFFSET(Passage, _impl_.can_exit_)>(
          reinterpret_cast<char*>(&_impl_.can_exit_),
          reinterpret_cast<char*>(&other->_impl_.can_exit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Passage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[4]);
}

// ===================================================================

class RoadSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSegment>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadSegment::RoadSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.RoadSegment)
}
RoadSegment::RoadSegment(const RoadSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passage_){from._impl_.passage_}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoadSegment)
}

inline void RoadSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passage_){arena}
    , decltype(_impl_.id_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoadSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passage_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void RoadSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoadSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.passage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.RoadSegment.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.Passage passage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoadSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_passage_size()); i < n; i++) {
    const auto& repfield = this->_internal_passage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoadSegment)
  return target;
}

size_t RoadSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoadSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.Passage passage = 2;
  total_size += 1UL * this->_internal_passage_size();
  for (const auto& msg : this->_impl_.passage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadSegment::GetClassData() const { return &_class_data_; }

void RoadSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadSegment *>(to)->MergeFrom(
      static_cast<const RoadSegment &>(from));
}


void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.passage_.MergeFrom(from._impl_.passage_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {
  return true;
}

void RoadSegment::InternalSwap(RoadSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.passage_.InternalSwap(&other->_impl_.passage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[5]);
}

// ===================================================================

class RoutingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingResponse>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const RoutingResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::Measurement& measurement(const RoutingResponse* msg);
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request(const RoutingResponse* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_map_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::StatusPb& status(const RoutingResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
RoutingResponse::_Internal::header(const RoutingResponse* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::routing::Measurement&
RoutingResponse::_Internal::measurement(const RoutingResponse* msg) {
  return *msg->_impl_.measurement_;
}
const ::apollo::routing::RoutingRequest&
RoutingResponse::_Internal::routing_request(const RoutingResponse* msg) {
  return *msg->_impl_.routing_request_;
}
const ::apollo::common::StatusPb&
RoutingResponse::_Internal::status(const RoutingResponse* msg) {
  return *msg->_impl_.status_;
}
void RoutingResponse::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoutingResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
RoutingResponse::RoutingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.RoutingResponse)
}
RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_){from._impl_.road_}
    , decltype(_impl_.map_version_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.measurement_){nullptr}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_version()) {
    _impl_.map_version_.Set(from._internal_map_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_measurement()) {
    _impl_.measurement_ = new ::apollo::routing::Measurement(*from._impl_.measurement_);
  }
  if (from._internal_has_routing_request()) {
    _impl_.routing_request_ = new ::apollo::routing::RoutingRequest(*from._impl_.routing_request_);
  }
  if (from._internal_has_status()) {
    _impl_.status_ = new ::apollo::common::StatusPb(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingResponse)
}

inline void RoutingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_){arena}
    , decltype(_impl_.map_version_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.measurement_){nullptr}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.status_){nullptr}
  };
  _impl_.map_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_.~RepeatedPtrField();
  _impl_.map_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.measurement_;
  if (this != internal_default_instance()) delete _impl_.routing_request_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void RoutingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.measurement_ != nullptr);
      _impl_.measurement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.routing_request_ != nullptr);
      _impl_.routing_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.RoadSegment road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.Measurement measurement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes map_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_map_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.StatusPb status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_size()); i < n; i++) {
    const auto& repfield = this->_internal_road(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::measurement(this),
        _Internal::measurement(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::routing_request(this),
        _Internal::routing_request(this).GetCachedSize(), target, stream);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_map_version(), target);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingResponse)
  return target;
}

size_t RoutingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 2;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->_impl_.road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes map_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_version());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.routing.Measurement measurement = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.measurement_);
    }

    // optional .apollo.routing.RoutingRequest routing_request = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_request_);
    }

    // optional .apollo.common.StatusPb status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingResponse::GetClassData() const { return &_class_data_; }

void RoutingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingResponse *>(to)->MergeFrom(
      static_cast<const RoutingResponse &>(from));
}


void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.road_.MergeFrom(from._impl_.road_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_version(from._internal_map_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from._internal_measurement());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_status()->::apollo::common::StatusPb::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {
  return true;
}

void RoutingResponse::InternalSwap(RoutingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_version_, lhs_arena,
      &other->_impl_.map_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingResponse, _impl_.status_)
      + sizeof(RoutingResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RoutingResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::LaneWaypoint*
Arena::CreateMaybeMessage< ::apollo::routing::LaneWaypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::LaneWaypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::LaneSegment*
Arena::CreateMaybeMessage< ::apollo::routing::LaneSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::LaneSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingRequest*
Arena::CreateMaybeMessage< ::apollo::routing::RoutingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::RoutingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Measurement*
Arena::CreateMaybeMessage< ::apollo::routing::Measurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Passage*
Arena::CreateMaybeMessage< ::apollo::routing::Passage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Passage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoadSegment*
Arena::CreateMaybeMessage< ::apollo::routing::RoadSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::RoadSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingResponse*
Arena::CreateMaybeMessage< ::apollo::routing::RoutingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::RoutingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
