// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/poi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2fpoi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2frouting_2fproto_2fpoi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto;
namespace apollo {
namespace routing {
class Landmark;
struct LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class POI;
struct POIDefaultTypeInternal;
extern POIDefaultTypeInternal _POI_default_instance_;
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::routing::Landmark* Arena::CreateMaybeMessage<::apollo::routing::Landmark>(Arena*);
template<> ::apollo::routing::POI* Arena::CreateMaybeMessage<::apollo::routing::POI>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace routing {

// ===================================================================

class Landmark final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Landmark) */ {
 public:
  inline Landmark() : Landmark(nullptr) {}
  ~Landmark() override;
  explicit PROTOBUF_CONSTEXPR Landmark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Landmark(const Landmark& from);
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landmark& operator=(Landmark&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Landmark& default_instance() {
    return *internal_default_instance();
  }
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Landmark* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Landmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Landmark& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Landmark& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Landmark";
  }
  protected:
  explicit Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointFieldNumber = 2,
    kNameFieldNumber = 1,
    kParkingSpaceIdFieldNumber = 3,
    kParkingInfoFieldNumber = 4,
  };
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  private:
  int _internal_waypoint_size() const;
  public:
  void clear_waypoint();
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  private:
  const ::apollo::routing::LaneWaypoint& _internal_waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* _internal_add_waypoint();
  public:
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* add_waypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string parking_space_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_parking_space_id() const;
  private:
  bool _internal_has_parking_space_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_parking_space_id();
  PROTOBUF_DEPRECATED const std::string& parking_space_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_parking_space_id(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_parking_space_id();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_parking_space_id();
  PROTOBUF_DEPRECATED void set_allocated_parking_space_id(std::string* parking_space_id);
  private:
  const std::string& _internal_parking_space_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parking_space_id(const std::string& value);
  std::string* _internal_mutable_parking_space_id();
  public:

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  bool has_parking_info() const;
  private:
  bool _internal_has_parking_info() const;
  public:
  void clear_parking_info();
  const ::apollo::routing::ParkingInfo& parking_info() const;
  PROTOBUF_NODISCARD ::apollo::routing::ParkingInfo* release_parking_info();
  ::apollo::routing::ParkingInfo* mutable_parking_info();
  void set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info);
  private:
  const ::apollo::routing::ParkingInfo& _internal_parking_info() const;
  ::apollo::routing::ParkingInfo* _internal_mutable_parking_info();
  public:
  void unsafe_arena_set_allocated_parking_info(
      ::apollo::routing::ParkingInfo* parking_info);
  ::apollo::routing::ParkingInfo* unsafe_arena_release_parking_info();

  // @@protoc_insertion_point(class_scope:apollo.routing.Landmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parking_space_id_;
    ::apollo::routing::ParkingInfo* parking_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2fpoi_2eproto;
};
// -------------------------------------------------------------------

class POI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.POI) */ {
 public:
  inline POI() : POI(nullptr) {}
  ~POI() override;
  explicit PROTOBUF_CONSTEXPR POI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  POI(const POI& from);
  POI(POI&& from) noexcept
    : POI() {
    *this = ::std::move(from);
  }

  inline POI& operator=(const POI& from) {
    CopyFrom(from);
    return *this;
  }
  inline POI& operator=(POI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const POI& default_instance() {
    return *internal_default_instance();
  }
  static inline const POI* internal_default_instance() {
    return reinterpret_cast<const POI*>(
               &_POI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(POI& a, POI& b) {
    a.Swap(&b);
  }
  inline void Swap(POI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(POI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  POI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<POI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const POI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const POI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(POI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.POI";
  }
  protected:
  explicit POI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
  };
  // repeated .apollo.routing.Landmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::apollo::routing::Landmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >*
      mutable_landmark();
  private:
  const ::apollo::routing::Landmark& _internal_landmark(int index) const;
  ::apollo::routing::Landmark* _internal_add_landmark();
  public:
  const ::apollo::routing::Landmark& landmark(int index) const;
  ::apollo::routing::Landmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:apollo.routing.POI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark > landmark_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2fpoi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// optional string name = 1;
inline bool Landmark::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Landmark::has_name() const {
  return _internal_has_name();
}
inline void Landmark::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Landmark::name() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Landmark::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.name)
}
inline std::string* Landmark::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.name)
  return _s;
}
inline const std::string& Landmark::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Landmark::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Landmark::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Landmark::release_name() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Landmark::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.name)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int Landmark::_internal_waypoint_size() const {
  return _impl_.waypoint_.size();
}
inline int Landmark::waypoint_size() const {
  return _internal_waypoint_size();
}
inline ::apollo::routing::LaneWaypoint* Landmark::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.waypoint)
  return _impl_.waypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
Landmark::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Landmark.waypoint)
  return &_impl_.waypoint_;
}
inline const ::apollo::routing::LaneWaypoint& Landmark::_internal_waypoint(int index) const {
  return _impl_.waypoint_.Get(index);
}
inline const ::apollo::routing::LaneWaypoint& Landmark::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.waypoint)
  return _internal_waypoint(index);
}
inline ::apollo::routing::LaneWaypoint* Landmark::_internal_add_waypoint() {
  return _impl_.waypoint_.Add();
}
inline ::apollo::routing::LaneWaypoint* Landmark::add_waypoint() {
  ::apollo::routing::LaneWaypoint* _add = _internal_add_waypoint();
  // @@protoc_insertion_point(field_add:apollo.routing.Landmark.waypoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
Landmark::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Landmark.waypoint)
  return _impl_.waypoint_;
}

// optional string parking_space_id = 3 [deprecated = true];
inline bool Landmark::_internal_has_parking_space_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Landmark::has_parking_space_id() const {
  return _internal_has_parking_space_id();
}
inline void Landmark::clear_parking_space_id() {
  _impl_.parking_space_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Landmark::parking_space_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_space_id)
  return _internal_parking_space_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Landmark::set_parking_space_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.parking_space_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.parking_space_id)
}
inline std::string* Landmark::mutable_parking_space_id() {
  std::string* _s = _internal_mutable_parking_space_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_space_id)
  return _s;
}
inline const std::string& Landmark::_internal_parking_space_id() const {
  return _impl_.parking_space_id_.Get();
}
inline void Landmark::_internal_set_parking_space_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.parking_space_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Landmark::_internal_mutable_parking_space_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.parking_space_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Landmark::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_space_id)
  if (!_internal_has_parking_space_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.parking_space_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parking_space_id_.IsDefault()) {
    _impl_.parking_space_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Landmark::set_allocated_parking_space_id(std::string* parking_space_id) {
  if (parking_space_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.parking_space_id_.SetAllocated(parking_space_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parking_space_id_.IsDefault()) {
    _impl_.parking_space_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_space_id)
}

// optional .apollo.routing.ParkingInfo parking_info = 4;
inline bool Landmark::_internal_has_parking_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parking_info_ != nullptr);
  return value;
}
inline bool Landmark::has_parking_info() const {
  return _internal_has_parking_info();
}
inline const ::apollo::routing::ParkingInfo& Landmark::_internal_parking_info() const {
  const ::apollo::routing::ParkingInfo* p = _impl_.parking_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::ParkingInfo&>(
      ::apollo::routing::_ParkingInfo_default_instance_);
}
inline const ::apollo::routing::ParkingInfo& Landmark::parking_info() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_info)
  return _internal_parking_info();
}
inline void Landmark::unsafe_arena_set_allocated_parking_info(
    ::apollo::routing::ParkingInfo* parking_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parking_info_);
  }
  _impl_.parking_info_ = parking_info;
  if (parking_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.Landmark.parking_info)
}
inline ::apollo::routing::ParkingInfo* Landmark::release_parking_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::ParkingInfo* temp = _impl_.parking_info_;
  _impl_.parking_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::ParkingInfo* Landmark::unsafe_arena_release_parking_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::ParkingInfo* temp = _impl_.parking_info_;
  _impl_.parking_info_ = nullptr;
  return temp;
}
inline ::apollo::routing::ParkingInfo* Landmark::_internal_mutable_parking_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.parking_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::ParkingInfo>(GetArenaForAllocation());
    _impl_.parking_info_ = p;
  }
  return _impl_.parking_info_;
}
inline ::apollo::routing::ParkingInfo* Landmark::mutable_parking_info() {
  ::apollo::routing::ParkingInfo* _msg = _internal_mutable_parking_info();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_info)
  return _msg;
}
inline void Landmark::set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parking_info_);
  }
  if (parking_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_info));
    if (message_arena != submessage_arena) {
      parking_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.parking_info_ = parking_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_info)
}

// -------------------------------------------------------------------

// POI

// repeated .apollo.routing.Landmark landmark = 1;
inline int POI::_internal_landmark_size() const {
  return _impl_.landmark_.size();
}
inline int POI::landmark_size() const {
  return _internal_landmark_size();
}
inline void POI::clear_landmark() {
  _impl_.landmark_.Clear();
}
inline ::apollo::routing::Landmark* POI::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.POI.landmark)
  return _impl_.landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >*
POI::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.POI.landmark)
  return &_impl_.landmark_;
}
inline const ::apollo::routing::Landmark& POI::_internal_landmark(int index) const {
  return _impl_.landmark_.Get(index);
}
inline const ::apollo::routing::Landmark& POI::landmark(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.POI.landmark)
  return _internal_landmark(index);
}
inline ::apollo::routing::Landmark* POI::_internal_add_landmark() {
  return _impl_.landmark_.Add();
}
inline ::apollo::routing::Landmark* POI::add_landmark() {
  ::apollo::routing::Landmark* _add = _internal_add_landmark();
  // @@protoc_insertion_point(field_add:apollo.routing.POI.landmark)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Landmark >&
POI::landmark() const {
  // @@protoc_insertion_point(field_list:apollo.routing.POI.landmark)
  return _impl_.landmark_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
