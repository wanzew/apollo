// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2frouting_2fproto_2frouting_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_2eproto;
namespace apollo {
namespace routing {
class LaneSegment;
struct LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneWaypoint;
struct LaneWaypointDefaultTypeInternal;
extern LaneWaypointDefaultTypeInternal _LaneWaypoint_default_instance_;
class Measurement;
struct MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Passage;
struct PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class RoadSegment;
struct RoadSegmentDefaultTypeInternal;
extern RoadSegmentDefaultTypeInternal _RoadSegment_default_instance_;
class RoutingRequest;
struct RoutingRequestDefaultTypeInternal;
extern RoutingRequestDefaultTypeInternal _RoutingRequest_default_instance_;
class RoutingResponse;
struct RoutingResponseDefaultTypeInternal;
extern RoutingResponseDefaultTypeInternal _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::routing::LaneSegment* Arena::CreateMaybeMessage<::apollo::routing::LaneSegment>(Arena*);
template<> ::apollo::routing::LaneWaypoint* Arena::CreateMaybeMessage<::apollo::routing::LaneWaypoint>(Arena*);
template<> ::apollo::routing::Measurement* Arena::CreateMaybeMessage<::apollo::routing::Measurement>(Arena*);
template<> ::apollo::routing::Passage* Arena::CreateMaybeMessage<::apollo::routing::Passage>(Arena*);
template<> ::apollo::routing::RoadSegment* Arena::CreateMaybeMessage<::apollo::routing::RoadSegment>(Arena*);
template<> ::apollo::routing::RoutingRequest* Arena::CreateMaybeMessage<::apollo::routing::RoutingRequest>(Arena*);
template<> ::apollo::routing::RoutingResponse* Arena::CreateMaybeMessage<::apollo::routing::RoutingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace routing {

enum ChangeLaneType : int {
  FORWARD = 0,
  LEFT = 1,
  RIGHT = 2
};
bool ChangeLaneType_IsValid(int value);
constexpr ChangeLaneType ChangeLaneType_MIN = FORWARD;
constexpr ChangeLaneType ChangeLaneType_MAX = RIGHT;
constexpr int ChangeLaneType_ARRAYSIZE = ChangeLaneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneType_descriptor();
template<typename T>
inline const std::string& ChangeLaneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeLaneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeLaneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeLaneType_descriptor(), enum_t_value);
}
inline bool ChangeLaneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeLaneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeLaneType>(
    ChangeLaneType_descriptor(), name, value);
}
// ===================================================================

class LaneWaypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.LaneWaypoint) */ {
 public:
  inline LaneWaypoint() : LaneWaypoint(nullptr) {}
  ~LaneWaypoint() override;
  explicit PROTOBUF_CONSTEXPR LaneWaypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneWaypoint(const LaneWaypoint& from);
  LaneWaypoint(LaneWaypoint&& from) noexcept
    : LaneWaypoint() {
    *this = ::std::move(from);
  }

  inline LaneWaypoint& operator=(const LaneWaypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneWaypoint& operator=(LaneWaypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneWaypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneWaypoint* internal_default_instance() {
    return reinterpret_cast<const LaneWaypoint*>(
               &_LaneWaypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneWaypoint& a, LaneWaypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneWaypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneWaypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneWaypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneWaypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneWaypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneWaypoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneWaypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.LaneWaypoint";
  }
  protected:
  explicit LaneWaypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPoseFieldNumber = 3,
    kSFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.common.PointENU pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::apollo::common::PointENU& pose() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_pose();
  ::apollo::common::PointENU* mutable_pose();
  void set_allocated_pose(::apollo::common::PointENU* pose);
  private:
  const ::apollo::common::PointENU& _internal_pose() const;
  ::apollo::common::PointENU* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::apollo::common::PointENU* pose);
  ::apollo::common::PointENU* unsafe_arena_release_pose();

  // optional double s = 2;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.LaneWaypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::apollo::common::PointENU* pose_;
    double s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class LaneSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.LaneSegment) */ {
 public:
  inline LaneSegment() : LaneSegment(nullptr) {}
  ~LaneSegment() override;
  explicit PROTOBUF_CONSTEXPR LaneSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSegment(const LaneSegment& from);
  LaneSegment(LaneSegment&& from) noexcept
    : LaneSegment() {
    *this = ::std::move(from);
  }

  inline LaneSegment& operator=(const LaneSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSegment& operator=(LaneSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSegment* internal_default_instance() {
    return reinterpret_cast<const LaneSegment*>(
               &_LaneSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneSegment& a, LaneSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.LaneSegment";
  }
  protected:
  explicit LaneSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double start_s = 2;
  bool has_start_s() const;
  private:
  bool _internal_has_start_s() const;
  public:
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);
  private:
  double _internal_start_s() const;
  void _internal_set_start_s(double value);
  public:

  // optional double end_s = 3;
  bool has_end_s() const;
  private:
  bool _internal_has_end_s() const;
  public:
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);
  private:
  double _internal_end_s() const;
  void _internal_set_end_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.LaneSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double start_s_;
    double end_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class RoutingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoutingRequest) */ {
 public:
  inline RoutingRequest() : RoutingRequest(nullptr) {}
  ~RoutingRequest() override;
  explicit PROTOBUF_CONSTEXPR RoutingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingRequest(const RoutingRequest& from);
  RoutingRequest(RoutingRequest&& from) noexcept
    : RoutingRequest() {
    *this = ::std::move(from);
  }

  inline RoutingRequest& operator=(const RoutingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingRequest& operator=(RoutingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingRequest* internal_default_instance() {
    return reinterpret_cast<const RoutingRequest*>(
               &_RoutingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoutingRequest& a, RoutingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.RoutingRequest";
  }
  protected:
  explicit RoutingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointFieldNumber = 2,
    kBlacklistedLaneFieldNumber = 3,
    kBlacklistedRoadFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kBroadcastFieldNumber = 5,
  };
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  private:
  int _internal_waypoint_size() const;
  public:
  void clear_waypoint();
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  private:
  const ::apollo::routing::LaneWaypoint& _internal_waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* _internal_add_waypoint();
  public:
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* add_waypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  int blacklisted_lane_size() const;
  private:
  int _internal_blacklisted_lane_size() const;
  public:
  void clear_blacklisted_lane();
  ::apollo::routing::LaneSegment* mutable_blacklisted_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
      mutable_blacklisted_lane();
  private:
  const ::apollo::routing::LaneSegment& _internal_blacklisted_lane(int index) const;
  ::apollo::routing::LaneSegment* _internal_add_blacklisted_lane();
  public:
  const ::apollo::routing::LaneSegment& blacklisted_lane(int index) const;
  ::apollo::routing::LaneSegment* add_blacklisted_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
      blacklisted_lane() const;

  // repeated string blacklisted_road = 4;
  int blacklisted_road_size() const;
  private:
  int _internal_blacklisted_road_size() const;
  public:
  void clear_blacklisted_road();
  const std::string& blacklisted_road(int index) const;
  std::string* mutable_blacklisted_road(int index);
  void set_blacklisted_road(int index, const std::string& value);
  void set_blacklisted_road(int index, std::string&& value);
  void set_blacklisted_road(int index, const char* value);
  void set_blacklisted_road(int index, const char* value, size_t size);
  std::string* add_blacklisted_road();
  void add_blacklisted_road(const std::string& value);
  void add_blacklisted_road(std::string&& value);
  void add_blacklisted_road(const char* value);
  void add_blacklisted_road(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blacklisted_road() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blacklisted_road();
  private:
  const std::string& _internal_blacklisted_road(int index) const;
  std::string* _internal_add_blacklisted_road();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional bool broadcast = 5 [default = true];
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.RoutingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment > blacklisted_lane_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blacklisted_road_;
    ::apollo::common::Header* header_;
    bool broadcast_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class Measurement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Measurement) */ {
 public:
  inline Measurement() : Measurement(nullptr) {}
  ~Measurement() override;
  explicit PROTOBUF_CONSTEXPR Measurement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Measurement(const Measurement& from);
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measurement& operator=(Measurement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Measurement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(Measurement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Measurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Measurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Measurement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Measurement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Measurement";
  }
  protected:
  explicit Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
  };
  // optional double distance = 1;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.Measurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class Passage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Passage) */ {
 public:
  inline Passage() : Passage(nullptr) {}
  ~Passage() override;
  explicit PROTOBUF_CONSTEXPR Passage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Passage(const Passage& from);
  Passage(Passage&& from) noexcept
    : Passage() {
    *this = ::std::move(from);
  }

  inline Passage& operator=(const Passage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Passage& operator=(Passage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Passage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Passage* internal_default_instance() {
    return reinterpret_cast<const Passage*>(
               &_Passage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Passage& a, Passage& b) {
    a.Swap(&b);
  }
  inline void Swap(Passage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Passage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Passage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Passage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Passage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Passage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Passage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.Passage";
  }
  protected:
  explicit Passage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 1,
    kCanExitFieldNumber = 2,
    kChangeLaneTypeFieldNumber = 3,
  };
  // repeated .apollo.routing.LaneSegment segment = 1;
  int segment_size() const;
  private:
  int _internal_segment_size() const;
  public:
  void clear_segment();
  ::apollo::routing::LaneSegment* mutable_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
      mutable_segment();
  private:
  const ::apollo::routing::LaneSegment& _internal_segment(int index) const;
  ::apollo::routing::LaneSegment* _internal_add_segment();
  public:
  const ::apollo::routing::LaneSegment& segment(int index) const;
  ::apollo::routing::LaneSegment* add_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
      segment() const;

  // optional bool can_exit = 2;
  bool has_can_exit() const;
  private:
  bool _internal_has_can_exit() const;
  public:
  void clear_can_exit();
  bool can_exit() const;
  void set_can_exit(bool value);
  private:
  bool _internal_can_exit() const;
  void _internal_set_can_exit(bool value);
  public:

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  bool has_change_lane_type() const;
  private:
  bool _internal_has_change_lane_type() const;
  public:
  void clear_change_lane_type();
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);
  private:
  ::apollo::routing::ChangeLaneType _internal_change_lane_type() const;
  void _internal_set_change_lane_type(::apollo::routing::ChangeLaneType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.Passage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment > segment_;
    bool can_exit_;
    int change_lane_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class RoadSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoadSegment) */ {
 public:
  inline RoadSegment() : RoadSegment(nullptr) {}
  ~RoadSegment() override;
  explicit PROTOBUF_CONSTEXPR RoadSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadSegment(const RoadSegment& from);
  RoadSegment(RoadSegment&& from) noexcept
    : RoadSegment() {
    *this = ::std::move(from);
  }

  inline RoadSegment& operator=(const RoadSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSegment& operator=(RoadSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadSegment* internal_default_instance() {
    return reinterpret_cast<const RoadSegment*>(
               &_RoadSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoadSegment& a, RoadSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.RoadSegment";
  }
  protected:
  explicit RoadSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .apollo.routing.Passage passage = 2;
  int passage_size() const;
  private:
  int _internal_passage_size() const;
  public:
  void clear_passage();
  ::apollo::routing::Passage* mutable_passage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Passage >*
      mutable_passage();
  private:
  const ::apollo::routing::Passage& _internal_passage(int index) const;
  ::apollo::routing::Passage* _internal_add_passage();
  public:
  const ::apollo::routing::Passage& passage(int index) const;
  ::apollo::routing::Passage* add_passage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Passage >&
      passage() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.RoadSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Passage > passage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// -------------------------------------------------------------------

class RoutingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoutingResponse) */ {
 public:
  inline RoutingResponse() : RoutingResponse(nullptr) {}
  ~RoutingResponse() override;
  explicit PROTOBUF_CONSTEXPR RoutingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingResponse(const RoutingResponse& from);
  RoutingResponse(RoutingResponse&& from) noexcept
    : RoutingResponse() {
    *this = ::std::move(from);
  }

  inline RoutingResponse& operator=(const RoutingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingResponse& operator=(RoutingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingResponse* internal_default_instance() {
    return reinterpret_cast<const RoutingResponse*>(
               &_RoutingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoutingResponse& a, RoutingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.RoutingResponse";
  }
  protected:
  explicit RoutingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadFieldNumber = 2,
    kMapVersionFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kMeasurementFieldNumber = 3,
    kRoutingRequestFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated .apollo.routing.RoadSegment road = 2;
  int road_size() const;
  private:
  int _internal_road_size() const;
  public:
  void clear_road();
  ::apollo::routing::RoadSegment* mutable_road(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::RoadSegment >*
      mutable_road();
  private:
  const ::apollo::routing::RoadSegment& _internal_road(int index) const;
  ::apollo::routing::RoadSegment* _internal_add_road();
  public:
  const ::apollo::routing::RoadSegment& road(int index) const;
  ::apollo::routing::RoadSegment* add_road();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::RoadSegment >&
      road() const;

  // optional bytes map_version = 5;
  bool has_map_version() const;
  private:
  bool _internal_has_map_version() const;
  public:
  void clear_map_version();
  const std::string& map_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_version();
  PROTOBUF_NODISCARD std::string* release_map_version();
  void set_allocated_map_version(std::string* map_version);
  private:
  const std::string& _internal_map_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_version(const std::string& value);
  std::string* _internal_mutable_map_version();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.routing.Measurement measurement = 3;
  bool has_measurement() const;
  private:
  bool _internal_has_measurement() const;
  public:
  void clear_measurement();
  const ::apollo::routing::Measurement& measurement() const;
  PROTOBUF_NODISCARD ::apollo::routing::Measurement* release_measurement();
  ::apollo::routing::Measurement* mutable_measurement();
  void set_allocated_measurement(::apollo::routing::Measurement* measurement);
  private:
  const ::apollo::routing::Measurement& _internal_measurement() const;
  ::apollo::routing::Measurement* _internal_mutable_measurement();
  public:
  void unsafe_arena_set_allocated_measurement(
      ::apollo::routing::Measurement* measurement);
  ::apollo::routing::Measurement* unsafe_arena_release_measurement();

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  bool has_routing_request() const;
  private:
  bool _internal_has_routing_request() const;
  public:
  void clear_routing_request();
  const ::apollo::routing::RoutingRequest& routing_request() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingRequest* release_routing_request();
  ::apollo::routing::RoutingRequest* mutable_routing_request();
  void set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request();
  public:
  void unsafe_arena_set_allocated_routing_request(
      ::apollo::routing::RoutingRequest* routing_request);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request();

  // optional .apollo.common.StatusPb status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::apollo::common::StatusPb& status() const;
  PROTOBUF_NODISCARD ::apollo::common::StatusPb* release_status();
  ::apollo::common::StatusPb* mutable_status();
  void set_allocated_status(::apollo::common::StatusPb* status);
  private:
  const ::apollo::common::StatusPb& _internal_status() const;
  ::apollo::common::StatusPb* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::apollo::common::StatusPb* status);
  ::apollo::common::StatusPb* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:apollo.routing.RoutingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::RoadSegment > road_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_version_;
    ::apollo::common::Header* header_;
    ::apollo::routing::Measurement* measurement_;
    ::apollo::routing::RoutingRequest* routing_request_;
    ::apollo::common::StatusPb* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneWaypoint

// optional string id = 1;
inline bool LaneWaypoint::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneWaypoint::has_id() const {
  return _internal_has_id();
}
inline void LaneWaypoint::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneWaypoint::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaneWaypoint::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.id)
}
inline std::string* LaneWaypoint::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.id)
  return _s;
}
inline const std::string& LaneWaypoint::_internal_id() const {
  return _impl_.id_.Get();
}
inline void LaneWaypoint::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaneWaypoint::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaneWaypoint::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LaneWaypoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.id)
}

// optional double s = 2;
inline bool LaneWaypoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneWaypoint::has_s() const {
  return _internal_has_s();
}
inline void LaneWaypoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaneWaypoint::_internal_s() const {
  return _impl_.s_;
}
inline double LaneWaypoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.s)
  return _internal_s();
}
inline void LaneWaypoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.s_ = value;
}
inline void LaneWaypoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.s)
}

// optional .apollo.common.PointENU pose = 3;
inline bool LaneWaypoint::_internal_has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline bool LaneWaypoint::has_pose() const {
  return _internal_has_pose();
}
inline const ::apollo::common::PointENU& LaneWaypoint::_internal_pose() const {
  const ::apollo::common::PointENU* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& LaneWaypoint::pose() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.pose)
  return _internal_pose();
}
inline void LaneWaypoint::unsafe_arena_set_allocated_pose(
    ::apollo::common::PointENU* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.LaneWaypoint.pose)
}
inline ::apollo::common::PointENU* LaneWaypoint::release_pose() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* LaneWaypoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.pose)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* LaneWaypoint::_internal_mutable_pose() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::apollo::common::PointENU* LaneWaypoint::mutable_pose() {
  ::apollo::common::PointENU* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.pose)
  return _msg;
}
inline void LaneWaypoint::set_allocated_pose(::apollo::common::PointENU* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.pose)
}

// -------------------------------------------------------------------

// LaneSegment

// optional string id = 1;
inline bool LaneSegment::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneSegment::has_id() const {
  return _internal_has_id();
}
inline void LaneSegment::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaneSegment::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.id)
}
inline std::string* LaneSegment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneSegment.id)
  return _s;
}
inline const std::string& LaneSegment::_internal_id() const {
  return _impl_.id_.Get();
}
inline void LaneSegment::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* LaneSegment::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* LaneSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneSegment.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LaneSegment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneSegment.id)
}

// optional double start_s = 2;
inline bool LaneSegment::_internal_has_start_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneSegment::has_start_s() const {
  return _internal_has_start_s();
}
inline void LaneSegment::clear_start_s() {
  _impl_.start_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LaneSegment::_internal_start_s() const {
  return _impl_.start_s_;
}
inline double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.start_s)
  return _internal_start_s();
}
inline void LaneSegment::_internal_set_start_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_s_ = value;
}
inline void LaneSegment::set_start_s(double value) {
  _internal_set_start_s(value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.start_s)
}

// optional double end_s = 3;
inline bool LaneSegment::_internal_has_end_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneSegment::has_end_s() const {
  return _internal_has_end_s();
}
inline void LaneSegment::clear_end_s() {
  _impl_.end_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LaneSegment::_internal_end_s() const {
  return _impl_.end_s_;
}
inline double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.end_s)
  return _internal_end_s();
}
inline void LaneSegment::_internal_set_end_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_s_ = value;
}
inline void LaneSegment::set_end_s(double value) {
  _internal_set_end_s(value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.end_s)
}

// -------------------------------------------------------------------

// RoutingRequest

// optional .apollo.common.Header header = 1;
inline bool RoutingRequest::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RoutingRequest::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RoutingRequest::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RoutingRequest::header() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.header)
  return _internal_header();
}
inline void RoutingRequest::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.RoutingRequest.header)
}
inline ::apollo::common::Header* RoutingRequest::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* RoutingRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RoutingRequest::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* RoutingRequest::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.header)
  return _msg;
}
inline void RoutingRequest::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.header)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int RoutingRequest::_internal_waypoint_size() const {
  return _impl_.waypoint_.size();
}
inline int RoutingRequest::waypoint_size() const {
  return _internal_waypoint_size();
}
inline void RoutingRequest::clear_waypoint() {
  _impl_.waypoint_.Clear();
}
inline ::apollo::routing::LaneWaypoint* RoutingRequest::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.waypoint)
  return _impl_.waypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
RoutingRequest::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.waypoint)
  return &_impl_.waypoint_;
}
inline const ::apollo::routing::LaneWaypoint& RoutingRequest::_internal_waypoint(int index) const {
  return _impl_.waypoint_.Get(index);
}
inline const ::apollo::routing::LaneWaypoint& RoutingRequest::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.waypoint)
  return _internal_waypoint(index);
}
inline ::apollo::routing::LaneWaypoint* RoutingRequest::_internal_add_waypoint() {
  return _impl_.waypoint_.Add();
}
inline ::apollo::routing::LaneWaypoint* RoutingRequest::add_waypoint() {
  ::apollo::routing::LaneWaypoint* _add = _internal_add_waypoint();
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.waypoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
RoutingRequest::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.waypoint)
  return _impl_.waypoint_;
}

// repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
inline int RoutingRequest::_internal_blacklisted_lane_size() const {
  return _impl_.blacklisted_lane_.size();
}
inline int RoutingRequest::blacklisted_lane_size() const {
  return _internal_blacklisted_lane_size();
}
inline void RoutingRequest::clear_blacklisted_lane() {
  _impl_.blacklisted_lane_.Clear();
}
inline ::apollo::routing::LaneSegment* RoutingRequest::mutable_blacklisted_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_lane)
  return _impl_.blacklisted_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
RoutingRequest::mutable_blacklisted_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return &_impl_.blacklisted_lane_;
}
inline const ::apollo::routing::LaneSegment& RoutingRequest::_internal_blacklisted_lane(int index) const {
  return _impl_.blacklisted_lane_.Get(index);
}
inline const ::apollo::routing::LaneSegment& RoutingRequest::blacklisted_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_lane)
  return _internal_blacklisted_lane(index);
}
inline ::apollo::routing::LaneSegment* RoutingRequest::_internal_add_blacklisted_lane() {
  return _impl_.blacklisted_lane_.Add();
}
inline ::apollo::routing::LaneSegment* RoutingRequest::add_blacklisted_lane() {
  ::apollo::routing::LaneSegment* _add = _internal_add_blacklisted_lane();
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_lane)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
RoutingRequest::blacklisted_lane() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return _impl_.blacklisted_lane_;
}

// repeated string blacklisted_road = 4;
inline int RoutingRequest::_internal_blacklisted_road_size() const {
  return _impl_.blacklisted_road_.size();
}
inline int RoutingRequest::blacklisted_road_size() const {
  return _internal_blacklisted_road_size();
}
inline void RoutingRequest::clear_blacklisted_road() {
  _impl_.blacklisted_road_.Clear();
}
inline std::string* RoutingRequest::add_blacklisted_road() {
  std::string* _s = _internal_add_blacklisted_road();
  // @@protoc_insertion_point(field_add_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return _s;
}
inline const std::string& RoutingRequest::_internal_blacklisted_road(int index) const {
  return _impl_.blacklisted_road_.Get(index);
}
inline const std::string& RoutingRequest::blacklisted_road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_road)
  return _internal_blacklisted_road(index);
}
inline std::string* RoutingRequest::mutable_blacklisted_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return _impl_.blacklisted_road_.Mutable(index);
}
inline void RoutingRequest::set_blacklisted_road(int index, const std::string& value) {
  _impl_.blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::set_blacklisted_road(int index, std::string&& value) {
  _impl_.blacklisted_road_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::set_blacklisted_road(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::set_blacklisted_road(int index, const char* value, size_t size) {
  _impl_.blacklisted_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
inline std::string* RoutingRequest::_internal_add_blacklisted_road() {
  return _impl_.blacklisted_road_.Add();
}
inline void RoutingRequest::add_blacklisted_road(const std::string& value) {
  _impl_.blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::add_blacklisted_road(std::string&& value) {
  _impl_.blacklisted_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::add_blacklisted_road(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::add_blacklisted_road(const char* value, size_t size) {
  _impl_.blacklisted_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoutingRequest::blacklisted_road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_road)
  return _impl_.blacklisted_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoutingRequest::mutable_blacklisted_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_road)
  return &_impl_.blacklisted_road_;
}

// optional bool broadcast = 5 [default = true];
inline bool RoutingRequest::_internal_has_broadcast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoutingRequest::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void RoutingRequest::clear_broadcast() {
  _impl_.broadcast_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RoutingRequest::_internal_broadcast() const {
  return _impl_.broadcast_;
}
inline bool RoutingRequest::broadcast() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.broadcast)
  return _internal_broadcast();
}
inline void RoutingRequest::_internal_set_broadcast(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.broadcast_ = value;
}
inline void RoutingRequest::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.broadcast)
}

// -------------------------------------------------------------------

// Measurement

// optional double distance = 1;
inline bool Measurement::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Measurement::has_distance() const {
  return _internal_has_distance();
}
inline void Measurement::clear_distance() {
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Measurement::_internal_distance() const {
  return _impl_.distance_;
}
inline double Measurement::distance() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Measurement.distance)
  return _internal_distance();
}
inline void Measurement::_internal_set_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.distance_ = value;
}
inline void Measurement::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Measurement.distance)
}

// -------------------------------------------------------------------

// Passage

// repeated .apollo.routing.LaneSegment segment = 1;
inline int Passage::_internal_segment_size() const {
  return _impl_.segment_.size();
}
inline int Passage::segment_size() const {
  return _internal_segment_size();
}
inline void Passage::clear_segment() {
  _impl_.segment_.Clear();
}
inline ::apollo::routing::LaneSegment* Passage::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Passage.segment)
  return _impl_.segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
Passage::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Passage.segment)
  return &_impl_.segment_;
}
inline const ::apollo::routing::LaneSegment& Passage::_internal_segment(int index) const {
  return _impl_.segment_.Get(index);
}
inline const ::apollo::routing::LaneSegment& Passage::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.segment)
  return _internal_segment(index);
}
inline ::apollo::routing::LaneSegment* Passage::_internal_add_segment() {
  return _impl_.segment_.Add();
}
inline ::apollo::routing::LaneSegment* Passage::add_segment() {
  ::apollo::routing::LaneSegment* _add = _internal_add_segment();
  // @@protoc_insertion_point(field_add:apollo.routing.Passage.segment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
Passage::segment() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Passage.segment)
  return _impl_.segment_;
}

// optional bool can_exit = 2;
inline bool Passage::_internal_has_can_exit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Passage::has_can_exit() const {
  return _internal_has_can_exit();
}
inline void Passage::clear_can_exit() {
  _impl_.can_exit_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Passage::_internal_can_exit() const {
  return _impl_.can_exit_;
}
inline bool Passage::can_exit() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.can_exit)
  return _internal_can_exit();
}
inline void Passage::_internal_set_can_exit(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.can_exit_ = value;
}
inline void Passage::set_can_exit(bool value) {
  _internal_set_can_exit(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.can_exit)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
inline bool Passage::_internal_has_change_lane_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Passage::has_change_lane_type() const {
  return _internal_has_change_lane_type();
}
inline void Passage::clear_change_lane_type() {
  _impl_.change_lane_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::routing::ChangeLaneType Passage::_internal_change_lane_type() const {
  return static_cast< ::apollo::routing::ChangeLaneType >(_impl_.change_lane_type_);
}
inline ::apollo::routing::ChangeLaneType Passage::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.change_lane_type)
  return _internal_change_lane_type();
}
inline void Passage::_internal_set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.change_lane_type_ = value;
}
inline void Passage::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  _internal_set_change_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.change_lane_type)
}

// -------------------------------------------------------------------

// RoadSegment

// optional string id = 1;
inline bool RoadSegment::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoadSegment::has_id() const {
  return _internal_has_id();
}
inline void RoadSegment::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoadSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoadSegment::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.RoadSegment.id)
}
inline std::string* RoadSegment::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.id)
  return _s;
}
inline const std::string& RoadSegment::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RoadSegment::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoadSegment::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoadSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoadSegment.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoadSegment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoadSegment.id)
}

// repeated .apollo.routing.Passage passage = 2;
inline int RoadSegment::_internal_passage_size() const {
  return _impl_.passage_.size();
}
inline int RoadSegment::passage_size() const {
  return _internal_passage_size();
}
inline void RoadSegment::clear_passage() {
  _impl_.passage_.Clear();
}
inline ::apollo::routing::Passage* RoadSegment::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.passage)
  return _impl_.passage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Passage >*
RoadSegment::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoadSegment.passage)
  return &_impl_.passage_;
}
inline const ::apollo::routing::Passage& RoadSegment::_internal_passage(int index) const {
  return _impl_.passage_.Get(index);
}
inline const ::apollo::routing::Passage& RoadSegment::passage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.passage)
  return _internal_passage(index);
}
inline ::apollo::routing::Passage* RoadSegment::_internal_add_passage() {
  return _impl_.passage_.Add();
}
inline ::apollo::routing::Passage* RoadSegment::add_passage() {
  ::apollo::routing::Passage* _add = _internal_add_passage();
  // @@protoc_insertion_point(field_add:apollo.routing.RoadSegment.passage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::Passage >&
RoadSegment::passage() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoadSegment.passage)
  return _impl_.passage_;
}

// -------------------------------------------------------------------

// RoutingResponse

// optional .apollo.common.Header header = 1;
inline bool RoutingResponse::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RoutingResponse::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RoutingResponse::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RoutingResponse::header() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.header)
  return _internal_header();
}
inline void RoutingResponse::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.RoutingResponse.header)
}
inline ::apollo::common::Header* RoutingResponse::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* RoutingResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RoutingResponse::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* RoutingResponse::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.header)
  return _msg;
}
inline void RoutingResponse::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.header)
}

// repeated .apollo.routing.RoadSegment road = 2;
inline int RoutingResponse::_internal_road_size() const {
  return _impl_.road_.size();
}
inline int RoutingResponse::road_size() const {
  return _internal_road_size();
}
inline void RoutingResponse::clear_road() {
  _impl_.road_.Clear();
}
inline ::apollo::routing::RoadSegment* RoutingResponse::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.road)
  return _impl_.road_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::RoadSegment >*
RoutingResponse::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingResponse.road)
  return &_impl_.road_;
}
inline const ::apollo::routing::RoadSegment& RoutingResponse::_internal_road(int index) const {
  return _impl_.road_.Get(index);
}
inline const ::apollo::routing::RoadSegment& RoutingResponse::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.road)
  return _internal_road(index);
}
inline ::apollo::routing::RoadSegment* RoutingResponse::_internal_add_road() {
  return _impl_.road_.Add();
}
inline ::apollo::routing::RoadSegment* RoutingResponse::add_road() {
  ::apollo::routing::RoadSegment* _add = _internal_add_road();
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingResponse.road)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::RoadSegment >&
RoutingResponse::road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingResponse.road)
  return _impl_.road_;
}

// optional .apollo.routing.Measurement measurement = 3;
inline bool RoutingResponse::_internal_has_measurement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.measurement_ != nullptr);
  return value;
}
inline bool RoutingResponse::has_measurement() const {
  return _internal_has_measurement();
}
inline void RoutingResponse::clear_measurement() {
  if (_impl_.measurement_ != nullptr) _impl_.measurement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::routing::Measurement& RoutingResponse::_internal_measurement() const {
  const ::apollo::routing::Measurement* p = _impl_.measurement_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::Measurement&>(
      ::apollo::routing::_Measurement_default_instance_);
}
inline const ::apollo::routing::Measurement& RoutingResponse::measurement() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.measurement)
  return _internal_measurement();
}
inline void RoutingResponse::unsafe_arena_set_allocated_measurement(
    ::apollo::routing::Measurement* measurement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurement_);
  }
  _impl_.measurement_ = measurement;
  if (measurement) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.RoutingResponse.measurement)
}
inline ::apollo::routing::Measurement* RoutingResponse::release_measurement() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::Measurement* temp = _impl_.measurement_;
  _impl_.measurement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::Measurement* RoutingResponse::unsafe_arena_release_measurement() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.measurement)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::Measurement* temp = _impl_.measurement_;
  _impl_.measurement_ = nullptr;
  return temp;
}
inline ::apollo::routing::Measurement* RoutingResponse::_internal_mutable_measurement() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.measurement_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::Measurement>(GetArenaForAllocation());
    _impl_.measurement_ = p;
  }
  return _impl_.measurement_;
}
inline ::apollo::routing::Measurement* RoutingResponse::mutable_measurement() {
  ::apollo::routing::Measurement* _msg = _internal_mutable_measurement();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.measurement)
  return _msg;
}
inline void RoutingResponse::set_allocated_measurement(::apollo::routing::Measurement* measurement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.measurement_;
  }
  if (measurement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(measurement);
    if (message_arena != submessage_arena) {
      measurement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.measurement_ = measurement;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.measurement)
}

// optional .apollo.routing.RoutingRequest routing_request = 4;
inline bool RoutingResponse::_internal_has_routing_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_request_ != nullptr);
  return value;
}
inline bool RoutingResponse::has_routing_request() const {
  return _internal_has_routing_request();
}
inline void RoutingResponse::clear_routing_request() {
  if (_impl_.routing_request_ != nullptr) _impl_.routing_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::routing::RoutingRequest& RoutingResponse::_internal_routing_request() const {
  const ::apollo::routing::RoutingRequest* p = _impl_.routing_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& RoutingResponse::routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.routing_request)
  return _internal_routing_request();
}
inline void RoutingResponse::unsafe_arena_set_allocated_routing_request(
    ::apollo::routing::RoutingRequest* routing_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_);
  }
  _impl_.routing_request_ = routing_request;
  if (routing_request) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.RoutingResponse.routing_request)
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::release_routing_request() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::unsafe_arena_release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.routing_request)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::_internal_mutable_routing_request() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.routing_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaForAllocation());
    _impl_.routing_request_ = p;
  }
  return _impl_.routing_request_;
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::mutable_routing_request() {
  ::apollo::routing::RoutingRequest* _msg = _internal_mutable_routing_request();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.routing_request)
  return _msg;
}
inline void RoutingResponse::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_request_;
  }
  if (routing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_request);
    if (message_arena != submessage_arena) {
      routing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.routing_request_ = routing_request;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.routing_request)
}

// optional bytes map_version = 5;
inline bool RoutingResponse::_internal_has_map_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoutingResponse::has_map_version() const {
  return _internal_has_map_version();
}
inline void RoutingResponse::clear_map_version() {
  _impl_.map_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoutingResponse::map_version() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.map_version)
  return _internal_map_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoutingResponse::set_map_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.map_version_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingResponse.map_version)
}
inline std::string* RoutingResponse::mutable_map_version() {
  std::string* _s = _internal_mutable_map_version();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.map_version)
  return _s;
}
inline const std::string& RoutingResponse::_internal_map_version() const {
  return _impl_.map_version_.Get();
}
inline void RoutingResponse::_internal_set_map_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.map_version_.Set(value, GetArenaForAllocation());
}
inline std::string* RoutingResponse::_internal_mutable_map_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.map_version_.Mutable(GetArenaForAllocation());
}
inline std::string* RoutingResponse::release_map_version() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.map_version)
  if (!_internal_has_map_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.map_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_version_.IsDefault()) {
    _impl_.map_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoutingResponse::set_allocated_map_version(std::string* map_version) {
  if (map_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.map_version_.SetAllocated(map_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_version_.IsDefault()) {
    _impl_.map_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.map_version)
}

// optional .apollo.common.StatusPb status = 6;
inline bool RoutingResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline bool RoutingResponse::has_status() const {
  return _internal_has_status();
}
inline const ::apollo::common::StatusPb& RoutingResponse::_internal_status() const {
  const ::apollo::common::StatusPb* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::StatusPb&>(
      ::apollo::common::_StatusPb_default_instance_);
}
inline const ::apollo::common::StatusPb& RoutingResponse::status() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.status)
  return _internal_status();
}
inline void RoutingResponse::unsafe_arena_set_allocated_status(
    ::apollo::common::StatusPb* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.routing.RoutingResponse.status)
}
inline ::apollo::common::StatusPb* RoutingResponse::release_status() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::StatusPb* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::StatusPb* RoutingResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.status)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::StatusPb* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::apollo::common::StatusPb* RoutingResponse::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::StatusPb>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::apollo::common::StatusPb* RoutingResponse::mutable_status() {
  ::apollo::common::StatusPb* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.status)
  return _msg;
}
inline void RoutingResponse::set_allocated_status(::apollo::common::StatusPb* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::routing::ChangeLaneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::routing::ChangeLaneType>() {
  return ::apollo::routing::ChangeLaneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto
