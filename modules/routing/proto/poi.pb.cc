// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/poi.proto

#include "modules/routing/proto/poi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace routing {
PROTOBUF_CONSTEXPR Landmark::Landmark(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.waypoint_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parking_space_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parking_info_)*/nullptr} {}
struct LandmarkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LandmarkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LandmarkDefaultTypeInternal() {}
  union {
    Landmark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LandmarkDefaultTypeInternal _Landmark_default_instance_;
PROTOBUF_CONSTEXPR POI::POI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.landmark_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct POIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR POIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~POIDefaultTypeInternal() {}
  union {
    POI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 POIDefaultTypeInternal _POI_default_instance_;
}  // namespace routing
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2frouting_2fproto_2fpoi_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2frouting_2fproto_2fpoi_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2fpoi_2eproto = nullptr;

const uint32_t TableStruct_modules_2frouting_2fproto_2fpoi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _impl_.waypoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _impl_.parking_space_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Landmark, _impl_.parking_info_),
  0,
  ~0u,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::POI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::POI, _impl_.landmark_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::routing::Landmark)},
  { 14, -1, -1, sizeof(::apollo::routing::POI)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::routing::_Landmark_default_instance_._instance,
  &::apollo::routing::_POI_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2fpoi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037modules/routing/proto/poi.proto\022\016apoll"
  "o.routing\032#modules/routing/proto/routing"
  ".proto\"\231\001\n\010Landmark\022\014\n\004name\030\001 \001(\t\022.\n\010way"
  "point\030\002 \003(\0132\034.apollo.routing.LaneWaypoin"
  "t\022\034\n\020parking_space_id\030\003 \001(\tB\002\030\001\0221\n\014parki"
  "ng_info\030\004 \001(\0132\033.apollo.routing.ParkingIn"
  "fo\"1\n\003POI\022*\n\010landmark\030\001 \003(\0132\030.apollo.rou"
  "ting.Landmark"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_deps[1] = {
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto = {
    false, false, 293, descriptor_table_protodef_modules_2frouting_2fproto_2fpoi_2eproto,
    "modules/routing/proto/poi.proto",
    &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_once, descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2fpoi_2eproto::offsets,
    file_level_metadata_modules_2frouting_2fproto_2fpoi_2eproto, file_level_enum_descriptors_modules_2frouting_2fproto_2fpoi_2eproto,
    file_level_service_descriptors_modules_2frouting_2fproto_2fpoi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_getter() {
  return &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2frouting_2fproto_2fpoi_2eproto(&descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto);
namespace apollo {
namespace routing {

// ===================================================================

class Landmark::_Internal {
 public:
  using HasBits = decltype(std::declval<Landmark>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parking_space_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::ParkingInfo& parking_info(const Landmark* msg);
  static void set_has_parking_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::routing::ParkingInfo&
Landmark::_Internal::parking_info(const Landmark* msg) {
  return *msg->_impl_.parking_info_;
}
void Landmark::clear_waypoint() {
  _impl_.waypoint_.Clear();
}
void Landmark::clear_parking_info() {
  if (_impl_.parking_info_ != nullptr) _impl_.parking_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Landmark::Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waypoint_){from._impl_.waypoint_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parking_space_id_){}
    , decltype(_impl_.parking_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.parking_space_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parking_space_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parking_space_id()) {
    _impl_.parking_space_id_.Set(from._internal_parking_space_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parking_info()) {
    _impl_.parking_info_ = new ::apollo::routing::ParkingInfo(*from._impl_.parking_info_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Landmark)
}

inline void Landmark::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waypoint_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.parking_space_id_){}
    , decltype(_impl_.parking_info_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parking_space_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parking_space_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:apollo.routing.Landmark)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Landmark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.waypoint_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.parking_space_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parking_info_;
}

void Landmark::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Landmark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.waypoint_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.parking_space_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.parking_info_ != nullptr);
      _impl_.parking_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Landmark::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Landmark.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string parking_space_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parking_space_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.routing.Landmark.parking_space_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.ParkingInfo parking_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Landmark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Landmark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_waypoint_size()); i < n; i++) {
    const auto& repfield = this->_internal_waypoint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string parking_space_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parking_space_id().data(), static_cast<int>(this->_internal_parking_space_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.Landmark.parking_space_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_parking_space_id(), target);
  }

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::parking_info(this),
        _Internal::parking_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Landmark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  total_size += 1UL * this->_internal_waypoint_size();
  for (const auto& msg : this->_impl_.waypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string parking_space_id = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parking_space_id());
    }

    // optional .apollo.routing.ParkingInfo parking_info = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parking_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Landmark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Landmark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Landmark::GetClassData() const { return &_class_data_; }

void Landmark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Landmark *>(to)->MergeFrom(
      static_cast<const Landmark &>(from));
}


void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.waypoint_.MergeFrom(from._impl_.waypoint_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_parking_space_id(from._internal_parking_space_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parking_info()->::apollo::routing::ParkingInfo::MergeFrom(from._internal_parking_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.waypoint_.InternalSwap(&other->_impl_.waypoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parking_space_id_, lhs_arena,
      &other->_impl_.parking_space_id_, rhs_arena
  );
  swap(_impl_.parking_info_, other->_impl_.parking_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Landmark::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2fpoi_2eproto[0]);
}

// ===================================================================

class POI::_Internal {
 public:
};

POI::POI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.routing.POI)
}
POI::POI(const POI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.landmark_){from._impl_.landmark_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.routing.POI)
}

inline void POI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.landmark_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

POI::~POI() {
  // @@protoc_insertion_point(destructor:apollo.routing.POI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void POI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.landmark_.~RepeatedPtrField();
}

void POI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void POI::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.POI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landmark_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.routing.Landmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* POI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.POI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.Landmark landmark = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_landmark_size()); i < n; i++) {
    const auto& repfield = this->_internal_landmark(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.POI)
  return target;
}

size_t POI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.POI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.Landmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->_impl_.landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData POI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    POI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*POI::GetClassData() const { return &_class_data_; }

void POI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<POI *>(to)->MergeFrom(
      static_cast<const POI &>(from));
}


void POI::MergeFrom(const POI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.POI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.landmark_.MergeFrom(from._impl_.landmark_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void POI::CopyFrom(const POI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.POI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POI::IsInitialized() const {
  return true;
}

void POI::InternalSwap(POI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.landmark_.InternalSwap(&other->_impl_.landmark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata POI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_getter, &descriptor_table_modules_2frouting_2fproto_2fpoi_2eproto_once,
      file_level_metadata_modules_2frouting_2fproto_2fpoi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::Landmark*
Arena::CreateMaybeMessage< ::apollo::routing::Landmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::POI*
Arena::CreateMaybeMessage< ::apollo::routing::POI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::routing::POI >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
