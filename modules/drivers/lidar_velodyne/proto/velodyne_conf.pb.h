// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/proto/velodyne_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto;
namespace apollo {
namespace drivers {
namespace lidar_velodyne {
class FusionConf;
struct FusionConfDefaultTypeInternal;
extern FusionConfDefaultTypeInternal _FusionConf_default_instance_;
class VelodyneConf;
struct VelodyneConfDefaultTypeInternal;
extern VelodyneConfDefaultTypeInternal _VelodyneConf_default_instance_;
class VelodyneConfUnit;
struct VelodyneConfUnitDefaultTypeInternal;
extern VelodyneConfUnitDefaultTypeInternal _VelodyneConfUnit_default_instance_;
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::lidar_velodyne::FusionConf* Arena::CreateMaybeMessage<::apollo::drivers::lidar_velodyne::FusionConf>(Arena*);
template<> ::apollo::drivers::lidar_velodyne::VelodyneConf* Arena::CreateMaybeMessage<::apollo::drivers::lidar_velodyne::VelodyneConf>(Arena*);
template<> ::apollo::drivers::lidar_velodyne::VelodyneConfUnit* Arena::CreateMaybeMessage<::apollo::drivers::lidar_velodyne::VelodyneConfUnit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace lidar_velodyne {

enum VelodyneModel : int {
  VLP16 = 0,
  V64E_S2 = 1,
  V64E_S3S = 2,
  V64E_S3D_STRONGEST = 3,
  V64E_S3D_LAST = 4,
  V64E_S3D_DUAL = 5
};
bool VelodyneModel_IsValid(int value);
constexpr VelodyneModel VelodyneModel_MIN = VLP16;
constexpr VelodyneModel VelodyneModel_MAX = V64E_S3D_DUAL;
constexpr int VelodyneModel_ARRAYSIZE = VelodyneModel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VelodyneModel_descriptor();
template<typename T>
inline const std::string& VelodyneModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VelodyneModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VelodyneModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VelodyneModel_descriptor(), enum_t_value);
}
inline bool VelodyneModel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VelodyneModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VelodyneModel>(
    VelodyneModel_descriptor(), name, value);
}
// ===================================================================

class VelodyneConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.lidar_velodyne.VelodyneConf) */ {
 public:
  inline VelodyneConf() : VelodyneConf(nullptr) {}
  ~VelodyneConf() override;
  explicit PROTOBUF_CONSTEXPR VelodyneConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelodyneConf(const VelodyneConf& from);
  VelodyneConf(VelodyneConf&& from) noexcept
    : VelodyneConf() {
    *this = ::std::move(from);
  }

  inline VelodyneConf& operator=(const VelodyneConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelodyneConf& operator=(VelodyneConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelodyneConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelodyneConf* internal_default_instance() {
    return reinterpret_cast<const VelodyneConf*>(
               &_VelodyneConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VelodyneConf& a, VelodyneConf& b) {
    a.Swap(&b);
  }
  inline void Swap(VelodyneConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelodyneConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelodyneConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelodyneConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelodyneConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelodyneConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelodyneConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.lidar_velodyne.VelodyneConf";
  }
  protected:
  explicit VelodyneConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kFrameIdFieldNumber = 3,
    kCalibrationFileFieldNumber = 108,
    kChildFrameIdFieldNumber = 200,
    kIndexFieldNumber = 1,
    kModelFieldNumber = 7,
    kNpacketsFieldNumber = 8,
    kCalibrationOnlineFieldNumber = 106,
    kOrganizedFieldNumber = 107,
    kMinAngleFieldNumber = 102,
    kMaxAngleFieldNumber = 103,
    kViewDirectionFieldNumber = 104,
    kFiringDataPortFieldNumber = 4,
    kPositioningDataPortFieldNumber = 5,
    kRpmFieldNumber = 6,
    kCacheSizeFieldNumber = 9,
    kPacketRateFieldNumber = 10,
    kMaxRangeFieldNumber = 100,
    kMinRangeFieldNumber = 101,
    kViewWidthFieldNumber = 105,
    kTfQueryTimeoutFieldNumber = 201,
  };
  // optional string position = 2 [default = "centre"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const std::string& position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position();
  PROTOBUF_NODISCARD std::string* release_position();
  void set_allocated_position(std::string* position);
  private:
  const std::string& _internal_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // optional string frame_id = 3;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // optional string calibration_file = 108;
  bool has_calibration_file() const;
  private:
  bool _internal_has_calibration_file() const;
  public:
  void clear_calibration_file();
  const std::string& calibration_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calibration_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calibration_file();
  PROTOBUF_NODISCARD std::string* release_calibration_file();
  void set_allocated_calibration_file(std::string* calibration_file);
  private:
  const std::string& _internal_calibration_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calibration_file(const std::string& value);
  std::string* _internal_mutable_calibration_file();
  public:

  // optional string child_frame_id = 200 [default = "velodyne16"];
  bool has_child_frame_id() const;
  private:
  bool _internal_has_child_frame_id() const;
  public:
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // required uint32 index = 1 [default = 0];
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional .apollo.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::apollo::drivers::lidar_velodyne::VelodyneModel model() const;
  void set_model(::apollo::drivers::lidar_velodyne::VelodyneModel value);
  private:
  ::apollo::drivers::lidar_velodyne::VelodyneModel _internal_model() const;
  void _internal_set_model(::apollo::drivers::lidar_velodyne::VelodyneModel value);
  public:

  // optional int32 npackets = 8;
  bool has_npackets() const;
  private:
  bool _internal_has_npackets() const;
  public:
  void clear_npackets();
  int32_t npackets() const;
  void set_npackets(int32_t value);
  private:
  int32_t _internal_npackets() const;
  void _internal_set_npackets(int32_t value);
  public:

  // optional bool calibration_online = 106 [default = false];
  bool has_calibration_online() const;
  private:
  bool _internal_has_calibration_online() const;
  public:
  void clear_calibration_online();
  bool calibration_online() const;
  void set_calibration_online(bool value);
  private:
  bool _internal_calibration_online() const;
  void _internal_set_calibration_online(bool value);
  public:

  // optional bool organized = 107 [default = false];
  bool has_organized() const;
  private:
  bool _internal_has_organized() const;
  public:
  void clear_organized();
  bool organized() const;
  void set_organized(bool value);
  private:
  bool _internal_organized() const;
  void _internal_set_organized(bool value);
  public:

  // optional double min_angle = 102;
  bool has_min_angle() const;
  private:
  bool _internal_has_min_angle() const;
  public:
  void clear_min_angle();
  double min_angle() const;
  void set_min_angle(double value);
  private:
  double _internal_min_angle() const;
  void _internal_set_min_angle(double value);
  public:

  // optional double max_angle = 103;
  bool has_max_angle() const;
  private:
  bool _internal_has_max_angle() const;
  public:
  void clear_max_angle();
  double max_angle() const;
  void set_max_angle(double value);
  private:
  double _internal_max_angle() const;
  void _internal_set_max_angle(double value);
  public:

  // optional double view_direction = 104 [default = 0];
  bool has_view_direction() const;
  private:
  bool _internal_has_view_direction() const;
  public:
  void clear_view_direction();
  double view_direction() const;
  void set_view_direction(double value);
  private:
  double _internal_view_direction() const;
  void _internal_set_view_direction(double value);
  public:

  // optional uint32 firing_data_port = 4 [default = 2368];
  bool has_firing_data_port() const;
  private:
  bool _internal_has_firing_data_port() const;
  public:
  void clear_firing_data_port();
  uint32_t firing_data_port() const;
  void set_firing_data_port(uint32_t value);
  private:
  uint32_t _internal_firing_data_port() const;
  void _internal_set_firing_data_port(uint32_t value);
  public:

  // optional uint32 positioning_data_port = 5 [default = 8308];
  bool has_positioning_data_port() const;
  private:
  bool _internal_has_positioning_data_port() const;
  public:
  void clear_positioning_data_port();
  uint32_t positioning_data_port() const;
  void set_positioning_data_port(uint32_t value);
  private:
  uint32_t _internal_positioning_data_port() const;
  void _internal_set_positioning_data_port(uint32_t value);
  public:

  // optional double rpm = 6 [default = 600];
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // optional int32 cache_size = 9 [default = 1];
  bool has_cache_size() const;
  private:
  bool _internal_has_cache_size() const;
  public:
  void clear_cache_size();
  int32_t cache_size() const;
  void set_cache_size(int32_t value);
  private:
  int32_t _internal_cache_size() const;
  void _internal_set_cache_size(int32_t value);
  public:

  // optional int32 packet_rate = 10 [default = 754];
  bool has_packet_rate() const;
  private:
  bool _internal_has_packet_rate() const;
  public:
  void clear_packet_rate();
  int32_t packet_rate() const;
  void set_packet_rate(int32_t value);
  private:
  int32_t _internal_packet_rate() const;
  void _internal_set_packet_rate(int32_t value);
  public:

  // optional double max_range = 100 [default = 130];
  bool has_max_range() const;
  private:
  bool _internal_has_max_range() const;
  public:
  void clear_max_range();
  double max_range() const;
  void set_max_range(double value);
  private:
  double _internal_max_range() const;
  void _internal_set_max_range(double value);
  public:

  // optional double min_range = 101 [default = 0.9];
  bool has_min_range() const;
  private:
  bool _internal_has_min_range() const;
  public:
  void clear_min_range();
  double min_range() const;
  void set_min_range(double value);
  private:
  double _internal_min_range() const;
  void _internal_set_min_range(double value);
  public:

  // optional double view_width = 105 [default = 6.2831853071795862];
  bool has_view_width() const;
  private:
  bool _internal_has_view_width() const;
  public:
  void clear_view_width();
  double view_width() const;
  void set_view_width(double value);
  private:
  double _internal_view_width() const;
  void _internal_set_view_width(double value);
  public:

  // optional double tf_query_timeout = 201 [default = 0.1];
  bool has_tf_query_timeout() const;
  private:
  bool _internal_has_tf_query_timeout() const;
  public:
  void clear_tf_query_timeout();
  double tf_query_timeout() const;
  void set_tf_query_timeout(double value);
  private:
  double _internal_tf_query_timeout() const;
  void _internal_set_tf_query_timeout(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.lidar_velodyne.VelodyneConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_position_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibration_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
    uint32_t index_;
    int model_;
    int32_t npackets_;
    bool calibration_online_;
    bool organized_;
    double min_angle_;
    double max_angle_;
    double view_direction_;
    uint32_t firing_data_port_;
    uint32_t positioning_data_port_;
    double rpm_;
    int32_t cache_size_;
    int32_t packet_rate_;
    double max_range_;
    double min_range_;
    double view_width_;
    double tf_query_timeout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto;
};
// -------------------------------------------------------------------

class FusionConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.lidar_velodyne.FusionConf) */ {
 public:
  inline FusionConf() : FusionConf(nullptr) {}
  ~FusionConf() override;
  explicit PROTOBUF_CONSTEXPR FusionConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionConf(const FusionConf& from);
  FusionConf(FusionConf&& from) noexcept
    : FusionConf() {
    *this = ::std::move(from);
  }

  inline FusionConf& operator=(const FusionConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionConf& operator=(FusionConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionConf* internal_default_instance() {
    return reinterpret_cast<const FusionConf*>(
               &_FusionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FusionConf& a, FusionConf& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.lidar_velodyne.FusionConf";
  }
  protected:
  explicit FusionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlaveIndexFieldNumber = 2,
    kMajorIndexFieldNumber = 1,
  };
  // repeated uint32 slave_index = 2;
  int slave_index_size() const;
  private:
  int _internal_slave_index_size() const;
  public:
  void clear_slave_index();
  private:
  uint32_t _internal_slave_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_slave_index() const;
  void _internal_add_slave_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_slave_index();
  public:
  uint32_t slave_index(int index) const;
  void set_slave_index(int index, uint32_t value);
  void add_slave_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      slave_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_slave_index();

  // required uint32 major_index = 1 [default = 0];
  bool has_major_index() const;
  private:
  bool _internal_has_major_index() const;
  public:
  void clear_major_index();
  uint32_t major_index() const;
  void set_major_index(uint32_t value);
  private:
  uint32_t _internal_major_index() const;
  void _internal_set_major_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.lidar_velodyne.FusionConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > slave_index_;
    uint32_t major_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto;
};
// -------------------------------------------------------------------

class VelodyneConfUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.lidar_velodyne.VelodyneConfUnit) */ {
 public:
  inline VelodyneConfUnit() : VelodyneConfUnit(nullptr) {}
  ~VelodyneConfUnit() override;
  explicit PROTOBUF_CONSTEXPR VelodyneConfUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelodyneConfUnit(const VelodyneConfUnit& from);
  VelodyneConfUnit(VelodyneConfUnit&& from) noexcept
    : VelodyneConfUnit() {
    *this = ::std::move(from);
  }

  inline VelodyneConfUnit& operator=(const VelodyneConfUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelodyneConfUnit& operator=(VelodyneConfUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelodyneConfUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelodyneConfUnit* internal_default_instance() {
    return reinterpret_cast<const VelodyneConfUnit*>(
               &_VelodyneConfUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VelodyneConfUnit& a, VelodyneConfUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(VelodyneConfUnit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelodyneConfUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelodyneConfUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelodyneConfUnit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelodyneConfUnit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelodyneConfUnit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelodyneConfUnit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.lidar_velodyne.VelodyneConfUnit";
  }
  protected:
  explicit VelodyneConfUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfFieldNumber = 1,
    kFusionConfFieldNumber = 3,
    kIsFusionFieldNumber = 2,
  };
  // repeated .apollo.drivers.lidar_velodyne.VelodyneConf conf = 1;
  int conf_size() const;
  private:
  int _internal_conf_size() const;
  public:
  void clear_conf();
  ::apollo::drivers::lidar_velodyne::VelodyneConf* mutable_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::lidar_velodyne::VelodyneConf >*
      mutable_conf();
  private:
  const ::apollo::drivers::lidar_velodyne::VelodyneConf& _internal_conf(int index) const;
  ::apollo::drivers::lidar_velodyne::VelodyneConf* _internal_add_conf();
  public:
  const ::apollo::drivers::lidar_velodyne::VelodyneConf& conf(int index) const;
  ::apollo::drivers::lidar_velodyne::VelodyneConf* add_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::lidar_velodyne::VelodyneConf >&
      conf() const;

  // optional .apollo.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
  bool has_fusion_conf() const;
  private:
  bool _internal_has_fusion_conf() const;
  public:
  void clear_fusion_conf();
  const ::apollo::drivers::lidar_velodyne::FusionConf& fusion_conf() const;
  PROTOBUF_NODISCARD ::apollo::drivers::lidar_velodyne::FusionConf* release_fusion_conf();
  ::apollo::drivers::lidar_velodyne::FusionConf* mutable_fusion_conf();
  void set_allocated_fusion_conf(::apollo::drivers::lidar_velodyne::FusionConf* fusion_conf);
  private:
  const ::apollo::drivers::lidar_velodyne::FusionConf& _internal_fusion_conf() const;
  ::apollo::drivers::lidar_velodyne::FusionConf* _internal_mutable_fusion_conf();
  public:
  void unsafe_arena_set_allocated_fusion_conf(
      ::apollo::drivers::lidar_velodyne::FusionConf* fusion_conf);
  ::apollo::drivers::lidar_velodyne::FusionConf* unsafe_arena_release_fusion_conf();

  // optional bool is_fusion = 2 [default = false];
  bool has_is_fusion() const;
  private:
  bool _internal_has_is_fusion() const;
  public:
  void clear_is_fusion();
  bool is_fusion() const;
  void set_is_fusion(bool value);
  private:
  bool _internal_is_fusion() const;
  void _internal_set_is_fusion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::lidar_velodyne::VelodyneConf > conf_;
    ::apollo::drivers::lidar_velodyne::FusionConf* fusion_conf_;
    bool is_fusion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VelodyneConf

// required uint32 index = 1 [default = 0];
inline bool VelodyneConf::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VelodyneConf::has_index() const {
  return _internal_has_index();
}
inline void VelodyneConf::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t VelodyneConf::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t VelodyneConf::index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.index)
  return _internal_index();
}
inline void VelodyneConf::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void VelodyneConf::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.index)
}

// optional string position = 2 [default = "centre"];
inline bool VelodyneConf::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VelodyneConf::has_position() const {
  return _internal_has_position();
}
inline void VelodyneConf::clear_position() {
  _impl_.position_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_position_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VelodyneConf::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.position)
  if (_impl_.position_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_position_.get();
  return _internal_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneConf::set_position(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.position_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.position)
}
inline std::string* VelodyneConf::mutable_position() {
  std::string* _s = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConf.position)
  return _s;
}
inline const std::string& VelodyneConf::_internal_position() const {
  return _impl_.position_.Get();
}
inline void VelodyneConf::_internal_set_position(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.position_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneConf::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.position_.Mutable(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_position_, GetArenaForAllocation());
}
inline std::string* VelodyneConf::release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneConf.position)
  if (!_internal_has_position()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.position_.Release();
  return p;
}
inline void VelodyneConf::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_.SetAllocated(position, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConf.position)
}

// optional string frame_id = 3;
inline bool VelodyneConf::_internal_has_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VelodyneConf::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void VelodyneConf::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VelodyneConf::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneConf::set_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.frame_id)
}
inline std::string* VelodyneConf::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConf.frame_id)
  return _s;
}
inline const std::string& VelodyneConf::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void VelodyneConf::_internal_set_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneConf::_internal_mutable_frame_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneConf::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneConf.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneConf::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConf.frame_id)
}

// optional uint32 firing_data_port = 4 [default = 2368];
inline bool VelodyneConf::_internal_has_firing_data_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VelodyneConf::has_firing_data_port() const {
  return _internal_has_firing_data_port();
}
inline void VelodyneConf::clear_firing_data_port() {
  _impl_.firing_data_port_ = 2368u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t VelodyneConf::_internal_firing_data_port() const {
  return _impl_.firing_data_port_;
}
inline uint32_t VelodyneConf::firing_data_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.firing_data_port)
  return _internal_firing_data_port();
}
inline void VelodyneConf::_internal_set_firing_data_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.firing_data_port_ = value;
}
inline void VelodyneConf::set_firing_data_port(uint32_t value) {
  _internal_set_firing_data_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.firing_data_port)
}

// optional uint32 positioning_data_port = 5 [default = 8308];
inline bool VelodyneConf::_internal_has_positioning_data_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VelodyneConf::has_positioning_data_port() const {
  return _internal_has_positioning_data_port();
}
inline void VelodyneConf::clear_positioning_data_port() {
  _impl_.positioning_data_port_ = 8308u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t VelodyneConf::_internal_positioning_data_port() const {
  return _impl_.positioning_data_port_;
}
inline uint32_t VelodyneConf::positioning_data_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.positioning_data_port)
  return _internal_positioning_data_port();
}
inline void VelodyneConf::_internal_set_positioning_data_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.positioning_data_port_ = value;
}
inline void VelodyneConf::set_positioning_data_port(uint32_t value) {
  _internal_set_positioning_data_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.positioning_data_port)
}

// optional double rpm = 6 [default = 600];
inline bool VelodyneConf::_internal_has_rpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VelodyneConf::has_rpm() const {
  return _internal_has_rpm();
}
inline void VelodyneConf::clear_rpm() {
  _impl_.rpm_ = 600;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double VelodyneConf::_internal_rpm() const {
  return _impl_.rpm_;
}
inline double VelodyneConf::rpm() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.rpm)
  return _internal_rpm();
}
inline void VelodyneConf::_internal_set_rpm(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.rpm_ = value;
}
inline void VelodyneConf::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.rpm)
}

// optional .apollo.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
inline bool VelodyneConf::_internal_has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VelodyneConf::has_model() const {
  return _internal_has_model();
}
inline void VelodyneConf::clear_model() {
  _impl_.model_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::lidar_velodyne::VelodyneModel VelodyneConf::_internal_model() const {
  return static_cast< ::apollo::drivers::lidar_velodyne::VelodyneModel >(_impl_.model_);
}
inline ::apollo::drivers::lidar_velodyne::VelodyneModel VelodyneConf::model() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.model)
  return _internal_model();
}
inline void VelodyneConf::_internal_set_model(::apollo::drivers::lidar_velodyne::VelodyneModel value) {
  assert(::apollo::drivers::lidar_velodyne::VelodyneModel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.model_ = value;
}
inline void VelodyneConf::set_model(::apollo::drivers::lidar_velodyne::VelodyneModel value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.model)
}

// optional int32 npackets = 8;
inline bool VelodyneConf::_internal_has_npackets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VelodyneConf::has_npackets() const {
  return _internal_has_npackets();
}
inline void VelodyneConf::clear_npackets() {
  _impl_.npackets_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t VelodyneConf::_internal_npackets() const {
  return _impl_.npackets_;
}
inline int32_t VelodyneConf::npackets() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.npackets)
  return _internal_npackets();
}
inline void VelodyneConf::_internal_set_npackets(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.npackets_ = value;
}
inline void VelodyneConf::set_npackets(int32_t value) {
  _internal_set_npackets(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.npackets)
}

// optional int32 cache_size = 9 [default = 1];
inline bool VelodyneConf::_internal_has_cache_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VelodyneConf::has_cache_size() const {
  return _internal_has_cache_size();
}
inline void VelodyneConf::clear_cache_size() {
  _impl_.cache_size_ = 1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t VelodyneConf::_internal_cache_size() const {
  return _impl_.cache_size_;
}
inline int32_t VelodyneConf::cache_size() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.cache_size)
  return _internal_cache_size();
}
inline void VelodyneConf::_internal_set_cache_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.cache_size_ = value;
}
inline void VelodyneConf::set_cache_size(int32_t value) {
  _internal_set_cache_size(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.cache_size)
}

// optional int32 packet_rate = 10 [default = 754];
inline bool VelodyneConf::_internal_has_packet_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VelodyneConf::has_packet_rate() const {
  return _internal_has_packet_rate();
}
inline void VelodyneConf::clear_packet_rate() {
  _impl_.packet_rate_ = 754;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t VelodyneConf::_internal_packet_rate() const {
  return _impl_.packet_rate_;
}
inline int32_t VelodyneConf::packet_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.packet_rate)
  return _internal_packet_rate();
}
inline void VelodyneConf::_internal_set_packet_rate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.packet_rate_ = value;
}
inline void VelodyneConf::set_packet_rate(int32_t value) {
  _internal_set_packet_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.packet_rate)
}

// optional double max_range = 100 [default = 130];
inline bool VelodyneConf::_internal_has_max_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool VelodyneConf::has_max_range() const {
  return _internal_has_max_range();
}
inline void VelodyneConf::clear_max_range() {
  _impl_.max_range_ = 130;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double VelodyneConf::_internal_max_range() const {
  return _impl_.max_range_;
}
inline double VelodyneConf::max_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.max_range)
  return _internal_max_range();
}
inline void VelodyneConf::_internal_set_max_range(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.max_range_ = value;
}
inline void VelodyneConf::set_max_range(double value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.max_range)
}

// optional double min_range = 101 [default = 0.9];
inline bool VelodyneConf::_internal_has_min_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool VelodyneConf::has_min_range() const {
  return _internal_has_min_range();
}
inline void VelodyneConf::clear_min_range() {
  _impl_.min_range_ = 0.9;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double VelodyneConf::_internal_min_range() const {
  return _impl_.min_range_;
}
inline double VelodyneConf::min_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.min_range)
  return _internal_min_range();
}
inline void VelodyneConf::_internal_set_min_range(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.min_range_ = value;
}
inline void VelodyneConf::set_min_range(double value) {
  _internal_set_min_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.min_range)
}

// optional double min_angle = 102;
inline bool VelodyneConf::_internal_has_min_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VelodyneConf::has_min_angle() const {
  return _internal_has_min_angle();
}
inline void VelodyneConf::clear_min_angle() {
  _impl_.min_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double VelodyneConf::_internal_min_angle() const {
  return _impl_.min_angle_;
}
inline double VelodyneConf::min_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.min_angle)
  return _internal_min_angle();
}
inline void VelodyneConf::_internal_set_min_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.min_angle_ = value;
}
inline void VelodyneConf::set_min_angle(double value) {
  _internal_set_min_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.min_angle)
}

// optional double max_angle = 103;
inline bool VelodyneConf::_internal_has_max_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VelodyneConf::has_max_angle() const {
  return _internal_has_max_angle();
}
inline void VelodyneConf::clear_max_angle() {
  _impl_.max_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double VelodyneConf::_internal_max_angle() const {
  return _impl_.max_angle_;
}
inline double VelodyneConf::max_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.max_angle)
  return _internal_max_angle();
}
inline void VelodyneConf::_internal_set_max_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.max_angle_ = value;
}
inline void VelodyneConf::set_max_angle(double value) {
  _internal_set_max_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.max_angle)
}

// optional double view_direction = 104 [default = 0];
inline bool VelodyneConf::_internal_has_view_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VelodyneConf::has_view_direction() const {
  return _internal_has_view_direction();
}
inline void VelodyneConf::clear_view_direction() {
  _impl_.view_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double VelodyneConf::_internal_view_direction() const {
  return _impl_.view_direction_;
}
inline double VelodyneConf::view_direction() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.view_direction)
  return _internal_view_direction();
}
inline void VelodyneConf::_internal_set_view_direction(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.view_direction_ = value;
}
inline void VelodyneConf::set_view_direction(double value) {
  _internal_set_view_direction(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.view_direction)
}

// optional double view_width = 105 [default = 6.2831853071795862];
inline bool VelodyneConf::_internal_has_view_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool VelodyneConf::has_view_width() const {
  return _internal_has_view_width();
}
inline void VelodyneConf::clear_view_width() {
  _impl_.view_width_ = 6.2831853071795862;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double VelodyneConf::_internal_view_width() const {
  return _impl_.view_width_;
}
inline double VelodyneConf::view_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.view_width)
  return _internal_view_width();
}
inline void VelodyneConf::_internal_set_view_width(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.view_width_ = value;
}
inline void VelodyneConf::set_view_width(double value) {
  _internal_set_view_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.view_width)
}

// optional bool calibration_online = 106 [default = false];
inline bool VelodyneConf::_internal_has_calibration_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VelodyneConf::has_calibration_online() const {
  return _internal_has_calibration_online();
}
inline void VelodyneConf::clear_calibration_online() {
  _impl_.calibration_online_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool VelodyneConf::_internal_calibration_online() const {
  return _impl_.calibration_online_;
}
inline bool VelodyneConf::calibration_online() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_online)
  return _internal_calibration_online();
}
inline void VelodyneConf::_internal_set_calibration_online(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.calibration_online_ = value;
}
inline void VelodyneConf::set_calibration_online(bool value) {
  _internal_set_calibration_online(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_online)
}

// optional bool organized = 107 [default = false];
inline bool VelodyneConf::_internal_has_organized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VelodyneConf::has_organized() const {
  return _internal_has_organized();
}
inline void VelodyneConf::clear_organized() {
  _impl_.organized_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool VelodyneConf::_internal_organized() const {
  return _impl_.organized_;
}
inline bool VelodyneConf::organized() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.organized)
  return _internal_organized();
}
inline void VelodyneConf::_internal_set_organized(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.organized_ = value;
}
inline void VelodyneConf::set_organized(bool value) {
  _internal_set_organized(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.organized)
}

// optional string calibration_file = 108;
inline bool VelodyneConf::_internal_has_calibration_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VelodyneConf::has_calibration_file() const {
  return _internal_has_calibration_file();
}
inline void VelodyneConf::clear_calibration_file() {
  _impl_.calibration_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VelodyneConf::calibration_file() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  return _internal_calibration_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneConf::set_calibration_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.calibration_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}
inline std::string* VelodyneConf::mutable_calibration_file() {
  std::string* _s = _internal_mutable_calibration_file();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  return _s;
}
inline const std::string& VelodyneConf::_internal_calibration_file() const {
  return _impl_.calibration_file_.Get();
}
inline void VelodyneConf::_internal_set_calibration_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.calibration_file_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneConf::_internal_mutable_calibration_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.calibration_file_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneConf::release_calibration_file() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file)
  if (!_internal_has_calibration_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.calibration_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.calibration_file_.IsDefault()) {
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneConf::set_allocated_calibration_file(std::string* calibration_file) {
  if (calibration_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.calibration_file_.SetAllocated(calibration_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.calibration_file_.IsDefault()) {
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file)
}

// optional string child_frame_id = 200 [default = "velodyne16"];
inline bool VelodyneConf::_internal_has_child_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VelodyneConf::has_child_frame_id() const {
  return _internal_has_child_frame_id();
}
inline void VelodyneConf::clear_child_frame_id() {
  _impl_.child_frame_id_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VelodyneConf::child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  if (_impl_.child_frame_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_.get();
  return _internal_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneConf::set_child_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}
inline std::string* VelodyneConf::mutable_child_frame_id() {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  return _s;
}
inline const std::string& VelodyneConf::_internal_child_frame_id() const {
  return _impl_.child_frame_id_.Get();
}
inline void VelodyneConf::_internal_set_child_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneConf::_internal_mutable_child_frame_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.child_frame_id_.Mutable(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
}
inline std::string* VelodyneConf::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
  if (!_internal_has_child_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.child_frame_id_.Release();
  return p;
}
inline void VelodyneConf::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.child_frame_id_.SetAllocated(child_frame_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id)
}

// optional double tf_query_timeout = 201 [default = 0.1];
inline bool VelodyneConf::_internal_has_tf_query_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool VelodyneConf::has_tf_query_timeout() const {
  return _internal_has_tf_query_timeout();
}
inline void VelodyneConf::clear_tf_query_timeout() {
  _impl_.tf_query_timeout_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double VelodyneConf::_internal_tf_query_timeout() const {
  return _impl_.tf_query_timeout_;
}
inline double VelodyneConf::tf_query_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConf.tf_query_timeout)
  return _internal_tf_query_timeout();
}
inline void VelodyneConf::_internal_set_tf_query_timeout(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tf_query_timeout_ = value;
}
inline void VelodyneConf::set_tf_query_timeout(double value) {
  _internal_set_tf_query_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConf.tf_query_timeout)
}

// -------------------------------------------------------------------

// FusionConf

// required uint32 major_index = 1 [default = 0];
inline bool FusionConf::_internal_has_major_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionConf::has_major_index() const {
  return _internal_has_major_index();
}
inline void FusionConf::clear_major_index() {
  _impl_.major_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FusionConf::_internal_major_index() const {
  return _impl_.major_index_;
}
inline uint32_t FusionConf::major_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.FusionConf.major_index)
  return _internal_major_index();
}
inline void FusionConf::_internal_set_major_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.major_index_ = value;
}
inline void FusionConf::set_major_index(uint32_t value) {
  _internal_set_major_index(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.FusionConf.major_index)
}

// repeated uint32 slave_index = 2;
inline int FusionConf::_internal_slave_index_size() const {
  return _impl_.slave_index_.size();
}
inline int FusionConf::slave_index_size() const {
  return _internal_slave_index_size();
}
inline void FusionConf::clear_slave_index() {
  _impl_.slave_index_.Clear();
}
inline uint32_t FusionConf::_internal_slave_index(int index) const {
  return _impl_.slave_index_.Get(index);
}
inline uint32_t FusionConf::slave_index(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.FusionConf.slave_index)
  return _internal_slave_index(index);
}
inline void FusionConf::set_slave_index(int index, uint32_t value) {
  _impl_.slave_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.FusionConf.slave_index)
}
inline void FusionConf::_internal_add_slave_index(uint32_t value) {
  _impl_.slave_index_.Add(value);
}
inline void FusionConf::add_slave_index(uint32_t value) {
  _internal_add_slave_index(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.lidar_velodyne.FusionConf.slave_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FusionConf::_internal_slave_index() const {
  return _impl_.slave_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FusionConf::slave_index() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.lidar_velodyne.FusionConf.slave_index)
  return _internal_slave_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FusionConf::_internal_mutable_slave_index() {
  return &_impl_.slave_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FusionConf::mutable_slave_index() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.lidar_velodyne.FusionConf.slave_index)
  return _internal_mutable_slave_index();
}

// -------------------------------------------------------------------

// VelodyneConfUnit

// repeated .apollo.drivers.lidar_velodyne.VelodyneConf conf = 1;
inline int VelodyneConfUnit::_internal_conf_size() const {
  return _impl_.conf_.size();
}
inline int VelodyneConfUnit::conf_size() const {
  return _internal_conf_size();
}
inline void VelodyneConfUnit::clear_conf() {
  _impl_.conf_.Clear();
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneConfUnit::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return _impl_.conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::lidar_velodyne::VelodyneConf >*
VelodyneConfUnit::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return &_impl_.conf_;
}
inline const ::apollo::drivers::lidar_velodyne::VelodyneConf& VelodyneConfUnit::_internal_conf(int index) const {
  return _impl_.conf_.Get(index);
}
inline const ::apollo::drivers::lidar_velodyne::VelodyneConf& VelodyneConfUnit::conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return _internal_conf(index);
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneConfUnit::_internal_add_conf() {
  return _impl_.conf_.Add();
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneConfUnit::add_conf() {
  ::apollo::drivers::lidar_velodyne::VelodyneConf* _add = _internal_add_conf();
  // @@protoc_insertion_point(field_add:apollo.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::lidar_velodyne::VelodyneConf >&
VelodyneConfUnit::conf() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.lidar_velodyne.VelodyneConfUnit.conf)
  return _impl_.conf_;
}

// optional bool is_fusion = 2 [default = false];
inline bool VelodyneConfUnit::_internal_has_is_fusion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VelodyneConfUnit::has_is_fusion() const {
  return _internal_has_is_fusion();
}
inline void VelodyneConfUnit::clear_is_fusion() {
  _impl_.is_fusion_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool VelodyneConfUnit::_internal_is_fusion() const {
  return _impl_.is_fusion_;
}
inline bool VelodyneConfUnit::is_fusion() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConfUnit.is_fusion)
  return _internal_is_fusion();
}
inline void VelodyneConfUnit::_internal_set_is_fusion(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_fusion_ = value;
}
inline void VelodyneConfUnit::set_is_fusion(bool value) {
  _internal_set_is_fusion(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneConfUnit.is_fusion)
}

// optional .apollo.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
inline bool VelodyneConfUnit::_internal_has_fusion_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fusion_conf_ != nullptr);
  return value;
}
inline bool VelodyneConfUnit::has_fusion_conf() const {
  return _internal_has_fusion_conf();
}
inline void VelodyneConfUnit::clear_fusion_conf() {
  if (_impl_.fusion_conf_ != nullptr) _impl_.fusion_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::drivers::lidar_velodyne::FusionConf& VelodyneConfUnit::_internal_fusion_conf() const {
  const ::apollo::drivers::lidar_velodyne::FusionConf* p = _impl_.fusion_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::lidar_velodyne::FusionConf&>(
      ::apollo::drivers::lidar_velodyne::_FusionConf_default_instance_);
}
inline const ::apollo::drivers::lidar_velodyne::FusionConf& VelodyneConfUnit::fusion_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  return _internal_fusion_conf();
}
inline void VelodyneConfUnit::unsafe_arena_set_allocated_fusion_conf(
    ::apollo::drivers::lidar_velodyne::FusionConf* fusion_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fusion_conf_);
  }
  _impl_.fusion_conf_ = fusion_conf;
  if (fusion_conf) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
}
inline ::apollo::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::release_fusion_conf() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::lidar_velodyne::FusionConf* temp = _impl_.fusion_conf_;
  _impl_.fusion_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::unsafe_arena_release_fusion_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::lidar_velodyne::FusionConf* temp = _impl_.fusion_conf_;
  _impl_.fusion_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::_internal_mutable_fusion_conf() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fusion_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::lidar_velodyne::FusionConf>(GetArenaForAllocation());
    _impl_.fusion_conf_ = p;
  }
  return _impl_.fusion_conf_;
}
inline ::apollo::drivers::lidar_velodyne::FusionConf* VelodyneConfUnit::mutable_fusion_conf() {
  ::apollo::drivers::lidar_velodyne::FusionConf* _msg = _internal_mutable_fusion_conf();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
  return _msg;
}
inline void VelodyneConfUnit::set_allocated_fusion_conf(::apollo::drivers::lidar_velodyne::FusionConf* fusion_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fusion_conf_;
  }
  if (fusion_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fusion_conf);
    if (message_arena != submessage_arena) {
      fusion_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fusion_conf_ = fusion_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneConfUnit.fusion_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::lidar_velodyne::VelodyneModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::lidar_velodyne::VelodyneModel>() {
  return ::apollo::drivers::lidar_velodyne::VelodyneModel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto
