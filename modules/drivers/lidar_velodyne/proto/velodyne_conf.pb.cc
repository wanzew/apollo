// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/proto/velodyne_conf.proto

#include "modules/drivers/lidar_velodyne/proto/velodyne_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace lidar_velodyne {
PROTOBUF_CONSTEXPR VelodyneConf::VelodyneConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibration_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_frame_id_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.npackets_)*/0
  , /*decltype(_impl_.calibration_online_)*/false
  , /*decltype(_impl_.organized_)*/false
  , /*decltype(_impl_.min_angle_)*/0
  , /*decltype(_impl_.max_angle_)*/0
  , /*decltype(_impl_.view_direction_)*/0
  , /*decltype(_impl_.firing_data_port_)*/2368u
  , /*decltype(_impl_.positioning_data_port_)*/8308u
  , /*decltype(_impl_.rpm_)*/600
  , /*decltype(_impl_.cache_size_)*/1
  , /*decltype(_impl_.packet_rate_)*/754
  , /*decltype(_impl_.max_range_)*/130
  , /*decltype(_impl_.min_range_)*/0.9
  , /*decltype(_impl_.view_width_)*/6.2831853071795862
  , /*decltype(_impl_.tf_query_timeout_)*/0.1} {}
struct VelodyneConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelodyneConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelodyneConfDefaultTypeInternal() {}
  union {
    VelodyneConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelodyneConfDefaultTypeInternal _VelodyneConf_default_instance_;
PROTOBUF_CONSTEXPR FusionConf::FusionConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slave_index_)*/{}
  , /*decltype(_impl_.major_index_)*/0u} {}
struct FusionConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FusionConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FusionConfDefaultTypeInternal() {}
  union {
    FusionConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FusionConfDefaultTypeInternal _FusionConf_default_instance_;
PROTOBUF_CONSTEXPR VelodyneConfUnit::VelodyneConfUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conf_)*/{}
  , /*decltype(_impl_.fusion_conf_)*/nullptr
  , /*decltype(_impl_.is_fusion_)*/false} {}
struct VelodyneConfUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelodyneConfUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelodyneConfUnitDefaultTypeInternal() {}
  union {
    VelodyneConfUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelodyneConfUnitDefaultTypeInternal _VelodyneConfUnit_default_instance_;
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.firing_data_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.positioning_data_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.npackets_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.cache_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.packet_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.max_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.min_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.min_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.max_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.view_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.view_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.calibration_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.organized_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.calibration_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConf, _impl_.tf_query_timeout_),
  4,
  0,
  1,
  12,
  13,
  14,
  5,
  6,
  15,
  16,
  17,
  18,
  9,
  10,
  11,
  19,
  7,
  8,
  2,
  3,
  20,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::FusionConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::FusionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::FusionConf, _impl_.major_index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::FusionConf, _impl_.slave_index_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConfUnit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConfUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConfUnit, _impl_.conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConfUnit, _impl_.is_fusion_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneConfUnit, _impl_.fusion_conf_),
  ~0u,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, -1, sizeof(::apollo::drivers::lidar_velodyne::VelodyneConf)},
  { 48, 56, -1, sizeof(::apollo::drivers::lidar_velodyne::FusionConf)},
  { 58, 67, -1, sizeof(::apollo::drivers::lidar_velodyne::VelodyneConfUnit)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::lidar_velodyne::_VelodyneConf_default_instance_._instance,
  &::apollo::drivers::lidar_velodyne::_FusionConf_default_instance_._instance,
  &::apollo::drivers::lidar_velodyne::_VelodyneConfUnit_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/drivers/lidar_velodyne/proto/v"
  "elodyne_conf.proto\022\035apollo.drivers.lidar"
  "_velodyne\"\337\004\n\014VelodyneConf\022\020\n\005index\030\001 \002("
  "\r:\0010\022\030\n\010position\030\002 \001(\t:\006centre\022\020\n\010frame_"
  "id\030\003 \001(\t\022\036\n\020firing_data_port\030\004 \001(\r:\0042368"
  "\022#\n\025positioning_data_port\030\005 \001(\r:\0048308\022\020\n"
  "\003rpm\030\006 \001(\001:\003600\022B\n\005model\030\007 \001(\0162,.apollo."
  "drivers.lidar_velodyne.VelodyneModel:\005VL"
  "P16\022\020\n\010npackets\030\010 \001(\005\022\025\n\ncache_size\030\t \001("
  "\005:\0011\022\030\n\013packet_rate\030\n \001(\005:\003754\022\026\n\tmax_ra"
  "nge\030d \001(\001:\003130\022\026\n\tmin_range\030e \001(\001:\0030.9\022\021"
  "\n\tmin_angle\030f \001(\001\022\021\n\tmax_angle\030g \001(\001\022\031\n\016"
  "view_direction\030h \001(\001:\0010\022&\n\nview_width\030i "
  "\001(\001:\0226.2831853071795862\022!\n\022calibration_o"
  "nline\030j \001(\010:\005false\022\030\n\torganized\030k \001(\010:\005f"
  "alse\022\030\n\020calibration_file\030l \001(\t\022#\n\016child_"
  "frame_id\030\310\001 \001(\t:\nvelodyne16\022\036\n\020tf_query_"
  "timeout\030\311\001 \001(\001:\0030.1\"9\n\nFusionConf\022\026\n\013maj"
  "or_index\030\001 \002(\r:\0010\022\023\n\013slave_index\030\002 \003(\r\"\247"
  "\001\n\020VelodyneConfUnit\0229\n\004conf\030\001 \003(\0132+.apol"
  "lo.drivers.lidar_velodyne.VelodyneConf\022\030"
  "\n\tis_fusion\030\002 \001(\010:\005false\022>\n\013fusion_conf\030"
  "\003 \001(\0132).apollo.drivers.lidar_velodyne.Fu"
  "sionConf*s\n\rVelodyneModel\022\t\n\005VLP16\020\000\022\013\n\007"
  "V64E_S2\020\001\022\014\n\010V64E_S3S\020\002\022\026\n\022V64E_S3D_STRO"
  "NGEST\020\003\022\021\n\rV64E_S3D_LAST\020\004\022\021\n\rV64E_S3D_D"
  "UAL\020\005"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto = {
    false, false, 1045, descriptor_table_protodef_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto,
    "modules/drivers/lidar_velodyne/proto/velodyne_conf.proto",
    &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto(&descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto);
namespace apollo {
namespace drivers {
namespace lidar_velodyne {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VelodyneModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[0];
}
bool VelodyneModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VelodyneConf::_Internal {
 public:
  using HasBits = decltype(std::declval<VelodyneConf>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_firing_data_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_positioning_data_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_npackets(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_packet_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_range(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_min_range(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_min_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_view_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_calibration_online(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_organized(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_calibration_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tf_query_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_position_{{{"centre", 6}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_{{{"velodyne16", 10}}, {nullptr}};
VelodyneConf::VelodyneConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.lidar_velodyne.VelodyneConf)
}
VelodyneConf::VelodyneConf(const VelodyneConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.child_frame_id_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.npackets_){}
    , decltype(_impl_.calibration_online_){}
    , decltype(_impl_.organized_){}
    , decltype(_impl_.min_angle_){}
    , decltype(_impl_.max_angle_){}
    , decltype(_impl_.view_direction_){}
    , decltype(_impl_.firing_data_port_){}
    , decltype(_impl_.positioning_data_port_){}
    , decltype(_impl_.rpm_){}
    , decltype(_impl_.cache_size_){}
    , decltype(_impl_.packet_rate_){}
    , decltype(_impl_.max_range_){}
    , decltype(_impl_.min_range_){}
    , decltype(_impl_.view_width_){}
    , decltype(_impl_.tf_query_timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.position_.InitDefault();
  if (from._internal_has_position()) {
    _impl_.position_.Set(from._internal_position(), 
      GetArenaForAllocation());
  }
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calibration_file()) {
    _impl_.calibration_file_.Set(from._internal_calibration_file(), 
      GetArenaForAllocation());
  }
  _impl_.child_frame_id_.InitDefault();
  if (from._internal_has_child_frame_id()) {
    _impl_.child_frame_id_.Set(from._internal_child_frame_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tf_query_timeout_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.tf_query_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.lidar_velodyne.VelodyneConf)
}

inline void VelodyneConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.child_frame_id_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.npackets_){0}
    , decltype(_impl_.calibration_online_){false}
    , decltype(_impl_.organized_){false}
    , decltype(_impl_.min_angle_){0}
    , decltype(_impl_.max_angle_){0}
    , decltype(_impl_.view_direction_){0}
    , decltype(_impl_.firing_data_port_){2368u}
    , decltype(_impl_.positioning_data_port_){8308u}
    , decltype(_impl_.rpm_){600}
    , decltype(_impl_.cache_size_){1}
    , decltype(_impl_.packet_rate_){754}
    , decltype(_impl_.max_range_){130}
    , decltype(_impl_.min_range_){0.9}
    , decltype(_impl_.view_width_){6.2831853071795862}
    , decltype(_impl_.tf_query_timeout_){0.1}
  };
  _impl_.position_.InitDefault();
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.child_frame_id_.InitDefault();
}

VelodyneConf::~VelodyneConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.lidar_velodyne.VelodyneConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VelodyneConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_.Destroy();
  _impl_.frame_id_.Destroy();
  _impl_.calibration_file_.Destroy();
  _impl_.child_frame_id_.Destroy();
}

void VelodyneConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VelodyneConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.lidar_velodyne.VelodyneConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.position_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_position_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.calibration_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.child_frame_id_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.calibration_online_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.calibration_online_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.organized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.view_direction_) -
        reinterpret_cast<char*>(&_impl_.organized_)) + sizeof(_impl_.view_direction_));
    _impl_.firing_data_port_ = 2368u;
    _impl_.positioning_data_port_ = 8308u;
    _impl_.rpm_ = 600;
    _impl_.cache_size_ = 1;
  }
  if (cached_has_bits & 0x001f0000u) {
    _impl_.packet_rate_ = 754;
    _impl_.max_range_ = 130;
    _impl_.min_range_ = 0.9;
    _impl_.view_width_ = 6.2831853071795862;
    _impl_.tf_query_timeout_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelodyneConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string position = 2 [default = "centre"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_position();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneConf.position");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneConf.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firing_data_port = 4 [default = 2368];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_firing_data_port(&has_bits);
          _impl_.firing_data_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 positioning_data_port = 5 [default = 8308];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_positioning_data_port(&has_bits);
          _impl_.positioning_data_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rpm = 6 [default = 600];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_rpm(&has_bits);
          _impl_.rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::lidar_velodyne::VelodyneModel_IsValid(val))) {
            _internal_set_model(static_cast<::apollo::drivers::lidar_velodyne::VelodyneModel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 npackets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_npackets(&has_bits);
          _impl_.npackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cache_size = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cache_size(&has_bits);
          _impl_.cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 packet_rate = 10 [default = 754];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_packet_rate(&has_bits);
          _impl_.packet_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_range = 100 [default = 130];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_range(&has_bits);
          _impl_.max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_range = 101 [default = 0.9];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_min_range(&has_bits);
          _impl_.min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_angle = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_min_angle(&has_bits);
          _impl_.min_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_angle = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_max_angle(&has_bits);
          _impl_.max_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_direction = 104 [default = 0];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_view_direction(&has_bits);
          _impl_.view_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_width = 105 [default = 6.2831853071795862];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_view_width(&has_bits);
          _impl_.view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool calibration_online = 106 [default = false];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_calibration_online(&has_bits);
          _impl_.calibration_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool organized = 107 [default = false];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_organized(&has_bits);
          _impl_.organized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calibration_file = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_calibration_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string child_frame_id = 200 [default = "velodyne16"];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_child_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double tf_query_timeout = 201 [default = 0.1];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_tf_query_timeout(&has_bits);
          _impl_.tf_query_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VelodyneConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.lidar_velodyne.VelodyneConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 index = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional string position = 2 [default = "centre"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_position().data(), static_cast<int>(this->_internal_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneConf.position");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_position(), target);
  }

  // optional string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneConf.frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_id(), target);
  }

  // optional uint32 firing_data_port = 4 [default = 2368];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_firing_data_port(), target);
  }

  // optional uint32 positioning_data_port = 5 [default = 8308];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_positioning_data_port(), target);
  }

  // optional double rpm = 6 [default = 600];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_rpm(), target);
  }

  // optional .apollo.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_model(), target);
  }

  // optional int32 npackets = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_npackets(), target);
  }

  // optional int32 cache_size = 9 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_cache_size(), target);
  }

  // optional int32 packet_rate = 10 [default = 754];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_packet_rate(), target);
  }

  // optional double max_range = 100 [default = 130];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(100, this->_internal_max_range(), target);
  }

  // optional double min_range = 101 [default = 0.9];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(101, this->_internal_min_range(), target);
  }

  // optional double min_angle = 102;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(102, this->_internal_min_angle(), target);
  }

  // optional double max_angle = 103;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(103, this->_internal_max_angle(), target);
  }

  // optional double view_direction = 104 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(104, this->_internal_view_direction(), target);
  }

  // optional double view_width = 105 [default = 6.2831853071795862];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(105, this->_internal_view_width(), target);
  }

  // optional bool calibration_online = 106 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(106, this->_internal_calibration_online(), target);
  }

  // optional bool organized = 107 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(107, this->_internal_organized(), target);
  }

  // optional string calibration_file = 108;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_file().data(), static_cast<int>(this->_internal_calibration_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneConf.calibration_file");
    target = stream->WriteStringMaybeAliased(
        108, this->_internal_calibration_file(), target);
  }

  // optional string child_frame_id = 200 [default = "velodyne16"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_child_frame_id().data(), static_cast<int>(this->_internal_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneConf.child_frame_id");
    target = stream->WriteStringMaybeAliased(
        200, this->_internal_child_frame_id(), target);
  }

  // optional double tf_query_timeout = 201 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(201, this->_internal_tf_query_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.lidar_velodyne.VelodyneConf)
  return target;
}

size_t VelodyneConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.lidar_velodyne.VelodyneConf)
  size_t total_size = 0;

  // required uint32 index = 1 [default = 0];
  if (_internal_has_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string position = 2 [default = "centre"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_position());
    }

    // optional string frame_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string calibration_file = 108;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_file());
    }

    // optional string child_frame_id = 200 [default = "velodyne16"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_child_frame_id());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .apollo.drivers.lidar_velodyne.VelodyneModel model = 7 [default = VLP16];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
    }

    // optional int32 npackets = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_npackets());
    }

    // optional bool calibration_online = 106 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool organized = 107 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional double min_angle = 102;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double max_angle = 103;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double view_direction = 104 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional uint32 firing_data_port = 4 [default = 2368];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firing_data_port());
    }

    // optional uint32 positioning_data_port = 5 [default = 8308];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_positioning_data_port());
    }

    // optional double rpm = 6 [default = 600];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 cache_size = 9 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cache_size());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 packet_rate = 10 [default = 754];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packet_rate());
    }

    // optional double max_range = 100 [default = 130];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double min_range = 101 [default = 0.9];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double view_width = 105 [default = 6.2831853071795862];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double tf_query_timeout = 201 [default = 0.1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VelodyneConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VelodyneConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VelodyneConf::GetClassData() const { return &_class_data_; }

void VelodyneConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VelodyneConf *>(to)->MergeFrom(
      static_cast<const VelodyneConf &>(from));
}


void VelodyneConf::MergeFrom(const VelodyneConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.lidar_velodyne.VelodyneConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_position(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_calibration_file(from._internal_calibration_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_child_frame_id(from._internal_child_frame_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.model_ = from._impl_.model_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.npackets_ = from._impl_.npackets_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.calibration_online_ = from._impl_.calibration_online_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.organized_ = from._impl_.organized_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.min_angle_ = from._impl_.min_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.max_angle_ = from._impl_.max_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.view_direction_ = from._impl_.view_direction_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.firing_data_port_ = from._impl_.firing_data_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.positioning_data_port_ = from._impl_.positioning_data_port_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.rpm_ = from._impl_.rpm_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.cache_size_ = from._impl_.cache_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.packet_rate_ = from._impl_.packet_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.max_range_ = from._impl_.max_range_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.min_range_ = from._impl_.min_range_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.view_width_ = from._impl_.view_width_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.tf_query_timeout_ = from._impl_.tf_query_timeout_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VelodyneConf::CopyFrom(const VelodyneConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.lidar_velodyne.VelodyneConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneConf::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void VelodyneConf::InternalSwap(VelodyneConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_, lhs_arena,
      &other->_impl_.position_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibration_file_, lhs_arena,
      &other->_impl_.calibration_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_frame_id_, lhs_arena,
      &other->_impl_.child_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelodyneConf, _impl_.view_direction_)
      + sizeof(VelodyneConf::_impl_.view_direction_)
      - PROTOBUF_FIELD_OFFSET(VelodyneConf, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
  swap(_impl_.firing_data_port_, other->_impl_.firing_data_port_);
  swap(_impl_.positioning_data_port_, other->_impl_.positioning_data_port_);
  swap(_impl_.rpm_, other->_impl_.rpm_);
  swap(_impl_.cache_size_, other->_impl_.cache_size_);
  swap(_impl_.packet_rate_, other->_impl_.packet_rate_);
  swap(_impl_.max_range_, other->_impl_.max_range_);
  swap(_impl_.min_range_, other->_impl_.min_range_);
  swap(_impl_.view_width_, other->_impl_.view_width_);
  swap(_impl_.tf_query_timeout_, other->_impl_.tf_query_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelodyneConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[0]);
}

// ===================================================================

class FusionConf::_Internal {
 public:
  using HasBits = decltype(std::declval<FusionConf>()._impl_._has_bits_);
  static void set_has_major_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FusionConf::FusionConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.lidar_velodyne.FusionConf)
}
FusionConf::FusionConf(const FusionConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slave_index_){from._impl_.slave_index_}
    , decltype(_impl_.major_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.major_index_ = from._impl_.major_index_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.lidar_velodyne.FusionConf)
}

inline void FusionConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slave_index_){arena}
    , decltype(_impl_.major_index_){0u}
  };
}

FusionConf::~FusionConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.lidar_velodyne.FusionConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FusionConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slave_index_.~RepeatedField();
}

void FusionConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FusionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.lidar_velodyne.FusionConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slave_index_.Clear();
  _impl_.major_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 major_index = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_major_index(&has_bits);
          _impl_.major_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 slave_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_slave_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slave_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.lidar_velodyne.FusionConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 major_index = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major_index(), target);
  }

  // repeated uint32 slave_index = 2;
  for (int i = 0, n = this->_internal_slave_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slave_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.lidar_velodyne.FusionConf)
  return target;
}

size_t FusionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.lidar_velodyne.FusionConf)
  size_t total_size = 0;

  // required uint32 major_index = 1 [default = 0];
  if (_internal_has_major_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 slave_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.slave_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_slave_index_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionConf::GetClassData() const { return &_class_data_; }

void FusionConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionConf *>(to)->MergeFrom(
      static_cast<const FusionConf &>(from));
}


void FusionConf::MergeFrom(const FusionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.lidar_velodyne.FusionConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.slave_index_.MergeFrom(from._impl_.slave_index_);
  if (from._internal_has_major_index()) {
    _internal_set_major_index(from._internal_major_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionConf::CopyFrom(const FusionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.lidar_velodyne.FusionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionConf::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FusionConf::InternalSwap(FusionConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slave_index_.InternalSwap(&other->_impl_.slave_index_);
  swap(_impl_.major_index_, other->_impl_.major_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[1]);
}

// ===================================================================

class VelodyneConfUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<VelodyneConfUnit>()._impl_._has_bits_);
  static void set_has_is_fusion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::lidar_velodyne::FusionConf& fusion_conf(const VelodyneConfUnit* msg);
  static void set_has_fusion_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::drivers::lidar_velodyne::FusionConf&
VelodyneConfUnit::_Internal::fusion_conf(const VelodyneConfUnit* msg) {
  return *msg->_impl_.fusion_conf_;
}
VelodyneConfUnit::VelodyneConfUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
}
VelodyneConfUnit::VelodyneConfUnit(const VelodyneConfUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conf_){from._impl_.conf_}
    , decltype(_impl_.fusion_conf_){nullptr}
    , decltype(_impl_.is_fusion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fusion_conf()) {
    _impl_.fusion_conf_ = new ::apollo::drivers::lidar_velodyne::FusionConf(*from._impl_.fusion_conf_);
  }
  _impl_.is_fusion_ = from._impl_.is_fusion_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
}

inline void VelodyneConfUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conf_){arena}
    , decltype(_impl_.fusion_conf_){nullptr}
    , decltype(_impl_.is_fusion_){false}
  };
}

VelodyneConfUnit::~VelodyneConfUnit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VelodyneConfUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conf_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.fusion_conf_;
}

void VelodyneConfUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VelodyneConfUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conf_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fusion_conf_ != nullptr);
    _impl_.fusion_conf_->Clear();
  }
  _impl_.is_fusion_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelodyneConfUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.drivers.lidar_velodyne.VelodyneConf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_fusion = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_fusion(&has_bits);
          _impl_.is_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fusion_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VelodyneConfUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.drivers.lidar_velodyne.VelodyneConf conf = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conf_size()); i < n; i++) {
    const auto& repfield = this->_internal_conf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_fusion = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_fusion(), target);
  }

  // optional .apollo.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fusion_conf(this),
        _Internal::fusion_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  return target;
}

size_t VelodyneConfUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.lidar_velodyne.VelodyneConf conf = 1;
  total_size += 1UL * this->_internal_conf_size();
  for (const auto& msg : this->_impl_.conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.drivers.lidar_velodyne.FusionConf fusion_conf = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fusion_conf_);
    }

    // optional bool is_fusion = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VelodyneConfUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VelodyneConfUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VelodyneConfUnit::GetClassData() const { return &_class_data_; }

void VelodyneConfUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VelodyneConfUnit *>(to)->MergeFrom(
      static_cast<const VelodyneConfUnit &>(from));
}


void VelodyneConfUnit::MergeFrom(const VelodyneConfUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.conf_.MergeFrom(from._impl_.conf_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fusion_conf()->::apollo::drivers::lidar_velodyne::FusionConf::MergeFrom(from._internal_fusion_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_fusion_ = from._impl_.is_fusion_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VelodyneConfUnit::CopyFrom(const VelodyneConfUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.lidar_velodyne.VelodyneConfUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneConfUnit::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.conf_))
    return false;
  if (_internal_has_fusion_conf()) {
    if (!_impl_.fusion_conf_->IsInitialized()) return false;
  }
  return true;
}

void VelodyneConfUnit::InternalSwap(VelodyneConfUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.conf_.InternalSwap(&other->_impl_.conf_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelodyneConfUnit, _impl_.is_fusion_)
      + sizeof(VelodyneConfUnit::_impl_.is_fusion_)
      - PROTOBUF_FIELD_OFFSET(VelodyneConfUnit, _impl_.fusion_conf_)>(
          reinterpret_cast<char*>(&_impl_.fusion_conf_),
          reinterpret_cast<char*>(&other->_impl_.fusion_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelodyneConfUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::lidar_velodyne::VelodyneConf*
Arena::CreateMaybeMessage< ::apollo::drivers::lidar_velodyne::VelodyneConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::lidar_velodyne::VelodyneConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::lidar_velodyne::FusionConf*
Arena::CreateMaybeMessage< ::apollo::drivers::lidar_velodyne::FusionConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::lidar_velodyne::FusionConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::lidar_velodyne::VelodyneConfUnit*
Arena::CreateMaybeMessage< ::apollo::drivers::lidar_velodyne::VelodyneConfUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::lidar_velodyne::VelodyneConfUnit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
