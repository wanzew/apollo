// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/lidar_velodyne/proto/velodyne_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto;
namespace apollo {
namespace drivers {
namespace lidar_velodyne {
class VelodyneToolsConf;
struct VelodyneToolsConfDefaultTypeInternal;
extern VelodyneToolsConfDefaultTypeInternal _VelodyneToolsConf_default_instance_;
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::lidar_velodyne::VelodyneToolsConf* Arena::CreateMaybeMessage<::apollo::drivers::lidar_velodyne::VelodyneToolsConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace lidar_velodyne {

// ===================================================================

class VelodyneToolsConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.lidar_velodyne.VelodyneToolsConf) */ {
 public:
  inline VelodyneToolsConf() : VelodyneToolsConf(nullptr) {}
  ~VelodyneToolsConf() override;
  explicit PROTOBUF_CONSTEXPR VelodyneToolsConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VelodyneToolsConf(const VelodyneToolsConf& from);
  VelodyneToolsConf(VelodyneToolsConf&& from) noexcept
    : VelodyneToolsConf() {
    *this = ::std::move(from);
  }

  inline VelodyneToolsConf& operator=(const VelodyneToolsConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelodyneToolsConf& operator=(VelodyneToolsConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelodyneToolsConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelodyneToolsConf* internal_default_instance() {
    return reinterpret_cast<const VelodyneToolsConf*>(
               &_VelodyneToolsConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VelodyneToolsConf& a, VelodyneToolsConf& b) {
    a.Swap(&b);
  }
  inline void Swap(VelodyneToolsConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelodyneToolsConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelodyneToolsConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VelodyneToolsConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VelodyneToolsConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VelodyneToolsConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelodyneToolsConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.lidar_velodyne.VelodyneToolsConf";
  }
  protected:
  explicit VelodyneToolsConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcdFolderFieldNumber = 1,
    kStampFileFieldNumber = 2,
    kPoseFileFieldNumber = 3,
    kChildFrameIdFieldNumber = 5,
    kSaveFolderFieldNumber = 7,
    kFilePrefixFieldNumber = 8,
    kModuleConfFieldNumber = 101,
    kSkipStaticFramesFieldNumber = 4,
    kUseSeqFieldNumber = 6,
  };
  // optional string pcd_folder = 1;
  bool has_pcd_folder() const;
  private:
  bool _internal_has_pcd_folder() const;
  public:
  void clear_pcd_folder();
  const std::string& pcd_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcd_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcd_folder();
  PROTOBUF_NODISCARD std::string* release_pcd_folder();
  void set_allocated_pcd_folder(std::string* pcd_folder);
  private:
  const std::string& _internal_pcd_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcd_folder(const std::string& value);
  std::string* _internal_mutable_pcd_folder();
  public:

  // optional string stamp_file = 2;
  bool has_stamp_file() const;
  private:
  bool _internal_has_stamp_file() const;
  public:
  void clear_stamp_file();
  const std::string& stamp_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stamp_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stamp_file();
  PROTOBUF_NODISCARD std::string* release_stamp_file();
  void set_allocated_stamp_file(std::string* stamp_file);
  private:
  const std::string& _internal_stamp_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stamp_file(const std::string& value);
  std::string* _internal_mutable_stamp_file();
  public:

  // optional string pose_file = 3;
  bool has_pose_file() const;
  private:
  bool _internal_has_pose_file() const;
  public:
  void clear_pose_file();
  const std::string& pose_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose_file();
  PROTOBUF_NODISCARD std::string* release_pose_file();
  void set_allocated_pose_file(std::string* pose_file);
  private:
  const std::string& _internal_pose_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose_file(const std::string& value);
  std::string* _internal_mutable_pose_file();
  public:

  // optional string child_frame_id = 5 [default = "velodyne"];
  bool has_child_frame_id() const;
  private:
  bool _internal_has_child_frame_id() const;
  public:
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // optional string save_folder = 7;
  bool has_save_folder() const;
  private:
  bool _internal_has_save_folder() const;
  public:
  void clear_save_folder();
  const std::string& save_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_folder();
  PROTOBUF_NODISCARD std::string* release_save_folder();
  void set_allocated_save_folder(std::string* save_folder);
  private:
  const std::string& _internal_save_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_folder(const std::string& value);
  std::string* _internal_mutable_save_folder();
  public:

  // optional string file_prefix = 8;
  bool has_file_prefix() const;
  private:
  bool _internal_has_file_prefix() const;
  public:
  void clear_file_prefix();
  const std::string& file_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_prefix();
  PROTOBUF_NODISCARD std::string* release_file_prefix();
  void set_allocated_file_prefix(std::string* file_prefix);
  private:
  const std::string& _internal_file_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_prefix(const std::string& value);
  std::string* _internal_mutable_file_prefix();
  public:

  // optional .apollo.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
  bool has_module_conf() const;
  private:
  bool _internal_has_module_conf() const;
  public:
  void clear_module_conf();
  const ::apollo::drivers::lidar_velodyne::VelodyneConf& module_conf() const;
  PROTOBUF_NODISCARD ::apollo::drivers::lidar_velodyne::VelodyneConf* release_module_conf();
  ::apollo::drivers::lidar_velodyne::VelodyneConf* mutable_module_conf();
  void set_allocated_module_conf(::apollo::drivers::lidar_velodyne::VelodyneConf* module_conf);
  private:
  const ::apollo::drivers::lidar_velodyne::VelodyneConf& _internal_module_conf() const;
  ::apollo::drivers::lidar_velodyne::VelodyneConf* _internal_mutable_module_conf();
  public:
  void unsafe_arena_set_allocated_module_conf(
      ::apollo::drivers::lidar_velodyne::VelodyneConf* module_conf);
  ::apollo::drivers::lidar_velodyne::VelodyneConf* unsafe_arena_release_module_conf();

  // optional bool skip_static_frames = 4 [default = false];
  bool has_skip_static_frames() const;
  private:
  bool _internal_has_skip_static_frames() const;
  public:
  void clear_skip_static_frames();
  bool skip_static_frames() const;
  void set_skip_static_frames(bool value);
  private:
  bool _internal_skip_static_frames() const;
  void _internal_set_skip_static_frames(bool value);
  public:

  // optional bool use_seq = 6 [default = false];
  bool has_use_seq() const;
  private:
  bool _internal_has_use_seq() const;
  public:
  void clear_use_seq();
  bool use_seq() const;
  void set_use_seq(bool value);
  private:
  bool _internal_use_seq() const;
  void _internal_set_use_seq(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcd_folder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stamp_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_file_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_folder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_prefix_;
    ::apollo::drivers::lidar_velodyne::VelodyneConf* module_conf_;
    bool skip_static_frames_;
    bool use_seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VelodyneToolsConf

// optional string pcd_folder = 1;
inline bool VelodyneToolsConf::_internal_has_pcd_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_pcd_folder() const {
  return _internal_has_pcd_folder();
}
inline void VelodyneToolsConf::clear_pcd_folder() {
  _impl_.pcd_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VelodyneToolsConf::pcd_folder() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  return _internal_pcd_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_pcd_folder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pcd_folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}
inline std::string* VelodyneToolsConf::mutable_pcd_folder() {
  std::string* _s = _internal_mutable_pcd_folder();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_pcd_folder() const {
  return _impl_.pcd_folder_.Get();
}
inline void VelodyneToolsConf::_internal_set_pcd_folder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pcd_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_pcd_folder() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pcd_folder_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_pcd_folder() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
  if (!_internal_has_pcd_folder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pcd_folder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pcd_folder_.IsDefault()) {
    _impl_.pcd_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneToolsConf::set_allocated_pcd_folder(std::string* pcd_folder) {
  if (pcd_folder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pcd_folder_.SetAllocated(pcd_folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pcd_folder_.IsDefault()) {
    _impl_.pcd_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder)
}

// optional string stamp_file = 2;
inline bool VelodyneToolsConf::_internal_has_stamp_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_stamp_file() const {
  return _internal_has_stamp_file();
}
inline void VelodyneToolsConf::clear_stamp_file() {
  _impl_.stamp_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VelodyneToolsConf::stamp_file() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  return _internal_stamp_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_stamp_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.stamp_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}
inline std::string* VelodyneToolsConf::mutable_stamp_file() {
  std::string* _s = _internal_mutable_stamp_file();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_stamp_file() const {
  return _impl_.stamp_file_.Get();
}
inline void VelodyneToolsConf::_internal_set_stamp_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stamp_file_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_stamp_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.stamp_file_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_stamp_file() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
  if (!_internal_has_stamp_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.stamp_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stamp_file_.IsDefault()) {
    _impl_.stamp_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneToolsConf::set_allocated_stamp_file(std::string* stamp_file) {
  if (stamp_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stamp_file_.SetAllocated(stamp_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stamp_file_.IsDefault()) {
    _impl_.stamp_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file)
}

// optional string pose_file = 3;
inline bool VelodyneToolsConf::_internal_has_pose_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_pose_file() const {
  return _internal_has_pose_file();
}
inline void VelodyneToolsConf::clear_pose_file() {
  _impl_.pose_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VelodyneToolsConf::pose_file() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  return _internal_pose_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_pose_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.pose_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}
inline std::string* VelodyneToolsConf::mutable_pose_file() {
  std::string* _s = _internal_mutable_pose_file();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_pose_file() const {
  return _impl_.pose_file_.Get();
}
inline void VelodyneToolsConf::_internal_set_pose_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pose_file_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_pose_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.pose_file_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_pose_file() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
  if (!_internal_has_pose_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.pose_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_file_.IsDefault()) {
    _impl_.pose_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneToolsConf::set_allocated_pose_file(std::string* pose_file) {
  if (pose_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pose_file_.SetAllocated(pose_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_file_.IsDefault()) {
    _impl_.pose_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file)
}

// optional bool skip_static_frames = 4 [default = false];
inline bool VelodyneToolsConf::_internal_has_skip_static_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_skip_static_frames() const {
  return _internal_has_skip_static_frames();
}
inline void VelodyneToolsConf::clear_skip_static_frames() {
  _impl_.skip_static_frames_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool VelodyneToolsConf::_internal_skip_static_frames() const {
  return _impl_.skip_static_frames_;
}
inline bool VelodyneToolsConf::skip_static_frames() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.skip_static_frames)
  return _internal_skip_static_frames();
}
inline void VelodyneToolsConf::_internal_set_skip_static_frames(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.skip_static_frames_ = value;
}
inline void VelodyneToolsConf::set_skip_static_frames(bool value) {
  _internal_set_skip_static_frames(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.skip_static_frames)
}

// optional string child_frame_id = 5 [default = "velodyne"];
inline bool VelodyneToolsConf::_internal_has_child_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_child_frame_id() const {
  return _internal_has_child_frame_id();
}
inline void VelodyneToolsConf::clear_child_frame_id() {
  _impl_.child_frame_id_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneToolsConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VelodyneToolsConf::child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  if (_impl_.child_frame_id_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_.get();
  return _internal_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_child_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}
inline std::string* VelodyneToolsConf::mutable_child_frame_id() {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_child_frame_id() const {
  return _impl_.child_frame_id_.Get();
}
inline void VelodyneToolsConf::_internal_set_child_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_child_frame_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.child_frame_id_.Mutable(::apollo::drivers::lidar_velodyne::VelodyneToolsConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
  if (!_internal_has_child_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.child_frame_id_.Release();
  return p;
}
inline void VelodyneToolsConf::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.child_frame_id_.SetAllocated(child_frame_id, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id)
}

// optional bool use_seq = 6 [default = false];
inline bool VelodyneToolsConf::_internal_has_use_seq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_use_seq() const {
  return _internal_has_use_seq();
}
inline void VelodyneToolsConf::clear_use_seq() {
  _impl_.use_seq_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool VelodyneToolsConf::_internal_use_seq() const {
  return _impl_.use_seq_;
}
inline bool VelodyneToolsConf::use_seq() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.use_seq)
  return _internal_use_seq();
}
inline void VelodyneToolsConf::_internal_set_use_seq(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.use_seq_ = value;
}
inline void VelodyneToolsConf::set_use_seq(bool value) {
  _internal_set_use_seq(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.use_seq)
}

// optional string save_folder = 7;
inline bool VelodyneToolsConf::_internal_has_save_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_save_folder() const {
  return _internal_has_save_folder();
}
inline void VelodyneToolsConf::clear_save_folder() {
  _impl_.save_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& VelodyneToolsConf::save_folder() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  return _internal_save_folder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_save_folder(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.save_folder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}
inline std::string* VelodyneToolsConf::mutable_save_folder() {
  std::string* _s = _internal_mutable_save_folder();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_save_folder() const {
  return _impl_.save_folder_.Get();
}
inline void VelodyneToolsConf::_internal_set_save_folder(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.save_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_save_folder() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.save_folder_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_save_folder() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
  if (!_internal_has_save_folder()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.save_folder_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_folder_.IsDefault()) {
    _impl_.save_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneToolsConf::set_allocated_save_folder(std::string* save_folder) {
  if (save_folder != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.save_folder_.SetAllocated(save_folder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_folder_.IsDefault()) {
    _impl_.save_folder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder)
}

// optional string file_prefix = 8;
inline bool VelodyneToolsConf::_internal_has_file_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VelodyneToolsConf::has_file_prefix() const {
  return _internal_has_file_prefix();
}
inline void VelodyneToolsConf::clear_file_prefix() {
  _impl_.file_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& VelodyneToolsConf::file_prefix() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  return _internal_file_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VelodyneToolsConf::set_file_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.file_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}
inline std::string* VelodyneToolsConf::mutable_file_prefix() {
  std::string* _s = _internal_mutable_file_prefix();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  return _s;
}
inline const std::string& VelodyneToolsConf::_internal_file_prefix() const {
  return _impl_.file_prefix_.Get();
}
inline void VelodyneToolsConf::_internal_set_file_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.file_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::_internal_mutable_file_prefix() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.file_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* VelodyneToolsConf::release_file_prefix() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
  if (!_internal_has_file_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.file_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_prefix_.IsDefault()) {
    _impl_.file_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VelodyneToolsConf::set_allocated_file_prefix(std::string* file_prefix) {
  if (file_prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.file_prefix_.SetAllocated(file_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_prefix_.IsDefault()) {
    _impl_.file_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix)
}

// optional .apollo.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
inline bool VelodyneToolsConf::_internal_has_module_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.module_conf_ != nullptr);
  return value;
}
inline bool VelodyneToolsConf::has_module_conf() const {
  return _internal_has_module_conf();
}
inline const ::apollo::drivers::lidar_velodyne::VelodyneConf& VelodyneToolsConf::_internal_module_conf() const {
  const ::apollo::drivers::lidar_velodyne::VelodyneConf* p = _impl_.module_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::lidar_velodyne::VelodyneConf&>(
      ::apollo::drivers::lidar_velodyne::_VelodyneConf_default_instance_);
}
inline const ::apollo::drivers::lidar_velodyne::VelodyneConf& VelodyneToolsConf::module_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  return _internal_module_conf();
}
inline void VelodyneToolsConf::unsafe_arena_set_allocated_module_conf(
    ::apollo::drivers::lidar_velodyne::VelodyneConf* module_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.module_conf_);
  }
  _impl_.module_conf_ = module_conf;
  if (module_conf) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::release_module_conf() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::drivers::lidar_velodyne::VelodyneConf* temp = _impl_.module_conf_;
  _impl_.module_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::unsafe_arena_release_module_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::drivers::lidar_velodyne::VelodyneConf* temp = _impl_.module_conf_;
  _impl_.module_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::_internal_mutable_module_conf() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.module_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::lidar_velodyne::VelodyneConf>(GetArenaForAllocation());
    _impl_.module_conf_ = p;
  }
  return _impl_.module_conf_;
}
inline ::apollo::drivers::lidar_velodyne::VelodyneConf* VelodyneToolsConf::mutable_module_conf() {
  ::apollo::drivers::lidar_velodyne::VelodyneConf* _msg = _internal_mutable_module_conf();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
  return _msg;
}
inline void VelodyneToolsConf::set_allocated_module_conf(::apollo::drivers::lidar_velodyne::VelodyneConf* module_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.module_conf_);
  }
  if (module_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_conf));
    if (message_arena != submessage_arena) {
      module_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.module_conf_ = module_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar_velodyne.VelodyneToolsConf.module_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto
