// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto

#include "modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace lidar_velodyne {
PROTOBUF_CONSTEXPR VelodyneToolsConf::VelodyneToolsConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pcd_folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stamp_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_frame_id_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_folder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_conf_)*/nullptr
  , /*decltype(_impl_.skip_static_frames_)*/false
  , /*decltype(_impl_.use_seq_)*/false} {}
struct VelodyneToolsConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelodyneToolsConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelodyneToolsConfDefaultTypeInternal() {}
  union {
    VelodyneToolsConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelodyneToolsConfDefaultTypeInternal _VelodyneToolsConf_default_instance_;
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.pcd_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.stamp_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.pose_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.skip_static_frames_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.use_seq_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.save_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.file_prefix_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar_velodyne::VelodyneToolsConf, _impl_.module_conf_),
  0,
  1,
  2,
  7,
  3,
  8,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::drivers::lidar_velodyne::VelodyneToolsConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::lidar_velodyne::_VelodyneToolsConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nDmodules/drivers/lidar_velodyne/tools/p"
  "roto/velodyne_tools_conf.proto\022\035apollo.d"
  "rivers.lidar_velodyne\0328modules/drivers/l"
  "idar_velodyne/proto/velodyne_conf.proto\""
  "\227\002\n\021VelodyneToolsConf\022\022\n\npcd_folder\030\001 \001("
  "\t\022\022\n\nstamp_file\030\002 \001(\t\022\021\n\tpose_file\030\003 \001(\t"
  "\022!\n\022skip_static_frames\030\004 \001(\010:\005false\022 \n\016c"
  "hild_frame_id\030\005 \001(\t:\010velodyne\022\026\n\007use_seq"
  "\030\006 \001(\010:\005false\022\023\n\013save_folder\030\007 \001(\t\022\023\n\013fi"
  "le_prefix\030\010 \001(\t\022@\n\013module_conf\030e \001(\0132+.a"
  "pollo.drivers.lidar_velodyne.VelodyneCon"
  "f"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2fproto_2fvelodyne_5fconf_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto = {
    false, false, 441, descriptor_table_protodef_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto,
    "modules/drivers/lidar_velodyne/tools/proto/velodyne_tools_conf.proto",
    &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_once, descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto(&descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto);
namespace apollo {
namespace drivers {
namespace lidar_velodyne {

// ===================================================================

class VelodyneToolsConf::_Internal {
 public:
  using HasBits = decltype(std::declval<VelodyneToolsConf>()._impl_._has_bits_);
  static void set_has_pcd_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stamp_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pose_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_static_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_save_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::drivers::lidar_velodyne::VelodyneConf& module_conf(const VelodyneToolsConf* msg);
  static void set_has_module_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::drivers::lidar_velodyne::VelodyneConf&
VelodyneToolsConf::_Internal::module_conf(const VelodyneToolsConf* msg) {
  return *msg->_impl_.module_conf_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString VelodyneToolsConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_{{{"velodyne", 8}}, {nullptr}};
void VelodyneToolsConf::clear_module_conf() {
  if (_impl_.module_conf_ != nullptr) _impl_.module_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
VelodyneToolsConf::VelodyneToolsConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
}
VelodyneToolsConf::VelodyneToolsConf(const VelodyneToolsConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pcd_folder_){}
    , decltype(_impl_.stamp_file_){}
    , decltype(_impl_.pose_file_){}
    , decltype(_impl_.child_frame_id_){}
    , decltype(_impl_.save_folder_){}
    , decltype(_impl_.file_prefix_){}
    , decltype(_impl_.module_conf_){nullptr}
    , decltype(_impl_.skip_static_frames_){}
    , decltype(_impl_.use_seq_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pcd_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcd_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pcd_folder()) {
    _impl_.pcd_folder_.Set(from._internal_pcd_folder(), 
      GetArenaForAllocation());
  }
  _impl_.stamp_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stamp_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stamp_file()) {
    _impl_.stamp_file_.Set(from._internal_stamp_file(), 
      GetArenaForAllocation());
  }
  _impl_.pose_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pose_file()) {
    _impl_.pose_file_.Set(from._internal_pose_file(), 
      GetArenaForAllocation());
  }
  _impl_.child_frame_id_.InitDefault();
  if (from._internal_has_child_frame_id()) {
    _impl_.child_frame_id_.Set(from._internal_child_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.save_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_save_folder()) {
    _impl_.save_folder_.Set(from._internal_save_folder(), 
      GetArenaForAllocation());
  }
  _impl_.file_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_prefix()) {
    _impl_.file_prefix_.Set(from._internal_file_prefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_module_conf()) {
    _impl_.module_conf_ = new ::apollo::drivers::lidar_velodyne::VelodyneConf(*from._impl_.module_conf_);
  }
  ::memcpy(&_impl_.skip_static_frames_, &from._impl_.skip_static_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_seq_) -
    reinterpret_cast<char*>(&_impl_.skip_static_frames_)) + sizeof(_impl_.use_seq_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
}

inline void VelodyneToolsConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pcd_folder_){}
    , decltype(_impl_.stamp_file_){}
    , decltype(_impl_.pose_file_){}
    , decltype(_impl_.child_frame_id_){}
    , decltype(_impl_.save_folder_){}
    , decltype(_impl_.file_prefix_){}
    , decltype(_impl_.module_conf_){nullptr}
    , decltype(_impl_.skip_static_frames_){false}
    , decltype(_impl_.use_seq_){false}
  };
  _impl_.pcd_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcd_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stamp_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stamp_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pose_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.child_frame_id_.InitDefault();
  _impl_.save_folder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_folder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VelodyneToolsConf::~VelodyneToolsConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VelodyneToolsConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pcd_folder_.Destroy();
  _impl_.stamp_file_.Destroy();
  _impl_.pose_file_.Destroy();
  _impl_.child_frame_id_.Destroy();
  _impl_.save_folder_.Destroy();
  _impl_.file_prefix_.Destroy();
  if (this != internal_default_instance()) delete _impl_.module_conf_;
}

void VelodyneToolsConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VelodyneToolsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pcd_folder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stamp_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pose_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.child_frame_id_.ClearToDefault(::apollo::drivers::lidar_velodyne::VelodyneToolsConf::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.save_folder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.file_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.module_conf_ != nullptr);
      _impl_.module_conf_->Clear();
    }
  }
  _impl_.skip_static_frames_ = false;
  _impl_.use_seq_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelodyneToolsConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pcd_folder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pcd_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stamp_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stamp_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pose_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pose_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_static_frames = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skip_static_frames(&has_bits);
          _impl_.skip_static_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string child_frame_id = 5 [default = "velodyne"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_child_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_seq = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_seq(&has_bits);
          _impl_.use_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string save_folder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_save_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string file_prefix = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_file_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VelodyneToolsConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pcd_folder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pcd_folder().data(), static_cast<int>(this->_internal_pcd_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.pcd_folder");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pcd_folder(), target);
  }

  // optional string stamp_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stamp_file().data(), static_cast<int>(this->_internal_stamp_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.stamp_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stamp_file(), target);
  }

  // optional string pose_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pose_file().data(), static_cast<int>(this->_internal_pose_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.pose_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pose_file(), target);
  }

  // optional bool skip_static_frames = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_skip_static_frames(), target);
  }

  // optional string child_frame_id = 5 [default = "velodyne"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_child_frame_id().data(), static_cast<int>(this->_internal_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.child_frame_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_child_frame_id(), target);
  }

  // optional bool use_seq = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_seq(), target);
  }

  // optional string save_folder = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_folder().data(), static_cast<int>(this->_internal_save_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.save_folder");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_save_folder(), target);
  }

  // optional string file_prefix = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_prefix().data(), static_cast<int>(this->_internal_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.lidar_velodyne.VelodyneToolsConf.file_prefix");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_file_prefix(), target);
  }

  // optional .apollo.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::module_conf(this),
        _Internal::module_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  return target;
}

size_t VelodyneToolsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pcd_folder = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pcd_folder());
    }

    // optional string stamp_file = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stamp_file());
    }

    // optional string pose_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pose_file());
    }

    // optional string child_frame_id = 5 [default = "velodyne"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_child_frame_id());
    }

    // optional string save_folder = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_folder());
    }

    // optional string file_prefix = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_prefix());
    }

    // optional .apollo.drivers.lidar_velodyne.VelodyneConf module_conf = 101;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.module_conf_);
    }

    // optional bool skip_static_frames = 4 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool use_seq = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VelodyneToolsConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VelodyneToolsConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VelodyneToolsConf::GetClassData() const { return &_class_data_; }

void VelodyneToolsConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VelodyneToolsConf *>(to)->MergeFrom(
      static_cast<const VelodyneToolsConf &>(from));
}


void VelodyneToolsConf::MergeFrom(const VelodyneToolsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pcd_folder(from._internal_pcd_folder());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stamp_file(from._internal_stamp_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pose_file(from._internal_pose_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_child_frame_id(from._internal_child_frame_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_save_folder(from._internal_save_folder());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_file_prefix(from._internal_file_prefix());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_module_conf()->::apollo::drivers::lidar_velodyne::VelodyneConf::MergeFrom(from._internal_module_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.skip_static_frames_ = from._impl_.skip_static_frames_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_use_seq(from._internal_use_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VelodyneToolsConf::CopyFrom(const VelodyneToolsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.lidar_velodyne.VelodyneToolsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelodyneToolsConf::IsInitialized() const {
  if (_internal_has_module_conf()) {
    if (!_impl_.module_conf_->IsInitialized()) return false;
  }
  return true;
}

void VelodyneToolsConf::InternalSwap(VelodyneToolsConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pcd_folder_, lhs_arena,
      &other->_impl_.pcd_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stamp_file_, lhs_arena,
      &other->_impl_.stamp_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pose_file_, lhs_arena,
      &other->_impl_.pose_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_frame_id_, lhs_arena,
      &other->_impl_.child_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_folder_, lhs_arena,
      &other->_impl_.save_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_prefix_, lhs_arena,
      &other->_impl_.file_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelodyneToolsConf, _impl_.use_seq_)
      + sizeof(VelodyneToolsConf::_impl_.use_seq_)
      - PROTOBUF_FIELD_OFFSET(VelodyneToolsConf, _impl_.module_conf_)>(
          reinterpret_cast<char*>(&_impl_.module_conf_),
          reinterpret_cast<char*>(&other->_impl_.module_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelodyneToolsConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_5fvelodyne_2ftools_2fproto_2fvelodyne_5ftools_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar_velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::lidar_velodyne::VelodyneToolsConf*
Arena::CreateMaybeMessage< ::apollo::drivers::lidar_velodyne::VelodyneToolsConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::lidar_velodyne::VelodyneToolsConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
