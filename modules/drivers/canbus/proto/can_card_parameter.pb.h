// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/canbus/proto/can_card_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto;
namespace apollo {
namespace drivers {
namespace canbus {
class CANCardParameter;
struct CANCardParameterDefaultTypeInternal;
extern CANCardParameterDefaultTypeInternal _CANCardParameter_default_instance_;
}  // namespace canbus
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::canbus::CANCardParameter* Arena::CreateMaybeMessage<::apollo::drivers::canbus::CANCardParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace canbus {

enum CANCardParameter_CANCardBrand : int {
  CANCardParameter_CANCardBrand_FAKE_CAN = 0,
  CANCardParameter_CANCardBrand_ESD_CAN = 1,
  CANCardParameter_CANCardBrand_SOCKET_CAN_RAW = 2,
  CANCardParameter_CANCardBrand_HERMES_CAN = 3
};
bool CANCardParameter_CANCardBrand_IsValid(int value);
constexpr CANCardParameter_CANCardBrand CANCardParameter_CANCardBrand_CANCardBrand_MIN = CANCardParameter_CANCardBrand_FAKE_CAN;
constexpr CANCardParameter_CANCardBrand CANCardParameter_CANCardBrand_CANCardBrand_MAX = CANCardParameter_CANCardBrand_HERMES_CAN;
constexpr int CANCardParameter_CANCardBrand_CANCardBrand_ARRAYSIZE = CANCardParameter_CANCardBrand_CANCardBrand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANCardBrand_descriptor();
template<typename T>
inline const std::string& CANCardParameter_CANCardBrand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CANCardParameter_CANCardBrand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CANCardParameter_CANCardBrand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CANCardParameter_CANCardBrand_descriptor(), enum_t_value);
}
inline bool CANCardParameter_CANCardBrand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CANCardParameter_CANCardBrand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CANCardParameter_CANCardBrand>(
    CANCardParameter_CANCardBrand_descriptor(), name, value);
}
enum CANCardParameter_CANCardType : int {
  CANCardParameter_CANCardType_PCI_CARD = 0,
  CANCardParameter_CANCardType_USB_CARD = 1
};
bool CANCardParameter_CANCardType_IsValid(int value);
constexpr CANCardParameter_CANCardType CANCardParameter_CANCardType_CANCardType_MIN = CANCardParameter_CANCardType_PCI_CARD;
constexpr CANCardParameter_CANCardType CANCardParameter_CANCardType_CANCardType_MAX = CANCardParameter_CANCardType_USB_CARD;
constexpr int CANCardParameter_CANCardType_CANCardType_ARRAYSIZE = CANCardParameter_CANCardType_CANCardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANCardType_descriptor();
template<typename T>
inline const std::string& CANCardParameter_CANCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CANCardParameter_CANCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CANCardParameter_CANCardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CANCardParameter_CANCardType_descriptor(), enum_t_value);
}
inline bool CANCardParameter_CANCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CANCardParameter_CANCardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CANCardParameter_CANCardType>(
    CANCardParameter_CANCardType_descriptor(), name, value);
}
enum CANCardParameter_CANChannelId : int {
  CANCardParameter_CANChannelId_CHANNEL_ID_ZERO = 0,
  CANCardParameter_CANChannelId_CHANNEL_ID_ONE = 1,
  CANCardParameter_CANChannelId_CHANNEL_ID_TWO = 2,
  CANCardParameter_CANChannelId_CHANNEL_ID_THREE = 3
};
bool CANCardParameter_CANChannelId_IsValid(int value);
constexpr CANCardParameter_CANChannelId CANCardParameter_CANChannelId_CANChannelId_MIN = CANCardParameter_CANChannelId_CHANNEL_ID_ZERO;
constexpr CANCardParameter_CANChannelId CANCardParameter_CANChannelId_CANChannelId_MAX = CANCardParameter_CANChannelId_CHANNEL_ID_THREE;
constexpr int CANCardParameter_CANChannelId_CANChannelId_ARRAYSIZE = CANCardParameter_CANChannelId_CANChannelId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANChannelId_descriptor();
template<typename T>
inline const std::string& CANCardParameter_CANChannelId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CANCardParameter_CANChannelId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CANCardParameter_CANChannelId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CANCardParameter_CANChannelId_descriptor(), enum_t_value);
}
inline bool CANCardParameter_CANChannelId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CANCardParameter_CANChannelId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CANCardParameter_CANChannelId>(
    CANCardParameter_CANChannelId_descriptor(), name, value);
}
// ===================================================================

class CANCardParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.canbus.CANCardParameter) */ {
 public:
  inline CANCardParameter() : CANCardParameter(nullptr) {}
  ~CANCardParameter() override;
  explicit PROTOBUF_CONSTEXPR CANCardParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CANCardParameter(const CANCardParameter& from);
  CANCardParameter(CANCardParameter&& from) noexcept
    : CANCardParameter() {
    *this = ::std::move(from);
  }

  inline CANCardParameter& operator=(const CANCardParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANCardParameter& operator=(CANCardParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CANCardParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CANCardParameter* internal_default_instance() {
    return reinterpret_cast<const CANCardParameter*>(
               &_CANCardParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CANCardParameter& a, CANCardParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CANCardParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CANCardParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CANCardParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CANCardParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CANCardParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CANCardParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANCardParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.canbus.CANCardParameter";
  }
  protected:
  explicit CANCardParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CANCardParameter_CANCardBrand CANCardBrand;
  static constexpr CANCardBrand FAKE_CAN =
    CANCardParameter_CANCardBrand_FAKE_CAN;
  static constexpr CANCardBrand ESD_CAN =
    CANCardParameter_CANCardBrand_ESD_CAN;
  static constexpr CANCardBrand SOCKET_CAN_RAW =
    CANCardParameter_CANCardBrand_SOCKET_CAN_RAW;
  static constexpr CANCardBrand HERMES_CAN =
    CANCardParameter_CANCardBrand_HERMES_CAN;
  static inline bool CANCardBrand_IsValid(int value) {
    return CANCardParameter_CANCardBrand_IsValid(value);
  }
  static constexpr CANCardBrand CANCardBrand_MIN =
    CANCardParameter_CANCardBrand_CANCardBrand_MIN;
  static constexpr CANCardBrand CANCardBrand_MAX =
    CANCardParameter_CANCardBrand_CANCardBrand_MAX;
  static constexpr int CANCardBrand_ARRAYSIZE =
    CANCardParameter_CANCardBrand_CANCardBrand_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CANCardBrand_descriptor() {
    return CANCardParameter_CANCardBrand_descriptor();
  }
  template<typename T>
  static inline const std::string& CANCardBrand_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CANCardBrand>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CANCardBrand_Name.");
    return CANCardParameter_CANCardBrand_Name(enum_t_value);
  }
  static inline bool CANCardBrand_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CANCardBrand* value) {
    return CANCardParameter_CANCardBrand_Parse(name, value);
  }

  typedef CANCardParameter_CANCardType CANCardType;
  static constexpr CANCardType PCI_CARD =
    CANCardParameter_CANCardType_PCI_CARD;
  static constexpr CANCardType USB_CARD =
    CANCardParameter_CANCardType_USB_CARD;
  static inline bool CANCardType_IsValid(int value) {
    return CANCardParameter_CANCardType_IsValid(value);
  }
  static constexpr CANCardType CANCardType_MIN =
    CANCardParameter_CANCardType_CANCardType_MIN;
  static constexpr CANCardType CANCardType_MAX =
    CANCardParameter_CANCardType_CANCardType_MAX;
  static constexpr int CANCardType_ARRAYSIZE =
    CANCardParameter_CANCardType_CANCardType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CANCardType_descriptor() {
    return CANCardParameter_CANCardType_descriptor();
  }
  template<typename T>
  static inline const std::string& CANCardType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CANCardType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CANCardType_Name.");
    return CANCardParameter_CANCardType_Name(enum_t_value);
  }
  static inline bool CANCardType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CANCardType* value) {
    return CANCardParameter_CANCardType_Parse(name, value);
  }

  typedef CANCardParameter_CANChannelId CANChannelId;
  static constexpr CANChannelId CHANNEL_ID_ZERO =
    CANCardParameter_CANChannelId_CHANNEL_ID_ZERO;
  static constexpr CANChannelId CHANNEL_ID_ONE =
    CANCardParameter_CANChannelId_CHANNEL_ID_ONE;
  static constexpr CANChannelId CHANNEL_ID_TWO =
    CANCardParameter_CANChannelId_CHANNEL_ID_TWO;
  static constexpr CANChannelId CHANNEL_ID_THREE =
    CANCardParameter_CANChannelId_CHANNEL_ID_THREE;
  static inline bool CANChannelId_IsValid(int value) {
    return CANCardParameter_CANChannelId_IsValid(value);
  }
  static constexpr CANChannelId CANChannelId_MIN =
    CANCardParameter_CANChannelId_CANChannelId_MIN;
  static constexpr CANChannelId CANChannelId_MAX =
    CANCardParameter_CANChannelId_CANChannelId_MAX;
  static constexpr int CANChannelId_ARRAYSIZE =
    CANCardParameter_CANChannelId_CANChannelId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CANChannelId_descriptor() {
    return CANCardParameter_CANChannelId_descriptor();
  }
  template<typename T>
  static inline const std::string& CANChannelId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CANChannelId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CANChannelId_Name.");
    return CANCardParameter_CANChannelId_Name(enum_t_value);
  }
  static inline bool CANChannelId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CANChannelId* value) {
    return CANCardParameter_CANChannelId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kTypeFieldNumber = 2,
    kChannelIdFieldNumber = 3,
  };
  // optional .apollo.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  ::apollo::drivers::canbus::CANCardParameter_CANCardBrand brand() const;
  void set_brand(::apollo::drivers::canbus::CANCardParameter_CANCardBrand value);
  private:
  ::apollo::drivers::canbus::CANCardParameter_CANCardBrand _internal_brand() const;
  void _internal_set_brand(::apollo::drivers::canbus::CANCardParameter_CANCardBrand value);
  public:

  // optional .apollo.drivers.canbus.CANCardParameter.CANCardType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::drivers::canbus::CANCardParameter_CANCardType type() const;
  void set_type(::apollo::drivers::canbus::CANCardParameter_CANCardType value);
  private:
  ::apollo::drivers::canbus::CANCardParameter_CANCardType _internal_type() const;
  void _internal_set_type(::apollo::drivers::canbus::CANCardParameter_CANCardType value);
  public:

  // optional .apollo.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::apollo::drivers::canbus::CANCardParameter_CANChannelId channel_id() const;
  void set_channel_id(::apollo::drivers::canbus::CANCardParameter_CANChannelId value);
  private:
  ::apollo::drivers::canbus::CANCardParameter_CANChannelId _internal_channel_id() const;
  void _internal_set_channel_id(::apollo::drivers::canbus::CANCardParameter_CANChannelId value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.canbus.CANCardParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int brand_;
    int type_;
    int channel_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CANCardParameter

// optional .apollo.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
inline bool CANCardParameter::_internal_has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CANCardParameter::has_brand() const {
  return _internal_has_brand();
}
inline void CANCardParameter::clear_brand() {
  _impl_.brand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::canbus::CANCardParameter_CANCardBrand CANCardParameter::_internal_brand() const {
  return static_cast< ::apollo::drivers::canbus::CANCardParameter_CANCardBrand >(_impl_.brand_);
}
inline ::apollo::drivers::canbus::CANCardParameter_CANCardBrand CANCardParameter::brand() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.canbus.CANCardParameter.brand)
  return _internal_brand();
}
inline void CANCardParameter::_internal_set_brand(::apollo::drivers::canbus::CANCardParameter_CANCardBrand value) {
  assert(::apollo::drivers::canbus::CANCardParameter_CANCardBrand_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.brand_ = value;
}
inline void CANCardParameter::set_brand(::apollo::drivers::canbus::CANCardParameter_CANCardBrand value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.canbus.CANCardParameter.brand)
}

// optional .apollo.drivers.canbus.CANCardParameter.CANCardType type = 2;
inline bool CANCardParameter::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CANCardParameter::has_type() const {
  return _internal_has_type();
}
inline void CANCardParameter::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::canbus::CANCardParameter_CANCardType CANCardParameter::_internal_type() const {
  return static_cast< ::apollo::drivers::canbus::CANCardParameter_CANCardType >(_impl_.type_);
}
inline ::apollo::drivers::canbus::CANCardParameter_CANCardType CANCardParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.canbus.CANCardParameter.type)
  return _internal_type();
}
inline void CANCardParameter::_internal_set_type(::apollo::drivers::canbus::CANCardParameter_CANCardType value) {
  assert(::apollo::drivers::canbus::CANCardParameter_CANCardType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CANCardParameter::set_type(::apollo::drivers::canbus::CANCardParameter_CANCardType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.canbus.CANCardParameter.type)
}

// optional .apollo.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
inline bool CANCardParameter::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CANCardParameter::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CANCardParameter::clear_channel_id() {
  _impl_.channel_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::canbus::CANCardParameter_CANChannelId CANCardParameter::_internal_channel_id() const {
  return static_cast< ::apollo::drivers::canbus::CANCardParameter_CANChannelId >(_impl_.channel_id_);
}
inline ::apollo::drivers::canbus::CANCardParameter_CANChannelId CANCardParameter::channel_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.canbus.CANCardParameter.channel_id)
  return _internal_channel_id();
}
inline void CANCardParameter::_internal_set_channel_id(::apollo::drivers::canbus::CANCardParameter_CANChannelId value) {
  assert(::apollo::drivers::canbus::CANCardParameter_CANChannelId_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_id_ = value;
}
inline void CANCardParameter::set_channel_id(::apollo::drivers::canbus::CANCardParameter_CANChannelId value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.canbus.CANCardParameter.channel_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::canbus::CANCardParameter_CANCardBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::canbus::CANCardParameter_CANCardBrand>() {
  return ::apollo::drivers::canbus::CANCardParameter_CANCardBrand_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::canbus::CANCardParameter_CANCardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::canbus::CANCardParameter_CANCardType>() {
  return ::apollo::drivers::canbus::CANCardParameter_CANCardType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::canbus::CANCardParameter_CANChannelId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::canbus::CANCardParameter_CANChannelId>() {
  return ::apollo::drivers::canbus::CANCardParameter_CANChannelId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto
