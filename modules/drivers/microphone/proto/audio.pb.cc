// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/microphone/proto/audio.proto

#include "modules/drivers/microphone/proto/audio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
PROTOBUF_CONSTEXPR ChannelData::ChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_type_)*/0} {}
struct ChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDataDefaultTypeInternal() {}
  union {
    ChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
PROTOBUF_CONSTEXPR AudioData::AudioData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_data_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.microphone_config_)*/nullptr} {}
struct AudioDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioDataDefaultTypeInternal() {}
  union {
    AudioData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioDataDefaultTypeInternal _AudioData_default_instance_;
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::ChannelData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::ChannelData, _impl_.channel_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::ChannelData, _impl_.data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::AudioData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::AudioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::AudioData, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::AudioData, _impl_.microphone_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::AudioData, _impl_.channel_data_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::drivers::microphone::config::ChannelData)},
  { 10, 19, -1, sizeof(::apollo::drivers::microphone::config::AudioData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::microphone::config::_ChannelData_default_instance_._instance,
  &::apollo::drivers::microphone::config::_AudioData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/drivers/microphone/proto/audio"
  ".proto\022 apollo.drivers.microphone.config"
  "\032!modules/common/proto/header.proto\0328mod"
  "ules/drivers/microphone/proto/microphone"
  "_config.proto\"`\n\013ChannelData\022C\n\014channel_"
  "type\030\001 \001(\0162-.apollo.drivers.microphone.c"
  "onfig.ChannelType\022\014\n\004data\030\002 \001(\014\"\306\001\n\tAudi"
  "oData\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
  "ader\022M\n\021microphone_config\030\002 \001(\01322.apollo"
  ".drivers.microphone.config.MicrophoneCon"
  "fig\022C\n\014channel_data\030\003 \003(\0132-.apollo.drive"
  "rs.microphone.config.ChannelData"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto = {
    false, false, 472, descriptor_table_protodef_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto,
    "modules/drivers/microphone/proto/audio.proto",
    &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_once, descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto(&descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto);
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {

// ===================================================================

class ChannelData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelData>()._impl_._has_bits_);
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChannelData::ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.microphone.config.ChannelData)
}
ChannelData::ChannelData(const ChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.channel_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _impl_.data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  _impl_.channel_type_ = from._impl_.channel_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.microphone.config.ChannelData)
}

inline void ChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.channel_type_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelData::~ChannelData() {
  // @@protoc_insertion_point(destructor:apollo.drivers.microphone.config.ChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.microphone.config.ChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.channel_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.microphone.config.ChannelType channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::microphone::config::ChannelType_IsValid(val))) {
            _internal_set_channel_type(static_cast<::apollo::drivers::microphone::config::ChannelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.microphone.config.ChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel_type(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.microphone.config.ChannelData)
  return target;
}

size_t ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.microphone.config.ChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .apollo.drivers.microphone.config.ChannelType channel_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelData::GetClassData() const { return &_class_data_; }

void ChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelData *>(to)->MergeFrom(
      static_cast<const ChannelData &>(from));
}


void ChannelData::MergeFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.microphone.config.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.channel_type_ = from._impl_.channel_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelData::CopyFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.microphone.config.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelData::IsInitialized() const {
  return true;
}

void ChannelData::InternalSwap(ChannelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.channel_type_, other->_impl_.channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_getter, &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto[0]);
}

// ===================================================================

class AudioData::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioData>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const AudioData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::microphone::config::MicrophoneConfig& microphone_config(const AudioData* msg);
  static void set_has_microphone_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
AudioData::_Internal::header(const AudioData* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::drivers::microphone::config::MicrophoneConfig&
AudioData::_Internal::microphone_config(const AudioData* msg) {
  return *msg->_impl_.microphone_config_;
}
void AudioData::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioData::clear_microphone_config() {
  if (_impl_.microphone_config_ != nullptr) _impl_.microphone_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AudioData::AudioData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.microphone.config.AudioData)
}
AudioData::AudioData(const AudioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_data_){from._impl_.channel_data_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.microphone_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_microphone_config()) {
    _impl_.microphone_config_ = new ::apollo::drivers::microphone::config::MicrophoneConfig(*from._impl_.microphone_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.microphone.config.AudioData)
}

inline void AudioData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_data_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.microphone_config_){nullptr}
  };
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:apollo.drivers.microphone.config.AudioData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.microphone_config_;
}

void AudioData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.microphone.config.AudioData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.microphone_config_ != nullptr);
      _impl_.microphone_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.microphone.config.MicrophoneConfig microphone_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_microphone_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.microphone.config.ChannelData channel_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.microphone.config.AudioData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.microphone.config.MicrophoneConfig microphone_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::microphone_config(this),
        _Internal::microphone_config(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.drivers.microphone.config.ChannelData channel_data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.microphone.config.AudioData)
  return target;
}

size_t AudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.microphone.config.AudioData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.microphone.config.ChannelData channel_data = 3;
  total_size += 1UL * this->_internal_channel_data_size();
  for (const auto& msg : this->_impl_.channel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.drivers.microphone.config.MicrophoneConfig microphone_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.microphone_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioData::GetClassData() const { return &_class_data_; }

void AudioData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioData *>(to)->MergeFrom(
      static_cast<const AudioData &>(from));
}


void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.microphone.config.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.channel_data_.MergeFrom(from._impl_.channel_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_microphone_config()->::apollo::drivers::microphone::config::MicrophoneConfig::MergeFrom(from._internal_microphone_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.microphone.config.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  return true;
}

void AudioData::InternalSwap(AudioData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.channel_data_.InternalSwap(&other->_impl_.channel_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioData, _impl_.microphone_config_)
      + sizeof(AudioData::_impl_.microphone_config_)
      - PROTOBUF_FIELD_OFFSET(AudioData, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_getter, &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2faudio_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::microphone::config::ChannelData*
Arena::CreateMaybeMessage< ::apollo::drivers::microphone::config::ChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::microphone::config::ChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::microphone::config::AudioData*
Arena::CreateMaybeMessage< ::apollo::drivers::microphone::config::AudioData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::microphone::config::AudioData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
