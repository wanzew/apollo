// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/microphone/proto/microphone_config.proto

#include "modules/drivers/microphone/proto/microphone_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
PROTOBUF_CONSTEXPR MicrophoneConfig::MicrophoneConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_type_)*/{}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.microphone_model_)*/0
  , /*decltype(_impl_.chunk_)*/0
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_.record_seconds_)*/0
  , /*decltype(_impl_.sample_width_)*/0
  , /*decltype(_impl_.mic_distance_)*/0} {}
struct MicrophoneConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MicrophoneConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MicrophoneConfigDefaultTypeInternal() {}
  union {
    MicrophoneConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MicrophoneConfigDefaultTypeInternal _MicrophoneConfig_default_instance_;
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.microphone_model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.chunk_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.record_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.sample_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.mic_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _impl_.channel_type_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::drivers::microphone::config::MicrophoneConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::microphone::config::_MicrophoneConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/drivers/microphone/proto/micro"
  "phone_config.proto\022 apollo.drivers.micro"
  "phone.config\"\364\002\n\020MicrophoneConfig\022\\\n\020mic"
  "rophone_model\030\002 \001(\0162B.apollo.drivers.mic"
  "rophone.config.MicrophoneConfig.Micropho"
  "neModel\022\r\n\005chunk\030\003 \001(\005\022\023\n\013sample_rate\030\004 "
  "\001(\002\022\026\n\016record_seconds\030\005 \001(\002\022\024\n\014sample_wi"
  "dth\030\006 \001(\005\022\024\n\014channel_name\030\007 \001(\t\022\020\n\010frame"
  "_id\030\010 \001(\t\022\024\n\014mic_distance\030\t \001(\002\022C\n\014chann"
  "el_type\030\001 \003(\0162-.apollo.drivers.microphon"
  "e.config.ChannelType\"-\n\017MicrophoneModel\022"
  "\013\n\007UNKNOWN\020\000\022\r\n\tRESPEAKER\020\001*:\n\013ChannelTy"
  "pe\022\013\n\007UNKNOWN\020\000\022\007\n\003ASR\020\001\022\007\n\003RAW\020\002\022\014\n\010PLA"
  "YBACK\020\003"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto = {
    false, false, 527, descriptor_table_protodef_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto,
    "modules/drivers/microphone/proto/microphone_config.proto",
    &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto(&descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MicrophoneConfig_MicrophoneModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[0];
}
bool MicrophoneConfig_MicrophoneModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MicrophoneConfig_MicrophoneModel MicrophoneConfig::UNKNOWN;
constexpr MicrophoneConfig_MicrophoneModel MicrophoneConfig::RESPEAKER;
constexpr MicrophoneConfig_MicrophoneModel MicrophoneConfig::MicrophoneModel_MIN;
constexpr MicrophoneConfig_MicrophoneModel MicrophoneConfig::MicrophoneModel_MAX;
constexpr int MicrophoneConfig::MicrophoneModel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[1];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MicrophoneConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MicrophoneConfig>()._impl_._has_bits_);
  static void set_has_microphone_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_record_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sample_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mic_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MicrophoneConfig::MicrophoneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.microphone.config.MicrophoneConfig)
}
MicrophoneConfig::MicrophoneConfig(const MicrophoneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){from._impl_.channel_type_}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.microphone_model_){}
    , decltype(_impl_.chunk_){}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.record_seconds_){}
    , decltype(_impl_.sample_width_){}
    , decltype(_impl_.mic_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _impl_.channel_name_.Set(from._internal_channel_name(), 
      GetArenaForAllocation());
  }
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.microphone_model_, &from._impl_.microphone_model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mic_distance_) -
    reinterpret_cast<char*>(&_impl_.microphone_model_)) + sizeof(_impl_.mic_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.microphone.config.MicrophoneConfig)
}

inline void MicrophoneConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_type_){arena}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.microphone_model_){0}
    , decltype(_impl_.chunk_){0}
    , decltype(_impl_.sample_rate_){0}
    , decltype(_impl_.record_seconds_){0}
    , decltype(_impl_.sample_width_){0}
    , decltype(_impl_.mic_distance_){0}
  };
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MicrophoneConfig::~MicrophoneConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.microphone.config.MicrophoneConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MicrophoneConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_type_.~RepeatedField();
  _impl_.channel_name_.Destroy();
  _impl_.frame_id_.Destroy();
}

void MicrophoneConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MicrophoneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.microphone.config.MicrophoneConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.microphone_model_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mic_distance_) -
        reinterpret_cast<char*>(&_impl_.microphone_model_)) + sizeof(_impl_.mic_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MicrophoneConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::microphone::config::ChannelType_IsValid(val))) {
              _internal_add_channel_type(static_cast<::apollo::drivers::microphone::config::ChannelType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_channel_type(), ptr, ctx, ::apollo::drivers::microphone::config::ChannelType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel_IsValid(val))) {
            _internal_set_microphone_model(static_cast<::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chunk(&has_bits);
          _impl_.chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float sample_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_sample_rate(&has_bits);
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float record_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_record_seconds(&has_bits);
          _impl_.record_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sample_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sample_width(&has_bits);
          _impl_.sample_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.microphone.config.MicrophoneConfig.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.microphone.config.MicrophoneConfig.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float mic_distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_mic_distance(&has_bits);
          _impl_.mic_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MicrophoneConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.microphone.config.MicrophoneConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  for (int i = 0, n = this->_internal_channel_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_channel_type(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_microphone_model(), target);
  }

  // optional int32 chunk = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_chunk(), target);
  }

  // optional float sample_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_sample_rate(), target);
  }

  // optional float record_seconds = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_record_seconds(), target);
  }

  // optional int32 sample_width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sample_width(), target);
  }

  // optional string channel_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.channel_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_channel_name(), target);
  }

  // optional string frame_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.frame_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_frame_id(), target);
  }

  // optional float mic_distance = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_mic_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.microphone.config.MicrophoneConfig)
  return target;
}

size_t MicrophoneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.microphone.config.MicrophoneConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_channel_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_channel_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string channel_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string frame_id = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_microphone_model());
    }

    // optional int32 chunk = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chunk());
    }

    // optional float sample_rate = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float record_seconds = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 sample_width = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_width());
    }

    // optional float mic_distance = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MicrophoneConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MicrophoneConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MicrophoneConfig::GetClassData() const { return &_class_data_; }

void MicrophoneConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MicrophoneConfig *>(to)->MergeFrom(
      static_cast<const MicrophoneConfig &>(from));
}


void MicrophoneConfig::MergeFrom(const MicrophoneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.channel_type_.MergeFrom(from._impl_.channel_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.microphone_model_ = from._impl_.microphone_model_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.chunk_ = from._impl_.chunk_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sample_rate_ = from._impl_.sample_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.record_seconds_ = from._impl_.record_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.sample_width_ = from._impl_.sample_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.mic_distance_ = from._impl_.mic_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MicrophoneConfig::CopyFrom(const MicrophoneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicrophoneConfig::IsInitialized() const {
  return true;
}

void MicrophoneConfig::InternalSwap(MicrophoneConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.channel_type_.InternalSwap(&other->_impl_.channel_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MicrophoneConfig, _impl_.mic_distance_)
      + sizeof(MicrophoneConfig::_impl_.mic_distance_)
      - PROTOBUF_FIELD_OFFSET(MicrophoneConfig, _impl_.microphone_model_)>(
          reinterpret_cast<char*>(&_impl_.microphone_model_),
          reinterpret_cast<char*>(&other->_impl_.microphone_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MicrophoneConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fmicrophone_2fproto_2fmicrophone_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::microphone::config::MicrophoneConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::microphone::config::MicrophoneConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::microphone::config::MicrophoneConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
