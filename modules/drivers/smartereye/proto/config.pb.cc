// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/smartereye/proto/config.proto

#include "modules/drivers/smartereye/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace smartereye {
namespace config {
PROTOBUF_CONSTEXPR Config_CompressConfig::Config_CompressConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_pool_size_)*/20u} {}
struct Config_CompressConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_CompressConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_CompressConfigDefaultTypeInternal() {}
  union {
    Config_CompressConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_CompressConfigDefaultTypeInternal _Config_CompressConfig_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_dev_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pixel_format_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_name_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_name_image_compressed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compress_conf_)*/nullptr
  , /*decltype(_impl_.io_method_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.frame_rate_)*/0u
  , /*decltype(_impl_.monochrome_)*/false
  , /*decltype(_impl_.auto_focus_)*/false
  , /*decltype(_impl_.trigger_internal_)*/0u
  , /*decltype(_impl_.output_type_)*/0
  , /*decltype(_impl_.spin_rate_)*/200u
  , /*decltype(_impl_.brightness_)*/-1
  , /*decltype(_impl_.contrast_)*/-1
  , /*decltype(_impl_.saturation_)*/-1
  , /*decltype(_impl_.sharpness_)*/-1
  , /*decltype(_impl_.gain_)*/-1
  , /*decltype(_impl_.focus_)*/-1
  , /*decltype(_impl_.exposure_)*/100
  , /*decltype(_impl_.auto_exposure_)*/true
  , /*decltype(_impl_.auto_white_balance_)*/true
  , /*decltype(_impl_.white_balance_)*/4000
  , /*decltype(_impl_.bytes_per_pixel_)*/3u
  , /*decltype(_impl_.trigger_fps_)*/30u
  , /*decltype(_impl_.device_wait_ms_)*/2000u} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace config
}  // namespace smartereye
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config_CompressConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config_CompressConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config_CompressConfig, _impl_.output_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config_CompressConfig, _impl_.image_pool_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.camera_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.pixel_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.io_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.frame_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.monochrome_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.brightness_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.contrast_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.saturation_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.sharpness_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.auto_focus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.focus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.auto_exposure_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.exposure_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.auto_white_balance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.white_balance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.bytes_per_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.trigger_internal_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.trigger_fps_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.channel_name_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.channel_name_image_compressed_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.device_wait_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.spin_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::smartereye::config::Config, _impl_.compress_conf_),
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  16,
  17,
  18,
  19,
  20,
  12,
  21,
  23,
  22,
  24,
  25,
  26,
  13,
  27,
  3,
  4,
  5,
  28,
  15,
  14,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::drivers::smartereye::config::Config_CompressConfig)},
  { 10, 45, -1, sizeof(::apollo::drivers::smartereye::config::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::smartereye::config::_Config_CompressConfig_default_instance_._instance,
  &::apollo::drivers::smartereye::config::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/drivers/smartereye/proto/confi"
  "g.proto\022 apollo.drivers.smartereye.confi"
  "g\"\242\007\n\006Config\022\022\n\ncamera_dev\030\001 \001(\t\022\020\n\010fram"
  "e_id\030\002 \001(\t\022\032\n\014pixel_format\030\003 \001(\t:\004yuyv\022="
  "\n\tio_method\030\004 \001(\0162*.apollo.drivers.smart"
  "ereye.config.IOMethod\022\r\n\005width\030\005 \001(\r\022\016\n\006"
  "height\030\006 \001(\r\022\022\n\nframe_rate\030\007 \001(\r\022\031\n\nmono"
  "chrome\030\010 \001(\010:\005false\022\026\n\nbrightness\030\t \001(\005:"
  "\002-1\022\024\n\010contrast\030\n \001(\005:\002-1\022\026\n\nsaturation\030"
  "\013 \001(\005:\002-1\022\025\n\tsharpness\030\014 \001(\005:\002-1\022\020\n\004gain"
  "\030\r \001(\005:\002-1\022\031\n\nauto_focus\030\016 \001(\010:\005false\022\021\n"
  "\005focus\030\017 \001(\005:\002-1\022\033\n\rauto_exposure\030\020 \001(\010:"
  "\004true\022\025\n\010exposure\030\021 \001(\005:\003100\022 \n\022auto_whi"
  "te_balance\030\022 \001(\010:\004true\022\033\n\rwhite_balance\030"
  "\023 \001(\005:\0044000\022\032\n\017bytes_per_pixel\030\024 \001(\r:\0013\022"
  "\033\n\020trigger_internal\030\025 \001(\r:\0010\022\027\n\013trigger_"
  "fps\030\026 \001(\r:\00230\022\024\n\014channel_name\030\027 \001(\t\022\032\n\022c"
  "hannel_name_image\030\030 \001(\t\022%\n\035channel_name_"
  "image_compressed\030\031 \001(\t\022\034\n\016device_wait_ms"
  "\030\032 \001(\r:\0042000\022\026\n\tspin_rate\030\033 \001(\r:\003200\022A\n\013"
  "output_type\030\034 \001(\0162,.apollo.drivers.smart"
  "ereye.config.OutputType\022N\n\rcompress_conf"
  "\030\035 \001(\01327.apollo.drivers.smartereye.confi"
  "g.Config.CompressConfig\032E\n\016CompressConfi"
  "g\022\026\n\016output_channel\030\001 \001(\t\022\033\n\017image_pool_"
  "size\030\002 \001(\r:\00220*`\n\010IOMethod\022\025\n\021IO_METHOD_"
  "UNKNOWN\020\000\022\022\n\016IO_METHOD_READ\020\001\022\022\n\016IO_METH"
  "OD_MMAP\020\002\022\025\n\021IO_METHOD_USERPTR\020\003*\037\n\nOutp"
  "utType\022\010\n\004YUYV\020\000\022\007\n\003RGB\020\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto = {
    false, false, 1145, descriptor_table_protodef_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto,
    "modules/drivers/smartereye/proto/config.proto",
    &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto(&descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace smartereye {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[0];
}
bool IOMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[1];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Config_CompressConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_CompressConfig>()._impl_._has_bits_);
  static void set_has_output_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config_CompressConfig::Config_CompressConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.smartereye.config.Config.CompressConfig)
}
Config_CompressConfig::Config_CompressConfig(const Config_CompressConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_channel_){}
    , decltype(_impl_.image_pool_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_channel()) {
    _impl_.output_channel_.Set(from._internal_output_channel(), 
      GetArenaForAllocation());
  }
  _impl_.image_pool_size_ = from._impl_.image_pool_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.smartereye.config.Config.CompressConfig)
}

inline void Config_CompressConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_channel_){}
    , decltype(_impl_.image_pool_size_){20u}
  };
  _impl_.output_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config_CompressConfig::~Config_CompressConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.smartereye.config.Config.CompressConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config_CompressConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_channel_.Destroy();
}

void Config_CompressConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config_CompressConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.smartereye.config.Config.CompressConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_channel_.ClearNonDefaultToEmpty();
    }
    _impl_.image_pool_size_ = 20u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config_CompressConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.CompressConfig.output_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_pool_size = 2 [default = 20];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_image_pool_size(&has_bits);
          _impl_.image_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config_CompressConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.smartereye.config.Config.CompressConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string output_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel().data(), static_cast<int>(this->_internal_output_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.CompressConfig.output_channel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_channel(), target);
  }

  // optional uint32 image_pool_size = 2 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_image_pool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.smartereye.config.Config.CompressConfig)
  return target;
}

size_t Config_CompressConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.smartereye.config.Config.CompressConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string output_channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel());
    }

    // optional uint32 image_pool_size = 2 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_image_pool_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config_CompressConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config_CompressConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config_CompressConfig::GetClassData() const { return &_class_data_; }

void Config_CompressConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config_CompressConfig *>(to)->MergeFrom(
      static_cast<const Config_CompressConfig &>(from));
}


void Config_CompressConfig::MergeFrom(const Config_CompressConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.smartereye.config.Config.CompressConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_output_channel(from._internal_output_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.image_pool_size_ = from._impl_.image_pool_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config_CompressConfig::CopyFrom(const Config_CompressConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.smartereye.config.Config.CompressConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CompressConfig::IsInitialized() const {
  return true;
}

void Config_CompressConfig::InternalSwap(Config_CompressConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_channel_, lhs_arena,
      &other->_impl_.output_channel_, rhs_arena
  );
  swap(_impl_.image_pool_size_, other->_impl_.image_pool_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_CompressConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[0]);
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_camera_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pixel_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_io_method(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_monochrome(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_sharpness(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_auto_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_auto_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_auto_white_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_white_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_bytes_per_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_trigger_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trigger_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_name_image(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_channel_name_image_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_device_wait_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_spin_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::drivers::smartereye::config::Config_CompressConfig& compress_conf(const Config* msg);
  static void set_has_compress_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::drivers::smartereye::config::Config_CompressConfig&
Config::_Internal::compress_conf(const Config* msg) {
  return *msg->_impl_.compress_conf_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Config::Impl_::_i_give_permission_to_break_this_code_default_pixel_format_{{{"yuyv", 4}}, {nullptr}};
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.smartereye.config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_dev_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.pixel_format_){}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_name_image_){}
    , decltype(_impl_.channel_name_image_compressed_){}
    , decltype(_impl_.compress_conf_){nullptr}
    , decltype(_impl_.io_method_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.frame_rate_){}
    , decltype(_impl_.monochrome_){}
    , decltype(_impl_.auto_focus_){}
    , decltype(_impl_.trigger_internal_){}
    , decltype(_impl_.output_type_){}
    , decltype(_impl_.spin_rate_){}
    , decltype(_impl_.brightness_){}
    , decltype(_impl_.contrast_){}
    , decltype(_impl_.saturation_){}
    , decltype(_impl_.sharpness_){}
    , decltype(_impl_.gain_){}
    , decltype(_impl_.focus_){}
    , decltype(_impl_.exposure_){}
    , decltype(_impl_.auto_exposure_){}
    , decltype(_impl_.auto_white_balance_){}
    , decltype(_impl_.white_balance_){}
    , decltype(_impl_.bytes_per_pixel_){}
    , decltype(_impl_.trigger_fps_){}
    , decltype(_impl_.device_wait_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_dev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_dev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_camera_dev()) {
    _impl_.camera_dev_.Set(from._internal_camera_dev(), 
      GetArenaForAllocation());
  }
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.pixel_format_.InitDefault();
  if (from._internal_has_pixel_format()) {
    _impl_.pixel_format_.Set(from._internal_pixel_format(), 
      GetArenaForAllocation());
  }
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name()) {
    _impl_.channel_name_.Set(from._internal_channel_name(), 
      GetArenaForAllocation());
  }
  _impl_.channel_name_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name_image()) {
    _impl_.channel_name_image_.Set(from._internal_channel_name_image(), 
      GetArenaForAllocation());
  }
  _impl_.channel_name_image_compressed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_image_compressed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel_name_image_compressed()) {
    _impl_.channel_name_image_compressed_.Set(from._internal_channel_name_image_compressed(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_compress_conf()) {
    _impl_.compress_conf_ = new ::apollo::drivers::smartereye::config::Config_CompressConfig(*from._impl_.compress_conf_);
  }
  ::memcpy(&_impl_.io_method_, &from._impl_.io_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_wait_ms_) -
    reinterpret_cast<char*>(&_impl_.io_method_)) + sizeof(_impl_.device_wait_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.smartereye.config.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_dev_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.pixel_format_){}
    , decltype(_impl_.channel_name_){}
    , decltype(_impl_.channel_name_image_){}
    , decltype(_impl_.channel_name_image_compressed_){}
    , decltype(_impl_.compress_conf_){nullptr}
    , decltype(_impl_.io_method_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.frame_rate_){0u}
    , decltype(_impl_.monochrome_){false}
    , decltype(_impl_.auto_focus_){false}
    , decltype(_impl_.trigger_internal_){0u}
    , decltype(_impl_.output_type_){0}
    , decltype(_impl_.spin_rate_){200u}
    , decltype(_impl_.brightness_){-1}
    , decltype(_impl_.contrast_){-1}
    , decltype(_impl_.saturation_){-1}
    , decltype(_impl_.sharpness_){-1}
    , decltype(_impl_.gain_){-1}
    , decltype(_impl_.focus_){-1}
    , decltype(_impl_.exposure_){100}
    , decltype(_impl_.auto_exposure_){true}
    , decltype(_impl_.auto_white_balance_){true}
    , decltype(_impl_.white_balance_){4000}
    , decltype(_impl_.bytes_per_pixel_){3u}
    , decltype(_impl_.trigger_fps_){30u}
    , decltype(_impl_.device_wait_ms_){2000u}
  };
  _impl_.camera_dev_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camera_dev_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pixel_format_.InitDefault();
  _impl_.channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_name_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_name_image_compressed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channel_name_image_compressed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.smartereye.config.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_dev_.Destroy();
  _impl_.frame_id_.Destroy();
  _impl_.pixel_format_.Destroy();
  _impl_.channel_name_.Destroy();
  _impl_.channel_name_image_.Destroy();
  _impl_.channel_name_image_compressed_.Destroy();
  if (this != internal_default_instance()) delete _impl_.compress_conf_;
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.smartereye.config.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.camera_dev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pixel_format_.ClearToDefault(::apollo::drivers::smartereye::config::Config::Impl_::_i_give_permission_to_break_this_code_default_pixel_format_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.channel_name_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.channel_name_image_compressed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.compress_conf_ != nullptr);
      _impl_.compress_conf_->Clear();
    }
  }
  _impl_.io_method_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.output_type_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.output_type_));
    _impl_.spin_rate_ = 200u;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.brightness_ = -1;
    _impl_.contrast_ = -1;
    _impl_.saturation_ = -1;
    _impl_.sharpness_ = -1;
    _impl_.gain_ = -1;
    _impl_.focus_ = -1;
    _impl_.exposure_ = 100;
    _impl_.auto_exposure_ = true;
  }
  if (cached_has_bits & 0x1f000000u) {
    _impl_.auto_white_balance_ = true;
    _impl_.white_balance_ = 4000;
    _impl_.bytes_per_pixel_ = 3u;
    _impl_.trigger_fps_ = 30u;
    _impl_.device_wait_ms_ = 2000u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string camera_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_dev();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.camera_dev");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pixel_format = 3 [default = "yuyv"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pixel_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.pixel_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.smartereye.config.IOMethod io_method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::smartereye::config::IOMethod_IsValid(val))) {
            _internal_set_io_method(static_cast<::apollo::drivers::smartereye::config::IOMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_frame_rate(&has_bits);
          _impl_.frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool monochrome = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_monochrome(&has_bits);
          _impl_.monochrome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 brightness = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_brightness(&has_bits);
          _impl_.brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 contrast = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_contrast(&has_bits);
          _impl_.contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 saturation = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_saturation(&has_bits);
          _impl_.saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sharpness = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sharpness(&has_bits);
          _impl_.sharpness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gain = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_gain(&has_bits);
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_focus = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_auto_focus(&has_bits);
          _impl_.auto_focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 focus = 15 [default = -1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_focus(&has_bits);
          _impl_.focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_exposure = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_auto_exposure(&has_bits);
          _impl_.auto_exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 exposure = 17 [default = 100];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_exposure(&has_bits);
          _impl_.exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_white_balance = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_auto_white_balance(&has_bits);
          _impl_.auto_white_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 white_balance = 19 [default = 4000];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_white_balance(&has_bits);
          _impl_.white_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bytes_per_pixel = 20 [default = 3];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_bytes_per_pixel(&has_bits);
          _impl_.bytes_per_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trigger_internal = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_trigger_internal(&has_bits);
          _impl_.trigger_internal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trigger_fps = 22 [default = 30];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_trigger_fps(&has_bits);
          _impl_.trigger_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name_image = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_channel_name_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.channel_name_image");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string channel_name_image_compressed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_channel_name_image_compressed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.smartereye.config.Config.channel_name_image_compressed");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 device_wait_ms = 26 [default = 2000];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_device_wait_ms(&has_bits);
          _impl_.device_wait_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spin_rate = 27 [default = 200];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_spin_rate(&has_bits);
          _impl_.spin_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.smartereye.config.OutputType output_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::smartereye::config::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::smartereye::config::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.smartereye.config.Config.CompressConfig compress_conf = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_compress_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.smartereye.config.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string camera_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_dev().data(), static_cast<int>(this->_internal_camera_dev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.camera_dev");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_dev(), target);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // optional string pixel_format = 3 [default = "yuyv"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pixel_format().data(), static_cast<int>(this->_internal_pixel_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.pixel_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pixel_format(), target);
  }

  // optional .apollo.drivers.smartereye.config.IOMethod io_method = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_io_method(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 frame_rate = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_frame_rate(), target);
  }

  // optional bool monochrome = 8 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_monochrome(), target);
  }

  // optional int32 brightness = 9 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_brightness(), target);
  }

  // optional int32 contrast = 10 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_contrast(), target);
  }

  // optional int32 saturation = 11 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_saturation(), target);
  }

  // optional int32 sharpness = 12 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sharpness(), target);
  }

  // optional int32 gain = 13 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_gain(), target);
  }

  // optional bool auto_focus = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_auto_focus(), target);
  }

  // optional int32 focus = 15 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_focus(), target);
  }

  // optional bool auto_exposure = 16 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_auto_exposure(), target);
  }

  // optional int32 exposure = 17 [default = 100];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_exposure(), target);
  }

  // optional bool auto_white_balance = 18 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_auto_white_balance(), target);
  }

  // optional int32 white_balance = 19 [default = 4000];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_white_balance(), target);
  }

  // optional uint32 bytes_per_pixel = 20 [default = 3];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bytes_per_pixel(), target);
  }

  // optional uint32 trigger_internal = 21 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_trigger_internal(), target);
  }

  // optional uint32 trigger_fps = 22 [default = 30];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_trigger_fps(), target);
  }

  // optional string channel_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.channel_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_channel_name(), target);
  }

  // optional string channel_name_image = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name_image().data(), static_cast<int>(this->_internal_channel_name_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.channel_name_image");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_channel_name_image(), target);
  }

  // optional string channel_name_image_compressed = 25;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name_image_compressed().data(), static_cast<int>(this->_internal_channel_name_image_compressed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.smartereye.config.Config.channel_name_image_compressed");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_channel_name_image_compressed(), target);
  }

  // optional uint32 device_wait_ms = 26 [default = 2000];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_device_wait_ms(), target);
  }

  // optional uint32 spin_rate = 27 [default = 200];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_spin_rate(), target);
  }

  // optional .apollo.drivers.smartereye.config.OutputType output_type = 28;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_output_type(), target);
  }

  // optional .apollo.drivers.smartereye.config.Config.CompressConfig compress_conf = 29;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::compress_conf(this),
        _Internal::compress_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.smartereye.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.smartereye.config.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_dev());
    }

    // optional string frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string pixel_format = 3 [default = "yuyv"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pixel_format());
    }

    // optional string channel_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string channel_name_image = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name_image());
    }

    // optional string channel_name_image_compressed = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name_image_compressed());
    }

    // optional .apollo.drivers.smartereye.config.Config.CompressConfig compress_conf = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.compress_conf_);
    }

    // optional .apollo.drivers.smartereye.config.IOMethod io_method = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_io_method());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 width = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 frame_rate = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_rate());
    }

    // optional bool monochrome = 8 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool auto_focus = 14 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 trigger_internal = 21 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_trigger_internal());
    }

    // optional .apollo.drivers.smartereye.config.OutputType output_type = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional uint32 spin_rate = 27 [default = 200];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_spin_rate());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 brightness = 9 [default = -1];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_brightness());
    }

    // optional int32 contrast = 10 [default = -1];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contrast());
    }

    // optional int32 saturation = 11 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_saturation());
    }

    // optional int32 sharpness = 12 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sharpness());
    }

    // optional int32 gain = 13 [default = -1];
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gain());
    }

    // optional int32 focus = 15 [default = -1];
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_focus());
    }

    // optional int32 exposure = 17 [default = 100];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_exposure());
    }

    // optional bool auto_exposure = 16 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional bool auto_white_balance = 18 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 white_balance = 19 [default = 4000];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_white_balance());
    }

    // optional uint32 bytes_per_pixel = 20 [default = 3];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bytes_per_pixel());
    }

    // optional uint32 trigger_fps = 22 [default = 30];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_trigger_fps());
    }

    // optional uint32 device_wait_ms = 26 [default = 2000];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_device_wait_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.smartereye.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_dev(from._internal_camera_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pixel_format(from._internal_pixel_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_channel_name_image(from._internal_channel_name_image());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_channel_name_image_compressed(from._internal_channel_name_image_compressed());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_compress_conf()->::apollo::drivers::smartereye::config::Config_CompressConfig::MergeFrom(from._internal_compress_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.io_method_ = from._impl_.io_method_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.frame_rate_ = from._impl_.frame_rate_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.monochrome_ = from._impl_.monochrome_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.auto_focus_ = from._impl_.auto_focus_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.trigger_internal_ = from._impl_.trigger_internal_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.output_type_ = from._impl_.output_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.spin_rate_ = from._impl_.spin_rate_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.brightness_ = from._impl_.brightness_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.contrast_ = from._impl_.contrast_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.saturation_ = from._impl_.saturation_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.sharpness_ = from._impl_.sharpness_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.gain_ = from._impl_.gain_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.focus_ = from._impl_.focus_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.exposure_ = from._impl_.exposure_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.auto_exposure_ = from._impl_.auto_exposure_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.auto_white_balance_ = from._impl_.auto_white_balance_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.white_balance_ = from._impl_.white_balance_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.bytes_per_pixel_ = from._impl_.bytes_per_pixel_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.trigger_fps_ = from._impl_.trigger_fps_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.device_wait_ms_ = from._impl_.device_wait_ms_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.smartereye.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camera_dev_, lhs_arena,
      &other->_impl_.camera_dev_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pixel_format_, lhs_arena,
      &other->_impl_.pixel_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_, lhs_arena,
      &other->_impl_.channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_image_, lhs_arena,
      &other->_impl_.channel_name_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channel_name_image_compressed_, lhs_arena,
      &other->_impl_.channel_name_image_compressed_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.output_type_)
      + sizeof(Config::_impl_.output_type_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.compress_conf_)>(
          reinterpret_cast<char*>(&_impl_.compress_conf_),
          reinterpret_cast<char*>(&other->_impl_.compress_conf_));
  swap(_impl_.spin_rate_, other->_impl_.spin_rate_);
  swap(_impl_.brightness_, other->_impl_.brightness_);
  swap(_impl_.contrast_, other->_impl_.contrast_);
  swap(_impl_.saturation_, other->_impl_.saturation_);
  swap(_impl_.sharpness_, other->_impl_.sharpness_);
  swap(_impl_.gain_, other->_impl_.gain_);
  swap(_impl_.focus_, other->_impl_.focus_);
  swap(_impl_.exposure_, other->_impl_.exposure_);
  swap(_impl_.auto_exposure_, other->_impl_.auto_exposure_);
  swap(_impl_.auto_white_balance_, other->_impl_.auto_white_balance_);
  swap(_impl_.white_balance_, other->_impl_.white_balance_);
  swap(_impl_.bytes_per_pixel_, other->_impl_.bytes_per_pixel_);
  swap(_impl_.trigger_fps_, other->_impl_.trigger_fps_);
  swap(_impl_.device_wait_ms_, other->_impl_.device_wait_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fsmartereye_2fproto_2fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace smartereye
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::smartereye::config::Config_CompressConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::smartereye::config::Config_CompressConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::smartereye::config::Config_CompressConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::smartereye::config::Config*
Arena::CreateMaybeMessage< ::apollo::drivers::smartereye::config::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::smartereye::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
