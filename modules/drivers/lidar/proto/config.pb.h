// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/lidar/proto/hesai_config.pb.h"
#include "modules/drivers/lidar/proto/velodyne_config.pb.h"
#include "modules/drivers/lidar/proto/lidar_parameter.pb.h"
#include "modules/drivers/lidar/proto/robosense_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto;
namespace apollo {
namespace drivers {
namespace lidar {
class config;
struct configDefaultTypeInternal;
extern configDefaultTypeInternal _config_default_instance_;
}  // namespace lidar
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::lidar::config* Arena::CreateMaybeMessage<::apollo::drivers::lidar::config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace lidar {

// ===================================================================

class config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.lidar.config) */ {
 public:
  inline config() : config(nullptr) {}
  ~config() override;
  explicit PROTOBUF_CONSTEXPR config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  config(const config& from);
  config(config&& from) noexcept
    : config() {
    *this = ::std::move(from);
  }

  inline config& operator=(const config& from) {
    CopyFrom(from);
    return *this;
  }
  inline config& operator=(config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const config& default_instance() {
    return *internal_default_instance();
  }
  static inline const config* internal_default_instance() {
    return reinterpret_cast<const config*>(
               &_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(config& a, config& b) {
    a.Swap(&b);
  }
  inline void Swap(config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.lidar.config";
  }
  protected:
  explicit config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHesaiFieldNumber = 2,
    kRobosenseFieldNumber = 3,
    kVelodyneFieldNumber = 4,
    kBrandFieldNumber = 1,
  };
  // optional .apollo.drivers.hesai.Config hesai = 2;
  bool has_hesai() const;
  private:
  bool _internal_has_hesai() const;
  public:
  void clear_hesai();
  const ::apollo::drivers::hesai::Config& hesai() const;
  PROTOBUF_NODISCARD ::apollo::drivers::hesai::Config* release_hesai();
  ::apollo::drivers::hesai::Config* mutable_hesai();
  void set_allocated_hesai(::apollo::drivers::hesai::Config* hesai);
  private:
  const ::apollo::drivers::hesai::Config& _internal_hesai() const;
  ::apollo::drivers::hesai::Config* _internal_mutable_hesai();
  public:
  void unsafe_arena_set_allocated_hesai(
      ::apollo::drivers::hesai::Config* hesai);
  ::apollo::drivers::hesai::Config* unsafe_arena_release_hesai();

  // optional .apollo.drivers.robosense.Config robosense = 3;
  bool has_robosense() const;
  private:
  bool _internal_has_robosense() const;
  public:
  void clear_robosense();
  const ::apollo::drivers::robosense::Config& robosense() const;
  PROTOBUF_NODISCARD ::apollo::drivers::robosense::Config* release_robosense();
  ::apollo::drivers::robosense::Config* mutable_robosense();
  void set_allocated_robosense(::apollo::drivers::robosense::Config* robosense);
  private:
  const ::apollo::drivers::robosense::Config& _internal_robosense() const;
  ::apollo::drivers::robosense::Config* _internal_mutable_robosense();
  public:
  void unsafe_arena_set_allocated_robosense(
      ::apollo::drivers::robosense::Config* robosense);
  ::apollo::drivers::robosense::Config* unsafe_arena_release_robosense();

  // optional .apollo.drivers.velodyne.Config velodyne = 4;
  bool has_velodyne() const;
  private:
  bool _internal_has_velodyne() const;
  public:
  void clear_velodyne();
  const ::apollo::drivers::velodyne::Config& velodyne() const;
  PROTOBUF_NODISCARD ::apollo::drivers::velodyne::Config* release_velodyne();
  ::apollo::drivers::velodyne::Config* mutable_velodyne();
  void set_allocated_velodyne(::apollo::drivers::velodyne::Config* velodyne);
  private:
  const ::apollo::drivers::velodyne::Config& _internal_velodyne() const;
  ::apollo::drivers::velodyne::Config* _internal_mutable_velodyne();
  public:
  void unsafe_arena_set_allocated_velodyne(
      ::apollo::drivers::velodyne::Config* velodyne);
  ::apollo::drivers::velodyne::Config* unsafe_arena_release_velodyne();

  // optional .apollo.drivers.lidar.LidarParameter.LidarBrand brand = 1;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  ::apollo::drivers::lidar::LidarParameter_LidarBrand brand() const;
  void set_brand(::apollo::drivers::lidar::LidarParameter_LidarBrand value);
  private:
  ::apollo::drivers::lidar::LidarParameter_LidarBrand _internal_brand() const;
  void _internal_set_brand(::apollo::drivers::lidar::LidarParameter_LidarBrand value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.lidar.config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::drivers::hesai::Config* hesai_;
    ::apollo::drivers::robosense::Config* robosense_;
    ::apollo::drivers::velodyne::Config* velodyne_;
    int brand_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// config

// optional .apollo.drivers.lidar.LidarParameter.LidarBrand brand = 1;
inline bool config::_internal_has_brand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool config::has_brand() const {
  return _internal_has_brand();
}
inline void config::clear_brand() {
  _impl_.brand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::lidar::LidarParameter_LidarBrand config::_internal_brand() const {
  return static_cast< ::apollo::drivers::lidar::LidarParameter_LidarBrand >(_impl_.brand_);
}
inline ::apollo::drivers::lidar::LidarParameter_LidarBrand config::brand() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar.config.brand)
  return _internal_brand();
}
inline void config::_internal_set_brand(::apollo::drivers::lidar::LidarParameter_LidarBrand value) {
  assert(::apollo::drivers::lidar::LidarParameter_LidarBrand_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.brand_ = value;
}
inline void config::set_brand(::apollo::drivers::lidar::LidarParameter_LidarBrand value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.lidar.config.brand)
}

// optional .apollo.drivers.hesai.Config hesai = 2;
inline bool config::_internal_has_hesai() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hesai_ != nullptr);
  return value;
}
inline bool config::has_hesai() const {
  return _internal_has_hesai();
}
inline const ::apollo::drivers::hesai::Config& config::_internal_hesai() const {
  const ::apollo::drivers::hesai::Config* p = _impl_.hesai_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::hesai::Config&>(
      ::apollo::drivers::hesai::_Config_default_instance_);
}
inline const ::apollo::drivers::hesai::Config& config::hesai() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar.config.hesai)
  return _internal_hesai();
}
inline void config::unsafe_arena_set_allocated_hesai(
    ::apollo::drivers::hesai::Config* hesai) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hesai_);
  }
  _impl_.hesai_ = hesai;
  if (hesai) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.lidar.config.hesai)
}
inline ::apollo::drivers::hesai::Config* config::release_hesai() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::hesai::Config* temp = _impl_.hesai_;
  _impl_.hesai_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::hesai::Config* config::unsafe_arena_release_hesai() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar.config.hesai)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::hesai::Config* temp = _impl_.hesai_;
  _impl_.hesai_ = nullptr;
  return temp;
}
inline ::apollo::drivers::hesai::Config* config::_internal_mutable_hesai() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.hesai_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::hesai::Config>(GetArenaForAllocation());
    _impl_.hesai_ = p;
  }
  return _impl_.hesai_;
}
inline ::apollo::drivers::hesai::Config* config::mutable_hesai() {
  ::apollo::drivers::hesai::Config* _msg = _internal_mutable_hesai();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar.config.hesai)
  return _msg;
}
inline void config::set_allocated_hesai(::apollo::drivers::hesai::Config* hesai) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hesai_);
  }
  if (hesai) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hesai));
    if (message_arena != submessage_arena) {
      hesai = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hesai, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hesai_ = hesai;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar.config.hesai)
}

// optional .apollo.drivers.robosense.Config robosense = 3;
inline bool config::_internal_has_robosense() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.robosense_ != nullptr);
  return value;
}
inline bool config::has_robosense() const {
  return _internal_has_robosense();
}
inline const ::apollo::drivers::robosense::Config& config::_internal_robosense() const {
  const ::apollo::drivers::robosense::Config* p = _impl_.robosense_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::robosense::Config&>(
      ::apollo::drivers::robosense::_Config_default_instance_);
}
inline const ::apollo::drivers::robosense::Config& config::robosense() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar.config.robosense)
  return _internal_robosense();
}
inline void config::unsafe_arena_set_allocated_robosense(
    ::apollo::drivers::robosense::Config* robosense) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robosense_);
  }
  _impl_.robosense_ = robosense;
  if (robosense) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.lidar.config.robosense)
}
inline ::apollo::drivers::robosense::Config* config::release_robosense() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::robosense::Config* temp = _impl_.robosense_;
  _impl_.robosense_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::robosense::Config* config::unsafe_arena_release_robosense() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar.config.robosense)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::robosense::Config* temp = _impl_.robosense_;
  _impl_.robosense_ = nullptr;
  return temp;
}
inline ::apollo::drivers::robosense::Config* config::_internal_mutable_robosense() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.robosense_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::robosense::Config>(GetArenaForAllocation());
    _impl_.robosense_ = p;
  }
  return _impl_.robosense_;
}
inline ::apollo::drivers::robosense::Config* config::mutable_robosense() {
  ::apollo::drivers::robosense::Config* _msg = _internal_mutable_robosense();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar.config.robosense)
  return _msg;
}
inline void config::set_allocated_robosense(::apollo::drivers::robosense::Config* robosense) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robosense_);
  }
  if (robosense) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robosense));
    if (message_arena != submessage_arena) {
      robosense = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robosense, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.robosense_ = robosense;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar.config.robosense)
}

// optional .apollo.drivers.velodyne.Config velodyne = 4;
inline bool config::_internal_has_velodyne() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velodyne_ != nullptr);
  return value;
}
inline bool config::has_velodyne() const {
  return _internal_has_velodyne();
}
inline const ::apollo::drivers::velodyne::Config& config::_internal_velodyne() const {
  const ::apollo::drivers::velodyne::Config* p = _impl_.velodyne_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::velodyne::Config&>(
      ::apollo::drivers::velodyne::_Config_default_instance_);
}
inline const ::apollo::drivers::velodyne::Config& config::velodyne() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.lidar.config.velodyne)
  return _internal_velodyne();
}
inline void config::unsafe_arena_set_allocated_velodyne(
    ::apollo::drivers::velodyne::Config* velodyne) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velodyne_);
  }
  _impl_.velodyne_ = velodyne;
  if (velodyne) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.lidar.config.velodyne)
}
inline ::apollo::drivers::velodyne::Config* config::release_velodyne() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::velodyne::Config* temp = _impl_.velodyne_;
  _impl_.velodyne_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::velodyne::Config* config::unsafe_arena_release_velodyne() {
  // @@protoc_insertion_point(field_release:apollo.drivers.lidar.config.velodyne)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::velodyne::Config* temp = _impl_.velodyne_;
  _impl_.velodyne_ = nullptr;
  return temp;
}
inline ::apollo::drivers::velodyne::Config* config::_internal_mutable_velodyne() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.velodyne_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::velodyne::Config>(GetArenaForAllocation());
    _impl_.velodyne_ = p;
  }
  return _impl_.velodyne_;
}
inline ::apollo::drivers::velodyne::Config* config::mutable_velodyne() {
  ::apollo::drivers::velodyne::Config* _msg = _internal_mutable_velodyne();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.lidar.config.velodyne)
  return _msg;
}
inline void config::set_allocated_velodyne(::apollo::drivers::velodyne::Config* velodyne) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velodyne_);
  }
  if (velodyne) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velodyne));
    if (message_arena != submessage_arena) {
      velodyne = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velodyne, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.velodyne_ = velodyne;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.lidar.config.velodyne)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto
