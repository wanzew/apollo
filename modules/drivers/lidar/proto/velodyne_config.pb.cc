// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/velodyne_config.proto

#include "modules/drivers/lidar/proto/velodyne_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace velodyne {
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scan_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pcap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibration_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.convert_channel_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.prefix_angle_)*/0
  , /*decltype(_impl_.firing_data_port_)*/0
  , /*decltype(_impl_.positioning_data_port_)*/0
  , /*decltype(_impl_.max_range_)*/0
  , /*decltype(_impl_.min_range_)*/0
  , /*decltype(_impl_.max_angle_)*/0
  , /*decltype(_impl_.min_angle_)*/0
  , /*decltype(_impl_.view_direction_)*/0
  , /*decltype(_impl_.view_width_)*/0
  , /*decltype(_impl_.use_sensor_sync_)*/false
  , /*decltype(_impl_.calibration_online_)*/false
  , /*decltype(_impl_.organized_)*/false
  , /*decltype(_impl_.use_gps_time_)*/false
  , /*decltype(_impl_.npackets_)*/0
  , /*decltype(_impl_.use_poll_sync_)*/false
  , /*decltype(_impl_.is_main_frame_)*/false
  , /*decltype(_impl_.mode_)*/1
  , /*decltype(_impl_.rpm_)*/600} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR FusionConfig::FusionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_channel_)*/{}
  , /*decltype(_impl_.fusion_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_interval_ms_)*/0u
  , /*decltype(_impl_.drop_expired_data_)*/false
  , /*decltype(_impl_.wait_time_s_)*/0} {}
struct FusionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FusionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FusionConfigDefaultTypeInternal() {}
  union {
    FusionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FusionConfigDefaultTypeInternal _FusionConfig_default_instance_;
PROTOBUF_CONSTEXPR CompensatorConfig::CompensatorConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.world_frame_id_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_cloud_size_)*/0u
  , /*decltype(_impl_.transform_query_timeout_)*/0.02f} {}
struct CompensatorConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompensatorConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompensatorConfigDefaultTypeInternal() {}
  union {
    CompensatorConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompensatorConfigDefaultTypeInternal _CompensatorConfig_default_instance_;
}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.scan_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.pcap_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.prefix_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.firing_data_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.positioning_data_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.use_sensor_sync_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.max_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.min_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.max_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.min_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.view_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.view_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.calibration_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.calibration_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.organized_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.convert_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.npackets_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.use_gps_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.use_poll_sync_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::Config, _impl_.is_main_frame_),
  0,
  1,
  23,
  5,
  22,
  2,
  6,
  7,
  8,
  15,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  3,
  17,
  4,
  19,
  18,
  20,
  21,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_.max_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_.drop_expired_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_.fusion_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_.input_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::FusionConfig, _impl_.wait_time_s_),
  1,
  2,
  0,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_.output_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_.transform_query_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_.world_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_.target_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::velodyne::CompensatorConfig, _impl_.point_cloud_size_),
  0,
  4,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, -1, sizeof(::apollo::drivers::velodyne::Config)},
  { 54, 65, -1, sizeof(::apollo::drivers::velodyne::FusionConfig)},
  { 70, 81, -1, sizeof(::apollo::drivers::velodyne::CompensatorConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::velodyne::_Config_default_instance_._instance,
  &::apollo::drivers::velodyne::_FusionConfig_default_instance_._instance,
  &::apollo::drivers::velodyne::_CompensatorConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/drivers/lidar/proto/velodyne_c"
  "onfig.proto\022\027apollo.drivers.velodyne\032*mo"
  "dules/drivers/lidar/proto/velodyne.proto"
  "\"\311\004\n\006Config\022\020\n\010frame_id\030\001 \001(\t\022\024\n\014scan_ch"
  "annel\030\002 \001(\t\022\020\n\003rpm\030\003 \001(\001:\003600\022-\n\005model\030\004"
  " \001(\0162\036.apollo.drivers.velodyne.Model\022+\n\004"
  "mode\030\025 \001(\0162\035.apollo.drivers.velodyne.Mod"
  "e\022\014\n\004pcap\030\005 \001(\t\022\024\n\014prefix_angle\030\006 \001(\005\022\030\n"
  "\020firing_data_port\030\007 \001(\005\022\035\n\025positioning_d"
  "ata_port\030\010 \001(\005\022\027\n\017use_sensor_sync\030\t \001(\010\022"
  "\021\n\tmax_range\030\n \001(\001\022\021\n\tmin_range\030\013 \001(\001\022\021\n"
  "\tmax_angle\030\014 \001(\001\022\021\n\tmin_angle\030\r \001(\001\022\026\n\016v"
  "iew_direction\030\016 \001(\001\022\022\n\nview_width\030\017 \001(\001\022"
  "\032\n\022calibration_online\030\020 \001(\010\022\030\n\020calibrati"
  "on_file\030\021 \001(\t\022\021\n\torganized\030\022 \001(\010\022\034\n\024conv"
  "ert_channel_name\030\023 \001(\t\022\020\n\010npackets\030\024 \001(\005"
  "\022\024\n\014use_gps_time\030\027 \001(\010\022\025\n\ruse_poll_sync\030"
  "\030 \001(\010\022\025\n\ris_main_frame\030\031 \001(\010\"\206\001\n\014FusionC"
  "onfig\022\027\n\017max_interval_ms\030\001 \001(\r\022\031\n\021drop_e"
  "xpired_data\030\002 \001(\010\022\026\n\016fusion_channel\030\003 \001("
  "\t\022\025\n\rinput_channel\030\004 \003(\t\022\023\n\013wait_time_s\030"
  "\005 \001(\002\"\244\001\n\021CompensatorConfig\022\026\n\016output_ch"
  "annel\030\001 \001(\t\022%\n\027transform_query_timeout\030\002"
  " \001(\002:\0040.02\022\035\n\016world_frame_id\030\003 \001(\t:\005worl"
  "d\022\027\n\017target_frame_id\030\004 \001(\t\022\030\n\020point_clou"
  "d_size\030\005 \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto = {
    false, false, 1012, descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto,
    "modules/drivers/lidar/proto/velodyne_config.proto",
    &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_once, descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto(&descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace velodyne {

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scan_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_pcap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefix_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_firing_data_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_positioning_data_port(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_sensor_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_range(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_view_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_calibration_online(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_calibration_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_organized(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_convert_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_npackets(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_use_gps_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_use_poll_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_main_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.velodyne.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.scan_channel_){}
    , decltype(_impl_.pcap_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.convert_channel_name_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.prefix_angle_){}
    , decltype(_impl_.firing_data_port_){}
    , decltype(_impl_.positioning_data_port_){}
    , decltype(_impl_.max_range_){}
    , decltype(_impl_.min_range_){}
    , decltype(_impl_.max_angle_){}
    , decltype(_impl_.min_angle_){}
    , decltype(_impl_.view_direction_){}
    , decltype(_impl_.view_width_){}
    , decltype(_impl_.use_sensor_sync_){}
    , decltype(_impl_.calibration_online_){}
    , decltype(_impl_.organized_){}
    , decltype(_impl_.use_gps_time_){}
    , decltype(_impl_.npackets_){}
    , decltype(_impl_.use_poll_sync_){}
    , decltype(_impl_.is_main_frame_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.rpm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.scan_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scan_channel()) {
    _impl_.scan_channel_.Set(from._internal_scan_channel(), 
      GetArenaForAllocation());
  }
  _impl_.pcap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pcap()) {
    _impl_.pcap_.Set(from._internal_pcap(), 
      GetArenaForAllocation());
  }
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calibration_file()) {
    _impl_.calibration_file_.Set(from._internal_calibration_file(), 
      GetArenaForAllocation());
  }
  _impl_.convert_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convert_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_convert_channel_name()) {
    _impl_.convert_channel_name_.Set(from._internal_convert_channel_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.model_, &from._impl_.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rpm_) -
    reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.velodyne.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.scan_channel_){}
    , decltype(_impl_.pcap_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.convert_channel_name_){}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.prefix_angle_){0}
    , decltype(_impl_.firing_data_port_){0}
    , decltype(_impl_.positioning_data_port_){0}
    , decltype(_impl_.max_range_){0}
    , decltype(_impl_.min_range_){0}
    , decltype(_impl_.max_angle_){0}
    , decltype(_impl_.min_angle_){0}
    , decltype(_impl_.view_direction_){0}
    , decltype(_impl_.view_width_){0}
    , decltype(_impl_.use_sensor_sync_){false}
    , decltype(_impl_.calibration_online_){false}
    , decltype(_impl_.organized_){false}
    , decltype(_impl_.use_gps_time_){false}
    , decltype(_impl_.npackets_){0}
    , decltype(_impl_.use_poll_sync_){false}
    , decltype(_impl_.is_main_frame_){false}
    , decltype(_impl_.mode_){1}
    , decltype(_impl_.rpm_){600}
  };
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scan_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pcap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.convert_channel_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convert_channel_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.velodyne.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_id_.Destroy();
  _impl_.scan_channel_.Destroy();
  _impl_.pcap_.Destroy();
  _impl_.calibration_file_.Destroy();
  _impl_.convert_channel_name_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.velodyne.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.scan_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pcap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.calibration_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.convert_channel_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.model_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.firing_data_port_) -
        reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.firing_data_port_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.positioning_data_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_sensor_sync_) -
        reinterpret_cast<char*>(&_impl_.positioning_data_port_)) + sizeof(_impl_.use_sensor_sync_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.calibration_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_main_frame_) -
        reinterpret_cast<char*>(&_impl_.calibration_online_)) + sizeof(_impl_.is_main_frame_));
    _impl_.mode_ = 1;
    _impl_.rpm_ = 600;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.Config.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string scan_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_scan_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.Config.scan_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double rpm = 3 [default = 600];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_rpm(&has_bits);
          _impl_.rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.velodyne.Model model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::velodyne::Model_IsValid(val))) {
            _internal_set_model(static_cast<::apollo::drivers::velodyne::Model>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string pcap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pcap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.Config.pcap");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 prefix_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_prefix_angle(&has_bits);
          _impl_.prefix_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 firing_data_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_firing_data_port(&has_bits);
          _impl_.firing_data_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 positioning_data_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_positioning_data_port(&has_bits);
          _impl_.positioning_data_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_sensor_sync = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_use_sensor_sync(&has_bits);
          _impl_.use_sensor_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_max_range(&has_bits);
          _impl_.max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_min_range(&has_bits);
          _impl_.min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_max_angle(&has_bits);
          _impl_.max_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_min_angle(&has_bits);
          _impl_.min_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_direction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_view_direction(&has_bits);
          _impl_.view_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_width = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_view_width(&has_bits);
          _impl_.view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool calibration_online = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_calibration_online(&has_bits);
          _impl_.calibration_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calibration_file = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_calibration_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.Config.calibration_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool organized = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_organized(&has_bits);
          _impl_.organized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string convert_channel_name = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_convert_channel_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.Config.convert_channel_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 npackets = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_npackets(&has_bits);
          _impl_.npackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.velodyne.Mode mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::velodyne::Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::apollo::drivers::velodyne::Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool use_gps_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_gps_time(&has_bits);
          _impl_.use_gps_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_poll_sync = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_use_poll_sync(&has_bits);
          _impl_.use_poll_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_main_frame = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_is_main_frame(&has_bits);
          _impl_.is_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.velodyne.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string frame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.Config.frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_id(), target);
  }

  // optional string scan_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scan_channel().data(), static_cast<int>(this->_internal_scan_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.Config.scan_channel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scan_channel(), target);
  }

  // optional double rpm = 3 [default = 600];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rpm(), target);
  }

  // optional .apollo.drivers.velodyne.Model model = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_model(), target);
  }

  // optional string pcap = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pcap().data(), static_cast<int>(this->_internal_pcap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.Config.pcap");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pcap(), target);
  }

  // optional int32 prefix_angle = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_prefix_angle(), target);
  }

  // optional int32 firing_data_port = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_firing_data_port(), target);
  }

  // optional int32 positioning_data_port = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_positioning_data_port(), target);
  }

  // optional bool use_sensor_sync = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_use_sensor_sync(), target);
  }

  // optional double max_range = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_range(), target);
  }

  // optional double min_range = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_min_range(), target);
  }

  // optional double max_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_angle(), target);
  }

  // optional double min_angle = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_angle(), target);
  }

  // optional double view_direction = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_view_direction(), target);
  }

  // optional double view_width = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_view_width(), target);
  }

  // optional bool calibration_online = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_calibration_online(), target);
  }

  // optional string calibration_file = 17;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_file().data(), static_cast<int>(this->_internal_calibration_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.Config.calibration_file");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_calibration_file(), target);
  }

  // optional bool organized = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_organized(), target);
  }

  // optional string convert_channel_name = 19;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_convert_channel_name().data(), static_cast<int>(this->_internal_convert_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.Config.convert_channel_name");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_convert_channel_name(), target);
  }

  // optional int32 npackets = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_npackets(), target);
  }

  // optional .apollo.drivers.velodyne.Mode mode = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_mode(), target);
  }

  // optional bool use_gps_time = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_use_gps_time(), target);
  }

  // optional bool use_poll_sync = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_use_poll_sync(), target);
  }

  // optional bool is_main_frame = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_main_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.velodyne.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.velodyne.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string frame_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string scan_channel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scan_channel());
    }

    // optional string pcap = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pcap());
    }

    // optional string calibration_file = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_file());
    }

    // optional string convert_channel_name = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_convert_channel_name());
    }

    // optional .apollo.drivers.velodyne.Model model = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
    }

    // optional int32 prefix_angle = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prefix_angle());
    }

    // optional int32 firing_data_port = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_firing_data_port());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 positioning_data_port = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_positioning_data_port());
    }

    // optional double max_range = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double min_range = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double max_angle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double min_angle = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double view_direction = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double view_width = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional bool use_sensor_sync = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool calibration_online = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool organized = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool use_gps_time = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 npackets = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_npackets());
    }

    // optional bool use_poll_sync = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool is_main_frame = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.drivers.velodyne.Mode mode = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional double rpm = 3 [default = 600];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.velodyne.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_scan_channel(from._internal_scan_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pcap(from._internal_pcap());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_calibration_file(from._internal_calibration_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_convert_channel_name(from._internal_convert_channel_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.model_ = from._impl_.model_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.prefix_angle_ = from._impl_.prefix_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.firing_data_port_ = from._impl_.firing_data_port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.positioning_data_port_ = from._impl_.positioning_data_port_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.max_range_ = from._impl_.max_range_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.min_range_ = from._impl_.min_range_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.max_angle_ = from._impl_.max_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.min_angle_ = from._impl_.min_angle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.view_direction_ = from._impl_.view_direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.view_width_ = from._impl_.view_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.use_sensor_sync_ = from._impl_.use_sensor_sync_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.calibration_online_ = from._impl_.calibration_online_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.organized_ = from._impl_.organized_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.use_gps_time_ = from._impl_.use_gps_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.npackets_ = from._impl_.npackets_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.use_poll_sync_ = from._impl_.use_poll_sync_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.is_main_frame_ = from._impl_.is_main_frame_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.rpm_ = from._impl_.rpm_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.velodyne.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scan_channel_, lhs_arena,
      &other->_impl_.scan_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pcap_, lhs_arena,
      &other->_impl_.pcap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibration_file_, lhs_arena,
      &other->_impl_.calibration_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convert_channel_name_, lhs_arena,
      &other->_impl_.convert_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.is_main_frame_)
      + sizeof(Config::_impl_.is_main_frame_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
  swap(_impl_.mode_, other->_impl_.mode_);
  swap(_impl_.rpm_, other->_impl_.rpm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto[0]);
}

// ===================================================================

class FusionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FusionConfig>()._impl_._has_bits_);
  static void set_has_max_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drop_expired_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fusion_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wait_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FusionConfig::FusionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.velodyne.FusionConfig)
}
FusionConfig::FusionConfig(const FusionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_channel_){from._impl_.input_channel_}
    , decltype(_impl_.fusion_channel_){}
    , decltype(_impl_.max_interval_ms_){}
    , decltype(_impl_.drop_expired_data_){}
    , decltype(_impl_.wait_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fusion_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fusion_channel()) {
    _impl_.fusion_channel_.Set(from._internal_fusion_channel(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_interval_ms_, &from._impl_.max_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wait_time_s_) -
    reinterpret_cast<char*>(&_impl_.max_interval_ms_)) + sizeof(_impl_.wait_time_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.velodyne.FusionConfig)
}

inline void FusionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_channel_){arena}
    , decltype(_impl_.fusion_channel_){}
    , decltype(_impl_.max_interval_ms_){0u}
    , decltype(_impl_.drop_expired_data_){false}
    , decltype(_impl_.wait_time_s_){0}
  };
  _impl_.fusion_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fusion_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FusionConfig::~FusionConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.velodyne.FusionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FusionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_channel_.~RepeatedPtrField();
  _impl_.fusion_channel_.Destroy();
}

void FusionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FusionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.velodyne.FusionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_channel_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.fusion_channel_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.max_interval_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wait_time_s_) -
        reinterpret_cast<char*>(&_impl_.max_interval_ms_)) + sizeof(_impl_.wait_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_interval_ms(&has_bits);
          _impl_.max_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool drop_expired_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_drop_expired_data(&has_bits);
          _impl_.drop_expired_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fusion_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fusion_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.FusionConfig.fusion_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string input_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_channel();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.FusionConfig.input_channel");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float wait_time_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_wait_time_s(&has_bits);
          _impl_.wait_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.velodyne.FusionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 max_interval_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_interval_ms(), target);
  }

  // optional bool drop_expired_data = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_drop_expired_data(), target);
  }

  // optional string fusion_channel = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fusion_channel().data(), static_cast<int>(this->_internal_fusion_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.FusionConfig.fusion_channel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fusion_channel(), target);
  }

  // repeated string input_channel = 4;
  for (int i = 0, n = this->_internal_input_channel_size(); i < n; i++) {
    const auto& s = this->_internal_input_channel(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.FusionConfig.input_channel");
    target = stream->WriteString(4, s, target);
  }

  // optional float wait_time_s = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_wait_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.velodyne.FusionConfig)
  return target;
}

size_t FusionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.velodyne.FusionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_channel = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_channel_.size());
  for (int i = 0, n = _impl_.input_channel_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_channel_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string fusion_channel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fusion_channel());
    }

    // optional uint32 max_interval_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_interval_ms());
    }

    // optional bool drop_expired_data = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float wait_time_s = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionConfig::GetClassData() const { return &_class_data_; }

void FusionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionConfig *>(to)->MergeFrom(
      static_cast<const FusionConfig &>(from));
}


void FusionConfig::MergeFrom(const FusionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.velodyne.FusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.input_channel_.MergeFrom(from._impl_.input_channel_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fusion_channel(from._internal_fusion_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_interval_ms_ = from._impl_.max_interval_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.drop_expired_data_ = from._impl_.drop_expired_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.wait_time_s_ = from._impl_.wait_time_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionConfig::CopyFrom(const FusionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.velodyne.FusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionConfig::IsInitialized() const {
  return true;
}

void FusionConfig::InternalSwap(FusionConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_channel_.InternalSwap(&other->_impl_.input_channel_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fusion_channel_, lhs_arena,
      &other->_impl_.fusion_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionConfig, _impl_.wait_time_s_)
      + sizeof(FusionConfig::_impl_.wait_time_s_)
      - PROTOBUF_FIELD_OFFSET(FusionConfig, _impl_.max_interval_ms_)>(
          reinterpret_cast<char*>(&_impl_.max_interval_ms_),
          reinterpret_cast<char*>(&other->_impl_.max_interval_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto[1]);
}

// ===================================================================

class CompensatorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CompensatorConfig>()._impl_._has_bits_);
  static void set_has_output_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transform_query_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_world_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_point_cloud_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CompensatorConfig::Impl_::_i_give_permission_to_break_this_code_default_world_frame_id_{{{"world", 5}}, {nullptr}};
CompensatorConfig::CompensatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.velodyne.CompensatorConfig)
}
CompensatorConfig::CompensatorConfig(const CompensatorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_channel_){}
    , decltype(_impl_.world_frame_id_){}
    , decltype(_impl_.target_frame_id_){}
    , decltype(_impl_.point_cloud_size_){}
    , decltype(_impl_.transform_query_timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_channel()) {
    _impl_.output_channel_.Set(from._internal_output_channel(), 
      GetArenaForAllocation());
  }
  _impl_.world_frame_id_.InitDefault();
  if (from._internal_has_world_frame_id()) {
    _impl_.world_frame_id_.Set(from._internal_world_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.target_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_frame_id()) {
    _impl_.target_frame_id_.Set(from._internal_target_frame_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.point_cloud_size_, &from._impl_.point_cloud_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transform_query_timeout_) -
    reinterpret_cast<char*>(&_impl_.point_cloud_size_)) + sizeof(_impl_.transform_query_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.velodyne.CompensatorConfig)
}

inline void CompensatorConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.output_channel_){}
    , decltype(_impl_.world_frame_id_){}
    , decltype(_impl_.target_frame_id_){}
    , decltype(_impl_.point_cloud_size_){0u}
    , decltype(_impl_.transform_query_timeout_){0.02f}
  };
  _impl_.output_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.world_frame_id_.InitDefault();
  _impl_.target_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompensatorConfig::~CompensatorConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.velodyne.CompensatorConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompensatorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_channel_.Destroy();
  _impl_.world_frame_id_.Destroy();
  _impl_.target_frame_id_.Destroy();
}

void CompensatorConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompensatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.velodyne.CompensatorConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.output_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.world_frame_id_.ClearToDefault(::apollo::drivers::velodyne::CompensatorConfig::Impl_::_i_give_permission_to_break_this_code_default_world_frame_id_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.target_frame_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.point_cloud_size_ = 0u;
    _impl_.transform_query_timeout_ = 0.02f;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompensatorConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.CompensatorConfig.output_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float transform_query_timeout = 2 [default = 0.02];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_transform_query_timeout(&has_bits);
          _impl_.transform_query_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string world_frame_id = 3 [default = "world"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_world_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.CompensatorConfig.world_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string target_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.velodyne.CompensatorConfig.target_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 point_cloud_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_point_cloud_size(&has_bits);
          _impl_.point_cloud_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompensatorConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.velodyne.CompensatorConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string output_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel().data(), static_cast<int>(this->_internal_output_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.CompensatorConfig.output_channel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_channel(), target);
  }

  // optional float transform_query_timeout = 2 [default = 0.02];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_transform_query_timeout(), target);
  }

  // optional string world_frame_id = 3 [default = "world"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_world_frame_id().data(), static_cast<int>(this->_internal_world_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.CompensatorConfig.world_frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_world_frame_id(), target);
  }

  // optional string target_frame_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_frame_id().data(), static_cast<int>(this->_internal_target_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.velodyne.CompensatorConfig.target_frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_frame_id(), target);
  }

  // optional uint32 point_cloud_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_point_cloud_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.velodyne.CompensatorConfig)
  return target;
}

size_t CompensatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.velodyne.CompensatorConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string output_channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel());
    }

    // optional string world_frame_id = 3 [default = "world"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_world_frame_id());
    }

    // optional string target_frame_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_frame_id());
    }

    // optional uint32 point_cloud_size = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point_cloud_size());
    }

    // optional float transform_query_timeout = 2 [default = 0.02];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompensatorConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompensatorConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompensatorConfig::GetClassData() const { return &_class_data_; }

void CompensatorConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompensatorConfig *>(to)->MergeFrom(
      static_cast<const CompensatorConfig &>(from));
}


void CompensatorConfig::MergeFrom(const CompensatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.velodyne.CompensatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_output_channel(from._internal_output_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_world_frame_id(from._internal_world_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_target_frame_id(from._internal_target_frame_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.point_cloud_size_ = from._impl_.point_cloud_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.transform_query_timeout_ = from._impl_.transform_query_timeout_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompensatorConfig::CopyFrom(const CompensatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.velodyne.CompensatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompensatorConfig::IsInitialized() const {
  return true;
}

void CompensatorConfig::InternalSwap(CompensatorConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_channel_, lhs_arena,
      &other->_impl_.output_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.world_frame_id_, lhs_arena,
      &other->_impl_.world_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_frame_id_, lhs_arena,
      &other->_impl_.target_frame_id_, rhs_arena
  );
  swap(_impl_.point_cloud_size_, other->_impl_.point_cloud_size_);
  swap(_impl_.transform_query_timeout_, other->_impl_.transform_query_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompensatorConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::velodyne::Config*
Arena::CreateMaybeMessage< ::apollo::drivers::velodyne::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::velodyne::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::velodyne::FusionConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::velodyne::FusionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::velodyne::FusionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::velodyne::CompensatorConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::velodyne::CompensatorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::velodyne::CompensatorConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
