// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/hesai_config.proto

#include "modules/drivers/lidar/proto/hesai_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace hesai {
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pointcloud_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scan_channel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.calibration_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.lidar_recv_port_)*/0u
  , /*decltype(_impl_.gps_recv_port_)*/0u
  , /*decltype(_impl_.start_angle_)*/0u
  , /*decltype(_impl_.time_zone_)*/0u
  , /*decltype(_impl_.is_online_calibration_)*/true
  , /*decltype(_impl_.tcp_cmd_port_)*/9347u} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace hesai
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.lidar_recv_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.gps_recv_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.start_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.pointcloud_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.time_zone_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.scan_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.is_online_calibration_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.calibration_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::hesai::Config, _impl_.tcp_cmd_port_),
  5,
  0,
  6,
  7,
  8,
  1,
  9,
  2,
  3,
  10,
  4,
  11,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::apollo::drivers::hesai::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::hesai::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/drivers/lidar/proto/hesai_conf"
  "ig.proto\022\024apollo.drivers.hesai\032\'modules/"
  "drivers/lidar/proto/hesai.proto\"\306\002\n\006Conf"
  "ig\022*\n\005model\030\001 \001(\0162\033.apollo.drivers.hesai"
  ".Model\022\031\n\002ip\030\002 \001(\t:\r192.168.20.13\022\027\n\017lid"
  "ar_recv_port\030\003 \001(\r\022\025\n\rgps_recv_port\030\004 \001("
  "\r\022\023\n\013start_angle\030\005 \001(\r\022\032\n\022pointcloud_cha"
  "nnel\030\006 \001(\t\022\021\n\ttime_zone\030\007 \001(\r\022\020\n\010frame_i"
  "d\030\010 \001(\t\022\024\n\014scan_channel\030\t \001(\t\022#\n\025is_onli"
  "ne_calibration\030\013 \001(\010:\004true\022\030\n\020calibratio"
  "n_file\030\014 \001(\t\022\032\n\014tcp_cmd_port\030\r \001(\r:\0049347"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto = {
    false, false, 440, descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto,
    "modules/drivers/lidar/proto/hesai_config.proto",
    &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_once, descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto(&descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace hesai {

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lidar_recv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gps_recv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pointcloud_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scan_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_online_calibration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_calibration_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tcp_cmd_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Config::Impl_::_i_give_permission_to_break_this_code_default_ip_{{{"192.168.20.13", 13}}, {nullptr}};
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.hesai.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.pointcloud_channel_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.scan_channel_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.lidar_recv_port_){}
    , decltype(_impl_.gps_recv_port_){}
    , decltype(_impl_.start_angle_){}
    , decltype(_impl_.time_zone_){}
    , decltype(_impl_.is_online_calibration_){}
    , decltype(_impl_.tcp_cmd_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  if (from._internal_has_ip()) {
    _impl_.ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  _impl_.pointcloud_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pointcloud_channel()) {
    _impl_.pointcloud_channel_.Set(from._internal_pointcloud_channel(), 
      GetArenaForAllocation());
  }
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.scan_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scan_channel()) {
    _impl_.scan_channel_.Set(from._internal_scan_channel(), 
      GetArenaForAllocation());
  }
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_calibration_file()) {
    _impl_.calibration_file_.Set(from._internal_calibration_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.model_, &from._impl_.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tcp_cmd_port_) -
    reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.tcp_cmd_port_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.hesai.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.pointcloud_channel_){}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.scan_channel_){}
    , decltype(_impl_.calibration_file_){}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.lidar_recv_port_){0u}
    , decltype(_impl_.gps_recv_port_){0u}
    , decltype(_impl_.start_angle_){0u}
    , decltype(_impl_.time_zone_){0u}
    , decltype(_impl_.is_online_calibration_){true}
    , decltype(_impl_.tcp_cmd_port_){9347u}
  };
  _impl_.ip_.InitDefault();
  _impl_.pointcloud_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scan_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_channel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.calibration_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.calibration_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.hesai.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.pointcloud_channel_.Destroy();
  _impl_.frame_id_.Destroy();
  _impl_.scan_channel_.Destroy();
  _impl_.calibration_file_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.hesai.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ip_.ClearToDefault(::apollo::drivers::hesai::Config::Impl_::_i_give_permission_to_break_this_code_default_ip_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pointcloud_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.scan_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.calibration_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.model_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gps_recv_port_) -
        reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.gps_recv_port_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.start_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_zone_) -
        reinterpret_cast<char*>(&_impl_.start_angle_)) + sizeof(_impl_.time_zone_));
    _impl_.is_online_calibration_ = true;
    _impl_.tcp_cmd_port_ = 9347u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.hesai.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::hesai::Model_IsValid(val))) {
            _internal_set_model(static_cast<::apollo::drivers::hesai::Model>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string ip = 2 [default = "192.168.20.13"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.hesai.Config.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lidar_recv_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lidar_recv_port(&has_bits);
          _impl_.lidar_recv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gps_recv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gps_recv_port(&has_bits);
          _impl_.gps_recv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_angle(&has_bits);
          _impl_.start_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pointcloud_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pointcloud_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.hesai.Config.pointcloud_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_zone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_time_zone(&has_bits);
          _impl_.time_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.hesai.Config.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string scan_channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_scan_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.hesai.Config.scan_channel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_online_calibration = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_online_calibration(&has_bits);
          _impl_.is_online_calibration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calibration_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_calibration_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.hesai.Config.calibration_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tcp_cmd_port = 13 [default = 9347];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tcp_cmd_port(&has_bits);
          _impl_.tcp_cmd_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.hesai.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.hesai.Model model = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // optional string ip = 2 [default = "192.168.20.13"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.hesai.Config.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional uint32 lidar_recv_port = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lidar_recv_port(), target);
  }

  // optional uint32 gps_recv_port = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gps_recv_port(), target);
  }

  // optional uint32 start_angle = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_angle(), target);
  }

  // optional string pointcloud_channel = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pointcloud_channel().data(), static_cast<int>(this->_internal_pointcloud_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.hesai.Config.pointcloud_channel");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pointcloud_channel(), target);
  }

  // optional uint32 time_zone = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_time_zone(), target);
  }

  // optional string frame_id = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.hesai.Config.frame_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_frame_id(), target);
  }

  // optional string scan_channel = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scan_channel().data(), static_cast<int>(this->_internal_scan_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.hesai.Config.scan_channel");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_scan_channel(), target);
  }

  // optional bool is_online_calibration = 11 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_online_calibration(), target);
  }

  // optional string calibration_file = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_file().data(), static_cast<int>(this->_internal_calibration_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.hesai.Config.calibration_file");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_calibration_file(), target);
  }

  // optional uint32 tcp_cmd_port = 13 [default = 9347];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tcp_cmd_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.hesai.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.hesai.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ip = 2 [default = "192.168.20.13"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional string pointcloud_channel = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pointcloud_channel());
    }

    // optional string frame_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string scan_channel = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scan_channel());
    }

    // optional string calibration_file = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_file());
    }

    // optional .apollo.drivers.hesai.Model model = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
    }

    // optional uint32 lidar_recv_port = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lidar_recv_port());
    }

    // optional uint32 gps_recv_port = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gps_recv_port());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 start_angle = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_angle());
    }

    // optional uint32 time_zone = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_zone());
    }

    // optional bool is_online_calibration = 11 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 tcp_cmd_port = 13 [default = 9347];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcp_cmd_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.hesai.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pointcloud_channel(from._internal_pointcloud_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_scan_channel(from._internal_scan_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_calibration_file(from._internal_calibration_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.model_ = from._impl_.model_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lidar_recv_port_ = from._impl_.lidar_recv_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.gps_recv_port_ = from._impl_.gps_recv_port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.start_angle_ = from._impl_.start_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.time_zone_ = from._impl_.time_zone_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.is_online_calibration_ = from._impl_.is_online_calibration_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.tcp_cmd_port_ = from._impl_.tcp_cmd_port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.hesai.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pointcloud_channel_, lhs_arena,
      &other->_impl_.pointcloud_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scan_channel_, lhs_arena,
      &other->_impl_.scan_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.calibration_file_, lhs_arena,
      &other->_impl_.calibration_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.time_zone_)
      + sizeof(Config::_impl_.time_zone_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
  swap(_impl_.is_online_calibration_, other->_impl_.is_online_calibration_);
  swap(_impl_.tcp_cmd_port_, other->_impl_.tcp_cmd_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hesai
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::hesai::Config*
Arena::CreateMaybeMessage< ::apollo::drivers::hesai::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::hesai::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
