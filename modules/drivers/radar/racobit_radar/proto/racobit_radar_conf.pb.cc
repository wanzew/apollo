// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.proto

#include "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace racobit_radar {
PROTOBUF_CONSTEXPR CanConf::CanConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.can_card_parameter_)*/nullptr
  , /*decltype(_impl_.enable_debug_mode_)*/false
  , /*decltype(_impl_.enable_receiver_log_)*/false
  , /*decltype(_impl_.enable_sender_log_)*/false} {}
struct CanConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanConfDefaultTypeInternal() {}
  union {
    CanConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanConfDefaultTypeInternal _CanConf_default_instance_;
PROTOBUF_CONSTEXPR RadarConf::RadarConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_distance_valid_)*/false
  , /*decltype(_impl_.sensor_id_valid_)*/false
  , /*decltype(_impl_.radar_power_valid_)*/false
  , /*decltype(_impl_.sort_index_valid_)*/false
  , /*decltype(_impl_.ctrl_relay_valid_)*/false
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.radar_power_)*/0u
  , /*decltype(_impl_.ctrl_relay_)*/0u
  , /*decltype(_impl_.sort_index_)*/0u
  , /*decltype(_impl_.rcs_threshold_)*/0
  , /*decltype(_impl_.store_in_nvm_)*/1u
  , /*decltype(_impl_.output_type_valid_)*/true
  , /*decltype(_impl_.send_quality_valid_)*/true
  , /*decltype(_impl_.send_ext_info_valid_)*/true
  , /*decltype(_impl_.store_in_nvm_valid_)*/true
  , /*decltype(_impl_.max_distance_)*/248u
  , /*decltype(_impl_.output_type_)*/1
  , /*decltype(_impl_.rcs_threshold_valid_)*/true
  , /*decltype(_impl_.send_ext_info_)*/true
  , /*decltype(_impl_.send_quality_)*/true} {}
struct RadarConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarConfDefaultTypeInternal() {}
  union {
    RadarConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarConfDefaultTypeInternal _RadarConf_default_instance_;
PROTOBUF_CONSTEXPR RacobitRadarConf::RacobitRadarConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.can_conf_)*/nullptr
  , /*decltype(_impl_.radar_conf_)*/nullptr} {}
struct RacobitRadarConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RacobitRadarConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RacobitRadarConfDefaultTypeInternal() {}
  union {
    RacobitRadarConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RacobitRadarConfDefaultTypeInternal _RacobitRadarConf_default_instance_;
}  // namespace racobit_radar
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _impl_.can_card_parameter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _impl_.enable_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _impl_.enable_receiver_log_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _impl_.enable_sender_log_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.max_distance_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.sensor_id_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.radar_power_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.output_type_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.send_quality_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.send_ext_info_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.sort_index_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.store_in_nvm_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.ctrl_relay_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.rcs_threshold_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.radar_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.ctrl_relay_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.send_ext_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.send_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.sort_index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.store_in_nvm_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _impl_.rcs_threshold_),
  0,
  1,
  2,
  11,
  12,
  13,
  3,
  14,
  4,
  17,
  15,
  5,
  16,
  6,
  7,
  18,
  19,
  8,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _impl_.can_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _impl_.radar_conf_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::drivers::racobit_radar::CanConf)},
  { 14, 40, -1, sizeof(::apollo::drivers::racobit_radar::RadarConf)},
  { 60, 68, -1, sizeof(::apollo::drivers::racobit_radar::RacobitRadarConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::racobit_radar::_CanConf_default_instance_._instance,
  &::apollo::drivers::racobit_radar::_RadarConf_default_instance_._instance,
  &::apollo::drivers::racobit_radar::_RacobitRadarConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBmodules/drivers/radar/racobit_radar/pr"
  "oto/racobit_radar_conf.proto\022\034apollo.dri"
  "vers.racobit_radar\0325modules/drivers/canb"
  "us/proto/can_card_parameter.proto\"\266\001\n\007Ca"
  "nConf\022C\n\022can_card_parameter\030\001 \001(\0132\'.apol"
  "lo.drivers.canbus.CANCardParameter\022 \n\021en"
  "able_debug_mode\030\002 \001(\010:\005false\022\"\n\023enable_r"
  "eceiver_log\030\003 \001(\010:\005false\022 \n\021enable_sende"
  "r_log\030\004 \001(\010:\005false\"\325\005\n\tRadarConf\022!\n\022max_"
  "distance_valid\030\001 \001(\010:\005false\022\036\n\017sensor_id"
  "_valid\030\002 \001(\010:\005false\022 \n\021radar_power_valid"
  "\030\003 \001(\010:\005false\022\037\n\021output_type_valid\030\004 \001(\010"
  ":\004true\022 \n\022send_quality_valid\030\005 \001(\010:\004true"
  "\022!\n\023send_ext_info_valid\030\006 \001(\010:\004true\022\037\n\020s"
  "ort_index_valid\030\007 \001(\010:\005false\022 \n\022store_in"
  "_nvm_valid\030\010 \001(\010:\004true\022\037\n\020ctrl_relay_val"
  "id\030\t \001(\010:\005false\022!\n\023rcs_threshold_valid\030\n"
  " \001(\010:\004true\022\031\n\014max_distance\030\013 \001(\r:\003248\022\024\n"
  "\tsensor_id\030\014 \001(\r:\0010\022R\n\013output_type\030\r \001(\016"
  "2(.apollo.drivers.racobit_radar.OutputTy"
  "pe:\023OUTPUT_TYPE_OBJECTS\022\026\n\013radar_power\030\016"
  " \001(\r:\0010\022\025\n\nctrl_relay\030\017 \001(\r:\0010\022\033\n\rsend_e"
  "xt_info\030\020 \001(\010:\004true\022\032\n\014send_quality\030\021 \001("
  "\010:\004true\022\025\n\nsort_index\030\022 \001(\r:\0010\022\027\n\014store_"
  "in_nvm\030\023 \001(\r:\0011\022Y\n\rrcs_threshold\030\024 \001(\0162*"
  ".apollo.drivers.racobit_radar.RcsThresho"
  "ld:\026RCS_THRESHOLD_STANDARD\"\210\001\n\020RacobitRa"
  "darConf\0227\n\010can_conf\030\001 \001(\0132%.apollo.drive"
  "rs.racobit_radar.CanConf\022;\n\nradar_conf\030\002"
  " \001(\0132\'.apollo.drivers.racobit_radar.Rada"
  "rConf*l\n\nOutputType\022\024\n\020OUTPUT_TYPE_NONE\020"
  "\000\022\027\n\023OUTPUT_TYPE_OBJECTS\020\001\022\030\n\024OUTPUT_TYP"
  "E_CLUSTERS\020\002\022\025\n\021OUTPUT_TYPE_ERROR\020\003*g\n\014R"
  "csThreshold\022\032\n\026RCS_THRESHOLD_STANDARD\020\000\022"
  "\"\n\036RCS_THRESHOLD_HIGH_SENSITIVITY\020\001\022\027\n\023R"
  "CS_THRESHOLD_ERROR\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto = {
    false, false, 1420, descriptor_table_protodef_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto,
    "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.proto",
    &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_once, descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto(&descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto);
namespace apollo {
namespace drivers {
namespace racobit_radar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[0];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RcsThreshold_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[1];
}
bool RcsThreshold_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CanConf::_Internal {
 public:
  using HasBits = decltype(std::declval<CanConf>()._impl_._has_bits_);
  static const ::apollo::drivers::canbus::CANCardParameter& can_card_parameter(const CanConf* msg);
  static void set_has_can_card_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_debug_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_receiver_log(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_sender_log(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::drivers::canbus::CANCardParameter&
CanConf::_Internal::can_card_parameter(const CanConf* msg) {
  return *msg->_impl_.can_card_parameter_;
}
void CanConf::clear_can_card_parameter() {
  if (_impl_.can_card_parameter_ != nullptr) _impl_.can_card_parameter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CanConf::CanConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.racobit_radar.CanConf)
}
CanConf::CanConf(const CanConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.can_card_parameter_){nullptr}
    , decltype(_impl_.enable_debug_mode_){}
    , decltype(_impl_.enable_receiver_log_){}
    , decltype(_impl_.enable_sender_log_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_can_card_parameter()) {
    _impl_.can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter(*from._impl_.can_card_parameter_);
  }
  ::memcpy(&_impl_.enable_debug_mode_, &from._impl_.enable_debug_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_sender_log_) -
    reinterpret_cast<char*>(&_impl_.enable_debug_mode_)) + sizeof(_impl_.enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.CanConf)
}

inline void CanConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.can_card_parameter_){nullptr}
    , decltype(_impl_.enable_debug_mode_){false}
    , decltype(_impl_.enable_receiver_log_){false}
    , decltype(_impl_.enable_sender_log_){false}
  };
}

CanConf::~CanConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.CanConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.can_card_parameter_;
}

void CanConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.CanConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.can_card_parameter_ != nullptr);
    _impl_.can_card_parameter_->Clear();
  }
  ::memset(&_impl_.enable_debug_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_sender_log_) -
      reinterpret_cast<char*>(&_impl_.enable_debug_mode_)) + sizeof(_impl_.enable_sender_log_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_card_parameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_debug_mode = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_debug_mode(&has_bits);
          _impl_.enable_debug_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_receiver_log = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enable_receiver_log(&has_bits);
          _impl_.enable_receiver_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_sender_log = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_sender_log(&has_bits);
          _impl_.enable_sender_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.CanConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::can_card_parameter(this),
        _Internal::can_card_parameter(this).GetCachedSize(), target, stream);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_sender_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.CanConf)
  return target;
}

size_t CanConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.CanConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.can_card_parameter_);
    }

    // optional bool enable_debug_mode = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanConf::GetClassData() const { return &_class_data_; }

void CanConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanConf *>(to)->MergeFrom(
      static_cast<const CanConf &>(from));
}


void CanConf::MergeFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from._internal_can_card_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_debug_mode_ = from._impl_.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.enable_receiver_log_ = from._impl_.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.enable_sender_log_ = from._impl_.enable_sender_log_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanConf::CopyFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanConf::IsInitialized() const {
  return true;
}

void CanConf::InternalSwap(CanConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanConf, _impl_.enable_sender_log_)
      + sizeof(CanConf::_impl_.enable_sender_log_)
      - PROTOBUF_FIELD_OFFSET(CanConf, _impl_.can_card_parameter_)>(
          reinterpret_cast<char*>(&_impl_.can_card_parameter_),
          reinterpret_cast<char*>(&other->_impl_.can_card_parameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[0]);
}

// ===================================================================

class RadarConf::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarConf>()._impl_._has_bits_);
  static void set_has_max_distance_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_id_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radar_power_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_type_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_send_quality_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_send_ext_info_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sort_index_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_store_in_nvm_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ctrl_relay_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rcs_threshold_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_radar_power(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ctrl_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_send_ext_info(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_send_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_store_in_nvm(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rcs_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

RadarConf::RadarConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.racobit_radar.RadarConf)
}
RadarConf::RadarConf(const RadarConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_distance_valid_){}
    , decltype(_impl_.sensor_id_valid_){}
    , decltype(_impl_.radar_power_valid_){}
    , decltype(_impl_.sort_index_valid_){}
    , decltype(_impl_.ctrl_relay_valid_){}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.radar_power_){}
    , decltype(_impl_.ctrl_relay_){}
    , decltype(_impl_.sort_index_){}
    , decltype(_impl_.rcs_threshold_){}
    , decltype(_impl_.store_in_nvm_){}
    , decltype(_impl_.output_type_valid_){}
    , decltype(_impl_.send_quality_valid_){}
    , decltype(_impl_.send_ext_info_valid_){}
    , decltype(_impl_.store_in_nvm_valid_){}
    , decltype(_impl_.max_distance_){}
    , decltype(_impl_.output_type_){}
    , decltype(_impl_.rcs_threshold_valid_){}
    , decltype(_impl_.send_ext_info_){}
    , decltype(_impl_.send_quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_distance_valid_, &from._impl_.max_distance_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_quality_) -
    reinterpret_cast<char*>(&_impl_.max_distance_valid_)) + sizeof(_impl_.send_quality_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.RadarConf)
}

inline void RadarConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_distance_valid_){false}
    , decltype(_impl_.sensor_id_valid_){false}
    , decltype(_impl_.radar_power_valid_){false}
    , decltype(_impl_.sort_index_valid_){false}
    , decltype(_impl_.ctrl_relay_valid_){false}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.radar_power_){0u}
    , decltype(_impl_.ctrl_relay_){0u}
    , decltype(_impl_.sort_index_){0u}
    , decltype(_impl_.rcs_threshold_){0}
    , decltype(_impl_.store_in_nvm_){1u}
    , decltype(_impl_.output_type_valid_){true}
    , decltype(_impl_.send_quality_valid_){true}
    , decltype(_impl_.send_ext_info_valid_){true}
    , decltype(_impl_.store_in_nvm_valid_){true}
    , decltype(_impl_.max_distance_){248u}
    , decltype(_impl_.output_type_){1}
    , decltype(_impl_.rcs_threshold_valid_){true}
    , decltype(_impl_.send_ext_info_){true}
    , decltype(_impl_.send_quality_){true}
  };
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.RadarConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.RadarConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.max_distance_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ctrl_relay_) -
        reinterpret_cast<char*>(&_impl_.max_distance_valid_)) + sizeof(_impl_.ctrl_relay_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.sort_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rcs_threshold_) -
        reinterpret_cast<char*>(&_impl_.sort_index_)) + sizeof(_impl_.rcs_threshold_));
    _impl_.store_in_nvm_ = 1u;
    _impl_.output_type_valid_ = true;
    _impl_.send_quality_valid_ = true;
    _impl_.send_ext_info_valid_ = true;
    _impl_.store_in_nvm_valid_ = true;
    _impl_.max_distance_ = 248u;
  }
  if (cached_has_bits & 0x000f0000u) {
    _impl_.output_type_ = 1;
    _impl_.rcs_threshold_valid_ = true;
    _impl_.send_ext_info_ = true;
    _impl_.send_quality_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool max_distance_valid = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_distance_valid(&has_bits);
          _impl_.max_distance_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sensor_id_valid = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sensor_id_valid(&has_bits);
          _impl_.sensor_id_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool radar_power_valid = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_radar_power_valid(&has_bits);
          _impl_.radar_power_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_type_valid = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_output_type_valid(&has_bits);
          _impl_.output_type_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_quality_valid = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_send_quality_valid(&has_bits);
          _impl_.send_quality_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_ext_info_valid = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_send_ext_info_valid(&has_bits);
          _impl_.send_ext_info_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sort_index_valid = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sort_index_valid(&has_bits);
          _impl_.sort_index_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool store_in_nvm_valid = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_store_in_nvm_valid(&has_bits);
          _impl_.store_in_nvm_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ctrl_relay_valid = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ctrl_relay_valid(&has_bits);
          _impl_.ctrl_relay_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rcs_threshold_valid = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rcs_threshold_valid(&has_bits);
          _impl_.rcs_threshold_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_distance = 11 [default = 248];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_max_distance(&has_bits);
          _impl_.max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sensor_id = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::racobit_radar::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::racobit_radar::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radar_power = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_radar_power(&has_bits);
          _impl_.radar_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctrl_relay = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_ctrl_relay(&has_bits);
          _impl_.ctrl_relay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_ext_info = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_send_ext_info(&has_bits);
          _impl_.send_ext_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_quality = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_send_quality(&has_bits);
          _impl_.send_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sort_index = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_sort_index(&has_bits);
          _impl_.sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 store_in_nvm = 19 [default = 1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_store_in_nvm(&has_bits);
          _impl_.store_in_nvm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::racobit_radar::RcsThreshold_IsValid(val))) {
            _internal_set_rcs_threshold(static_cast<::apollo::drivers::racobit_radar::RcsThreshold>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.RadarConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_max_distance_valid(), target);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_sensor_id_valid(), target);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_radar_power_valid(), target);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_output_type_valid(), target);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_send_quality_valid(), target);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_send_ext_info_valid(), target);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_index_valid(), target);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_store_in_nvm_valid(), target);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ctrl_relay_valid(), target);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_rcs_threshold_valid(), target);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_distance(), target);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sensor_id(), target);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_output_type(), target);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_radar_power(), target);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ctrl_relay(), target);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_send_ext_info(), target);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_send_quality(), target);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sort_index(), target);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_store_in_nvm(), target);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_rcs_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.RadarConf)
  return target;
}

size_t RadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.RadarConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool max_distance_valid = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool sensor_id_valid = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool radar_power_valid = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool sort_index_valid = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_relay_valid = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 sensor_id = 12 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
    }

    // optional uint32 radar_power = 14 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radar_power());
    }

    // optional uint32 ctrl_relay = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrl_relay());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 sort_index = 18 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_sort_index());
    }

    // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rcs_threshold());
    }

    // optional uint32 store_in_nvm = 19 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_store_in_nvm());
    }

    // optional bool output_type_valid = 4 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool send_quality_valid = 5 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info_valid = 6 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool store_in_nvm_valid = 8 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_distance = 11 [default = 248];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_distance());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional bool rcs_threshold_valid = 10 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 16 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool send_quality = 17 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarConf::GetClassData() const { return &_class_data_; }

void RadarConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarConf *>(to)->MergeFrom(
      static_cast<const RadarConf &>(from));
}


void RadarConf::MergeFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_distance_valid_ = from._impl_.max_distance_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sensor_id_valid_ = from._impl_.sensor_id_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.radar_power_valid_ = from._impl_.radar_power_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sort_index_valid_ = from._impl_.sort_index_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ctrl_relay_valid_ = from._impl_.ctrl_relay_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.radar_power_ = from._impl_.radar_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ctrl_relay_ = from._impl_.ctrl_relay_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.sort_index_ = from._impl_.sort_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.rcs_threshold_ = from._impl_.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.store_in_nvm_ = from._impl_.store_in_nvm_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.output_type_valid_ = from._impl_.output_type_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.send_quality_valid_ = from._impl_.send_quality_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.send_ext_info_valid_ = from._impl_.send_ext_info_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.store_in_nvm_valid_ = from._impl_.store_in_nvm_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.max_distance_ = from._impl_.max_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.output_type_ = from._impl_.output_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.rcs_threshold_valid_ = from._impl_.rcs_threshold_valid_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.send_ext_info_ = from._impl_.send_ext_info_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.send_quality_ = from._impl_.send_quality_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarConf::CopyFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {
  return true;
}

void RadarConf::InternalSwap(RadarConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarConf, _impl_.rcs_threshold_)
      + sizeof(RadarConf::_impl_.rcs_threshold_)
      - PROTOBUF_FIELD_OFFSET(RadarConf, _impl_.max_distance_valid_)>(
          reinterpret_cast<char*>(&_impl_.max_distance_valid_),
          reinterpret_cast<char*>(&other->_impl_.max_distance_valid_));
  swap(_impl_.store_in_nvm_, other->_impl_.store_in_nvm_);
  swap(_impl_.output_type_valid_, other->_impl_.output_type_valid_);
  swap(_impl_.send_quality_valid_, other->_impl_.send_quality_valid_);
  swap(_impl_.send_ext_info_valid_, other->_impl_.send_ext_info_valid_);
  swap(_impl_.store_in_nvm_valid_, other->_impl_.store_in_nvm_valid_);
  swap(_impl_.max_distance_, other->_impl_.max_distance_);
  swap(_impl_.output_type_, other->_impl_.output_type_);
  swap(_impl_.rcs_threshold_valid_, other->_impl_.rcs_threshold_valid_);
  swap(_impl_.send_ext_info_, other->_impl_.send_ext_info_);
  swap(_impl_.send_quality_, other->_impl_.send_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[1]);
}

// ===================================================================

class RacobitRadarConf::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitRadarConf>()._impl_._has_bits_);
  static const ::apollo::drivers::racobit_radar::CanConf& can_conf(const RacobitRadarConf* msg);
  static void set_has_can_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::racobit_radar::RadarConf& radar_conf(const RacobitRadarConf* msg);
  static void set_has_radar_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::racobit_radar::CanConf&
RacobitRadarConf::_Internal::can_conf(const RacobitRadarConf* msg) {
  return *msg->_impl_.can_conf_;
}
const ::apollo::drivers::racobit_radar::RadarConf&
RacobitRadarConf::_Internal::radar_conf(const RacobitRadarConf* msg) {
  return *msg->_impl_.radar_conf_;
}
RacobitRadarConf::RacobitRadarConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.racobit_radar.RacobitRadarConf)
}
RacobitRadarConf::RacobitRadarConf(const RacobitRadarConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.can_conf_){nullptr}
    , decltype(_impl_.radar_conf_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_can_conf()) {
    _impl_.can_conf_ = new ::apollo::drivers::racobit_radar::CanConf(*from._impl_.can_conf_);
  }
  if (from._internal_has_radar_conf()) {
    _impl_.radar_conf_ = new ::apollo::drivers::racobit_radar::RadarConf(*from._impl_.radar_conf_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.RacobitRadarConf)
}

inline void RacobitRadarConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.can_conf_){nullptr}
    , decltype(_impl_.radar_conf_){nullptr}
  };
}

RacobitRadarConf::~RacobitRadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.RacobitRadarConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RacobitRadarConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.can_conf_;
  if (this != internal_default_instance()) delete _impl_.radar_conf_;
}

void RacobitRadarConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RacobitRadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.can_conf_ != nullptr);
      _impl_.can_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.radar_conf_ != nullptr);
      _impl_.radar_conf_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RacobitRadarConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radar_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RacobitRadarConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::can_conf(this),
        _Internal::can_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::radar_conf(this),
        _Internal::radar_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.RacobitRadarConf)
  return target;
}

size_t RacobitRadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.can_conf_);
    }

    // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radar_conf_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RacobitRadarConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RacobitRadarConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RacobitRadarConf::GetClassData() const { return &_class_data_; }

void RacobitRadarConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RacobitRadarConf *>(to)->MergeFrom(
      static_cast<const RacobitRadarConf &>(from));
}


void RacobitRadarConf::MergeFrom(const RacobitRadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_can_conf()->::apollo::drivers::racobit_radar::CanConf::MergeFrom(from._internal_can_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_radar_conf()->::apollo::drivers::racobit_radar::RadarConf::MergeFrom(from._internal_radar_conf());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RacobitRadarConf::CopyFrom(const RacobitRadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarConf::IsInitialized() const {
  return true;
}

void RacobitRadarConf::InternalSwap(RacobitRadarConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RacobitRadarConf, _impl_.radar_conf_)
      + sizeof(RacobitRadarConf::_impl_.radar_conf_)
      - PROTOBUF_FIELD_OFFSET(RacobitRadarConf, _impl_.can_conf_)>(
          reinterpret_cast<char*>(&_impl_.can_conf_),
          reinterpret_cast<char*>(&other->_impl_.can_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitRadarConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_getter, &descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace racobit_radar
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::racobit_radar::CanConf*
Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::CanConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::racobit_radar::CanConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::racobit_radar::RadarConf*
Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::RadarConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::racobit_radar::RadarConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::racobit_radar::RacobitRadarConf*
Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::RacobitRadarConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::racobit_radar::RacobitRadarConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
