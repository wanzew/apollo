// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/video/proto/video_h265cfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
namespace apollo {
namespace drivers {
namespace video {
namespace config {
class CameraH265Config;
struct CameraH265ConfigDefaultTypeInternal;
extern CameraH265ConfigDefaultTypeInternal _CameraH265Config_default_instance_;
class CameraH265Config_CompressConfig;
struct CameraH265Config_CompressConfigDefaultTypeInternal;
extern CameraH265Config_CompressConfigDefaultTypeInternal _CameraH265Config_CompressConfig_default_instance_;
}  // namespace config
}  // namespace video
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::video::config::CameraH265Config* Arena::CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config>(Arena*);
template<> ::apollo::drivers::video::config::CameraH265Config_CompressConfig* Arena::CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config_CompressConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace video {
namespace config {

// ===================================================================

class CameraH265Config_CompressConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.video.config.CameraH265Config.CompressConfig) */ {
 public:
  inline CameraH265Config_CompressConfig() : CameraH265Config_CompressConfig(nullptr) {}
  ~CameraH265Config_CompressConfig() override;
  explicit PROTOBUF_CONSTEXPR CameraH265Config_CompressConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraH265Config_CompressConfig(const CameraH265Config_CompressConfig& from);
  CameraH265Config_CompressConfig(CameraH265Config_CompressConfig&& from) noexcept
    : CameraH265Config_CompressConfig() {
    *this = ::std::move(from);
  }

  inline CameraH265Config_CompressConfig& operator=(const CameraH265Config_CompressConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraH265Config_CompressConfig& operator=(CameraH265Config_CompressConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraH265Config_CompressConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraH265Config_CompressConfig* internal_default_instance() {
    return reinterpret_cast<const CameraH265Config_CompressConfig*>(
               &_CameraH265Config_CompressConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraH265Config_CompressConfig& a, CameraH265Config_CompressConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraH265Config_CompressConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraH265Config_CompressConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraH265Config_CompressConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraH265Config_CompressConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraH265Config_CompressConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraH265Config_CompressConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraH265Config_CompressConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.video.config.CameraH265Config.CompressConfig";
  }
  protected:
  explicit CameraH265Config_CompressConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputChannelFieldNumber = 1,
    kImagePoolSizeFieldNumber = 2,
  };
  // optional string output_channel = 1;
  bool has_output_channel() const;
  private:
  bool _internal_has_output_channel() const;
  public:
  void clear_output_channel();
  const std::string& output_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_channel();
  PROTOBUF_NODISCARD std::string* release_output_channel();
  void set_allocated_output_channel(std::string* output_channel);
  private:
  const std::string& _internal_output_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_channel(const std::string& value);
  std::string* _internal_mutable_output_channel();
  public:

  // optional uint32 image_pool_size = 2 [default = 20];
  bool has_image_pool_size() const;
  private:
  bool _internal_has_image_pool_size() const;
  public:
  void clear_image_pool_size();
  uint32_t image_pool_size() const;
  void set_image_pool_size(uint32_t value);
  private:
  uint32_t _internal_image_pool_size() const;
  void _internal_set_image_pool_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.video.config.CameraH265Config.CompressConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_;
    uint32_t image_pool_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
};
// -------------------------------------------------------------------

class CameraH265Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.video.config.CameraH265Config) */ {
 public:
  inline CameraH265Config() : CameraH265Config(nullptr) {}
  ~CameraH265Config() override;
  explicit PROTOBUF_CONSTEXPR CameraH265Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraH265Config(const CameraH265Config& from);
  CameraH265Config(CameraH265Config&& from) noexcept
    : CameraH265Config() {
    *this = ::std::move(from);
  }

  inline CameraH265Config& operator=(const CameraH265Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraH265Config& operator=(CameraH265Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraH265Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraH265Config* internal_default_instance() {
    return reinterpret_cast<const CameraH265Config*>(
               &_CameraH265Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraH265Config& a, CameraH265Config& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraH265Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraH265Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraH265Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraH265Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraH265Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraH265Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraH265Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.video.config.CameraH265Config";
  }
  protected:
  explicit CameraH265Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraH265Config_CompressConfig CompressConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 2,
    kPixelFormatFieldNumber = 3,
    kTriggerParamFieldNumber = 21,
    kCompressConfFieldNumber = 25,
    kUdpPortFieldNumber = 1,
    kRecordFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kFrameRateFieldNumber = 7,
    kMonochromeFieldNumber = 8,
    kAutoFocusFieldNumber = 14,
    kCameraSeqNumberFieldNumber = 24,
    kBrightnessFieldNumber = 9,
    kContrastFieldNumber = 10,
    kSaturationFieldNumber = 11,
    kSharpnessFieldNumber = 12,
    kGainFieldNumber = 13,
    kFocusFieldNumber = 15,
    kExposureFieldNumber = 17,
    kAutoExposureFieldNumber = 16,
    kAutoWhiteBalanceFieldNumber = 18,
    kWhiteBalanceFieldNumber = 19,
    kBytesPerPixelFieldNumber = 20,
    kMetricErrorCodeFieldNumber = 22,
    kFpgaDevNumberFieldNumber = 23,
  };
  // required string frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // required string pixel_format = 3 [default = "yuyv"];
  bool has_pixel_format() const;
  private:
  bool _internal_has_pixel_format() const;
  public:
  void clear_pixel_format();
  const std::string& pixel_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pixel_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pixel_format();
  PROTOBUF_NODISCARD std::string* release_pixel_format();
  void set_allocated_pixel_format(std::string* pixel_format);
  private:
  const std::string& _internal_pixel_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixel_format(const std::string& value);
  std::string* _internal_mutable_pixel_format();
  public:

  // required string trigger_param = 21 [default = "f2ff"];
  bool has_trigger_param() const;
  private:
  bool _internal_has_trigger_param() const;
  public:
  void clear_trigger_param();
  const std::string& trigger_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_param();
  PROTOBUF_NODISCARD std::string* release_trigger_param();
  void set_allocated_trigger_param(std::string* trigger_param);
  private:
  const std::string& _internal_trigger_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_param(const std::string& value);
  std::string* _internal_mutable_trigger_param();
  public:

  // optional .apollo.drivers.video.config.CameraH265Config.CompressConfig compress_conf = 25;
  bool has_compress_conf() const;
  private:
  bool _internal_has_compress_conf() const;
  public:
  void clear_compress_conf();
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& compress_conf() const;
  PROTOBUF_NODISCARD ::apollo::drivers::video::config::CameraH265Config_CompressConfig* release_compress_conf();
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* mutable_compress_conf();
  void set_allocated_compress_conf(::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf);
  private:
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& _internal_compress_conf() const;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* _internal_mutable_compress_conf();
  public:
  void unsafe_arena_set_allocated_compress_conf(
      ::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf);
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* unsafe_arena_release_compress_conf();

  // required uint32 udp_port = 1;
  bool has_udp_port() const;
  private:
  bool _internal_has_udp_port() const;
  public:
  void clear_udp_port();
  uint32_t udp_port() const;
  void set_udp_port(uint32_t value);
  private:
  uint32_t _internal_udp_port() const;
  void _internal_set_udp_port(uint32_t value);
  public:

  // required uint32 record = 4;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  uint32_t record() const;
  void set_record(uint32_t value);
  private:
  uint32_t _internal_record() const;
  void _internal_set_record(uint32_t value);
  public:

  // required uint32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // required uint32 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // required uint32 frame_rate = 7;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  uint32_t frame_rate() const;
  void set_frame_rate(uint32_t value);
  private:
  uint32_t _internal_frame_rate() const;
  void _internal_set_frame_rate(uint32_t value);
  public:

  // required bool monochrome = 8 [default = false];
  bool has_monochrome() const;
  private:
  bool _internal_has_monochrome() const;
  public:
  void clear_monochrome();
  bool monochrome() const;
  void set_monochrome(bool value);
  private:
  bool _internal_monochrome() const;
  void _internal_set_monochrome(bool value);
  public:

  // required bool auto_focus = 14 [default = false];
  bool has_auto_focus() const;
  private:
  bool _internal_has_auto_focus() const;
  public:
  void clear_auto_focus();
  bool auto_focus() const;
  void set_auto_focus(bool value);
  private:
  bool _internal_auto_focus() const;
  void _internal_set_auto_focus(bool value);
  public:

  // required int32 camera_seq_number = 24 [default = -1];
  bool has_camera_seq_number() const;
  private:
  bool _internal_has_camera_seq_number() const;
  public:
  void clear_camera_seq_number();
  int32_t camera_seq_number() const;
  void set_camera_seq_number(int32_t value);
  private:
  int32_t _internal_camera_seq_number() const;
  void _internal_set_camera_seq_number(int32_t value);
  public:

  // required int32 brightness = 9 [default = -1];
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  int32_t brightness() const;
  void set_brightness(int32_t value);
  private:
  int32_t _internal_brightness() const;
  void _internal_set_brightness(int32_t value);
  public:

  // required int32 contrast = 10 [default = -1];
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  int32_t contrast() const;
  void set_contrast(int32_t value);
  private:
  int32_t _internal_contrast() const;
  void _internal_set_contrast(int32_t value);
  public:

  // required int32 saturation = 11 [default = -1];
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  int32_t saturation() const;
  void set_saturation(int32_t value);
  private:
  int32_t _internal_saturation() const;
  void _internal_set_saturation(int32_t value);
  public:

  // required int32 sharpness = 12 [default = -1];
  bool has_sharpness() const;
  private:
  bool _internal_has_sharpness() const;
  public:
  void clear_sharpness();
  int32_t sharpness() const;
  void set_sharpness(int32_t value);
  private:
  int32_t _internal_sharpness() const;
  void _internal_set_sharpness(int32_t value);
  public:

  // required int32 gain = 13 [default = -1];
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  int32_t gain() const;
  void set_gain(int32_t value);
  private:
  int32_t _internal_gain() const;
  void _internal_set_gain(int32_t value);
  public:

  // required int32 focus = 15 [default = -1];
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  int32_t focus() const;
  void set_focus(int32_t value);
  private:
  int32_t _internal_focus() const;
  void _internal_set_focus(int32_t value);
  public:

  // required int32 exposure = 17 [default = 100];
  bool has_exposure() const;
  private:
  bool _internal_has_exposure() const;
  public:
  void clear_exposure();
  int32_t exposure() const;
  void set_exposure(int32_t value);
  private:
  int32_t _internal_exposure() const;
  void _internal_set_exposure(int32_t value);
  public:

  // required bool auto_exposure = 16 [default = true];
  bool has_auto_exposure() const;
  private:
  bool _internal_has_auto_exposure() const;
  public:
  void clear_auto_exposure();
  bool auto_exposure() const;
  void set_auto_exposure(bool value);
  private:
  bool _internal_auto_exposure() const;
  void _internal_set_auto_exposure(bool value);
  public:

  // required bool auto_white_balance = 18 [default = true];
  bool has_auto_white_balance() const;
  private:
  bool _internal_has_auto_white_balance() const;
  public:
  void clear_auto_white_balance();
  bool auto_white_balance() const;
  void set_auto_white_balance(bool value);
  private:
  bool _internal_auto_white_balance() const;
  void _internal_set_auto_white_balance(bool value);
  public:

  // required int32 white_balance = 19 [default = 4000];
  bool has_white_balance() const;
  private:
  bool _internal_has_white_balance() const;
  public:
  void clear_white_balance();
  int32_t white_balance() const;
  void set_white_balance(int32_t value);
  private:
  int32_t _internal_white_balance() const;
  void _internal_set_white_balance(int32_t value);
  public:

  // required uint32 bytes_per_pixel = 20 [default = 3];
  bool has_bytes_per_pixel() const;
  private:
  bool _internal_has_bytes_per_pixel() const;
  public:
  void clear_bytes_per_pixel();
  uint32_t bytes_per_pixel() const;
  void set_bytes_per_pixel(uint32_t value);
  private:
  uint32_t _internal_bytes_per_pixel() const;
  void _internal_set_bytes_per_pixel(uint32_t value);
  public:

  // required uint32 metric_error_code = 22 [default = 11];
  bool has_metric_error_code() const;
  private:
  bool _internal_has_metric_error_code() const;
  public:
  void clear_metric_error_code();
  uint32_t metric_error_code() const;
  void set_metric_error_code(uint32_t value);
  private:
  uint32_t _internal_metric_error_code() const;
  void _internal_set_metric_error_code(uint32_t value);
  public:

  // required int32 fpga_dev_number = 23 [default = -1];
  bool has_fpga_dev_number() const;
  private:
  bool _internal_has_fpga_dev_number() const;
  public:
  void clear_fpga_dev_number();
  int32_t fpga_dev_number() const;
  void set_fpga_dev_number(int32_t value);
  private:
  int32_t _internal_fpga_dev_number() const;
  void _internal_set_fpga_dev_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.video.config.CameraH265Config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_pixel_format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixel_format_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_trigger_param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_param_;
    ::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf_;
    uint32_t udp_port_;
    uint32_t record_;
    uint32_t width_;
    uint32_t height_;
    uint32_t frame_rate_;
    bool monochrome_;
    bool auto_focus_;
    int32_t camera_seq_number_;
    int32_t brightness_;
    int32_t contrast_;
    int32_t saturation_;
    int32_t sharpness_;
    int32_t gain_;
    int32_t focus_;
    int32_t exposure_;
    bool auto_exposure_;
    bool auto_white_balance_;
    int32_t white_balance_;
    uint32_t bytes_per_pixel_;
    uint32_t metric_error_code_;
    int32_t fpga_dev_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraH265Config_CompressConfig

// optional string output_channel = 1;
inline bool CameraH265Config_CompressConfig::_internal_has_output_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraH265Config_CompressConfig::has_output_channel() const {
  return _internal_has_output_channel();
}
inline void CameraH265Config_CompressConfig::clear_output_channel() {
  _impl_.output_channel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraH265Config_CompressConfig::output_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  return _internal_output_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraH265Config_CompressConfig::set_output_channel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.output_channel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}
inline std::string* CameraH265Config_CompressConfig::mutable_output_channel() {
  std::string* _s = _internal_mutable_output_channel();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  return _s;
}
inline const std::string& CameraH265Config_CompressConfig::_internal_output_channel() const {
  return _impl_.output_channel_.Get();
}
inline void CameraH265Config_CompressConfig::_internal_set_output_channel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_channel_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraH265Config_CompressConfig::_internal_mutable_output_channel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.output_channel_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraH265Config_CompressConfig::release_output_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  if (!_internal_has_output_channel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.output_channel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_.IsDefault()) {
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraH265Config_CompressConfig::set_allocated_output_channel(std::string* output_channel) {
  if (output_channel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_channel_.SetAllocated(output_channel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_channel_.IsDefault()) {
    _impl_.output_channel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}

// optional uint32 image_pool_size = 2 [default = 20];
inline bool CameraH265Config_CompressConfig::_internal_has_image_pool_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraH265Config_CompressConfig::has_image_pool_size() const {
  return _internal_has_image_pool_size();
}
inline void CameraH265Config_CompressConfig::clear_image_pool_size() {
  _impl_.image_pool_size_ = 20u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CameraH265Config_CompressConfig::_internal_image_pool_size() const {
  return _impl_.image_pool_size_;
}
inline uint32_t CameraH265Config_CompressConfig::image_pool_size() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.CompressConfig.image_pool_size)
  return _internal_image_pool_size();
}
inline void CameraH265Config_CompressConfig::_internal_set_image_pool_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.image_pool_size_ = value;
}
inline void CameraH265Config_CompressConfig::set_image_pool_size(uint32_t value) {
  _internal_set_image_pool_size(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.CompressConfig.image_pool_size)
}

// -------------------------------------------------------------------

// CameraH265Config

// required uint32 udp_port = 1;
inline bool CameraH265Config::_internal_has_udp_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraH265Config::has_udp_port() const {
  return _internal_has_udp_port();
}
inline void CameraH265Config::clear_udp_port() {
  _impl_.udp_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CameraH265Config::_internal_udp_port() const {
  return _impl_.udp_port_;
}
inline uint32_t CameraH265Config::udp_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.udp_port)
  return _internal_udp_port();
}
inline void CameraH265Config::_internal_set_udp_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.udp_port_ = value;
}
inline void CameraH265Config::set_udp_port(uint32_t value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.udp_port)
}

// required string frame_id = 2;
inline bool CameraH265Config::_internal_has_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraH265Config::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void CameraH265Config::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraH265Config::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraH265Config::set_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.frame_id)
}
inline std::string* CameraH265Config::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.frame_id)
  return _s;
}
inline const std::string& CameraH265Config::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void CameraH265Config::_internal_set_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraH265Config::_internal_mutable_frame_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraH265Config::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CameraH265Config::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.frame_id)
}

// required string pixel_format = 3 [default = "yuyv"];
inline bool CameraH265Config::_internal_has_pixel_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraH265Config::has_pixel_format() const {
  return _internal_has_pixel_format();
}
inline void CameraH265Config::clear_pixel_format() {
  _impl_.pixel_format_.ClearToDefault(::apollo::drivers::video::config::CameraH265Config::Impl_::_i_give_permission_to_break_this_code_default_pixel_format_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraH265Config::pixel_format() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.pixel_format)
  if (_impl_.pixel_format_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_pixel_format_.get();
  return _internal_pixel_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraH265Config::set_pixel_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pixel_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.pixel_format)
}
inline std::string* CameraH265Config::mutable_pixel_format() {
  std::string* _s = _internal_mutable_pixel_format();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.pixel_format)
  return _s;
}
inline const std::string& CameraH265Config::_internal_pixel_format() const {
  return _impl_.pixel_format_.Get();
}
inline void CameraH265Config::_internal_set_pixel_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pixel_format_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraH265Config::_internal_mutable_pixel_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pixel_format_.Mutable(::apollo::drivers::video::config::CameraH265Config::Impl_::_i_give_permission_to_break_this_code_default_pixel_format_, GetArenaForAllocation());
}
inline std::string* CameraH265Config::release_pixel_format() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.pixel_format)
  if (!_internal_has_pixel_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pixel_format_.Release();
  return p;
}
inline void CameraH265Config::set_allocated_pixel_format(std::string* pixel_format) {
  if (pixel_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pixel_format_.SetAllocated(pixel_format, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.pixel_format)
}

// required uint32 record = 4;
inline bool CameraH265Config::_internal_has_record() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraH265Config::has_record() const {
  return _internal_has_record();
}
inline void CameraH265Config::clear_record() {
  _impl_.record_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CameraH265Config::_internal_record() const {
  return _impl_.record_;
}
inline uint32_t CameraH265Config::record() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.record)
  return _internal_record();
}
inline void CameraH265Config::_internal_set_record(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.record_ = value;
}
inline void CameraH265Config::set_record(uint32_t value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.record)
}

// required uint32 width = 5;
inline bool CameraH265Config::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraH265Config::has_width() const {
  return _internal_has_width();
}
inline void CameraH265Config::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CameraH265Config::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t CameraH265Config::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.width)
  return _internal_width();
}
inline void CameraH265Config::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.width_ = value;
}
inline void CameraH265Config::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.width)
}

// required uint32 height = 6;
inline bool CameraH265Config::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraH265Config::has_height() const {
  return _internal_has_height();
}
inline void CameraH265Config::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CameraH265Config::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t CameraH265Config::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.height)
  return _internal_height();
}
inline void CameraH265Config::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.height_ = value;
}
inline void CameraH265Config::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.height)
}

// required uint32 frame_rate = 7;
inline bool CameraH265Config::_internal_has_frame_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CameraH265Config::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void CameraH265Config::clear_frame_rate() {
  _impl_.frame_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CameraH265Config::_internal_frame_rate() const {
  return _impl_.frame_rate_;
}
inline uint32_t CameraH265Config::frame_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.frame_rate)
  return _internal_frame_rate();
}
inline void CameraH265Config::_internal_set_frame_rate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.frame_rate_ = value;
}
inline void CameraH265Config::set_frame_rate(uint32_t value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.frame_rate)
}

// required bool monochrome = 8 [default = false];
inline bool CameraH265Config::_internal_has_monochrome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CameraH265Config::has_monochrome() const {
  return _internal_has_monochrome();
}
inline void CameraH265Config::clear_monochrome() {
  _impl_.monochrome_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CameraH265Config::_internal_monochrome() const {
  return _impl_.monochrome_;
}
inline bool CameraH265Config::monochrome() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.monochrome)
  return _internal_monochrome();
}
inline void CameraH265Config::_internal_set_monochrome(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.monochrome_ = value;
}
inline void CameraH265Config::set_monochrome(bool value) {
  _internal_set_monochrome(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.monochrome)
}

// required int32 brightness = 9 [default = -1];
inline bool CameraH265Config::_internal_has_brightness() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CameraH265Config::has_brightness() const {
  return _internal_has_brightness();
}
inline void CameraH265Config::clear_brightness() {
  _impl_.brightness_ = -1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CameraH265Config::_internal_brightness() const {
  return _impl_.brightness_;
}
inline int32_t CameraH265Config::brightness() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.brightness)
  return _internal_brightness();
}
inline void CameraH265Config::_internal_set_brightness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.brightness_ = value;
}
inline void CameraH265Config::set_brightness(int32_t value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.brightness)
}

// required int32 contrast = 10 [default = -1];
inline bool CameraH265Config::_internal_has_contrast() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CameraH265Config::has_contrast() const {
  return _internal_has_contrast();
}
inline void CameraH265Config::clear_contrast() {
  _impl_.contrast_ = -1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CameraH265Config::_internal_contrast() const {
  return _impl_.contrast_;
}
inline int32_t CameraH265Config::contrast() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.contrast)
  return _internal_contrast();
}
inline void CameraH265Config::_internal_set_contrast(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.contrast_ = value;
}
inline void CameraH265Config::set_contrast(int32_t value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.contrast)
}

// required int32 saturation = 11 [default = -1];
inline bool CameraH265Config::_internal_has_saturation() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CameraH265Config::has_saturation() const {
  return _internal_has_saturation();
}
inline void CameraH265Config::clear_saturation() {
  _impl_.saturation_ = -1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CameraH265Config::_internal_saturation() const {
  return _impl_.saturation_;
}
inline int32_t CameraH265Config::saturation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.saturation)
  return _internal_saturation();
}
inline void CameraH265Config::_internal_set_saturation(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.saturation_ = value;
}
inline void CameraH265Config::set_saturation(int32_t value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.saturation)
}

// required int32 sharpness = 12 [default = -1];
inline bool CameraH265Config::_internal_has_sharpness() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CameraH265Config::has_sharpness() const {
  return _internal_has_sharpness();
}
inline void CameraH265Config::clear_sharpness() {
  _impl_.sharpness_ = -1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t CameraH265Config::_internal_sharpness() const {
  return _impl_.sharpness_;
}
inline int32_t CameraH265Config::sharpness() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.sharpness)
  return _internal_sharpness();
}
inline void CameraH265Config::_internal_set_sharpness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.sharpness_ = value;
}
inline void CameraH265Config::set_sharpness(int32_t value) {
  _internal_set_sharpness(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.sharpness)
}

// required int32 gain = 13 [default = -1];
inline bool CameraH265Config::_internal_has_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CameraH265Config::has_gain() const {
  return _internal_has_gain();
}
inline void CameraH265Config::clear_gain() {
  _impl_.gain_ = -1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t CameraH265Config::_internal_gain() const {
  return _impl_.gain_;
}
inline int32_t CameraH265Config::gain() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.gain)
  return _internal_gain();
}
inline void CameraH265Config::_internal_set_gain(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.gain_ = value;
}
inline void CameraH265Config::set_gain(int32_t value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.gain)
}

// required bool auto_focus = 14 [default = false];
inline bool CameraH265Config::_internal_has_auto_focus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_focus() const {
  return _internal_has_auto_focus();
}
inline void CameraH265Config::clear_auto_focus() {
  _impl_.auto_focus_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CameraH265Config::_internal_auto_focus() const {
  return _impl_.auto_focus_;
}
inline bool CameraH265Config::auto_focus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_focus)
  return _internal_auto_focus();
}
inline void CameraH265Config::_internal_set_auto_focus(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.auto_focus_ = value;
}
inline void CameraH265Config::set_auto_focus(bool value) {
  _internal_set_auto_focus(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_focus)
}

// required int32 focus = 15 [default = -1];
inline bool CameraH265Config::_internal_has_focus() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CameraH265Config::has_focus() const {
  return _internal_has_focus();
}
inline void CameraH265Config::clear_focus() {
  _impl_.focus_ = -1;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t CameraH265Config::_internal_focus() const {
  return _impl_.focus_;
}
inline int32_t CameraH265Config::focus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.focus)
  return _internal_focus();
}
inline void CameraH265Config::_internal_set_focus(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.focus_ = value;
}
inline void CameraH265Config::set_focus(int32_t value) {
  _internal_set_focus(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.focus)
}

// required bool auto_exposure = 16 [default = true];
inline bool CameraH265Config::_internal_has_auto_exposure() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_exposure() const {
  return _internal_has_auto_exposure();
}
inline void CameraH265Config::clear_auto_exposure() {
  _impl_.auto_exposure_ = true;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool CameraH265Config::_internal_auto_exposure() const {
  return _impl_.auto_exposure_;
}
inline bool CameraH265Config::auto_exposure() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_exposure)
  return _internal_auto_exposure();
}
inline void CameraH265Config::_internal_set_auto_exposure(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.auto_exposure_ = value;
}
inline void CameraH265Config::set_auto_exposure(bool value) {
  _internal_set_auto_exposure(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_exposure)
}

// required int32 exposure = 17 [default = 100];
inline bool CameraH265Config::_internal_has_exposure() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CameraH265Config::has_exposure() const {
  return _internal_has_exposure();
}
inline void CameraH265Config::clear_exposure() {
  _impl_.exposure_ = 100;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t CameraH265Config::_internal_exposure() const {
  return _impl_.exposure_;
}
inline int32_t CameraH265Config::exposure() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.exposure)
  return _internal_exposure();
}
inline void CameraH265Config::_internal_set_exposure(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.exposure_ = value;
}
inline void CameraH265Config::set_exposure(int32_t value) {
  _internal_set_exposure(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.exposure)
}

// required bool auto_white_balance = 18 [default = true];
inline bool CameraH265Config::_internal_has_auto_white_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_white_balance() const {
  return _internal_has_auto_white_balance();
}
inline void CameraH265Config::clear_auto_white_balance() {
  _impl_.auto_white_balance_ = true;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool CameraH265Config::_internal_auto_white_balance() const {
  return _impl_.auto_white_balance_;
}
inline bool CameraH265Config::auto_white_balance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_white_balance)
  return _internal_auto_white_balance();
}
inline void CameraH265Config::_internal_set_auto_white_balance(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.auto_white_balance_ = value;
}
inline void CameraH265Config::set_auto_white_balance(bool value) {
  _internal_set_auto_white_balance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_white_balance)
}

// required int32 white_balance = 19 [default = 4000];
inline bool CameraH265Config::_internal_has_white_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CameraH265Config::has_white_balance() const {
  return _internal_has_white_balance();
}
inline void CameraH265Config::clear_white_balance() {
  _impl_.white_balance_ = 4000;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t CameraH265Config::_internal_white_balance() const {
  return _impl_.white_balance_;
}
inline int32_t CameraH265Config::white_balance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.white_balance)
  return _internal_white_balance();
}
inline void CameraH265Config::_internal_set_white_balance(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.white_balance_ = value;
}
inline void CameraH265Config::set_white_balance(int32_t value) {
  _internal_set_white_balance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.white_balance)
}

// required uint32 bytes_per_pixel = 20 [default = 3];
inline bool CameraH265Config::_internal_has_bytes_per_pixel() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CameraH265Config::has_bytes_per_pixel() const {
  return _internal_has_bytes_per_pixel();
}
inline void CameraH265Config::clear_bytes_per_pixel() {
  _impl_.bytes_per_pixel_ = 3u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CameraH265Config::_internal_bytes_per_pixel() const {
  return _impl_.bytes_per_pixel_;
}
inline uint32_t CameraH265Config::bytes_per_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.bytes_per_pixel)
  return _internal_bytes_per_pixel();
}
inline void CameraH265Config::_internal_set_bytes_per_pixel(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.bytes_per_pixel_ = value;
}
inline void CameraH265Config::set_bytes_per_pixel(uint32_t value) {
  _internal_set_bytes_per_pixel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.bytes_per_pixel)
}

// required string trigger_param = 21 [default = "f2ff"];
inline bool CameraH265Config::_internal_has_trigger_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraH265Config::has_trigger_param() const {
  return _internal_has_trigger_param();
}
inline void CameraH265Config::clear_trigger_param() {
  _impl_.trigger_param_.ClearToDefault(::apollo::drivers::video::config::CameraH265Config::Impl_::_i_give_permission_to_break_this_code_default_trigger_param_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CameraH265Config::trigger_param() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.trigger_param)
  if (_impl_.trigger_param_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_trigger_param_.get();
  return _internal_trigger_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraH265Config::set_trigger_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.trigger_param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.trigger_param)
}
inline std::string* CameraH265Config::mutable_trigger_param() {
  std::string* _s = _internal_mutable_trigger_param();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.trigger_param)
  return _s;
}
inline const std::string& CameraH265Config::_internal_trigger_param() const {
  return _impl_.trigger_param_.Get();
}
inline void CameraH265Config::_internal_set_trigger_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trigger_param_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraH265Config::_internal_mutable_trigger_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.trigger_param_.Mutable(::apollo::drivers::video::config::CameraH265Config::Impl_::_i_give_permission_to_break_this_code_default_trigger_param_, GetArenaForAllocation());
}
inline std::string* CameraH265Config::release_trigger_param() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.trigger_param)
  if (!_internal_has_trigger_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.trigger_param_.Release();
  return p;
}
inline void CameraH265Config::set_allocated_trigger_param(std::string* trigger_param) {
  if (trigger_param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.trigger_param_.SetAllocated(trigger_param, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.trigger_param)
}

// required uint32 metric_error_code = 22 [default = 11];
inline bool CameraH265Config::_internal_has_metric_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CameraH265Config::has_metric_error_code() const {
  return _internal_has_metric_error_code();
}
inline void CameraH265Config::clear_metric_error_code() {
  _impl_.metric_error_code_ = 11u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CameraH265Config::_internal_metric_error_code() const {
  return _impl_.metric_error_code_;
}
inline uint32_t CameraH265Config::metric_error_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.metric_error_code)
  return _internal_metric_error_code();
}
inline void CameraH265Config::_internal_set_metric_error_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.metric_error_code_ = value;
}
inline void CameraH265Config::set_metric_error_code(uint32_t value) {
  _internal_set_metric_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.metric_error_code)
}

// required int32 fpga_dev_number = 23 [default = -1];
inline bool CameraH265Config::_internal_has_fpga_dev_number() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CameraH265Config::has_fpga_dev_number() const {
  return _internal_has_fpga_dev_number();
}
inline void CameraH265Config::clear_fpga_dev_number() {
  _impl_.fpga_dev_number_ = -1;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t CameraH265Config::_internal_fpga_dev_number() const {
  return _impl_.fpga_dev_number_;
}
inline int32_t CameraH265Config::fpga_dev_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.fpga_dev_number)
  return _internal_fpga_dev_number();
}
inline void CameraH265Config::_internal_set_fpga_dev_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.fpga_dev_number_ = value;
}
inline void CameraH265Config::set_fpga_dev_number(int32_t value) {
  _internal_set_fpga_dev_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.fpga_dev_number)
}

// required int32 camera_seq_number = 24 [default = -1];
inline bool CameraH265Config::_internal_has_camera_seq_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CameraH265Config::has_camera_seq_number() const {
  return _internal_has_camera_seq_number();
}
inline void CameraH265Config::clear_camera_seq_number() {
  _impl_.camera_seq_number_ = -1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CameraH265Config::_internal_camera_seq_number() const {
  return _impl_.camera_seq_number_;
}
inline int32_t CameraH265Config::camera_seq_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.camera_seq_number)
  return _internal_camera_seq_number();
}
inline void CameraH265Config::_internal_set_camera_seq_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.camera_seq_number_ = value;
}
inline void CameraH265Config::set_camera_seq_number(int32_t value) {
  _internal_set_camera_seq_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.camera_seq_number)
}

// optional .apollo.drivers.video.config.CameraH265Config.CompressConfig compress_conf = 25;
inline bool CameraH265Config::_internal_has_compress_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compress_conf_ != nullptr);
  return value;
}
inline bool CameraH265Config::has_compress_conf() const {
  return _internal_has_compress_conf();
}
inline void CameraH265Config::clear_compress_conf() {
  if (_impl_.compress_conf_ != nullptr) _impl_.compress_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& CameraH265Config::_internal_compress_conf() const {
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig* p = _impl_.compress_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::video::config::CameraH265Config_CompressConfig&>(
      ::apollo::drivers::video::config::_CameraH265Config_CompressConfig_default_instance_);
}
inline const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& CameraH265Config::compress_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.compress_conf)
  return _internal_compress_conf();
}
inline void CameraH265Config::unsafe_arena_set_allocated_compress_conf(
    ::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compress_conf_);
  }
  _impl_.compress_conf_ = compress_conf;
  if (compress_conf) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.video.config.CameraH265Config.compress_conf)
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::release_compress_conf() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* temp = _impl_.compress_conf_;
  _impl_.compress_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::unsafe_arena_release_compress_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.compress_conf)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* temp = _impl_.compress_conf_;
  _impl_.compress_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::_internal_mutable_compress_conf() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.compress_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config_CompressConfig>(GetArenaForAllocation());
    _impl_.compress_conf_ = p;
  }
  return _impl_.compress_conf_;
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::mutable_compress_conf() {
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* _msg = _internal_mutable_compress_conf();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.compress_conf)
  return _msg;
}
inline void CameraH265Config::set_allocated_compress_conf(::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compress_conf_;
  }
  if (compress_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compress_conf);
    if (message_arena != submessage_arena) {
      compress_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compress_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.compress_conf_ = compress_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.compress_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace video
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
