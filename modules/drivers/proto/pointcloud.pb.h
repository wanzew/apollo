// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/pointcloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fpointcloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fpointcloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fpointcloud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fproto_2fpointcloud_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto;
namespace apollo {
namespace drivers {
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointXYZIT;
struct PointXYZITDefaultTypeInternal;
extern PointXYZITDefaultTypeInternal _PointXYZIT_default_instance_;
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::PointCloud* Arena::CreateMaybeMessage<::apollo::drivers::PointCloud>(Arena*);
template<> ::apollo::drivers::PointXYZIT* Arena::CreateMaybeMessage<::apollo::drivers::PointXYZIT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {

// ===================================================================

class PointXYZIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.PointXYZIT) */ {
 public:
  inline PointXYZIT() : PointXYZIT(nullptr) {}
  ~PointXYZIT() override;
  explicit PROTOBUF_CONSTEXPR PointXYZIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointXYZIT(const PointXYZIT& from);
  PointXYZIT(PointXYZIT&& from) noexcept
    : PointXYZIT() {
    *this = ::std::move(from);
  }

  inline PointXYZIT& operator=(const PointXYZIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointXYZIT& operator=(PointXYZIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointXYZIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointXYZIT* internal_default_instance() {
    return reinterpret_cast<const PointXYZIT*>(
               &_PointXYZIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointXYZIT& a, PointXYZIT& b) {
    a.Swap(&b);
  }
  inline void Swap(PointXYZIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointXYZIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointXYZIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointXYZIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointXYZIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointXYZIT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointXYZIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.PointXYZIT";
  }
  protected:
  explicit PointXYZIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 5,
    kIntensityFieldNumber = 4,
    kZFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional uint64 timestamp = 5 [default = 0];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint32 intensity = 4 [default = 0];
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  uint32_t intensity() const;
  void set_intensity(uint32_t value);
  private:
  uint32_t _internal_intensity() const;
  void _internal_set_intensity(uint32_t value);
  public:

  // optional float z = 3 [default = nan];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.PointXYZIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t timestamp_;
    uint32_t intensity_;
    float z_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fpointcloud_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit PROTOBUF_CONSTEXPR PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloud& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointCloud& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 4,
    kFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kIsDenseFieldNumber = 3,
    kWidthFieldNumber = 6,
    kMeasurementTimeFieldNumber = 5,
    kHeightFieldNumber = 7,
  };
  // repeated .apollo.drivers.PointXYZIT point = 4;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::drivers::PointXYZIT* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::PointXYZIT >*
      mutable_point();
  private:
  const ::apollo::drivers::PointXYZIT& _internal_point(int index) const;
  ::apollo::drivers::PointXYZIT* _internal_add_point();
  public:
  const ::apollo::drivers::PointXYZIT& point(int index) const;
  ::apollo::drivers::PointXYZIT* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::PointXYZIT >&
      point() const;

  // optional string frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional bool is_dense = 3;
  bool has_is_dense() const;
  private:
  bool _internal_has_is_dense() const;
  public:
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);
  private:
  bool _internal_is_dense() const;
  void _internal_set_is_dense(bool value);
  public:

  // optional uint32 width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional double measurement_time = 5;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional uint32 height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::PointXYZIT > point_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    ::apollo::common::Header* header_;
    bool is_dense_;
    uint32_t width_;
    double measurement_time_;
    uint32_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fpointcloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointXYZIT

// optional float x = 1 [default = nan];
inline bool PointXYZIT::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointXYZIT::has_x() const {
  return _internal_has_x();
}
inline void PointXYZIT::clear_x() {
  _impl_.x_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PointXYZIT::_internal_x() const {
  return _impl_.x_;
}
inline float PointXYZIT::x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.x)
  return _internal_x();
}
inline void PointXYZIT::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.x_ = value;
}
inline void PointXYZIT::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.x)
}

// optional float y = 2 [default = nan];
inline bool PointXYZIT::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointXYZIT::has_y() const {
  return _internal_has_y();
}
inline void PointXYZIT::clear_y() {
  _impl_.y_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PointXYZIT::_internal_y() const {
  return _impl_.y_;
}
inline float PointXYZIT::y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.y)
  return _internal_y();
}
inline void PointXYZIT::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.y_ = value;
}
inline void PointXYZIT::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.y)
}

// optional float z = 3 [default = nan];
inline bool PointXYZIT::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointXYZIT::has_z() const {
  return _internal_has_z();
}
inline void PointXYZIT::clear_z() {
  _impl_.z_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PointXYZIT::_internal_z() const {
  return _impl_.z_;
}
inline float PointXYZIT::z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.z)
  return _internal_z();
}
inline void PointXYZIT::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void PointXYZIT::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.z)
}

// optional uint32 intensity = 4 [default = 0];
inline bool PointXYZIT::_internal_has_intensity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointXYZIT::has_intensity() const {
  return _internal_has_intensity();
}
inline void PointXYZIT::clear_intensity() {
  _impl_.intensity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PointXYZIT::_internal_intensity() const {
  return _impl_.intensity_;
}
inline uint32_t PointXYZIT::intensity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.intensity)
  return _internal_intensity();
}
inline void PointXYZIT::_internal_set_intensity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intensity_ = value;
}
inline void PointXYZIT::set_intensity(uint32_t value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.intensity)
}

// optional uint64 timestamp = 5 [default = 0];
inline bool PointXYZIT::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointXYZIT::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PointXYZIT::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PointXYZIT::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t PointXYZIT::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.timestamp)
  return _internal_timestamp();
}
inline void PointXYZIT::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void PointXYZIT::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.timestamp)
}

// -------------------------------------------------------------------

// PointCloud

// optional .apollo.common.Header header = 1;
inline bool PointCloud::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PointCloud::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PointCloud::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.header)
  return _internal_header();
}
inline void PointCloud::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.PointCloud.header)
}
inline ::apollo::common::Header* PointCloud::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* PointCloud::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.PointCloud.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PointCloud::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* PointCloud::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.header)
  return _msg;
}
inline void PointCloud::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.header)
}

// optional string frame_id = 2;
inline bool PointCloud::_internal_has_frame_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloud::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void PointCloud::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PointCloud::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PointCloud::set_frame_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.frame_id)
}
inline std::string* PointCloud::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.frame_id)
  return _s;
}
inline const std::string& PointCloud::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void PointCloud::_internal_set_frame_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PointCloud::_internal_mutable_frame_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PointCloud::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.PointCloud.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.frame_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PointCloud::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.frame_id)
}

// optional bool is_dense = 3;
inline bool PointCloud::_internal_has_is_dense() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud::has_is_dense() const {
  return _internal_has_is_dense();
}
inline void PointCloud::clear_is_dense() {
  _impl_.is_dense_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PointCloud::_internal_is_dense() const {
  return _impl_.is_dense_;
}
inline bool PointCloud::is_dense() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.is_dense)
  return _internal_is_dense();
}
inline void PointCloud::_internal_set_is_dense(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_dense_ = value;
}
inline void PointCloud::set_is_dense(bool value) {
  _internal_set_is_dense(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.is_dense)
}

// repeated .apollo.drivers.PointXYZIT point = 4;
inline int PointCloud::_internal_point_size() const {
  return _impl_.point_.size();
}
inline int PointCloud::point_size() const {
  return _internal_point_size();
}
inline void PointCloud::clear_point() {
  _impl_.point_.Clear();
}
inline ::apollo::drivers::PointXYZIT* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.point)
  return _impl_.point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::PointXYZIT >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.PointCloud.point)
  return &_impl_.point_;
}
inline const ::apollo::drivers::PointXYZIT& PointCloud::_internal_point(int index) const {
  return _impl_.point_.Get(index);
}
inline const ::apollo::drivers::PointXYZIT& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.point)
  return _internal_point(index);
}
inline ::apollo::drivers::PointXYZIT* PointCloud::_internal_add_point() {
  return _impl_.point_.Add();
}
inline ::apollo::drivers::PointXYZIT* PointCloud::add_point() {
  ::apollo::drivers::PointXYZIT* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:apollo.drivers.PointCloud.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::PointXYZIT >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.PointCloud.point)
  return _impl_.point_;
}

// optional double measurement_time = 5;
inline bool PointCloud::_internal_has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointCloud::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void PointCloud::clear_measurement_time() {
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PointCloud::_internal_measurement_time() const {
  return _impl_.measurement_time_;
}
inline double PointCloud::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.measurement_time)
  return _internal_measurement_time();
}
inline void PointCloud::_internal_set_measurement_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.measurement_time_ = value;
}
inline void PointCloud::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.measurement_time)
}

// optional uint32 width = 6;
inline bool PointCloud::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointCloud::has_width() const {
  return _internal_has_width();
}
inline void PointCloud::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PointCloud::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t PointCloud::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.width)
  return _internal_width();
}
inline void PointCloud::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}
inline void PointCloud::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.width)
}

// optional uint32 height = 7;
inline bool PointCloud::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointCloud::has_height() const {
  return _internal_has_height();
}
inline void PointCloud::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PointCloud::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t PointCloud::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.height)
  return _internal_height();
}
inline void PointCloud::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.height_ = value;
}
inline void PointCloud::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fpointcloud_2eproto
