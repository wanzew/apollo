// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/racobit_radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
namespace apollo {
namespace drivers {
class RacobitClusterListStatus_600;
struct RacobitClusterListStatus_600DefaultTypeInternal;
extern RacobitClusterListStatus_600DefaultTypeInternal _RacobitClusterListStatus_600_default_instance_;
class RacobitObjectListStatus_60A;
struct RacobitObjectListStatus_60ADefaultTypeInternal;
extern RacobitObjectListStatus_60ADefaultTypeInternal _RacobitObjectListStatus_60A_default_instance_;
class RacobitRadar;
struct RacobitRadarDefaultTypeInternal;
extern RacobitRadarDefaultTypeInternal _RacobitRadar_default_instance_;
class RacobitRadarObs;
struct RacobitRadarObsDefaultTypeInternal;
extern RacobitRadarObsDefaultTypeInternal _RacobitRadarObs_default_instance_;
class RacobitRadarState_201;
struct RacobitRadarState_201DefaultTypeInternal;
extern RacobitRadarState_201DefaultTypeInternal _RacobitRadarState_201_default_instance_;
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::RacobitClusterListStatus_600* Arena::CreateMaybeMessage<::apollo::drivers::RacobitClusterListStatus_600>(Arena*);
template<> ::apollo::drivers::RacobitObjectListStatus_60A* Arena::CreateMaybeMessage<::apollo::drivers::RacobitObjectListStatus_60A>(Arena*);
template<> ::apollo::drivers::RacobitRadar* Arena::CreateMaybeMessage<::apollo::drivers::RacobitRadar>(Arena*);
template<> ::apollo::drivers::RacobitRadarObs* Arena::CreateMaybeMessage<::apollo::drivers::RacobitRadarObs>(Arena*);
template<> ::apollo::drivers::RacobitRadarState_201* Arena::CreateMaybeMessage<::apollo::drivers::RacobitRadarState_201>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {

// ===================================================================

class RacobitClusterListStatus_600 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RacobitClusterListStatus_600) */ {
 public:
  inline RacobitClusterListStatus_600() : RacobitClusterListStatus_600(nullptr) {}
  ~RacobitClusterListStatus_600() override;
  explicit PROTOBUF_CONSTEXPR RacobitClusterListStatus_600(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RacobitClusterListStatus_600(const RacobitClusterListStatus_600& from);
  RacobitClusterListStatus_600(RacobitClusterListStatus_600&& from) noexcept
    : RacobitClusterListStatus_600() {
    *this = ::std::move(from);
  }

  inline RacobitClusterListStatus_600& operator=(const RacobitClusterListStatus_600& from) {
    CopyFrom(from);
    return *this;
  }
  inline RacobitClusterListStatus_600& operator=(RacobitClusterListStatus_600&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RacobitClusterListStatus_600& default_instance() {
    return *internal_default_instance();
  }
  static inline const RacobitClusterListStatus_600* internal_default_instance() {
    return reinterpret_cast<const RacobitClusterListStatus_600*>(
               &_RacobitClusterListStatus_600_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RacobitClusterListStatus_600& a, RacobitClusterListStatus_600& b) {
    a.Swap(&b);
  }
  inline void Swap(RacobitClusterListStatus_600* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RacobitClusterListStatus_600* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RacobitClusterListStatus_600* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RacobitClusterListStatus_600>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RacobitClusterListStatus_600& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RacobitClusterListStatus_600& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RacobitClusterListStatus_600* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RacobitClusterListStatus_600";
  }
  protected:
  explicit RacobitClusterListStatus_600(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearFieldNumber = 1,
    kFarFieldNumber = 2,
    kInterfaceVersionFieldNumber = 4,
    kMeasCounterFieldNumber = 3,
  };
  // optional int32 near = 1 [default = 0];
  bool has_near() const;
  private:
  bool _internal_has_near() const;
  public:
  void clear_near();
  int32_t near() const;
  void set_near(int32_t value);
  private:
  int32_t _internal_near() const;
  void _internal_set_near(int32_t value);
  public:

  // optional int32 far = 2 [default = 0];
  bool has_far() const;
  private:
  bool _internal_has_far() const;
  public:
  void clear_far();
  int32_t far() const;
  void set_far(int32_t value);
  private:
  int32_t _internal_far() const;
  void _internal_set_far(int32_t value);
  public:

  // optional int32 interface_version = 4;
  bool has_interface_version() const;
  private:
  bool _internal_has_interface_version() const;
  public:
  void clear_interface_version();
  int32_t interface_version() const;
  void set_interface_version(int32_t value);
  private:
  int32_t _internal_interface_version() const;
  void _internal_set_interface_version(int32_t value);
  public:

  // optional int32 meas_counter = 3 [default = -1];
  bool has_meas_counter() const;
  private:
  bool _internal_has_meas_counter() const;
  public:
  void clear_meas_counter();
  int32_t meas_counter() const;
  void set_meas_counter(int32_t value);
  private:
  int32_t _internal_meas_counter() const;
  void _internal_set_meas_counter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RacobitClusterListStatus_600)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t near_;
    int32_t far_;
    int32_t interface_version_;
    int32_t meas_counter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
};
// -------------------------------------------------------------------

class RacobitObjectListStatus_60A final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RacobitObjectListStatus_60A) */ {
 public:
  inline RacobitObjectListStatus_60A() : RacobitObjectListStatus_60A(nullptr) {}
  ~RacobitObjectListStatus_60A() override;
  explicit PROTOBUF_CONSTEXPR RacobitObjectListStatus_60A(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RacobitObjectListStatus_60A(const RacobitObjectListStatus_60A& from);
  RacobitObjectListStatus_60A(RacobitObjectListStatus_60A&& from) noexcept
    : RacobitObjectListStatus_60A() {
    *this = ::std::move(from);
  }

  inline RacobitObjectListStatus_60A& operator=(const RacobitObjectListStatus_60A& from) {
    CopyFrom(from);
    return *this;
  }
  inline RacobitObjectListStatus_60A& operator=(RacobitObjectListStatus_60A&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RacobitObjectListStatus_60A& default_instance() {
    return *internal_default_instance();
  }
  static inline const RacobitObjectListStatus_60A* internal_default_instance() {
    return reinterpret_cast<const RacobitObjectListStatus_60A*>(
               &_RacobitObjectListStatus_60A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RacobitObjectListStatus_60A& a, RacobitObjectListStatus_60A& b) {
    a.Swap(&b);
  }
  inline void Swap(RacobitObjectListStatus_60A* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RacobitObjectListStatus_60A* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RacobitObjectListStatus_60A* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RacobitObjectListStatus_60A>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RacobitObjectListStatus_60A& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RacobitObjectListStatus_60A& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RacobitObjectListStatus_60A* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RacobitObjectListStatus_60A";
  }
  protected:
  explicit RacobitObjectListStatus_60A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNofObjectsFieldNumber = 1,
    kInterfaceVersionFieldNumber = 3,
    kMeasCounterFieldNumber = 2,
  };
  // optional int32 nof_objects = 1 [default = 0];
  bool has_nof_objects() const;
  private:
  bool _internal_has_nof_objects() const;
  public:
  void clear_nof_objects();
  int32_t nof_objects() const;
  void set_nof_objects(int32_t value);
  private:
  int32_t _internal_nof_objects() const;
  void _internal_set_nof_objects(int32_t value);
  public:

  // optional int32 interface_version = 3;
  bool has_interface_version() const;
  private:
  bool _internal_has_interface_version() const;
  public:
  void clear_interface_version();
  int32_t interface_version() const;
  void set_interface_version(int32_t value);
  private:
  int32_t _internal_interface_version() const;
  void _internal_set_interface_version(int32_t value);
  public:

  // optional int32 meas_counter = 2 [default = -1];
  bool has_meas_counter() const;
  private:
  bool _internal_has_meas_counter() const;
  public:
  void clear_meas_counter();
  int32_t meas_counter() const;
  void set_meas_counter(int32_t value);
  private:
  int32_t _internal_meas_counter() const;
  void _internal_set_meas_counter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RacobitObjectListStatus_60A)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t nof_objects_;
    int32_t interface_version_;
    int32_t meas_counter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
};
// -------------------------------------------------------------------

class RacobitRadarState_201 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RacobitRadarState_201) */ {
 public:
  inline RacobitRadarState_201() : RacobitRadarState_201(nullptr) {}
  ~RacobitRadarState_201() override;
  explicit PROTOBUF_CONSTEXPR RacobitRadarState_201(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RacobitRadarState_201(const RacobitRadarState_201& from);
  RacobitRadarState_201(RacobitRadarState_201&& from) noexcept
    : RacobitRadarState_201() {
    *this = ::std::move(from);
  }

  inline RacobitRadarState_201& operator=(const RacobitRadarState_201& from) {
    CopyFrom(from);
    return *this;
  }
  inline RacobitRadarState_201& operator=(RacobitRadarState_201&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RacobitRadarState_201& default_instance() {
    return *internal_default_instance();
  }
  static inline const RacobitRadarState_201* internal_default_instance() {
    return reinterpret_cast<const RacobitRadarState_201*>(
               &_RacobitRadarState_201_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RacobitRadarState_201& a, RacobitRadarState_201& b) {
    a.Swap(&b);
  }
  inline void Swap(RacobitRadarState_201* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RacobitRadarState_201* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RacobitRadarState_201* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RacobitRadarState_201>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RacobitRadarState_201& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RacobitRadarState_201& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RacobitRadarState_201* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RacobitRadarState_201";
  }
  protected:
  explicit RacobitRadarState_201(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxDistanceFieldNumber = 1,
    kRadarPowerFieldNumber = 2,
    kOutputTypeFieldNumber = 3,
    kRcsThresholdFieldNumber = 4,
    kSendQualityFieldNumber = 5,
    kSendExtInfoFieldNumber = 6,
  };
  // optional uint32 max_distance = 1;
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  uint32_t max_distance() const;
  void set_max_distance(uint32_t value);
  private:
  uint32_t _internal_max_distance() const;
  void _internal_set_max_distance(uint32_t value);
  public:

  // optional uint32 radar_power = 2;
  bool has_radar_power() const;
  private:
  bool _internal_has_radar_power() const;
  public:
  void clear_radar_power();
  uint32_t radar_power() const;
  void set_radar_power(uint32_t value);
  private:
  uint32_t _internal_radar_power() const;
  void _internal_set_radar_power(uint32_t value);
  public:

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  ::apollo::drivers::racobit_radar::OutputType output_type() const;
  void set_output_type(::apollo::drivers::racobit_radar::OutputType value);
  private:
  ::apollo::drivers::racobit_radar::OutputType _internal_output_type() const;
  void _internal_set_output_type(::apollo::drivers::racobit_radar::OutputType value);
  public:

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
  bool has_rcs_threshold() const;
  private:
  bool _internal_has_rcs_threshold() const;
  public:
  void clear_rcs_threshold();
  ::apollo::drivers::racobit_radar::RcsThreshold rcs_threshold() const;
  void set_rcs_threshold(::apollo::drivers::racobit_radar::RcsThreshold value);
  private:
  ::apollo::drivers::racobit_radar::RcsThreshold _internal_rcs_threshold() const;
  void _internal_set_rcs_threshold(::apollo::drivers::racobit_radar::RcsThreshold value);
  public:

  // optional bool send_quality = 5;
  bool has_send_quality() const;
  private:
  bool _internal_has_send_quality() const;
  public:
  void clear_send_quality();
  bool send_quality() const;
  void set_send_quality(bool value);
  private:
  bool _internal_send_quality() const;
  void _internal_set_send_quality(bool value);
  public:

  // optional bool send_ext_info = 6;
  bool has_send_ext_info() const;
  private:
  bool _internal_has_send_ext_info() const;
  public:
  void clear_send_ext_info();
  bool send_ext_info() const;
  void set_send_ext_info(bool value);
  private:
  bool _internal_send_ext_info() const;
  void _internal_set_send_ext_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RacobitRadarState_201)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t max_distance_;
    uint32_t radar_power_;
    int output_type_;
    int rcs_threshold_;
    bool send_quality_;
    bool send_ext_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
};
// -------------------------------------------------------------------

class RacobitRadarObs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RacobitRadarObs) */ {
 public:
  inline RacobitRadarObs() : RacobitRadarObs(nullptr) {}
  ~RacobitRadarObs() override;
  explicit PROTOBUF_CONSTEXPR RacobitRadarObs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RacobitRadarObs(const RacobitRadarObs& from);
  RacobitRadarObs(RacobitRadarObs&& from) noexcept
    : RacobitRadarObs() {
    *this = ::std::move(from);
  }

  inline RacobitRadarObs& operator=(const RacobitRadarObs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RacobitRadarObs& operator=(RacobitRadarObs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RacobitRadarObs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RacobitRadarObs* internal_default_instance() {
    return reinterpret_cast<const RacobitRadarObs*>(
               &_RacobitRadarObs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RacobitRadarObs& a, RacobitRadarObs& b) {
    a.Swap(&b);
  }
  inline void Swap(RacobitRadarObs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RacobitRadarObs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RacobitRadarObs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RacobitRadarObs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RacobitRadarObs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RacobitRadarObs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RacobitRadarObs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RacobitRadarObs";
  }
  protected:
  explicit RacobitRadarObs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kClusterortrackFieldNumber = 2,
    kObstacleIdFieldNumber = 3,
    kLongitudeDistFieldNumber = 4,
    kLateralDistFieldNumber = 5,
    kLongitudeVelFieldNumber = 6,
    kLateralVelFieldNumber = 7,
    kRcsFieldNumber = 8,
    kLongitudeDistRmsFieldNumber = 10,
    kLateralDistRmsFieldNumber = 11,
    kLongitudeVelRmsFieldNumber = 12,
    kDynpropFieldNumber = 9,
    kMeasStateFieldNumber = 15,
    kLateralVelRmsFieldNumber = 13,
    kProbexistFieldNumber = 14,
    kLongitudeAccelFieldNumber = 16,
    kLateralAccelFieldNumber = 17,
    kOritationAngleFieldNumber = 18,
    kLongitudeAccelRmsFieldNumber = 19,
    kLateralAccelRmsFieldNumber = 20,
    kOritationAngleRmsFieldNumber = 21,
    kLengthFieldNumber = 22,
    kWidthFieldNumber = 23,
    kObstacleClassFieldNumber = 24,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional bool clusterortrack = 2;
  bool has_clusterortrack() const;
  private:
  bool _internal_has_clusterortrack() const;
  public:
  void clear_clusterortrack();
  bool clusterortrack() const;
  void set_clusterortrack(bool value);
  private:
  bool _internal_clusterortrack() const;
  void _internal_set_clusterortrack(bool value);
  public:

  // optional int32 obstacle_id = 3;
  bool has_obstacle_id() const;
  private:
  bool _internal_has_obstacle_id() const;
  public:
  void clear_obstacle_id();
  int32_t obstacle_id() const;
  void set_obstacle_id(int32_t value);
  private:
  int32_t _internal_obstacle_id() const;
  void _internal_set_obstacle_id(int32_t value);
  public:

  // optional double longitude_dist = 4;
  bool has_longitude_dist() const;
  private:
  bool _internal_has_longitude_dist() const;
  public:
  void clear_longitude_dist();
  double longitude_dist() const;
  void set_longitude_dist(double value);
  private:
  double _internal_longitude_dist() const;
  void _internal_set_longitude_dist(double value);
  public:

  // optional double lateral_dist = 5;
  bool has_lateral_dist() const;
  private:
  bool _internal_has_lateral_dist() const;
  public:
  void clear_lateral_dist();
  double lateral_dist() const;
  void set_lateral_dist(double value);
  private:
  double _internal_lateral_dist() const;
  void _internal_set_lateral_dist(double value);
  public:

  // optional double longitude_vel = 6;
  bool has_longitude_vel() const;
  private:
  bool _internal_has_longitude_vel() const;
  public:
  void clear_longitude_vel();
  double longitude_vel() const;
  void set_longitude_vel(double value);
  private:
  double _internal_longitude_vel() const;
  void _internal_set_longitude_vel(double value);
  public:

  // optional double lateral_vel = 7;
  bool has_lateral_vel() const;
  private:
  bool _internal_has_lateral_vel() const;
  public:
  void clear_lateral_vel();
  double lateral_vel() const;
  void set_lateral_vel(double value);
  private:
  double _internal_lateral_vel() const;
  void _internal_set_lateral_vel(double value);
  public:

  // optional double rcs = 8;
  bool has_rcs() const;
  private:
  bool _internal_has_rcs() const;
  public:
  void clear_rcs();
  double rcs() const;
  void set_rcs(double value);
  private:
  double _internal_rcs() const;
  void _internal_set_rcs(double value);
  public:

  // optional double longitude_dist_rms = 10;
  bool has_longitude_dist_rms() const;
  private:
  bool _internal_has_longitude_dist_rms() const;
  public:
  void clear_longitude_dist_rms();
  double longitude_dist_rms() const;
  void set_longitude_dist_rms(double value);
  private:
  double _internal_longitude_dist_rms() const;
  void _internal_set_longitude_dist_rms(double value);
  public:

  // optional double lateral_dist_rms = 11;
  bool has_lateral_dist_rms() const;
  private:
  bool _internal_has_lateral_dist_rms() const;
  public:
  void clear_lateral_dist_rms();
  double lateral_dist_rms() const;
  void set_lateral_dist_rms(double value);
  private:
  double _internal_lateral_dist_rms() const;
  void _internal_set_lateral_dist_rms(double value);
  public:

  // optional double longitude_vel_rms = 12;
  bool has_longitude_vel_rms() const;
  private:
  bool _internal_has_longitude_vel_rms() const;
  public:
  void clear_longitude_vel_rms();
  double longitude_vel_rms() const;
  void set_longitude_vel_rms(double value);
  private:
  double _internal_longitude_vel_rms() const;
  void _internal_set_longitude_vel_rms(double value);
  public:

  // optional int32 dynprop = 9;
  bool has_dynprop() const;
  private:
  bool _internal_has_dynprop() const;
  public:
  void clear_dynprop();
  int32_t dynprop() const;
  void set_dynprop(int32_t value);
  private:
  int32_t _internal_dynprop() const;
  void _internal_set_dynprop(int32_t value);
  public:

  // optional int32 meas_state = 15;
  bool has_meas_state() const;
  private:
  bool _internal_has_meas_state() const;
  public:
  void clear_meas_state();
  int32_t meas_state() const;
  void set_meas_state(int32_t value);
  private:
  int32_t _internal_meas_state() const;
  void _internal_set_meas_state(int32_t value);
  public:

  // optional double lateral_vel_rms = 13;
  bool has_lateral_vel_rms() const;
  private:
  bool _internal_has_lateral_vel_rms() const;
  public:
  void clear_lateral_vel_rms();
  double lateral_vel_rms() const;
  void set_lateral_vel_rms(double value);
  private:
  double _internal_lateral_vel_rms() const;
  void _internal_set_lateral_vel_rms(double value);
  public:

  // optional double probexist = 14;
  bool has_probexist() const;
  private:
  bool _internal_has_probexist() const;
  public:
  void clear_probexist();
  double probexist() const;
  void set_probexist(double value);
  private:
  double _internal_probexist() const;
  void _internal_set_probexist(double value);
  public:

  // optional double longitude_accel = 16;
  bool has_longitude_accel() const;
  private:
  bool _internal_has_longitude_accel() const;
  public:
  void clear_longitude_accel();
  double longitude_accel() const;
  void set_longitude_accel(double value);
  private:
  double _internal_longitude_accel() const;
  void _internal_set_longitude_accel(double value);
  public:

  // optional double lateral_accel = 17;
  bool has_lateral_accel() const;
  private:
  bool _internal_has_lateral_accel() const;
  public:
  void clear_lateral_accel();
  double lateral_accel() const;
  void set_lateral_accel(double value);
  private:
  double _internal_lateral_accel() const;
  void _internal_set_lateral_accel(double value);
  public:

  // optional double oritation_angle = 18;
  bool has_oritation_angle() const;
  private:
  bool _internal_has_oritation_angle() const;
  public:
  void clear_oritation_angle();
  double oritation_angle() const;
  void set_oritation_angle(double value);
  private:
  double _internal_oritation_angle() const;
  void _internal_set_oritation_angle(double value);
  public:

  // optional double longitude_accel_rms = 19;
  bool has_longitude_accel_rms() const;
  private:
  bool _internal_has_longitude_accel_rms() const;
  public:
  void clear_longitude_accel_rms();
  double longitude_accel_rms() const;
  void set_longitude_accel_rms(double value);
  private:
  double _internal_longitude_accel_rms() const;
  void _internal_set_longitude_accel_rms(double value);
  public:

  // optional double lateral_accel_rms = 20;
  bool has_lateral_accel_rms() const;
  private:
  bool _internal_has_lateral_accel_rms() const;
  public:
  void clear_lateral_accel_rms();
  double lateral_accel_rms() const;
  void set_lateral_accel_rms(double value);
  private:
  double _internal_lateral_accel_rms() const;
  void _internal_set_lateral_accel_rms(double value);
  public:

  // optional double oritation_angle_rms = 21;
  bool has_oritation_angle_rms() const;
  private:
  bool _internal_has_oritation_angle_rms() const;
  public:
  void clear_oritation_angle_rms();
  double oritation_angle_rms() const;
  void set_oritation_angle_rms(double value);
  private:
  double _internal_oritation_angle_rms() const;
  void _internal_set_oritation_angle_rms(double value);
  public:

  // optional double length = 22;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 23;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional int32 obstacle_class = 24;
  bool has_obstacle_class() const;
  private:
  bool _internal_has_obstacle_class() const;
  public:
  void clear_obstacle_class();
  int32_t obstacle_class() const;
  void set_obstacle_class(int32_t value);
  private:
  int32_t _internal_obstacle_class() const;
  void _internal_set_obstacle_class(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RacobitRadarObs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Header* header_;
    bool clusterortrack_;
    int32_t obstacle_id_;
    double longitude_dist_;
    double lateral_dist_;
    double longitude_vel_;
    double lateral_vel_;
    double rcs_;
    double longitude_dist_rms_;
    double lateral_dist_rms_;
    double longitude_vel_rms_;
    int32_t dynprop_;
    int32_t meas_state_;
    double lateral_vel_rms_;
    double probexist_;
    double longitude_accel_;
    double lateral_accel_;
    double oritation_angle_;
    double longitude_accel_rms_;
    double lateral_accel_rms_;
    double oritation_angle_rms_;
    double length_;
    double width_;
    int32_t obstacle_class_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
};
// -------------------------------------------------------------------

class RacobitRadar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RacobitRadar) */ {
 public:
  inline RacobitRadar() : RacobitRadar(nullptr) {}
  ~RacobitRadar() override;
  explicit PROTOBUF_CONSTEXPR RacobitRadar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RacobitRadar(const RacobitRadar& from);
  RacobitRadar(RacobitRadar&& from) noexcept
    : RacobitRadar() {
    *this = ::std::move(from);
  }

  inline RacobitRadar& operator=(const RacobitRadar& from) {
    CopyFrom(from);
    return *this;
  }
  inline RacobitRadar& operator=(RacobitRadar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RacobitRadar& default_instance() {
    return *internal_default_instance();
  }
  static inline const RacobitRadar* internal_default_instance() {
    return reinterpret_cast<const RacobitRadar*>(
               &_RacobitRadar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RacobitRadar& a, RacobitRadar& b) {
    a.Swap(&b);
  }
  inline void Swap(RacobitRadar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RacobitRadar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RacobitRadar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RacobitRadar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RacobitRadar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RacobitRadar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RacobitRadar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RacobitRadar";
  }
  protected:
  explicit RacobitRadar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContiobsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kRadarStateFieldNumber = 3,
    kClusterListStatusFieldNumber = 4,
    kObjectListStatusFieldNumber = 5,
  };
  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  int contiobs_size() const;
  private:
  int _internal_contiobs_size() const;
  public:
  void clear_contiobs();
  ::apollo::drivers::RacobitRadarObs* mutable_contiobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::RacobitRadarObs >*
      mutable_contiobs();
  private:
  const ::apollo::drivers::RacobitRadarObs& _internal_contiobs(int index) const;
  ::apollo::drivers::RacobitRadarObs* _internal_add_contiobs();
  public:
  const ::apollo::drivers::RacobitRadarObs& contiobs(int index) const;
  ::apollo::drivers::RacobitRadarObs* add_contiobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::RacobitRadarObs >&
      contiobs() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
  bool has_radar_state() const;
  private:
  bool _internal_has_radar_state() const;
  public:
  void clear_radar_state();
  const ::apollo::drivers::RacobitRadarState_201& radar_state() const;
  PROTOBUF_NODISCARD ::apollo::drivers::RacobitRadarState_201* release_radar_state();
  ::apollo::drivers::RacobitRadarState_201* mutable_radar_state();
  void set_allocated_radar_state(::apollo::drivers::RacobitRadarState_201* radar_state);
  private:
  const ::apollo::drivers::RacobitRadarState_201& _internal_radar_state() const;
  ::apollo::drivers::RacobitRadarState_201* _internal_mutable_radar_state();
  public:
  void unsafe_arena_set_allocated_radar_state(
      ::apollo::drivers::RacobitRadarState_201* radar_state);
  ::apollo::drivers::RacobitRadarState_201* unsafe_arena_release_radar_state();

  // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
  bool has_cluster_list_status() const;
  private:
  bool _internal_has_cluster_list_status() const;
  public:
  void clear_cluster_list_status();
  const ::apollo::drivers::RacobitClusterListStatus_600& cluster_list_status() const;
  PROTOBUF_NODISCARD ::apollo::drivers::RacobitClusterListStatus_600* release_cluster_list_status();
  ::apollo::drivers::RacobitClusterListStatus_600* mutable_cluster_list_status();
  void set_allocated_cluster_list_status(::apollo::drivers::RacobitClusterListStatus_600* cluster_list_status);
  private:
  const ::apollo::drivers::RacobitClusterListStatus_600& _internal_cluster_list_status() const;
  ::apollo::drivers::RacobitClusterListStatus_600* _internal_mutable_cluster_list_status();
  public:
  void unsafe_arena_set_allocated_cluster_list_status(
      ::apollo::drivers::RacobitClusterListStatus_600* cluster_list_status);
  ::apollo::drivers::RacobitClusterListStatus_600* unsafe_arena_release_cluster_list_status();

  // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
  bool has_object_list_status() const;
  private:
  bool _internal_has_object_list_status() const;
  public:
  void clear_object_list_status();
  const ::apollo::drivers::RacobitObjectListStatus_60A& object_list_status() const;
  PROTOBUF_NODISCARD ::apollo::drivers::RacobitObjectListStatus_60A* release_object_list_status();
  ::apollo::drivers::RacobitObjectListStatus_60A* mutable_object_list_status();
  void set_allocated_object_list_status(::apollo::drivers::RacobitObjectListStatus_60A* object_list_status);
  private:
  const ::apollo::drivers::RacobitObjectListStatus_60A& _internal_object_list_status() const;
  ::apollo::drivers::RacobitObjectListStatus_60A* _internal_mutable_object_list_status();
  public:
  void unsafe_arena_set_allocated_object_list_status(
      ::apollo::drivers::RacobitObjectListStatus_60A* object_list_status);
  ::apollo::drivers::RacobitObjectListStatus_60A* unsafe_arena_release_object_list_status();

  // @@protoc_insertion_point(class_scope:apollo.drivers.RacobitRadar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::RacobitRadarObs > contiobs_;
    ::apollo::common::Header* header_;
    ::apollo::drivers::RacobitRadarState_201* radar_state_;
    ::apollo::drivers::RacobitClusterListStatus_600* cluster_list_status_;
    ::apollo::drivers::RacobitObjectListStatus_60A* object_list_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RacobitClusterListStatus_600

// optional int32 near = 1 [default = 0];
inline bool RacobitClusterListStatus_600::_internal_has_near() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RacobitClusterListStatus_600::has_near() const {
  return _internal_has_near();
}
inline void RacobitClusterListStatus_600::clear_near() {
  _impl_.near_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t RacobitClusterListStatus_600::_internal_near() const {
  return _impl_.near_;
}
inline int32_t RacobitClusterListStatus_600::near() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitClusterListStatus_600.near)
  return _internal_near();
}
inline void RacobitClusterListStatus_600::_internal_set_near(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.near_ = value;
}
inline void RacobitClusterListStatus_600::set_near(int32_t value) {
  _internal_set_near(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitClusterListStatus_600.near)
}

// optional int32 far = 2 [default = 0];
inline bool RacobitClusterListStatus_600::_internal_has_far() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RacobitClusterListStatus_600::has_far() const {
  return _internal_has_far();
}
inline void RacobitClusterListStatus_600::clear_far() {
  _impl_.far_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RacobitClusterListStatus_600::_internal_far() const {
  return _impl_.far_;
}
inline int32_t RacobitClusterListStatus_600::far() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitClusterListStatus_600.far)
  return _internal_far();
}
inline void RacobitClusterListStatus_600::_internal_set_far(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.far_ = value;
}
inline void RacobitClusterListStatus_600::set_far(int32_t value) {
  _internal_set_far(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitClusterListStatus_600.far)
}

// optional int32 meas_counter = 3 [default = -1];
inline bool RacobitClusterListStatus_600::_internal_has_meas_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RacobitClusterListStatus_600::has_meas_counter() const {
  return _internal_has_meas_counter();
}
inline void RacobitClusterListStatus_600::clear_meas_counter() {
  _impl_.meas_counter_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t RacobitClusterListStatus_600::_internal_meas_counter() const {
  return _impl_.meas_counter_;
}
inline int32_t RacobitClusterListStatus_600::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitClusterListStatus_600.meas_counter)
  return _internal_meas_counter();
}
inline void RacobitClusterListStatus_600::_internal_set_meas_counter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.meas_counter_ = value;
}
inline void RacobitClusterListStatus_600::set_meas_counter(int32_t value) {
  _internal_set_meas_counter(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitClusterListStatus_600.meas_counter)
}

// optional int32 interface_version = 4;
inline bool RacobitClusterListStatus_600::_internal_has_interface_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RacobitClusterListStatus_600::has_interface_version() const {
  return _internal_has_interface_version();
}
inline void RacobitClusterListStatus_600::clear_interface_version() {
  _impl_.interface_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RacobitClusterListStatus_600::_internal_interface_version() const {
  return _impl_.interface_version_;
}
inline int32_t RacobitClusterListStatus_600::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitClusterListStatus_600.interface_version)
  return _internal_interface_version();
}
inline void RacobitClusterListStatus_600::_internal_set_interface_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.interface_version_ = value;
}
inline void RacobitClusterListStatus_600::set_interface_version(int32_t value) {
  _internal_set_interface_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitClusterListStatus_600.interface_version)
}

// -------------------------------------------------------------------

// RacobitObjectListStatus_60A

// optional int32 nof_objects = 1 [default = 0];
inline bool RacobitObjectListStatus_60A::_internal_has_nof_objects() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RacobitObjectListStatus_60A::has_nof_objects() const {
  return _internal_has_nof_objects();
}
inline void RacobitObjectListStatus_60A::clear_nof_objects() {
  _impl_.nof_objects_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t RacobitObjectListStatus_60A::_internal_nof_objects() const {
  return _impl_.nof_objects_;
}
inline int32_t RacobitObjectListStatus_60A::nof_objects() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitObjectListStatus_60A.nof_objects)
  return _internal_nof_objects();
}
inline void RacobitObjectListStatus_60A::_internal_set_nof_objects(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nof_objects_ = value;
}
inline void RacobitObjectListStatus_60A::set_nof_objects(int32_t value) {
  _internal_set_nof_objects(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitObjectListStatus_60A.nof_objects)
}

// optional int32 meas_counter = 2 [default = -1];
inline bool RacobitObjectListStatus_60A::_internal_has_meas_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RacobitObjectListStatus_60A::has_meas_counter() const {
  return _internal_has_meas_counter();
}
inline void RacobitObjectListStatus_60A::clear_meas_counter() {
  _impl_.meas_counter_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RacobitObjectListStatus_60A::_internal_meas_counter() const {
  return _impl_.meas_counter_;
}
inline int32_t RacobitObjectListStatus_60A::meas_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitObjectListStatus_60A.meas_counter)
  return _internal_meas_counter();
}
inline void RacobitObjectListStatus_60A::_internal_set_meas_counter(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.meas_counter_ = value;
}
inline void RacobitObjectListStatus_60A::set_meas_counter(int32_t value) {
  _internal_set_meas_counter(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitObjectListStatus_60A.meas_counter)
}

// optional int32 interface_version = 3;
inline bool RacobitObjectListStatus_60A::_internal_has_interface_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RacobitObjectListStatus_60A::has_interface_version() const {
  return _internal_has_interface_version();
}
inline void RacobitObjectListStatus_60A::clear_interface_version() {
  _impl_.interface_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RacobitObjectListStatus_60A::_internal_interface_version() const {
  return _impl_.interface_version_;
}
inline int32_t RacobitObjectListStatus_60A::interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitObjectListStatus_60A.interface_version)
  return _internal_interface_version();
}
inline void RacobitObjectListStatus_60A::_internal_set_interface_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.interface_version_ = value;
}
inline void RacobitObjectListStatus_60A::set_interface_version(int32_t value) {
  _internal_set_interface_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitObjectListStatus_60A.interface_version)
}

// -------------------------------------------------------------------

// RacobitRadarState_201

// optional uint32 max_distance = 1;
inline bool RacobitRadarState_201::_internal_has_max_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void RacobitRadarState_201::clear_max_distance() {
  _impl_.max_distance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RacobitRadarState_201::_internal_max_distance() const {
  return _impl_.max_distance_;
}
inline uint32_t RacobitRadarState_201::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.max_distance)
  return _internal_max_distance();
}
inline void RacobitRadarState_201::_internal_set_max_distance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_distance_ = value;
}
inline void RacobitRadarState_201::set_max_distance(uint32_t value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.max_distance)
}

// optional uint32 radar_power = 2;
inline bool RacobitRadarState_201::_internal_has_radar_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_radar_power() const {
  return _internal_has_radar_power();
}
inline void RacobitRadarState_201::clear_radar_power() {
  _impl_.radar_power_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RacobitRadarState_201::_internal_radar_power() const {
  return _impl_.radar_power_;
}
inline uint32_t RacobitRadarState_201::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.radar_power)
  return _internal_radar_power();
}
inline void RacobitRadarState_201::_internal_set_radar_power(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.radar_power_ = value;
}
inline void RacobitRadarState_201::set_radar_power(uint32_t value) {
  _internal_set_radar_power(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.radar_power)
}

// optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
inline bool RacobitRadarState_201::_internal_has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_output_type() const {
  return _internal_has_output_type();
}
inline void RacobitRadarState_201::clear_output_type() {
  _impl_.output_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::racobit_radar::OutputType RacobitRadarState_201::_internal_output_type() const {
  return static_cast< ::apollo::drivers::racobit_radar::OutputType >(_impl_.output_type_);
}
inline ::apollo::drivers::racobit_radar::OutputType RacobitRadarState_201::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.output_type)
  return _internal_output_type();
}
inline void RacobitRadarState_201::_internal_set_output_type(::apollo::drivers::racobit_radar::OutputType value) {
  assert(::apollo::drivers::racobit_radar::OutputType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_type_ = value;
}
inline void RacobitRadarState_201::set_output_type(::apollo::drivers::racobit_radar::OutputType value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.output_type)
}

// optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
inline bool RacobitRadarState_201::_internal_has_rcs_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_rcs_threshold() const {
  return _internal_has_rcs_threshold();
}
inline void RacobitRadarState_201::clear_rcs_threshold() {
  _impl_.rcs_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::racobit_radar::RcsThreshold RacobitRadarState_201::_internal_rcs_threshold() const {
  return static_cast< ::apollo::drivers::racobit_radar::RcsThreshold >(_impl_.rcs_threshold_);
}
inline ::apollo::drivers::racobit_radar::RcsThreshold RacobitRadarState_201::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.rcs_threshold)
  return _internal_rcs_threshold();
}
inline void RacobitRadarState_201::_internal_set_rcs_threshold(::apollo::drivers::racobit_radar::RcsThreshold value) {
  assert(::apollo::drivers::racobit_radar::RcsThreshold_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rcs_threshold_ = value;
}
inline void RacobitRadarState_201::set_rcs_threshold(::apollo::drivers::racobit_radar::RcsThreshold value) {
  _internal_set_rcs_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.rcs_threshold)
}

// optional bool send_quality = 5;
inline bool RacobitRadarState_201::_internal_has_send_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_send_quality() const {
  return _internal_has_send_quality();
}
inline void RacobitRadarState_201::clear_send_quality() {
  _impl_.send_quality_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RacobitRadarState_201::_internal_send_quality() const {
  return _impl_.send_quality_;
}
inline bool RacobitRadarState_201::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.send_quality)
  return _internal_send_quality();
}
inline void RacobitRadarState_201::_internal_set_send_quality(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.send_quality_ = value;
}
inline void RacobitRadarState_201::set_send_quality(bool value) {
  _internal_set_send_quality(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.send_quality)
}

// optional bool send_ext_info = 6;
inline bool RacobitRadarState_201::_internal_has_send_ext_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RacobitRadarState_201::has_send_ext_info() const {
  return _internal_has_send_ext_info();
}
inline void RacobitRadarState_201::clear_send_ext_info() {
  _impl_.send_ext_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RacobitRadarState_201::_internal_send_ext_info() const {
  return _impl_.send_ext_info_;
}
inline bool RacobitRadarState_201::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarState_201.send_ext_info)
  return _internal_send_ext_info();
}
inline void RacobitRadarState_201::_internal_set_send_ext_info(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.send_ext_info_ = value;
}
inline void RacobitRadarState_201::set_send_ext_info(bool value) {
  _internal_set_send_ext_info(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarState_201.send_ext_info)
}

// -------------------------------------------------------------------

// RacobitRadarObs

// optional .apollo.common.Header header = 1;
inline bool RacobitRadarObs::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RacobitRadarObs::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RacobitRadarObs::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RacobitRadarObs::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.header)
  return _internal_header();
}
inline void RacobitRadarObs::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RacobitRadarObs.header)
}
inline ::apollo::common::Header* RacobitRadarObs::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* RacobitRadarObs::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RacobitRadarObs.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RacobitRadarObs::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* RacobitRadarObs::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadarObs.header)
  return _msg;
}
inline void RacobitRadarObs::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RacobitRadarObs.header)
}

// optional bool clusterortrack = 2;
inline bool RacobitRadarObs::_internal_has_clusterortrack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_clusterortrack() const {
  return _internal_has_clusterortrack();
}
inline void RacobitRadarObs::clear_clusterortrack() {
  _impl_.clusterortrack_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RacobitRadarObs::_internal_clusterortrack() const {
  return _impl_.clusterortrack_;
}
inline bool RacobitRadarObs::clusterortrack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.clusterortrack)
  return _internal_clusterortrack();
}
inline void RacobitRadarObs::_internal_set_clusterortrack(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clusterortrack_ = value;
}
inline void RacobitRadarObs::set_clusterortrack(bool value) {
  _internal_set_clusterortrack(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.clusterortrack)
}

// optional int32 obstacle_id = 3;
inline bool RacobitRadarObs::_internal_has_obstacle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_obstacle_id() const {
  return _internal_has_obstacle_id();
}
inline void RacobitRadarObs::clear_obstacle_id() {
  _impl_.obstacle_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RacobitRadarObs::_internal_obstacle_id() const {
  return _impl_.obstacle_id_;
}
inline int32_t RacobitRadarObs::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.obstacle_id)
  return _internal_obstacle_id();
}
inline void RacobitRadarObs::_internal_set_obstacle_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.obstacle_id_ = value;
}
inline void RacobitRadarObs::set_obstacle_id(int32_t value) {
  _internal_set_obstacle_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.obstacle_id)
}

// optional double longitude_dist = 4;
inline bool RacobitRadarObs::_internal_has_longitude_dist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_dist() const {
  return _internal_has_longitude_dist();
}
inline void RacobitRadarObs::clear_longitude_dist() {
  _impl_.longitude_dist_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RacobitRadarObs::_internal_longitude_dist() const {
  return _impl_.longitude_dist_;
}
inline double RacobitRadarObs::longitude_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_dist)
  return _internal_longitude_dist();
}
inline void RacobitRadarObs::_internal_set_longitude_dist(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.longitude_dist_ = value;
}
inline void RacobitRadarObs::set_longitude_dist(double value) {
  _internal_set_longitude_dist(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_dist)
}

// optional double lateral_dist = 5;
inline bool RacobitRadarObs::_internal_has_lateral_dist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_dist() const {
  return _internal_has_lateral_dist();
}
inline void RacobitRadarObs::clear_lateral_dist() {
  _impl_.lateral_dist_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RacobitRadarObs::_internal_lateral_dist() const {
  return _impl_.lateral_dist_;
}
inline double RacobitRadarObs::lateral_dist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_dist)
  return _internal_lateral_dist();
}
inline void RacobitRadarObs::_internal_set_lateral_dist(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lateral_dist_ = value;
}
inline void RacobitRadarObs::set_lateral_dist(double value) {
  _internal_set_lateral_dist(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_dist)
}

// optional double longitude_vel = 6;
inline bool RacobitRadarObs::_internal_has_longitude_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_vel() const {
  return _internal_has_longitude_vel();
}
inline void RacobitRadarObs::clear_longitude_vel() {
  _impl_.longitude_vel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double RacobitRadarObs::_internal_longitude_vel() const {
  return _impl_.longitude_vel_;
}
inline double RacobitRadarObs::longitude_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_vel)
  return _internal_longitude_vel();
}
inline void RacobitRadarObs::_internal_set_longitude_vel(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.longitude_vel_ = value;
}
inline void RacobitRadarObs::set_longitude_vel(double value) {
  _internal_set_longitude_vel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_vel)
}

// optional double lateral_vel = 7;
inline bool RacobitRadarObs::_internal_has_lateral_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_vel() const {
  return _internal_has_lateral_vel();
}
inline void RacobitRadarObs::clear_lateral_vel() {
  _impl_.lateral_vel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double RacobitRadarObs::_internal_lateral_vel() const {
  return _impl_.lateral_vel_;
}
inline double RacobitRadarObs::lateral_vel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_vel)
  return _internal_lateral_vel();
}
inline void RacobitRadarObs::_internal_set_lateral_vel(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lateral_vel_ = value;
}
inline void RacobitRadarObs::set_lateral_vel(double value) {
  _internal_set_lateral_vel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_vel)
}

// optional double rcs = 8;
inline bool RacobitRadarObs::_internal_has_rcs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_rcs() const {
  return _internal_has_rcs();
}
inline void RacobitRadarObs::clear_rcs() {
  _impl_.rcs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double RacobitRadarObs::_internal_rcs() const {
  return _impl_.rcs_;
}
inline double RacobitRadarObs::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.rcs)
  return _internal_rcs();
}
inline void RacobitRadarObs::_internal_set_rcs(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.rcs_ = value;
}
inline void RacobitRadarObs::set_rcs(double value) {
  _internal_set_rcs(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.rcs)
}

// optional int32 dynprop = 9;
inline bool RacobitRadarObs::_internal_has_dynprop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_dynprop() const {
  return _internal_has_dynprop();
}
inline void RacobitRadarObs::clear_dynprop() {
  _impl_.dynprop_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t RacobitRadarObs::_internal_dynprop() const {
  return _impl_.dynprop_;
}
inline int32_t RacobitRadarObs::dynprop() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.dynprop)
  return _internal_dynprop();
}
inline void RacobitRadarObs::_internal_set_dynprop(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.dynprop_ = value;
}
inline void RacobitRadarObs::set_dynprop(int32_t value) {
  _internal_set_dynprop(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.dynprop)
}

// optional double longitude_dist_rms = 10;
inline bool RacobitRadarObs::_internal_has_longitude_dist_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_dist_rms() const {
  return _internal_has_longitude_dist_rms();
}
inline void RacobitRadarObs::clear_longitude_dist_rms() {
  _impl_.longitude_dist_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double RacobitRadarObs::_internal_longitude_dist_rms() const {
  return _impl_.longitude_dist_rms_;
}
inline double RacobitRadarObs::longitude_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_dist_rms)
  return _internal_longitude_dist_rms();
}
inline void RacobitRadarObs::_internal_set_longitude_dist_rms(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.longitude_dist_rms_ = value;
}
inline void RacobitRadarObs::set_longitude_dist_rms(double value) {
  _internal_set_longitude_dist_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_dist_rms)
}

// optional double lateral_dist_rms = 11;
inline bool RacobitRadarObs::_internal_has_lateral_dist_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_dist_rms() const {
  return _internal_has_lateral_dist_rms();
}
inline void RacobitRadarObs::clear_lateral_dist_rms() {
  _impl_.lateral_dist_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double RacobitRadarObs::_internal_lateral_dist_rms() const {
  return _impl_.lateral_dist_rms_;
}
inline double RacobitRadarObs::lateral_dist_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_dist_rms)
  return _internal_lateral_dist_rms();
}
inline void RacobitRadarObs::_internal_set_lateral_dist_rms(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lateral_dist_rms_ = value;
}
inline void RacobitRadarObs::set_lateral_dist_rms(double value) {
  _internal_set_lateral_dist_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_dist_rms)
}

// optional double longitude_vel_rms = 12;
inline bool RacobitRadarObs::_internal_has_longitude_vel_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_vel_rms() const {
  return _internal_has_longitude_vel_rms();
}
inline void RacobitRadarObs::clear_longitude_vel_rms() {
  _impl_.longitude_vel_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double RacobitRadarObs::_internal_longitude_vel_rms() const {
  return _impl_.longitude_vel_rms_;
}
inline double RacobitRadarObs::longitude_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_vel_rms)
  return _internal_longitude_vel_rms();
}
inline void RacobitRadarObs::_internal_set_longitude_vel_rms(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.longitude_vel_rms_ = value;
}
inline void RacobitRadarObs::set_longitude_vel_rms(double value) {
  _internal_set_longitude_vel_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_vel_rms)
}

// optional double lateral_vel_rms = 13;
inline bool RacobitRadarObs::_internal_has_lateral_vel_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_vel_rms() const {
  return _internal_has_lateral_vel_rms();
}
inline void RacobitRadarObs::clear_lateral_vel_rms() {
  _impl_.lateral_vel_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double RacobitRadarObs::_internal_lateral_vel_rms() const {
  return _impl_.lateral_vel_rms_;
}
inline double RacobitRadarObs::lateral_vel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_vel_rms)
  return _internal_lateral_vel_rms();
}
inline void RacobitRadarObs::_internal_set_lateral_vel_rms(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.lateral_vel_rms_ = value;
}
inline void RacobitRadarObs::set_lateral_vel_rms(double value) {
  _internal_set_lateral_vel_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_vel_rms)
}

// optional double probexist = 14;
inline bool RacobitRadarObs::_internal_has_probexist() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_probexist() const {
  return _internal_has_probexist();
}
inline void RacobitRadarObs::clear_probexist() {
  _impl_.probexist_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double RacobitRadarObs::_internal_probexist() const {
  return _impl_.probexist_;
}
inline double RacobitRadarObs::probexist() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.probexist)
  return _internal_probexist();
}
inline void RacobitRadarObs::_internal_set_probexist(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.probexist_ = value;
}
inline void RacobitRadarObs::set_probexist(double value) {
  _internal_set_probexist(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.probexist)
}

// optional int32 meas_state = 15;
inline bool RacobitRadarObs::_internal_has_meas_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_meas_state() const {
  return _internal_has_meas_state();
}
inline void RacobitRadarObs::clear_meas_state() {
  _impl_.meas_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t RacobitRadarObs::_internal_meas_state() const {
  return _impl_.meas_state_;
}
inline int32_t RacobitRadarObs::meas_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.meas_state)
  return _internal_meas_state();
}
inline void RacobitRadarObs::_internal_set_meas_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.meas_state_ = value;
}
inline void RacobitRadarObs::set_meas_state(int32_t value) {
  _internal_set_meas_state(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.meas_state)
}

// optional double longitude_accel = 16;
inline bool RacobitRadarObs::_internal_has_longitude_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_accel() const {
  return _internal_has_longitude_accel();
}
inline void RacobitRadarObs::clear_longitude_accel() {
  _impl_.longitude_accel_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double RacobitRadarObs::_internal_longitude_accel() const {
  return _impl_.longitude_accel_;
}
inline double RacobitRadarObs::longitude_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_accel)
  return _internal_longitude_accel();
}
inline void RacobitRadarObs::_internal_set_longitude_accel(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.longitude_accel_ = value;
}
inline void RacobitRadarObs::set_longitude_accel(double value) {
  _internal_set_longitude_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_accel)
}

// optional double lateral_accel = 17;
inline bool RacobitRadarObs::_internal_has_lateral_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_accel() const {
  return _internal_has_lateral_accel();
}
inline void RacobitRadarObs::clear_lateral_accel() {
  _impl_.lateral_accel_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double RacobitRadarObs::_internal_lateral_accel() const {
  return _impl_.lateral_accel_;
}
inline double RacobitRadarObs::lateral_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_accel)
  return _internal_lateral_accel();
}
inline void RacobitRadarObs::_internal_set_lateral_accel(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.lateral_accel_ = value;
}
inline void RacobitRadarObs::set_lateral_accel(double value) {
  _internal_set_lateral_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_accel)
}

// optional double oritation_angle = 18;
inline bool RacobitRadarObs::_internal_has_oritation_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_oritation_angle() const {
  return _internal_has_oritation_angle();
}
inline void RacobitRadarObs::clear_oritation_angle() {
  _impl_.oritation_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double RacobitRadarObs::_internal_oritation_angle() const {
  return _impl_.oritation_angle_;
}
inline double RacobitRadarObs::oritation_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.oritation_angle)
  return _internal_oritation_angle();
}
inline void RacobitRadarObs::_internal_set_oritation_angle(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.oritation_angle_ = value;
}
inline void RacobitRadarObs::set_oritation_angle(double value) {
  _internal_set_oritation_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.oritation_angle)
}

// optional double longitude_accel_rms = 19;
inline bool RacobitRadarObs::_internal_has_longitude_accel_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_longitude_accel_rms() const {
  return _internal_has_longitude_accel_rms();
}
inline void RacobitRadarObs::clear_longitude_accel_rms() {
  _impl_.longitude_accel_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double RacobitRadarObs::_internal_longitude_accel_rms() const {
  return _impl_.longitude_accel_rms_;
}
inline double RacobitRadarObs::longitude_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.longitude_accel_rms)
  return _internal_longitude_accel_rms();
}
inline void RacobitRadarObs::_internal_set_longitude_accel_rms(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.longitude_accel_rms_ = value;
}
inline void RacobitRadarObs::set_longitude_accel_rms(double value) {
  _internal_set_longitude_accel_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.longitude_accel_rms)
}

// optional double lateral_accel_rms = 20;
inline bool RacobitRadarObs::_internal_has_lateral_accel_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_lateral_accel_rms() const {
  return _internal_has_lateral_accel_rms();
}
inline void RacobitRadarObs::clear_lateral_accel_rms() {
  _impl_.lateral_accel_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double RacobitRadarObs::_internal_lateral_accel_rms() const {
  return _impl_.lateral_accel_rms_;
}
inline double RacobitRadarObs::lateral_accel_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.lateral_accel_rms)
  return _internal_lateral_accel_rms();
}
inline void RacobitRadarObs::_internal_set_lateral_accel_rms(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.lateral_accel_rms_ = value;
}
inline void RacobitRadarObs::set_lateral_accel_rms(double value) {
  _internal_set_lateral_accel_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.lateral_accel_rms)
}

// optional double oritation_angle_rms = 21;
inline bool RacobitRadarObs::_internal_has_oritation_angle_rms() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_oritation_angle_rms() const {
  return _internal_has_oritation_angle_rms();
}
inline void RacobitRadarObs::clear_oritation_angle_rms() {
  _impl_.oritation_angle_rms_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double RacobitRadarObs::_internal_oritation_angle_rms() const {
  return _impl_.oritation_angle_rms_;
}
inline double RacobitRadarObs::oritation_angle_rms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.oritation_angle_rms)
  return _internal_oritation_angle_rms();
}
inline void RacobitRadarObs::_internal_set_oritation_angle_rms(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.oritation_angle_rms_ = value;
}
inline void RacobitRadarObs::set_oritation_angle_rms(double value) {
  _internal_set_oritation_angle_rms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.oritation_angle_rms)
}

// optional double length = 22;
inline bool RacobitRadarObs::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_length() const {
  return _internal_has_length();
}
inline void RacobitRadarObs::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double RacobitRadarObs::_internal_length() const {
  return _impl_.length_;
}
inline double RacobitRadarObs::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.length)
  return _internal_length();
}
inline void RacobitRadarObs::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.length_ = value;
}
inline void RacobitRadarObs::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.length)
}

// optional double width = 23;
inline bool RacobitRadarObs::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_width() const {
  return _internal_has_width();
}
inline void RacobitRadarObs::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double RacobitRadarObs::_internal_width() const {
  return _impl_.width_;
}
inline double RacobitRadarObs::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.width)
  return _internal_width();
}
inline void RacobitRadarObs::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.width_ = value;
}
inline void RacobitRadarObs::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.width)
}

// optional int32 obstacle_class = 24;
inline bool RacobitRadarObs::_internal_has_obstacle_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool RacobitRadarObs::has_obstacle_class() const {
  return _internal_has_obstacle_class();
}
inline void RacobitRadarObs::clear_obstacle_class() {
  _impl_.obstacle_class_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t RacobitRadarObs::_internal_obstacle_class() const {
  return _impl_.obstacle_class_;
}
inline int32_t RacobitRadarObs::obstacle_class() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadarObs.obstacle_class)
  return _internal_obstacle_class();
}
inline void RacobitRadarObs::_internal_set_obstacle_class(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.obstacle_class_ = value;
}
inline void RacobitRadarObs::set_obstacle_class(int32_t value) {
  _internal_set_obstacle_class(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RacobitRadarObs.obstacle_class)
}

// -------------------------------------------------------------------

// RacobitRadar

// optional .apollo.common.Header header = 1;
inline bool RacobitRadar::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RacobitRadar::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RacobitRadar::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RacobitRadar::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadar.header)
  return _internal_header();
}
inline void RacobitRadar::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RacobitRadar.header)
}
inline ::apollo::common::Header* RacobitRadar::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* RacobitRadar::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RacobitRadar.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RacobitRadar::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* RacobitRadar::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadar.header)
  return _msg;
}
inline void RacobitRadar::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RacobitRadar.header)
}

// repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
inline int RacobitRadar::_internal_contiobs_size() const {
  return _impl_.contiobs_.size();
}
inline int RacobitRadar::contiobs_size() const {
  return _internal_contiobs_size();
}
inline void RacobitRadar::clear_contiobs() {
  _impl_.contiobs_.Clear();
}
inline ::apollo::drivers::RacobitRadarObs* RacobitRadar::mutable_contiobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadar.contiobs)
  return _impl_.contiobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::RacobitRadarObs >*
RacobitRadar::mutable_contiobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.RacobitRadar.contiobs)
  return &_impl_.contiobs_;
}
inline const ::apollo::drivers::RacobitRadarObs& RacobitRadar::_internal_contiobs(int index) const {
  return _impl_.contiobs_.Get(index);
}
inline const ::apollo::drivers::RacobitRadarObs& RacobitRadar::contiobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadar.contiobs)
  return _internal_contiobs(index);
}
inline ::apollo::drivers::RacobitRadarObs* RacobitRadar::_internal_add_contiobs() {
  return _impl_.contiobs_.Add();
}
inline ::apollo::drivers::RacobitRadarObs* RacobitRadar::add_contiobs() {
  ::apollo::drivers::RacobitRadarObs* _add = _internal_add_contiobs();
  // @@protoc_insertion_point(field_add:apollo.drivers.RacobitRadar.contiobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::RacobitRadarObs >&
RacobitRadar::contiobs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.RacobitRadar.contiobs)
  return _impl_.contiobs_;
}

// optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
inline bool RacobitRadar::_internal_has_radar_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radar_state_ != nullptr);
  return value;
}
inline bool RacobitRadar::has_radar_state() const {
  return _internal_has_radar_state();
}
inline void RacobitRadar::clear_radar_state() {
  if (_impl_.radar_state_ != nullptr) _impl_.radar_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::RacobitRadarState_201& RacobitRadar::_internal_radar_state() const {
  const ::apollo::drivers::RacobitRadarState_201* p = _impl_.radar_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::RacobitRadarState_201&>(
      ::apollo::drivers::_RacobitRadarState_201_default_instance_);
}
inline const ::apollo::drivers::RacobitRadarState_201& RacobitRadar::radar_state() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadar.radar_state)
  return _internal_radar_state();
}
inline void RacobitRadar::unsafe_arena_set_allocated_radar_state(
    ::apollo::drivers::RacobitRadarState_201* radar_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radar_state_);
  }
  _impl_.radar_state_ = radar_state;
  if (radar_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RacobitRadar.radar_state)
}
inline ::apollo::drivers::RacobitRadarState_201* RacobitRadar::release_radar_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::RacobitRadarState_201* temp = _impl_.radar_state_;
  _impl_.radar_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::RacobitRadarState_201* RacobitRadar::unsafe_arena_release_radar_state() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RacobitRadar.radar_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::RacobitRadarState_201* temp = _impl_.radar_state_;
  _impl_.radar_state_ = nullptr;
  return temp;
}
inline ::apollo::drivers::RacobitRadarState_201* RacobitRadar::_internal_mutable_radar_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.radar_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::RacobitRadarState_201>(GetArenaForAllocation());
    _impl_.radar_state_ = p;
  }
  return _impl_.radar_state_;
}
inline ::apollo::drivers::RacobitRadarState_201* RacobitRadar::mutable_radar_state() {
  ::apollo::drivers::RacobitRadarState_201* _msg = _internal_mutable_radar_state();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadar.radar_state)
  return _msg;
}
inline void RacobitRadar::set_allocated_radar_state(::apollo::drivers::RacobitRadarState_201* radar_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.radar_state_;
  }
  if (radar_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(radar_state);
    if (message_arena != submessage_arena) {
      radar_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radar_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.radar_state_ = radar_state;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RacobitRadar.radar_state)
}

// optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
inline bool RacobitRadar::_internal_has_cluster_list_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cluster_list_status_ != nullptr);
  return value;
}
inline bool RacobitRadar::has_cluster_list_status() const {
  return _internal_has_cluster_list_status();
}
inline void RacobitRadar::clear_cluster_list_status() {
  if (_impl_.cluster_list_status_ != nullptr) _impl_.cluster_list_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::drivers::RacobitClusterListStatus_600& RacobitRadar::_internal_cluster_list_status() const {
  const ::apollo::drivers::RacobitClusterListStatus_600* p = _impl_.cluster_list_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::RacobitClusterListStatus_600&>(
      ::apollo::drivers::_RacobitClusterListStatus_600_default_instance_);
}
inline const ::apollo::drivers::RacobitClusterListStatus_600& RacobitRadar::cluster_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadar.cluster_list_status)
  return _internal_cluster_list_status();
}
inline void RacobitRadar::unsafe_arena_set_allocated_cluster_list_status(
    ::apollo::drivers::RacobitClusterListStatus_600* cluster_list_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_list_status_);
  }
  _impl_.cluster_list_status_ = cluster_list_status;
  if (cluster_list_status) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RacobitRadar.cluster_list_status)
}
inline ::apollo::drivers::RacobitClusterListStatus_600* RacobitRadar::release_cluster_list_status() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::RacobitClusterListStatus_600* temp = _impl_.cluster_list_status_;
  _impl_.cluster_list_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::RacobitClusterListStatus_600* RacobitRadar::unsafe_arena_release_cluster_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RacobitRadar.cluster_list_status)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::RacobitClusterListStatus_600* temp = _impl_.cluster_list_status_;
  _impl_.cluster_list_status_ = nullptr;
  return temp;
}
inline ::apollo::drivers::RacobitClusterListStatus_600* RacobitRadar::_internal_mutable_cluster_list_status() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cluster_list_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::RacobitClusterListStatus_600>(GetArenaForAllocation());
    _impl_.cluster_list_status_ = p;
  }
  return _impl_.cluster_list_status_;
}
inline ::apollo::drivers::RacobitClusterListStatus_600* RacobitRadar::mutable_cluster_list_status() {
  ::apollo::drivers::RacobitClusterListStatus_600* _msg = _internal_mutable_cluster_list_status();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadar.cluster_list_status)
  return _msg;
}
inline void RacobitRadar::set_allocated_cluster_list_status(::apollo::drivers::RacobitClusterListStatus_600* cluster_list_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cluster_list_status_;
  }
  if (cluster_list_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cluster_list_status);
    if (message_arena != submessage_arena) {
      cluster_list_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_list_status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cluster_list_status_ = cluster_list_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RacobitRadar.cluster_list_status)
}

// optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
inline bool RacobitRadar::_internal_has_object_list_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_list_status_ != nullptr);
  return value;
}
inline bool RacobitRadar::has_object_list_status() const {
  return _internal_has_object_list_status();
}
inline void RacobitRadar::clear_object_list_status() {
  if (_impl_.object_list_status_ != nullptr) _impl_.object_list_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::drivers::RacobitObjectListStatus_60A& RacobitRadar::_internal_object_list_status() const {
  const ::apollo::drivers::RacobitObjectListStatus_60A* p = _impl_.object_list_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::drivers::RacobitObjectListStatus_60A&>(
      ::apollo::drivers::_RacobitObjectListStatus_60A_default_instance_);
}
inline const ::apollo::drivers::RacobitObjectListStatus_60A& RacobitRadar::object_list_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RacobitRadar.object_list_status)
  return _internal_object_list_status();
}
inline void RacobitRadar::unsafe_arena_set_allocated_object_list_status(
    ::apollo::drivers::RacobitObjectListStatus_60A* object_list_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_list_status_);
  }
  _impl_.object_list_status_ = object_list_status;
  if (object_list_status) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RacobitRadar.object_list_status)
}
inline ::apollo::drivers::RacobitObjectListStatus_60A* RacobitRadar::release_object_list_status() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::RacobitObjectListStatus_60A* temp = _impl_.object_list_status_;
  _impl_.object_list_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::drivers::RacobitObjectListStatus_60A* RacobitRadar::unsafe_arena_release_object_list_status() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RacobitRadar.object_list_status)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::RacobitObjectListStatus_60A* temp = _impl_.object_list_status_;
  _impl_.object_list_status_ = nullptr;
  return temp;
}
inline ::apollo::drivers::RacobitObjectListStatus_60A* RacobitRadar::_internal_mutable_object_list_status() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.object_list_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::RacobitObjectListStatus_60A>(GetArenaForAllocation());
    _impl_.object_list_status_ = p;
  }
  return _impl_.object_list_status_;
}
inline ::apollo::drivers::RacobitObjectListStatus_60A* RacobitRadar::mutable_object_list_status() {
  ::apollo::drivers::RacobitObjectListStatus_60A* _msg = _internal_mutable_object_list_status();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RacobitRadar.object_list_status)
  return _msg;
}
inline void RacobitRadar::set_allocated_object_list_status(::apollo::drivers::RacobitObjectListStatus_60A* object_list_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_list_status_;
  }
  if (object_list_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_list_status);
    if (message_arena != submessage_arena) {
      object_list_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_list_status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.object_list_status_ = object_list_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RacobitRadar.object_list_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto
