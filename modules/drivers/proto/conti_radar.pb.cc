// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/conti_radar.proto

#include "modules/drivers/proto/conti_radar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
PROTOBUF_CONSTEXPR ClusterListStatus_600::ClusterListStatus_600(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.near_)*/0
  , /*decltype(_impl_.far_)*/0
  , /*decltype(_impl_.interface_version_)*/0
  , /*decltype(_impl_.meas_counter_)*/-1} {}
struct ClusterListStatus_600DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterListStatus_600DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterListStatus_600DefaultTypeInternal() {}
  union {
    ClusterListStatus_600 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterListStatus_600DefaultTypeInternal _ClusterListStatus_600_default_instance_;
PROTOBUF_CONSTEXPR ObjectListStatus_60A::ObjectListStatus_60A(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nof_objects_)*/0
  , /*decltype(_impl_.interface_version_)*/0
  , /*decltype(_impl_.meas_counter_)*/-1} {}
struct ObjectListStatus_60ADefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectListStatus_60ADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectListStatus_60ADefaultTypeInternal() {}
  union {
    ObjectListStatus_60A _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectListStatus_60ADefaultTypeInternal _ObjectListStatus_60A_default_instance_;
PROTOBUF_CONSTEXPR RadarState_201::RadarState_201(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_distance_)*/0u
  , /*decltype(_impl_.radar_power_)*/0u
  , /*decltype(_impl_.output_type_)*/0
  , /*decltype(_impl_.rcs_threshold_)*/0
  , /*decltype(_impl_.send_quality_)*/false
  , /*decltype(_impl_.send_ext_info_)*/false} {}
struct RadarState_201DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarState_201DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarState_201DefaultTypeInternal() {}
  union {
    RadarState_201 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarState_201DefaultTypeInternal _RadarState_201_default_instance_;
PROTOBUF_CONSTEXPR ContiRadarObs::ContiRadarObs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.clusterortrack_)*/false
  , /*decltype(_impl_.obstacle_id_)*/0
  , /*decltype(_impl_.longitude_dist_)*/0
  , /*decltype(_impl_.lateral_dist_)*/0
  , /*decltype(_impl_.longitude_vel_)*/0
  , /*decltype(_impl_.lateral_vel_)*/0
  , /*decltype(_impl_.rcs_)*/0
  , /*decltype(_impl_.longitude_dist_rms_)*/0
  , /*decltype(_impl_.lateral_dist_rms_)*/0
  , /*decltype(_impl_.longitude_vel_rms_)*/0
  , /*decltype(_impl_.dynprop_)*/0
  , /*decltype(_impl_.meas_state_)*/0
  , /*decltype(_impl_.lateral_vel_rms_)*/0
  , /*decltype(_impl_.probexist_)*/0
  , /*decltype(_impl_.longitude_accel_)*/0
  , /*decltype(_impl_.lateral_accel_)*/0
  , /*decltype(_impl_.oritation_angle_)*/0
  , /*decltype(_impl_.longitude_accel_rms_)*/0
  , /*decltype(_impl_.lateral_accel_rms_)*/0
  , /*decltype(_impl_.oritation_angle_rms_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.obstacle_class_)*/0} {}
struct ContiRadarObsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContiRadarObsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContiRadarObsDefaultTypeInternal() {}
  union {
    ContiRadarObs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContiRadarObsDefaultTypeInternal _ContiRadarObs_default_instance_;
PROTOBUF_CONSTEXPR ContiRadar::ContiRadar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contiobs_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.radar_state_)*/nullptr
  , /*decltype(_impl_.cluster_list_status_)*/nullptr
  , /*decltype(_impl_.object_list_status_)*/nullptr} {}
struct ContiRadarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContiRadarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContiRadarDefaultTypeInternal() {}
  union {
    ContiRadar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContiRadarDefaultTypeInternal _ContiRadar_default_instance_;
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _impl_.near_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _impl_.far_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _impl_.meas_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ClusterListStatus_600, _impl_.interface_version_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ObjectListStatus_60A, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ObjectListStatus_60A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ObjectListStatus_60A, _impl_.nof_objects_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ObjectListStatus_60A, _impl_.meas_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ObjectListStatus_60A, _impl_.interface_version_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.radar_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.rcs_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.send_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarState_201, _impl_.send_ext_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.clusterortrack_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_vel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_vel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.rcs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.dynprop_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_dist_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_dist_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_vel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_vel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.probexist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.meas_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.oritation_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.longitude_accel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.lateral_accel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.oritation_angle_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadarObs, _impl_.obstacle_class_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  8,
  9,
  10,
  13,
  14,
  12,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_.contiobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_.radar_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_.cluster_list_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::ContiRadar, _impl_.object_list_status_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::drivers::ClusterListStatus_600)},
  { 14, 23, -1, sizeof(::apollo::drivers::ObjectListStatus_60A)},
  { 26, 38, -1, sizeof(::apollo::drivers::RadarState_201)},
  { 44, 74, -1, sizeof(::apollo::drivers::ContiRadarObs)},
  { 98, 109, -1, sizeof(::apollo::drivers::ContiRadar)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::_ClusterListStatus_600_default_instance_._instance,
  &::apollo::drivers::_ObjectListStatus_60A_default_instance_._instance,
  &::apollo::drivers::_RadarState_201_default_instance_._instance,
  &::apollo::drivers::_ContiRadarObs_default_instance_._instance,
  &::apollo::drivers::_ContiRadar_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/drivers/proto/conti_radar.prot"
  "o\022\016apollo.drivers\032!modules/common/proto/"
  "header.proto\032>modules/drivers/radar/cont"
  "i_radar/proto/conti_radar_conf.proto\"m\n\025"
  "ClusterListStatus_600\022\017\n\004near\030\001 \001(\005:\0010\022\016"
  "\n\003far\030\002 \001(\005:\0010\022\030\n\014meas_counter\030\003 \001(\005:\002-1"
  "\022\031\n\021interface_version\030\004 \001(\005\"c\n\024ObjectLis"
  "tStatus_60A\022\026\n\013nof_objects\030\001 \001(\005:\0010\022\030\n\014m"
  "eas_counter\030\002 \001(\005:\002-1\022\031\n\021interface_versi"
  "on\030\003 \001(\005\"\346\001\n\016RadarState_201\022\024\n\014max_dista"
  "nce\030\001 \001(\r\022\023\n\013radar_power\030\002 \001(\r\022;\n\013output"
  "_type\030\003 \001(\0162&.apollo.drivers.conti_radar"
  ".OutputType\022\?\n\rrcs_threshold\030\004 \001(\0162(.apo"
  "llo.drivers.conti_radar.RcsThreshold\022\024\n\014"
  "send_quality\030\005 \001(\010\022\025\n\rsend_ext_info\030\006 \001("
  "\010\"\301\004\n\rContiRadarObs\022%\n\006header\030\001 \001(\0132\025.ap"
  "ollo.common.Header\022\026\n\016clusterortrack\030\002 \001"
  "(\010\022\023\n\013obstacle_id\030\003 \001(\005\022\026\n\016longitude_dis"
  "t\030\004 \002(\001\022\024\n\014lateral_dist\030\005 \002(\001\022\025\n\rlongitu"
  "de_vel\030\006 \002(\001\022\023\n\013lateral_vel\030\007 \002(\001\022\013\n\003rcs"
  "\030\010 \001(\001\022\017\n\007dynprop\030\t \001(\005\022\032\n\022longitude_dis"
  "t_rms\030\n \001(\001\022\030\n\020lateral_dist_rms\030\013 \001(\001\022\031\n"
  "\021longitude_vel_rms\030\014 \001(\001\022\027\n\017lateral_vel_"
  "rms\030\r \001(\001\022\021\n\tprobexist\030\016 \001(\001\022\022\n\nmeas_sta"
  "te\030\017 \001(\005\022\027\n\017longitude_accel\030\020 \001(\001\022\025\n\rlat"
  "eral_accel\030\021 \001(\001\022\027\n\017oritation_angle\030\022 \001("
  "\001\022\033\n\023longitude_accel_rms\030\023 \001(\001\022\031\n\021latera"
  "l_accel_rms\030\024 \001(\001\022\033\n\023oritation_angle_rms"
  "\030\025 \001(\001\022\016\n\006length\030\026 \001(\001\022\r\n\005width\030\027 \001(\001\022\026\n"
  "\016obstacle_class\030\030 \001(\005\"\237\002\n\nContiRadar\022%\n\006"
  "header\030\001 \001(\0132\025.apollo.common.Header\022/\n\010c"
  "ontiobs\030\002 \003(\0132\035.apollo.drivers.ContiRada"
  "rObs\0223\n\013radar_state\030\003 \001(\0132\036.apollo.drive"
  "rs.RadarState_201\022B\n\023cluster_list_status"
  "\030\004 \001(\0132%.apollo.drivers.ClusterListStatu"
  "s_600\022@\n\022object_list_status\030\005 \001(\0132$.apol"
  "lo.drivers.ObjectListStatus_60A"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto = {
    false, false, 1471, descriptor_table_protodef_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto,
    "modules/drivers/proto/conti_radar.proto",
    &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto(&descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto);
namespace apollo {
namespace drivers {

// ===================================================================

class ClusterListStatus_600::_Internal {
 public:
  using HasBits = decltype(std::declval<ClusterListStatus_600>()._impl_._has_bits_);
  static void set_has_near(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_far(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_meas_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interface_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClusterListStatus_600::ClusterListStatus_600(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.ClusterListStatus_600)
}
ClusterListStatus_600::ClusterListStatus_600(const ClusterListStatus_600& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.near_){}
    , decltype(_impl_.far_){}
    , decltype(_impl_.interface_version_){}
    , decltype(_impl_.meas_counter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.near_, &from._impl_.near_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.meas_counter_) -
    reinterpret_cast<char*>(&_impl_.near_)) + sizeof(_impl_.meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ClusterListStatus_600)
}

inline void ClusterListStatus_600::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.near_){0}
    , decltype(_impl_.far_){0}
    , decltype(_impl_.interface_version_){0}
    , decltype(_impl_.meas_counter_){-1}
  };
}

ClusterListStatus_600::~ClusterListStatus_600() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ClusterListStatus_600)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClusterListStatus_600::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClusterListStatus_600::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClusterListStatus_600::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ClusterListStatus_600)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.near_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.interface_version_) -
        reinterpret_cast<char*>(&_impl_.near_)) + sizeof(_impl_.interface_version_));
    _impl_.meas_counter_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterListStatus_600::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 near = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_near(&has_bits);
          _impl_.near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 far = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_far(&has_bits);
          _impl_.far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 meas_counter = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_meas_counter(&has_bits);
          _impl_.meas_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interface_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_interface_version(&has_bits);
          _impl_.interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClusterListStatus_600::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ClusterListStatus_600)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_near(), target);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_far(), target);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_meas_counter(), target);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_interface_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ClusterListStatus_600)
  return target;
}

size_t ClusterListStatus_600::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ClusterListStatus_600)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 near = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_near());
    }

    // optional int32 far = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_far());
    }

    // optional int32 interface_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interface_version());
    }

    // optional int32 meas_counter = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_meas_counter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClusterListStatus_600::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClusterListStatus_600::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClusterListStatus_600::GetClassData() const { return &_class_data_; }

void ClusterListStatus_600::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClusterListStatus_600 *>(to)->MergeFrom(
      static_cast<const ClusterListStatus_600 &>(from));
}


void ClusterListStatus_600::MergeFrom(const ClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.near_ = from._impl_.near_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.far_ = from._impl_.far_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.interface_version_ = from._impl_.interface_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.meas_counter_ = from._impl_.meas_counter_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClusterListStatus_600::CopyFrom(const ClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterListStatus_600::IsInitialized() const {
  return true;
}

void ClusterListStatus_600::InternalSwap(ClusterListStatus_600* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClusterListStatus_600, _impl_.interface_version_)
      + sizeof(ClusterListStatus_600::_impl_.interface_version_)
      - PROTOBUF_FIELD_OFFSET(ClusterListStatus_600, _impl_.near_)>(
          reinterpret_cast<char*>(&_impl_.near_),
          reinterpret_cast<char*>(&other->_impl_.near_));
  swap(_impl_.meas_counter_, other->_impl_.meas_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterListStatus_600::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[0]);
}

// ===================================================================

class ObjectListStatus_60A::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectListStatus_60A>()._impl_._has_bits_);
  static void set_has_nof_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_meas_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interface_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectListStatus_60A::ObjectListStatus_60A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.ObjectListStatus_60A)
}
ObjectListStatus_60A::ObjectListStatus_60A(const ObjectListStatus_60A& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nof_objects_){}
    , decltype(_impl_.interface_version_){}
    , decltype(_impl_.meas_counter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nof_objects_, &from._impl_.nof_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.meas_counter_) -
    reinterpret_cast<char*>(&_impl_.nof_objects_)) + sizeof(_impl_.meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ObjectListStatus_60A)
}

inline void ObjectListStatus_60A::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nof_objects_){0}
    , decltype(_impl_.interface_version_){0}
    , decltype(_impl_.meas_counter_){-1}
  };
}

ObjectListStatus_60A::~ObjectListStatus_60A() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ObjectListStatus_60A)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectListStatus_60A::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectListStatus_60A::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectListStatus_60A::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ObjectListStatus_60A)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.nof_objects_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.interface_version_) -
        reinterpret_cast<char*>(&_impl_.nof_objects_)) + sizeof(_impl_.interface_version_));
    _impl_.meas_counter_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectListStatus_60A::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nof_objects = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nof_objects(&has_bits);
          _impl_.nof_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 meas_counter = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_meas_counter(&has_bits);
          _impl_.meas_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interface_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_interface_version(&has_bits);
          _impl_.interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectListStatus_60A::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ObjectListStatus_60A)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nof_objects(), target);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_meas_counter(), target);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_interface_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ObjectListStatus_60A)
  return target;
}

size_t ObjectListStatus_60A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ObjectListStatus_60A)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nof_objects = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nof_objects());
    }

    // optional int32 interface_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interface_version());
    }

    // optional int32 meas_counter = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_meas_counter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectListStatus_60A::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectListStatus_60A::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectListStatus_60A::GetClassData() const { return &_class_data_; }

void ObjectListStatus_60A::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectListStatus_60A *>(to)->MergeFrom(
      static_cast<const ObjectListStatus_60A &>(from));
}


void ObjectListStatus_60A::MergeFrom(const ObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nof_objects_ = from._impl_.nof_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.interface_version_ = from._impl_.interface_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.meas_counter_ = from._impl_.meas_counter_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectListStatus_60A::CopyFrom(const ObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectListStatus_60A::IsInitialized() const {
  return true;
}

void ObjectListStatus_60A::InternalSwap(ObjectListStatus_60A* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectListStatus_60A, _impl_.interface_version_)
      + sizeof(ObjectListStatus_60A::_impl_.interface_version_)
      - PROTOBUF_FIELD_OFFSET(ObjectListStatus_60A, _impl_.nof_objects_)>(
          reinterpret_cast<char*>(&_impl_.nof_objects_),
          reinterpret_cast<char*>(&other->_impl_.nof_objects_));
  swap(_impl_.meas_counter_, other->_impl_.meas_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectListStatus_60A::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[1]);
}

// ===================================================================

class RadarState_201::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarState_201>()._impl_._has_bits_);
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radar_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rcs_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_send_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send_ext_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RadarState_201::RadarState_201(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.RadarState_201)
}
RadarState_201::RadarState_201(const RadarState_201& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_distance_){}
    , decltype(_impl_.radar_power_){}
    , decltype(_impl_.output_type_){}
    , decltype(_impl_.rcs_threshold_){}
    , decltype(_impl_.send_quality_){}
    , decltype(_impl_.send_ext_info_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_distance_, &from._impl_.max_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_ext_info_) -
    reinterpret_cast<char*>(&_impl_.max_distance_)) + sizeof(_impl_.send_ext_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarState_201)
}

inline void RadarState_201::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_distance_){0u}
    , decltype(_impl_.radar_power_){0u}
    , decltype(_impl_.output_type_){0}
    , decltype(_impl_.rcs_threshold_){0}
    , decltype(_impl_.send_quality_){false}
    , decltype(_impl_.send_ext_info_){false}
  };
}

RadarState_201::~RadarState_201() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarState_201)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarState_201::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarState_201::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarState_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarState_201)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.max_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.send_ext_info_) -
        reinterpret_cast<char*>(&_impl_.max_distance_)) + sizeof(_impl_.send_ext_info_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarState_201::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_distance(&has_bits);
          _impl_.max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radar_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_radar_power(&has_bits);
          _impl_.radar_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::conti_radar::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::conti_radar::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::conti_radar::RcsThreshold_IsValid(val))) {
            _internal_set_rcs_threshold(static_cast<::apollo::drivers::conti_radar::RcsThreshold>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool send_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_send_quality(&has_bits);
          _impl_.send_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_ext_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_send_ext_info(&has_bits);
          _impl_.send_ext_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarState_201::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarState_201)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_distance(), target);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radar_power(), target);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_type(), target);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rcs_threshold(), target);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_send_quality(), target);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_send_ext_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarState_201)
  return target;
}

size_t RadarState_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarState_201)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 max_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_distance());
    }

    // optional uint32 radar_power = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radar_power());
    }

    // optional .apollo.drivers.conti_radar.OutputType output_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rcs_threshold());
    }

    // optional bool send_quality = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarState_201::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarState_201::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarState_201::GetClassData() const { return &_class_data_; }

void RadarState_201::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarState_201 *>(to)->MergeFrom(
      static_cast<const RadarState_201 &>(from));
}


void RadarState_201::MergeFrom(const RadarState_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_distance_ = from._impl_.max_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.radar_power_ = from._impl_.radar_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.output_type_ = from._impl_.output_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rcs_threshold_ = from._impl_.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.send_quality_ = from._impl_.send_quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.send_ext_info_ = from._impl_.send_ext_info_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarState_201::CopyFrom(const RadarState_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarState_201::IsInitialized() const {
  return true;
}

void RadarState_201::InternalSwap(RadarState_201* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarState_201, _impl_.send_ext_info_)
      + sizeof(RadarState_201::_impl_.send_ext_info_)
      - PROTOBUF_FIELD_OFFSET(RadarState_201, _impl_.max_distance_)>(
          reinterpret_cast<char*>(&_impl_.max_distance_),
          reinterpret_cast<char*>(&other->_impl_.max_distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarState_201::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[2]);
}

// ===================================================================

class ContiRadarObs::_Internal {
 public:
  using HasBits = decltype(std::declval<ContiRadarObs>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const ContiRadarObs* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clusterortrack(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lateral_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lateral_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rcs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dynprop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_longitude_dist_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_dist_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitude_vel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lateral_vel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_probexist(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_meas_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_longitude_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lateral_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_oritation_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_longitude_accel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lateral_accel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_oritation_angle_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_obstacle_class(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000078) ^ 0x00000078) != 0;
  }
};

const ::apollo::common::Header&
ContiRadarObs::_Internal::header(const ContiRadarObs* msg) {
  return *msg->_impl_.header_;
}
void ContiRadarObs::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ContiRadarObs::ContiRadarObs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.ContiRadarObs)
}
ContiRadarObs::ContiRadarObs(const ContiRadarObs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.clusterortrack_){}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.longitude_dist_){}
    , decltype(_impl_.lateral_dist_){}
    , decltype(_impl_.longitude_vel_){}
    , decltype(_impl_.lateral_vel_){}
    , decltype(_impl_.rcs_){}
    , decltype(_impl_.longitude_dist_rms_){}
    , decltype(_impl_.lateral_dist_rms_){}
    , decltype(_impl_.longitude_vel_rms_){}
    , decltype(_impl_.dynprop_){}
    , decltype(_impl_.meas_state_){}
    , decltype(_impl_.lateral_vel_rms_){}
    , decltype(_impl_.probexist_){}
    , decltype(_impl_.longitude_accel_){}
    , decltype(_impl_.lateral_accel_){}
    , decltype(_impl_.oritation_angle_){}
    , decltype(_impl_.longitude_accel_rms_){}
    , decltype(_impl_.lateral_accel_rms_){}
    , decltype(_impl_.oritation_angle_rms_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.obstacle_class_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.clusterortrack_, &from._impl_.clusterortrack_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.obstacle_class_) -
    reinterpret_cast<char*>(&_impl_.clusterortrack_)) + sizeof(_impl_.obstacle_class_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ContiRadarObs)
}

inline void ContiRadarObs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.clusterortrack_){false}
    , decltype(_impl_.obstacle_id_){0}
    , decltype(_impl_.longitude_dist_){0}
    , decltype(_impl_.lateral_dist_){0}
    , decltype(_impl_.longitude_vel_){0}
    , decltype(_impl_.lateral_vel_){0}
    , decltype(_impl_.rcs_){0}
    , decltype(_impl_.longitude_dist_rms_){0}
    , decltype(_impl_.lateral_dist_rms_){0}
    , decltype(_impl_.longitude_vel_rms_){0}
    , decltype(_impl_.dynprop_){0}
    , decltype(_impl_.meas_state_){0}
    , decltype(_impl_.lateral_vel_rms_){0}
    , decltype(_impl_.probexist_){0}
    , decltype(_impl_.longitude_accel_){0}
    , decltype(_impl_.lateral_accel_){0}
    , decltype(_impl_.oritation_angle_){0}
    , decltype(_impl_.longitude_accel_rms_){0}
    , decltype(_impl_.lateral_accel_rms_){0}
    , decltype(_impl_.oritation_angle_rms_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.obstacle_class_){0}
  };
}

ContiRadarObs::~ContiRadarObs() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ContiRadarObs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContiRadarObs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ContiRadarObs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContiRadarObs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ContiRadarObs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.clusterortrack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rcs_) -
        reinterpret_cast<char*>(&_impl_.clusterortrack_)) + sizeof(_impl_.rcs_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.longitude_dist_rms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_accel_) -
        reinterpret_cast<char*>(&_impl_.longitude_dist_rms_)) + sizeof(_impl_.longitude_accel_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.lateral_accel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.obstacle_class_) -
        reinterpret_cast<char*>(&_impl_.lateral_accel_)) + sizeof(_impl_.obstacle_class_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContiRadarObs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clusterortrack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clusterortrack(&has_bits);
          _impl_.clusterortrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_obstacle_id(&has_bits);
          _impl_.obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double longitude_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_longitude_dist(&has_bits);
          _impl_.longitude_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double lateral_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_lateral_dist(&has_bits);
          _impl_.lateral_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double longitude_vel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_longitude_vel(&has_bits);
          _impl_.longitude_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double lateral_vel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_lateral_vel(&has_bits);
          _impl_.lateral_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rcs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_rcs(&has_bits);
          _impl_.rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dynprop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_dynprop(&has_bits);
          _impl_.dynprop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_dist_rms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_longitude_dist_rms(&has_bits);
          _impl_.longitude_dist_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_dist_rms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_lateral_dist_rms(&has_bits);
          _impl_.lateral_dist_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_vel_rms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_longitude_vel_rms(&has_bits);
          _impl_.longitude_vel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_vel_rms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_lateral_vel_rms(&has_bits);
          _impl_.lateral_vel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double probexist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_probexist(&has_bits);
          _impl_.probexist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 meas_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_meas_state(&has_bits);
          _impl_.meas_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_accel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_longitude_accel(&has_bits);
          _impl_.longitude_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_accel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_lateral_accel(&has_bits);
          _impl_.lateral_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double oritation_angle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_oritation_angle(&has_bits);
          _impl_.oritation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude_accel_rms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_longitude_accel_rms(&has_bits);
          _impl_.longitude_accel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_accel_rms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_lateral_accel_rms(&has_bits);
          _impl_.lateral_accel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double oritation_angle_rms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_oritation_angle_rms(&has_bits);
          _impl_.oritation_angle_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_class = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_obstacle_class(&has_bits);
          _impl_.obstacle_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContiRadarObs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ContiRadarObs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clusterortrack(), target);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_obstacle_id(), target);
  }

  // required double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude_dist(), target);
  }

  // required double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_lateral_dist(), target);
  }

  // required double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude_vel(), target);
  }

  // required double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_lateral_vel(), target);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_rcs(), target);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_dynprop(), target);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude_dist_rms(), target);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_lateral_dist_rms(), target);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_longitude_vel_rms(), target);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_lateral_vel_rms(), target);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_probexist(), target);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_meas_state(), target);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_longitude_accel(), target);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_lateral_accel(), target);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_oritation_angle(), target);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_longitude_accel_rms(), target);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_lateral_accel_rms(), target);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_oritation_angle_rms(), target);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_length(), target);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_width(), target);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_obstacle_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ContiRadarObs)
  return target;
}

size_t ContiRadarObs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.drivers.ContiRadarObs)
  size_t total_size = 0;

  if (_internal_has_longitude_dist()) {
    // required double longitude_dist = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_lateral_dist()) {
    // required double lateral_dist = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude_vel()) {
    // required double longitude_vel = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_lateral_vel()) {
    // required double lateral_vel = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ContiRadarObs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ContiRadarObs)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000078) ^ 0x00000078) == 0) {  // All required fields are present.
    // required double longitude_dist = 4;
    total_size += 1 + 8;

    // required double lateral_dist = 5;
    total_size += 1 + 8;

    // required double longitude_vel = 6;
    total_size += 1 + 8;

    // required double lateral_vel = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional bool clusterortrack = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 obstacle_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_id());
    }

  }
  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 8;
  }

  if (cached_has_bits & 0x0000ff00u) {
    // optional double longitude_dist_rms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist_rms = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel_rms = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 dynprop = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dynprop());
    }

    // optional int32 meas_state = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_meas_state());
    }

    // optional double lateral_vel_rms = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double probexist = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double longitude_accel = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double lateral_accel = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double longitude_accel_rms = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_accel_rms = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle_rms = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double length = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double width = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional int32 obstacle_class = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_obstacle_class());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContiRadarObs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContiRadarObs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContiRadarObs::GetClassData() const { return &_class_data_; }

void ContiRadarObs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContiRadarObs *>(to)->MergeFrom(
      static_cast<const ContiRadarObs &>(from));
}


void ContiRadarObs::MergeFrom(const ContiRadarObs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ContiRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.clusterortrack_ = from._impl_.clusterortrack_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.obstacle_id_ = from._impl_.obstacle_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.longitude_dist_ = from._impl_.longitude_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.lateral_dist_ = from._impl_.lateral_dist_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.longitude_vel_ = from._impl_.longitude_vel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lateral_vel_ = from._impl_.lateral_vel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.rcs_ = from._impl_.rcs_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.longitude_dist_rms_ = from._impl_.longitude_dist_rms_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.lateral_dist_rms_ = from._impl_.lateral_dist_rms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.longitude_vel_rms_ = from._impl_.longitude_vel_rms_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.dynprop_ = from._impl_.dynprop_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.meas_state_ = from._impl_.meas_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.lateral_vel_rms_ = from._impl_.lateral_vel_rms_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.probexist_ = from._impl_.probexist_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.longitude_accel_ = from._impl_.longitude_accel_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.lateral_accel_ = from._impl_.lateral_accel_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.oritation_angle_ = from._impl_.oritation_angle_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.longitude_accel_rms_ = from._impl_.longitude_accel_rms_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.lateral_accel_rms_ = from._impl_.lateral_accel_rms_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.oritation_angle_rms_ = from._impl_.oritation_angle_rms_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.obstacle_class_ = from._impl_.obstacle_class_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContiRadarObs::CopyFrom(const ContiRadarObs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ContiRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadarObs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ContiRadarObs::InternalSwap(ContiRadarObs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContiRadarObs, _impl_.obstacle_class_)
      + sizeof(ContiRadarObs::_impl_.obstacle_class_)
      - PROTOBUF_FIELD_OFFSET(ContiRadarObs, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContiRadarObs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[3]);
}

// ===================================================================

class ContiRadar::_Internal {
 public:
  using HasBits = decltype(std::declval<ContiRadar>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const ContiRadar* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::RadarState_201& radar_state(const ContiRadar* msg);
  static void set_has_radar_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::ClusterListStatus_600& cluster_list_status(const ContiRadar* msg);
  static void set_has_cluster_list_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::ObjectListStatus_60A& object_list_status(const ContiRadar* msg);
  static void set_has_object_list_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
ContiRadar::_Internal::header(const ContiRadar* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::drivers::RadarState_201&
ContiRadar::_Internal::radar_state(const ContiRadar* msg) {
  return *msg->_impl_.radar_state_;
}
const ::apollo::drivers::ClusterListStatus_600&
ContiRadar::_Internal::cluster_list_status(const ContiRadar* msg) {
  return *msg->_impl_.cluster_list_status_;
}
const ::apollo::drivers::ObjectListStatus_60A&
ContiRadar::_Internal::object_list_status(const ContiRadar* msg) {
  return *msg->_impl_.object_list_status_;
}
void ContiRadar::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ContiRadar::ContiRadar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.ContiRadar)
}
ContiRadar::ContiRadar(const ContiRadar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contiobs_){from._impl_.contiobs_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.radar_state_){nullptr}
    , decltype(_impl_.cluster_list_status_){nullptr}
    , decltype(_impl_.object_list_status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_radar_state()) {
    _impl_.radar_state_ = new ::apollo::drivers::RadarState_201(*from._impl_.radar_state_);
  }
  if (from._internal_has_cluster_list_status()) {
    _impl_.cluster_list_status_ = new ::apollo::drivers::ClusterListStatus_600(*from._impl_.cluster_list_status_);
  }
  if (from._internal_has_object_list_status()) {
    _impl_.object_list_status_ = new ::apollo::drivers::ObjectListStatus_60A(*from._impl_.object_list_status_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.ContiRadar)
}

inline void ContiRadar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contiobs_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.radar_state_){nullptr}
    , decltype(_impl_.cluster_list_status_){nullptr}
    , decltype(_impl_.object_list_status_){nullptr}
  };
}

ContiRadar::~ContiRadar() {
  // @@protoc_insertion_point(destructor:apollo.drivers.ContiRadar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContiRadar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contiobs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.radar_state_;
  if (this != internal_default_instance()) delete _impl_.cluster_list_status_;
  if (this != internal_default_instance()) delete _impl_.object_list_status_;
}

void ContiRadar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContiRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.ContiRadar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contiobs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.radar_state_ != nullptr);
      _impl_.radar_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cluster_list_status_ != nullptr);
      _impl_.cluster_list_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.object_list_status_ != nullptr);
      _impl_.object_list_status_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContiRadar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contiobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.RadarState_201 radar_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radar_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_list_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_list_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContiRadar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.ContiRadar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contiobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_contiobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.RadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::radar_state(this),
        _Internal::radar_state(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cluster_list_status(this),
        _Internal::cluster_list_status(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::object_list_status(this),
        _Internal::object_list_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.ContiRadar)
  return target;
}

size_t ContiRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.ContiRadar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.ContiRadarObs contiobs = 2;
  total_size += 1UL * this->_internal_contiobs_size();
  for (const auto& msg : this->_impl_.contiobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.drivers.RadarState_201 radar_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radar_state_);
    }

    // optional .apollo.drivers.ClusterListStatus_600 cluster_list_status = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cluster_list_status_);
    }

    // optional .apollo.drivers.ObjectListStatus_60A object_list_status = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_list_status_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContiRadar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContiRadar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContiRadar::GetClassData() const { return &_class_data_; }

void ContiRadar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContiRadar *>(to)->MergeFrom(
      static_cast<const ContiRadar &>(from));
}


void ContiRadar::MergeFrom(const ContiRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.ContiRadar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.contiobs_.MergeFrom(from._impl_.contiobs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_radar_state()->::apollo::drivers::RadarState_201::MergeFrom(from._internal_radar_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cluster_list_status()->::apollo::drivers::ClusterListStatus_600::MergeFrom(from._internal_cluster_list_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_object_list_status()->::apollo::drivers::ObjectListStatus_60A::MergeFrom(from._internal_object_list_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContiRadar::CopyFrom(const ContiRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.ContiRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadar::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.contiobs_))
    return false;
  return true;
}

void ContiRadar::InternalSwap(ContiRadar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contiobs_.InternalSwap(&other->_impl_.contiobs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContiRadar, _impl_.object_list_status_)
      + sizeof(ContiRadar::_impl_.object_list_status_)
      - PROTOBUF_FIELD_OFFSET(ContiRadar, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContiRadar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fconti_5fradar_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::ClusterListStatus_600*
Arena::CreateMaybeMessage< ::apollo::drivers::ClusterListStatus_600 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::ClusterListStatus_600 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::ObjectListStatus_60A*
Arena::CreateMaybeMessage< ::apollo::drivers::ObjectListStatus_60A >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::ObjectListStatus_60A >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RadarState_201*
Arena::CreateMaybeMessage< ::apollo::drivers::RadarState_201 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::RadarState_201 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::ContiRadarObs*
Arena::CreateMaybeMessage< ::apollo::drivers::ContiRadarObs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::ContiRadarObs >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::ContiRadar*
Arena::CreateMaybeMessage< ::apollo::drivers::ContiRadar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::ContiRadar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
