// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fradar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto;
namespace apollo {
namespace drivers {
class RadarObstacle;
struct RadarObstacleDefaultTypeInternal;
extern RadarObstacleDefaultTypeInternal _RadarObstacle_default_instance_;
class RadarObstacles;
struct RadarObstaclesDefaultTypeInternal;
extern RadarObstaclesDefaultTypeInternal _RadarObstacles_default_instance_;
class RadarObstacles_RadarObstacleEntry_DoNotUse;
struct RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal;
extern RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::RadarObstacle* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacle>(Arena*);
template<> ::apollo::drivers::RadarObstacles* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacles>(Arena*);
template<> ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {

enum RadarObstacle_Status : int {
  RadarObstacle_Status_NO_TARGET = 0,
  RadarObstacle_Status_NEW_TARGET = 1,
  RadarObstacle_Status_NEW_UPDATED_TARGET = 2,
  RadarObstacle_Status_UPDATED_TARGET = 3,
  RadarObstacle_Status_COASTED_TARGET = 4,
  RadarObstacle_Status_MERGED_TARGET = 5,
  RadarObstacle_Status_INVALID_COASTED_TARGET = 6,
  RadarObstacle_Status_NEW_COASTED_TARGET = 7
};
bool RadarObstacle_Status_IsValid(int value);
constexpr RadarObstacle_Status RadarObstacle_Status_Status_MIN = RadarObstacle_Status_NO_TARGET;
constexpr RadarObstacle_Status RadarObstacle_Status_Status_MAX = RadarObstacle_Status_NEW_COASTED_TARGET;
constexpr int RadarObstacle_Status_Status_ARRAYSIZE = RadarObstacle_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarObstacle_Status_descriptor();
template<typename T>
inline const std::string& RadarObstacle_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RadarObstacle_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RadarObstacle_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RadarObstacle_Status_descriptor(), enum_t_value);
}
inline bool RadarObstacle_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RadarObstacle_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadarObstacle_Status>(
    RadarObstacle_Status_descriptor(), name, value);
}
enum RadarObstacle_MovingStatus : int {
  RadarObstacle_MovingStatus_STATIONARY = 0,
  RadarObstacle_MovingStatus_NEARING = 1,
  RadarObstacle_MovingStatus_AWAYING = 2,
  RadarObstacle_MovingStatus_NONE = 3
};
bool RadarObstacle_MovingStatus_IsValid(int value);
constexpr RadarObstacle_MovingStatus RadarObstacle_MovingStatus_MovingStatus_MIN = RadarObstacle_MovingStatus_STATIONARY;
constexpr RadarObstacle_MovingStatus RadarObstacle_MovingStatus_MovingStatus_MAX = RadarObstacle_MovingStatus_NONE;
constexpr int RadarObstacle_MovingStatus_MovingStatus_ARRAYSIZE = RadarObstacle_MovingStatus_MovingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarObstacle_MovingStatus_descriptor();
template<typename T>
inline const std::string& RadarObstacle_MovingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RadarObstacle_MovingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RadarObstacle_MovingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RadarObstacle_MovingStatus_descriptor(), enum_t_value);
}
inline bool RadarObstacle_MovingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RadarObstacle_MovingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadarObstacle_MovingStatus>(
    RadarObstacle_MovingStatus_descriptor(), name, value);
}
// ===================================================================

class RadarObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RadarObstacle) */ {
 public:
  inline RadarObstacle() : RadarObstacle(nullptr) {}
  ~RadarObstacle() override;
  explicit PROTOBUF_CONSTEXPR RadarObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarObstacle(const RadarObstacle& from);
  RadarObstacle(RadarObstacle&& from) noexcept
    : RadarObstacle() {
    *this = ::std::move(from);
  }

  inline RadarObstacle& operator=(const RadarObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarObstacle& operator=(RadarObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarObstacle* internal_default_instance() {
    return reinterpret_cast<const RadarObstacle*>(
               &_RadarObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarObstacle& a, RadarObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadarObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RadarObstacle";
  }
  protected:
  explicit RadarObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RadarObstacle_Status Status;
  static constexpr Status NO_TARGET =
    RadarObstacle_Status_NO_TARGET;
  static constexpr Status NEW_TARGET =
    RadarObstacle_Status_NEW_TARGET;
  static constexpr Status NEW_UPDATED_TARGET =
    RadarObstacle_Status_NEW_UPDATED_TARGET;
  static constexpr Status UPDATED_TARGET =
    RadarObstacle_Status_UPDATED_TARGET;
  static constexpr Status COASTED_TARGET =
    RadarObstacle_Status_COASTED_TARGET;
  static constexpr Status MERGED_TARGET =
    RadarObstacle_Status_MERGED_TARGET;
  static constexpr Status INVALID_COASTED_TARGET =
    RadarObstacle_Status_INVALID_COASTED_TARGET;
  static constexpr Status NEW_COASTED_TARGET =
    RadarObstacle_Status_NEW_COASTED_TARGET;
  static inline bool Status_IsValid(int value) {
    return RadarObstacle_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RadarObstacle_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RadarObstacle_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RadarObstacle_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RadarObstacle_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RadarObstacle_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RadarObstacle_Status_Parse(name, value);
  }

  typedef RadarObstacle_MovingStatus MovingStatus;
  static constexpr MovingStatus STATIONARY =
    RadarObstacle_MovingStatus_STATIONARY;
  static constexpr MovingStatus NEARING =
    RadarObstacle_MovingStatus_NEARING;
  static constexpr MovingStatus AWAYING =
    RadarObstacle_MovingStatus_AWAYING;
  static constexpr MovingStatus NONE =
    RadarObstacle_MovingStatus_NONE;
  static inline bool MovingStatus_IsValid(int value) {
    return RadarObstacle_MovingStatus_IsValid(value);
  }
  static constexpr MovingStatus MovingStatus_MIN =
    RadarObstacle_MovingStatus_MovingStatus_MIN;
  static constexpr MovingStatus MovingStatus_MAX =
    RadarObstacle_MovingStatus_MovingStatus_MAX;
  static constexpr int MovingStatus_ARRAYSIZE =
    RadarObstacle_MovingStatus_MovingStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MovingStatus_descriptor() {
    return RadarObstacle_MovingStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& MovingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MovingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MovingStatus_Name.");
    return RadarObstacle_MovingStatus_Name(enum_t_value);
  }
  static inline bool MovingStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MovingStatus* value) {
    return RadarObstacle_MovingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePositionFieldNumber = 2,
    kRelativeVelocityFieldNumber = 3,
    kAbsolutePositionFieldNumber = 10,
    kAbsoluteVelocityFieldNumber = 11,
    kIdFieldNumber = 1,
    kMovingStatusFieldNumber = 5,
    kRcsFieldNumber = 4,
    kWidthFieldNumber = 6,
    kLengthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kThetaFieldNumber = 9,
    kCountFieldNumber = 12,
    kMovingFramesCountFieldNumber = 13,
    kStatusFieldNumber = 14,
  };
  // optional .apollo.common.Point2D relative_position = 2;
  bool has_relative_position() const;
  private:
  bool _internal_has_relative_position() const;
  public:
  void clear_relative_position();
  const ::apollo::common::Point2D& relative_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point2D* release_relative_position();
  ::apollo::common::Point2D* mutable_relative_position();
  void set_allocated_relative_position(::apollo::common::Point2D* relative_position);
  private:
  const ::apollo::common::Point2D& _internal_relative_position() const;
  ::apollo::common::Point2D* _internal_mutable_relative_position();
  public:
  void unsafe_arena_set_allocated_relative_position(
      ::apollo::common::Point2D* relative_position);
  ::apollo::common::Point2D* unsafe_arena_release_relative_position();

  // optional .apollo.common.Point2D relative_velocity = 3;
  bool has_relative_velocity() const;
  private:
  bool _internal_has_relative_velocity() const;
  public:
  void clear_relative_velocity();
  const ::apollo::common::Point2D& relative_velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point2D* release_relative_velocity();
  ::apollo::common::Point2D* mutable_relative_velocity();
  void set_allocated_relative_velocity(::apollo::common::Point2D* relative_velocity);
  private:
  const ::apollo::common::Point2D& _internal_relative_velocity() const;
  ::apollo::common::Point2D* _internal_mutable_relative_velocity();
  public:
  void unsafe_arena_set_allocated_relative_velocity(
      ::apollo::common::Point2D* relative_velocity);
  ::apollo::common::Point2D* unsafe_arena_release_relative_velocity();

  // optional .apollo.common.Point2D absolute_position = 10;
  bool has_absolute_position() const;
  private:
  bool _internal_has_absolute_position() const;
  public:
  void clear_absolute_position();
  const ::apollo::common::Point2D& absolute_position() const;
  PROTOBUF_NODISCARD ::apollo::common::Point2D* release_absolute_position();
  ::apollo::common::Point2D* mutable_absolute_position();
  void set_allocated_absolute_position(::apollo::common::Point2D* absolute_position);
  private:
  const ::apollo::common::Point2D& _internal_absolute_position() const;
  ::apollo::common::Point2D* _internal_mutable_absolute_position();
  public:
  void unsafe_arena_set_allocated_absolute_position(
      ::apollo::common::Point2D* absolute_position);
  ::apollo::common::Point2D* unsafe_arena_release_absolute_position();

  // optional .apollo.common.Point2D absolute_velocity = 11;
  bool has_absolute_velocity() const;
  private:
  bool _internal_has_absolute_velocity() const;
  public:
  void clear_absolute_velocity();
  const ::apollo::common::Point2D& absolute_velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point2D* release_absolute_velocity();
  ::apollo::common::Point2D* mutable_absolute_velocity();
  void set_allocated_absolute_velocity(::apollo::common::Point2D* absolute_velocity);
  private:
  const ::apollo::common::Point2D& _internal_absolute_velocity() const;
  ::apollo::common::Point2D* _internal_mutable_absolute_velocity();
  public:
  void unsafe_arena_set_allocated_absolute_velocity(
      ::apollo::common::Point2D* absolute_velocity);
  ::apollo::common::Point2D* unsafe_arena_release_absolute_velocity();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  bool has_moving_status() const;
  private:
  bool _internal_has_moving_status() const;
  public:
  void clear_moving_status();
  ::apollo::drivers::RadarObstacle_MovingStatus moving_status() const;
  void set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value);
  private:
  ::apollo::drivers::RadarObstacle_MovingStatus _internal_moving_status() const;
  void _internal_set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value);
  public:

  // optional double rcs = 4;
  bool has_rcs() const;
  private:
  bool _internal_has_rcs() const;
  public:
  void clear_rcs();
  double rcs() const;
  void set_rcs(double value);
  private:
  double _internal_rcs() const;
  void _internal_set_rcs(double value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double length = 7;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double theta = 9;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional int32 count = 12;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional int32 moving_frames_count = 13;
  bool has_moving_frames_count() const;
  private:
  bool _internal_has_moving_frames_count() const;
  public:
  void clear_moving_frames_count();
  int32_t moving_frames_count() const;
  void set_moving_frames_count(int32_t value);
  private:
  int32_t _internal_moving_frames_count() const;
  void _internal_set_moving_frames_count(int32_t value);
  public:

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::apollo::drivers::RadarObstacle_Status status() const;
  void set_status(::apollo::drivers::RadarObstacle_Status value);
  private:
  ::apollo::drivers::RadarObstacle_Status _internal_status() const;
  void _internal_set_status(::apollo::drivers::RadarObstacle_Status value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RadarObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Point2D* relative_position_;
    ::apollo::common::Point2D* relative_velocity_;
    ::apollo::common::Point2D* absolute_position_;
    ::apollo::common::Point2D* absolute_velocity_;
    int32_t id_;
    int moving_status_;
    double rcs_;
    double width_;
    double length_;
    double height_;
    double theta_;
    int32_t count_;
    int32_t moving_frames_count_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto;
};
// -------------------------------------------------------------------

class RadarObstacles_RadarObstacleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    int32_t, ::apollo::drivers::RadarObstacle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    int32_t, ::apollo::drivers::RadarObstacle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RadarObstacles_RadarObstacleEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RadarObstacles_RadarObstacleEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RadarObstacles_RadarObstacleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other);
  static const RadarObstacles_RadarObstacleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RadarObstacles_RadarObstacleEntry_DoNotUse*>(&_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto;
};

// -------------------------------------------------------------------

class RadarObstacles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RadarObstacles) */ {
 public:
  inline RadarObstacles() : RadarObstacles(nullptr) {}
  ~RadarObstacles() override;
  explicit PROTOBUF_CONSTEXPR RadarObstacles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarObstacles(const RadarObstacles& from);
  RadarObstacles(RadarObstacles&& from) noexcept
    : RadarObstacles() {
    *this = ::std::move(from);
  }

  inline RadarObstacles& operator=(const RadarObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarObstacles& operator=(RadarObstacles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarObstacles& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarObstacles* internal_default_instance() {
    return reinterpret_cast<const RadarObstacles*>(
               &_RadarObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RadarObstacles& a, RadarObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarObstacles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarObstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarObstacles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarObstacles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadarObstacles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.RadarObstacles";
  }
  protected:
  explicit RadarObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRadarObstacleFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  int radar_obstacle_size() const;
  private:
  int _internal_radar_obstacle_size() const;
  public:
  void clear_radar_obstacle();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >&
      _internal_radar_obstacle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >*
      _internal_mutable_radar_obstacle();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >&
      radar_obstacle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >*
      mutable_radar_obstacle();

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.RadarObstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RadarObstacles_RadarObstacleEntry_DoNotUse,
        int32_t, ::apollo::drivers::RadarObstacle,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> radar_obstacle_;
    ::apollo::common::Header* header_;
    int error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarObstacle

// optional int32 id = 1;
inline bool RadarObstacle::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarObstacle::has_id() const {
  return _internal_has_id();
}
inline void RadarObstacle::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t RadarObstacle::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RadarObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.id)
  return _internal_id();
}
inline void RadarObstacle::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void RadarObstacle::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.id)
}

// optional .apollo.common.Point2D relative_position = 2;
inline bool RadarObstacle::_internal_has_relative_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relative_position_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_relative_position() const {
  return _internal_has_relative_position();
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_relative_position() const {
  const ::apollo::common::Point2D* p = _impl_.relative_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& RadarObstacle::relative_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_position)
  return _internal_relative_position();
}
inline void RadarObstacle::unsafe_arena_set_allocated_relative_position(
    ::apollo::common::Point2D* relative_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_position_);
  }
  _impl_.relative_position_ = relative_position;
  if (relative_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RadarObstacle.relative_position)
}
inline ::apollo::common::Point2D* RadarObstacle::release_relative_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point2D* temp = _impl_.relative_position_;
  _impl_.relative_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::unsafe_arena_release_relative_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point2D* temp = _impl_.relative_position_;
  _impl_.relative_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::_internal_mutable_relative_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.relative_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    _impl_.relative_position_ = p;
  }
  return _impl_.relative_position_;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_relative_position() {
  ::apollo::common::Point2D* _msg = _internal_mutable_relative_position();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_position)
  return _msg;
}
inline void RadarObstacle::set_allocated_relative_position(::apollo::common::Point2D* relative_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_position_);
  }
  if (relative_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_position));
    if (message_arena != submessage_arena) {
      relative_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.relative_position_ = relative_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_position)
}

// optional .apollo.common.Point2D relative_velocity = 3;
inline bool RadarObstacle::_internal_has_relative_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relative_velocity_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_relative_velocity() const {
  return _internal_has_relative_velocity();
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_relative_velocity() const {
  const ::apollo::common::Point2D* p = _impl_.relative_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& RadarObstacle::relative_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_velocity)
  return _internal_relative_velocity();
}
inline void RadarObstacle::unsafe_arena_set_allocated_relative_velocity(
    ::apollo::common::Point2D* relative_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_velocity_);
  }
  _impl_.relative_velocity_ = relative_velocity;
  if (relative_velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RadarObstacle.relative_velocity)
}
inline ::apollo::common::Point2D* RadarObstacle::release_relative_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point2D* temp = _impl_.relative_velocity_;
  _impl_.relative_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::unsafe_arena_release_relative_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point2D* temp = _impl_.relative_velocity_;
  _impl_.relative_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::_internal_mutable_relative_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.relative_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    _impl_.relative_velocity_ = p;
  }
  return _impl_.relative_velocity_;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_relative_velocity() {
  ::apollo::common::Point2D* _msg = _internal_mutable_relative_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_velocity)
  return _msg;
}
inline void RadarObstacle::set_allocated_relative_velocity(::apollo::common::Point2D* relative_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_velocity_);
  }
  if (relative_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_velocity));
    if (message_arena != submessage_arena) {
      relative_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.relative_velocity_ = relative_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_velocity)
}

// optional double rcs = 4;
inline bool RadarObstacle::_internal_has_rcs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarObstacle::has_rcs() const {
  return _internal_has_rcs();
}
inline void RadarObstacle::clear_rcs() {
  _impl_.rcs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double RadarObstacle::_internal_rcs() const {
  return _impl_.rcs_;
}
inline double RadarObstacle::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.rcs)
  return _internal_rcs();
}
inline void RadarObstacle::_internal_set_rcs(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rcs_ = value;
}
inline void RadarObstacle::set_rcs(double value) {
  _internal_set_rcs(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.rcs)
}

// optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
inline bool RadarObstacle::_internal_has_moving_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarObstacle::has_moving_status() const {
  return _internal_has_moving_status();
}
inline void RadarObstacle::clear_moving_status() {
  _impl_.moving_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::RadarObstacle_MovingStatus RadarObstacle::_internal_moving_status() const {
  return static_cast< ::apollo::drivers::RadarObstacle_MovingStatus >(_impl_.moving_status_);
}
inline ::apollo::drivers::RadarObstacle_MovingStatus RadarObstacle::moving_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_status)
  return _internal_moving_status();
}
inline void RadarObstacle::_internal_set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value) {
  assert(::apollo::drivers::RadarObstacle_MovingStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.moving_status_ = value;
}
inline void RadarObstacle::set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value) {
  _internal_set_moving_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_status)
}

// optional double width = 6;
inline bool RadarObstacle::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarObstacle::has_width() const {
  return _internal_has_width();
}
inline void RadarObstacle::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double RadarObstacle::_internal_width() const {
  return _impl_.width_;
}
inline double RadarObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.width)
  return _internal_width();
}
inline void RadarObstacle::_internal_set_width(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.width_ = value;
}
inline void RadarObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.width)
}

// optional double length = 7;
inline bool RadarObstacle::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarObstacle::has_length() const {
  return _internal_has_length();
}
inline void RadarObstacle::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double RadarObstacle::_internal_length() const {
  return _impl_.length_;
}
inline double RadarObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.length)
  return _internal_length();
}
inline void RadarObstacle::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.length_ = value;
}
inline void RadarObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.length)
}

// optional double height = 8;
inline bool RadarObstacle::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarObstacle::has_height() const {
  return _internal_has_height();
}
inline void RadarObstacle::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double RadarObstacle::_internal_height() const {
  return _impl_.height_;
}
inline double RadarObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.height)
  return _internal_height();
}
inline void RadarObstacle::_internal_set_height(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.height_ = value;
}
inline void RadarObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.height)
}

// optional double theta = 9;
inline bool RadarObstacle::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarObstacle::has_theta() const {
  return _internal_has_theta();
}
inline void RadarObstacle::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double RadarObstacle::_internal_theta() const {
  return _impl_.theta_;
}
inline double RadarObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.theta)
  return _internal_theta();
}
inline void RadarObstacle::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theta_ = value;
}
inline void RadarObstacle::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.theta)
}

// optional .apollo.common.Point2D absolute_position = 10;
inline bool RadarObstacle::_internal_has_absolute_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.absolute_position_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_absolute_position() const {
  return _internal_has_absolute_position();
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_absolute_position() const {
  const ::apollo::common::Point2D* p = _impl_.absolute_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& RadarObstacle::absolute_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_position)
  return _internal_absolute_position();
}
inline void RadarObstacle::unsafe_arena_set_allocated_absolute_position(
    ::apollo::common::Point2D* absolute_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_position_);
  }
  _impl_.absolute_position_ = absolute_position;
  if (absolute_position) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RadarObstacle.absolute_position)
}
inline ::apollo::common::Point2D* RadarObstacle::release_absolute_position() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point2D* temp = _impl_.absolute_position_;
  _impl_.absolute_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::unsafe_arena_release_absolute_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_position)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point2D* temp = _impl_.absolute_position_;
  _impl_.absolute_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::_internal_mutable_absolute_position() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.absolute_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    _impl_.absolute_position_ = p;
  }
  return _impl_.absolute_position_;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_absolute_position() {
  ::apollo::common::Point2D* _msg = _internal_mutable_absolute_position();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_position)
  return _msg;
}
inline void RadarObstacle::set_allocated_absolute_position(::apollo::common::Point2D* absolute_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_position_);
  }
  if (absolute_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_position));
    if (message_arena != submessage_arena) {
      absolute_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.absolute_position_ = absolute_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_position)
}

// optional .apollo.common.Point2D absolute_velocity = 11;
inline bool RadarObstacle::_internal_has_absolute_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.absolute_velocity_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_absolute_velocity() const {
  return _internal_has_absolute_velocity();
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_absolute_velocity() const {
  const ::apollo::common::Point2D* p = _impl_.absolute_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& RadarObstacle::absolute_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_velocity)
  return _internal_absolute_velocity();
}
inline void RadarObstacle::unsafe_arena_set_allocated_absolute_velocity(
    ::apollo::common::Point2D* absolute_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_velocity_);
  }
  _impl_.absolute_velocity_ = absolute_velocity;
  if (absolute_velocity) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RadarObstacle.absolute_velocity)
}
inline ::apollo::common::Point2D* RadarObstacle::release_absolute_velocity() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point2D* temp = _impl_.absolute_velocity_;
  _impl_.absolute_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::unsafe_arena_release_absolute_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_velocity)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point2D* temp = _impl_.absolute_velocity_;
  _impl_.absolute_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::_internal_mutable_absolute_velocity() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.absolute_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    _impl_.absolute_velocity_ = p;
  }
  return _impl_.absolute_velocity_;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_absolute_velocity() {
  ::apollo::common::Point2D* _msg = _internal_mutable_absolute_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_velocity)
  return _msg;
}
inline void RadarObstacle::set_allocated_absolute_velocity(::apollo::common::Point2D* absolute_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.absolute_velocity_);
  }
  if (absolute_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_velocity));
    if (message_arena != submessage_arena) {
      absolute_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.absolute_velocity_ = absolute_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_velocity)
}

// optional int32 count = 12;
inline bool RadarObstacle::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarObstacle::has_count() const {
  return _internal_has_count();
}
inline void RadarObstacle::clear_count() {
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t RadarObstacle::_internal_count() const {
  return _impl_.count_;
}
inline int32_t RadarObstacle::count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.count)
  return _internal_count();
}
inline void RadarObstacle::_internal_set_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.count_ = value;
}
inline void RadarObstacle::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.count)
}

// optional int32 moving_frames_count = 13;
inline bool RadarObstacle::_internal_has_moving_frames_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarObstacle::has_moving_frames_count() const {
  return _internal_has_moving_frames_count();
}
inline void RadarObstacle::clear_moving_frames_count() {
  _impl_.moving_frames_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t RadarObstacle::_internal_moving_frames_count() const {
  return _impl_.moving_frames_count_;
}
inline int32_t RadarObstacle::moving_frames_count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_frames_count)
  return _internal_moving_frames_count();
}
inline void RadarObstacle::_internal_set_moving_frames_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.moving_frames_count_ = value;
}
inline void RadarObstacle::set_moving_frames_count(int32_t value) {
  _internal_set_moving_frames_count(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_frames_count)
}

// optional .apollo.drivers.RadarObstacle.Status status = 14;
inline bool RadarObstacle::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RadarObstacle::has_status() const {
  return _internal_has_status();
}
inline void RadarObstacle::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::drivers::RadarObstacle_Status RadarObstacle::_internal_status() const {
  return static_cast< ::apollo::drivers::RadarObstacle_Status >(_impl_.status_);
}
inline ::apollo::drivers::RadarObstacle_Status RadarObstacle::status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.status)
  return _internal_status();
}
inline void RadarObstacle::_internal_set_status(::apollo::drivers::RadarObstacle_Status value) {
  assert(::apollo::drivers::RadarObstacle_Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.status_ = value;
}
inline void RadarObstacle::set_status(::apollo::drivers::RadarObstacle_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RadarObstacles

// map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
inline int RadarObstacles::_internal_radar_obstacle_size() const {
  return _impl_.radar_obstacle_.size();
}
inline int RadarObstacles::radar_obstacle_size() const {
  return _internal_radar_obstacle_size();
}
inline void RadarObstacles::clear_radar_obstacle() {
  _impl_.radar_obstacle_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >&
RadarObstacles::_internal_radar_obstacle() const {
  return _impl_.radar_obstacle_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >&
RadarObstacles::radar_obstacle() const {
  // @@protoc_insertion_point(field_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return _internal_radar_obstacle();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >*
RadarObstacles::_internal_mutable_radar_obstacle() {
  return _impl_.radar_obstacle_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::apollo::drivers::RadarObstacle >*
RadarObstacles::mutable_radar_obstacle() {
  // @@protoc_insertion_point(field_mutable_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return _internal_mutable_radar_obstacle();
}

// optional .apollo.common.Header header = 2;
inline bool RadarObstacles::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RadarObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RadarObstacles::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RadarObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.header)
  return _internal_header();
}
inline void RadarObstacles::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.RadarObstacles.header)
}
inline ::apollo::common::Header* RadarObstacles::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* RadarObstacles::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacles.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RadarObstacles::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* RadarObstacles::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacles.header)
  return _msg;
}
inline void RadarObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool RadarObstacles::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarObstacles::has_error_code() const {
  return _internal_has_error_code();
}
inline void RadarObstacles::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::common::ErrorCode RadarObstacles::_internal_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(_impl_.error_code_);
}
inline ::apollo::common::ErrorCode RadarObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.error_code)
  return _internal_error_code();
}
inline void RadarObstacles::_internal_set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_code_ = value;
}
inline void RadarObstacles::set_error_code(::apollo::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::RadarObstacle_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::RadarObstacle_Status>() {
  return ::apollo::drivers::RadarObstacle_Status_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::RadarObstacle_MovingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::RadarObstacle_MovingStatus>() {
  return ::apollo::drivers::RadarObstacle_MovingStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto
