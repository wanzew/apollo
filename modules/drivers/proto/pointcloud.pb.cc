// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/pointcloud.proto

#include "modules/drivers/proto/pointcloud.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
PROTOBUF_CONSTEXPR PointXYZIT::PointXYZIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.intensity_)*/0u
  , /*decltype(_impl_.z_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.x_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.y_)*/std::numeric_limits<float>::quiet_NaN()} {}
struct PointXYZITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointXYZITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointXYZITDefaultTypeInternal() {}
  union {
    PointXYZIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointXYZITDefaultTypeInternal _PointXYZIT_default_instance_;
PROTOBUF_CONSTEXPR PointCloud::PointCloud(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_.frame_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.is_dense_)*/false
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.measurement_time_)*/0
  , /*decltype(_impl_.height_)*/0u} {}
struct PointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudDefaultTypeInternal() {}
  union {
    PointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudDefaultTypeInternal _PointCloud_default_instance_;
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fpointcloud_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2fproto_2fpointcloud_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fpointcloud_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fproto_2fpointcloud_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_.intensity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointXYZIT, _impl_.timestamp_),
  3,
  4,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.is_dense_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::PointCloud, _impl_.height_),
  1,
  0,
  2,
  ~0u,
  4,
  3,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::drivers::PointXYZIT)},
  { 16, 29, -1, sizeof(::apollo::drivers::PointCloud)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::_PointXYZIT_default_instance_._instance,
  &::apollo::drivers::_PointCloud_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fpointcloud_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/drivers/proto/pointcloud.proto"
  "\022\016apollo.drivers\032!modules/common/proto/h"
  "eader.proto\"h\n\nPointXYZIT\022\016\n\001x\030\001 \001(\002:\003na"
  "n\022\016\n\001y\030\002 \001(\002:\003nan\022\016\n\001z\030\003 \001(\002:\003nan\022\024\n\tint"
  "ensity\030\004 \001(\r:\0010\022\024\n\ttimestamp\030\005 \001(\004:\0010\"\273\001"
  "\n\nPointCloud\022%\n\006header\030\001 \001(\0132\025.apollo.co"
  "mmon.Header\022\020\n\010frame_id\030\002 \001(\t\022\020\n\010is_dens"
  "e\030\003 \001(\010\022)\n\005point\030\004 \003(\0132\032.apollo.drivers."
  "PointXYZIT\022\030\n\020measurement_time\030\005 \001(\001\022\r\n\005"
  "width\030\006 \001(\r\022\016\n\006height\030\007 \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto = {
    false, false, 387, descriptor_table_protodef_modules_2fdrivers_2fproto_2fpointcloud_2eproto,
    "modules/drivers/proto/pointcloud.proto",
    &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fpointcloud_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fproto_2fpointcloud_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fpointcloud_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fproto_2fpointcloud_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fproto_2fpointcloud_2eproto(&descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto);
namespace apollo {
namespace drivers {

// ===================================================================

class PointXYZIT::_Internal {
 public:
  using HasBits = decltype(std::declval<PointXYZIT>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PointXYZIT::PointXYZIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.PointXYZIT)
}
PointXYZIT::PointXYZIT(const PointXYZIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.intensity_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.PointXYZIT)
}

inline void PointXYZIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.intensity_){0u}
    , decltype(_impl_.z_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.x_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.y_){std::numeric_limits<float>::quiet_NaN()}
  };
}

PointXYZIT::~PointXYZIT() {
  // @@protoc_insertion_point(destructor:apollo.drivers.PointXYZIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointXYZIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PointXYZIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointXYZIT::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.PointXYZIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.intensity_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.intensity_));
    _impl_.z_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.x_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.y_ = std::numeric_limits<float>::quiet_NaN();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointXYZIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1 [default = nan];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3 [default = nan];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 intensity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_intensity(&has_bits);
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointXYZIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.PointXYZIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1 [default = nan];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2 [default = nan];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional uint32 intensity = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_intensity(), target);
  }

  // optional uint64 timestamp = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.PointXYZIT)
  return target;
}

size_t PointXYZIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.PointXYZIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 timestamp = 5 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 intensity = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_intensity());
    }

    // optional float z = 3 [default = nan];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float x = 1 [default = nan];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = nan];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointXYZIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointXYZIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointXYZIT::GetClassData() const { return &_class_data_; }

void PointXYZIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointXYZIT *>(to)->MergeFrom(
      static_cast<const PointXYZIT &>(from));
}


void PointXYZIT::MergeFrom(const PointXYZIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.PointXYZIT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.intensity_ = from._impl_.intensity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.y_ = from._impl_.y_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointXYZIT::CopyFrom(const PointXYZIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.PointXYZIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXYZIT::IsInitialized() const {
  return true;
}

void PointXYZIT::InternalSwap(PointXYZIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointXYZIT, _impl_.intensity_)
      + sizeof(PointXYZIT::_impl_.intensity_)
      - PROTOBUF_FIELD_OFFSET(PointXYZIT, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.z_, other->_impl_.z_);
  swap(_impl_.x_, other->_impl_.x_);
  swap(_impl_.y_, other->_impl_.y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointXYZIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fpointcloud_2eproto[0]);
}

// ===================================================================

class PointCloud::_Internal {
 public:
  using HasBits = decltype(std::declval<PointCloud>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const PointCloud* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_dense(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::common::Header&
PointCloud::_Internal::header(const PointCloud* msg) {
  return *msg->_impl_.header_;
}
void PointCloud::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PointCloud::PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){from._impl_.point_}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.is_dense_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.measurement_time_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.is_dense_, &from._impl_.is_dense_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.is_dense_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.PointCloud)
}

inline void PointCloud::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){arena}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.is_dense_){false}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.measurement_time_){0}
    , decltype(_impl_.height_){0u}
  };
  _impl_.frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:apollo.drivers.PointCloud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
  _impl_.frame_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PointCloud::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.PointCloud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.is_dense_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.is_dense_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.PointCloud.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_dense(&has_bits);
          _impl_.is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.PointXYZIT point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointCloud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.PointCloud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.PointCloud.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // optional bool is_dense = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_dense(), target);
  }

  // repeated .apollo.drivers.PointXYZIT point = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_measurement_time(), target);
  }

  // optional uint32 width = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // optional uint32 height = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.PointCloud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.PointXYZIT point = 4;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string frame_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional bool is_dense = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 width = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional double measurement_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 height = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointCloud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointCloud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointCloud::GetClassData() const { return &_class_data_; }

void PointCloud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointCloud *>(to)->MergeFrom(
      static_cast<const PointCloud &>(from));
}


void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_.MergeFrom(from._impl_.point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_dense_ = from._impl_.is_dense_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.height_ = from._impl_.height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.height_)
      + sizeof(PointCloud::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(PointCloud, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fpointcloud_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fpointcloud_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::PointXYZIT*
Arena::CreateMaybeMessage< ::apollo::drivers::PointXYZIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::PointXYZIT >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::PointCloud*
Arena::CreateMaybeMessage< ::apollo::drivers::PointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::PointCloud >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
