// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/smartereye.proto

#include "modules/drivers/proto/smartereye.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
PROTOBUF_CONSTEXPR LdwLaneBoundary::LdwLaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.c0_position_)*/0
  , /*decltype(_impl_.c1_heading_angle_)*/0
  , /*decltype(_impl_.c2_curvature_)*/0
  , /*decltype(_impl_.c3_curvature_derivative_)*/0
  , /*decltype(_impl_.degree_)*/0} {}
struct LdwLaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LdwLaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LdwLaneBoundaryDefaultTypeInternal() {}
  union {
    LdwLaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LdwLaneBoundaryDefaultTypeInternal _LdwLaneBoundary_default_instance_;
PROTOBUF_CONSTEXPR LdwLane::LdwLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_boundary_)*/nullptr
  , /*decltype(_impl_.right_boundary_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.style_)*/0} {}
struct LdwLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LdwLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LdwLaneDefaultTypeInternal() {}
  union {
    LdwLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LdwLaneDefaultTypeInternal _LdwLane_default_instance_;
PROTOBUF_CONSTEXPR LdwRoadway::LdwRoadway(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_lane_)*/nullptr
  , /*decltype(_impl_.right_lane_)*/nullptr
  , /*decltype(_impl_.adj_left_lane_)*/nullptr
  , /*decltype(_impl_.adj_right_lane_)*/nullptr
  , /*decltype(_impl_.width_0_)*/0
  , /*decltype(_impl_.width_1_)*/0
  , /*decltype(_impl_.width_2_)*/0
  , /*decltype(_impl_.is_tracking_)*/false} {}
struct LdwRoadwayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LdwRoadwayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LdwRoadwayDefaultTypeInternal() {}
  union {
    LdwRoadway _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LdwRoadwayDefaultTypeInternal _LdwRoadway_default_instance_;
PROTOBUF_CONSTEXPR LdwLensInfo::LdwLensInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_image_focal_)*/0
  , /*decltype(_impl_.y_image_focal_)*/0
  , /*decltype(_impl_.xratio_focal_pixel_)*/0
  , /*decltype(_impl_.yratio_focal_pixel_)*/0
  , /*decltype(_impl_.mountingheight_)*/0
  , /*decltype(_impl_.mcosrx_)*/0
  , /*decltype(_impl_.msinrx_)*/0
  , /*decltype(_impl_.mcosry_)*/0
  , /*decltype(_impl_.msinry_)*/0} {}
struct LdwLensInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LdwLensInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LdwLensInfoDefaultTypeInternal() {}
  union {
    LdwLensInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LdwLensInfoDefaultTypeInternal _LdwLensInfo_default_instance_;
PROTOBUF_CONSTEXPR LdwDataPacks::LdwDataPacks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roadway_)*/nullptr
  , /*decltype(_impl_.lens_)*/nullptr
  , /*decltype(_impl_.softstatus_)*/0
  , /*decltype(_impl_.steerstatus_)*/0} {}
struct LdwDataPacksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LdwDataPacksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LdwDataPacksDefaultTypeInternal() {}
  union {
    LdwDataPacks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LdwDataPacksDefaultTypeInternal _LdwDataPacks_default_instance_;
PROTOBUF_CONSTEXPR OutputObstacle::OutputObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currentspeed_)*/0
  , /*decltype(_impl_.framerate_)*/0
  , /*decltype(_impl_.trackid_)*/0u
  , /*decltype(_impl_.trackframenum_)*/0u
  , /*decltype(_impl_.statelabel_)*/0u
  , /*decltype(_impl_.classlabel_)*/0u
  , /*decltype(_impl_.continuouslabel_)*/0u
  , /*decltype(_impl_.fuzzyestimationvalid_)*/0u
  , /*decltype(_impl_.obstacletype_)*/0
  , /*decltype(_impl_.avgdisp_)*/0
  , /*decltype(_impl_.avgdistancez_)*/0
  , /*decltype(_impl_.neardistancez_)*/0
  , /*decltype(_impl_.fardistancez_)*/0
  , /*decltype(_impl_.real3dleftx_)*/0
  , /*decltype(_impl_.real3drightx_)*/0
  , /*decltype(_impl_.real3dcenterx_)*/0
  , /*decltype(_impl_.real3dupy_)*/0
  , /*decltype(_impl_.real3dlowy_)*/0
  , /*decltype(_impl_.firstpointx_)*/0u
  , /*decltype(_impl_.firstpointy_)*/0u
  , /*decltype(_impl_.secondpointx_)*/0u
  , /*decltype(_impl_.secondpointy_)*/0u
  , /*decltype(_impl_.thirdpointx_)*/0u
  , /*decltype(_impl_.thirdpointy_)*/0u
  , /*decltype(_impl_.fourthpointx_)*/0u
  , /*decltype(_impl_.fourthpointy_)*/0u
  , /*decltype(_impl_.fuzzyrelativedistancez_)*/0
  , /*decltype(_impl_.fuzzyrelativespeedz_)*/0
  , /*decltype(_impl_.fuzzycollisiontimez_)*/0
  , /*decltype(_impl_.fuzzycollisionx_)*/0u
  , /*decltype(_impl_.fuzzy3dwidth_)*/0
  , /*decltype(_impl_.fuzzy3dcenterx_)*/0
  , /*decltype(_impl_.fuzzy3dleftx_)*/0
  , /*decltype(_impl_.fuzzy3drightx_)*/0
  , /*decltype(_impl_.fuzzy3dheight_)*/0
  , /*decltype(_impl_.fuzzy3dupy_)*/0
  , /*decltype(_impl_.fuzzy3dlowy_)*/0
  , /*decltype(_impl_.fuzzyrelativespeedcenterx_)*/0
  , /*decltype(_impl_.fuzzyrelativespeedleftx_)*/0
  , /*decltype(_impl_.fuzzyrelativespeedrightx_)*/0} {}
struct OutputObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputObstacleDefaultTypeInternal() {}
  union {
    OutputObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputObstacleDefaultTypeInternal _OutputObstacle_default_instance_;
PROTOBUF_CONSTEXPR SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SmartereyeObstacles_OutputObstaclesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal _SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SmartereyeObstacles::SmartereyeObstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.output_obstacles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.num_obstacles_)*/0} {}
struct SmartereyeObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartereyeObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartereyeObstaclesDefaultTypeInternal() {}
  union {
    SmartereyeObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartereyeObstaclesDefaultTypeInternal _SmartereyeObstacles_default_instance_;
PROTOBUF_CONSTEXPR SmartereyeLanemark::SmartereyeLanemark(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_road_data_)*/nullptr} {}
struct SmartereyeLanemarkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartereyeLanemarkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartereyeLanemarkDefaultTypeInternal() {}
  union {
    SmartereyeLanemark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartereyeLanemarkDefaultTypeInternal _SmartereyeLanemark_default_instance_;
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fproto_2fsmartereye_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_.degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_.c0_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_.c1_heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_.c2_curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _impl_.c3_curvature_derivative_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_.left_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLane, _impl_.right_boundary_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.width_0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.width_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.width_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.is_tracking_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.left_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.right_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.adj_left_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _impl_.adj_right_lane_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.x_image_focal_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.y_image_focal_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.xratio_focal_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.yratio_focal_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.mountingheight_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.mcosrx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.msinrx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.mcosry_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _impl_.msinry_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _impl_.roadway_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _impl_.softstatus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _impl_.steerstatus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _impl_.lens_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.currentspeed_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.framerate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.trackid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.trackframenum_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.statelabel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.classlabel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.continuouslabel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyestimationvalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.obstacletype_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.avgdisp_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.avgdistancez_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.neardistancez_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fardistancez_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.real3dleftx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.real3drightx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.real3dcenterx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.real3dupy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.real3dlowy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.firstpointx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.firstpointy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.secondpointx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.secondpointy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.thirdpointx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.thirdpointy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fourthpointx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fourthpointy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyrelativedistancez_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyrelativespeedz_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzycollisiontimez_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzycollisionx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dwidth_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dcenterx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dleftx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3drightx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dheight_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dupy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzy3dlowy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyrelativespeedcenterx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyrelativespeedleftx_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _impl_.fuzzyrelativespeedrightx_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _impl_.num_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _impl_.output_obstacles_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, _impl_.lane_road_data_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::drivers::LdwLaneBoundary)},
  { 16, 27, -1, sizeof(::apollo::drivers::LdwLane)},
  { 32, 46, -1, sizeof(::apollo::drivers::LdwRoadway)},
  { 54, 69, -1, sizeof(::apollo::drivers::LdwLensInfo)},
  { 78, 88, -1, sizeof(::apollo::drivers::LdwDataPacks)},
  { 92, 138, -1, sizeof(::apollo::drivers::OutputObstacle)},
  { 178, 186, -1, sizeof(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse)},
  { 188, 197, -1, sizeof(::apollo::drivers::SmartereyeObstacles)},
  { 200, 207, -1, sizeof(::apollo::drivers::SmartereyeLanemark)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::_LdwLaneBoundary_default_instance_._instance,
  &::apollo::drivers::_LdwLane_default_instance_._instance,
  &::apollo::drivers::_LdwRoadway_default_instance_._instance,
  &::apollo::drivers::_LdwLensInfo_default_instance_._instance,
  &::apollo::drivers::_LdwDataPacks_default_instance_._instance,
  &::apollo::drivers::_OutputObstacle_default_instance_._instance,
  &::apollo::drivers::_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_._instance,
  &::apollo::drivers::_SmartereyeObstacles_default_instance_._instance,
  &::apollo::drivers::_SmartereyeLanemark_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fsmartereye_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/drivers/proto/smartereye.proto"
  "\022\016apollo.drivers\032!modules/common/proto/h"
  "eader.proto\"\207\001\n\017LdwLaneBoundary\022\016\n\006degre"
  "e\030\001 \001(\005\022\023\n\013c0_position\030\002 \001(\001\022\030\n\020c1_headi"
  "ng_angle\030\003 \001(\001\022\024\n\014c2_curvature\030\004 \001(\001\022\037\n\027"
  "c3_curvature_derivative\030\005 \001(\001\"\307\001\n\007LdwLan"
  "e\022\r\n\005width\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022+\n\005sty"
  "le\030\003 \001(\0162\034.apollo.drivers.LdwLaneStyle\0226"
  "\n\rleft_boundary\030\004 \001(\0132\037.apollo.drivers.L"
  "dwLaneBoundary\0227\n\016right_boundary\030\005 \001(\0132\037"
  ".apollo.drivers.LdwLaneBoundary\"\216\002\n\nLdwR"
  "oadway\022\017\n\007width_0\030\001 \001(\005\022\017\n\007width_1\030\002 \001(\005"
  "\022\017\n\007width_2\030\003 \001(\005\022\023\n\013is_tracking\030\004 \001(\010\022*"
  "\n\tleft_lane\030\005 \001(\0132\027.apollo.drivers.LdwLa"
  "ne\022+\n\nright_lane\030\006 \001(\0132\027.apollo.drivers."
  "LdwLane\022.\n\radj_left_lane\030\007 \001(\0132\027.apollo."
  "drivers.LdwLane\022/\n\016adj_right_lane\030\010 \001(\0132"
  "\027.apollo.drivers.LdwLane\"\313\001\n\013LdwLensInfo"
  "\022\025\n\rx_image_focal\030\001 \001(\002\022\025\n\ry_image_focal"
  "\030\002 \001(\002\022\032\n\022xratio_focal_pixel\030\003 \001(\002\022\032\n\022yr"
  "atio_focal_pixel\030\004 \001(\002\022\026\n\016mountingheight"
  "\030\005 \001(\002\022\016\n\006mcosrx\030\006 \001(\002\022\016\n\006msinrx\030\007 \001(\002\022\016"
  "\n\006mcosry\030\010 \001(\002\022\016\n\006msinry\030\t \001(\002\"\316\001\n\014LdwDa"
  "taPacks\022+\n\007roadway\030\001 \001(\0132\032.apollo.driver"
  "s.LdwRoadway\0221\n\nsoftstatus\030\002 \001(\0162\035.apoll"
  "o.drivers.LdwSoftStatus\0223\n\013steerstatus\030\003"
  " \001(\0162\036.apollo.drivers.LdwSteerStatus\022)\n\004"
  "lens\030\004 \001(\0132\033.apollo.drivers.LdwLensInfo\""
  "\202\t\n\016OutputObstacle\022\024\n\014currentspeed\030\001 \001(\002"
  "\022\021\n\tframerate\030\002 \001(\002\022\017\n\007trackid\030\003 \001(\r\022\025\n\r"
  "trackframenum\030\004 \001(\r\022\022\n\nstatelabel\030\005 \001(\r\022"
  "\022\n\nclasslabel\030\006 \001(\r\022\027\n\017continuouslabel\030\007"
  " \001(\r\022\034\n\024fuzzyestimationvalid\030\010 \001(\r\022D\n\014ob"
  "stacletype\030\t \001(\0162..apollo.drivers.Output"
  "Obstacle.RecognitionType\022\017\n\007avgdisp\030\n \001("
  "\002\022\024\n\014avgdistancez\030\013 \001(\002\022\025\n\rneardistancez"
  "\030\014 \001(\002\022\024\n\014fardistancez\030\r \001(\002\022\023\n\013real3dle"
  "ftx\030\016 \001(\002\022\024\n\014real3drightx\030\017 \001(\002\022\025\n\rreal3"
  "dcenterx\030\020 \001(\002\022\021\n\treal3dupy\030\021 \001(\002\022\022\n\nrea"
  "l3dlowy\030\022 \001(\002\022\023\n\013firstpointx\030\023 \001(\r\022\023\n\013fi"
  "rstpointy\030\024 \001(\r\022\024\n\014secondpointx\030\025 \001(\r\022\024\n"
  "\014secondpointy\030\026 \001(\r\022\023\n\013thirdpointx\030\027 \001(\r"
  "\022\023\n\013thirdpointy\030\030 \001(\r\022\024\n\014fourthpointx\030\031 "
  "\001(\r\022\024\n\014fourthpointy\030\032 \001(\r\022\036\n\026fuzzyrelati"
  "vedistancez\030\033 \001(\002\022\033\n\023fuzzyrelativespeedz"
  "\030\034 \001(\002\022\033\n\023fuzzycollisiontimez\030\035 \001(\002\022\027\n\017f"
  "uzzycollisionx\030\036 \001(\r\022\024\n\014fuzzy3dwidth\030\037 \001"
  "(\002\022\026\n\016fuzzy3dcenterx\030  \001(\002\022\024\n\014fuzzy3dlef"
  "tx\030! \001(\002\022\025\n\rfuzzy3drightx\030\" \001(\002\022\025\n\rfuzzy"
  "3dheight\030# \001(\002\022\022\n\nfuzzy3dupy\030$ \001(\002\022\023\n\013fu"
  "zzy3dlowy\030% \001(\002\022!\n\031fuzzyrelativespeedcen"
  "terx\030& \001(\002\022\037\n\027fuzzyrelativespeedleftx\030\' "
  "\001(\002\022 \n\030fuzzyrelativespeedrightx\030( \001(\002\"\234\001"
  "\n\017RecognitionType\022\013\n\007INVALID\020\000\022\013\n\007VEHICL"
  "E\020\001\022\016\n\nPEDESTRIAN\020\002\022\t\n\005CHILD\020\003\022\013\n\007BICYCL"
  "E\020\004\022\010\n\004MOTO\020\005\022\t\n\005TRUCK\020\006\022\007\n\003BUS\020\007\022\n\n\006OTH"
  "ERS\020\010\022\r\n\tESTIMATED\020\t\022\016\n\nCONTINUOUS\020\n\"\377\001\n"
  "\023SmartereyeObstacles\022%\n\006header\030\001 \001(\0132\025.a"
  "pollo.common.Header\022\025\n\rnum_obstacles\030\002 \001"
  "(\005\022R\n\020output_obstacles\030\003 \003(\01328.apollo.dr"
  "ivers.SmartereyeObstacles.OutputObstacle"
  "sEntry\032V\n\024OutputObstaclesEntry\022\013\n\003key\030\001 "
  "\001(\r\022-\n\005value\030\002 \001(\0132\036.apollo.drivers.Outp"
  "utObstacle:\0028\001\"J\n\022SmartereyeLanemark\0224\n\016"
  "lane_road_data\030\004 \001(\0132\034.apollo.drivers.Ld"
  "wDataPacks*S\n\013LdwVersions\022\022\n\016LDW_VERSION"
  "_C1\020\000\022\022\n\016LDW_VERSION_C2\020\001\022\034\n\030LDW_VERSION"
  "_FOUR_LANE_C2\020\002*\371\001\n\014LdwLaneStyle\022\034\n\030LDW_"
  "LANE_STYLE_NONE_LANE\020\000\022\037\n\033LDW_LANE_STYLE"
  "_PREDICT_LANE\020\001\022\036\n\032LDW_LANE_STYLE_BROKEN"
  "_LANE\020\002\022\035\n\031LDW_LANE_STYLE_SOLID_LANE\020\003\022%"
  "\n!LDW_LANE_STYLE_DOUBLE_BROKEN_LANE\020\004\022$\n"
  " LDW_LANE_STYLE_DOUBLE_SOLID_LANE\020\005\022\036\n\032L"
  "DW_LANE_STYLE_TRIPLE_LANE\020\006*\232\001\n\016LdwSteer"
  "Status\022\024\n\020LDW_NORMAL_STEER\020\000\022\033\n\027LDW_STEE"
  "R_ON_LEFT__LANE\020\001\022\033\n\027LDW_STEER_ON_RIGHT_"
  "LANE\020\002\022\033\n\027LDW_STEER_WARNING_LEFT_\020\003\022\033\n\027L"
  "DW_STEER_WARNING_RIGHT\020\004*\213\001\n\rLdwSoftStat"
  "us\022\026\n\022LDW_SOFT_DETECTION\020\000\022\032\n\026LDW_SOFT_S"
  "ELF_LEARNING\020\001\022\"\n\036LDW_SOFT_MANUAL_LEARNI"
  "NG_MODE0\020\002\022\"\n\036LDW_SOFT_MANUAL_LEARNING_M"
  "ODE1\020\003*U\n\017LdwWarningGrade\022\023\n\017LDW_WARNING"
  "_LOW\020\000\022\026\n\022LDW_WARNING_NORMAL\020\001\022\025\n\021LDW_WA"
  "RNING_HIGHT\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto = {
    false, false, 3333, descriptor_table_protodef_modules_2fdrivers_2fproto_2fsmartereye_2eproto,
    "modules/drivers/proto/smartereye.proto",
    &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fsmartereye_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fproto_2fsmartereye_2eproto(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
namespace apollo {
namespace drivers {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputObstacle_RecognitionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[0];
}
bool OutputObstacle_RecognitionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OutputObstacle_RecognitionType OutputObstacle::INVALID;
constexpr OutputObstacle_RecognitionType OutputObstacle::VEHICLE;
constexpr OutputObstacle_RecognitionType OutputObstacle::PEDESTRIAN;
constexpr OutputObstacle_RecognitionType OutputObstacle::CHILD;
constexpr OutputObstacle_RecognitionType OutputObstacle::BICYCLE;
constexpr OutputObstacle_RecognitionType OutputObstacle::MOTO;
constexpr OutputObstacle_RecognitionType OutputObstacle::TRUCK;
constexpr OutputObstacle_RecognitionType OutputObstacle::BUS;
constexpr OutputObstacle_RecognitionType OutputObstacle::OTHERS;
constexpr OutputObstacle_RecognitionType OutputObstacle::ESTIMATED;
constexpr OutputObstacle_RecognitionType OutputObstacle::CONTINUOUS;
constexpr OutputObstacle_RecognitionType OutputObstacle::RecognitionType_MIN;
constexpr OutputObstacle_RecognitionType OutputObstacle::RecognitionType_MAX;
constexpr int OutputObstacle::RecognitionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LdwVersions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[1];
}
bool LdwVersions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LdwLaneStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[2];
}
bool LdwLaneStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LdwSteerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[3];
}
bool LdwSteerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LdwSoftStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[4];
}
bool LdwSoftStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LdwWarningGrade_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fsmartereye_2eproto[5];
}
bool LdwWarningGrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LdwLaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LdwLaneBoundary>()._impl_._has_bits_);
  static void set_has_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_c0_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c1_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c2_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c3_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LdwLaneBoundary::LdwLaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.LdwLaneBoundary)
}
LdwLaneBoundary::LdwLaneBoundary(const LdwLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c0_position_){}
    , decltype(_impl_.c1_heading_angle_){}
    , decltype(_impl_.c2_curvature_){}
    , decltype(_impl_.c3_curvature_derivative_){}
    , decltype(_impl_.degree_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.c0_position_, &from._impl_.c0_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degree_) -
    reinterpret_cast<char*>(&_impl_.c0_position_)) + sizeof(_impl_.degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLaneBoundary)
}

inline void LdwLaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c0_position_){0}
    , decltype(_impl_.c1_heading_angle_){0}
    , decltype(_impl_.c2_curvature_){0}
    , decltype(_impl_.c3_curvature_derivative_){0}
    , decltype(_impl_.degree_){0}
  };
}

LdwLaneBoundary::~LdwLaneBoundary() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LdwLaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LdwLaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LdwLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.c0_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degree_) -
        reinterpret_cast<char*>(&_impl_.c0_position_)) + sizeof(_impl_.degree_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LdwLaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 degree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_degree(&has_bits);
          _impl_.degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double c0_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_c0_position(&has_bits);
          _impl_.c0_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c1_heading_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_c1_heading_angle(&has_bits);
          _impl_.c1_heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c2_curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_c2_curvature(&has_bits);
          _impl_.c2_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c3_curvature_derivative = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_c3_curvature_derivative(&has_bits);
          _impl_.c3_curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LdwLaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 degree = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_degree(), target);
  }

  // optional double c0_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_c0_position(), target);
  }

  // optional double c1_heading_angle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_c1_heading_angle(), target);
  }

  // optional double c2_curvature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_c3_curvature_derivative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLaneBoundary)
  return target;
}

size_t LdwLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double c0_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 degree = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LdwLaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LdwLaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LdwLaneBoundary::GetClassData() const { return &_class_data_; }

void LdwLaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LdwLaneBoundary *>(to)->MergeFrom(
      static_cast<const LdwLaneBoundary &>(from));
}


void LdwLaneBoundary::MergeFrom(const LdwLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.c0_position_ = from._impl_.c0_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.c1_heading_angle_ = from._impl_.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.c2_curvature_ = from._impl_.c2_curvature_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.c3_curvature_derivative_ = from._impl_.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.degree_ = from._impl_.degree_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LdwLaneBoundary::CopyFrom(const LdwLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLaneBoundary::IsInitialized() const {
  return true;
}

void LdwLaneBoundary::InternalSwap(LdwLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LdwLaneBoundary, _impl_.degree_)
      + sizeof(LdwLaneBoundary::_impl_.degree_)
      - PROTOBUF_FIELD_OFFSET(LdwLaneBoundary, _impl_.c0_position_)>(
          reinterpret_cast<char*>(&_impl_.c0_position_),
          reinterpret_cast<char*>(&other->_impl_.c0_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LdwLaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[0]);
}

// ===================================================================

class LdwLane::_Internal {
 public:
  using HasBits = decltype(std::declval<LdwLane>()._impl_._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::drivers::LdwLaneBoundary& left_boundary(const LdwLane* msg);
  static void set_has_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::LdwLaneBoundary& right_boundary(const LdwLane* msg);
  static void set_has_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::LdwLaneBoundary&
LdwLane::_Internal::left_boundary(const LdwLane* msg) {
  return *msg->_impl_.left_boundary_;
}
const ::apollo::drivers::LdwLaneBoundary&
LdwLane::_Internal::right_boundary(const LdwLane* msg) {
  return *msg->_impl_.right_boundary_;
}
LdwLane::LdwLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.LdwLane)
}
LdwLane::LdwLane(const LdwLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_boundary_){nullptr}
    , decltype(_impl_.right_boundary_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_boundary()) {
    _impl_.left_boundary_ = new ::apollo::drivers::LdwLaneBoundary(*from._impl_.left_boundary_);
  }
  if (from._internal_has_right_boundary()) {
    _impl_.right_boundary_ = new ::apollo::drivers::LdwLaneBoundary(*from._impl_.right_boundary_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.style_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLane)
}

inline void LdwLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_boundary_){nullptr}
    , decltype(_impl_.right_boundary_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.style_){0}
  };
}

LdwLane::~LdwLane() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LdwLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.left_boundary_;
  if (this != internal_default_instance()) delete _impl_.right_boundary_;
}

void LdwLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LdwLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.left_boundary_ != nullptr);
      _impl_.left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.right_boundary_ != nullptr);
      _impl_.right_boundary_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.style_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.style_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LdwLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLaneStyle style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::LdwLaneStyle_IsValid(val))) {
            _internal_set_style(static_cast<::apollo::drivers::LdwLaneStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LdwLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional .apollo.drivers.LdwLaneStyle style = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_style(), target);
  }

  // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::left_boundary(this),
        _Internal::left_boundary(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::right_boundary(this),
        _Internal::right_boundary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLane)
  return target;
}

size_t LdwLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_boundary_);
    }

    // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_boundary_);
    }

    // optional int32 width = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional .apollo.drivers.LdwLaneStyle style = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LdwLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LdwLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LdwLane::GetClassData() const { return &_class_data_; }

void LdwLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LdwLane *>(to)->MergeFrom(
      static_cast<const LdwLane &>(from));
}


void LdwLane::MergeFrom(const LdwLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_boundary()->::apollo::drivers::LdwLaneBoundary::MergeFrom(from._internal_left_boundary());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_boundary()->::apollo::drivers::LdwLaneBoundary::MergeFrom(from._internal_right_boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.style_ = from._impl_.style_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LdwLane::CopyFrom(const LdwLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLane::IsInitialized() const {
  return true;
}

void LdwLane::InternalSwap(LdwLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LdwLane, _impl_.style_)
      + sizeof(LdwLane::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(LdwLane, _impl_.left_boundary_)>(
          reinterpret_cast<char*>(&_impl_.left_boundary_),
          reinterpret_cast<char*>(&other->_impl_.left_boundary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LdwLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[1]);
}

// ===================================================================

class LdwRoadway::_Internal {
 public:
  using HasBits = decltype(std::declval<LdwRoadway>()._impl_._has_bits_);
  static void set_has_width_0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::drivers::LdwLane& left_lane(const LdwRoadway* msg);
  static void set_has_left_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::LdwLane& right_lane(const LdwRoadway* msg);
  static void set_has_right_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::LdwLane& adj_left_lane(const LdwRoadway* msg);
  static void set_has_adj_left_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::LdwLane& adj_right_lane(const LdwRoadway* msg);
  static void set_has_adj_right_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::drivers::LdwLane&
LdwRoadway::_Internal::left_lane(const LdwRoadway* msg) {
  return *msg->_impl_.left_lane_;
}
const ::apollo::drivers::LdwLane&
LdwRoadway::_Internal::right_lane(const LdwRoadway* msg) {
  return *msg->_impl_.right_lane_;
}
const ::apollo::drivers::LdwLane&
LdwRoadway::_Internal::adj_left_lane(const LdwRoadway* msg) {
  return *msg->_impl_.adj_left_lane_;
}
const ::apollo::drivers::LdwLane&
LdwRoadway::_Internal::adj_right_lane(const LdwRoadway* msg) {
  return *msg->_impl_.adj_right_lane_;
}
LdwRoadway::LdwRoadway(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.LdwRoadway)
}
LdwRoadway::LdwRoadway(const LdwRoadway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_lane_){nullptr}
    , decltype(_impl_.right_lane_){nullptr}
    , decltype(_impl_.adj_left_lane_){nullptr}
    , decltype(_impl_.adj_right_lane_){nullptr}
    , decltype(_impl_.width_0_){}
    , decltype(_impl_.width_1_){}
    , decltype(_impl_.width_2_){}
    , decltype(_impl_.is_tracking_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_lane()) {
    _impl_.left_lane_ = new ::apollo::drivers::LdwLane(*from._impl_.left_lane_);
  }
  if (from._internal_has_right_lane()) {
    _impl_.right_lane_ = new ::apollo::drivers::LdwLane(*from._impl_.right_lane_);
  }
  if (from._internal_has_adj_left_lane()) {
    _impl_.adj_left_lane_ = new ::apollo::drivers::LdwLane(*from._impl_.adj_left_lane_);
  }
  if (from._internal_has_adj_right_lane()) {
    _impl_.adj_right_lane_ = new ::apollo::drivers::LdwLane(*from._impl_.adj_right_lane_);
  }
  ::memcpy(&_impl_.width_0_, &from._impl_.width_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_tracking_) -
    reinterpret_cast<char*>(&_impl_.width_0_)) + sizeof(_impl_.is_tracking_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwRoadway)
}

inline void LdwRoadway::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_lane_){nullptr}
    , decltype(_impl_.right_lane_){nullptr}
    , decltype(_impl_.adj_left_lane_){nullptr}
    , decltype(_impl_.adj_right_lane_){nullptr}
    , decltype(_impl_.width_0_){0}
    , decltype(_impl_.width_1_){0}
    , decltype(_impl_.width_2_){0}
    , decltype(_impl_.is_tracking_){false}
  };
}

LdwRoadway::~LdwRoadway() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwRoadway)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LdwRoadway::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.left_lane_;
  if (this != internal_default_instance()) delete _impl_.right_lane_;
  if (this != internal_default_instance()) delete _impl_.adj_left_lane_;
  if (this != internal_default_instance()) delete _impl_.adj_right_lane_;
}

void LdwRoadway::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LdwRoadway::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwRoadway)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.left_lane_ != nullptr);
      _impl_.left_lane_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.right_lane_ != nullptr);
      _impl_.right_lane_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.adj_left_lane_ != nullptr);
      _impl_.adj_left_lane_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.adj_right_lane_ != nullptr);
      _impl_.adj_right_lane_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.width_0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_tracking_) -
        reinterpret_cast<char*>(&_impl_.width_0_)) + sizeof(_impl_.is_tracking_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LdwRoadway::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width_0(&has_bits);
          _impl_.width_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width_1(&has_bits);
          _impl_.width_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width_2(&has_bits);
          _impl_.width_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_tracking = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_tracking(&has_bits);
          _impl_.is_tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLane left_lane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLane right_lane = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLane adj_left_lane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adj_left_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLane adj_right_lane = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_adj_right_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LdwRoadway::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwRoadway)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 width_0 = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width_0(), target);
  }

  // optional int32 width_1 = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width_1(), target);
  }

  // optional int32 width_2 = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width_2(), target);
  }

  // optional bool is_tracking = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_tracking(), target);
  }

  // optional .apollo.drivers.LdwLane left_lane = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::left_lane(this),
        _Internal::left_lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.LdwLane right_lane = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::right_lane(this),
        _Internal::right_lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.LdwLane adj_left_lane = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::adj_left_lane(this),
        _Internal::adj_left_lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.LdwLane adj_right_lane = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::adj_right_lane(this),
        _Internal::adj_right_lane(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwRoadway)
  return target;
}

size_t LdwRoadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwRoadway)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.LdwLane left_lane = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_lane_);
    }

    // optional .apollo.drivers.LdwLane right_lane = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_lane_);
    }

    // optional .apollo.drivers.LdwLane adj_left_lane = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adj_left_lane_);
    }

    // optional .apollo.drivers.LdwLane adj_right_lane = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adj_right_lane_);
    }

    // optional int32 width_0 = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_0());
    }

    // optional int32 width_1 = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_1());
    }

    // optional int32 width_2 = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_2());
    }

    // optional bool is_tracking = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LdwRoadway::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LdwRoadway::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LdwRoadway::GetClassData() const { return &_class_data_; }

void LdwRoadway::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LdwRoadway *>(to)->MergeFrom(
      static_cast<const LdwRoadway &>(from));
}


void LdwRoadway::MergeFrom(const LdwRoadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwRoadway)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_lane()->::apollo::drivers::LdwLane::MergeFrom(from._internal_left_lane());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_lane()->::apollo::drivers::LdwLane::MergeFrom(from._internal_right_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_adj_left_lane()->::apollo::drivers::LdwLane::MergeFrom(from._internal_adj_left_lane());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_adj_right_lane()->::apollo::drivers::LdwLane::MergeFrom(from._internal_adj_right_lane());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.width_0_ = from._impl_.width_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.width_1_ = from._impl_.width_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.width_2_ = from._impl_.width_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.is_tracking_ = from._impl_.is_tracking_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LdwRoadway::CopyFrom(const LdwRoadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwRoadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwRoadway::IsInitialized() const {
  return true;
}

void LdwRoadway::InternalSwap(LdwRoadway* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LdwRoadway, _impl_.is_tracking_)
      + sizeof(LdwRoadway::_impl_.is_tracking_)
      - PROTOBUF_FIELD_OFFSET(LdwRoadway, _impl_.left_lane_)>(
          reinterpret_cast<char*>(&_impl_.left_lane_),
          reinterpret_cast<char*>(&other->_impl_.left_lane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LdwRoadway::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[2]);
}

// ===================================================================

class LdwLensInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LdwLensInfo>()._impl_._has_bits_);
  static void set_has_x_image_focal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_image_focal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xratio_focal_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yratio_focal_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mountingheight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mcosrx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msinrx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mcosry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msinry(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

LdwLensInfo::LdwLensInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.LdwLensInfo)
}
LdwLensInfo::LdwLensInfo(const LdwLensInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_image_focal_){}
    , decltype(_impl_.y_image_focal_){}
    , decltype(_impl_.xratio_focal_pixel_){}
    , decltype(_impl_.yratio_focal_pixel_){}
    , decltype(_impl_.mountingheight_){}
    , decltype(_impl_.mcosrx_){}
    , decltype(_impl_.msinrx_){}
    , decltype(_impl_.mcosry_){}
    , decltype(_impl_.msinry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_image_focal_, &from._impl_.x_image_focal_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msinry_) -
    reinterpret_cast<char*>(&_impl_.x_image_focal_)) + sizeof(_impl_.msinry_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLensInfo)
}

inline void LdwLensInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_image_focal_){0}
    , decltype(_impl_.y_image_focal_){0}
    , decltype(_impl_.xratio_focal_pixel_){0}
    , decltype(_impl_.yratio_focal_pixel_){0}
    , decltype(_impl_.mountingheight_){0}
    , decltype(_impl_.mcosrx_){0}
    , decltype(_impl_.msinrx_){0}
    , decltype(_impl_.mcosry_){0}
    , decltype(_impl_.msinry_){0}
  };
}

LdwLensInfo::~LdwLensInfo() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLensInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LdwLensInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LdwLensInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LdwLensInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLensInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.x_image_focal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mcosry_) -
        reinterpret_cast<char*>(&_impl_.x_image_focal_)) + sizeof(_impl_.mcosry_));
  }
  _impl_.msinry_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LdwLensInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x_image_focal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x_image_focal(&has_bits);
          _impl_.x_image_focal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_image_focal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y_image_focal(&has_bits);
          _impl_.y_image_focal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xratio_focal_pixel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_xratio_focal_pixel(&has_bits);
          _impl_.xratio_focal_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yratio_focal_pixel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_yratio_focal_pixel(&has_bits);
          _impl_.yratio_focal_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mountingheight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_mountingheight(&has_bits);
          _impl_.mountingheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mcosrx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_mcosrx(&has_bits);
          _impl_.mcosrx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float msinrx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_msinrx(&has_bits);
          _impl_.msinrx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mcosry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_mcosry(&has_bits);
          _impl_.mcosry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float msinry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_msinry(&has_bits);
          _impl_.msinry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LdwLensInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLensInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x_image_focal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x_image_focal(), target);
  }

  // optional float y_image_focal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y_image_focal(), target);
  }

  // optional float xratio_focal_pixel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xratio_focal_pixel(), target);
  }

  // optional float yratio_focal_pixel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yratio_focal_pixel(), target);
  }

  // optional float mountingheight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_mountingheight(), target);
  }

  // optional float mcosrx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_mcosrx(), target);
  }

  // optional float msinrx = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_msinrx(), target);
  }

  // optional float mcosry = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_mcosry(), target);
  }

  // optional float msinry = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_msinry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLensInfo)
  return target;
}

size_t LdwLensInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLensInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float x_image_focal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y_image_focal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float xratio_focal_pixel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yratio_focal_pixel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float mountingheight = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float mcosrx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float msinrx = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float mcosry = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float msinry = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LdwLensInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LdwLensInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LdwLensInfo::GetClassData() const { return &_class_data_; }

void LdwLensInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LdwLensInfo *>(to)->MergeFrom(
      static_cast<const LdwLensInfo &>(from));
}


void LdwLensInfo::MergeFrom(const LdwLensInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLensInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_image_focal_ = from._impl_.x_image_focal_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_image_focal_ = from._impl_.y_image_focal_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.xratio_focal_pixel_ = from._impl_.xratio_focal_pixel_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.yratio_focal_pixel_ = from._impl_.yratio_focal_pixel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mountingheight_ = from._impl_.mountingheight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mcosrx_ = from._impl_.mcosrx_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.msinrx_ = from._impl_.msinrx_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.mcosry_ = from._impl_.mcosry_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_msinry(from._internal_msinry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LdwLensInfo::CopyFrom(const LdwLensInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLensInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLensInfo::IsInitialized() const {
  return true;
}

void LdwLensInfo::InternalSwap(LdwLensInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LdwLensInfo, _impl_.msinry_)
      + sizeof(LdwLensInfo::_impl_.msinry_)
      - PROTOBUF_FIELD_OFFSET(LdwLensInfo, _impl_.x_image_focal_)>(
          reinterpret_cast<char*>(&_impl_.x_image_focal_),
          reinterpret_cast<char*>(&other->_impl_.x_image_focal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LdwLensInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[3]);
}

// ===================================================================

class LdwDataPacks::_Internal {
 public:
  using HasBits = decltype(std::declval<LdwDataPacks>()._impl_._has_bits_);
  static const ::apollo::drivers::LdwRoadway& roadway(const LdwDataPacks* msg);
  static void set_has_roadway(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_softstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steerstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::LdwLensInfo& lens(const LdwDataPacks* msg);
  static void set_has_lens(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::LdwRoadway&
LdwDataPacks::_Internal::roadway(const LdwDataPacks* msg) {
  return *msg->_impl_.roadway_;
}
const ::apollo::drivers::LdwLensInfo&
LdwDataPacks::_Internal::lens(const LdwDataPacks* msg) {
  return *msg->_impl_.lens_;
}
LdwDataPacks::LdwDataPacks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.LdwDataPacks)
}
LdwDataPacks::LdwDataPacks(const LdwDataPacks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roadway_){nullptr}
    , decltype(_impl_.lens_){nullptr}
    , decltype(_impl_.softstatus_){}
    , decltype(_impl_.steerstatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roadway()) {
    _impl_.roadway_ = new ::apollo::drivers::LdwRoadway(*from._impl_.roadway_);
  }
  if (from._internal_has_lens()) {
    _impl_.lens_ = new ::apollo::drivers::LdwLensInfo(*from._impl_.lens_);
  }
  ::memcpy(&_impl_.softstatus_, &from._impl_.softstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steerstatus_) -
    reinterpret_cast<char*>(&_impl_.softstatus_)) + sizeof(_impl_.steerstatus_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwDataPacks)
}

inline void LdwDataPacks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roadway_){nullptr}
    , decltype(_impl_.lens_){nullptr}
    , decltype(_impl_.softstatus_){0}
    , decltype(_impl_.steerstatus_){0}
  };
}

LdwDataPacks::~LdwDataPacks() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwDataPacks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LdwDataPacks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.roadway_;
  if (this != internal_default_instance()) delete _impl_.lens_;
}

void LdwDataPacks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LdwDataPacks::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwDataPacks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.roadway_ != nullptr);
      _impl_.roadway_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lens_ != nullptr);
      _impl_.lens_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.softstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steerstatus_) -
        reinterpret_cast<char*>(&_impl_.softstatus_)) + sizeof(_impl_.steerstatus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LdwDataPacks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.LdwRoadway roadway = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadway(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::LdwSoftStatus_IsValid(val))) {
            _internal_set_softstatus(static_cast<::apollo::drivers::LdwSoftStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::LdwSteerStatus_IsValid(val))) {
            _internal_set_steerstatus(static_cast<::apollo::drivers::LdwSteerStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.LdwLensInfo lens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lens(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LdwDataPacks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwDataPacks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.LdwRoadway roadway = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::roadway(this),
        _Internal::roadway(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_softstatus(), target);
  }

  // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_steerstatus(), target);
  }

  // optional .apollo.drivers.LdwLensInfo lens = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lens(this),
        _Internal::lens(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwDataPacks)
  return target;
}

size_t LdwDataPacks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwDataPacks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.drivers.LdwRoadway roadway = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roadway_);
    }

    // optional .apollo.drivers.LdwLensInfo lens = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lens_);
    }

    // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_softstatus());
    }

    // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_steerstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LdwDataPacks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LdwDataPacks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LdwDataPacks::GetClassData() const { return &_class_data_; }

void LdwDataPacks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LdwDataPacks *>(to)->MergeFrom(
      static_cast<const LdwDataPacks &>(from));
}


void LdwDataPacks::MergeFrom(const LdwDataPacks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwDataPacks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roadway()->::apollo::drivers::LdwRoadway::MergeFrom(from._internal_roadway());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lens()->::apollo::drivers::LdwLensInfo::MergeFrom(from._internal_lens());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.softstatus_ = from._impl_.softstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.steerstatus_ = from._impl_.steerstatus_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LdwDataPacks::CopyFrom(const LdwDataPacks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwDataPacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwDataPacks::IsInitialized() const {
  return true;
}

void LdwDataPacks::InternalSwap(LdwDataPacks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LdwDataPacks, _impl_.steerstatus_)
      + sizeof(LdwDataPacks::_impl_.steerstatus_)
      - PROTOBUF_FIELD_OFFSET(LdwDataPacks, _impl_.roadway_)>(
          reinterpret_cast<char*>(&_impl_.roadway_),
          reinterpret_cast<char*>(&other->_impl_.roadway_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LdwDataPacks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[4]);
}

// ===================================================================

class OutputObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputObstacle>()._impl_._has_bits_);
  static void set_has_currentspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_framerate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trackid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trackframenum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_statelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_classlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_continuouslabel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fuzzyestimationvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obstacletype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_avgdisp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_avgdistancez(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_neardistancez(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fardistancez(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_real3dleftx(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_real3drightx(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_real3dcenterx(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_real3dupy(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_real3dlowy(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_firstpointx(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_firstpointy(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_secondpointx(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_secondpointy(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_thirdpointx(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_thirdpointy(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fourthpointx(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fourthpointy(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fuzzyrelativedistancez(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_fuzzyrelativespeedz(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_fuzzycollisiontimez(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_fuzzycollisionx(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_fuzzy3dwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_fuzzy3dcenterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fuzzy3dleftx(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_fuzzy3drightx(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_fuzzy3dheight(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_fuzzy3dupy(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_fuzzy3dlowy(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_fuzzyrelativespeedcenterx(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_fuzzyrelativespeedleftx(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_fuzzyrelativespeedrightx(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
};

OutputObstacle::OutputObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.OutputObstacle)
}
OutputObstacle::OutputObstacle(const OutputObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentspeed_){}
    , decltype(_impl_.framerate_){}
    , decltype(_impl_.trackid_){}
    , decltype(_impl_.trackframenum_){}
    , decltype(_impl_.statelabel_){}
    , decltype(_impl_.classlabel_){}
    , decltype(_impl_.continuouslabel_){}
    , decltype(_impl_.fuzzyestimationvalid_){}
    , decltype(_impl_.obstacletype_){}
    , decltype(_impl_.avgdisp_){}
    , decltype(_impl_.avgdistancez_){}
    , decltype(_impl_.neardistancez_){}
    , decltype(_impl_.fardistancez_){}
    , decltype(_impl_.real3dleftx_){}
    , decltype(_impl_.real3drightx_){}
    , decltype(_impl_.real3dcenterx_){}
    , decltype(_impl_.real3dupy_){}
    , decltype(_impl_.real3dlowy_){}
    , decltype(_impl_.firstpointx_){}
    , decltype(_impl_.firstpointy_){}
    , decltype(_impl_.secondpointx_){}
    , decltype(_impl_.secondpointy_){}
    , decltype(_impl_.thirdpointx_){}
    , decltype(_impl_.thirdpointy_){}
    , decltype(_impl_.fourthpointx_){}
    , decltype(_impl_.fourthpointy_){}
    , decltype(_impl_.fuzzyrelativedistancez_){}
    , decltype(_impl_.fuzzyrelativespeedz_){}
    , decltype(_impl_.fuzzycollisiontimez_){}
    , decltype(_impl_.fuzzycollisionx_){}
    , decltype(_impl_.fuzzy3dwidth_){}
    , decltype(_impl_.fuzzy3dcenterx_){}
    , decltype(_impl_.fuzzy3dleftx_){}
    , decltype(_impl_.fuzzy3drightx_){}
    , decltype(_impl_.fuzzy3dheight_){}
    , decltype(_impl_.fuzzy3dupy_){}
    , decltype(_impl_.fuzzy3dlowy_){}
    , decltype(_impl_.fuzzyrelativespeedcenterx_){}
    , decltype(_impl_.fuzzyrelativespeedleftx_){}
    , decltype(_impl_.fuzzyrelativespeedrightx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.currentspeed_, &from._impl_.currentspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuzzyrelativespeedrightx_) -
    reinterpret_cast<char*>(&_impl_.currentspeed_)) + sizeof(_impl_.fuzzyrelativespeedrightx_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.OutputObstacle)
}

inline void OutputObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentspeed_){0}
    , decltype(_impl_.framerate_){0}
    , decltype(_impl_.trackid_){0u}
    , decltype(_impl_.trackframenum_){0u}
    , decltype(_impl_.statelabel_){0u}
    , decltype(_impl_.classlabel_){0u}
    , decltype(_impl_.continuouslabel_){0u}
    , decltype(_impl_.fuzzyestimationvalid_){0u}
    , decltype(_impl_.obstacletype_){0}
    , decltype(_impl_.avgdisp_){0}
    , decltype(_impl_.avgdistancez_){0}
    , decltype(_impl_.neardistancez_){0}
    , decltype(_impl_.fardistancez_){0}
    , decltype(_impl_.real3dleftx_){0}
    , decltype(_impl_.real3drightx_){0}
    , decltype(_impl_.real3dcenterx_){0}
    , decltype(_impl_.real3dupy_){0}
    , decltype(_impl_.real3dlowy_){0}
    , decltype(_impl_.firstpointx_){0u}
    , decltype(_impl_.firstpointy_){0u}
    , decltype(_impl_.secondpointx_){0u}
    , decltype(_impl_.secondpointy_){0u}
    , decltype(_impl_.thirdpointx_){0u}
    , decltype(_impl_.thirdpointy_){0u}
    , decltype(_impl_.fourthpointx_){0u}
    , decltype(_impl_.fourthpointy_){0u}
    , decltype(_impl_.fuzzyrelativedistancez_){0}
    , decltype(_impl_.fuzzyrelativespeedz_){0}
    , decltype(_impl_.fuzzycollisiontimez_){0}
    , decltype(_impl_.fuzzycollisionx_){0u}
    , decltype(_impl_.fuzzy3dwidth_){0}
    , decltype(_impl_.fuzzy3dcenterx_){0}
    , decltype(_impl_.fuzzy3dleftx_){0}
    , decltype(_impl_.fuzzy3drightx_){0}
    , decltype(_impl_.fuzzy3dheight_){0}
    , decltype(_impl_.fuzzy3dupy_){0}
    , decltype(_impl_.fuzzy3dlowy_){0}
    , decltype(_impl_.fuzzyrelativespeedcenterx_){0}
    , decltype(_impl_.fuzzyrelativespeedleftx_){0}
    , decltype(_impl_.fuzzyrelativespeedrightx_){0}
  };
}

OutputObstacle::~OutputObstacle() {
  // @@protoc_insertion_point(destructor:apollo.drivers.OutputObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutputObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.OutputObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.currentspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fuzzyestimationvalid_) -
        reinterpret_cast<char*>(&_impl_.currentspeed_)) + sizeof(_impl_.fuzzyestimationvalid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.obstacletype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.real3dcenterx_) -
        reinterpret_cast<char*>(&_impl_.obstacletype_)) + sizeof(_impl_.real3dcenterx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.real3dupy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.thirdpointy_) -
        reinterpret_cast<char*>(&_impl_.real3dupy_)) + sizeof(_impl_.thirdpointy_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.fourthpointx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fuzzy3dcenterx_) -
        reinterpret_cast<char*>(&_impl_.fourthpointx_)) + sizeof(_impl_.fuzzy3dcenterx_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.fuzzy3dleftx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fuzzyrelativespeedrightx_) -
        reinterpret_cast<char*>(&_impl_.fuzzy3dleftx_)) + sizeof(_impl_.fuzzyrelativespeedrightx_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float currentspeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_currentspeed(&_impl_._has_bits_);
          _impl_.currentspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float framerate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_framerate(&_impl_._has_bits_);
          _impl_.framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trackid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trackid(&_impl_._has_bits_);
          _impl_.trackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trackframenum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_trackframenum(&_impl_._has_bits_);
          _impl_.trackframenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 statelabel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_statelabel(&_impl_._has_bits_);
          _impl_.statelabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 classlabel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_classlabel(&_impl_._has_bits_);
          _impl_.classlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 continuouslabel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_continuouslabel(&_impl_._has_bits_);
          _impl_.continuouslabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fuzzyestimationvalid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_fuzzyestimationvalid(&_impl_._has_bits_);
          _impl_.fuzzyestimationvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::OutputObstacle_RecognitionType_IsValid(val))) {
            _internal_set_obstacletype(static_cast<::apollo::drivers::OutputObstacle_RecognitionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float avgdisp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_avgdisp(&_impl_._has_bits_);
          _impl_.avgdisp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avgdistancez = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_avgdistancez(&_impl_._has_bits_);
          _impl_.avgdistancez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float neardistancez = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_neardistancez(&_impl_._has_bits_);
          _impl_.neardistancez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fardistancez = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_fardistancez(&_impl_._has_bits_);
          _impl_.fardistancez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float real3dleftx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_real3dleftx(&_impl_._has_bits_);
          _impl_.real3dleftx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float real3drightx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_real3drightx(&_impl_._has_bits_);
          _impl_.real3drightx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float real3dcenterx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_real3dcenterx(&_impl_._has_bits_);
          _impl_.real3dcenterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float real3dupy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_real3dupy(&_impl_._has_bits_);
          _impl_.real3dupy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float real3dlowy = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_real3dlowy(&_impl_._has_bits_);
          _impl_.real3dlowy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstpointx = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_firstpointx(&_impl_._has_bits_);
          _impl_.firstpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstpointy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_firstpointy(&_impl_._has_bits_);
          _impl_.firstpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secondpointx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_secondpointx(&_impl_._has_bits_);
          _impl_.secondpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secondpointy = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_secondpointy(&_impl_._has_bits_);
          _impl_.secondpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thirdpointx = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_thirdpointx(&_impl_._has_bits_);
          _impl_.thirdpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thirdpointy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_thirdpointy(&_impl_._has_bits_);
          _impl_.thirdpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fourthpointx = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_fourthpointx(&_impl_._has_bits_);
          _impl_.fourthpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fourthpointy = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_fourthpointy(&_impl_._has_bits_);
          _impl_.fourthpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzyrelativedistancez = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_fuzzyrelativedistancez(&_impl_._has_bits_);
          _impl_.fuzzyrelativedistancez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzyrelativespeedz = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_fuzzyrelativespeedz(&_impl_._has_bits_);
          _impl_.fuzzyrelativespeedz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzycollisiontimez = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_fuzzycollisiontimez(&_impl_._has_bits_);
          _impl_.fuzzycollisiontimez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fuzzycollisionx = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_fuzzycollisionx(&_impl_._has_bits_);
          _impl_.fuzzycollisionx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dwidth = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_fuzzy3dwidth(&_impl_._has_bits_);
          _impl_.fuzzy3dwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dcenterx = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_fuzzy3dcenterx(&_impl_._has_bits_);
          _impl_.fuzzy3dcenterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dleftx = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_fuzzy3dleftx(&_impl_._has_bits_);
          _impl_.fuzzy3dleftx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3drightx = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_fuzzy3drightx(&_impl_._has_bits_);
          _impl_.fuzzy3drightx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dheight = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_fuzzy3dheight(&_impl_._has_bits_);
          _impl_.fuzzy3dheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dupy = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_fuzzy3dupy(&_impl_._has_bits_);
          _impl_.fuzzy3dupy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzy3dlowy = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_fuzzy3dlowy(&_impl_._has_bits_);
          _impl_.fuzzy3dlowy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzyrelativespeedcenterx = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_fuzzyrelativespeedcenterx(&_impl_._has_bits_);
          _impl_.fuzzyrelativespeedcenterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzyrelativespeedleftx = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_fuzzyrelativespeedleftx(&_impl_._has_bits_);
          _impl_.fuzzyrelativespeedleftx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fuzzyrelativespeedrightx = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_fuzzyrelativespeedrightx(&_impl_._has_bits_);
          _impl_.fuzzyrelativespeedrightx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.OutputObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float currentspeed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_currentspeed(), target);
  }

  // optional float framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_framerate(), target);
  }

  // optional uint32 trackid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trackid(), target);
  }

  // optional uint32 trackframenum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_trackframenum(), target);
  }

  // optional uint32 statelabel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_statelabel(), target);
  }

  // optional uint32 classlabel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_classlabel(), target);
  }

  // optional uint32 continuouslabel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_continuouslabel(), target);
  }

  // optional uint32 fuzzyestimationvalid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fuzzyestimationvalid(), target);
  }

  // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_obstacletype(), target);
  }

  // optional float avgdisp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_avgdisp(), target);
  }

  // optional float avgdistancez = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_avgdistancez(), target);
  }

  // optional float neardistancez = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_neardistancez(), target);
  }

  // optional float fardistancez = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_fardistancez(), target);
  }

  // optional float real3dleftx = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_real3dleftx(), target);
  }

  // optional float real3drightx = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_real3drightx(), target);
  }

  // optional float real3dcenterx = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_real3dcenterx(), target);
  }

  // optional float real3dupy = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_real3dupy(), target);
  }

  // optional float real3dlowy = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_real3dlowy(), target);
  }

  // optional uint32 firstpointx = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_firstpointx(), target);
  }

  // optional uint32 firstpointy = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_firstpointy(), target);
  }

  // optional uint32 secondpointx = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_secondpointx(), target);
  }

  // optional uint32 secondpointy = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_secondpointy(), target);
  }

  // optional uint32 thirdpointx = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_thirdpointx(), target);
  }

  // optional uint32 thirdpointy = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_thirdpointy(), target);
  }

  // optional uint32 fourthpointx = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_fourthpointx(), target);
  }

  // optional uint32 fourthpointy = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_fourthpointy(), target);
  }

  // optional float fuzzyrelativedistancez = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_fuzzyrelativedistancez(), target);
  }

  // optional float fuzzyrelativespeedz = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_fuzzyrelativespeedz(), target);
  }

  // optional float fuzzycollisiontimez = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_fuzzycollisiontimez(), target);
  }

  // optional uint32 fuzzycollisionx = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_fuzzycollisionx(), target);
  }

  // optional float fuzzy3dwidth = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_fuzzy3dwidth(), target);
  }

  // optional float fuzzy3dcenterx = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_fuzzy3dcenterx(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float fuzzy3dleftx = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_fuzzy3dleftx(), target);
  }

  // optional float fuzzy3drightx = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_fuzzy3drightx(), target);
  }

  // optional float fuzzy3dheight = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_fuzzy3dheight(), target);
  }

  // optional float fuzzy3dupy = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_fuzzy3dupy(), target);
  }

  // optional float fuzzy3dlowy = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_fuzzy3dlowy(), target);
  }

  // optional float fuzzyrelativespeedcenterx = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_fuzzyrelativespeedcenterx(), target);
  }

  // optional float fuzzyrelativespeedleftx = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(39, this->_internal_fuzzyrelativespeedleftx(), target);
  }

  // optional float fuzzyrelativespeedrightx = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_fuzzyrelativespeedrightx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.OutputObstacle)
  return target;
}

size_t OutputObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.OutputObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float currentspeed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float framerate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 trackid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trackid());
    }

    // optional uint32 trackframenum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trackframenum());
    }

    // optional uint32 statelabel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statelabel());
    }

    // optional uint32 classlabel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_classlabel());
    }

    // optional uint32 continuouslabel = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_continuouslabel());
    }

    // optional uint32 fuzzyestimationvalid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fuzzyestimationvalid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_obstacletype());
    }

    // optional float avgdisp = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float avgdistancez = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float neardistancez = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float fardistancez = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float real3dleftx = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float real3drightx = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float real3dcenterx = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float real3dupy = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float real3dlowy = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 firstpointx = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_firstpointx());
    }

    // optional uint32 firstpointy = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_firstpointy());
    }

    // optional uint32 secondpointx = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_secondpointx());
    }

    // optional uint32 secondpointy = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_secondpointy());
    }

    // optional uint32 thirdpointx = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thirdpointx());
    }

    // optional uint32 thirdpointy = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thirdpointy());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 fourthpointx = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_fourthpointx());
    }

    // optional uint32 fourthpointy = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_fourthpointy());
    }

    // optional float fuzzyrelativedistancez = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedz = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float fuzzycollisiontimez = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 fuzzycollisionx = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_fuzzycollisionx());
    }

    // optional float fuzzy3dwidth = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dcenterx = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float fuzzy3dleftx = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3drightx = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dheight = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dupy = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dlowy = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedcenterx = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedleftx = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedrightx = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputObstacle::GetClassData() const { return &_class_data_; }

void OutputObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputObstacle *>(to)->MergeFrom(
      static_cast<const OutputObstacle &>(from));
}


void OutputObstacle::MergeFrom(const OutputObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.OutputObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currentspeed_ = from._impl_.currentspeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.framerate_ = from._impl_.framerate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.trackid_ = from._impl_.trackid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.trackframenum_ = from._impl_.trackframenum_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.statelabel_ = from._impl_.statelabel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.classlabel_ = from._impl_.classlabel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.continuouslabel_ = from._impl_.continuouslabel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.fuzzyestimationvalid_ = from._impl_.fuzzyestimationvalid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.obstacletype_ = from._impl_.obstacletype_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.avgdisp_ = from._impl_.avgdisp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.avgdistancez_ = from._impl_.avgdistancez_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.neardistancez_ = from._impl_.neardistancez_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.fardistancez_ = from._impl_.fardistancez_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.real3dleftx_ = from._impl_.real3dleftx_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.real3drightx_ = from._impl_.real3drightx_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.real3dcenterx_ = from._impl_.real3dcenterx_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.real3dupy_ = from._impl_.real3dupy_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.real3dlowy_ = from._impl_.real3dlowy_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.firstpointx_ = from._impl_.firstpointx_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.firstpointy_ = from._impl_.firstpointy_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.secondpointx_ = from._impl_.secondpointx_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.secondpointy_ = from._impl_.secondpointy_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.thirdpointx_ = from._impl_.thirdpointx_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.thirdpointy_ = from._impl_.thirdpointy_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.fourthpointx_ = from._impl_.fourthpointx_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.fourthpointy_ = from._impl_.fourthpointy_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.fuzzyrelativedistancez_ = from._impl_.fuzzyrelativedistancez_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.fuzzyrelativespeedz_ = from._impl_.fuzzyrelativespeedz_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.fuzzycollisiontimez_ = from._impl_.fuzzycollisiontimez_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.fuzzycollisionx_ = from._impl_.fuzzycollisionx_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.fuzzy3dwidth_ = from._impl_.fuzzy3dwidth_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.fuzzy3dcenterx_ = from._impl_.fuzzy3dcenterx_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fuzzy3dleftx_ = from._impl_.fuzzy3dleftx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fuzzy3drightx_ = from._impl_.fuzzy3drightx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fuzzy3dheight_ = from._impl_.fuzzy3dheight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fuzzy3dupy_ = from._impl_.fuzzy3dupy_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.fuzzy3dlowy_ = from._impl_.fuzzy3dlowy_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.fuzzyrelativespeedcenterx_ = from._impl_.fuzzyrelativespeedcenterx_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.fuzzyrelativespeedleftx_ = from._impl_.fuzzyrelativespeedleftx_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.fuzzyrelativespeedrightx_ = from._impl_.fuzzyrelativespeedrightx_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputObstacle::CopyFrom(const OutputObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.OutputObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputObstacle::IsInitialized() const {
  return true;
}

void OutputObstacle::InternalSwap(OutputObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputObstacle, _impl_.fuzzyrelativespeedrightx_)
      + sizeof(OutputObstacle::_impl_.fuzzyrelativespeedrightx_)
      - PROTOBUF_FIELD_OFFSET(OutputObstacle, _impl_.currentspeed_)>(
          reinterpret_cast<char*>(&_impl_.currentspeed_),
          reinterpret_cast<char*>(&other->_impl_.currentspeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[5]);
}

// ===================================================================

SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse() {}
SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::MergeFrom(const SmartereyeObstacles_OutputObstaclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[6]);
}

// ===================================================================

class SmartereyeObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartereyeObstacles>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const SmartereyeObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
SmartereyeObstacles::_Internal::header(const SmartereyeObstacles* msg) {
  return *msg->_impl_.header_;
}
void SmartereyeObstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SmartereyeObstacles::SmartereyeObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SmartereyeObstacles::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.SmartereyeObstacles)
}
SmartereyeObstacles::SmartereyeObstacles(const SmartereyeObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.output_obstacles_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.num_obstacles_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_obstacles_.MergeFrom(from._impl_.output_obstacles_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.num_obstacles_ = from._impl_.num_obstacles_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.SmartereyeObstacles)
}

inline void SmartereyeObstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.output_obstacles_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.num_obstacles_){0}
  };
}

SmartereyeObstacles::~SmartereyeObstacles() {
  // @@protoc_insertion_point(destructor:apollo.drivers.SmartereyeObstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SmartereyeObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_obstacles_.Destruct();
  _impl_.output_obstacles_.~MapField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void SmartereyeObstacles::ArenaDtor(void* object) {
  SmartereyeObstacles* _this = reinterpret_cast< SmartereyeObstacles* >(object);
  _this->_impl_.output_obstacles_.Destruct();
}
void SmartereyeObstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartereyeObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.SmartereyeObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_obstacles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.num_obstacles_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartereyeObstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_obstacles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_obstacles(&has_bits);
          _impl_.num_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.output_obstacles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmartereyeObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.SmartereyeObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional int32 num_obstacles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_obstacles(), target);
  }

  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  if (!this->_internal_output_obstacles().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::apollo::drivers::OutputObstacle>;
    using WireHelper = SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_output_obstacles();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.SmartereyeObstacles)
  return target;
}

size_t SmartereyeObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.SmartereyeObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_obstacles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::apollo::drivers::OutputObstacle >::const_iterator
      it = this->_internal_output_obstacles().begin();
      it != this->_internal_output_obstacles().end(); ++it) {
    total_size += SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional int32 num_obstacles = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_obstacles());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartereyeObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmartereyeObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartereyeObstacles::GetClassData() const { return &_class_data_; }

void SmartereyeObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmartereyeObstacles *>(to)->MergeFrom(
      static_cast<const SmartereyeObstacles &>(from));
}


void SmartereyeObstacles::MergeFrom(const SmartereyeObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.SmartereyeObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.output_obstacles_.MergeFrom(from._impl_.output_obstacles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.num_obstacles_ = from._impl_.num_obstacles_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartereyeObstacles::CopyFrom(const SmartereyeObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.SmartereyeObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartereyeObstacles::IsInitialized() const {
  return true;
}

void SmartereyeObstacles::InternalSwap(SmartereyeObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.output_obstacles_.InternalSwap(&other->_impl_.output_obstacles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartereyeObstacles, _impl_.num_obstacles_)
      + sizeof(SmartereyeObstacles::_impl_.num_obstacles_)
      - PROTOBUF_FIELD_OFFSET(SmartereyeObstacles, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartereyeObstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[7]);
}

// ===================================================================

class SmartereyeLanemark::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartereyeLanemark>()._impl_._has_bits_);
  static const ::apollo::drivers::LdwDataPacks& lane_road_data(const SmartereyeLanemark* msg);
  static void set_has_lane_road_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::drivers::LdwDataPacks&
SmartereyeLanemark::_Internal::lane_road_data(const SmartereyeLanemark* msg) {
  return *msg->_impl_.lane_road_data_;
}
SmartereyeLanemark::SmartereyeLanemark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.SmartereyeLanemark)
}
SmartereyeLanemark::SmartereyeLanemark(const SmartereyeLanemark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_road_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lane_road_data()) {
    _impl_.lane_road_data_ = new ::apollo::drivers::LdwDataPacks(*from._impl_.lane_road_data_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.SmartereyeLanemark)
}

inline void SmartereyeLanemark::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_road_data_){nullptr}
  };
}

SmartereyeLanemark::~SmartereyeLanemark() {
  // @@protoc_insertion_point(destructor:apollo.drivers.SmartereyeLanemark)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartereyeLanemark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lane_road_data_;
}

void SmartereyeLanemark::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartereyeLanemark::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.SmartereyeLanemark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.lane_road_data_ != nullptr);
    _impl_.lane_road_data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartereyeLanemark::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_road_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmartereyeLanemark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.SmartereyeLanemark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lane_road_data(this),
        _Internal::lane_road_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.SmartereyeLanemark)
  return target;
}

size_t SmartereyeLanemark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.SmartereyeLanemark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lane_road_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartereyeLanemark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmartereyeLanemark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartereyeLanemark::GetClassData() const { return &_class_data_; }

void SmartereyeLanemark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmartereyeLanemark *>(to)->MergeFrom(
      static_cast<const SmartereyeLanemark &>(from));
}


void SmartereyeLanemark::MergeFrom(const SmartereyeLanemark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.SmartereyeLanemark)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lane_road_data()) {
    _internal_mutable_lane_road_data()->::apollo::drivers::LdwDataPacks::MergeFrom(from._internal_lane_road_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartereyeLanemark::CopyFrom(const SmartereyeLanemark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.SmartereyeLanemark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartereyeLanemark::IsInitialized() const {
  return true;
}

void SmartereyeLanemark::InternalSwap(SmartereyeLanemark* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.lane_road_data_, other->_impl_.lane_road_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartereyeLanemark::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fsmartereye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fsmartereye_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::LdwLaneBoundary*
Arena::CreateMaybeMessage< ::apollo::drivers::LdwLaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::LdwLaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::LdwLane*
Arena::CreateMaybeMessage< ::apollo::drivers::LdwLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::LdwLane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::LdwRoadway*
Arena::CreateMaybeMessage< ::apollo::drivers::LdwRoadway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::LdwRoadway >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::LdwLensInfo*
Arena::CreateMaybeMessage< ::apollo::drivers::LdwLensInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::LdwLensInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::LdwDataPacks*
Arena::CreateMaybeMessage< ::apollo::drivers::LdwDataPacks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::LdwDataPacks >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::OutputObstacle*
Arena::CreateMaybeMessage< ::apollo::drivers::OutputObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::OutputObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::SmartereyeObstacles*
Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::SmartereyeObstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::SmartereyeLanemark*
Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeLanemark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::SmartereyeLanemark >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
