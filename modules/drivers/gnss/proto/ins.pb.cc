// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/ins.proto

#include "modules/drivers/gnss/proto/ins.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss {
PROTOBUF_CONSTEXPR InsStat::InsStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.ins_status_)*/0u
  , /*decltype(_impl_.pos_type_)*/0u} {}
struct InsStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsStatDefaultTypeInternal() {}
  union {
    InsStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsStatDefaultTypeInternal _InsStat_default_instance_;
PROTOBUF_CONSTEXPR Ins::Ins(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_covariance_)*/{}
  , /*decltype(_impl_.euler_angles_covariance_)*/{}
  , /*decltype(_impl_.linear_velocity_covariance_)*/{}
  , /*decltype(_impl_.angular_velocity_covariance_)*/{}
  , /*decltype(_impl_.linear_acceleration_covariance_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.euler_angles_)*/nullptr
  , /*decltype(_impl_.linear_velocity_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.linear_acceleration_)*/nullptr
  , /*decltype(_impl_.measurement_time_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct InsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsDefaultTypeInternal() {}
  union {
    Ins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsDefaultTypeInternal _Ins_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _impl_.ins_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _impl_.pos_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.euler_angles_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.position_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.euler_angles_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.linear_velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.angular_velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _impl_.linear_acceleration_covariance_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::drivers::gnss::InsStat)},
  { 12, 31, -1, sizeof(::apollo::drivers::gnss::Ins)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss::_InsStat_default_instance_._instance,
  &::apollo::drivers::gnss::_Ins_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/drivers/gnss/proto/ins.proto\022\023"
  "apollo.drivers.gnss\032!modules/common/prot"
  "o/header.proto\032#modules/common/proto/geo"
  "metry.proto\"V\n\007InsStat\022%\n\006header\030\001 \001(\0132\025"
  ".apollo.common.Header\022\022\n\nins_status\030\002 \001("
  "\r\022\020\n\010pos_type\030\003 \001(\r\"\326\004\n\003Ins\022%\n\006header\030\001 "
  "\001(\0132\025.apollo.common.Header\022\030\n\020measuremen"
  "t_time\030\002 \001(\001\022+\n\004type\030\003 \001(\0162\035.apollo.driv"
  "ers.gnss.Ins.Type\022)\n\010position\030\004 \001(\0132\027.ap"
  "ollo.common.PointLLH\022,\n\014euler_angles\030\005 \001"
  "(\0132\026.apollo.common.Point3D\022/\n\017linear_vel"
  "ocity\030\006 \001(\0132\026.apollo.common.Point3D\0220\n\020a"
  "ngular_velocity\030\007 \001(\0132\026.apollo.common.Po"
  "int3D\0223\n\023linear_acceleration\030\010 \001(\0132\026.apo"
  "llo.common.Point3D\022\037\n\023position_covarianc"
  "e\030\t \003(\002B\002\020\001\022#\n\027euler_angles_covariance\030\n"
  " \003(\002B\002\020\001\022&\n\032linear_velocity_covariance\030\013"
  " \003(\002B\002\020\001\022\'\n\033angular_velocity_covariance\030"
  "\014 \003(\002B\002\020\001\022*\n\036linear_acceleration_covaria"
  "nce\030\r \003(\002B\002\020\001\"-\n\004Type\022\013\n\007INVALID\020\000\022\016\n\nCO"
  "NVERGING\020\001\022\010\n\004GOOD\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto = {
    false, false, 820, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto,
    "modules/drivers/gnss/proto/ins.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ins_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[0];
}
bool Ins_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ins_Type Ins::INVALID;
constexpr Ins_Type Ins::CONVERGING;
constexpr Ins_Type Ins::GOOD;
constexpr Ins_Type Ins::Type_MIN;
constexpr Ins_Type Ins::Type_MAX;
constexpr int Ins::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class InsStat::_Internal {
 public:
  using HasBits = decltype(std::declval<InsStat>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const InsStat* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ins_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
InsStat::_Internal::header(const InsStat* msg) {
  return *msg->_impl_.header_;
}
void InsStat::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InsStat::InsStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.InsStat)
}
InsStat::InsStat(const InsStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.ins_status_){}
    , decltype(_impl_.pos_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.ins_status_, &from._impl_.ins_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_type_) -
    reinterpret_cast<char*>(&_impl_.ins_status_)) + sizeof(_impl_.pos_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.InsStat)
}

inline void InsStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.ins_status_){0u}
    , decltype(_impl_.pos_type_){0u}
  };
}

InsStat::~InsStat() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.InsStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void InsStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsStat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.InsStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.ins_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pos_type_) -
        reinterpret_cast<char*>(&_impl_.ins_status_)) + sizeof(_impl_.pos_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ins_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ins_status(&has_bits);
          _impl_.ins_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pos_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pos_type(&has_bits);
          _impl_.pos_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.InsStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional uint32 ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ins_status(), target);
  }

  // optional uint32 pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pos_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.InsStat)
  return target;
}

size_t InsStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.InsStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional uint32 ins_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ins_status());
    }

    // optional uint32 pos_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsStat::GetClassData() const { return &_class_data_; }

void InsStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsStat *>(to)->MergeFrom(
      static_cast<const InsStat &>(from));
}


void InsStat::MergeFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ins_status_ = from._impl_.ins_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pos_type_ = from._impl_.pos_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsStat::CopyFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStat::IsInitialized() const {
  return true;
}

void InsStat::InternalSwap(InsStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsStat, _impl_.pos_type_)
      + sizeof(InsStat::_impl_.pos_type_)
      - PROTOBUF_FIELD_OFFSET(InsStat, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[0]);
}

// ===================================================================

class Ins::_Internal {
 public:
  using HasBits = decltype(std::declval<Ins>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Ins* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::common::PointLLH& position(const Ins* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& euler_angles(const Ins* msg);
  static void set_has_euler_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const Ins* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& angular_velocity(const Ins* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& linear_acceleration(const Ins* msg);
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::common::Header&
Ins::_Internal::header(const Ins* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::PointLLH&
Ins::_Internal::position(const Ins* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
Ins::_Internal::euler_angles(const Ins* msg) {
  return *msg->_impl_.euler_angles_;
}
const ::apollo::common::Point3D&
Ins::_Internal::linear_velocity(const Ins* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::apollo::common::Point3D&
Ins::_Internal::angular_velocity(const Ins* msg) {
  return *msg->_impl_.angular_velocity_;
}
const ::apollo::common::Point3D&
Ins::_Internal::linear_acceleration(const Ins* msg) {
  return *msg->_impl_.linear_acceleration_;
}
void Ins::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Ins::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Ins::clear_euler_angles() {
  if (_impl_.euler_angles_ != nullptr) _impl_.euler_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Ins::clear_linear_velocity() {
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Ins::clear_angular_velocity() {
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Ins::clear_linear_acceleration() {
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
Ins::Ins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.Ins)
}
Ins::Ins(const Ins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_covariance_){from._impl_.position_covariance_}
    , decltype(_impl_.euler_angles_covariance_){from._impl_.euler_angles_covariance_}
    , decltype(_impl_.linear_velocity_covariance_){from._impl_.linear_velocity_covariance_}
    , decltype(_impl_.angular_velocity_covariance_){from._impl_.angular_velocity_covariance_}
    , decltype(_impl_.linear_acceleration_covariance_){from._impl_.linear_acceleration_covariance_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.euler_angles_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.measurement_time_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointLLH(*from._impl_.position_);
  }
  if (from._internal_has_euler_angles()) {
    _impl_.euler_angles_ = new ::apollo::common::Point3D(*from._impl_.euler_angles_);
  }
  if (from._internal_has_linear_velocity()) {
    _impl_.linear_velocity_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_);
  }
  if (from._internal_has_angular_velocity()) {
    _impl_.angular_velocity_ = new ::apollo::common::Point3D(*from._impl_.angular_velocity_);
  }
  if (from._internal_has_linear_acceleration()) {
    _impl_.linear_acceleration_ = new ::apollo::common::Point3D(*from._impl_.linear_acceleration_);
  }
  ::memcpy(&_impl_.measurement_time_, &from._impl_.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Ins)
}

inline void Ins::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_covariance_){arena}
    , decltype(_impl_.euler_angles_covariance_){arena}
    , decltype(_impl_.linear_velocity_covariance_){arena}
    , decltype(_impl_.angular_velocity_covariance_){arena}
    , decltype(_impl_.linear_acceleration_covariance_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.euler_angles_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.measurement_time_){0}
    , decltype(_impl_.type_){0}
  };
}

Ins::~Ins() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Ins)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.position_covariance_.~RepeatedField();
  _impl_.euler_angles_covariance_.~RepeatedField();
  _impl_.linear_velocity_covariance_.~RepeatedField();
  _impl_.angular_velocity_covariance_.~RepeatedField();
  _impl_.linear_acceleration_covariance_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.euler_angles_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_;
}

void Ins::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ins::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Ins)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_covariance_.Clear();
  _impl_.euler_angles_covariance_.Clear();
  _impl_.linear_velocity_covariance_.Clear();
  _impl_.angular_velocity_covariance_.Clear();
  _impl_.linear_acceleration_covariance_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.euler_angles_ != nullptr);
      _impl_.euler_angles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.Ins.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::Ins_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss::Ins_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointLLH position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D euler_angles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float position_covariance = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_position_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float euler_angles_covariance = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_euler_angles_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_euler_angles_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float linear_velocity_covariance = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 93) {
          _internal_add_linear_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float angular_velocity_covariance = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_angular_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 101) {
          _internal_add_angular_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float linear_acceleration_covariance = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_acceleration_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 109) {
          _internal_add_linear_acceleration_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ins::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Ins)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // optional .apollo.drivers.gnss.Ins.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D euler_angles = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::euler_angles(this),
        _Internal::euler_angles(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_acceleration = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::linear_acceleration(this),
        _Internal::linear_acceleration(this).GetCachedSize(), target, stream);
  }

  // repeated float position_covariance = 9 [packed = true];
  if (this->_internal_position_covariance_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_position_covariance(), target);
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  if (this->_internal_euler_angles_covariance_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_euler_angles_covariance(), target);
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  if (this->_internal_linear_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_linear_velocity_covariance(), target);
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  if (this->_internal_angular_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_angular_velocity_covariance(), target);
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  if (this->_internal_linear_acceleration_covariance_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_linear_acceleration_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Ins)
  return target;
}

size_t Ins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Ins)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position_covariance = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_euler_angles_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angular_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_acceleration_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D euler_angles = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.euler_angles_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_);
    }

    // optional .apollo.common.Point3D angular_velocity = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angular_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_acceleration_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.Ins.Type type = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ins::GetClassData() const { return &_class_data_; }

void Ins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ins *>(to)->MergeFrom(
      static_cast<const Ins &>(from));
}


void Ins::MergeFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.position_covariance_.MergeFrom(from._impl_.position_covariance_);
  _impl_.euler_angles_covariance_.MergeFrom(from._impl_.euler_angles_covariance_);
  _impl_.linear_velocity_covariance_.MergeFrom(from._impl_.linear_velocity_covariance_);
  _impl_.angular_velocity_covariance_.MergeFrom(from._impl_.angular_velocity_covariance_);
  _impl_.linear_acceleration_covariance_.MergeFrom(from._impl_.linear_acceleration_covariance_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::PointLLH::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_euler_angles()->::apollo::common::Point3D::MergeFrom(from._internal_euler_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ins::CopyFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins::IsInitialized() const {
  return true;
}

void Ins::InternalSwap(Ins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.position_covariance_.InternalSwap(&other->_impl_.position_covariance_);
  _impl_.euler_angles_covariance_.InternalSwap(&other->_impl_.euler_angles_covariance_);
  _impl_.linear_velocity_covariance_.InternalSwap(&other->_impl_.linear_velocity_covariance_);
  _impl_.angular_velocity_covariance_.InternalSwap(&other->_impl_.angular_velocity_covariance_);
  _impl_.linear_acceleration_covariance_.InternalSwap(&other->_impl_.linear_acceleration_covariance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ins, _impl_.type_)
      + sizeof(Ins::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Ins, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::InsStat*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::InsStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::InsStat >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::Ins*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Ins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::Ins >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
