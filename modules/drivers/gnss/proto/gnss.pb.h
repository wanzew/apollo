// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class Gnss;
struct GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class GnssRange;
struct GnssRangeDefaultTypeInternal;
extern GnssRangeDefaultTypeInternal _GnssRange_default_instance_;
class RangeInfo;
struct RangeInfoDefaultTypeInternal;
extern RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::Gnss* Arena::CreateMaybeMessage<::apollo::drivers::gnss::Gnss>(Arena*);
template<> ::apollo::drivers::gnss::GnssRange* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GnssRange>(Arena*);
template<> ::apollo::drivers::gnss::RangeInfo* Arena::CreateMaybeMessage<::apollo::drivers::gnss::RangeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum Gnss_Type : int {
  Gnss_Type_INVALID = 0,
  Gnss_Type_PROPAGATED = 1,
  Gnss_Type_SINGLE = 2,
  Gnss_Type_PSRDIFF = 3,
  Gnss_Type_PPP = 4,
  Gnss_Type_RTK_FLOAT = 5,
  Gnss_Type_RTK_INTEGER = 6
};
bool Gnss_Type_IsValid(int value);
constexpr Gnss_Type Gnss_Type_Type_MIN = Gnss_Type_INVALID;
constexpr Gnss_Type Gnss_Type_Type_MAX = Gnss_Type_RTK_INTEGER;
constexpr int Gnss_Type_Type_ARRAYSIZE = Gnss_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor();
template<typename T>
inline const std::string& Gnss_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gnss_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gnss_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gnss_Type_descriptor(), enum_t_value);
}
inline bool Gnss_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gnss_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gnss_Type>(
    Gnss_Type_descriptor(), name, value);
}
enum RangeInfo_Constellation : int {
  RangeInfo_Constellation_GPS = 0,
  RangeInfo_Constellation_GLONASS = 1,
  RangeInfo_Constellation_SBAS = 2,
  RangeInfo_Constellation_GALILEO = 3,
  RangeInfo_Constellation_BEIDOU = 4,
  RangeInfo_Constellation_QZSS = 5
};
bool RangeInfo_Constellation_IsValid(int value);
constexpr RangeInfo_Constellation RangeInfo_Constellation_Constellation_MIN = RangeInfo_Constellation_GPS;
constexpr RangeInfo_Constellation RangeInfo_Constellation_Constellation_MAX = RangeInfo_Constellation_QZSS;
constexpr int RangeInfo_Constellation_Constellation_ARRAYSIZE = RangeInfo_Constellation_Constellation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeInfo_Constellation_descriptor();
template<typename T>
inline const std::string& RangeInfo_Constellation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeInfo_Constellation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeInfo_Constellation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RangeInfo_Constellation_descriptor(), enum_t_value);
}
inline bool RangeInfo_Constellation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RangeInfo_Constellation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RangeInfo_Constellation>(
    RangeInfo_Constellation_descriptor(), name, value);
}
// ===================================================================

class Gnss final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.Gnss) */ {
 public:
  inline Gnss() : Gnss(nullptr) {}
  ~Gnss() override;
  explicit PROTOBUF_CONSTEXPR Gnss(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gnss(const Gnss& from);
  Gnss(Gnss&& from) noexcept
    : Gnss() {
    *this = ::std::move(from);
  }

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gnss& operator=(Gnss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gnss& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gnss& a, Gnss& b) {
    a.Swap(&b);
  }
  inline void Swap(Gnss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gnss* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gnss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gnss>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gnss& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Gnss& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.Gnss";
  }
  protected:
  explicit Gnss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gnss_Type Type;
  static constexpr Type INVALID =
    Gnss_Type_INVALID;
  static constexpr Type PROPAGATED =
    Gnss_Type_PROPAGATED;
  static constexpr Type SINGLE =
    Gnss_Type_SINGLE;
  static constexpr Type PSRDIFF =
    Gnss_Type_PSRDIFF;
  static constexpr Type PPP =
    Gnss_Type_PPP;
  static constexpr Type RTK_FLOAT =
    Gnss_Type_RTK_FLOAT;
  static constexpr Type RTK_INTEGER =
    Gnss_Type_RTK_INTEGER;
  static inline bool Type_IsValid(int value) {
    return Gnss_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Gnss_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Gnss_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Gnss_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Gnss_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Gnss_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Gnss_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 4,
    kPositionStdDevFieldNumber = 5,
    kLinearVelocityFieldNumber = 6,
    kLinearVelocityStdDevFieldNumber = 7,
    kMeasurementTimeFieldNumber = 2,
    kVelocityLatencyFieldNumber = 3,
    kNumSatsFieldNumber = 8,
    kTypeFieldNumber = 9,
    kSolutionStatusFieldNumber = 10,
    kPositionTypeFieldNumber = 11,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.common.PointLLH position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::PointLLH& position() const;
  PROTOBUF_NODISCARD ::apollo::common::PointLLH* release_position();
  ::apollo::common::PointLLH* mutable_position();
  void set_allocated_position(::apollo::common::PointLLH* position);
  private:
  const ::apollo::common::PointLLH& _internal_position() const;
  ::apollo::common::PointLLH* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::PointLLH* position);
  ::apollo::common::PointLLH* unsafe_arena_release_position();

  // optional .apollo.common.Point3D position_std_dev = 5;
  bool has_position_std_dev() const;
  private:
  bool _internal_has_position_std_dev() const;
  public:
  void clear_position_std_dev();
  const ::apollo::common::Point3D& position_std_dev() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_position_std_dev();
  ::apollo::common::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev);
  private:
  const ::apollo::common::Point3D& _internal_position_std_dev() const;
  ::apollo::common::Point3D* _internal_mutable_position_std_dev();
  public:
  void unsafe_arena_set_allocated_position_std_dev(
      ::apollo::common::Point3D* position_std_dev);
  ::apollo::common::Point3D* unsafe_arena_release_position_std_dev();

  // optional .apollo.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::apollo::common::Point3D& linear_velocity() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_linear_velocity();
  ::apollo::common::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity);
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::apollo::common::Point3D* linear_velocity);
  ::apollo::common::Point3D* unsafe_arena_release_linear_velocity();

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  bool has_linear_velocity_std_dev() const;
  private:
  bool _internal_has_linear_velocity_std_dev() const;
  public:
  void clear_linear_velocity_std_dev();
  const ::apollo::common::Point3D& linear_velocity_std_dev() const;
  PROTOBUF_NODISCARD ::apollo::common::Point3D* release_linear_velocity_std_dev();
  ::apollo::common::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev);
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity_std_dev() const;
  ::apollo::common::Point3D* _internal_mutable_linear_velocity_std_dev();
  public:
  void unsafe_arena_set_allocated_linear_velocity_std_dev(
      ::apollo::common::Point3D* linear_velocity_std_dev);
  ::apollo::common::Point3D* unsafe_arena_release_linear_velocity_std_dev();

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional float velocity_latency = 3 [default = 0];
  bool has_velocity_latency() const;
  private:
  bool _internal_has_velocity_latency() const;
  public:
  void clear_velocity_latency();
  float velocity_latency() const;
  void set_velocity_latency(float value);
  private:
  float _internal_velocity_latency() const;
  void _internal_set_velocity_latency(float value);
  public:

  // optional int32 num_sats = 8;
  bool has_num_sats() const;
  private:
  bool _internal_has_num_sats() const;
  public:
  void clear_num_sats();
  int32_t num_sats() const;
  void set_num_sats(int32_t value);
  private:
  int32_t _internal_num_sats() const;
  void _internal_set_num_sats(int32_t value);
  public:

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::drivers::gnss::Gnss_Type type() const;
  void set_type(::apollo::drivers::gnss::Gnss_Type value);
  private:
  ::apollo::drivers::gnss::Gnss_Type _internal_type() const;
  void _internal_set_type(::apollo::drivers::gnss::Gnss_Type value);
  public:

  // optional uint32 solution_status = 10;
  bool has_solution_status() const;
  private:
  bool _internal_has_solution_status() const;
  public:
  void clear_solution_status();
  uint32_t solution_status() const;
  void set_solution_status(uint32_t value);
  private:
  uint32_t _internal_solution_status() const;
  void _internal_set_solution_status(uint32_t value);
  public:

  // optional uint32 position_type = 11;
  bool has_position_type() const;
  private:
  bool _internal_has_position_type() const;
  public:
  void clear_position_type();
  uint32_t position_type() const;
  void set_position_type(uint32_t value);
  private:
  uint32_t _internal_position_type() const;
  void _internal_set_position_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.Gnss)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::Header* header_;
    ::apollo::common::PointLLH* position_;
    ::apollo::common::Point3D* position_std_dev_;
    ::apollo::common::Point3D* linear_velocity_;
    ::apollo::common::Point3D* linear_velocity_std_dev_;
    double measurement_time_;
    float velocity_latency_;
    int32_t num_sats_;
    int type_;
    uint32_t solution_status_;
    uint32_t position_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
};
// -------------------------------------------------------------------

class RangeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.RangeInfo) */ {
 public:
  inline RangeInfo() : RangeInfo(nullptr) {}
  ~RangeInfo() override;
  explicit PROTOBUF_CONSTEXPR RangeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeInfo(const RangeInfo& from);
  RangeInfo(RangeInfo&& from) noexcept
    : RangeInfo() {
    *this = ::std::move(from);
  }

  inline RangeInfo& operator=(const RangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeInfo& operator=(RangeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeInfo* internal_default_instance() {
    return reinterpret_cast<const RangeInfo*>(
               &_RangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RangeInfo& a, RangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RangeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.RangeInfo";
  }
  protected:
  explicit RangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RangeInfo_Constellation Constellation;
  static constexpr Constellation GPS =
    RangeInfo_Constellation_GPS;
  static constexpr Constellation GLONASS =
    RangeInfo_Constellation_GLONASS;
  static constexpr Constellation SBAS =
    RangeInfo_Constellation_SBAS;
  static constexpr Constellation GALILEO =
    RangeInfo_Constellation_GALILEO;
  static constexpr Constellation BEIDOU =
    RangeInfo_Constellation_BEIDOU;
  static constexpr Constellation QZSS =
    RangeInfo_Constellation_QZSS;
  static inline bool Constellation_IsValid(int value) {
    return RangeInfo_Constellation_IsValid(value);
  }
  static constexpr Constellation Constellation_MIN =
    RangeInfo_Constellation_Constellation_MIN;
  static constexpr Constellation Constellation_MAX =
    RangeInfo_Constellation_Constellation_MAX;
  static constexpr int Constellation_ARRAYSIZE =
    RangeInfo_Constellation_Constellation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Constellation_descriptor() {
    return RangeInfo_Constellation_descriptor();
  }
  template<typename T>
  static inline const std::string& Constellation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Constellation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Constellation_Name.");
    return RangeInfo_Constellation_Name(enum_t_value);
  }
  static inline bool Constellation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Constellation* value) {
    return RangeInfo_Constellation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConstellationFieldNumber = 1,
    kPrnFieldNumber = 2,
    kCarrierFrequencyFieldNumber = 3,
    kPseudorangeFieldNumber = 4,
    kCarrierPhaseFieldNumber = 6,
    kPseudorangeStdDevFieldNumber = 5,
    kCarrierPhaseStdDevFieldNumber = 7,
    kDopplerFieldNumber = 8,
    kDopplerStdDevFieldNumber = 9,
    kCnoFieldNumber = 10,
    kLockTimeFieldNumber = 11,
  };
  // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  bool has_constellation() const;
  private:
  bool _internal_has_constellation() const;
  public:
  void clear_constellation();
  ::apollo::drivers::gnss::RangeInfo_Constellation constellation() const;
  void set_constellation(::apollo::drivers::gnss::RangeInfo_Constellation value);
  private:
  ::apollo::drivers::gnss::RangeInfo_Constellation _internal_constellation() const;
  void _internal_set_constellation(::apollo::drivers::gnss::RangeInfo_Constellation value);
  public:

  // optional int32 prn = 2;
  bool has_prn() const;
  private:
  bool _internal_has_prn() const;
  public:
  void clear_prn();
  int32_t prn() const;
  void set_prn(int32_t value);
  private:
  int32_t _internal_prn() const;
  void _internal_set_prn(int32_t value);
  public:

  // optional fixed32 carrier_frequency = 3;
  bool has_carrier_frequency() const;
  private:
  bool _internal_has_carrier_frequency() const;
  public:
  void clear_carrier_frequency();
  uint32_t carrier_frequency() const;
  void set_carrier_frequency(uint32_t value);
  private:
  uint32_t _internal_carrier_frequency() const;
  void _internal_set_carrier_frequency(uint32_t value);
  public:

  // optional double pseudorange = 4 [default = nan];
  bool has_pseudorange() const;
  private:
  bool _internal_has_pseudorange() const;
  public:
  void clear_pseudorange();
  double pseudorange() const;
  void set_pseudorange(double value);
  private:
  double _internal_pseudorange() const;
  void _internal_set_pseudorange(double value);
  public:

  // optional double carrier_phase = 6 [default = nan];
  bool has_carrier_phase() const;
  private:
  bool _internal_has_carrier_phase() const;
  public:
  void clear_carrier_phase();
  double carrier_phase() const;
  void set_carrier_phase(double value);
  private:
  double _internal_carrier_phase() const;
  void _internal_set_carrier_phase(double value);
  public:

  // optional float pseudorange_std_dev = 5 [default = nan];
  bool has_pseudorange_std_dev() const;
  private:
  bool _internal_has_pseudorange_std_dev() const;
  public:
  void clear_pseudorange_std_dev();
  float pseudorange_std_dev() const;
  void set_pseudorange_std_dev(float value);
  private:
  float _internal_pseudorange_std_dev() const;
  void _internal_set_pseudorange_std_dev(float value);
  public:

  // optional float carrier_phase_std_dev = 7 [default = nan];
  bool has_carrier_phase_std_dev() const;
  private:
  bool _internal_has_carrier_phase_std_dev() const;
  public:
  void clear_carrier_phase_std_dev();
  float carrier_phase_std_dev() const;
  void set_carrier_phase_std_dev(float value);
  private:
  float _internal_carrier_phase_std_dev() const;
  void _internal_set_carrier_phase_std_dev(float value);
  public:

  // optional float doppler = 8 [default = nan];
  bool has_doppler() const;
  private:
  bool _internal_has_doppler() const;
  public:
  void clear_doppler();
  float doppler() const;
  void set_doppler(float value);
  private:
  float _internal_doppler() const;
  void _internal_set_doppler(float value);
  public:

  // optional float doppler_std_dev = 9 [default = nan];
  bool has_doppler_std_dev() const;
  private:
  bool _internal_has_doppler_std_dev() const;
  public:
  void clear_doppler_std_dev();
  float doppler_std_dev() const;
  void set_doppler_std_dev(float value);
  private:
  float _internal_doppler_std_dev() const;
  void _internal_set_doppler_std_dev(float value);
  public:

  // optional int32 cno = 10 [default = -1];
  bool has_cno() const;
  private:
  bool _internal_has_cno() const;
  public:
  void clear_cno();
  int32_t cno() const;
  void set_cno(int32_t value);
  private:
  int32_t _internal_cno() const;
  void _internal_set_cno(int32_t value);
  public:

  // optional int32 lock_time = 11 [default = -1];
  bool has_lock_time() const;
  private:
  bool _internal_has_lock_time() const;
  public:
  void clear_lock_time();
  int32_t lock_time() const;
  void set_lock_time(int32_t value);
  private:
  int32_t _internal_lock_time() const;
  void _internal_set_lock_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.RangeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int constellation_;
    int32_t prn_;
    uint32_t carrier_frequency_;
    double pseudorange_;
    double carrier_phase_;
    float pseudorange_std_dev_;
    float carrier_phase_std_dev_;
    float doppler_;
    float doppler_std_dev_;
    int32_t cno_;
    int32_t lock_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
};
// -------------------------------------------------------------------

class GnssRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssRange) */ {
 public:
  inline GnssRange() : GnssRange(nullptr) {}
  ~GnssRange() override;
  explicit PROTOBUF_CONSTEXPR GnssRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GnssRange(const GnssRange& from);
  GnssRange(GnssRange&& from) noexcept
    : GnssRange() {
    *this = ::std::move(from);
  }

  inline GnssRange& operator=(const GnssRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssRange& operator=(GnssRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GnssRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const GnssRange* internal_default_instance() {
    return reinterpret_cast<const GnssRange*>(
               &_GnssRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GnssRange& a, GnssRange& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GnssRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GnssRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GnssRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GnssRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GnssRange";
  }
  protected:
  explicit GnssRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kMeasurementTimeFieldNumber = 2,
  };
  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::apollo::drivers::gnss::RangeInfo* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >*
      mutable_ranges();
  private:
  const ::apollo::drivers::gnss::RangeInfo& _internal_ranges(int index) const;
  ::apollo::drivers::gnss::RangeInfo* _internal_add_ranges();
  public:
  const ::apollo::drivers::gnss::RangeInfo& ranges(int index) const;
  ::apollo::drivers::gnss::RangeInfo* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >&
      ranges() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo > ranges_;
    ::apollo::common::Header* header_;
    double measurement_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gnss

// optional .apollo.common.Header header = 1;
inline bool Gnss::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Gnss::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Gnss::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Gnss::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.header)
  return _internal_header();
}
inline void Gnss::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Gnss.header)
}
inline ::apollo::common::Header* Gnss::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Gnss::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Gnss::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* Gnss::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.header)
  return _msg;
}
inline void Gnss::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.header)
}

// optional double measurement_time = 2;
inline bool Gnss::_internal_has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Gnss::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void Gnss::clear_measurement_time() {
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Gnss::_internal_measurement_time() const {
  return _impl_.measurement_time_;
}
inline double Gnss::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.measurement_time)
  return _internal_measurement_time();
}
inline void Gnss::_internal_set_measurement_time(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.measurement_time_ = value;
}
inline void Gnss::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.measurement_time)
}

// optional float velocity_latency = 3 [default = 0];
inline bool Gnss::_internal_has_velocity_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Gnss::has_velocity_latency() const {
  return _internal_has_velocity_latency();
}
inline void Gnss::clear_velocity_latency() {
  _impl_.velocity_latency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Gnss::_internal_velocity_latency() const {
  return _impl_.velocity_latency_;
}
inline float Gnss::velocity_latency() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.velocity_latency)
  return _internal_velocity_latency();
}
inline void Gnss::_internal_set_velocity_latency(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.velocity_latency_ = value;
}
inline void Gnss::set_velocity_latency(float value) {
  _internal_set_velocity_latency(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.velocity_latency)
}

// optional .apollo.common.PointLLH position = 4;
inline bool Gnss::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Gnss::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::PointLLH& Gnss::_internal_position() const {
  const ::apollo::common::PointLLH* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointLLH&>(
      ::apollo::common::_PointLLH_default_instance_);
}
inline const ::apollo::common::PointLLH& Gnss::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position)
  return _internal_position();
}
inline void Gnss::unsafe_arena_set_allocated_position(
    ::apollo::common::PointLLH* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Gnss.position)
}
inline ::apollo::common::PointLLH* Gnss::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointLLH* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointLLH* Gnss::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointLLH* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::apollo::common::PointLLH* Gnss::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointLLH>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::apollo::common::PointLLH* Gnss::mutable_position() {
  ::apollo::common::PointLLH* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position)
  return _msg;
}
inline void Gnss::set_allocated_position(::apollo::common::PointLLH* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position)
}

// optional .apollo.common.Point3D position_std_dev = 5;
inline bool Gnss::_internal_has_position_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_std_dev_ != nullptr);
  return value;
}
inline bool Gnss::has_position_std_dev() const {
  return _internal_has_position_std_dev();
}
inline const ::apollo::common::Point3D& Gnss::_internal_position_std_dev() const {
  const ::apollo::common::Point3D* p = _impl_.position_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Gnss::position_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_std_dev)
  return _internal_position_std_dev();
}
inline void Gnss::unsafe_arena_set_allocated_position_std_dev(
    ::apollo::common::Point3D* position_std_dev) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_std_dev_);
  }
  _impl_.position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Gnss.position_std_dev)
}
inline ::apollo::common::Point3D* Gnss::release_position_std_dev() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.position_std_dev_;
  _impl_.position_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Gnss::unsafe_arena_release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position_std_dev)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = _impl_.position_std_dev_;
  _impl_.position_std_dev_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::_internal_mutable_position_std_dev() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.position_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.position_std_dev_ = p;
  }
  return _impl_.position_std_dev_;
}
inline ::apollo::common::Point3D* Gnss::mutable_position_std_dev() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position_std_dev();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position_std_dev)
  return _msg;
}
inline void Gnss::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_std_dev_);
  }
  if (position_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev));
    if (message_arena != submessage_arena) {
      position_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position_std_dev)
}

// optional .apollo.common.Point3D linear_velocity = 6;
inline bool Gnss::_internal_has_linear_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_ != nullptr);
  return value;
}
inline bool Gnss::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::apollo::common::Point3D& Gnss::_internal_linear_velocity() const {
  const ::apollo::common::Point3D* p = _impl_.linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Gnss::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity)
  return _internal_linear_velocity();
}
inline void Gnss::unsafe_arena_set_allocated_linear_velocity(
    ::apollo::common::Point3D* linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_);
  }
  _impl_.linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity)
}
inline ::apollo::common::Point3D* Gnss::release_linear_velocity() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Gnss::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = _impl_.linear_velocity_;
  _impl_.linear_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::_internal_mutable_linear_velocity() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.linear_velocity_ = p;
  }
  return _impl_.linear_velocity_;
}
inline ::apollo::common::Point3D* Gnss::mutable_linear_velocity() {
  ::apollo::common::Point3D* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity)
  return _msg;
}
inline void Gnss::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity));
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 7;
inline bool Gnss::_internal_has_linear_velocity_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.linear_velocity_std_dev_ != nullptr);
  return value;
}
inline bool Gnss::has_linear_velocity_std_dev() const {
  return _internal_has_linear_velocity_std_dev();
}
inline const ::apollo::common::Point3D& Gnss::_internal_linear_velocity_std_dev() const {
  const ::apollo::common::Point3D* p = _impl_.linear_velocity_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Gnss::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return _internal_linear_velocity_std_dev();
}
inline void Gnss::unsafe_arena_set_allocated_linear_velocity_std_dev(
    ::apollo::common::Point3D* linear_velocity_std_dev) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_std_dev_);
  }
  _impl_.linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
}
inline ::apollo::common::Point3D* Gnss::release_linear_velocity_std_dev() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.linear_velocity_std_dev_;
  _impl_.linear_velocity_std_dev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Gnss::unsafe_arena_release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = _impl_.linear_velocity_std_dev_;
  _impl_.linear_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::_internal_mutable_linear_velocity_std_dev() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.linear_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    _impl_.linear_velocity_std_dev_ = p;
  }
  return _impl_.linear_velocity_std_dev_;
}
inline ::apollo::common::Point3D* Gnss::mutable_linear_velocity_std_dev() {
  ::apollo::common::Point3D* _msg = _internal_mutable_linear_velocity_std_dev();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return _msg;
}
inline void Gnss::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev));
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
}

// optional int32 num_sats = 8;
inline bool Gnss::_internal_has_num_sats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Gnss::has_num_sats() const {
  return _internal_has_num_sats();
}
inline void Gnss::clear_num_sats() {
  _impl_.num_sats_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Gnss::_internal_num_sats() const {
  return _impl_.num_sats_;
}
inline int32_t Gnss::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.num_sats)
  return _internal_num_sats();
}
inline void Gnss::_internal_set_num_sats(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_sats_ = value;
}
inline void Gnss::set_num_sats(int32_t value) {
  _internal_set_num_sats(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.num_sats)
}

// optional .apollo.drivers.gnss.Gnss.Type type = 9;
inline bool Gnss::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Gnss::has_type() const {
  return _internal_has_type();
}
inline void Gnss::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::gnss::Gnss_Type Gnss::_internal_type() const {
  return static_cast< ::apollo::drivers::gnss::Gnss_Type >(_impl_.type_);
}
inline ::apollo::drivers::gnss::Gnss_Type Gnss::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.type)
  return _internal_type();
}
inline void Gnss::_internal_set_type(::apollo::drivers::gnss::Gnss_Type value) {
  assert(::apollo::drivers::gnss::Gnss_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.type_ = value;
}
inline void Gnss::set_type(::apollo::drivers::gnss::Gnss_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.type)
}

// optional uint32 solution_status = 10;
inline bool Gnss::_internal_has_solution_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Gnss::has_solution_status() const {
  return _internal_has_solution_status();
}
inline void Gnss::clear_solution_status() {
  _impl_.solution_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t Gnss::_internal_solution_status() const {
  return _impl_.solution_status_;
}
inline uint32_t Gnss::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.solution_status)
  return _internal_solution_status();
}
inline void Gnss::_internal_set_solution_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.solution_status_ = value;
}
inline void Gnss::set_solution_status(uint32_t value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.solution_status)
}

// optional uint32 position_type = 11;
inline bool Gnss::_internal_has_position_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Gnss::has_position_type() const {
  return _internal_has_position_type();
}
inline void Gnss::clear_position_type() {
  _impl_.position_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t Gnss::_internal_position_type() const {
  return _impl_.position_type_;
}
inline uint32_t Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_type)
  return _internal_position_type();
}
inline void Gnss::_internal_set_position_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.position_type_ = value;
}
inline void Gnss::set_position_type(uint32_t value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.position_type)
}

// -------------------------------------------------------------------

// RangeInfo

// optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
inline bool RangeInfo::_internal_has_constellation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RangeInfo::has_constellation() const {
  return _internal_has_constellation();
}
inline void RangeInfo::clear_constellation() {
  _impl_.constellation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::gnss::RangeInfo_Constellation RangeInfo::_internal_constellation() const {
  return static_cast< ::apollo::drivers::gnss::RangeInfo_Constellation >(_impl_.constellation_);
}
inline ::apollo::drivers::gnss::RangeInfo_Constellation RangeInfo::constellation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.constellation)
  return _internal_constellation();
}
inline void RangeInfo::_internal_set_constellation(::apollo::drivers::gnss::RangeInfo_Constellation value) {
  assert(::apollo::drivers::gnss::RangeInfo_Constellation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.constellation_ = value;
}
inline void RangeInfo::set_constellation(::apollo::drivers::gnss::RangeInfo_Constellation value) {
  _internal_set_constellation(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.constellation)
}

// optional int32 prn = 2;
inline bool RangeInfo::_internal_has_prn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RangeInfo::has_prn() const {
  return _internal_has_prn();
}
inline void RangeInfo::clear_prn() {
  _impl_.prn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RangeInfo::_internal_prn() const {
  return _impl_.prn_;
}
inline int32_t RangeInfo::prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.prn)
  return _internal_prn();
}
inline void RangeInfo::_internal_set_prn(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prn_ = value;
}
inline void RangeInfo::set_prn(int32_t value) {
  _internal_set_prn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.prn)
}

// optional fixed32 carrier_frequency = 3;
inline bool RangeInfo::_internal_has_carrier_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeInfo::has_carrier_frequency() const {
  return _internal_has_carrier_frequency();
}
inline void RangeInfo::clear_carrier_frequency() {
  _impl_.carrier_frequency_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RangeInfo::_internal_carrier_frequency() const {
  return _impl_.carrier_frequency_;
}
inline uint32_t RangeInfo::carrier_frequency() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_frequency)
  return _internal_carrier_frequency();
}
inline void RangeInfo::_internal_set_carrier_frequency(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.carrier_frequency_ = value;
}
inline void RangeInfo::set_carrier_frequency(uint32_t value) {
  _internal_set_carrier_frequency(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_frequency)
}

// optional double pseudorange = 4 [default = nan];
inline bool RangeInfo::_internal_has_pseudorange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeInfo::has_pseudorange() const {
  return _internal_has_pseudorange();
}
inline void RangeInfo::clear_pseudorange() {
  _impl_.pseudorange_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RangeInfo::_internal_pseudorange() const {
  return _impl_.pseudorange_;
}
inline double RangeInfo::pseudorange() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.pseudorange)
  return _internal_pseudorange();
}
inline void RangeInfo::_internal_set_pseudorange(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pseudorange_ = value;
}
inline void RangeInfo::set_pseudorange(double value) {
  _internal_set_pseudorange(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.pseudorange)
}

// optional float pseudorange_std_dev = 5 [default = nan];
inline bool RangeInfo::_internal_has_pseudorange_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RangeInfo::has_pseudorange_std_dev() const {
  return _internal_has_pseudorange_std_dev();
}
inline void RangeInfo::clear_pseudorange_std_dev() {
  _impl_.pseudorange_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float RangeInfo::_internal_pseudorange_std_dev() const {
  return _impl_.pseudorange_std_dev_;
}
inline float RangeInfo::pseudorange_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.pseudorange_std_dev)
  return _internal_pseudorange_std_dev();
}
inline void RangeInfo::_internal_set_pseudorange_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pseudorange_std_dev_ = value;
}
inline void RangeInfo::set_pseudorange_std_dev(float value) {
  _internal_set_pseudorange_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.pseudorange_std_dev)
}

// optional double carrier_phase = 6 [default = nan];
inline bool RangeInfo::_internal_has_carrier_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RangeInfo::has_carrier_phase() const {
  return _internal_has_carrier_phase();
}
inline void RangeInfo::clear_carrier_phase() {
  _impl_.carrier_phase_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RangeInfo::_internal_carrier_phase() const {
  return _impl_.carrier_phase_;
}
inline double RangeInfo::carrier_phase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_phase)
  return _internal_carrier_phase();
}
inline void RangeInfo::_internal_set_carrier_phase(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.carrier_phase_ = value;
}
inline void RangeInfo::set_carrier_phase(double value) {
  _internal_set_carrier_phase(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_phase)
}

// optional float carrier_phase_std_dev = 7 [default = nan];
inline bool RangeInfo::_internal_has_carrier_phase_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RangeInfo::has_carrier_phase_std_dev() const {
  return _internal_has_carrier_phase_std_dev();
}
inline void RangeInfo::clear_carrier_phase_std_dev() {
  _impl_.carrier_phase_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RangeInfo::_internal_carrier_phase_std_dev() const {
  return _impl_.carrier_phase_std_dev_;
}
inline float RangeInfo::carrier_phase_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.carrier_phase_std_dev)
  return _internal_carrier_phase_std_dev();
}
inline void RangeInfo::_internal_set_carrier_phase_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.carrier_phase_std_dev_ = value;
}
inline void RangeInfo::set_carrier_phase_std_dev(float value) {
  _internal_set_carrier_phase_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.carrier_phase_std_dev)
}

// optional float doppler = 8 [default = nan];
inline bool RangeInfo::_internal_has_doppler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RangeInfo::has_doppler() const {
  return _internal_has_doppler();
}
inline void RangeInfo::clear_doppler() {
  _impl_.doppler_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float RangeInfo::_internal_doppler() const {
  return _impl_.doppler_;
}
inline float RangeInfo::doppler() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.doppler)
  return _internal_doppler();
}
inline void RangeInfo::_internal_set_doppler(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.doppler_ = value;
}
inline void RangeInfo::set_doppler(float value) {
  _internal_set_doppler(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.doppler)
}

// optional float doppler_std_dev = 9 [default = nan];
inline bool RangeInfo::_internal_has_doppler_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RangeInfo::has_doppler_std_dev() const {
  return _internal_has_doppler_std_dev();
}
inline void RangeInfo::clear_doppler_std_dev() {
  _impl_.doppler_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float RangeInfo::_internal_doppler_std_dev() const {
  return _impl_.doppler_std_dev_;
}
inline float RangeInfo::doppler_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.doppler_std_dev)
  return _internal_doppler_std_dev();
}
inline void RangeInfo::_internal_set_doppler_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.doppler_std_dev_ = value;
}
inline void RangeInfo::set_doppler_std_dev(float value) {
  _internal_set_doppler_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.doppler_std_dev)
}

// optional int32 cno = 10 [default = -1];
inline bool RangeInfo::_internal_has_cno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RangeInfo::has_cno() const {
  return _internal_has_cno();
}
inline void RangeInfo::clear_cno() {
  _impl_.cno_ = -1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t RangeInfo::_internal_cno() const {
  return _impl_.cno_;
}
inline int32_t RangeInfo::cno() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.cno)
  return _internal_cno();
}
inline void RangeInfo::_internal_set_cno(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cno_ = value;
}
inline void RangeInfo::set_cno(int32_t value) {
  _internal_set_cno(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.cno)
}

// optional int32 lock_time = 11 [default = -1];
inline bool RangeInfo::_internal_has_lock_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RangeInfo::has_lock_time() const {
  return _internal_has_lock_time();
}
inline void RangeInfo::clear_lock_time() {
  _impl_.lock_time_ = -1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t RangeInfo::_internal_lock_time() const {
  return _impl_.lock_time_;
}
inline int32_t RangeInfo::lock_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RangeInfo.lock_time)
  return _internal_lock_time();
}
inline void RangeInfo::_internal_set_lock_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lock_time_ = value;
}
inline void RangeInfo::set_lock_time(int32_t value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RangeInfo.lock_time)
}

// -------------------------------------------------------------------

// GnssRange

// optional .apollo.common.Header header = 1;
inline bool GnssRange::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GnssRange::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& GnssRange::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& GnssRange::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.header)
  return _internal_header();
}
inline void GnssRange::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.GnssRange.header)
}
inline ::apollo::common::Header* GnssRange::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* GnssRange::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssRange.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* GnssRange::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* GnssRange::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssRange.header)
  return _msg;
}
inline void GnssRange::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssRange.header)
}

// optional double measurement_time = 2;
inline bool GnssRange::_internal_has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GnssRange::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void GnssRange::clear_measurement_time() {
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double GnssRange::_internal_measurement_time() const {
  return _impl_.measurement_time_;
}
inline double GnssRange::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.measurement_time)
  return _internal_measurement_time();
}
inline void GnssRange::_internal_set_measurement_time(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.measurement_time_ = value;
}
inline void GnssRange::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssRange.measurement_time)
}

// repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
inline int GnssRange::_internal_ranges_size() const {
  return _impl_.ranges_.size();
}
inline int GnssRange::ranges_size() const {
  return _internal_ranges_size();
}
inline void GnssRange::clear_ranges() {
  _impl_.ranges_.Clear();
}
inline ::apollo::drivers::gnss::RangeInfo* GnssRange::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssRange.ranges)
  return _impl_.ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >*
GnssRange::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.GnssRange.ranges)
  return &_impl_.ranges_;
}
inline const ::apollo::drivers::gnss::RangeInfo& GnssRange::_internal_ranges(int index) const {
  return _impl_.ranges_.Get(index);
}
inline const ::apollo::drivers::gnss::RangeInfo& GnssRange::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssRange.ranges)
  return _internal_ranges(index);
}
inline ::apollo::drivers::gnss::RangeInfo* GnssRange::_internal_add_ranges() {
  return _impl_.ranges_.Add();
}
inline ::apollo::drivers::gnss::RangeInfo* GnssRange::add_ranges() {
  ::apollo::drivers::gnss::RangeInfo* _add = _internal_add_ranges();
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.GnssRange.ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::RangeInfo >&
GnssRange::ranges() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.GnssRange.ranges)
  return _impl_.ranges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::Gnss_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::Gnss_Type>() {
  return ::apollo::drivers::gnss::Gnss_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::RangeInfo_Constellation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::RangeInfo_Constellation>() {
  return ::apollo::drivers::gnss::RangeInfo_Constellation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
