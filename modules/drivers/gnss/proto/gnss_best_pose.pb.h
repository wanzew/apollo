// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_best_pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class GnssBestPose;
struct GnssBestPoseDefaultTypeInternal;
extern GnssBestPoseDefaultTypeInternal _GnssBestPose_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::GnssBestPose* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GnssBestPose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum SolutionStatus : int {
  SOL_COMPUTED = 0,
  INSUFFICIENT_OBS = 1,
  NO_CONVERGENCE = 2,
  SINGULARITY = 3,
  COV_TRACE = 4,
  TEST_DIST = 5,
  COLD_START = 6,
  V_H_LIMIT = 7,
  VARIANCE = 8,
  RESIDUALS = 9,
  INTEGRITY_WARNING = 13,
  PENDING = 18,
  INVALID_FIX = 19,
  UNAUTHORIZED = 20,
  INVALID_RATE = 22
};
bool SolutionStatus_IsValid(int value);
constexpr SolutionStatus SolutionStatus_MIN = SOL_COMPUTED;
constexpr SolutionStatus SolutionStatus_MAX = INVALID_RATE;
constexpr int SolutionStatus_ARRAYSIZE = SolutionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionStatus_descriptor();
template<typename T>
inline const std::string& SolutionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionStatus_descriptor(), enum_t_value);
}
inline bool SolutionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolutionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionStatus>(
    SolutionStatus_descriptor(), name, value);
}
enum SolutionType : int {
  NONE = 0,
  FIXEDPOS = 1,
  FIXEDHEIGHT = 2,
  FLOATCONV = 4,
  WIDELANE = 5,
  NARROWLANE = 6,
  DOPPLER_VELOCITY = 8,
  SINGLE = 16,
  PSRDIFF = 17,
  WAAS = 18,
  PROPOGATED = 19,
  OMNISTAR = 20,
  L1_FLOAT = 32,
  IONOFREE_FLOAT = 33,
  NARROW_FLOAT = 34,
  L1_INT = 48,
  WIDE_INT = 49,
  NARROW_INT = 50,
  RTK_DIRECT_INS = 51,
  INS_SBAS = 52,
  INS_PSRSP = 53,
  INS_PSRDIFF = 54,
  INS_RTKFLOAT = 55,
  INS_RTKFIXED = 56,
  INS_OMNISTAR = 57,
  INS_OMNISTAR_HP = 58,
  INS_OMNISTAR_XP = 59,
  OMNISTAR_HP = 64,
  OMNISTAR_XP = 65,
  PPP_CONVERGING = 68,
  PPP = 69,
  INS_PPP_CONVERGING = 73,
  INS_PPP = 74
};
bool SolutionType_IsValid(int value);
constexpr SolutionType SolutionType_MIN = NONE;
constexpr SolutionType SolutionType_MAX = INS_PPP;
constexpr int SolutionType_ARRAYSIZE = SolutionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionType_descriptor();
template<typename T>
inline const std::string& SolutionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionType_descriptor(), enum_t_value);
}
inline bool SolutionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolutionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionType>(
    SolutionType_descriptor(), name, value);
}
enum DatumId : int {
  WGS84 = 61
};
bool DatumId_IsValid(int value);
constexpr DatumId DatumId_MIN = WGS84;
constexpr DatumId DatumId_MAX = WGS84;
constexpr int DatumId_ARRAYSIZE = DatumId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatumId_descriptor();
template<typename T>
inline const std::string& DatumId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatumId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatumId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatumId_descriptor(), enum_t_value);
}
inline bool DatumId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DatumId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatumId>(
    DatumId_descriptor(), name, value);
}
// ===================================================================

class GnssBestPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssBestPose) */ {
 public:
  inline GnssBestPose() : GnssBestPose(nullptr) {}
  ~GnssBestPose() override;
  explicit PROTOBUF_CONSTEXPR GnssBestPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GnssBestPose(const GnssBestPose& from);
  GnssBestPose(GnssBestPose&& from) noexcept
    : GnssBestPose() {
    *this = ::std::move(from);
  }

  inline GnssBestPose& operator=(const GnssBestPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssBestPose& operator=(GnssBestPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GnssBestPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const GnssBestPose* internal_default_instance() {
    return reinterpret_cast<const GnssBestPose*>(
               &_GnssBestPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GnssBestPose& a, GnssBestPose& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssBestPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssBestPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GnssBestPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GnssBestPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GnssBestPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GnssBestPose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssBestPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GnssBestPose";
  }
  protected:
  explicit GnssBestPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseStationIdFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kMeasurementTimeFieldNumber = 2,
    kSolStatusFieldNumber = 3,
    kSolTypeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kHeightMslFieldNumber = 7,
    kUndulationFieldNumber = 8,
    kLatitudeStdDevFieldNumber = 10,
    kLongitudeStdDevFieldNumber = 11,
    kHeightStdDevFieldNumber = 12,
    kDifferentialAgeFieldNumber = 14,
    kSolutionAgeFieldNumber = 15,
    kNumSatsTrackedFieldNumber = 16,
    kNumSatsInSolutionFieldNumber = 17,
    kNumSatsL1FieldNumber = 18,
    kNumSatsMultiFieldNumber = 19,
    kReservedFieldNumber = 20,
    kExtendedSolutionStatusFieldNumber = 21,
    kGalileoBeidouUsedMaskFieldNumber = 22,
    kGpsGlonassUsedMaskFieldNumber = 23,
    kDatumIdFieldNumber = 9,
  };
  // optional bytes base_station_id = 13;
  bool has_base_station_id() const;
  private:
  bool _internal_has_base_station_id() const;
  public:
  void clear_base_station_id();
  const std::string& base_station_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_station_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_station_id();
  PROTOBUF_NODISCARD std::string* release_base_station_id();
  void set_allocated_base_station_id(std::string* base_station_id);
  private:
  const std::string& _internal_base_station_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_station_id(const std::string& value);
  std::string* _internal_mutable_base_station_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  bool has_sol_status() const;
  private:
  bool _internal_has_sol_status() const;
  public:
  void clear_sol_status();
  ::apollo::drivers::gnss::SolutionStatus sol_status() const;
  void set_sol_status(::apollo::drivers::gnss::SolutionStatus value);
  private:
  ::apollo::drivers::gnss::SolutionStatus _internal_sol_status() const;
  void _internal_set_sol_status(::apollo::drivers::gnss::SolutionStatus value);
  public:

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  bool has_sol_type() const;
  private:
  bool _internal_has_sol_type() const;
  public:
  void clear_sol_type();
  ::apollo::drivers::gnss::SolutionType sol_type() const;
  void set_sol_type(::apollo::drivers::gnss::SolutionType value);
  private:
  ::apollo::drivers::gnss::SolutionType _internal_sol_type() const;
  void _internal_set_sol_type(::apollo::drivers::gnss::SolutionType value);
  public:

  // optional double latitude = 5;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 6;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double height_msl = 7;
  bool has_height_msl() const;
  private:
  bool _internal_has_height_msl() const;
  public:
  void clear_height_msl();
  double height_msl() const;
  void set_height_msl(double value);
  private:
  double _internal_height_msl() const;
  void _internal_set_height_msl(double value);
  public:

  // optional float undulation = 8;
  bool has_undulation() const;
  private:
  bool _internal_has_undulation() const;
  public:
  void clear_undulation();
  float undulation() const;
  void set_undulation(float value);
  private:
  float _internal_undulation() const;
  void _internal_set_undulation(float value);
  public:

  // optional float latitude_std_dev = 10;
  bool has_latitude_std_dev() const;
  private:
  bool _internal_has_latitude_std_dev() const;
  public:
  void clear_latitude_std_dev();
  float latitude_std_dev() const;
  void set_latitude_std_dev(float value);
  private:
  float _internal_latitude_std_dev() const;
  void _internal_set_latitude_std_dev(float value);
  public:

  // optional float longitude_std_dev = 11;
  bool has_longitude_std_dev() const;
  private:
  bool _internal_has_longitude_std_dev() const;
  public:
  void clear_longitude_std_dev();
  float longitude_std_dev() const;
  void set_longitude_std_dev(float value);
  private:
  float _internal_longitude_std_dev() const;
  void _internal_set_longitude_std_dev(float value);
  public:

  // optional float height_std_dev = 12;
  bool has_height_std_dev() const;
  private:
  bool _internal_has_height_std_dev() const;
  public:
  void clear_height_std_dev();
  float height_std_dev() const;
  void set_height_std_dev(float value);
  private:
  float _internal_height_std_dev() const;
  void _internal_set_height_std_dev(float value);
  public:

  // optional float differential_age = 14;
  bool has_differential_age() const;
  private:
  bool _internal_has_differential_age() const;
  public:
  void clear_differential_age();
  float differential_age() const;
  void set_differential_age(float value);
  private:
  float _internal_differential_age() const;
  void _internal_set_differential_age(float value);
  public:

  // optional float solution_age = 15;
  bool has_solution_age() const;
  private:
  bool _internal_has_solution_age() const;
  public:
  void clear_solution_age();
  float solution_age() const;
  void set_solution_age(float value);
  private:
  float _internal_solution_age() const;
  void _internal_set_solution_age(float value);
  public:

  // optional uint32 num_sats_tracked = 16;
  bool has_num_sats_tracked() const;
  private:
  bool _internal_has_num_sats_tracked() const;
  public:
  void clear_num_sats_tracked();
  uint32_t num_sats_tracked() const;
  void set_num_sats_tracked(uint32_t value);
  private:
  uint32_t _internal_num_sats_tracked() const;
  void _internal_set_num_sats_tracked(uint32_t value);
  public:

  // optional uint32 num_sats_in_solution = 17;
  bool has_num_sats_in_solution() const;
  private:
  bool _internal_has_num_sats_in_solution() const;
  public:
  void clear_num_sats_in_solution();
  uint32_t num_sats_in_solution() const;
  void set_num_sats_in_solution(uint32_t value);
  private:
  uint32_t _internal_num_sats_in_solution() const;
  void _internal_set_num_sats_in_solution(uint32_t value);
  public:

  // optional uint32 num_sats_l1 = 18;
  bool has_num_sats_l1() const;
  private:
  bool _internal_has_num_sats_l1() const;
  public:
  void clear_num_sats_l1();
  uint32_t num_sats_l1() const;
  void set_num_sats_l1(uint32_t value);
  private:
  uint32_t _internal_num_sats_l1() const;
  void _internal_set_num_sats_l1(uint32_t value);
  public:

  // optional uint32 num_sats_multi = 19;
  bool has_num_sats_multi() const;
  private:
  bool _internal_has_num_sats_multi() const;
  public:
  void clear_num_sats_multi();
  uint32_t num_sats_multi() const;
  void set_num_sats_multi(uint32_t value);
  private:
  uint32_t _internal_num_sats_multi() const;
  void _internal_set_num_sats_multi(uint32_t value);
  public:

  // optional uint32 reserved = 20;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  uint32_t reserved() const;
  void set_reserved(uint32_t value);
  private:
  uint32_t _internal_reserved() const;
  void _internal_set_reserved(uint32_t value);
  public:

  // optional uint32 extended_solution_status = 21;
  bool has_extended_solution_status() const;
  private:
  bool _internal_has_extended_solution_status() const;
  public:
  void clear_extended_solution_status();
  uint32_t extended_solution_status() const;
  void set_extended_solution_status(uint32_t value);
  private:
  uint32_t _internal_extended_solution_status() const;
  void _internal_set_extended_solution_status(uint32_t value);
  public:

  // optional uint32 galileo_beidou_used_mask = 22;
  bool has_galileo_beidou_used_mask() const;
  private:
  bool _internal_has_galileo_beidou_used_mask() const;
  public:
  void clear_galileo_beidou_used_mask();
  uint32_t galileo_beidou_used_mask() const;
  void set_galileo_beidou_used_mask(uint32_t value);
  private:
  uint32_t _internal_galileo_beidou_used_mask() const;
  void _internal_set_galileo_beidou_used_mask(uint32_t value);
  public:

  // optional uint32 gps_glonass_used_mask = 23;
  bool has_gps_glonass_used_mask() const;
  private:
  bool _internal_has_gps_glonass_used_mask() const;
  public:
  void clear_gps_glonass_used_mask();
  uint32_t gps_glonass_used_mask() const;
  void set_gps_glonass_used_mask(uint32_t value);
  private:
  uint32_t _internal_gps_glonass_used_mask() const;
  void _internal_set_gps_glonass_used_mask(uint32_t value);
  public:

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  bool has_datum_id() const;
  private:
  bool _internal_has_datum_id() const;
  public:
  void clear_datum_id();
  ::apollo::drivers::gnss::DatumId datum_id() const;
  void set_datum_id(::apollo::drivers::gnss::DatumId value);
  private:
  ::apollo::drivers::gnss::DatumId _internal_datum_id() const;
  void _internal_set_datum_id(::apollo::drivers::gnss::DatumId value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssBestPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_station_id_;
    ::apollo::common::Header* header_;
    double measurement_time_;
    int sol_status_;
    int sol_type_;
    double latitude_;
    double longitude_;
    double height_msl_;
    float undulation_;
    float latitude_std_dev_;
    float longitude_std_dev_;
    float height_std_dev_;
    float differential_age_;
    float solution_age_;
    uint32_t num_sats_tracked_;
    uint32_t num_sats_in_solution_;
    uint32_t num_sats_l1_;
    uint32_t num_sats_multi_;
    uint32_t reserved_;
    uint32_t extended_solution_status_;
    uint32_t galileo_beidou_used_mask_;
    uint32_t gps_glonass_used_mask_;
    int datum_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GnssBestPose

// optional .apollo.common.Header header = 1;
inline bool GnssBestPose::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GnssBestPose::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& GnssBestPose::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& GnssBestPose::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.header)
  return _internal_header();
}
inline void GnssBestPose::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.GnssBestPose.header)
}
inline ::apollo::common::Header* GnssBestPose::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* GnssBestPose::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* GnssBestPose::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* GnssBestPose::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.header)
  return _msg;
}
inline void GnssBestPose::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.header)
}

// optional double measurement_time = 2;
inline bool GnssBestPose::_internal_has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssBestPose::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void GnssBestPose::clear_measurement_time() {
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double GnssBestPose::_internal_measurement_time() const {
  return _impl_.measurement_time_;
}
inline double GnssBestPose::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.measurement_time)
  return _internal_measurement_time();
}
inline void GnssBestPose::_internal_set_measurement_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.measurement_time_ = value;
}
inline void GnssBestPose::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.measurement_time)
}

// optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
inline bool GnssBestPose::_internal_has_sol_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GnssBestPose::has_sol_status() const {
  return _internal_has_sol_status();
}
inline void GnssBestPose::clear_sol_status() {
  _impl_.sol_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::gnss::SolutionStatus GnssBestPose::_internal_sol_status() const {
  return static_cast< ::apollo::drivers::gnss::SolutionStatus >(_impl_.sol_status_);
}
inline ::apollo::drivers::gnss::SolutionStatus GnssBestPose::sol_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_status)
  return _internal_sol_status();
}
inline void GnssBestPose::_internal_set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  assert(::apollo::drivers::gnss::SolutionStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sol_status_ = value;
}
inline void GnssBestPose::set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  _internal_set_sol_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_status)
}

// optional .apollo.drivers.gnss.SolutionType sol_type = 4;
inline bool GnssBestPose::_internal_has_sol_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GnssBestPose::has_sol_type() const {
  return _internal_has_sol_type();
}
inline void GnssBestPose::clear_sol_type() {
  _impl_.sol_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::gnss::SolutionType GnssBestPose::_internal_sol_type() const {
  return static_cast< ::apollo::drivers::gnss::SolutionType >(_impl_.sol_type_);
}
inline ::apollo::drivers::gnss::SolutionType GnssBestPose::sol_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_type)
  return _internal_sol_type();
}
inline void GnssBestPose::_internal_set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  assert(::apollo::drivers::gnss::SolutionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sol_type_ = value;
}
inline void GnssBestPose::set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  _internal_set_sol_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_type)
}

// optional double latitude = 5;
inline bool GnssBestPose::_internal_has_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GnssBestPose::has_latitude() const {
  return _internal_has_latitude();
}
inline void GnssBestPose::clear_latitude() {
  _impl_.latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double GnssBestPose::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double GnssBestPose::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude)
  return _internal_latitude();
}
inline void GnssBestPose::_internal_set_latitude(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.latitude_ = value;
}
inline void GnssBestPose::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude)
}

// optional double longitude = 6;
inline bool GnssBestPose::_internal_has_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GnssBestPose::has_longitude() const {
  return _internal_has_longitude();
}
inline void GnssBestPose::clear_longitude() {
  _impl_.longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double GnssBestPose::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double GnssBestPose::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude)
  return _internal_longitude();
}
inline void GnssBestPose::_internal_set_longitude(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.longitude_ = value;
}
inline void GnssBestPose::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude)
}

// optional double height_msl = 7;
inline bool GnssBestPose::_internal_has_height_msl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GnssBestPose::has_height_msl() const {
  return _internal_has_height_msl();
}
inline void GnssBestPose::clear_height_msl() {
  _impl_.height_msl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double GnssBestPose::_internal_height_msl() const {
  return _impl_.height_msl_;
}
inline double GnssBestPose::height_msl() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_msl)
  return _internal_height_msl();
}
inline void GnssBestPose::_internal_set_height_msl(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.height_msl_ = value;
}
inline void GnssBestPose::set_height_msl(double value) {
  _internal_set_height_msl(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_msl)
}

// optional float undulation = 8;
inline bool GnssBestPose::_internal_has_undulation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GnssBestPose::has_undulation() const {
  return _internal_has_undulation();
}
inline void GnssBestPose::clear_undulation() {
  _impl_.undulation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float GnssBestPose::_internal_undulation() const {
  return _impl_.undulation_;
}
inline float GnssBestPose::undulation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.undulation)
  return _internal_undulation();
}
inline void GnssBestPose::_internal_set_undulation(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.undulation_ = value;
}
inline void GnssBestPose::set_undulation(float value) {
  _internal_set_undulation(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.undulation)
}

// optional .apollo.drivers.gnss.DatumId datum_id = 9;
inline bool GnssBestPose::_internal_has_datum_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool GnssBestPose::has_datum_id() const {
  return _internal_has_datum_id();
}
inline void GnssBestPose::clear_datum_id() {
  _impl_.datum_id_ = 61;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::drivers::gnss::DatumId GnssBestPose::_internal_datum_id() const {
  return static_cast< ::apollo::drivers::gnss::DatumId >(_impl_.datum_id_);
}
inline ::apollo::drivers::gnss::DatumId GnssBestPose::datum_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.datum_id)
  return _internal_datum_id();
}
inline void GnssBestPose::_internal_set_datum_id(::apollo::drivers::gnss::DatumId value) {
  assert(::apollo::drivers::gnss::DatumId_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.datum_id_ = value;
}
inline void GnssBestPose::set_datum_id(::apollo::drivers::gnss::DatumId value) {
  _internal_set_datum_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.datum_id)
}

// optional float latitude_std_dev = 10;
inline bool GnssBestPose::_internal_has_latitude_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GnssBestPose::has_latitude_std_dev() const {
  return _internal_has_latitude_std_dev();
}
inline void GnssBestPose::clear_latitude_std_dev() {
  _impl_.latitude_std_dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float GnssBestPose::_internal_latitude_std_dev() const {
  return _impl_.latitude_std_dev_;
}
inline float GnssBestPose::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
  return _internal_latitude_std_dev();
}
inline void GnssBestPose::_internal_set_latitude_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.latitude_std_dev_ = value;
}
inline void GnssBestPose::set_latitude_std_dev(float value) {
  _internal_set_latitude_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
}

// optional float longitude_std_dev = 11;
inline bool GnssBestPose::_internal_has_longitude_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GnssBestPose::has_longitude_std_dev() const {
  return _internal_has_longitude_std_dev();
}
inline void GnssBestPose::clear_longitude_std_dev() {
  _impl_.longitude_std_dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float GnssBestPose::_internal_longitude_std_dev() const {
  return _impl_.longitude_std_dev_;
}
inline float GnssBestPose::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
  return _internal_longitude_std_dev();
}
inline void GnssBestPose::_internal_set_longitude_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.longitude_std_dev_ = value;
}
inline void GnssBestPose::set_longitude_std_dev(float value) {
  _internal_set_longitude_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
}

// optional float height_std_dev = 12;
inline bool GnssBestPose::_internal_has_height_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GnssBestPose::has_height_std_dev() const {
  return _internal_has_height_std_dev();
}
inline void GnssBestPose::clear_height_std_dev() {
  _impl_.height_std_dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float GnssBestPose::_internal_height_std_dev() const {
  return _impl_.height_std_dev_;
}
inline float GnssBestPose::height_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_std_dev)
  return _internal_height_std_dev();
}
inline void GnssBestPose::_internal_set_height_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.height_std_dev_ = value;
}
inline void GnssBestPose::set_height_std_dev(float value) {
  _internal_set_height_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_std_dev)
}

// optional bytes base_station_id = 13;
inline bool GnssBestPose::_internal_has_base_station_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GnssBestPose::has_base_station_id() const {
  return _internal_has_base_station_id();
}
inline void GnssBestPose::clear_base_station_id() {
  _impl_.base_station_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GnssBestPose::base_station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return _internal_base_station_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GnssBestPose::set_base_station_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.base_station_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline std::string* GnssBestPose::mutable_base_station_id() {
  std::string* _s = _internal_mutable_base_station_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return _s;
}
inline const std::string& GnssBestPose::_internal_base_station_id() const {
  return _impl_.base_station_id_.Get();
}
inline void GnssBestPose::_internal_set_base_station_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.base_station_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GnssBestPose::_internal_mutable_base_station_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.base_station_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GnssBestPose::release_base_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.base_station_id)
  if (!_internal_has_base_station_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.base_station_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_station_id_.IsDefault()) {
    _impl_.base_station_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GnssBestPose::set_allocated_base_station_id(std::string* base_station_id) {
  if (base_station_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_station_id_.SetAllocated(base_station_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_station_id_.IsDefault()) {
    _impl_.base_station_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.base_station_id)
}

// optional float differential_age = 14;
inline bool GnssBestPose::_internal_has_differential_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GnssBestPose::has_differential_age() const {
  return _internal_has_differential_age();
}
inline void GnssBestPose::clear_differential_age() {
  _impl_.differential_age_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float GnssBestPose::_internal_differential_age() const {
  return _impl_.differential_age_;
}
inline float GnssBestPose::differential_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.differential_age)
  return _internal_differential_age();
}
inline void GnssBestPose::_internal_set_differential_age(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.differential_age_ = value;
}
inline void GnssBestPose::set_differential_age(float value) {
  _internal_set_differential_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.differential_age)
}

// optional float solution_age = 15;
inline bool GnssBestPose::_internal_has_solution_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GnssBestPose::has_solution_age() const {
  return _internal_has_solution_age();
}
inline void GnssBestPose::clear_solution_age() {
  _impl_.solution_age_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float GnssBestPose::_internal_solution_age() const {
  return _impl_.solution_age_;
}
inline float GnssBestPose::solution_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.solution_age)
  return _internal_solution_age();
}
inline void GnssBestPose::_internal_set_solution_age(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.solution_age_ = value;
}
inline void GnssBestPose::set_solution_age(float value) {
  _internal_set_solution_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.solution_age)
}

// optional uint32 num_sats_tracked = 16;
inline bool GnssBestPose::_internal_has_num_sats_tracked() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_tracked() const {
  return _internal_has_num_sats_tracked();
}
inline void GnssBestPose::clear_num_sats_tracked() {
  _impl_.num_sats_tracked_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t GnssBestPose::_internal_num_sats_tracked() const {
  return _impl_.num_sats_tracked_;
}
inline uint32_t GnssBestPose::num_sats_tracked() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
  return _internal_num_sats_tracked();
}
inline void GnssBestPose::_internal_set_num_sats_tracked(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.num_sats_tracked_ = value;
}
inline void GnssBestPose::set_num_sats_tracked(uint32_t value) {
  _internal_set_num_sats_tracked(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
}

// optional uint32 num_sats_in_solution = 17;
inline bool GnssBestPose::_internal_has_num_sats_in_solution() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_in_solution() const {
  return _internal_has_num_sats_in_solution();
}
inline void GnssBestPose::clear_num_sats_in_solution() {
  _impl_.num_sats_in_solution_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t GnssBestPose::_internal_num_sats_in_solution() const {
  return _impl_.num_sats_in_solution_;
}
inline uint32_t GnssBestPose::num_sats_in_solution() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
  return _internal_num_sats_in_solution();
}
inline void GnssBestPose::_internal_set_num_sats_in_solution(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.num_sats_in_solution_ = value;
}
inline void GnssBestPose::set_num_sats_in_solution(uint32_t value) {
  _internal_set_num_sats_in_solution(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
}

// optional uint32 num_sats_l1 = 18;
inline bool GnssBestPose::_internal_has_num_sats_l1() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_l1() const {
  return _internal_has_num_sats_l1();
}
inline void GnssBestPose::clear_num_sats_l1() {
  _impl_.num_sats_l1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t GnssBestPose::_internal_num_sats_l1() const {
  return _impl_.num_sats_l1_;
}
inline uint32_t GnssBestPose::num_sats_l1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
  return _internal_num_sats_l1();
}
inline void GnssBestPose::_internal_set_num_sats_l1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.num_sats_l1_ = value;
}
inline void GnssBestPose::set_num_sats_l1(uint32_t value) {
  _internal_set_num_sats_l1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
}

// optional uint32 num_sats_multi = 19;
inline bool GnssBestPose::_internal_has_num_sats_multi() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_multi() const {
  return _internal_has_num_sats_multi();
}
inline void GnssBestPose::clear_num_sats_multi() {
  _impl_.num_sats_multi_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t GnssBestPose::_internal_num_sats_multi() const {
  return _impl_.num_sats_multi_;
}
inline uint32_t GnssBestPose::num_sats_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
  return _internal_num_sats_multi();
}
inline void GnssBestPose::_internal_set_num_sats_multi(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.num_sats_multi_ = value;
}
inline void GnssBestPose::set_num_sats_multi(uint32_t value) {
  _internal_set_num_sats_multi(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
}

// optional uint32 reserved = 20;
inline bool GnssBestPose::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool GnssBestPose::has_reserved() const {
  return _internal_has_reserved();
}
inline void GnssBestPose::clear_reserved() {
  _impl_.reserved_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t GnssBestPose::_internal_reserved() const {
  return _impl_.reserved_;
}
inline uint32_t GnssBestPose::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.reserved)
  return _internal_reserved();
}
inline void GnssBestPose::_internal_set_reserved(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.reserved_ = value;
}
inline void GnssBestPose::set_reserved(uint32_t value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.reserved)
}

// optional uint32 extended_solution_status = 21;
inline bool GnssBestPose::_internal_has_extended_solution_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool GnssBestPose::has_extended_solution_status() const {
  return _internal_has_extended_solution_status();
}
inline void GnssBestPose::clear_extended_solution_status() {
  _impl_.extended_solution_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t GnssBestPose::_internal_extended_solution_status() const {
  return _impl_.extended_solution_status_;
}
inline uint32_t GnssBestPose::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
  return _internal_extended_solution_status();
}
inline void GnssBestPose::_internal_set_extended_solution_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.extended_solution_status_ = value;
}
inline void GnssBestPose::set_extended_solution_status(uint32_t value) {
  _internal_set_extended_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
}

// optional uint32 galileo_beidou_used_mask = 22;
inline bool GnssBestPose::_internal_has_galileo_beidou_used_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GnssBestPose::has_galileo_beidou_used_mask() const {
  return _internal_has_galileo_beidou_used_mask();
}
inline void GnssBestPose::clear_galileo_beidou_used_mask() {
  _impl_.galileo_beidou_used_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t GnssBestPose::_internal_galileo_beidou_used_mask() const {
  return _impl_.galileo_beidou_used_mask_;
}
inline uint32_t GnssBestPose::galileo_beidou_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
  return _internal_galileo_beidou_used_mask();
}
inline void GnssBestPose::_internal_set_galileo_beidou_used_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.galileo_beidou_used_mask_ = value;
}
inline void GnssBestPose::set_galileo_beidou_used_mask(uint32_t value) {
  _internal_set_galileo_beidou_used_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
}

// optional uint32 gps_glonass_used_mask = 23;
inline bool GnssBestPose::_internal_has_gps_glonass_used_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool GnssBestPose::has_gps_glonass_used_mask() const {
  return _internal_has_gps_glonass_used_mask();
}
inline void GnssBestPose::clear_gps_glonass_used_mask() {
  _impl_.gps_glonass_used_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t GnssBestPose::_internal_gps_glonass_used_mask() const {
  return _impl_.gps_glonass_used_mask_;
}
inline uint32_t GnssBestPose::gps_glonass_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
  return _internal_gps_glonass_used_mask();
}
inline void GnssBestPose::_internal_set_gps_glonass_used_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.gps_glonass_used_mask_ = value;
}
inline void GnssBestPose::set_gps_glonass_used_mask(uint32_t value) {
  _internal_set_gps_glonass_used_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionStatus>() {
  return ::apollo::drivers::gnss::SolutionStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionType>() {
  return ::apollo::drivers::gnss::SolutionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::DatumId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::DatumId>() {
  return ::apollo::drivers::gnss::DatumId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
