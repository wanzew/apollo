// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto

#include "modules/drivers/gnss/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
PROTOBUF_CONSTEXPR Stream_Serial::Stream_Serial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baud_rate_)*/9600} {}
struct Stream_SerialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_SerialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_SerialDefaultTypeInternal() {}
  union {
    Stream_Serial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_SerialDefaultTypeInternal _Stream_Serial_default_instance_;
PROTOBUF_CONSTEXPR Stream_Tcp::Stream_Tcp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/3001} {}
struct Stream_TcpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_TcpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_TcpDefaultTypeInternal() {}
  union {
    Stream_Tcp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_TcpDefaultTypeInternal _Stream_Tcp_default_instance_;
PROTOBUF_CONSTEXPR Stream_Udp::Stream_Udp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/3001} {}
struct Stream_UdpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_UdpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_UdpDefaultTypeInternal() {}
  union {
    Stream_Udp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_UdpDefaultTypeInternal _Stream_Udp_default_instance_;
PROTOBUF_CONSTEXPR Stream_Ntrip::Stream_Ntrip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mount_point_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/2101
  , /*decltype(_impl_.timeout_s_)*/30u} {}
struct Stream_NtripDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Stream_NtripDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Stream_NtripDefaultTypeInternal() {}
  union {
    Stream_Ntrip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Stream_NtripDefaultTypeInternal _Stream_Ntrip_default_instance_;
PROTOBUF_CONSTEXPR Stream::Stream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.push_location_)*/false
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDefaultTypeInternal() {}
  union {
    Stream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDefaultTypeInternal _Stream_default_instance_;
PROTOBUF_CONSTEXPR NovatelConfig::NovatelConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imu_orientation_)*/5} {}
struct NovatelConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NovatelConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NovatelConfigDefaultTypeInternal() {}
  union {
    NovatelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NovatelConfigDefaultTypeInternal _NovatelConfig_default_instance_;
PROTOBUF_CONSTEXPR NewtonM2Config::NewtonM2Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imu_orientation_)*/5} {}
struct NewtonM2ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewtonM2ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewtonM2ConfigDefaultTypeInternal() {}
  union {
    NewtonM2Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewtonM2ConfigDefaultTypeInternal _NewtonM2Config_default_instance_;
PROTOBUF_CONSTEXPR UbloxConfig::UbloxConfig(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct UbloxConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UbloxConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UbloxConfigDefaultTypeInternal() {}
  union {
    UbloxConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UbloxConfigDefaultTypeInternal _UbloxConfig_default_instance_;
PROTOBUF_CONSTEXPR TF::TF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_id_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.child_frame_id_)*/{nullptr, ::_pbi::ConstantInitialized{}}} {}
struct TFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TFDefaultTypeInternal() {}
  union {
    TF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TFDefaultTypeInternal _TF_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.login_commands_)*/{}
  , /*decltype(_impl_.logout_commands_)*/{}
  , /*decltype(_impl_.proj4_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wheel_parameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.rtk_from_)*/nullptr
  , /*decltype(_impl_.rtk_to_)*/nullptr
  , /*decltype(_impl_.tf_)*/nullptr
  , /*decltype(_impl_.rtk_solution_type_)*/1
  , /*decltype(_impl_.imu_type_)*/13
  , /*decltype(_impl_.device_config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _impl_.baud_rate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _impl_.port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _impl_.port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.mount_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _impl_.timeout_s_),
  0,
  4,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _impl_.format_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _impl_.push_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _impl_.type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _impl_.imu_orientation_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, _impl_.imu_orientation_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::UbloxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _impl_.child_frame_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.rtk_from_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.rtk_to_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.login_commands_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.logout_commands_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.rtk_solution_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.imu_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.proj4_text_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.tf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.wheel_parameters_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _impl_.device_config_),
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  8,
  0,
  6,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::drivers::gnss::config::Stream_Serial)},
  { 10, 18, -1, sizeof(::apollo::drivers::gnss::config::Stream_Tcp)},
  { 20, 28, -1, sizeof(::apollo::drivers::gnss::config::Stream_Udp)},
  { 30, 42, -1, sizeof(::apollo::drivers::gnss::config::Stream_Ntrip)},
  { 48, 61, -1, sizeof(::apollo::drivers::gnss::config::Stream)},
  { 67, 74, -1, sizeof(::apollo::drivers::gnss::config::NovatelConfig)},
  { 75, 82, -1, sizeof(::apollo::drivers::gnss::config::NewtonM2Config)},
  { 83, -1, -1, sizeof(::apollo::drivers::gnss::config::UbloxConfig)},
  { 89, 97, -1, sizeof(::apollo::drivers::gnss::config::TF)},
  { 99, 120, -1, sizeof(::apollo::drivers::gnss::config::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss::config::_Stream_Serial_default_instance_._instance,
  &::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_._instance,
  &::apollo::drivers::gnss::config::_Stream_Udp_default_instance_._instance,
  &::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_._instance,
  &::apollo::drivers::gnss::config::_Stream_default_instance_._instance,
  &::apollo::drivers::gnss::config::_NovatelConfig_default_instance_._instance,
  &::apollo::drivers::gnss::config::_NewtonM2Config_default_instance_._instance,
  &::apollo::drivers::gnss::config::_UbloxConfig_default_instance_._instance,
  &::apollo::drivers::gnss::config::_TF_default_instance_._instance,
  &::apollo::drivers::gnss::config::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/drivers/gnss/proto/config.prot"
  "o\022\032apollo.drivers.gnss.config\"\371\005\n\006Stream"
  "\0229\n\006format\030\001 \001(\0162).apollo.drivers.gnss.c"
  "onfig.Stream.Format\022;\n\006serial\030\002 \001(\0132).ap"
  "ollo.drivers.gnss.config.Stream.SerialH\000"
  "\0225\n\003tcp\030\003 \001(\0132&.apollo.drivers.gnss.conf"
  "ig.Stream.TcpH\000\0225\n\003udp\030\004 \001(\0132&.apollo.dr"
  "ivers.gnss.config.Stream.UdpH\000\0229\n\005ntrip\030"
  "\005 \001(\0132(.apollo.drivers.gnss.config.Strea"
  "m.NtripH\000\022\025\n\rpush_location\030\006 \001(\010\0321\n\006Seri"
  "al\022\016\n\006device\030\001 \001(\014\022\027\n\tbaud_rate\030\002 \001(\005:\0049"
  "600\032*\n\003Tcp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030\002 \001("
  "\005:\0043001\032*\n\003Udp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030"
  "\002 \001(\005:\0043001\032x\n\005Ntrip\022\017\n\007address\030\001 \001(\014\022\022\n"
  "\004port\030\002 \001(\005:\0042101\022\023\n\013mount_point\030\003 \001(\014\022\014"
  "\n\004user\030\004 \001(\014\022\020\n\010password\030\005 \001(\014\022\025\n\ttimeou"
  "t_s\030\006 \001(\r:\00230\"\251\001\n\006Format\022\013\n\007UNKNOWN\020\000\022\010\n"
  "\004NMEA\020\001\022\013\n\007RTCM_V2\020\002\022\013\n\007RTCM_V3\020\003\022\020\n\014NOV"
  "ATEL_TEXT\020\n\022\022\n\016NOVATEL_BINARY\020\013\022\016\n\nUBLOX"
  "_TEXT\020\024\022\020\n\014UBLOX_BINARY\020\025\022\021\n\rNEWTONM2_TE"
  "XT\020\036\022\023\n\017NEWTONM2_BINARY\020\037B\006\n\004type\"+\n\rNov"
  "atelConfig\022\032\n\017imu_orientation\030\001 \001(\005:\0015\","
  "\n\016NewtonM2Config\022\032\n\017imu_orientation\030\001 \001("
  "\005:\0015\"\r\n\013UbloxConfig\">\n\002TF\022\027\n\010frame_id\030\001 "
  "\001(\t:\005world\022\037\n\016child_frame_id\030\002 \001(\t:\007nova"
  "tel\"\221\006\n\006Config\0220\n\004data\030\001 \001(\0132\".apollo.dr"
  "ivers.gnss.config.Stream\0223\n\007command\030\002 \001("
  "\0132\".apollo.drivers.gnss.config.Stream\0224\n"
  "\010rtk_from\030\003 \001(\0132\".apollo.drivers.gnss.co"
  "nfig.Stream\0222\n\006rtk_to\030\004 \001(\0132\".apollo.dri"
  "vers.gnss.config.Stream\022\026\n\016login_command"
  "s\030\005 \003(\014\022\027\n\017logout_commands\030\006 \003(\014\022C\n\016nova"
  "tel_config\030\007 \001(\0132).apollo.drivers.gnss.c"
  "onfig.NovatelConfigH\000\022\?\n\014ublox_config\030\010 "
  "\001(\0132\'.apollo.drivers.gnss.config.UbloxCo"
  "nfigH\000\022E\n\017newtonm2_config\030\017 \001(\0132*.apollo"
  ".drivers.gnss.config.NewtonM2ConfigH\000\022M\n"
  "\021rtk_solution_type\030\t \001(\01622.apollo.driver"
  "s.gnss.config.Config.RtkSolutionType\0225\n\010"
  "imu_type\030\n \001(\0162#.apollo.drivers.gnss.con"
  "fig.ImuType\022\022\n\nproj4_text\030\013 \001(\t\022*\n\002tf\030\014 "
  "\001(\0132\036.apollo.drivers.gnss.config.TF\022\030\n\020w"
  "heel_parameters\030\r \001(\t\"G\n\017RtkSolutionType"
  "\022\031\n\025RTK_RECEIVER_SOLUTION\020\001\022\031\n\025RTK_SOFTW"
  "ARE_SOLUTION\020\002B\017\n\rdevice_config*\230\001\n\007ImuT"
  "ype\022\r\n\tIMAR_FSAS\020\r\022\013\n\007ISA100C\020\032\022\r\n\tADIS1"
  "6488\020\037\022\013\n\007STIM300\020 \022\n\n\006ISA100\020\"\022\020\n\014ISA10"
  "0_400HZ\020&\022\021\n\rISA100C_400HZ\020\'\022\t\n\005G320N\020(\022"
  "\016\n\nCPT_XW5651\020)\022\t\n\005UM442\020*"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto = {
    false, false, 1946, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto,
    "modules/drivers/gnss/proto/config.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stream_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[0];
}
bool Stream_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 20:
    case 21:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Stream_Format Stream::UNKNOWN;
constexpr Stream_Format Stream::NMEA;
constexpr Stream_Format Stream::RTCM_V2;
constexpr Stream_Format Stream::RTCM_V3;
constexpr Stream_Format Stream::NOVATEL_TEXT;
constexpr Stream_Format Stream::NOVATEL_BINARY;
constexpr Stream_Format Stream::UBLOX_TEXT;
constexpr Stream_Format Stream::UBLOX_BINARY;
constexpr Stream_Format Stream::NEWTONM2_TEXT;
constexpr Stream_Format Stream::NEWTONM2_BINARY;
constexpr Stream_Format Stream::Format_MIN;
constexpr Stream_Format Stream::Format_MAX;
constexpr int Stream::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_RtkSolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[1];
}
bool Config_RtkSolutionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Config_RtkSolutionType Config::RTK_RECEIVER_SOLUTION;
constexpr Config_RtkSolutionType Config::RTK_SOFTWARE_SOLUTION;
constexpr Config_RtkSolutionType Config::RtkSolutionType_MIN;
constexpr Config_RtkSolutionType Config::RtkSolutionType_MAX;
constexpr int Config::RtkSolutionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[2];
}
bool ImuType_IsValid(int value) {
  switch (value) {
    case 13:
    case 26:
    case 31:
    case 32:
    case 34:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Stream_Serial::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Serial>()._impl_._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baud_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Serial::Stream_Serial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Stream.Serial)
}
Stream_Serial::Stream_Serial(const Stream_Serial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_){}
    , decltype(_impl_.baud_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device()) {
    _impl_.device_.Set(from._internal_device(), 
      GetArenaForAllocation());
  }
  _impl_.baud_rate_ = from._impl_.baud_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Serial)
}

inline void Stream_Serial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_){}
    , decltype(_impl_.baud_rate_){9600}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stream_Serial::~Stream_Serial() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Serial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream_Serial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.Destroy();
}

void Stream_Serial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream_Serial::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Serial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.device_.ClearNonDefaultToEmpty();
    }
    _impl_.baud_rate_ = 9600;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream_Serial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 baud_rate = 2 [default = 9600];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_baud_rate(&has_bits);
          _impl_.baud_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream_Serial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Serial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device(), target);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_baud_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Serial)
  return target;
}

size_t Stream_Serial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Serial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_device());
    }

    // optional int32 baud_rate = 2 [default = 9600];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baud_rate());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream_Serial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream_Serial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream_Serial::GetClassData() const { return &_class_data_; }

void Stream_Serial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream_Serial *>(to)->MergeFrom(
      static_cast<const Stream_Serial &>(from));
}


void Stream_Serial::MergeFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.baud_rate_ = from._impl_.baud_rate_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream_Serial::CopyFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Serial::IsInitialized() const {
  return true;
}

void Stream_Serial::InternalSwap(Stream_Serial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  swap(_impl_.baud_rate_, other->_impl_.baud_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Serial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[0]);
}

// ===================================================================

class Stream_Tcp::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Tcp>()._impl_._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Tcp::Stream_Tcp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Stream.Tcp)
}
Stream_Tcp::Stream_Tcp(const Stream_Tcp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _impl_.address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  _impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Tcp)
}

inline void Stream_Tcp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.port_){3001}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stream_Tcp::~Stream_Tcp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Tcp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream_Tcp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void Stream_Tcp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream_Tcp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Tcp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    _impl_.port_ = 3001;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream_Tcp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 3001];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream_Tcp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Tcp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Tcp)
  return target;
}

size_t Stream_Tcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Tcp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional int32 port = 2 [default = 3001];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream_Tcp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream_Tcp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream_Tcp::GetClassData() const { return &_class_data_; }

void Stream_Tcp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream_Tcp *>(to)->MergeFrom(
      static_cast<const Stream_Tcp &>(from));
}


void Stream_Tcp::MergeFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.port_ = from._impl_.port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream_Tcp::CopyFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Tcp::IsInitialized() const {
  return true;
}

void Stream_Tcp::InternalSwap(Stream_Tcp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Tcp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[1]);
}

// ===================================================================

class Stream_Udp::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Udp>()._impl_._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Udp::Stream_Udp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Stream.Udp)
}
Stream_Udp::Stream_Udp(const Stream_Udp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _impl_.address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  _impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Udp)
}

inline void Stream_Udp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.port_){3001}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stream_Udp::~Stream_Udp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Udp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream_Udp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void Stream_Udp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream_Udp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Udp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    _impl_.port_ = 3001;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream_Udp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 3001];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream_Udp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Udp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Udp)
  return target;
}

size_t Stream_Udp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Udp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional int32 port = 2 [default = 3001];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream_Udp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream_Udp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream_Udp::GetClassData() const { return &_class_data_; }

void Stream_Udp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream_Udp *>(to)->MergeFrom(
      static_cast<const Stream_Udp &>(from));
}


void Stream_Udp::MergeFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.port_ = from._impl_.port_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream_Udp::CopyFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Udp::IsInitialized() const {
  return true;
}

void Stream_Udp::InternalSwap(Stream_Udp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Udp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[2]);
}

// ===================================================================

class Stream_Ntrip::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Ntrip>()._impl_._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mount_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeout_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Stream_Ntrip::Stream_Ntrip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}
Stream_Ntrip::Stream_Ntrip(const Stream_Ntrip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.mount_point_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.timeout_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _impl_.address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  _impl_.mount_point_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_point_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mount_point()) {
    _impl_.mount_point_.Set(from._internal_mount_point(), 
      GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _impl_.user_.Set(from._internal_user(), 
      GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _impl_.password_.Set(from._internal_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_s_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.timeout_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}

inline void Stream_Ntrip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_){}
    , decltype(_impl_.mount_point_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.port_){2101}
    , decltype(_impl_.timeout_s_){30u}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mount_point_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_point_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stream_Ntrip::~Stream_Ntrip() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Ntrip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream_Ntrip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.mount_point_.Destroy();
  _impl_.user_.Destroy();
  _impl_.password_.Destroy();
}

void Stream_Ntrip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream_Ntrip::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Ntrip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mount_point_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    _impl_.port_ = 2101;
    _impl_.timeout_s_ = 30u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream_Ntrip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 2101];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mount_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mount_point();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timeout_s = 6 [default = 30];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timeout_s(&has_bits);
          _impl_.timeout_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream_Ntrip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Ntrip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mount_point(), target);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user(), target);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_password(), target);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeout_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Ntrip)
  return target;
}

size_t Stream_Ntrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Ntrip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional bytes mount_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mount_point());
    }

    // optional bytes user = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user());
    }

    // optional bytes password = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_password());
    }

    // optional int32 port = 2 [default = 2101];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

    // optional uint32 timeout_s = 6 [default = 30];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream_Ntrip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream_Ntrip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream_Ntrip::GetClassData() const { return &_class_data_; }

void Stream_Ntrip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream_Ntrip *>(to)->MergeFrom(
      static_cast<const Stream_Ntrip &>(from));
}


void Stream_Ntrip::MergeFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mount_point(from._internal_mount_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.timeout_s_ = from._impl_.timeout_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream_Ntrip::CopyFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Ntrip::IsInitialized() const {
  return true;
}

void Stream_Ntrip::InternalSwap(Stream_Ntrip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mount_point_, lhs_arena,
      &other->_impl_.mount_point_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
  swap(_impl_.timeout_s_, other->_impl_.timeout_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Ntrip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[3]);
}

// ===================================================================

class Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream>()._impl_._has_bits_);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::gnss::config::Stream_Serial& serial(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Tcp& tcp(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Udp& udp(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Ntrip& ntrip(const Stream* msg);
  static void set_has_push_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::gnss::config::Stream_Serial&
Stream::_Internal::serial(const Stream* msg) {
  return *msg->_impl_.type_.serial_;
}
const ::apollo::drivers::gnss::config::Stream_Tcp&
Stream::_Internal::tcp(const Stream* msg) {
  return *msg->_impl_.type_.tcp_;
}
const ::apollo::drivers::gnss::config::Stream_Udp&
Stream::_Internal::udp(const Stream* msg) {
  return *msg->_impl_.type_.udp_;
}
const ::apollo::drivers::gnss::config::Stream_Ntrip&
Stream::_Internal::ntrip(const Stream* msg) {
  return *msg->_impl_.type_.ntrip_;
}
void Stream::set_allocated_serial(::apollo::drivers::gnss::config::Stream_Serial* serial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (serial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(serial);
    if (message_arena != submessage_arena) {
      serial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serial, submessage_arena);
    }
    set_has_serial();
    _impl_.type_.serial_ = serial;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.serial)
}
void Stream::set_allocated_tcp(::apollo::drivers::gnss::config::Stream_Tcp* tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp);
    if (message_arena != submessage_arena) {
      tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    set_has_tcp();
    _impl_.type_.tcp_ = tcp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.tcp)
}
void Stream::set_allocated_udp(::apollo::drivers::gnss::config::Stream_Udp* udp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (udp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(udp);
    if (message_arena != submessage_arena) {
      udp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udp, submessage_arena);
    }
    set_has_udp();
    _impl_.type_.udp_ = udp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.udp)
}
void Stream::set_allocated_ntrip(::apollo::drivers::gnss::config::Stream_Ntrip* ntrip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (ntrip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ntrip);
    if (message_arena != submessage_arena) {
      ntrip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntrip, submessage_arena);
    }
    set_has_ntrip();
    _impl_.type_.ntrip_ = ntrip;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.ntrip)
}
Stream::Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){}
    , decltype(_impl_.push_location_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.format_, &from._impl_.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.push_location_) -
    reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.push_location_));
  clear_has_type();
  switch (from.type_case()) {
    case kSerial: {
      _internal_mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from._internal_serial());
      break;
    }
    case kTcp: {
      _internal_mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from._internal_tcp());
      break;
    }
    case kUdp: {
      _internal_mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from._internal_udp());
      break;
    }
    case kNtrip: {
      _internal_mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from._internal_ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream)
}

inline void Stream::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.push_location_){false}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Stream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Stream)
  switch (type_case()) {
    case kSerial: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.serial_;
      }
      break;
    }
    case kTcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.tcp_;
      }
      break;
    }
    case kUdp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.udp_;
      }
      break;
    }
    case kNtrip: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.ntrip_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.push_location_) -
        reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.push_location_));
  }
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::Stream_Format_IsValid(val))) {
            _internal_set_format(static_cast<::apollo::drivers::gnss::config::Stream_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.Stream.Serial serial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.Stream.Udp udp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_udp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntrip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool push_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_push_location(&has_bits);
          _impl_.push_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  switch (type_case()) {
    case kSerial: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::serial(this),
          _Internal::serial(this).GetCachedSize(), target, stream);
      break;
    }
    case kTcp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::tcp(this),
          _Internal::tcp(this).GetCachedSize(), target, stream);
      break;
    }
    case kUdp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::udp(this),
          _Internal::udp(this).GetCachedSize(), target, stream);
      break;
    }
    case kNtrip: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::ntrip(this),
          _Internal::ntrip(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_push_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_format());
    }

    // optional bool push_location = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  switch (type_case()) {
    // .apollo.drivers.gnss.config.Stream.Serial serial = 2;
    case kSerial: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.serial_);
      break;
    }
    // .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
    case kTcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.tcp_);
      break;
    }
    // .apollo.drivers.gnss.config.Stream.Udp udp = 4;
    case kUdp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.udp_);
      break;
    }
    // .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
    case kNtrip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.ntrip_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream::GetClassData() const { return &_class_data_; }

void Stream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stream *>(to)->MergeFrom(
      static_cast<const Stream &>(from));
}


void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.format_ = from._impl_.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.push_location_ = from._impl_.push_location_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_case()) {
    case kSerial: {
      _internal_mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from._internal_serial());
      break;
    }
    case kTcp: {
      _internal_mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from._internal_tcp());
      break;
    }
    case kUdp: {
      _internal_mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from._internal_udp());
      break;
    }
    case kNtrip: {
      _internal_mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from._internal_ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stream, _impl_.push_location_)
      + sizeof(Stream::_impl_.push_location_)
      - PROTOBUF_FIELD_OFFSET(Stream, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[4]);
}

// ===================================================================

class NovatelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NovatelConfig>()._impl_._has_bits_);
  static void set_has_imu_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NovatelConfig::NovatelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.NovatelConfig)
}
NovatelConfig::NovatelConfig(const NovatelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imu_orientation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imu_orientation_ = from._impl_.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.NovatelConfig)
}

inline void NovatelConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imu_orientation_){5}
  };
}

NovatelConfig::~NovatelConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.NovatelConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NovatelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NovatelConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NovatelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.NovatelConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imu_orientation_ = 5;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NovatelConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_imu_orientation(&has_bits);
          _impl_.imu_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NovatelConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.NovatelConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_imu_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.NovatelConfig)
  return target;
}

size_t NovatelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.NovatelConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 imu_orientation = 1 [default = 5];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_imu_orientation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NovatelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NovatelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NovatelConfig::GetClassData() const { return &_class_data_; }

void NovatelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NovatelConfig *>(to)->MergeFrom(
      static_cast<const NovatelConfig &>(from));
}


void NovatelConfig::MergeFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_imu_orientation()) {
    _internal_set_imu_orientation(from._internal_imu_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NovatelConfig::CopyFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovatelConfig::IsInitialized() const {
  return true;
}

void NovatelConfig::InternalSwap(NovatelConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_orientation_, other->_impl_.imu_orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NovatelConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[5]);
}

// ===================================================================

class NewtonM2Config::_Internal {
 public:
  using HasBits = decltype(std::declval<NewtonM2Config>()._impl_._has_bits_);
  static void set_has_imu_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewtonM2Config::NewtonM2Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.NewtonM2Config)
}
NewtonM2Config::NewtonM2Config(const NewtonM2Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imu_orientation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imu_orientation_ = from._impl_.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.NewtonM2Config)
}

inline void NewtonM2Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imu_orientation_){5}
  };
}

NewtonM2Config::~NewtonM2Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.NewtonM2Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewtonM2Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewtonM2Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewtonM2Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.NewtonM2Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imu_orientation_ = 5;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewtonM2Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_imu_orientation(&has_bits);
          _impl_.imu_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewtonM2Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.NewtonM2Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_imu_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.NewtonM2Config)
  return target;
}

size_t NewtonM2Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.NewtonM2Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 imu_orientation = 1 [default = 5];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_imu_orientation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewtonM2Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewtonM2Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewtonM2Config::GetClassData() const { return &_class_data_; }

void NewtonM2Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewtonM2Config *>(to)->MergeFrom(
      static_cast<const NewtonM2Config &>(from));
}


void NewtonM2Config::MergeFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_imu_orientation()) {
    _internal_set_imu_orientation(from._internal_imu_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewtonM2Config::CopyFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewtonM2Config::IsInitialized() const {
  return true;
}

void NewtonM2Config::InternalSwap(NewtonM2Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_orientation_, other->_impl_.imu_orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewtonM2Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[6]);
}

// ===================================================================

class UbloxConfig::_Internal {
 public:
};

UbloxConfig::UbloxConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.UbloxConfig)
}
UbloxConfig::UbloxConfig(const UbloxConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.UbloxConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UbloxConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UbloxConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UbloxConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[7]);
}

// ===================================================================

class TF::_Internal {
 public:
  using HasBits = decltype(std::declval<TF>()._impl_._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TF::Impl_::_i_give_permission_to_break_this_code_default_frame_id_{{{"world", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TF::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_{{{"novatel", 7}}, {nullptr}};
TF::TF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.TF)
}
TF::TF(const TF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.child_frame_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frame_id_.InitDefault();
  if (from._internal_has_frame_id()) {
    _impl_.frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  _impl_.child_frame_id_.InitDefault();
  if (from._internal_has_child_frame_id()) {
    _impl_.child_frame_id_.Set(from._internal_child_frame_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.TF)
}

inline void TF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_id_){}
    , decltype(_impl_.child_frame_id_){}
  };
  _impl_.frame_id_.InitDefault();
  _impl_.child_frame_id_.InitDefault();
}

TF::~TF() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.TF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_id_.Destroy();
  _impl_.child_frame_id_.Destroy();
}

void TF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TF::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.TF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.frame_id_.ClearToDefault(::apollo::drivers::gnss::config::TF::Impl_::_i_give_permission_to_break_this_code_default_frame_id_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.child_frame_id_.ClearToDefault(::apollo::drivers::gnss::config::TF::Impl_::_i_give_permission_to_break_this_code_default_child_frame_id_, GetArenaForAllocation());
       }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frame_id = 1 [default = "world"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.gnss.config.TF.frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string child_frame_id = 2 [default = "novatel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_child_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.gnss.config.TF.child_frame_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.TF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_id(), target);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_child_frame_id().data(), static_cast<int>(this->_internal_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.child_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_child_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.TF)
  return target;
}

size_t TF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.TF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string frame_id = 1 [default = "world"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string child_frame_id = 2 [default = "novatel"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_child_frame_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TF::GetClassData() const { return &_class_data_; }

void TF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TF *>(to)->MergeFrom(
      static_cast<const TF &>(from));
}


void TF::MergeFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_child_frame_id(from._internal_child_frame_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TF::CopyFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TF::IsInitialized() const {
  return true;
}

void TF::InternalSwap(TF* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_id_, lhs_arena,
      &other->_impl_.frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_frame_id_, lhs_arena,
      &other->_impl_.child_frame_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[8]);
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._impl_._has_bits_);
  static const ::apollo::drivers::gnss::config::Stream& data(const Config* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::gnss::config::Stream& command(const Config* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::gnss::config::Stream& rtk_from(const Config* msg);
  static void set_has_rtk_from(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::drivers::gnss::config::Stream& rtk_to(const Config* msg);
  static void set_has_rtk_to(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::drivers::gnss::config::NovatelConfig& novatel_config(const Config* msg);
  static const ::apollo::drivers::gnss::config::UbloxConfig& ublox_config(const Config* msg);
  static const ::apollo::drivers::gnss::config::NewtonM2Config& newtonm2_config(const Config* msg);
  static void set_has_rtk_solution_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_imu_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_proj4_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::gnss::config::TF& tf(const Config* msg);
  static void set_has_tf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wheel_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::data(const Config* msg) {
  return *msg->_impl_.data_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::command(const Config* msg) {
  return *msg->_impl_.command_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::rtk_from(const Config* msg) {
  return *msg->_impl_.rtk_from_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::rtk_to(const Config* msg) {
  return *msg->_impl_.rtk_to_;
}
const ::apollo::drivers::gnss::config::NovatelConfig&
Config::_Internal::novatel_config(const Config* msg) {
  return *msg->_impl_.device_config_.novatel_config_;
}
const ::apollo::drivers::gnss::config::UbloxConfig&
Config::_Internal::ublox_config(const Config* msg) {
  return *msg->_impl_.device_config_.ublox_config_;
}
const ::apollo::drivers::gnss::config::NewtonM2Config&
Config::_Internal::newtonm2_config(const Config* msg) {
  return *msg->_impl_.device_config_.newtonm2_config_;
}
const ::apollo::drivers::gnss::config::TF&
Config::_Internal::tf(const Config* msg) {
  return *msg->_impl_.tf_;
}
void Config::set_allocated_novatel_config(::apollo::drivers::gnss::config::NovatelConfig* novatel_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_device_config();
  if (novatel_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(novatel_config);
    if (message_arena != submessage_arena) {
      novatel_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, novatel_config, submessage_arena);
    }
    set_has_novatel_config();
    _impl_.device_config_.novatel_config_ = novatel_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.novatel_config)
}
void Config::set_allocated_ublox_config(::apollo::drivers::gnss::config::UbloxConfig* ublox_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_device_config();
  if (ublox_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ublox_config);
    if (message_arena != submessage_arena) {
      ublox_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ublox_config, submessage_arena);
    }
    set_has_ublox_config();
    _impl_.device_config_.ublox_config_ = ublox_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.ublox_config)
}
void Config::set_allocated_newtonm2_config(::apollo::drivers::gnss::config::NewtonM2Config* newtonm2_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_device_config();
  if (newtonm2_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newtonm2_config);
    if (message_arena != submessage_arena) {
      newtonm2_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newtonm2_config, submessage_arena);
    }
    set_has_newtonm2_config();
    _impl_.device_config_.newtonm2_config_ = newtonm2_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.newtonm2_config)
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.login_commands_){from._impl_.login_commands_}
    , decltype(_impl_.logout_commands_){from._impl_.logout_commands_}
    , decltype(_impl_.proj4_text_){}
    , decltype(_impl_.wheel_parameters_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.rtk_from_){nullptr}
    , decltype(_impl_.rtk_to_){nullptr}
    , decltype(_impl_.tf_){nullptr}
    , decltype(_impl_.rtk_solution_type_){}
    , decltype(_impl_.imu_type_){}
    , decltype(_impl_.device_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proj4_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj4_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proj4_text()) {
    _impl_.proj4_text_.Set(from._internal_proj4_text(), 
      GetArenaForAllocation());
  }
  _impl_.wheel_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wheel_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wheel_parameters()) {
    _impl_.wheel_parameters_.Set(from._internal_wheel_parameters(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _impl_.data_ = new ::apollo::drivers::gnss::config::Stream(*from._impl_.data_);
  }
  if (from._internal_has_command()) {
    _impl_.command_ = new ::apollo::drivers::gnss::config::Stream(*from._impl_.command_);
  }
  if (from._internal_has_rtk_from()) {
    _impl_.rtk_from_ = new ::apollo::drivers::gnss::config::Stream(*from._impl_.rtk_from_);
  }
  if (from._internal_has_rtk_to()) {
    _impl_.rtk_to_ = new ::apollo::drivers::gnss::config::Stream(*from._impl_.rtk_to_);
  }
  if (from._internal_has_tf()) {
    _impl_.tf_ = new ::apollo::drivers::gnss::config::TF(*from._impl_.tf_);
  }
  ::memcpy(&_impl_.rtk_solution_type_, &from._impl_.rtk_solution_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.imu_type_) -
    reinterpret_cast<char*>(&_impl_.rtk_solution_type_)) + sizeof(_impl_.imu_type_));
  clear_has_device_config();
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      _internal_mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from._internal_novatel_config());
      break;
    }
    case kUbloxConfig: {
      _internal_mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from._internal_ublox_config());
      break;
    }
    case kNewtonm2Config: {
      _internal_mutable_newtonm2_config()->::apollo::drivers::gnss::config::NewtonM2Config::MergeFrom(from._internal_newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.login_commands_){arena}
    , decltype(_impl_.logout_commands_){arena}
    , decltype(_impl_.proj4_text_){}
    , decltype(_impl_.wheel_parameters_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.rtk_from_){nullptr}
    , decltype(_impl_.rtk_to_){nullptr}
    , decltype(_impl_.tf_){nullptr}
    , decltype(_impl_.rtk_solution_type_){1}
    , decltype(_impl_.imu_type_){13}
    , decltype(_impl_.device_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.proj4_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj4_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wheel_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wheel_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_device_config();
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_commands_.~RepeatedPtrField();
  _impl_.logout_commands_.~RepeatedPtrField();
  _impl_.proj4_text_.Destroy();
  _impl_.wheel_parameters_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.rtk_from_;
  if (this != internal_default_instance()) delete _impl_.rtk_to_;
  if (this != internal_default_instance()) delete _impl_.tf_;
  if (has_device_config()) {
    clear_device_config();
  }
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::clear_device_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Config)
  switch (device_config_case()) {
    case kNovatelConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.device_config_.novatel_config_;
      }
      break;
    }
    case kUbloxConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.device_config_.ublox_config_;
      }
      break;
    }
    case kNewtonm2Config: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.device_config_.newtonm2_config_;
      }
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_commands_.Clear();
  _impl_.logout_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.proj4_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wheel_parameters_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.rtk_from_ != nullptr);
      _impl_.rtk_from_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.rtk_to_ != nullptr);
      _impl_.rtk_to_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tf_ != nullptr);
      _impl_.tf_->Clear();
    }
    _impl_.rtk_solution_type_ = 1;
  }
  _impl_.imu_type_ = 13;
  clear_device_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.config.Stream data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes login_commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_login_commands();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes logout_commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logout_commands();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_novatel_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ublox_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::Config_RtkSolutionType_IsValid(val))) {
            _internal_set_rtk_solution_type(static_cast<::apollo::drivers::gnss::config::Config_RtkSolutionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::ImuType_IsValid(val))) {
            _internal_set_imu_type(static_cast<::apollo::drivers::gnss::config::ImuType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string proj4_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_proj4_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.gnss.config.Config.proj4_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.TF tf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string wheel_parameters = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_wheel_parameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.drivers.gnss.config.Config.wheel_parameters");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_newtonm2_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rtk_from(this),
        _Internal::rtk_from(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rtk_to(this),
        _Internal::rtk_to(this).GetCachedSize(), target, stream);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->_internal_login_commands_size(); i < n; i++) {
    const auto& s = this->_internal_login_commands(i);
    target = stream->WriteBytes(5, s, target);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->_internal_logout_commands_size(); i < n; i++) {
    const auto& s = this->_internal_logout_commands(i);
    target = stream->WriteBytes(6, s, target);
  }

  switch (device_config_case()) {
    case kNovatelConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::novatel_config(this),
          _Internal::novatel_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kUbloxConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::ublox_config(this),
          _Internal::ublox_config(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_rtk_solution_type(), target);
  }

  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_imu_type(), target);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proj4_text().data(), static_cast<int>(this->_internal_proj4_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.proj4_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_proj4_text(), target);
  }

  // optional .apollo.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tf(this),
        _Internal::tf(this).GetCachedSize(), target, stream);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wheel_parameters().data(), static_cast<int>(this->_internal_wheel_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.wheel_parameters");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_wheel_parameters(), target);
  }

  // .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
  if (_internal_has_newtonm2_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::newtonm2_config(this),
        _Internal::newtonm2_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes login_commands = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.login_commands_.size());
  for (int i = 0, n = _impl_.login_commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.login_commands_.Get(i));
  }

  // repeated bytes logout_commands = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.logout_commands_.size());
  for (int i = 0, n = _impl_.logout_commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.logout_commands_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string proj4_text = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proj4_text());
    }

    // optional string wheel_parameters = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wheel_parameters());
    }

    // optional .apollo.drivers.gnss.config.Stream data = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .apollo.drivers.gnss.config.Stream command = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rtk_from_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rtk_to_);
    }

    // optional .apollo.drivers.gnss.config.TF tf = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tf_);
    }

    // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rtk_solution_type());
    }

  }
  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_imu_type());
  }

  switch (device_config_case()) {
    // .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
    case kNovatelConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_config_.novatel_config_);
      break;
    }
    // .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
    case kUbloxConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_config_.ublox_config_);
      break;
    }
    // .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
    case kNewtonm2Config: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_config_.newtonm2_config_);
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.login_commands_.MergeFrom(from._impl_.login_commands_);
  _impl_.logout_commands_.MergeFrom(from._impl_.logout_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_proj4_text(from._internal_proj4_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_wheel_parameters(from._internal_wheel_parameters());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_command()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rtk_from()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_rtk_from());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rtk_to()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_rtk_to());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tf()->::apollo::drivers::gnss::config::TF::MergeFrom(from._internal_tf());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.rtk_solution_type_ = from._impl_.rtk_solution_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_imu_type(from._internal_imu_type());
  }
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      _internal_mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from._internal_novatel_config());
      break;
    }
    case kUbloxConfig: {
      _internal_mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from._internal_ublox_config());
      break;
    }
    case kNewtonm2Config: {
      _internal_mutable_newtonm2_config()->::apollo::drivers::gnss::config::NewtonM2Config::MergeFrom(from._internal_newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.login_commands_.InternalSwap(&other->_impl_.login_commands_);
  _impl_.logout_commands_.InternalSwap(&other->_impl_.logout_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proj4_text_, lhs_arena,
      &other->_impl_.proj4_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wheel_parameters_, lhs_arena,
      &other->_impl_.wheel_parameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.tf_)
      + sizeof(Config::_impl_.tf_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
  swap(_impl_.rtk_solution_type_, other->_impl_.rtk_solution_type_);
  swap(_impl_.imu_type_, other->_impl_.imu_type_);
  swap(_impl_.device_config_, other->_impl_.device_config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Serial*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Serial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Stream_Serial >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Tcp*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Tcp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Stream_Tcp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Udp*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Udp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Stream_Udp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Ntrip*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Ntrip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Stream_Ntrip >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::NovatelConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::NovatelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::NovatelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::NewtonM2Config*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::NewtonM2Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::NewtonM2Config >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::UbloxConfig*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::UbloxConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::UbloxConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::TF*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::TF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::TF >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Config*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
