// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/heading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class Heading;
struct HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::Heading* Arena::CreateMaybeMessage<::apollo::drivers::gnss::Heading>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

// ===================================================================

class Heading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {}
  ~Heading() override;
  explicit PROTOBUF_CONSTEXPR Heading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heading(const Heading& from);
  Heading(Heading&& from) noexcept
    : Heading() {
    *this = ::std::move(from);
  }

  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heading& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
               &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heading& a, Heading& b) {
    a.Swap(&b);
  }
  inline void Swap(Heading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Heading& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.Heading";
  }
  protected:
  explicit Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationIdFieldNumber = 11,
    kHeaderFieldNumber = 1,
    kMeasurementTimeFieldNumber = 2,
    kSolutionStatusFieldNumber = 3,
    kPositionTypeFieldNumber = 4,
    kBaselineLengthFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kPitchFieldNumber = 7,
    kReservedFieldNumber = 8,
    kHeadingStdDevFieldNumber = 9,
    kPitchStdDevFieldNumber = 10,
    kSatelliteTrackedNumberFieldNumber = 12,
    kSatelliteSoulutionNumberFieldNumber = 13,
    kSatelliteNumberObsFieldNumber = 14,
    kSatelliteNumberMultiFieldNumber = 15,
    kSolutionSourceFieldNumber = 16,
    kExtendedSolutionStatusFieldNumber = 17,
    kGalileoBeidouSigMaskFieldNumber = 18,
    kGpsGlonassSigMaskFieldNumber = 19,
  };
  // optional bytes station_id = 11;
  bool has_station_id() const;
  private:
  bool _internal_has_station_id() const;
  public:
  void clear_station_id();
  const std::string& station_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_station_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_station_id();
  PROTOBUF_NODISCARD std::string* release_station_id();
  void set_allocated_station_id(std::string* station_id);
  private:
  const std::string& _internal_station_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_station_id(const std::string& value);
  std::string* _internal_mutable_station_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional uint32 solution_status = 3;
  bool has_solution_status() const;
  private:
  bool _internal_has_solution_status() const;
  public:
  void clear_solution_status();
  uint32_t solution_status() const;
  void set_solution_status(uint32_t value);
  private:
  uint32_t _internal_solution_status() const;
  void _internal_set_solution_status(uint32_t value);
  public:

  // optional uint32 position_type = 4;
  bool has_position_type() const;
  private:
  bool _internal_has_position_type() const;
  public:
  void clear_position_type();
  uint32_t position_type() const;
  void set_position_type(uint32_t value);
  private:
  uint32_t _internal_position_type() const;
  void _internal_set_position_type(uint32_t value);
  public:

  // optional float baseline_length = 5;
  bool has_baseline_length() const;
  private:
  bool _internal_has_baseline_length() const;
  public:
  void clear_baseline_length();
  float baseline_length() const;
  void set_baseline_length(float value);
  private:
  float _internal_baseline_length() const;
  void _internal_set_baseline_length(float value);
  public:

  // optional float heading = 6;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // optional float pitch = 7;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // optional float reserved = 8;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  float reserved() const;
  void set_reserved(float value);
  private:
  float _internal_reserved() const;
  void _internal_set_reserved(float value);
  public:

  // optional float heading_std_dev = 9;
  bool has_heading_std_dev() const;
  private:
  bool _internal_has_heading_std_dev() const;
  public:
  void clear_heading_std_dev();
  float heading_std_dev() const;
  void set_heading_std_dev(float value);
  private:
  float _internal_heading_std_dev() const;
  void _internal_set_heading_std_dev(float value);
  public:

  // optional float pitch_std_dev = 10;
  bool has_pitch_std_dev() const;
  private:
  bool _internal_has_pitch_std_dev() const;
  public:
  void clear_pitch_std_dev();
  float pitch_std_dev() const;
  void set_pitch_std_dev(float value);
  private:
  float _internal_pitch_std_dev() const;
  void _internal_set_pitch_std_dev(float value);
  public:

  // optional uint32 satellite_tracked_number = 12;
  bool has_satellite_tracked_number() const;
  private:
  bool _internal_has_satellite_tracked_number() const;
  public:
  void clear_satellite_tracked_number();
  uint32_t satellite_tracked_number() const;
  void set_satellite_tracked_number(uint32_t value);
  private:
  uint32_t _internal_satellite_tracked_number() const;
  void _internal_set_satellite_tracked_number(uint32_t value);
  public:

  // optional uint32 satellite_soulution_number = 13;
  bool has_satellite_soulution_number() const;
  private:
  bool _internal_has_satellite_soulution_number() const;
  public:
  void clear_satellite_soulution_number();
  uint32_t satellite_soulution_number() const;
  void set_satellite_soulution_number(uint32_t value);
  private:
  uint32_t _internal_satellite_soulution_number() const;
  void _internal_set_satellite_soulution_number(uint32_t value);
  public:

  // optional uint32 satellite_number_obs = 14;
  bool has_satellite_number_obs() const;
  private:
  bool _internal_has_satellite_number_obs() const;
  public:
  void clear_satellite_number_obs();
  uint32_t satellite_number_obs() const;
  void set_satellite_number_obs(uint32_t value);
  private:
  uint32_t _internal_satellite_number_obs() const;
  void _internal_set_satellite_number_obs(uint32_t value);
  public:

  // optional uint32 satellite_number_multi = 15;
  bool has_satellite_number_multi() const;
  private:
  bool _internal_has_satellite_number_multi() const;
  public:
  void clear_satellite_number_multi();
  uint32_t satellite_number_multi() const;
  void set_satellite_number_multi(uint32_t value);
  private:
  uint32_t _internal_satellite_number_multi() const;
  void _internal_set_satellite_number_multi(uint32_t value);
  public:

  // optional uint32 solution_source = 16;
  bool has_solution_source() const;
  private:
  bool _internal_has_solution_source() const;
  public:
  void clear_solution_source();
  uint32_t solution_source() const;
  void set_solution_source(uint32_t value);
  private:
  uint32_t _internal_solution_source() const;
  void _internal_set_solution_source(uint32_t value);
  public:

  // optional uint32 extended_solution_status = 17;
  bool has_extended_solution_status() const;
  private:
  bool _internal_has_extended_solution_status() const;
  public:
  void clear_extended_solution_status();
  uint32_t extended_solution_status() const;
  void set_extended_solution_status(uint32_t value);
  private:
  uint32_t _internal_extended_solution_status() const;
  void _internal_set_extended_solution_status(uint32_t value);
  public:

  // optional uint32 galileo_beidou_sig_mask = 18;
  bool has_galileo_beidou_sig_mask() const;
  private:
  bool _internal_has_galileo_beidou_sig_mask() const;
  public:
  void clear_galileo_beidou_sig_mask();
  uint32_t galileo_beidou_sig_mask() const;
  void set_galileo_beidou_sig_mask(uint32_t value);
  private:
  uint32_t _internal_galileo_beidou_sig_mask() const;
  void _internal_set_galileo_beidou_sig_mask(uint32_t value);
  public:

  // optional uint32 gps_glonass_sig_mask = 19;
  bool has_gps_glonass_sig_mask() const;
  private:
  bool _internal_has_gps_glonass_sig_mask() const;
  public:
  void clear_gps_glonass_sig_mask();
  uint32_t gps_glonass_sig_mask() const;
  void set_gps_glonass_sig_mask(uint32_t value);
  private:
  uint32_t _internal_gps_glonass_sig_mask() const;
  void _internal_set_gps_glonass_sig_mask(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.Heading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_id_;
    ::apollo::common::Header* header_;
    double measurement_time_;
    uint32_t solution_status_;
    uint32_t position_type_;
    float baseline_length_;
    float heading_;
    float pitch_;
    float reserved_;
    float heading_std_dev_;
    float pitch_std_dev_;
    uint32_t satellite_tracked_number_;
    uint32_t satellite_soulution_number_;
    uint32_t satellite_number_obs_;
    uint32_t satellite_number_multi_;
    uint32_t solution_source_;
    uint32_t extended_solution_status_;
    uint32_t galileo_beidou_sig_mask_;
    uint32_t gps_glonass_sig_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heading

// optional .apollo.common.Header header = 1;
inline bool Heading::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Heading::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Heading::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Heading::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.header)
  return _internal_header();
}
inline void Heading::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.drivers.gnss.Heading.header)
}
inline ::apollo::common::Header* Heading::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Heading::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Heading.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Heading::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* Heading::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Heading.header)
  return _msg;
}
inline void Heading::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Heading.header)
}

// optional double measurement_time = 2;
inline bool Heading::_internal_has_measurement_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Heading::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void Heading::clear_measurement_time() {
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Heading::_internal_measurement_time() const {
  return _impl_.measurement_time_;
}
inline double Heading::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.measurement_time)
  return _internal_measurement_time();
}
inline void Heading::_internal_set_measurement_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.measurement_time_ = value;
}
inline void Heading::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.measurement_time)
}

// optional uint32 solution_status = 3;
inline bool Heading::_internal_has_solution_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Heading::has_solution_status() const {
  return _internal_has_solution_status();
}
inline void Heading::clear_solution_status() {
  _impl_.solution_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Heading::_internal_solution_status() const {
  return _impl_.solution_status_;
}
inline uint32_t Heading::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.solution_status)
  return _internal_solution_status();
}
inline void Heading::_internal_set_solution_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.solution_status_ = value;
}
inline void Heading::set_solution_status(uint32_t value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.solution_status)
}

// optional uint32 position_type = 4;
inline bool Heading::_internal_has_position_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Heading::has_position_type() const {
  return _internal_has_position_type();
}
inline void Heading::clear_position_type() {
  _impl_.position_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Heading::_internal_position_type() const {
  return _impl_.position_type_;
}
inline uint32_t Heading::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.position_type)
  return _internal_position_type();
}
inline void Heading::_internal_set_position_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.position_type_ = value;
}
inline void Heading::set_position_type(uint32_t value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.position_type)
}

// optional float baseline_length = 5;
inline bool Heading::_internal_has_baseline_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Heading::has_baseline_length() const {
  return _internal_has_baseline_length();
}
inline void Heading::clear_baseline_length() {
  _impl_.baseline_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Heading::_internal_baseline_length() const {
  return _impl_.baseline_length_;
}
inline float Heading::baseline_length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.baseline_length)
  return _internal_baseline_length();
}
inline void Heading::_internal_set_baseline_length(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.baseline_length_ = value;
}
inline void Heading::set_baseline_length(float value) {
  _internal_set_baseline_length(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.baseline_length)
}

// optional float heading = 6;
inline bool Heading::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Heading::has_heading() const {
  return _internal_has_heading();
}
inline void Heading::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Heading::_internal_heading() const {
  return _impl_.heading_;
}
inline float Heading::heading() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.heading)
  return _internal_heading();
}
inline void Heading::_internal_set_heading(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.heading_ = value;
}
inline void Heading::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.heading)
}

// optional float pitch = 7;
inline bool Heading::_internal_has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Heading::has_pitch() const {
  return _internal_has_pitch();
}
inline void Heading::clear_pitch() {
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Heading::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Heading::pitch() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.pitch)
  return _internal_pitch();
}
inline void Heading::_internal_set_pitch(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pitch_ = value;
}
inline void Heading::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.pitch)
}

// optional float reserved = 8;
inline bool Heading::_internal_has_reserved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Heading::has_reserved() const {
  return _internal_has_reserved();
}
inline void Heading::clear_reserved() {
  _impl_.reserved_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Heading::_internal_reserved() const {
  return _impl_.reserved_;
}
inline float Heading::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.reserved)
  return _internal_reserved();
}
inline void Heading::_internal_set_reserved(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.reserved_ = value;
}
inline void Heading::set_reserved(float value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.reserved)
}

// optional float heading_std_dev = 9;
inline bool Heading::_internal_has_heading_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Heading::has_heading_std_dev() const {
  return _internal_has_heading_std_dev();
}
inline void Heading::clear_heading_std_dev() {
  _impl_.heading_std_dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Heading::_internal_heading_std_dev() const {
  return _impl_.heading_std_dev_;
}
inline float Heading::heading_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.heading_std_dev)
  return _internal_heading_std_dev();
}
inline void Heading::_internal_set_heading_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.heading_std_dev_ = value;
}
inline void Heading::set_heading_std_dev(float value) {
  _internal_set_heading_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.heading_std_dev)
}

// optional float pitch_std_dev = 10;
inline bool Heading::_internal_has_pitch_std_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Heading::has_pitch_std_dev() const {
  return _internal_has_pitch_std_dev();
}
inline void Heading::clear_pitch_std_dev() {
  _impl_.pitch_std_dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Heading::_internal_pitch_std_dev() const {
  return _impl_.pitch_std_dev_;
}
inline float Heading::pitch_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.pitch_std_dev)
  return _internal_pitch_std_dev();
}
inline void Heading::_internal_set_pitch_std_dev(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.pitch_std_dev_ = value;
}
inline void Heading::set_pitch_std_dev(float value) {
  _internal_set_pitch_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.pitch_std_dev)
}

// optional bytes station_id = 11;
inline bool Heading::_internal_has_station_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Heading::has_station_id() const {
  return _internal_has_station_id();
}
inline void Heading::clear_station_id() {
  _impl_.station_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Heading::station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.station_id)
  return _internal_station_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Heading::set_station_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.station_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.station_id)
}
inline std::string* Heading::mutable_station_id() {
  std::string* _s = _internal_mutable_station_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Heading.station_id)
  return _s;
}
inline const std::string& Heading::_internal_station_id() const {
  return _impl_.station_id_.Get();
}
inline void Heading::_internal_set_station_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.station_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Heading::_internal_mutable_station_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.station_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Heading::release_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Heading.station_id)
  if (!_internal_has_station_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.station_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.station_id_.IsDefault()) {
    _impl_.station_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Heading::set_allocated_station_id(std::string* station_id) {
  if (station_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.station_id_.SetAllocated(station_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.station_id_.IsDefault()) {
    _impl_.station_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Heading.station_id)
}

// optional uint32 satellite_tracked_number = 12;
inline bool Heading::_internal_has_satellite_tracked_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Heading::has_satellite_tracked_number() const {
  return _internal_has_satellite_tracked_number();
}
inline void Heading::clear_satellite_tracked_number() {
  _impl_.satellite_tracked_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t Heading::_internal_satellite_tracked_number() const {
  return _impl_.satellite_tracked_number_;
}
inline uint32_t Heading::satellite_tracked_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_tracked_number)
  return _internal_satellite_tracked_number();
}
inline void Heading::_internal_set_satellite_tracked_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.satellite_tracked_number_ = value;
}
inline void Heading::set_satellite_tracked_number(uint32_t value) {
  _internal_set_satellite_tracked_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_tracked_number)
}

// optional uint32 satellite_soulution_number = 13;
inline bool Heading::_internal_has_satellite_soulution_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Heading::has_satellite_soulution_number() const {
  return _internal_has_satellite_soulution_number();
}
inline void Heading::clear_satellite_soulution_number() {
  _impl_.satellite_soulution_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t Heading::_internal_satellite_soulution_number() const {
  return _impl_.satellite_soulution_number_;
}
inline uint32_t Heading::satellite_soulution_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_soulution_number)
  return _internal_satellite_soulution_number();
}
inline void Heading::_internal_set_satellite_soulution_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.satellite_soulution_number_ = value;
}
inline void Heading::set_satellite_soulution_number(uint32_t value) {
  _internal_set_satellite_soulution_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_soulution_number)
}

// optional uint32 satellite_number_obs = 14;
inline bool Heading::_internal_has_satellite_number_obs() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Heading::has_satellite_number_obs() const {
  return _internal_has_satellite_number_obs();
}
inline void Heading::clear_satellite_number_obs() {
  _impl_.satellite_number_obs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t Heading::_internal_satellite_number_obs() const {
  return _impl_.satellite_number_obs_;
}
inline uint32_t Heading::satellite_number_obs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_number_obs)
  return _internal_satellite_number_obs();
}
inline void Heading::_internal_set_satellite_number_obs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.satellite_number_obs_ = value;
}
inline void Heading::set_satellite_number_obs(uint32_t value) {
  _internal_set_satellite_number_obs(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_number_obs)
}

// optional uint32 satellite_number_multi = 15;
inline bool Heading::_internal_has_satellite_number_multi() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Heading::has_satellite_number_multi() const {
  return _internal_has_satellite_number_multi();
}
inline void Heading::clear_satellite_number_multi() {
  _impl_.satellite_number_multi_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t Heading::_internal_satellite_number_multi() const {
  return _impl_.satellite_number_multi_;
}
inline uint32_t Heading::satellite_number_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.satellite_number_multi)
  return _internal_satellite_number_multi();
}
inline void Heading::_internal_set_satellite_number_multi(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.satellite_number_multi_ = value;
}
inline void Heading::set_satellite_number_multi(uint32_t value) {
  _internal_set_satellite_number_multi(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.satellite_number_multi)
}

// optional uint32 solution_source = 16;
inline bool Heading::_internal_has_solution_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Heading::has_solution_source() const {
  return _internal_has_solution_source();
}
inline void Heading::clear_solution_source() {
  _impl_.solution_source_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t Heading::_internal_solution_source() const {
  return _impl_.solution_source_;
}
inline uint32_t Heading::solution_source() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.solution_source)
  return _internal_solution_source();
}
inline void Heading::_internal_set_solution_source(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.solution_source_ = value;
}
inline void Heading::set_solution_source(uint32_t value) {
  _internal_set_solution_source(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.solution_source)
}

// optional uint32 extended_solution_status = 17;
inline bool Heading::_internal_has_extended_solution_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Heading::has_extended_solution_status() const {
  return _internal_has_extended_solution_status();
}
inline void Heading::clear_extended_solution_status() {
  _impl_.extended_solution_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t Heading::_internal_extended_solution_status() const {
  return _impl_.extended_solution_status_;
}
inline uint32_t Heading::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.extended_solution_status)
  return _internal_extended_solution_status();
}
inline void Heading::_internal_set_extended_solution_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.extended_solution_status_ = value;
}
inline void Heading::set_extended_solution_status(uint32_t value) {
  _internal_set_extended_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.extended_solution_status)
}

// optional uint32 galileo_beidou_sig_mask = 18;
inline bool Heading::_internal_has_galileo_beidou_sig_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Heading::has_galileo_beidou_sig_mask() const {
  return _internal_has_galileo_beidou_sig_mask();
}
inline void Heading::clear_galileo_beidou_sig_mask() {
  _impl_.galileo_beidou_sig_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t Heading::_internal_galileo_beidou_sig_mask() const {
  return _impl_.galileo_beidou_sig_mask_;
}
inline uint32_t Heading::galileo_beidou_sig_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.galileo_beidou_sig_mask)
  return _internal_galileo_beidou_sig_mask();
}
inline void Heading::_internal_set_galileo_beidou_sig_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.galileo_beidou_sig_mask_ = value;
}
inline void Heading::set_galileo_beidou_sig_mask(uint32_t value) {
  _internal_set_galileo_beidou_sig_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.galileo_beidou_sig_mask)
}

// optional uint32 gps_glonass_sig_mask = 19;
inline bool Heading::_internal_has_gps_glonass_sig_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Heading::has_gps_glonass_sig_mask() const {
  return _internal_has_gps_glonass_sig_mask();
}
inline void Heading::clear_gps_glonass_sig_mask() {
  _impl_.gps_glonass_sig_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t Heading::_internal_gps_glonass_sig_mask() const {
  return _impl_.gps_glonass_sig_mask_;
}
inline uint32_t Heading::gps_glonass_sig_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Heading.gps_glonass_sig_mask)
  return _internal_gps_glonass_sig_mask();
}
inline void Heading::_internal_set_gps_glonass_sig_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.gps_glonass_sig_mask_ = value;
}
inline void Heading::set_gps_glonass_sig_mask(uint32_t value) {
  _internal_set_gps_glonass_sig_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Heading.gps_glonass_sig_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto
