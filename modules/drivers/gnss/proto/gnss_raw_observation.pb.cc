// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_raw_observation.proto

#include "modules/drivers/gnss/proto/gnss_raw_observation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss {
PROTOBUF_CONSTEXPR BandObservation::BandObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frequency_value_)*/0
  , /*decltype(_impl_.band_id_)*/0
  , /*decltype(_impl_.pseudo_type_)*/0
  , /*decltype(_impl_.pseudo_range_)*/0
  , /*decltype(_impl_.carrier_phase_)*/0
  , /*decltype(_impl_.doppler_)*/0
  , /*decltype(_impl_.loss_lock_index_)*/0u
  , /*decltype(_impl_.snr_)*/0} {}
struct BandObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BandObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BandObservationDefaultTypeInternal() {}
  union {
    BandObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BandObservationDefaultTypeInternal _BandObservation_default_instance_;
PROTOBUF_CONSTEXPR SatelliteObservation::SatelliteObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.band_obs_)*/{}
  , /*decltype(_impl_.sat_prn_)*/0u
  , /*decltype(_impl_.band_obs_num_)*/0u
  , /*decltype(_impl_.sat_sys_)*/1} {}
struct SatelliteObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatelliteObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatelliteObservationDefaultTypeInternal() {}
  union {
    SatelliteObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatelliteObservationDefaultTypeInternal _SatelliteObservation_default_instance_;
PROTOBUF_CONSTEXPR EpochObservation::EpochObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sat_obs_)*/{}
  , /*decltype(_impl_.receiver_id_)*/0u
  , /*decltype(_impl_.gnss_week_)*/0u
  , /*decltype(_impl_.gnss_second_s_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_.health_flag_)*/0u
  , /*decltype(_impl_.sat_obs_num_)*/0u
  , /*decltype(_impl_.gnss_time_type_)*/1} {}
struct EpochObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochObservationDefaultTypeInternal() {}
  union {
    EpochObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochObservationDefaultTypeInternal _EpochObservation_default_instance_;
PROTOBUF_CONSTEXPR KepplerOrbit::KepplerOrbit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sat_prn_)*/0u
  , /*decltype(_impl_.year_)*/0u
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_.second_s_)*/0
  , /*decltype(_impl_.reserved_)*/0
  , /*decltype(_impl_.af0_)*/0
  , /*decltype(_impl_.af1_)*/0
  , /*decltype(_impl_.af2_)*/0
  , /*decltype(_impl_.iode_)*/0
  , /*decltype(_impl_.deltan_)*/0
  , /*decltype(_impl_.m0_)*/0
  , /*decltype(_impl_.e_)*/0
  , /*decltype(_impl_.roota_)*/0
  , /*decltype(_impl_.toe_)*/0
  , /*decltype(_impl_.toc_)*/0
  , /*decltype(_impl_.cic_)*/0
  , /*decltype(_impl_.week_num_)*/0u
  , /*decltype(_impl_.l2pdataflag_)*/0u
  , /*decltype(_impl_.crc_)*/0
  , /*decltype(_impl_.cis_)*/0
  , /*decltype(_impl_.crs_)*/0
  , /*decltype(_impl_.cuc_)*/0
  , /*decltype(_impl_.cus_)*/0
  , /*decltype(_impl_.omega0_)*/0
  , /*decltype(_impl_.omega_)*/0
  , /*decltype(_impl_.i0_)*/0
  , /*decltype(_impl_.omegadot_)*/0
  , /*decltype(_impl_.idot_)*/0
  , /*decltype(_impl_.codesonl2channel_)*/0
  , /*decltype(_impl_.accuracy_)*/0u
  , /*decltype(_impl_.health_)*/0u
  , /*decltype(_impl_.tgd_)*/0
  , /*decltype(_impl_.iodc_)*/0
  , /*decltype(_impl_.gnss_type_)*/1
  , /*decltype(_impl_.gnss_time_type_)*/1} {}
struct KepplerOrbitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KepplerOrbitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KepplerOrbitDefaultTypeInternal() {}
  union {
    KepplerOrbit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KepplerOrbitDefaultTypeInternal _KepplerOrbit_default_instance_;
PROTOBUF_CONSTEXPR GlonassOrbit::GlonassOrbit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_prn_)*/0u
  , /*decltype(_impl_.year_)*/0u
  , /*decltype(_impl_.toe_)*/0
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_.second_s_)*/0
  , /*decltype(_impl_.frequency_no_)*/0
  , /*decltype(_impl_.week_num_)*/0u
  , /*decltype(_impl_.week_second_s_)*/0
  , /*decltype(_impl_.tk_)*/0
  , /*decltype(_impl_.clock_offset_)*/0
  , /*decltype(_impl_.clock_drift_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_.velocity_x_)*/0
  , /*decltype(_impl_.velocity_y_)*/0
  , /*decltype(_impl_.health_)*/0u
  , /*decltype(_impl_.sat_prn_)*/0u
  , /*decltype(_impl_.velocity_z_)*/0
  , /*decltype(_impl_.accelerate_x_)*/0
  , /*decltype(_impl_.accelerate_y_)*/0
  , /*decltype(_impl_.accelerate_z_)*/0
  , /*decltype(_impl_.infor_age_)*/0
  , /*decltype(_impl_.gnss_type_)*/3
  , /*decltype(_impl_.gnss_time_type_)*/3} {}
struct GlonassOrbitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlonassOrbitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlonassOrbitDefaultTypeInternal() {}
  union {
    GlonassOrbit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlonassOrbitDefaultTypeInternal _GlonassOrbit_default_instance_;
PROTOBUF_CONSTEXPR GnssEphemeris::GnssEphemeris(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keppler_orbit_)*/nullptr
  , /*decltype(_impl_.glonass_orbit_)*/nullptr
  , /*decltype(_impl_.gnss_type_)*/3} {}
struct GnssEphemerisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssEphemerisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssEphemerisDefaultTypeInternal() {}
  union {
    GnssEphemeris _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssEphemerisDefaultTypeInternal _GnssEphemeris_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.band_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.frequency_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.pseudo_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.pseudo_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.carrier_phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.loss_lock_index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.doppler_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _impl_.snr_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _impl_.sat_prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _impl_.sat_sys_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _impl_.band_obs_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _impl_.band_obs_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.gnss_time_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.gnss_week_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.gnss_second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.position_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.health_flag_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.sat_obs_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _impl_.sat_obs_),
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.gnss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.sat_prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.gnss_time_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.week_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.af0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.af1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.af2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.iode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.deltan_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.m0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.e_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.roota_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.toe_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.toc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.cic_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.crc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.cis_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.crs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.cuc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.cus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.omega0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.omega_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.i0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.omegadot_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.idot_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.codesonl2channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.l2pdataflag_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.accuracy_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.tgd_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _impl_.iodc_),
  36,
  0,
  37,
  1,
  2,
  3,
  4,
  5,
  6,
  19,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  20,
  32,
  33,
  34,
  35,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.gnss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.slot_prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.gnss_time_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.toe_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.frequency_no_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.week_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.week_second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.tk_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.clock_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.clock_drift_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.position_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.velocity_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.velocity_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.velocity_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.accelerate_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.accelerate_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.accelerate_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.infor_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _impl_.sat_prn_),
  26,
  0,
  27,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  20,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _impl_.gnss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _impl_.keppler_orbit_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _impl_.glonass_orbit_),
  2,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::apollo::drivers::gnss::BandObservation)},
  { 22, 32, -1, sizeof(::apollo::drivers::gnss::SatelliteObservation)},
  { 36, 52, -1, sizeof(::apollo::drivers::gnss::EpochObservation)},
  { 62, 106, -1, sizeof(::apollo::drivers::gnss::KepplerOrbit)},
  { 144, 178, -1, sizeof(::apollo::drivers::gnss::GlonassOrbit)},
  { 206, 215, -1, sizeof(::apollo::drivers::gnss::GnssEphemeris)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss::_BandObservation_default_instance_._instance,
  &::apollo::drivers::gnss::_SatelliteObservation_default_instance_._instance,
  &::apollo::drivers::gnss::_EpochObservation_default_instance_._instance,
  &::apollo::drivers::gnss::_KepplerOrbit_default_instance_._instance,
  &::apollo::drivers::gnss::_GlonassOrbit_default_instance_._instance,
  &::apollo::drivers::gnss::_GnssEphemeris_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/drivers/gnss/proto/gnss_raw_ob"
  "servation.proto\022\023apollo.drivers.gnss\"\222\002\n"
  "\017BandObservation\022>\n\007band_id\030\001 \001(\0162\037.apol"
  "lo.drivers.gnss.GnssBandID:\014BAND_UNKNOWN"
  "\022\027\n\017frequency_value\030\002 \001(\001\022B\n\013pseudo_type"
  "\030\003 \001(\0162\037.apollo.drivers.gnss.PseudoType:"
  "\014CODE_UNKNOWN\022\024\n\014pseudo_range\030\004 \001(\001\022\025\n\rc"
  "arrier_phase\030\005 \001(\001\022\027\n\017loss_lock_index\030\006 "
  "\001(\r\022\017\n\007doppler\030\007 \001(\001\022\013\n\003snr\030\010 \001(\002\"\256\001\n\024Sa"
  "telliteObservation\022\017\n\007sat_prn\030\001 \001(\r\0227\n\007s"
  "at_sys\030\002 \001(\0162\035.apollo.drivers.gnss.GnssT"
  "ype:\007GPS_SYS\022\024\n\014band_obs_num\030\003 \001(\r\0226\n\010ba"
  "nd_obs\030\004 \003(\0132$.apollo.drivers.gnss.BandO"
  "bservation\"\273\002\n\020EpochObservation\022\023\n\013recei"
  "ver_id\030\001 \001(\r\022C\n\016gnss_time_type\030\002 \001(\0162!.a"
  "pollo.drivers.gnss.GnssTimeType:\010GPS_TIM"
  "E\022\021\n\tgnss_week\030\003 \001(\r\022\025\n\rgnss_second_s\030\004 "
  "\001(\001\022\022\n\nposition_x\030\005 \001(\001\022\022\n\nposition_y\030\006 "
  "\001(\001\022\022\n\nposition_z\030\007 \001(\001\022\026\n\013health_flag\030\010"
  " \001(\r:\0010\022\023\n\013sat_obs_num\030\t \001(\r\022:\n\007sat_obs\030"
  "\n \003(\0132).apollo.drivers.gnss.SatelliteObs"
  "ervation\"\247\005\n\014KepplerOrbit\0229\n\tgnss_type\030\001"
  " \001(\0162\035.apollo.drivers.gnss.GnssType:\007GPS"
  "_SYS\022\017\n\007sat_prn\030\002 \001(\r\022C\n\016gnss_time_type\030"
  "\003 \001(\0162!.apollo.drivers.gnss.GnssTimeType"
  ":\010GPS_TIME\022\014\n\004year\030\004 \001(\r\022\r\n\005month\030\005 \001(\r\022"
  "\013\n\003day\030\006 \001(\r\022\014\n\004hour\030\007 \001(\r\022\016\n\006minute\030\010 \001"
  "(\r\022\020\n\010second_s\030\t \001(\001\022\020\n\010week_num\030\n \001(\r\022\020"
  "\n\010reserved\030\013 \001(\001\022\013\n\003af0\030\014 \001(\001\022\013\n\003af1\030\r \001"
  "(\001\022\013\n\003af2\030\016 \001(\001\022\014\n\004iode\030\017 \001(\001\022\016\n\006deltan\030"
  "\020 \001(\001\022\n\n\002m0\030\021 \001(\001\022\t\n\001e\030\022 \001(\001\022\r\n\005roota\030\023 "
  "\001(\001\022\013\n\003toe\030\024 \001(\001\022\013\n\003toc\030\025 \001(\001\022\013\n\003cic\030\026 \001"
  "(\001\022\013\n\003crc\030\027 \001(\001\022\013\n\003cis\030\030 \001(\001\022\013\n\003crs\030\031 \001("
  "\001\022\013\n\003cuc\030\032 \001(\001\022\013\n\003cus\030\033 \001(\001\022\016\n\006omega0\030\034 "
  "\001(\001\022\r\n\005omega\030\035 \001(\001\022\n\n\002i0\030\036 \001(\001\022\020\n\010omegad"
  "ot\030\037 \001(\001\022\014\n\004idot\030  \001(\001\022\030\n\020codesonL2chann"
  "el\030! \001(\001\022\023\n\013L2Pdataflag\030\" \001(\r\022\020\n\010accurac"
  "y\030# \001(\r\022\016\n\006health\030$ \001(\r\022\013\n\003tgd\030% \001(\001\022\014\n\004"
  "iodc\030& \001(\001\"\353\004\n\014GlonassOrbit\0229\n\tgnss_type"
  "\030\001 \001(\0162\035.apollo.drivers.gnss.GnssType:\007G"
  "LO_SYS\022\020\n\010slot_prn\030\002 \001(\r\022C\n\016gnss_time_ty"
  "pe\030\003 \001(\0162!.apollo.drivers.gnss.GnssTimeT"
  "ype:\010GLO_TIME\022\013\n\003toe\030\004 \001(\001\022\014\n\004year\030\005 \001(\r"
  "\022\r\n\005month\030\006 \001(\r\022\013\n\003day\030\007 \001(\r\022\014\n\004hour\030\010 \001"
  "(\r\022\016\n\006minute\030\t \001(\r\022\020\n\010second_s\030\n \001(\001\022\024\n\014"
  "frequency_no\030\013 \001(\005\022\020\n\010week_num\030\014 \001(\r\022\025\n\r"
  "week_second_s\030\r \001(\001\022\n\n\002tk\030\016 \001(\001\022\024\n\014clock"
  "_offset\030\017 \001(\001\022\023\n\013clock_drift\030\020 \001(\001\022\016\n\006he"
  "alth\030\021 \001(\r\022\022\n\nposition_x\030\022 \001(\001\022\022\n\npositi"
  "on_y\030\023 \001(\001\022\022\n\nposition_z\030\024 \001(\001\022\022\n\nveloci"
  "ty_x\030\025 \001(\001\022\022\n\nvelocity_y\030\026 \001(\001\022\022\n\nveloci"
  "ty_z\030\027 \001(\001\022\024\n\014accelerate_x\030\030 \001(\001\022\024\n\014acce"
  "lerate_y\030\031 \001(\001\022\024\n\014accelerate_z\030\032 \001(\001\022\021\n\t"
  "infor_age\030\033 \001(\001\022\017\n\007sat_prn\030\034 \001(\r\"\276\001\n\rGns"
  "sEphemeris\0229\n\tgnss_type\030\001 \001(\0162\035.apollo.d"
  "rivers.gnss.GnssType:\007GLO_SYS\0228\n\rkeppler"
  "_orbit\030\002 \001(\0132!.apollo.drivers.gnss.Keppl"
  "erOrbit\0228\n\rglonass_orbit\030\003 \001(\0132!.apollo."
  "drivers.gnss.GlonassOrbit*\212\001\n\nGnssBandID"
  "\022\020\n\014BAND_UNKNOWN\020\000\022\n\n\006GPS_L1\020\001\022\n\n\006GPS_L2"
  "\020\002\022\n\n\006GPS_L5\020\003\022\n\n\006BDS_B1\020\004\022\n\n\006BDS_B2\020\005\022\n"
  "\n\006BDS_B3\020\006\022\n\n\006GLO_G1\020\007\022\n\n\006GLO_G2\020\010\022\n\n\006GL"
  "O_G3\020\t*X\n\014GnssTimeType\022\020\n\014TIME_UNKNOWN\020\000"
  "\022\014\n\010GPS_TIME\020\001\022\014\n\010BDS_TIME\020\002\022\014\n\010GLO_TIME"
  "\020\003\022\014\n\010GAL_TIME\020\004*O\n\010GnssType\022\017\n\013SYS_UNKN"
  "OWN\020\000\022\013\n\007GPS_SYS\020\001\022\013\n\007BDS_SYS\020\002\022\013\n\007GLO_S"
  "YS\020\003\022\013\n\007GAL_SYS\020\004*B\n\nPseudoType\022\020\n\014CODE_"
  "UNKNOWN\020\000\022\016\n\nCORSE_CODE\020\001\022\022\n\016PRECISION_C"
  "ODE\020\002"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto = {
    false, false, 2725, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto,
    "modules/drivers/gnss/proto/gnss_raw_observation.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssBandID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[0];
}
bool GnssBandID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssTimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[1];
}
bool GnssTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[2];
}
bool GnssType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PseudoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[3];
}
bool PseudoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BandObservation::_Internal {
 public:
  using HasBits = decltype(std::declval<BandObservation>()._impl_._has_bits_);
  static void set_has_band_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pseudo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudo_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_carrier_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loss_lock_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_doppler(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_snr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

BandObservation::BandObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.BandObservation)
}
BandObservation::BandObservation(const BandObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frequency_value_){}
    , decltype(_impl_.band_id_){}
    , decltype(_impl_.pseudo_type_){}
    , decltype(_impl_.pseudo_range_){}
    , decltype(_impl_.carrier_phase_){}
    , decltype(_impl_.doppler_){}
    , decltype(_impl_.loss_lock_index_){}
    , decltype(_impl_.snr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.frequency_value_, &from._impl_.frequency_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.snr_) -
    reinterpret_cast<char*>(&_impl_.frequency_value_)) + sizeof(_impl_.snr_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.BandObservation)
}

inline void BandObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frequency_value_){0}
    , decltype(_impl_.band_id_){0}
    , decltype(_impl_.pseudo_type_){0}
    , decltype(_impl_.pseudo_range_){0}
    , decltype(_impl_.carrier_phase_){0}
    , decltype(_impl_.doppler_){0}
    , decltype(_impl_.loss_lock_index_){0u}
    , decltype(_impl_.snr_){0}
  };
}

BandObservation::~BandObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.BandObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BandObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BandObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BandObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.BandObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.frequency_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.snr_) -
        reinterpret_cast<char*>(&_impl_.frequency_value_)) + sizeof(_impl_.snr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BandObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssBandID_IsValid(val))) {
            _internal_set_band_id(static_cast<::apollo::drivers::gnss::GnssBandID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double frequency_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_frequency_value(&has_bits);
          _impl_.frequency_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::PseudoType_IsValid(val))) {
            _internal_set_pseudo_type(static_cast<::apollo::drivers::gnss::PseudoType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double pseudo_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_pseudo_range(&has_bits);
          _impl_.pseudo_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double carrier_phase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_carrier_phase(&has_bits);
          _impl_.carrier_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loss_lock_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_loss_lock_index(&has_bits);
          _impl_.loss_lock_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double doppler = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_doppler(&has_bits);
          _impl_.doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_snr(&has_bits);
          _impl_.snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BandObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.BandObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_band_id(), target);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_frequency_value(), target);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pseudo_type(), target);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_pseudo_range(), target);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_carrier_phase(), target);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_loss_lock_index(), target);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_doppler(), target);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_snr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.BandObservation)
  return target;
}

size_t BandObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.BandObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double frequency_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_band_id());
    }

    // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pseudo_type());
    }

    // optional double pseudo_range = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double doppler = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 loss_lock_index = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_loss_lock_index());
    }

    // optional float snr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BandObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BandObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BandObservation::GetClassData() const { return &_class_data_; }

void BandObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BandObservation *>(to)->MergeFrom(
      static_cast<const BandObservation &>(from));
}


void BandObservation::MergeFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.frequency_value_ = from._impl_.frequency_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.band_id_ = from._impl_.band_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pseudo_type_ = from._impl_.pseudo_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pseudo_range_ = from._impl_.pseudo_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.carrier_phase_ = from._impl_.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.doppler_ = from._impl_.doppler_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.loss_lock_index_ = from._impl_.loss_lock_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.snr_ = from._impl_.snr_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BandObservation::CopyFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandObservation::IsInitialized() const {
  return true;
}

void BandObservation::InternalSwap(BandObservation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BandObservation, _impl_.snr_)
      + sizeof(BandObservation::_impl_.snr_)
      - PROTOBUF_FIELD_OFFSET(BandObservation, _impl_.frequency_value_)>(
          reinterpret_cast<char*>(&_impl_.frequency_value_),
          reinterpret_cast<char*>(&other->_impl_.frequency_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BandObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[0]);
}

// ===================================================================

class SatelliteObservation::_Internal {
 public:
  using HasBits = decltype(std::declval<SatelliteObservation>()._impl_._has_bits_);
  static void set_has_sat_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sat_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_band_obs_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SatelliteObservation::SatelliteObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.SatelliteObservation)
}
SatelliteObservation::SatelliteObservation(const SatelliteObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_obs_){from._impl_.band_obs_}
    , decltype(_impl_.sat_prn_){}
    , decltype(_impl_.band_obs_num_){}
    , decltype(_impl_.sat_sys_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sat_prn_, &from._impl_.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sat_sys_) -
    reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.sat_sys_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.SatelliteObservation)
}

inline void SatelliteObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_obs_){arena}
    , decltype(_impl_.sat_prn_){0u}
    , decltype(_impl_.band_obs_num_){0u}
    , decltype(_impl_.sat_sys_){1}
  };
}

SatelliteObservation::~SatelliteObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.SatelliteObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SatelliteObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.band_obs_.~RepeatedPtrField();
}

void SatelliteObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SatelliteObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.SatelliteObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.band_obs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.band_obs_num_) -
        reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.band_obs_num_));
    _impl_.sat_sys_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SatelliteObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sat_prn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sat_prn(&has_bits);
          _impl_.sat_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssType_IsValid(val))) {
            _internal_set_sat_sys(static_cast<::apollo::drivers::gnss::GnssType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 band_obs_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_band_obs_num(&has_bits);
          _impl_.band_obs_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_band_obs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SatelliteObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.SatelliteObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sat_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sat_sys(), target);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_band_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_band_obs_size()); i < n; i++) {
    const auto& repfield = this->_internal_band_obs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.SatelliteObservation)
  return target;
}

size_t SatelliteObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.SatelliteObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  total_size += 1UL * this->_internal_band_obs_size();
  for (const auto& msg : this->_impl_.band_obs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sat_prn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sat_prn());
    }

    // optional uint32 band_obs_num = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_band_obs_num());
    }

    // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sat_sys());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SatelliteObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SatelliteObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SatelliteObservation::GetClassData() const { return &_class_data_; }

void SatelliteObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SatelliteObservation *>(to)->MergeFrom(
      static_cast<const SatelliteObservation &>(from));
}


void SatelliteObservation::MergeFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.band_obs_.MergeFrom(from._impl_.band_obs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sat_prn_ = from._impl_.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.band_obs_num_ = from._impl_.band_obs_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sat_sys_ = from._impl_.sat_sys_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SatelliteObservation::CopyFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteObservation::IsInitialized() const {
  return true;
}

void SatelliteObservation::InternalSwap(SatelliteObservation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.band_obs_.InternalSwap(&other->_impl_.band_obs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatelliteObservation, _impl_.band_obs_num_)
      + sizeof(SatelliteObservation::_impl_.band_obs_num_)
      - PROTOBUF_FIELD_OFFSET(SatelliteObservation, _impl_.sat_prn_)>(
          reinterpret_cast<char*>(&_impl_.sat_prn_),
          reinterpret_cast<char*>(&other->_impl_.sat_prn_));
  swap(_impl_.sat_sys_, other->_impl_.sat_sys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SatelliteObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[1]);
}

// ===================================================================

class EpochObservation::_Internal {
 public:
  using HasBits = decltype(std::declval<EpochObservation>()._impl_._has_bits_);
  static void set_has_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gnss_time_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gnss_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gnss_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_health_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sat_obs_num(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

EpochObservation::EpochObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.EpochObservation)
}
EpochObservation::EpochObservation(const EpochObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_obs_){from._impl_.sat_obs_}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.gnss_week_){}
    , decltype(_impl_.gnss_second_s_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.position_z_){}
    , decltype(_impl_.health_flag_){}
    , decltype(_impl_.sat_obs_num_){}
    , decltype(_impl_.gnss_time_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.receiver_id_, &from._impl_.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gnss_time_type_) -
    reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.EpochObservation)
}

inline void EpochObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_obs_){arena}
    , decltype(_impl_.receiver_id_){0u}
    , decltype(_impl_.gnss_week_){0u}
    , decltype(_impl_.gnss_second_s_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.position_z_){0}
    , decltype(_impl_.health_flag_){0u}
    , decltype(_impl_.sat_obs_num_){0u}
    , decltype(_impl_.gnss_time_type_){1}
  };
}

EpochObservation::~EpochObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.EpochObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EpochObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sat_obs_.~RepeatedPtrField();
}

void EpochObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EpochObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.EpochObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sat_obs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.receiver_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sat_obs_num_) -
        reinterpret_cast<char*>(&_impl_.receiver_id_)) + sizeof(_impl_.sat_obs_num_));
  }
  _impl_.gnss_time_type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 receiver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_receiver_id(&has_bits);
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssTimeType_IsValid(val))) {
            _internal_set_gnss_time_type(static_cast<::apollo::drivers::gnss::GnssTimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gnss_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gnss_week(&has_bits);
          _impl_.gnss_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gnss_second_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_gnss_second_s(&has_bits);
          _impl_.gnss_second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_position_z(&has_bits);
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 health_flag = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_health_flag(&has_bits);
          _impl_.health_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sat_obs_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_sat_obs_num(&has_bits);
          _impl_.sat_obs_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sat_obs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EpochObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.EpochObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gnss_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_gnss_second_s(), target);
  }

  // optional double position_x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_position_x(), target);
  }

  // optional double position_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_position_y(), target);
  }

  // optional double position_z = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_position_z(), target);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_health_flag(), target);
  }

  // optional uint32 sat_obs_num = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sat_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sat_obs_size()); i < n; i++) {
    const auto& repfield = this->_internal_sat_obs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.EpochObservation)
  return target;
}

size_t EpochObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.EpochObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  total_size += 1UL * this->_internal_sat_obs_size();
  for (const auto& msg : this->_impl_.sat_obs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 receiver_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_receiver_id());
    }

    // optional uint32 gnss_week = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double position_x = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double position_y = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double position_z = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 health_flag = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_health_flag());
    }

    // optional uint32 sat_obs_num = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sat_obs_num());
    }

  }
  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_time_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpochObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EpochObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpochObservation::GetClassData() const { return &_class_data_; }

void EpochObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EpochObservation *>(to)->MergeFrom(
      static_cast<const EpochObservation &>(from));
}


void EpochObservation::MergeFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.EpochObservation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sat_obs_.MergeFrom(from._impl_.sat_obs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.receiver_id_ = from._impl_.receiver_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.gnss_week_ = from._impl_.gnss_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gnss_second_s_ = from._impl_.gnss_second_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.position_z_ = from._impl_.position_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.health_flag_ = from._impl_.health_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.sat_obs_num_ = from._impl_.sat_obs_num_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_gnss_time_type(from._internal_gnss_time_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EpochObservation::CopyFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochObservation::IsInitialized() const {
  return true;
}

void EpochObservation::InternalSwap(EpochObservation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sat_obs_.InternalSwap(&other->_impl_.sat_obs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochObservation, _impl_.sat_obs_num_)
      + sizeof(EpochObservation::_impl_.sat_obs_num_)
      - PROTOBUF_FIELD_OFFSET(EpochObservation, _impl_.receiver_id_)>(
          reinterpret_cast<char*>(&_impl_.receiver_id_),
          reinterpret_cast<char*>(&other->_impl_.receiver_id_));
  swap(_impl_.gnss_time_type_, other->_impl_.gnss_time_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[2]);
}

// ===================================================================

class KepplerOrbit::_Internal {
 public:
  using HasBits = decltype(std::declval<KepplerOrbit>()._impl_._has_bits_);
  static void set_has_gnss_type(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_sat_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gnss_time_type(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_week_num(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_af0(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_af1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_af2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_iode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deltan(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_m0(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_e(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_roota(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_toe(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_toc(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cic(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_cis(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_crs(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cuc(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_cus(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_omega0(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_omega(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_i0(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_omegadot(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_idot(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_codesonl2channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_l2pdataflag(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tgd(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_iodc(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

KepplerOrbit::KepplerOrbit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.KepplerOrbit)
}
KepplerOrbit::KepplerOrbit(const KepplerOrbit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_prn_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , decltype(_impl_.second_s_){}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.af0_){}
    , decltype(_impl_.af1_){}
    , decltype(_impl_.af2_){}
    , decltype(_impl_.iode_){}
    , decltype(_impl_.deltan_){}
    , decltype(_impl_.m0_){}
    , decltype(_impl_.e_){}
    , decltype(_impl_.roota_){}
    , decltype(_impl_.toe_){}
    , decltype(_impl_.toc_){}
    , decltype(_impl_.cic_){}
    , decltype(_impl_.week_num_){}
    , decltype(_impl_.l2pdataflag_){}
    , decltype(_impl_.crc_){}
    , decltype(_impl_.cis_){}
    , decltype(_impl_.crs_){}
    , decltype(_impl_.cuc_){}
    , decltype(_impl_.cus_){}
    , decltype(_impl_.omega0_){}
    , decltype(_impl_.omega_){}
    , decltype(_impl_.i0_){}
    , decltype(_impl_.omegadot_){}
    , decltype(_impl_.idot_){}
    , decltype(_impl_.codesonl2channel_){}
    , decltype(_impl_.accuracy_){}
    , decltype(_impl_.health_){}
    , decltype(_impl_.tgd_){}
    , decltype(_impl_.iodc_){}
    , decltype(_impl_.gnss_type_){}
    , decltype(_impl_.gnss_time_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sat_prn_, &from._impl_.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gnss_time_type_) -
    reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.KepplerOrbit)
}

inline void KepplerOrbit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sat_prn_){0u}
    , decltype(_impl_.year_){0u}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.day_){0u}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , decltype(_impl_.second_s_){0}
    , decltype(_impl_.reserved_){0}
    , decltype(_impl_.af0_){0}
    , decltype(_impl_.af1_){0}
    , decltype(_impl_.af2_){0}
    , decltype(_impl_.iode_){0}
    , decltype(_impl_.deltan_){0}
    , decltype(_impl_.m0_){0}
    , decltype(_impl_.e_){0}
    , decltype(_impl_.roota_){0}
    , decltype(_impl_.toe_){0}
    , decltype(_impl_.toc_){0}
    , decltype(_impl_.cic_){0}
    , decltype(_impl_.week_num_){0u}
    , decltype(_impl_.l2pdataflag_){0u}
    , decltype(_impl_.crc_){0}
    , decltype(_impl_.cis_){0}
    , decltype(_impl_.crs_){0}
    , decltype(_impl_.cuc_){0}
    , decltype(_impl_.cus_){0}
    , decltype(_impl_.omega0_){0}
    , decltype(_impl_.omega_){0}
    , decltype(_impl_.i0_){0}
    , decltype(_impl_.omegadot_){0}
    , decltype(_impl_.idot_){0}
    , decltype(_impl_.codesonl2channel_){0}
    , decltype(_impl_.accuracy_){0u}
    , decltype(_impl_.health_){0u}
    , decltype(_impl_.tgd_){0}
    , decltype(_impl_.iodc_){0}
    , decltype(_impl_.gnss_type_){1}
    , decltype(_impl_.gnss_time_type_){1}
  };
}

KepplerOrbit::~KepplerOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.KepplerOrbit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KepplerOrbit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KepplerOrbit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KepplerOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.KepplerOrbit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reserved_) -
        reinterpret_cast<char*>(&_impl_.sat_prn_)) + sizeof(_impl_.reserved_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.af0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.roota_) -
        reinterpret_cast<char*>(&_impl_.af0_)) + sizeof(_impl_.roota_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.toe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crs_) -
        reinterpret_cast<char*>(&_impl_.toe_)) + sizeof(_impl_.crs_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.cuc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.codesonl2channel_) -
        reinterpret_cast<char*>(&_impl_.cuc_)) + sizeof(_impl_.codesonl2channel_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.accuracy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iodc_) -
        reinterpret_cast<char*>(&_impl_.accuracy_)) + sizeof(_impl_.iodc_));
    _impl_.gnss_type_ = 1;
    _impl_.gnss_time_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KepplerOrbit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssType_IsValid(val))) {
            _internal_set_gnss_type(static_cast<::apollo::drivers::gnss::GnssType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sat_prn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sat_prn(&_impl_._has_bits_);
          _impl_.sat_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssTimeType_IsValid(val))) {
            _internal_set_gnss_time_type(static_cast<::apollo::drivers::gnss::GnssTimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_year(&_impl_._has_bits_);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_month(&_impl_._has_bits_);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_day(&_impl_._has_bits_);
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hour(&_impl_._has_bits_);
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_minute(&_impl_._has_bits_);
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double second_s = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_second_s(&_impl_._has_bits_);
          _impl_.second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 week_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_week_num(&_impl_._has_bits_);
          _impl_.week_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double reserved = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_reserved(&_impl_._has_bits_);
          _impl_.reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double af0 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_af0(&_impl_._has_bits_);
          _impl_.af0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double af1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_af1(&_impl_._has_bits_);
          _impl_.af1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double af2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_af2(&_impl_._has_bits_);
          _impl_.af2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double iode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_iode(&_impl_._has_bits_);
          _impl_.iode_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double deltan = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_deltan(&_impl_._has_bits_);
          _impl_.deltan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double m0 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_m0(&_impl_._has_bits_);
          _impl_.m0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double e = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_e(&_impl_._has_bits_);
          _impl_.e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roota = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_roota(&_impl_._has_bits_);
          _impl_.roota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double toe = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_toe(&_impl_._has_bits_);
          _impl_.toe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double toc = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_toc(&_impl_._has_bits_);
          _impl_.toc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cic = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_cic(&_impl_._has_bits_);
          _impl_.cic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double crc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_crc(&_impl_._has_bits_);
          _impl_.crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cis = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_cis(&_impl_._has_bits_);
          _impl_.cis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double crs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_crs(&_impl_._has_bits_);
          _impl_.crs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cuc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_cuc(&_impl_._has_bits_);
          _impl_.cuc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cus = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_cus(&_impl_._has_bits_);
          _impl_.cus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double omega0 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_omega0(&_impl_._has_bits_);
          _impl_.omega0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double omega = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_omega(&_impl_._has_bits_);
          _impl_.omega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double i0 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_i0(&_impl_._has_bits_);
          _impl_.i0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double omegadot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_omegadot(&_impl_._has_bits_);
          _impl_.omegadot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double idot = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_idot(&_impl_._has_bits_);
          _impl_.idot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double codesonL2channel = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_codesonl2channel(&_impl_._has_bits_);
          _impl_.codesonl2channel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 L2Pdataflag = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_l2pdataflag(&_impl_._has_bits_);
          _impl_.l2pdataflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accuracy = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accuracy(&_impl_._has_bits_);
          _impl_.accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 health = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_health(&_impl_._has_bits_);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double tgd = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_tgd(&_impl_._has_bits_);
          _impl_.tgd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double iodc = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_iodc(&_impl_._has_bits_);
          _impl_.iodc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KepplerOrbit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.KepplerOrbit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gnss_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sat_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sat_prn(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gnss_time_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_year(), target);
  }

  // optional uint32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_month(), target);
  }

  // optional uint32 day = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_day(), target);
  }

  // optional uint32 hour = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hour(), target);
  }

  // optional uint32 minute = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_minute(), target);
  }

  // optional double second_s = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_second_s(), target);
  }

  // optional uint32 week_num = 10;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_week_num(), target);
  }

  // optional double reserved = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_reserved(), target);
  }

  // optional double af0 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_af0(), target);
  }

  // optional double af1 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_af1(), target);
  }

  // optional double af2 = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_af2(), target);
  }

  // optional double iode = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_iode(), target);
  }

  // optional double deltan = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_deltan(), target);
  }

  // optional double m0 = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_m0(), target);
  }

  // optional double e = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_e(), target);
  }

  // optional double roota = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_roota(), target);
  }

  // optional double toe = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_toe(), target);
  }

  // optional double toc = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_toc(), target);
  }

  // optional double cic = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_cic(), target);
  }

  // optional double crc = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_crc(), target);
  }

  // optional double cis = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_cis(), target);
  }

  // optional double crs = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_crs(), target);
  }

  // optional double cuc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_cuc(), target);
  }

  // optional double cus = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_cus(), target);
  }

  // optional double omega0 = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_omega0(), target);
  }

  // optional double omega = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_omega(), target);
  }

  // optional double i0 = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_i0(), target);
  }

  // optional double omegadot = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_omegadot(), target);
  }

  // optional double idot = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_idot(), target);
  }

  // optional double codesonL2channel = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_codesonl2channel(), target);
  }

  // optional uint32 L2Pdataflag = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_l2pdataflag(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 accuracy = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_accuracy(), target);
  }

  // optional uint32 health = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_health(), target);
  }

  // optional double tgd = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(37, this->_internal_tgd(), target);
  }

  // optional double iodc = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_iodc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.KepplerOrbit)
  return target;
}

size_t KepplerOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.KepplerOrbit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 sat_prn = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sat_prn());
    }

    // optional uint32 year = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_year());
    }

    // optional uint32 month = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_month());
    }

    // optional uint32 day = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
    }

    // optional uint32 hour = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
    }

    // optional uint32 minute = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
    }

    // optional double second_s = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double reserved = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double af0 = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double af1 = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double af2 = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double iode = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double deltan = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double m0 = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double e = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double roota = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double toe = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double toc = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double cic = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional uint32 week_num = 10;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_week_num());
    }

    // optional uint32 L2Pdataflag = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_l2pdataflag());
    }

    // optional double crc = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double cis = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double crs = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double cuc = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double cus = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double omega0 = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double omega = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double i0 = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double omegadot = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double idot = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double codesonL2channel = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 accuracy = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_accuracy());
    }

    // optional uint32 health = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_health());
    }

    // optional double tgd = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double iodc = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_type());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_time_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KepplerOrbit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KepplerOrbit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KepplerOrbit::GetClassData() const { return &_class_data_; }

void KepplerOrbit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KepplerOrbit *>(to)->MergeFrom(
      static_cast<const KepplerOrbit &>(from));
}


void KepplerOrbit::MergeFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.KepplerOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sat_prn_ = from._impl_.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.day_ = from._impl_.day_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.hour_ = from._impl_.hour_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.minute_ = from._impl_.minute_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.second_s_ = from._impl_.second_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.reserved_ = from._impl_.reserved_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.af0_ = from._impl_.af0_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.af1_ = from._impl_.af1_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.af2_ = from._impl_.af2_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.iode_ = from._impl_.iode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.deltan_ = from._impl_.deltan_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.m0_ = from._impl_.m0_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.e_ = from._impl_.e_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.roota_ = from._impl_.roota_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.toe_ = from._impl_.toe_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.toc_ = from._impl_.toc_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.cic_ = from._impl_.cic_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.week_num_ = from._impl_.week_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.l2pdataflag_ = from._impl_.l2pdataflag_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.crc_ = from._impl_.crc_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.cis_ = from._impl_.cis_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.crs_ = from._impl_.crs_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.cuc_ = from._impl_.cuc_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.cus_ = from._impl_.cus_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.omega0_ = from._impl_.omega0_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.omega_ = from._impl_.omega_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.i0_ = from._impl_.i0_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.omegadot_ = from._impl_.omegadot_;
    }
    if (cached_has_bits & 0x40000000u) {
      _impl_.idot_ = from._impl_.idot_;
    }
    if (cached_has_bits & 0x80000000u) {
      _impl_.codesonl2channel_ = from._impl_.codesonl2channel_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accuracy_ = from._impl_.accuracy_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.tgd_ = from._impl_.tgd_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.iodc_ = from._impl_.iodc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gnss_type_ = from._impl_.gnss_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.gnss_time_type_ = from._impl_.gnss_time_type_;
    }
    _impl_._has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KepplerOrbit::CopyFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KepplerOrbit::IsInitialized() const {
  return true;
}

void KepplerOrbit::InternalSwap(KepplerOrbit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KepplerOrbit, _impl_.iodc_)
      + sizeof(KepplerOrbit::_impl_.iodc_)
      - PROTOBUF_FIELD_OFFSET(KepplerOrbit, _impl_.sat_prn_)>(
          reinterpret_cast<char*>(&_impl_.sat_prn_),
          reinterpret_cast<char*>(&other->_impl_.sat_prn_));
  swap(_impl_.gnss_type_, other->_impl_.gnss_type_);
  swap(_impl_.gnss_time_type_, other->_impl_.gnss_time_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KepplerOrbit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[3]);
}

// ===================================================================

class GlonassOrbit::_Internal {
 public:
  using HasBits = decltype(std::declval<GlonassOrbit>()._impl_._has_bits_);
  static void set_has_gnss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_slot_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gnss_time_type(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_toe(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frequency_no(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_week_num(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_week_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tk(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_clock_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_clock_drift(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_position_z(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_velocity_x(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_velocity_y(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_velocity_z(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_accelerate_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_accelerate_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_accelerate_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_infor_age(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_sat_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

GlonassOrbit::GlonassOrbit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.GlonassOrbit)
}
GlonassOrbit::GlonassOrbit(const GlonassOrbit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_prn_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.toe_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , decltype(_impl_.second_s_){}
    , decltype(_impl_.frequency_no_){}
    , decltype(_impl_.week_num_){}
    , decltype(_impl_.week_second_s_){}
    , decltype(_impl_.tk_){}
    , decltype(_impl_.clock_offset_){}
    , decltype(_impl_.clock_drift_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.position_z_){}
    , decltype(_impl_.velocity_x_){}
    , decltype(_impl_.velocity_y_){}
    , decltype(_impl_.health_){}
    , decltype(_impl_.sat_prn_){}
    , decltype(_impl_.velocity_z_){}
    , decltype(_impl_.accelerate_x_){}
    , decltype(_impl_.accelerate_y_){}
    , decltype(_impl_.accelerate_z_){}
    , decltype(_impl_.infor_age_){}
    , decltype(_impl_.gnss_type_){}
    , decltype(_impl_.gnss_time_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_prn_, &from._impl_.slot_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gnss_time_type_) -
    reinterpret_cast<char*>(&_impl_.slot_prn_)) + sizeof(_impl_.gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GlonassOrbit)
}

inline void GlonassOrbit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_prn_){0u}
    , decltype(_impl_.year_){0u}
    , decltype(_impl_.toe_){0}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.day_){0u}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , decltype(_impl_.second_s_){0}
    , decltype(_impl_.frequency_no_){0}
    , decltype(_impl_.week_num_){0u}
    , decltype(_impl_.week_second_s_){0}
    , decltype(_impl_.tk_){0}
    , decltype(_impl_.clock_offset_){0}
    , decltype(_impl_.clock_drift_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.position_z_){0}
    , decltype(_impl_.velocity_x_){0}
    , decltype(_impl_.velocity_y_){0}
    , decltype(_impl_.health_){0u}
    , decltype(_impl_.sat_prn_){0u}
    , decltype(_impl_.velocity_z_){0}
    , decltype(_impl_.accelerate_x_){0}
    , decltype(_impl_.accelerate_y_){0}
    , decltype(_impl_.accelerate_z_){0}
    , decltype(_impl_.infor_age_){0}
    , decltype(_impl_.gnss_type_){3}
    , decltype(_impl_.gnss_time_type_){3}
  };
}

GlonassOrbit::~GlonassOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GlonassOrbit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlonassOrbit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlonassOrbit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlonassOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GlonassOrbit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.slot_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_s_) -
        reinterpret_cast<char*>(&_impl_.slot_prn_)) + sizeof(_impl_.second_s_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.frequency_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_y_) -
        reinterpret_cast<char*>(&_impl_.frequency_no_)) + sizeof(_impl_.position_y_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.position_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accelerate_y_) -
        reinterpret_cast<char*>(&_impl_.position_z_)) + sizeof(_impl_.accelerate_y_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.accelerate_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.infor_age_) -
        reinterpret_cast<char*>(&_impl_.accelerate_z_)) + sizeof(_impl_.infor_age_));
    _impl_.gnss_type_ = 3;
    _impl_.gnss_time_type_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlonassOrbit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssType_IsValid(val))) {
            _internal_set_gnss_type(static_cast<::apollo::drivers::gnss::GnssType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_prn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot_prn(&has_bits);
          _impl_.slot_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssTimeType_IsValid(val))) {
            _internal_set_gnss_time_type(static_cast<::apollo::drivers::gnss::GnssTimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double toe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_toe(&has_bits);
          _impl_.toe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 year = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_year(&has_bits);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 month = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_month(&has_bits);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 day = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_day(&has_bits);
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hour = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hour(&has_bits);
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_minute(&has_bits);
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double second_s = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_second_s(&has_bits);
          _impl_.second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 frequency_no = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_frequency_no(&has_bits);
          _impl_.frequency_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 week_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_week_num(&has_bits);
          _impl_.week_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double week_second_s = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_week_second_s(&has_bits);
          _impl_.week_second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_tk(&has_bits);
          _impl_.tk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double clock_offset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_clock_offset(&has_bits);
          _impl_.clock_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double clock_drift = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_clock_drift(&has_bits);
          _impl_.clock_drift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 health = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_health(&has_bits);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double position_x = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_y = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position_z = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_position_z(&has_bits);
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity_x = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_velocity_x(&has_bits);
          _impl_.velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity_y = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_velocity_y(&has_bits);
          _impl_.velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity_z = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_velocity_z(&has_bits);
          _impl_.velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accelerate_x = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_accelerate_x(&has_bits);
          _impl_.accelerate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accelerate_y = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_accelerate_y(&has_bits);
          _impl_.accelerate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accelerate_z = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_accelerate_z(&has_bits);
          _impl_.accelerate_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double infor_age = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_infor_age(&has_bits);
          _impl_.infor_age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sat_prn = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_sat_prn(&has_bits);
          _impl_.sat_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlonassOrbit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GlonassOrbit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gnss_type(), target);
  }

  // optional uint32 slot_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gnss_time_type(), target);
  }

  // optional double toe = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_toe(), target);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_year(), target);
  }

  // optional uint32 month = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_month(), target);
  }

  // optional uint32 day = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_day(), target);
  }

  // optional uint32 hour = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hour(), target);
  }

  // optional uint32 minute = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_minute(), target);
  }

  // optional double second_s = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_second_s(), target);
  }

  // optional int32 frequency_no = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_frequency_no(), target);
  }

  // optional uint32 week_num = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_week_num(), target);
  }

  // optional double week_second_s = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_week_second_s(), target);
  }

  // optional double tk = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_tk(), target);
  }

  // optional double clock_offset = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_clock_offset(), target);
  }

  // optional double clock_drift = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_clock_drift(), target);
  }

  // optional uint32 health = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_health(), target);
  }

  // optional double position_x = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_position_x(), target);
  }

  // optional double position_y = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_position_y(), target);
  }

  // optional double position_z = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_position_z(), target);
  }

  // optional double velocity_x = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_velocity_x(), target);
  }

  // optional double velocity_y = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_velocity_y(), target);
  }

  // optional double velocity_z = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_velocity_z(), target);
  }

  // optional double accelerate_x = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_accelerate_x(), target);
  }

  // optional double accelerate_y = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_accelerate_y(), target);
  }

  // optional double accelerate_z = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_accelerate_z(), target);
  }

  // optional double infor_age = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_infor_age(), target);
  }

  // optional uint32 sat_prn = 28;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_sat_prn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GlonassOrbit)
  return target;
}

size_t GlonassOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GlonassOrbit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slot_prn = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_prn());
    }

    // optional uint32 year = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_year());
    }

    // optional double toe = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 month = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_month());
    }

    // optional uint32 day = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
    }

    // optional uint32 hour = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
    }

    // optional uint32 minute = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
    }

    // optional double second_s = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 frequency_no = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frequency_no());
    }

    // optional uint32 week_num = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_week_num());
    }

    // optional double week_second_s = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double tk = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double clock_offset = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double clock_drift = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double position_x = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double position_y = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double position_z = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double velocity_x = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double velocity_y = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional uint32 health = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_health());
    }

    // optional uint32 sat_prn = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_sat_prn());
    }

    // optional double velocity_z = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double accelerate_x = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double accelerate_y = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional double accelerate_z = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double infor_age = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_type());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_time_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlonassOrbit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlonassOrbit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlonassOrbit::GetClassData() const { return &_class_data_; }

void GlonassOrbit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GlonassOrbit *>(to)->MergeFrom(
      static_cast<const GlonassOrbit &>(from));
}


void GlonassOrbit::MergeFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GlonassOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.slot_prn_ = from._impl_.slot_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.toe_ = from._impl_.toe_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.day_ = from._impl_.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.hour_ = from._impl_.hour_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.minute_ = from._impl_.minute_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.second_s_ = from._impl_.second_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.frequency_no_ = from._impl_.frequency_no_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.week_num_ = from._impl_.week_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.week_second_s_ = from._impl_.week_second_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.tk_ = from._impl_.tk_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.clock_offset_ = from._impl_.clock_offset_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.clock_drift_ = from._impl_.clock_drift_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.position_y_ = from._impl_.position_y_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.position_z_ = from._impl_.position_z_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.velocity_x_ = from._impl_.velocity_x_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.velocity_y_ = from._impl_.velocity_y_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.sat_prn_ = from._impl_.sat_prn_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.velocity_z_ = from._impl_.velocity_z_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.accelerate_x_ = from._impl_.accelerate_x_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.accelerate_y_ = from._impl_.accelerate_y_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.accelerate_z_ = from._impl_.accelerate_z_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.infor_age_ = from._impl_.infor_age_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.gnss_type_ = from._impl_.gnss_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.gnss_time_type_ = from._impl_.gnss_time_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlonassOrbit::CopyFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlonassOrbit::IsInitialized() const {
  return true;
}

void GlonassOrbit::InternalSwap(GlonassOrbit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlonassOrbit, _impl_.infor_age_)
      + sizeof(GlonassOrbit::_impl_.infor_age_)
      - PROTOBUF_FIELD_OFFSET(GlonassOrbit, _impl_.slot_prn_)>(
          reinterpret_cast<char*>(&_impl_.slot_prn_),
          reinterpret_cast<char*>(&other->_impl_.slot_prn_));
  swap(_impl_.gnss_type_, other->_impl_.gnss_type_);
  swap(_impl_.gnss_time_type_, other->_impl_.gnss_time_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlonassOrbit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[4]);
}

// ===================================================================

class GnssEphemeris::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssEphemeris>()._impl_._has_bits_);
  static void set_has_gnss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::gnss::KepplerOrbit& keppler_orbit(const GnssEphemeris* msg);
  static void set_has_keppler_orbit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::gnss::GlonassOrbit& glonass_orbit(const GnssEphemeris* msg);
  static void set_has_glonass_orbit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::gnss::KepplerOrbit&
GnssEphemeris::_Internal::keppler_orbit(const GnssEphemeris* msg) {
  return *msg->_impl_.keppler_orbit_;
}
const ::apollo::drivers::gnss::GlonassOrbit&
GnssEphemeris::_Internal::glonass_orbit(const GnssEphemeris* msg) {
  return *msg->_impl_.glonass_orbit_;
}
GnssEphemeris::GnssEphemeris(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.GnssEphemeris)
}
GnssEphemeris::GnssEphemeris(const GnssEphemeris& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keppler_orbit_){nullptr}
    , decltype(_impl_.glonass_orbit_){nullptr}
    , decltype(_impl_.gnss_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keppler_orbit()) {
    _impl_.keppler_orbit_ = new ::apollo::drivers::gnss::KepplerOrbit(*from._impl_.keppler_orbit_);
  }
  if (from._internal_has_glonass_orbit()) {
    _impl_.glonass_orbit_ = new ::apollo::drivers::gnss::GlonassOrbit(*from._impl_.glonass_orbit_);
  }
  _impl_.gnss_type_ = from._impl_.gnss_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssEphemeris)
}

inline void GnssEphemeris::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keppler_orbit_){nullptr}
    , decltype(_impl_.glonass_orbit_){nullptr}
    , decltype(_impl_.gnss_type_){3}
  };
}

GnssEphemeris::~GnssEphemeris() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssEphemeris)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssEphemeris::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.keppler_orbit_;
  if (this != internal_default_instance()) delete _impl_.glonass_orbit_;
}

void GnssEphemeris::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssEphemeris::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssEphemeris)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.keppler_orbit_ != nullptr);
      _impl_.keppler_orbit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.glonass_orbit_ != nullptr);
      _impl_.glonass_orbit_->Clear();
    }
    _impl_.gnss_type_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssEphemeris::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssType_IsValid(val))) {
            _internal_set_gnss_type(static_cast<::apollo::drivers::gnss::GnssType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_keppler_orbit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_glonass_orbit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssEphemeris::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssEphemeris)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gnss_type(), target);
  }

  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::keppler_orbit(this),
        _Internal::keppler_orbit(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::glonass_orbit(this),
        _Internal::glonass_orbit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssEphemeris)
  return target;
}

size_t GnssEphemeris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssEphemeris)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keppler_orbit_);
    }

    // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.glonass_orbit_);
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gnss_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssEphemeris::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GnssEphemeris::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssEphemeris::GetClassData() const { return &_class_data_; }

void GnssEphemeris::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GnssEphemeris *>(to)->MergeFrom(
      static_cast<const GnssEphemeris &>(from));
}


void GnssEphemeris::MergeFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssEphemeris)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_keppler_orbit()->::apollo::drivers::gnss::KepplerOrbit::MergeFrom(from._internal_keppler_orbit());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_glonass_orbit()->::apollo::drivers::gnss::GlonassOrbit::MergeFrom(from._internal_glonass_orbit());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gnss_type_ = from._impl_.gnss_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssEphemeris::CopyFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssEphemeris::IsInitialized() const {
  return true;
}

void GnssEphemeris::InternalSwap(GnssEphemeris* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssEphemeris, _impl_.glonass_orbit_)
      + sizeof(GnssEphemeris::_impl_.glonass_orbit_)
      - PROTOBUF_FIELD_OFFSET(GnssEphemeris, _impl_.keppler_orbit_)>(
          reinterpret_cast<char*>(&_impl_.keppler_orbit_),
          reinterpret_cast<char*>(&other->_impl_.keppler_orbit_));
  swap(_impl_.gnss_type_, other->_impl_.gnss_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssEphemeris::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::BandObservation*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::BandObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::BandObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::SatelliteObservation*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::SatelliteObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::SatelliteObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::EpochObservation*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::EpochObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::EpochObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::KepplerOrbit*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::KepplerOrbit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::KepplerOrbit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GlonassOrbit*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GlonassOrbit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::GlonassOrbit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GnssEphemeris*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssEphemeris >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::GnssEphemeris >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
