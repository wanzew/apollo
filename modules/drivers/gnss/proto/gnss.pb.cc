// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#include "modules/drivers/gnss/proto/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss {
PROTOBUF_CONSTEXPR Gnss::Gnss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.position_std_dev_)*/nullptr
  , /*decltype(_impl_.linear_velocity_)*/nullptr
  , /*decltype(_impl_.linear_velocity_std_dev_)*/nullptr
  , /*decltype(_impl_.measurement_time_)*/0
  , /*decltype(_impl_.velocity_latency_)*/0
  , /*decltype(_impl_.num_sats_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.solution_status_)*/0u
  , /*decltype(_impl_.position_type_)*/0u} {}
struct GnssDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssDefaultTypeInternal() {}
  union {
    Gnss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssDefaultTypeInternal _Gnss_default_instance_;
PROTOBUF_CONSTEXPR RawData::RawData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct RawDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawDataDefaultTypeInternal() {}
  union {
    RawData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.velocity_latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.num_sats_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_type_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _impl_.data_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::apollo::drivers::gnss::Gnss)},
  { 28, 36, -1, sizeof(::apollo::drivers::gnss::RawData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss::_Gnss_default_instance_._instance,
  &::apollo::drivers::gnss::_RawData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/drivers/gnss/proto/gnss.proto\022"
  "\023apollo.drivers.gnss\032!modules/common/pro"
  "to/header.proto\032#modules/common/proto/ge"
  "ometry.proto\"\202\004\n\004Gnss\022%\n\006header\030\001 \001(\0132\025."
  "apollo.common.Header\022\030\n\020measurement_time"
  "\030\002 \001(\001\022\033\n\020velocity_latency\030\003 \001(\002:\0010\022)\n\010p"
  "osition\030\004 \001(\0132\027.apollo.common.PointLLH\0220"
  "\n\020position_std_dev\030\005 \001(\0132\026.apollo.common"
  ".Point3D\022/\n\017linear_velocity\030\006 \001(\0132\026.apol"
  "lo.common.Point3D\0227\n\027linear_velocity_std"
  "_dev\030\007 \001(\0132\026.apollo.common.Point3D\022\020\n\010nu"
  "m_sats\030\010 \001(\005\022,\n\004type\030\t \001(\0162\036.apollo.driv"
  "ers.gnss.Gnss.Type\022\027\n\017solution_status\030\n "
  "\001(\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007IN"
  "VALID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007P"
  "SRDIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK_"
  "INTEGER\020\006\">\n\007RawData\022%\n\006header\030\001 \001(\0132\025.a"
  "pollo.common.Header\022\014\n\004data\030\002 \001(\014"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = {
    false, false, 713, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
    "modules/drivers/gnss/proto/gnss.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[0];
}
bool Gnss_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gnss_Type Gnss::INVALID;
constexpr Gnss_Type Gnss::PROPAGATED;
constexpr Gnss_Type Gnss::SINGLE;
constexpr Gnss_Type Gnss::PSRDIFF;
constexpr Gnss_Type Gnss::PPP;
constexpr Gnss_Type Gnss::RTK_FLOAT;
constexpr Gnss_Type Gnss::RTK_INTEGER;
constexpr Gnss_Type Gnss::Type_MIN;
constexpr Gnss_Type Gnss::Type_MAX;
constexpr int Gnss::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Gnss::_Internal {
 public:
  using HasBits = decltype(std::declval<Gnss>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Gnss* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::PointLLH& position(const Gnss* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& position_std_dev(const Gnss* msg);
  static void set_has_position_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const Gnss* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& linear_velocity_std_dev(const Gnss* msg);
  static void set_has_linear_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_sats(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::common::Header&
Gnss::_Internal::header(const Gnss* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::PointLLH&
Gnss::_Internal::position(const Gnss* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::position_std_dev(const Gnss* msg) {
  return *msg->_impl_.position_std_dev_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity(const Gnss* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity_std_dev(const Gnss* msg) {
  return *msg->_impl_.linear_velocity_std_dev_;
}
void Gnss::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Gnss::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Gnss::clear_position_std_dev() {
  if (_impl_.position_std_dev_ != nullptr) _impl_.position_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Gnss::clear_linear_velocity() {
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Gnss::clear_linear_velocity_std_dev() {
  if (_impl_.linear_velocity_std_dev_ != nullptr) _impl_.linear_velocity_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Gnss::Gnss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.measurement_time_){}
    , decltype(_impl_.velocity_latency_){}
    , decltype(_impl_.num_sats_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.solution_status_){}
    , decltype(_impl_.position_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointLLH(*from._impl_.position_);
  }
  if (from._internal_has_position_std_dev()) {
    _impl_.position_std_dev_ = new ::apollo::common::Point3D(*from._impl_.position_std_dev_);
  }
  if (from._internal_has_linear_velocity()) {
    _impl_.linear_velocity_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_);
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    _impl_.linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_std_dev_);
  }
  ::memcpy(&_impl_.measurement_time_, &from._impl_.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_type_) -
    reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.position_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Gnss)
}

inline void Gnss::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.measurement_time_){0}
    , decltype(_impl_.velocity_latency_){0}
    , decltype(_impl_.num_sats_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.solution_status_){0u}
    , decltype(_impl_.position_type_){0u}
  };
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Gnss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gnss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.position_std_dev_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_std_dev_;
}

void Gnss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Gnss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.position_std_dev_ != nullptr);
      _impl_.position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_std_dev_ != nullptr);
      _impl_.linear_velocity_std_dev_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_sats_) -
        reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.num_sats_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_type_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.position_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gnss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_latency = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_velocity_latency(&has_bits);
          _impl_.velocity_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointLLH position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_sats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_sats(&has_bits);
          _impl_.num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.Gnss.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::Gnss_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss::Gnss_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 solution_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_solution_status(&has_bits);
          _impl_.solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_position_type(&has_bits);
          _impl_.position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gnss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Gnss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_latency(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position_std_dev(this),
        _Internal::position_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::linear_velocity_std_dev(this),
        _Internal::linear_velocity_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional int32 num_sats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_sats(), target);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional uint32 solution_status = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_solution_status(), target);
  }

  // optional uint32 position_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_position_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Gnss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D position_std_dev = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_std_dev_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float velocity_latency = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 num_sats = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_sats());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .apollo.drivers.gnss.Gnss.Type type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 solution_status = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_solution_status());
    }

    // optional uint32 position_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gnss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gnss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gnss::GetClassData() const { return &_class_data_; }

void Gnss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gnss *>(to)->MergeFrom(
      static_cast<const Gnss &>(from));
}


void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::PointLLH::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_position_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.velocity_latency_ = from._impl_.velocity_latency_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.num_sats_ = from._impl_.num_sats_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.solution_status_ = from._impl_.solution_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.position_type_ = from._impl_.position_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gnss, _impl_.position_type_)
      + sizeof(Gnss::_impl_.position_type_)
      - PROTOBUF_FIELD_OFFSET(Gnss, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gnss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[0]);
}

// ===================================================================

class RawData::_Internal {
 public:
  using HasBits = decltype(std::declval<RawData>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const RawData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
RawData::_Internal::header(const RawData* msg) {
  return *msg->_impl_.header_;
}
void RawData::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RawData::RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _impl_.data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RawData)
}

inline void RawData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.header_){nullptr}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RawData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void RawData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RawData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RawData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RawData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RawData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawData::GetClassData() const { return &_class_data_; }

void RawData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RawData *>(to)->MergeFrom(
      static_cast<const RawData &>(from));
}


void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::Gnss*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Gnss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::Gnss >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::RawData*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::RawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::RawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
