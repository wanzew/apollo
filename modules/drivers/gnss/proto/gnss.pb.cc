// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#include "modules/drivers/gnss/proto/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss {
PROTOBUF_CONSTEXPR Gnss::Gnss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.position_std_dev_)*/nullptr
  , /*decltype(_impl_.linear_velocity_)*/nullptr
  , /*decltype(_impl_.linear_velocity_std_dev_)*/nullptr
  , /*decltype(_impl_.measurement_time_)*/0
  , /*decltype(_impl_.velocity_latency_)*/0
  , /*decltype(_impl_.num_sats_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.solution_status_)*/0u
  , /*decltype(_impl_.position_type_)*/0u} {}
struct GnssDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssDefaultTypeInternal() {}
  union {
    Gnss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssDefaultTypeInternal _Gnss_default_instance_;
PROTOBUF_CONSTEXPR RangeInfo::RangeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.constellation_)*/0
  , /*decltype(_impl_.prn_)*/0
  , /*decltype(_impl_.carrier_frequency_)*/0u
  , /*decltype(_impl_.pseudorange_)*/std::numeric_limits<double>::quiet_NaN()
  , /*decltype(_impl_.carrier_phase_)*/std::numeric_limits<double>::quiet_NaN()
  , /*decltype(_impl_.pseudorange_std_dev_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.carrier_phase_std_dev_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.doppler_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.doppler_std_dev_)*/std::numeric_limits<float>::quiet_NaN()
  , /*decltype(_impl_.cno_)*/-1
  , /*decltype(_impl_.lock_time_)*/-1} {}
struct RangeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeInfoDefaultTypeInternal() {}
  union {
    RangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
PROTOBUF_CONSTEXPR GnssRange::GnssRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ranges_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.measurement_time_)*/0} {}
struct GnssRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssRangeDefaultTypeInternal() {}
  union {
    GnssRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssRangeDefaultTypeInternal _GnssRange_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.velocity_latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.num_sats_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _impl_.position_type_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.constellation_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.carrier_frequency_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.pseudorange_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.pseudorange_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.carrier_phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.carrier_phase_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.doppler_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.doppler_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.cno_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _impl_.lock_time_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _impl_.measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _impl_.ranges_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::apollo::drivers::gnss::Gnss)},
  { 28, 45, -1, sizeof(::apollo::drivers::gnss::RangeInfo)},
  { 56, 65, -1, sizeof(::apollo::drivers::gnss::GnssRange)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss::_Gnss_default_instance_._instance,
  &::apollo::drivers::gnss::_RangeInfo_default_instance_._instance,
  &::apollo::drivers::gnss::_GnssRange_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/drivers/gnss/proto/gnss.proto\022"
  "\023apollo.drivers.gnss\032!modules/common/pro"
  "to/header.proto\032#modules/common/proto/ge"
  "ometry.proto\"\202\004\n\004Gnss\022%\n\006header\030\001 \001(\0132\025."
  "apollo.common.Header\022\030\n\020measurement_time"
  "\030\002 \001(\001\022\033\n\020velocity_latency\030\003 \001(\002:\0010\022)\n\010p"
  "osition\030\004 \001(\0132\027.apollo.common.PointLLH\0220"
  "\n\020position_std_dev\030\005 \001(\0132\026.apollo.common"
  ".Point3D\022/\n\017linear_velocity\030\006 \001(\0132\026.apol"
  "lo.common.Point3D\0227\n\027linear_velocity_std"
  "_dev\030\007 \001(\0132\026.apollo.common.Point3D\022\020\n\010nu"
  "m_sats\030\010 \001(\005\022,\n\004type\030\t \001(\0162\036.apollo.driv"
  "ers.gnss.Gnss.Type\022\027\n\017solution_status\030\n "
  "\001(\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007IN"
  "VALID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007P"
  "SRDIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK_"
  "INTEGER\020\006\"\251\003\n\tRangeInfo\022H\n\rconstellation"
  "\030\001 \001(\0162,.apollo.drivers.gnss.RangeInfo.C"
  "onstellation:\003GPS\022\013\n\003prn\030\002 \001(\005\022\031\n\021carrie"
  "r_frequency\030\003 \001(\007\022\030\n\013pseudorange\030\004 \001(\001:\003"
  "nan\022 \n\023pseudorange_std_dev\030\005 \001(\002:\003nan\022\032\n"
  "\rcarrier_phase\030\006 \001(\001:\003nan\022\"\n\025carrier_pha"
  "se_std_dev\030\007 \001(\002:\003nan\022\024\n\007doppler\030\010 \001(\002:\003"
  "nan\022\034\n\017doppler_std_dev\030\t \001(\002:\003nan\022\017\n\003cno"
  "\030\n \001(\005:\002-1\022\025\n\tlock_time\030\013 \001(\005:\002-1\"R\n\rCon"
  "stellation\022\007\n\003GPS\020\000\022\013\n\007GLONASS\020\001\022\010\n\004SBAS"
  "\020\002\022\013\n\007GALILEO\020\003\022\n\n\006BEIDOU\020\004\022\010\n\004QZSS\020\005\"|\n"
  "\tGnssRange\022%\n\006header\030\001 \001(\0132\025.apollo.comm"
  "on.Header\022\030\n\020measurement_time\030\002 \001(\001\022.\n\006r"
  "anges\030\003 \003(\0132\036.apollo.drivers.gnss.RangeI"
  "nfo"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = {
    false, false, 1203, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
    "modules/drivers/gnss/proto/gnss.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[0];
}
bool Gnss_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Gnss_Type Gnss::INVALID;
constexpr Gnss_Type Gnss::PROPAGATED;
constexpr Gnss_Type Gnss::SINGLE;
constexpr Gnss_Type Gnss::PSRDIFF;
constexpr Gnss_Type Gnss::PPP;
constexpr Gnss_Type Gnss::RTK_FLOAT;
constexpr Gnss_Type Gnss::RTK_INTEGER;
constexpr Gnss_Type Gnss::Type_MIN;
constexpr Gnss_Type Gnss::Type_MAX;
constexpr int Gnss::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeInfo_Constellation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[1];
}
bool RangeInfo_Constellation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RangeInfo_Constellation RangeInfo::GPS;
constexpr RangeInfo_Constellation RangeInfo::GLONASS;
constexpr RangeInfo_Constellation RangeInfo::SBAS;
constexpr RangeInfo_Constellation RangeInfo::GALILEO;
constexpr RangeInfo_Constellation RangeInfo::BEIDOU;
constexpr RangeInfo_Constellation RangeInfo::QZSS;
constexpr RangeInfo_Constellation RangeInfo::Constellation_MIN;
constexpr RangeInfo_Constellation RangeInfo::Constellation_MAX;
constexpr int RangeInfo::Constellation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Gnss::_Internal {
 public:
  using HasBits = decltype(std::declval<Gnss>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Gnss* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::PointLLH& position(const Gnss* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& position_std_dev(const Gnss* msg);
  static void set_has_position_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const Gnss* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& linear_velocity_std_dev(const Gnss* msg);
  static void set_has_linear_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_sats(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::common::Header&
Gnss::_Internal::header(const Gnss* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::common::PointLLH&
Gnss::_Internal::position(const Gnss* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::position_std_dev(const Gnss* msg) {
  return *msg->_impl_.position_std_dev_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity(const Gnss* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity_std_dev(const Gnss* msg) {
  return *msg->_impl_.linear_velocity_std_dev_;
}
void Gnss::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Gnss::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Gnss::clear_position_std_dev() {
  if (_impl_.position_std_dev_ != nullptr) _impl_.position_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Gnss::clear_linear_velocity() {
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Gnss::clear_linear_velocity_std_dev() {
  if (_impl_.linear_velocity_std_dev_ != nullptr) _impl_.linear_velocity_std_dev_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Gnss::Gnss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.measurement_time_){}
    , decltype(_impl_.velocity_latency_){}
    , decltype(_impl_.num_sats_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.solution_status_){}
    , decltype(_impl_.position_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointLLH(*from._impl_.position_);
  }
  if (from._internal_has_position_std_dev()) {
    _impl_.position_std_dev_ = new ::apollo::common::Point3D(*from._impl_.position_std_dev_);
  }
  if (from._internal_has_linear_velocity()) {
    _impl_.linear_velocity_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_);
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    _impl_.linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_std_dev_);
  }
  ::memcpy(&_impl_.measurement_time_, &from._impl_.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_type_) -
    reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.position_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Gnss)
}

inline void Gnss::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_std_dev_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_velocity_std_dev_){nullptr}
    , decltype(_impl_.measurement_time_){0}
    , decltype(_impl_.velocity_latency_){0}
    , decltype(_impl_.num_sats_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.solution_status_){0u}
    , decltype(_impl_.position_type_){0u}
  };
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Gnss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gnss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.position_std_dev_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_std_dev_;
}

void Gnss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Gnss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.position_std_dev_ != nullptr);
      _impl_.position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_std_dev_ != nullptr);
      _impl_.linear_velocity_std_dev_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_sats_) -
        reinterpret_cast<char*>(&_impl_.measurement_time_)) + sizeof(_impl_.num_sats_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_type_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.position_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gnss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float velocity_latency = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_velocity_latency(&has_bits);
          _impl_.velocity_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointLLH position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_sats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_sats(&has_bits);
          _impl_.num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.Gnss.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::Gnss_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss::Gnss_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 solution_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_solution_status(&has_bits);
          _impl_.solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_position_type(&has_bits);
          _impl_.position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gnss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Gnss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_latency(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position_std_dev(this),
        _Internal::position_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::linear_velocity_std_dev(this),
        _Internal::linear_velocity_std_dev(this).GetCachedSize(), target, stream);
  }

  // optional int32 num_sats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_sats(), target);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional uint32 solution_status = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_solution_status(), target);
  }

  // optional uint32 position_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_position_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Gnss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D position_std_dev = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_std_dev_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float velocity_latency = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 num_sats = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_sats());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .apollo.drivers.gnss.Gnss.Type type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 solution_status = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_solution_status());
    }

    // optional uint32 position_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gnss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gnss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gnss::GetClassData() const { return &_class_data_; }

void Gnss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gnss *>(to)->MergeFrom(
      static_cast<const Gnss &>(from));
}


void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::PointLLH::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_position_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.velocity_latency_ = from._impl_.velocity_latency_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.num_sats_ = from._impl_.num_sats_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.solution_status_ = from._impl_.solution_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.position_type_ = from._impl_.position_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gnss, _impl_.position_type_)
      + sizeof(Gnss::_impl_.position_type_)
      - PROTOBUF_FIELD_OFFSET(Gnss, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gnss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[0]);
}

// ===================================================================

class RangeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeInfo>()._impl_._has_bits_);
  static void set_has_constellation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_carrier_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudorange(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pseudorange_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_carrier_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_carrier_phase_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_doppler(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_doppler_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cno(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

RangeInfo::RangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.RangeInfo)
}
RangeInfo::RangeInfo(const RangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constellation_){}
    , decltype(_impl_.prn_){}
    , decltype(_impl_.carrier_frequency_){}
    , decltype(_impl_.pseudorange_){}
    , decltype(_impl_.carrier_phase_){}
    , decltype(_impl_.pseudorange_std_dev_){}
    , decltype(_impl_.carrier_phase_std_dev_){}
    , decltype(_impl_.doppler_){}
    , decltype(_impl_.doppler_std_dev_){}
    , decltype(_impl_.cno_){}
    , decltype(_impl_.lock_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.constellation_, &from._impl_.constellation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lock_time_) -
    reinterpret_cast<char*>(&_impl_.constellation_)) + sizeof(_impl_.lock_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RangeInfo)
}

inline void RangeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constellation_){0}
    , decltype(_impl_.prn_){0}
    , decltype(_impl_.carrier_frequency_){0u}
    , decltype(_impl_.pseudorange_){std::numeric_limits<double>::quiet_NaN()}
    , decltype(_impl_.carrier_phase_){std::numeric_limits<double>::quiet_NaN()}
    , decltype(_impl_.pseudorange_std_dev_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.carrier_phase_std_dev_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.doppler_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.doppler_std_dev_){std::numeric_limits<float>::quiet_NaN()}
    , decltype(_impl_.cno_){-1}
    , decltype(_impl_.lock_time_){-1}
  };
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RangeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RangeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.constellation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.carrier_frequency_) -
        reinterpret_cast<char*>(&_impl_.constellation_)) + sizeof(_impl_.carrier_frequency_));
    _impl_.pseudorange_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.carrier_phase_ = std::numeric_limits<double>::quiet_NaN();
    _impl_.pseudorange_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.carrier_phase_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.doppler_ = std::numeric_limits<float>::quiet_NaN();
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.doppler_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    _impl_.cno_ = -1;
    _impl_.lock_time_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::RangeInfo_Constellation_IsValid(val))) {
            _internal_set_constellation(static_cast<::apollo::drivers::gnss::RangeInfo_Constellation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 prn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prn(&has_bits);
          _impl_.prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 carrier_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_carrier_frequency(&has_bits);
          _impl_.carrier_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional double pseudorange = 4 [default = nan];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_pseudorange(&has_bits);
          _impl_.pseudorange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float pseudorange_std_dev = 5 [default = nan];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_pseudorange_std_dev(&has_bits);
          _impl_.pseudorange_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double carrier_phase = 6 [default = nan];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_carrier_phase(&has_bits);
          _impl_.carrier_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float carrier_phase_std_dev = 7 [default = nan];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_carrier_phase_std_dev(&has_bits);
          _impl_.carrier_phase_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float doppler = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_doppler(&has_bits);
          _impl_.doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float doppler_std_dev = 9 [default = nan];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_doppler_std_dev(&has_bits);
          _impl_.doppler_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cno = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cno(&has_bits);
          _impl_.cno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lock_time = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_lock_time(&has_bits);
          _impl_.lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RangeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_constellation(), target);
  }

  // optional int32 prn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_prn(), target);
  }

  // optional fixed32 carrier_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_carrier_frequency(), target);
  }

  // optional double pseudorange = 4 [default = nan];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_pseudorange(), target);
  }

  // optional float pseudorange_std_dev = 5 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pseudorange_std_dev(), target);
  }

  // optional double carrier_phase = 6 [default = nan];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_carrier_phase(), target);
  }

  // optional float carrier_phase_std_dev = 7 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_carrier_phase_std_dev(), target);
  }

  // optional float doppler = 8 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_doppler(), target);
  }

  // optional float doppler_std_dev = 9 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_doppler_std_dev(), target);
  }

  // optional int32 cno = 10 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_cno(), target);
  }

  // optional int32 lock_time = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_lock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RangeInfo)
  return target;
}

size_t RangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RangeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_constellation());
    }

    // optional int32 prn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prn());
    }

    // optional fixed32 carrier_frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional double pseudorange = 4 [default = nan];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 6 [default = nan];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float pseudorange_std_dev = 5 [default = nan];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float carrier_phase_std_dev = 7 [default = nan];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float doppler = 8 [default = nan];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float doppler_std_dev = 9 [default = nan];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 cno = 10 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cno());
    }

    // optional int32 lock_time = 11 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lock_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeInfo::GetClassData() const { return &_class_data_; }

void RangeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RangeInfo *>(to)->MergeFrom(
      static_cast<const RangeInfo &>(from));
}


void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.constellation_ = from._impl_.constellation_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.prn_ = from._impl_.prn_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.carrier_frequency_ = from._impl_.carrier_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pseudorange_ = from._impl_.pseudorange_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.carrier_phase_ = from._impl_.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pseudorange_std_dev_ = from._impl_.pseudorange_std_dev_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.carrier_phase_std_dev_ = from._impl_.carrier_phase_std_dev_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.doppler_ = from._impl_.doppler_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.doppler_std_dev_ = from._impl_.doppler_std_dev_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.cno_ = from._impl_.cno_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.lock_time_ = from._impl_.lock_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {
  return true;
}

void RangeInfo::InternalSwap(RangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeInfo, _impl_.carrier_frequency_)
      + sizeof(RangeInfo::_impl_.carrier_frequency_)
      - PROTOBUF_FIELD_OFFSET(RangeInfo, _impl_.constellation_)>(
          reinterpret_cast<char*>(&_impl_.constellation_),
          reinterpret_cast<char*>(&other->_impl_.constellation_));
  swap(_impl_.pseudorange_, other->_impl_.pseudorange_);
  swap(_impl_.carrier_phase_, other->_impl_.carrier_phase_);
  swap(_impl_.pseudorange_std_dev_, other->_impl_.pseudorange_std_dev_);
  swap(_impl_.carrier_phase_std_dev_, other->_impl_.carrier_phase_std_dev_);
  swap(_impl_.doppler_, other->_impl_.doppler_);
  swap(_impl_.doppler_std_dev_, other->_impl_.doppler_std_dev_);
  swap(_impl_.cno_, other->_impl_.cno_);
  swap(_impl_.lock_time_, other->_impl_.lock_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[1]);
}

// ===================================================================

class GnssRange::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssRange>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const GnssRange* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
GnssRange::_Internal::header(const GnssRange* msg) {
  return *msg->_impl_.header_;
}
void GnssRange::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GnssRange::GnssRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss.GnssRange)
}
GnssRange::GnssRange(const GnssRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_){from._impl_.ranges_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.measurement_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.measurement_time_ = from._impl_.measurement_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssRange)
}

inline void GnssRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.measurement_time_){0}
  };
}

GnssRange::~GnssRange() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GnssRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.measurement_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          _impl_.measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssRange)
  return target;
}

size_t GnssRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->_impl_.ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GnssRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssRange::GetClassData() const { return &_class_data_; }

void GnssRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GnssRange *>(to)->MergeFrom(
      static_cast<const GnssRange &>(from));
}


void GnssRange::MergeFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.ranges_.MergeFrom(from._impl_.ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.measurement_time_ = from._impl_.measurement_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssRange::CopyFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssRange::IsInitialized() const {
  return true;
}

void GnssRange::InternalSwap(GnssRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssRange, _impl_.measurement_time_)
      + sizeof(GnssRange::_impl_.measurement_time_)
      - PROTOBUF_FIELD_OFFSET(GnssRange, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::Gnss*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Gnss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::Gnss >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::RangeInfo*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::RangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::RangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GnssRange*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss::GnssRange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
