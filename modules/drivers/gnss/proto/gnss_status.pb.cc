// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_status.proto

#include "modules/drivers/gnss/proto/gnss_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace drivers {
namespace gnss_status {
PROTOBUF_CONSTEXPR StreamStatus::StreamStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.ins_stream_type_)*/0
  , /*decltype(_impl_.rtk_stream_in_type_)*/0
  , /*decltype(_impl_.rtk_stream_out_type_)*/0} {}
struct StreamStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStatusDefaultTypeInternal() {}
  union {
    StreamStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStatusDefaultTypeInternal _StreamStatus_default_instance_;
PROTOBUF_CONSTEXPR InsStatus::InsStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct InsStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsStatusDefaultTypeInternal() {}
  union {
    InsStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsStatusDefaultTypeInternal _InsStatus_default_instance_;
PROTOBUF_CONSTEXPR GnssStatus::GnssStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.solution_completed_)*/false
  , /*decltype(_impl_.solution_status_)*/0u
  , /*decltype(_impl_.position_type_)*/0u
  , /*decltype(_impl_.num_sats_)*/0} {}
struct GnssStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GnssStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GnssStatusDefaultTypeInternal() {}
  union {
    GnssStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GnssStatusDefaultTypeInternal _GnssStatus_default_instance_;
}  // namespace gnss_status
}  // namespace drivers
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _impl_.ins_stream_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _impl_.rtk_stream_in_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::StreamStatus, _impl_.rtk_stream_out_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::InsStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::InsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::InsStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::InsStatus, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_.solution_completed_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_.solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_.position_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss_status::GnssStatus, _impl_.num_sats_),
  0,
  1,
  2,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::drivers::gnss_status::StreamStatus)},
  { 14, 22, -1, sizeof(::apollo::drivers::gnss_status::InsStatus)},
  { 24, 35, -1, sizeof(::apollo::drivers::gnss_status::GnssStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::drivers::gnss_status::_StreamStatus_default_instance_._instance,
  &::apollo::drivers::gnss_status::_InsStatus_default_instance_._instance,
  &::apollo::drivers::gnss_status::_GnssStatus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/drivers/gnss/proto/gnss_status"
  ".proto\022\032apollo.drivers.gnss_status\032!modu"
  "les/common/proto/header.proto\"\347\002\n\014Stream"
  "Status\022%\n\006header\030\001 \001(\0132\025.apollo.common.H"
  "eader\022T\n\017ins_stream_type\030\002 \001(\0162-.apollo."
  "drivers.gnss_status.StreamStatus.Type:\014D"
  "ISCONNECTED\022W\n\022rtk_stream_in_type\030\003 \001(\0162"
  "-.apollo.drivers.gnss_status.StreamStatu"
  "s.Type:\014DISCONNECTED\022X\n\023rtk_stream_out_t"
  "ype\030\004 \001(\0162-.apollo.drivers.gnss_status.S"
  "treamStatus.Type:\014DISCONNECTED\"\'\n\004Type\022\020"
  "\n\014DISCONNECTED\020\000\022\r\n\tCONNECTED\020\001\"\244\001\n\tInsS"
  "tatus\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
  "ader\022A\n\004type\030\002 \001(\0162*.apollo.drivers.gnss"
  "_status.InsStatus.Type:\007INVALID\"-\n\004Type\022"
  "\013\n\007INVALID\020\000\022\016\n\nCONVERGING\020\001\022\010\n\004GOOD\020\002\"\241"
  "\001\n\nGnssStatus\022%\n\006header\030\001 \001(\0132\025.apollo.c"
  "ommon.Header\022!\n\022solution_completed\030\002 \001(\010"
  ":\005false\022\032\n\017solution_status\030\003 \001(\r:\0010\022\030\n\rp"
  "osition_type\030\004 \001(\r:\0010\022\023\n\010num_sats\030\005 \001(\005:"
  "\0010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto = {
    false, false, 802, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto,
    "modules/drivers/gnss/proto/gnss_status.proto",
    &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto::offsets,
    file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto,
    file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
namespace apollo {
namespace drivers {
namespace gnss_status {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamStatus_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[0];
}
bool StreamStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamStatus_Type StreamStatus::DISCONNECTED;
constexpr StreamStatus_Type StreamStatus::CONNECTED;
constexpr StreamStatus_Type StreamStatus::Type_MIN;
constexpr StreamStatus_Type StreamStatus::Type_MAX;
constexpr int StreamStatus::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsStatus_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[1];
}
bool InsStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InsStatus_Type InsStatus::INVALID;
constexpr InsStatus_Type InsStatus::CONVERGING;
constexpr InsStatus_Type InsStatus::GOOD;
constexpr InsStatus_Type InsStatus::Type_MIN;
constexpr InsStatus_Type InsStatus::Type_MAX;
constexpr int InsStatus::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StreamStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const StreamStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ins_stream_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtk_stream_in_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtk_stream_out_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
StreamStatus::_Internal::header(const StreamStatus* msg) {
  return *msg->_impl_.header_;
}
void StreamStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StreamStatus::StreamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss_status.StreamStatus)
}
StreamStatus::StreamStatus(const StreamStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.ins_stream_type_){}
    , decltype(_impl_.rtk_stream_in_type_){}
    , decltype(_impl_.rtk_stream_out_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.ins_stream_type_, &from._impl_.ins_stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rtk_stream_out_type_) -
    reinterpret_cast<char*>(&_impl_.ins_stream_type_)) + sizeof(_impl_.rtk_stream_out_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.StreamStatus)
}

inline void StreamStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.ins_stream_type_){0}
    , decltype(_impl_.rtk_stream_in_type_){0}
    , decltype(_impl_.rtk_stream_out_type_){0}
  };
}

StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.StreamStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void StreamStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.StreamStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.ins_stream_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rtk_stream_out_type_) -
        reinterpret_cast<char*>(&_impl_.ins_stream_type_)) + sizeof(_impl_.rtk_stream_out_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(val))) {
            _internal_set_ins_stream_type(static_cast<::apollo::drivers::gnss_status::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(val))) {
            _internal_set_rtk_stream_in_type(static_cast<::apollo::drivers::gnss_status::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss_status::StreamStatus_Type_IsValid(val))) {
            _internal_set_rtk_stream_out_type(static_cast<::apollo::drivers::gnss_status::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.StreamStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ins_stream_type(), target);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rtk_stream_in_type(), target);
  }

  // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rtk_stream_out_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.StreamStatus)
  return target;
}

size_t StreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.StreamStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ins_stream_type());
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rtk_stream_in_type());
    }

    // optional .apollo.drivers.gnss_status.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rtk_stream_out_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamStatus::GetClassData() const { return &_class_data_; }

void StreamStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamStatus *>(to)->MergeFrom(
      static_cast<const StreamStatus &>(from));
}


void StreamStatus::MergeFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ins_stream_type_ = from._impl_.ins_stream_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rtk_stream_in_type_ = from._impl_.rtk_stream_in_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.rtk_stream_out_type_ = from._impl_.rtk_stream_out_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatus::IsInitialized() const {
  return true;
}

void StreamStatus::InternalSwap(StreamStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.rtk_stream_out_type_)
      + sizeof(StreamStatus::_impl_.rtk_stream_out_type_)
      - PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[0]);
}

// ===================================================================

class InsStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<InsStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const InsStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
InsStatus::_Internal::header(const InsStatus* msg) {
  return *msg->_impl_.header_;
}
void InsStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InsStatus::InsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss_status.InsStatus)
}
InsStatus::InsStatus(const InsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.InsStatus)
}

inline void InsStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

InsStatus::~InsStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.InsStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void InsStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.InsStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss_status::InsStatus_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss_status::InsStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.InsStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.InsStatus)
  return target;
}

size_t InsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.InsStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.drivers.gnss_status.InsStatus.Type type = 2 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsStatus::GetClassData() const { return &_class_data_; }

void InsStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsStatus *>(to)->MergeFrom(
      static_cast<const InsStatus &>(from));
}


void InsStatus::MergeFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsStatus::CopyFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStatus::IsInitialized() const {
  return true;
}

void InsStatus::InternalSwap(InsStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsStatus, _impl_.type_)
      + sizeof(InsStatus::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(InsStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[1]);
}

// ===================================================================

class GnssStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const GnssStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solution_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_sats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
GnssStatus::_Internal::header(const GnssStatus* msg) {
  return *msg->_impl_.header_;
}
void GnssStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GnssStatus::GnssStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.gnss_status.GnssStatus)
}
GnssStatus::GnssStatus(const GnssStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.solution_completed_){}
    , decltype(_impl_.solution_status_){}
    , decltype(_impl_.position_type_){}
    , decltype(_impl_.num_sats_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.solution_completed_, &from._impl_.solution_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_sats_) -
    reinterpret_cast<char*>(&_impl_.solution_completed_)) + sizeof(_impl_.num_sats_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss_status.GnssStatus)
}

inline void GnssStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.solution_completed_){false}
    , decltype(_impl_.solution_status_){0u}
    , decltype(_impl_.position_type_){0u}
    , decltype(_impl_.num_sats_){0}
  };
}

GnssStatus::~GnssStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss_status.GnssStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GnssStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GnssStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GnssStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss_status.GnssStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.solution_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_sats_) -
        reinterpret_cast<char*>(&_impl_.solution_completed_)) + sizeof(_impl_.num_sats_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool solution_completed = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_solution_completed(&has_bits);
          _impl_.solution_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 solution_status = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_solution_status(&has_bits);
          _impl_.solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_type = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_position_type(&has_bits);
          _impl_.position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_sats = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_sats(&has_bits);
          _impl_.num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss_status.GnssStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional bool solution_completed = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_solution_completed(), target);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_solution_status(), target);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_position_type(), target);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_sats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss_status.GnssStatus)
  return target;
}

size_t GnssStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss_status.GnssStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional bool solution_completed = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 solution_status = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_solution_status());
    }

    // optional uint32 position_type = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_type());
    }

    // optional int32 num_sats = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_sats());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GnssStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssStatus::GetClassData() const { return &_class_data_; }

void GnssStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GnssStatus *>(to)->MergeFrom(
      static_cast<const GnssStatus &>(from));
}


void GnssStatus::MergeFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss_status.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.solution_completed_ = from._impl_.solution_completed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.solution_status_ = from._impl_.solution_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.position_type_ = from._impl_.position_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.num_sats_ = from._impl_.num_sats_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssStatus::CopyFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss_status.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssStatus::IsInitialized() const {
  return true;
}

void GnssStatus::InternalSwap(GnssStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssStatus, _impl_.num_sats_)
      + sizeof(GnssStatus::_impl_.num_sats_)
      - PROTOBUF_FIELD_OFFSET(GnssStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_getter, &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_status
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss_status::StreamStatus*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss_status::StreamStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss_status::StreamStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss_status::InsStatus*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss_status::InsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss_status::InsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss_status::GnssStatus*
Arena::CreateMaybeMessage< ::apollo::drivers::gnss_status::GnssStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::gnss_status::GnssStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
