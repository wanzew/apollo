// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/monitor/proto/monitor_conf.proto

#include "modules/monitor/proto/monitor_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace monitor {
PROTOBUF_CONSTEXPR ProcessConf::ProcessConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_cmd_keywords_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessConfDefaultTypeInternal() {}
  union {
    ProcessConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessConfDefaultTypeInternal _ProcessConf_default_instance_;
PROTOBUF_CONSTEXPR ProcessStatus::ProcessStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.running_)*/false} {}
struct ProcessStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatusDefaultTypeInternal() {}
  union {
    ProcessStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatusDefaultTypeInternal _ProcessStatus_default_instance_;
PROTOBUF_CONSTEXPR TopicConf::TopicConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.acceptable_delay_)*/3} {}
struct TopicConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicConfDefaultTypeInternal() {}
  union {
    TopicConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicConfDefaultTypeInternal _TopicConf_default_instance_;
PROTOBUF_CONSTEXPR TopicStatus::TopicStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_delay_)*/0} {}
struct TopicStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicStatusDefaultTypeInternal() {}
  union {
    TopicStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicStatusDefaultTypeInternal _TopicStatus_default_instance_;
PROTOBUF_CONSTEXPR MonitorConf_ModuleConf::MonitorConf_ModuleConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_conf_)*/nullptr
  , /*decltype(_impl_.topic_conf_)*/nullptr} {}
struct MonitorConf_ModuleConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorConf_ModuleConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorConf_ModuleConfDefaultTypeInternal() {}
  union {
    MonitorConf_ModuleConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorConf_ModuleConfDefaultTypeInternal _MonitorConf_ModuleConf_default_instance_;
PROTOBUF_CONSTEXPR MonitorConf_HardwareConf::MonitorConf_HardwareConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_conf_)*/nullptr} {}
struct MonitorConf_HardwareConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorConf_HardwareConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorConf_HardwareConfDefaultTypeInternal() {}
  union {
    MonitorConf_HardwareConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorConf_HardwareConfDefaultTypeInternal _MonitorConf_HardwareConf_default_instance_;
PROTOBUF_CONSTEXPR MonitorConf::MonitorConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_.hardware_)*/{}
  , /*decltype(_impl_.online_report_endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MonitorConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorConfDefaultTypeInternal() {}
  union {
    MonitorConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorConfDefaultTypeInternal _MonitorConf_default_instance_;
}  // namespace monitor
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ProcessConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ProcessConf, _impl_.process_cmd_keywords_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ProcessStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ProcessStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ProcessStatus, _impl_.running_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicConf, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicConf, _impl_.acceptable_delay_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::TopicStatus, _impl_.message_delay_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_ModuleConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_ModuleConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_ModuleConf, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_ModuleConf, _impl_.process_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_ModuleConf, _impl_.topic_conf_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_HardwareConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_HardwareConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_HardwareConf, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf_HardwareConf, _impl_.topic_conf_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf, _impl_.hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::MonitorConf, _impl_.online_report_endpoint_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::monitor::ProcessConf)},
  { 7, 14, -1, sizeof(::apollo::monitor::ProcessStatus)},
  { 15, 23, -1, sizeof(::apollo::monitor::TopicConf)},
  { 25, 32, -1, sizeof(::apollo::monitor::TopicStatus)},
  { 33, 42, -1, sizeof(::apollo::monitor::MonitorConf_ModuleConf)},
  { 45, 53, -1, sizeof(::apollo::monitor::MonitorConf_HardwareConf)},
  { 55, 64, -1, sizeof(::apollo::monitor::MonitorConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::monitor::_ProcessConf_default_instance_._instance,
  &::apollo::monitor::_ProcessStatus_default_instance_._instance,
  &::apollo::monitor::_TopicConf_default_instance_._instance,
  &::apollo::monitor::_TopicStatus_default_instance_._instance,
  &::apollo::monitor::_MonitorConf_ModuleConf_default_instance_._instance,
  &::apollo::monitor::_MonitorConf_HardwareConf_default_instance_._instance,
  &::apollo::monitor::_MonitorConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/monitor/proto/monitor_conf.pro"
  "to\022\016apollo.monitor\0322modules/common/adapt"
  "ers/proto/adapter_config.proto\"+\n\013Proces"
  "sConf\022\034\n\024process_cmd_keywords\030\001 \003(\t\" \n\rP"
  "rocessStatus\022\017\n\007running\030\001 \001(\010\"h\n\tTopicCo"
  "nf\022>\n\004type\030\001 \001(\01620.apollo.common.adapter"
  ".AdapterConfig.MessageType\022\033\n\020acceptable"
  "_delay\030\002 \001(\001:\0013\"$\n\013TopicStatus\022\025\n\rmessag"
  "e_delay\030\001 \001(\001\"\355\002\n\013MonitorConf\0227\n\007modules"
  "\030\001 \003(\0132&.apollo.monitor.MonitorConf.Modu"
  "leConf\022:\n\010hardware\030\002 \003(\0132(.apollo.monito"
  "r.MonitorConf.HardwareConf\022\036\n\026online_rep"
  "ort_endpoint\030\003 \001(\t\032|\n\nModuleConf\022\014\n\004name"
  "\030\001 \001(\t\0221\n\014process_conf\030\002 \001(\0132\033.apollo.mo"
  "nitor.ProcessConf\022-\n\ntopic_conf\030\003 \001(\0132\031."
  "apollo.monitor.TopicConf\032K\n\014HardwareConf"
  "\022\014\n\004name\030\001 \001(\t\022-\n\ntopic_conf\030\002 \001(\0132\031.apo"
  "llo.monitor.TopicConf"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fadapters_2fproto_2fadapter_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto = {
    false, false, 701, descriptor_table_protodef_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto,
    "modules/monitor/proto/monitor_conf.proto",
    &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once, descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto::offsets,
    file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto, file_level_enum_descriptors_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto,
    file_level_service_descriptors_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto(&descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto);
namespace apollo {
namespace monitor {

// ===================================================================

class ProcessConf::_Internal {
 public:
};

ProcessConf::ProcessConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.ProcessConf)
}
ProcessConf::ProcessConf(const ProcessConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.process_cmd_keywords_){from._impl_.process_cmd_keywords_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ProcessConf)
}

inline void ProcessConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.process_cmd_keywords_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessConf::~ProcessConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ProcessConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_cmd_keywords_.~RepeatedPtrField();
}

void ProcessConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ProcessConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_cmd_keywords_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string process_cmd_keywords = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_cmd_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.monitor.ProcessConf.process_cmd_keywords");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ProcessConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string process_cmd_keywords = 1;
  for (int i = 0, n = this->_internal_process_cmd_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_process_cmd_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ProcessConf.process_cmd_keywords");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ProcessConf)
  return target;
}

size_t ProcessConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ProcessConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmd_keywords = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.process_cmd_keywords_.size());
  for (int i = 0, n = _impl_.process_cmd_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.process_cmd_keywords_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessConf::GetClassData() const { return &_class_data_; }

void ProcessConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessConf *>(to)->MergeFrom(
      static_cast<const ProcessConf &>(from));
}


void ProcessConf::MergeFrom(const ProcessConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ProcessConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.process_cmd_keywords_.MergeFrom(from._impl_.process_cmd_keywords_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessConf::CopyFrom(const ProcessConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ProcessConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessConf::IsInitialized() const {
  return true;
}

void ProcessConf::InternalSwap(ProcessConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.process_cmd_keywords_.InternalSwap(&other->_impl_.process_cmd_keywords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[0]);
}

// ===================================================================

class ProcessStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStatus>()._impl_._has_bits_);
  static void set_has_running(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStatus::ProcessStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.ProcessStatus)
}
ProcessStatus::ProcessStatus(const ProcessStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.running_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.running_ = from._impl_.running_;
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ProcessStatus)
}

inline void ProcessStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.running_){false}
  };
}

ProcessStatus::~ProcessStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ProcessStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ProcessStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.running_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool running = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_running(&has_bits);
          _impl_.running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ProcessStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool running = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_running(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ProcessStatus)
  return target;
}

size_t ProcessStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ProcessStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool running = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStatus::GetClassData() const { return &_class_data_; }

void ProcessStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessStatus *>(to)->MergeFrom(
      static_cast<const ProcessStatus &>(from));
}


void ProcessStatus::MergeFrom(const ProcessStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ProcessStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_running()) {
    _internal_set_running(from._internal_running());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStatus::CopyFrom(const ProcessStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ProcessStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatus::IsInitialized() const {
  return true;
}

void ProcessStatus::InternalSwap(ProcessStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.running_, other->_impl_.running_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[1]);
}

// ===================================================================

class TopicConf::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicConf>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acceptable_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopicConf::TopicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.TopicConf)
}
TopicConf::TopicConf(const TopicConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.acceptable_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acceptable_delay_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.acceptable_delay_));
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.TopicConf)
}

inline void TopicConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.acceptable_delay_){3}
  };
}

TopicConf::~TopicConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.TopicConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TopicConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.TopicConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.type_ = 1;
    _impl_.acceptable_delay_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::common::adapter::AdapterConfig_MessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double acceptable_delay = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_acceptable_delay(&has_bits);
          _impl_.acceptable_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.TopicConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double acceptable_delay = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_acceptable_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.TopicConf)
  return target;
}

size_t TopicConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.TopicConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double acceptable_delay = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicConf::GetClassData() const { return &_class_data_; }

void TopicConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicConf *>(to)->MergeFrom(
      static_cast<const TopicConf &>(from));
}


void TopicConf::MergeFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.TopicConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.acceptable_delay_ = from._impl_.acceptable_delay_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicConf::CopyFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.TopicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConf::IsInitialized() const {
  return true;
}

void TopicConf::InternalSwap(TopicConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.acceptable_delay_, other->_impl_.acceptable_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[2]);
}

// ===================================================================

class TopicStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicStatus>()._impl_._has_bits_);
  static void set_has_message_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TopicStatus::TopicStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.TopicStatus)
}
TopicStatus::TopicStatus(const TopicStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_delay_ = from._impl_.message_delay_;
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.TopicStatus)
}

inline void TopicStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_delay_){0}
  };
}

TopicStatus::~TopicStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.TopicStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TopicStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.TopicStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_delay_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_delay(&has_bits);
          _impl_.message_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.TopicStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double message_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.TopicStatus)
  return target;
}

size_t TopicStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.TopicStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double message_delay = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicStatus::GetClassData() const { return &_class_data_; }

void TopicStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicStatus *>(to)->MergeFrom(
      static_cast<const TopicStatus &>(from));
}


void TopicStatus::MergeFrom(const TopicStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.TopicStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_delay()) {
    _internal_set_message_delay(from._internal_message_delay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicStatus::CopyFrom(const TopicStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.TopicStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicStatus::IsInitialized() const {
  return true;
}

void TopicStatus::InternalSwap(TopicStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.message_delay_, other->_impl_.message_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[3]);
}

// ===================================================================

class MonitorConf_ModuleConf::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitorConf_ModuleConf>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::monitor::ProcessConf& process_conf(const MonitorConf_ModuleConf* msg);
  static void set_has_process_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::monitor::TopicConf& topic_conf(const MonitorConf_ModuleConf* msg);
  static void set_has_topic_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::monitor::ProcessConf&
MonitorConf_ModuleConf::_Internal::process_conf(const MonitorConf_ModuleConf* msg) {
  return *msg->_impl_.process_conf_;
}
const ::apollo::monitor::TopicConf&
MonitorConf_ModuleConf::_Internal::topic_conf(const MonitorConf_ModuleConf* msg) {
  return *msg->_impl_.topic_conf_;
}
MonitorConf_ModuleConf::MonitorConf_ModuleConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.MonitorConf.ModuleConf)
}
MonitorConf_ModuleConf::MonitorConf_ModuleConf(const MonitorConf_ModuleConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.process_conf_){nullptr}
    , decltype(_impl_.topic_conf_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_process_conf()) {
    _impl_.process_conf_ = new ::apollo::monitor::ProcessConf(*from._impl_.process_conf_);
  }
  if (from._internal_has_topic_conf()) {
    _impl_.topic_conf_ = new ::apollo::monitor::TopicConf(*from._impl_.topic_conf_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf.ModuleConf)
}

inline void MonitorConf_ModuleConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.process_conf_){nullptr}
    , decltype(_impl_.topic_conf_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonitorConf_ModuleConf::~MonitorConf_ModuleConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf.ModuleConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorConf_ModuleConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.process_conf_;
  if (this != internal_default_instance()) delete _impl_.topic_conf_;
}

void MonitorConf_ModuleConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitorConf_ModuleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf.ModuleConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.process_conf_ != nullptr);
      _impl_.process_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.topic_conf_ != nullptr);
      _impl_.topic_conf_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorConf_ModuleConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.MonitorConf.ModuleConf.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.ProcessConf process_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.TopicConf topic_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorConf_ModuleConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf.ModuleConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.ModuleConf.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.monitor.ProcessConf process_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::process_conf(this),
        _Internal::process_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::topic_conf(this),
        _Internal::topic_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf.ModuleConf)
  return target;
}

size_t MonitorConf_ModuleConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf.ModuleConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.monitor.ProcessConf process_conf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.process_conf_);
    }

    // optional .apollo.monitor.TopicConf topic_conf = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_conf_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorConf_ModuleConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorConf_ModuleConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorConf_ModuleConf::GetClassData() const { return &_class_data_; }

void MonitorConf_ModuleConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorConf_ModuleConf *>(to)->MergeFrom(
      static_cast<const MonitorConf_ModuleConf &>(from));
}


void MonitorConf_ModuleConf::MergeFrom(const MonitorConf_ModuleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf.ModuleConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_process_conf()->::apollo::monitor::ProcessConf::MergeFrom(from._internal_process_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_topic_conf()->::apollo::monitor::TopicConf::MergeFrom(from._internal_topic_conf());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorConf_ModuleConf::CopyFrom(const MonitorConf_ModuleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf.ModuleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf_ModuleConf::IsInitialized() const {
  return true;
}

void MonitorConf_ModuleConf::InternalSwap(MonitorConf_ModuleConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorConf_ModuleConf, _impl_.topic_conf_)
      + sizeof(MonitorConf_ModuleConf::_impl_.topic_conf_)
      - PROTOBUF_FIELD_OFFSET(MonitorConf_ModuleConf, _impl_.process_conf_)>(
          reinterpret_cast<char*>(&_impl_.process_conf_),
          reinterpret_cast<char*>(&other->_impl_.process_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorConf_ModuleConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[4]);
}

// ===================================================================

class MonitorConf_HardwareConf::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitorConf_HardwareConf>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::monitor::TopicConf& topic_conf(const MonitorConf_HardwareConf* msg);
  static void set_has_topic_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::monitor::TopicConf&
MonitorConf_HardwareConf::_Internal::topic_conf(const MonitorConf_HardwareConf* msg) {
  return *msg->_impl_.topic_conf_;
}
MonitorConf_HardwareConf::MonitorConf_HardwareConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.MonitorConf.HardwareConf)
}
MonitorConf_HardwareConf::MonitorConf_HardwareConf(const MonitorConf_HardwareConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.topic_conf_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_topic_conf()) {
    _impl_.topic_conf_ = new ::apollo::monitor::TopicConf(*from._impl_.topic_conf_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf.HardwareConf)
}

inline void MonitorConf_HardwareConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.topic_conf_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonitorConf_HardwareConf::~MonitorConf_HardwareConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf.HardwareConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorConf_HardwareConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.topic_conf_;
}

void MonitorConf_HardwareConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitorConf_HardwareConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf.HardwareConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.topic_conf_ != nullptr);
      _impl_.topic_conf_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorConf_HardwareConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.MonitorConf.HardwareConf.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.TopicConf topic_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorConf_HardwareConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf.HardwareConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.HardwareConf.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.monitor.TopicConf topic_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topic_conf(this),
        _Internal::topic_conf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf.HardwareConf)
  return target;
}

size_t MonitorConf_HardwareConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf.HardwareConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.monitor.TopicConf topic_conf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_conf_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorConf_HardwareConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorConf_HardwareConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorConf_HardwareConf::GetClassData() const { return &_class_data_; }

void MonitorConf_HardwareConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorConf_HardwareConf *>(to)->MergeFrom(
      static_cast<const MonitorConf_HardwareConf &>(from));
}


void MonitorConf_HardwareConf::MergeFrom(const MonitorConf_HardwareConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf.HardwareConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_topic_conf()->::apollo::monitor::TopicConf::MergeFrom(from._internal_topic_conf());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorConf_HardwareConf::CopyFrom(const MonitorConf_HardwareConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf.HardwareConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf_HardwareConf::IsInitialized() const {
  return true;
}

void MonitorConf_HardwareConf::InternalSwap(MonitorConf_HardwareConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.topic_conf_, other->_impl_.topic_conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorConf_HardwareConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[5]);
}

// ===================================================================

class MonitorConf::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitorConf>()._impl_._has_bits_);
  static void set_has_online_report_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MonitorConf::MonitorConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.MonitorConf)
}
MonitorConf::MonitorConf(const MonitorConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modules_){from._impl_.modules_}
    , decltype(_impl_.hardware_){from._impl_.hardware_}
    , decltype(_impl_.online_report_endpoint_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.online_report_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.online_report_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_online_report_endpoint()) {
    _impl_.online_report_endpoint_.Set(from._internal_online_report_endpoint(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.MonitorConf)
}

inline void MonitorConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modules_){arena}
    , decltype(_impl_.hardware_){arena}
    , decltype(_impl_.online_report_endpoint_){}
  };
  _impl_.online_report_endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.online_report_endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonitorConf::~MonitorConf() {
  // @@protoc_insertion_point(destructor:apollo.monitor.MonitorConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
  _impl_.hardware_.~RepeatedPtrField();
  _impl_.online_report_endpoint_.Destroy();
}

void MonitorConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonitorConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.MonitorConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _impl_.hardware_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.online_report_endpoint_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hardware(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string online_report_endpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_online_report_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.MonitorConf.online_report_endpoint");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.MonitorConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hardware_size()); i < n; i++) {
    const auto& repfield = this->_internal_hardware(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string online_report_endpoint = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_online_report_endpoint().data(), static_cast<int>(this->_internal_online_report_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.MonitorConf.online_report_endpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_online_report_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.MonitorConf)
  return target;
}

size_t MonitorConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.MonitorConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  total_size += 1UL * this->_internal_hardware_size();
  for (const auto& msg : this->_impl_.hardware_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string online_report_endpoint = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_online_report_endpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorConf::GetClassData() const { return &_class_data_; }

void MonitorConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorConf *>(to)->MergeFrom(
      static_cast<const MonitorConf &>(from));
}


void MonitorConf::MergeFrom(const MonitorConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.MonitorConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.hardware_.MergeFrom(from._impl_.hardware_);
  if (from._internal_has_online_report_endpoint()) {
    _internal_set_online_report_endpoint(from._internal_online_report_endpoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorConf::CopyFrom(const MonitorConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.MonitorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorConf::IsInitialized() const {
  return true;
}

void MonitorConf::InternalSwap(MonitorConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  _impl_.hardware_.InternalSwap(&other->_impl_.hardware_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.online_report_endpoint_, lhs_arena,
      &other->_impl_.online_report_endpoint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::monitor::ProcessConf*
Arena::CreateMaybeMessage< ::apollo::monitor::ProcessConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::ProcessConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::ProcessStatus*
Arena::CreateMaybeMessage< ::apollo::monitor::ProcessStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::ProcessStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::TopicConf*
Arena::CreateMaybeMessage< ::apollo::monitor::TopicConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::TopicConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::TopicStatus*
Arena::CreateMaybeMessage< ::apollo::monitor::TopicStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::TopicStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::MonitorConf_ModuleConf*
Arena::CreateMaybeMessage< ::apollo::monitor::MonitorConf_ModuleConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::MonitorConf_ModuleConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::MonitorConf_HardwareConf*
Arena::CreateMaybeMessage< ::apollo::monitor::MonitorConf_HardwareConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::MonitorConf_HardwareConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::MonitorConf*
Arena::CreateMaybeMessage< ::apollo::monitor::MonitorConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::MonitorConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
